{"task_id": "JavaScript/0", "prompt": "/* Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const closestElements = []\n  for (let i = 0; i < numbers.length - 1; i++) {\n    let first = numbers[i]\n    let second = numbers[i + 1]\n    if (Math.abs(first - second) < threshold) {\n      closestElements.push(first)\n    }\n  }\n  return closestElements.length > 1\n}\n\n/*\n  Given a list of numbers, returns largest element and its index.\n  >>> maxAndIndex([1, 2, 3, 4])\n  [4, 3]\n  >>> maxAndIndex([1, 2, 3, 4, 5, 6, 7])\n  [7, 6]\n  >>> maxAndIndex([])\n  [null, null]\n  >>> maxAndIndex([1])\n  [1, 0]\n  */\nconst maxAndIndex = (numbers) => {\n  if (numbers.length === 0) {\n    return [null, null]\n  }\n  const max = numbers[0]\n  const maxIndex = 0\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      [max, maxIndex] = [numbers[i], i]\n    }\n  }\n  return [max, maxIndex]\n}\n\n/*\n  Given a list of numbers, returns largest element and its index.\n  >>> maxAndIndex2([1, 2, 3, 4])\n  [4, 3]\n  >>> maxAndIndex2([1, 2, 3, 4, 5, 6, 7])\n  [7, 6]\n  >>> maxAndIndex2([])\n  [null, null]\n  >>> maxAndIndex2([1])\n  [1, 0]\n  */\nconst maxAndIndex2 = (numbers) => {\n  const max = numbers[0]\n  const maxIndex = 0\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      [max, maxIndex] = [numbers[i], i]\n    }\n  }\n  return [max, maxIndex]\n}\n\n/*\n  Given a list of numbers, returns the smallest number and its index.\n  >>> minAndIndex([1, 2, 3, 4])\n  [1, 0]\n  >>> minAndIndex([1, 2, 3, 4, 5, 6, 7])\n  [1, 2]\n  >>> minAndIndex([])\n  [null, null]\n  >>> minAndIndex([1])\n  [1, 0]\n  */\nconst minAndIndex = (numbers) => {\n  if (numbers.length === 0) {\n    return [null, null]\n  }\n  const min = numbers[0]\n  const minIndex = 0\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      [min, minIndex] = [numbers[i], i]\n    }\n  }\n  return [min, minIndex]\n}\n\n/*\n  Given a list of numbers, returns the smallest number and its index.\n  >>> minAndIndex2([1, 2, 3, 4])\n  [1, 0]\n  >>> minAndIndex2([1, 2, 3, 4, 5, 6, 7])\n  [1, 2]\n  >>> minAndIndex2([])\n  [null, null]\n  >>> minAndIndex2([1])\n  [1, 0]\n  */\nconst minAndIndex2 = (numbers) => {\n  const min = numbers[0]\n  const minIndex = 0\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      [min, minIndex] = [numbers[i], i]\n    }\n  }\n  return [min, minIndex]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  paren_string = paren_string.replace(/\\s/g, '');\n  let str_arr = paren_string.split(/\\(|\\)/);\n  let arr_arr = [];\n  for (let i = 0; i < str_arr.length; i++) {\n    if (str_arr[i].length === 1 && str_arr[i] === '(') {\n      arr_arr.push(str_arr[i]);\n    } else if (str_arr[i].length === 1 && str_arr[i] === ')') {\n      if (arr_arr.length) {\n        arr_arr.push(str_arr[i]);\n      }\n    } else {\n      if (arr_arr.length) {\n        arr_arr.push(str_arr[i]);\n      }\n    }\n  }\n  return arr_arr;\n};\n\n/*\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst testSeparateParenGroups = () => {\n  let paren_string = '( ) (( )) (( )( ))';\n  let arr_arr = separateParenGroups(paren_string);\n  console.log(arr_arr);\n};\n\ntestSeparateParenGroups();\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const num = parseFloat(number);\n  let numStr = num.toString();\n  const len = numStr.length;\n  let index = numStr.indexOf(\".\")\n  if (index!== -1) {\n    let integer = numStr.substring(0, index);\n    let decimals = numStr.substring(index + 1, len);\n    return parseInt(integer);\n  } else {\n    return parseInt(numStr);\n  }\n}\n\n/* Given a positive floating point number, it will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const num = parseFloat(number);\n  let numStr = num.toString();\n  const len = numStr.length;\n  let index = numStr.indexOf(\".\")\n  if (index!== -1) {\n    let integer = numStr.substring(0, index);\n    let decimals = numStr.substring(index + 1, len);\n    return parseInt(integer);\n  } else {\n    return parseInt(numStr);\n  }\n}\n\n/* Given a positive floating point number, it will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const num = parseFloat(number);\n  let numStr = num.toString();\n  const len = numStr.length;\n  let index = numStr.indexOf(\".\")\n  if (index!== -1) {\n    let integer = numStr.substring(0, index);\n    let decimals = numStr.substring(index + 1, len);\n    return parseInt(integer);\n  } else {\n    return parseInt(numStr);\n  }\n}\n\n/* Given a positive floating point number, it will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const num = parseFloat(number);\n  let numStr = num.toString();\n  const len = numStr.length;\n  let index = numStr.indexOf(\".\")\n  if (index!== -1) {\n    let integer = numStr.substring(0, index);\n    let decimals = numStr.substring(index + 1, len);\n    return parseInt(integer);\n  } else {\n    return parseInt(numStr);\n  }\n}\n\n/* Given a positive floating point number, it will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const num = parseFloat(number);\n  let numStr = num.toString();\n  const len = numStr.length;\n  let index = numStr.indexOf(\".\")\n  if (index!== -1) {\n    let integer = numStr.substring(0, index);\n    let decimals = numStr.substring(index + 1, len);\n    return parseInt(integer);\n  } else {\n    return parseInt(numStr);\n  }\n}\n\n/* Given a positive floating point number, it will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const num = parseFloat(number);\n  let numStr = num.toString();\n  const len = numStr.length;\n  let index = numStr.indexOf(\".\")\n  if (index!== -1) {\n    let integer = numStr.substring(0, index);\n    let decimals = numStr.substring(index + 1, len);\n    return parseInt(integer);\n  } else {\n    return parseInt(numStr);\n  }\n}\n\n/* Given a positive floating point number, it will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const num = parseFloat(number);\n  let numStr = num.toString();\n  const len = numStr.length;\n  let index = numStr.indexOf(\".\")\n  if (index!== -1) {\n    let integer = numStr.substring(0, index);\n    let decimals = numStr.substring(index + 1, len);\n    return parseInt(integer);\n  } else {\n    return parseInt(numStr);\n  }\n}\n\n/* Given a positive floating point number, it will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const num = parseFloat(number);\n  let numStr = num.toString"}
{"task_id": "JavaScript/3", "prompt": "/* You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  let diff = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] > 0) {\n      sum += operations[i];\n    } else if (operations[i] < 0) {\n      diff += operations[i];\n    }\n  }\n  if (sum - diff < 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = meanOf(numbers);\n  return numbers.reduce((sum, n) => sum + Math.abs(n - mean), 0) / numbers.length;\n}\n\n/* \n   For a will give list of input numbers, calculate Standard Deviation. \n   Standard Deviation will be the square root of the variance.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.7320508075688772\n  */\nconst standardDeviation = (numbers) => {\n  const variance = varianceOf(numbers);\n  return Math.sqrt(variance);\n}\n\n/*\n   For a will give list of input numbers, calculate Variance.\n   Variance will be the square of the sum of the squared deviations from the mean.\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.25\n  */\nconst variance = (numbers) => {\n  const mean = meanOf(numbers);\n  const sum = numbers.reduce((sum, n) => sum + Math.pow(n - mean, 2), 0);\n  return sum / numbers.length;\n}\n\n/*\n   For a will give list of input numbers, calculate the R-Square of the Regression\n   of the data on the function y = x^2\n  >>> rSquare([1.0, 2.0, 3.0, 4.0])\n  0.984375\n  */\nconst rSquare = (numbers) => {\n  const x = numbers.map(n => n ** 2);\n  const y = x.reduce((sum, n) => sum + n, 0);\n  const sse = varianceOf(numbers);\n  const sst = standardDeviation(numbers);\n  const ssx = standardDeviation(x);\n  const ssy = standardDeviation(y);\n  return (y - (sst * ssy)) / (sse - (ssx * ssx));\n}\n\n/*\n   For a will give list of input numbers, calculate Pearson's R of the Regression\n   of the data on the function y = x^2\n  >>> pearsonR([1.0, 2.0, 3.0, 4.0])\n  0.984375\n  */\nconst pearsonR = (numbers) => {\n  const n = numbers.length;\n  const x = numbers.map(n => n ** 2);\n  const y = x.reduce((sum, n) => sum + n, 0);\n  const xMean = meanOf(numbers);\n  const yMean = meanOf(x);\n  const xSum = numbers.reduce((sum, n) => sum + Math.pow(n - xMean, 2), 0);\n  const ySum = x.reduce((sum, n) => sum + Math.pow(n - yMean, 2), 0);\n  return (y - (ySum * ySum / n)) / (xSum - (xSum * xSum / n));\n}\n\n/*\n   For a will give list of input numbers, calculate Pearson's R of the Regression\n   of the data on the function y = x^2\n  >>> spearmanR([1.0, 2.0, 3.0, 4.0])\n  0.984375\n  */\nconst spearmanR = (numbers) => {\n  const n = numbers.length;\n  const x = numbers.map(n => n ** 2);\n  const y = x.reduce((sum, n) => sum + n, 0);\n  const xMean = meanOf(numbers);\n  const yMean = meanOf(x);\n  const xSum = numbers.reduce((sum, n) => sum + Math.pow(n - xMean, 2), 0);\n  const ySum = x.reduce((sum, n) => sum + Math.pow(n - yMean, 2), 0);\n  const d = xSum - ySum;\n  const s = Math.sqrt(d);\n  return (y - (ySum * ySum / n)) / s;\n}\n\n/*\n   For a will give list of input numbers, calculate Kendall's tau of the \n   Regression of the data on the function y = x^2\n  >>> kendallTau([1.0, 2.0, 3.0, 4.0])\n  0.984375\n  */\nconst kendallTau = (numbers) => {\n  const n = numbers.length;\n  const x = numbers.map(n => n ** 2);\n  const y = x.reduce((sum, n) => sum + n, 0);\n  const xMean = meanOf(numbers);\n  const yMean = meanOf(x);\n  const xSum = numbers.reduce((sum, n) => sum + Math.pow(n - xMean, 2), 0);\n  const ySum = x.reduce((sum, n) => sum + Math.pow(n - yMean, 2), 0);\n  const d = xSum - ySum;\n  const s = Math.sqrt(d);\n  const xy = xSum * ySum;\n  const tau = (xy - (xSum * ySum / n)) / s;\n  return tau;\n}\n\n/*\n   For a will give list of input numbers, calculate the Sum of Squared Error\n   (SSE) of the regression of the data on the function y = x^2.\n  >>> sumOfSquaredErrors([1.0, 2.0, 3.0, 4.0])\n  1.25\n  */\nconst sumOfSquaredErrors = (numbers) => {\n  const n = numbers.length;\n  const x = numbers.map(n => n ** 2);\n  const y = x.reduce((sum, n) => sum + n, 0);\n  const xMean = meanOf(numbers);\n  const yMean = meanOf"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let list = []\n  if (numbers.length === 0) {\n    return list\n  }\n  for (let i = 0; i < numbers.length - 1; i++) {\n    list.push(numbers[i])\n  }\n  list.push(numbers[numbers.length - 1])\n  list.push(delimeter)\n  for (let i = 1; i < numbers.length - 1; i++) {\n    list.push(numbers[i])\n  }\n  return list\n}\n\n/**\n  * Returns the element with the largest index in the list `numbers'\n  * @param {Array} numbers - The list of numbers\n  * @return {Number}\n  * @example\n  *\n  *  >>> max(1, 2, 3, 4)\n  *  4\n  */\nconst max = (numbers) => {\n  let max = 0\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > numbers[max]) {\n      max = i\n    }\n  }\n  return numbers[max]\n}\n\n/**\n  * Returns the element with the smallest index in the list `numbers'\n  * @param {Array} numbers - The list of numbers\n  * @return {Number}\n  * @example\n  *\n  *  >>> min(1, 2, 3, 4)\n  *  1\n  */\nconst min = (numbers) => {\n  let min = 0\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < numbers[min]) {\n      min = i\n    }\n  }\n  return numbers[min]\n}\n\n/**\n  * Returns the element with the largest index in the list `numbers'\n  * @param {Array} numbers - The list of numbers\n  * @return {Number}\n  * @example\n  *\n  *  >>> max(1, 2, 3, 4)\n  *  4\n  */\nconst maxBy = (numbers, func) => {\n  let max = 0\n  for (let i = 1; i < numbers.length; i++) {\n    if (func(numbers[i], numbers[max])) {\n      max = i\n    }\n  }\n  return numbers[max]\n}\n\n/**\n  * Returns the element with the smallest index in the list `numbers'\n  * @param {Array} numbers - The list of numbers\n  * @return {Number}\n  * @example\n  *\n  *  >>> min(1, 2, 3, 4)\n  *  1\n  */\nconst minBy = (numbers, func) => {\n  let min = 0\n  for (let i = 1; i < numbers.length; i++) {\n    if (func(numbers[i], numbers[min])) {\n      min = i\n    }\n  }\n  return numbers[min]\n}\n\n/**\n  * Returns the element with the largest value in the list `numbers'\n  * @param {Array} numbers - The list of numbers\n  * @return {Number}\n  * @example\n  *\n  *  >>> max(1, 2, 3, 4)\n  *  4\n  */\nconst maxByValue = (numbers) => {\n  return maxBy(numbers, (n1, n2) => {\n    return n1 > n2\n  })\n}\n\n/**\n  * Returns the element with the smallest value in the list `numbers'\n  * @param {Array} numbers - The list of numbers\n  * @return {Number}\n  * @example\n  *\n  *  >>> min(1, 2, 3, 4)\n  *  1\n  */\nconst minByValue = (numbers) => {\n  return minBy(numbers, (n1, n2) => {\n    return n1 < n2\n  })\n}\n\n/**\n  * Returns the element with the largest value in the list `numbers'\n  * @param {Array} numbers - The list of numbers\n  * @return {Number}\n  * @example\n  *\n  *  >>> maxByValue(1, 2, 3, 4)\n  *  4\n  */\nconst maxByValueIncludingNaN = (numbers) => {\n  return maxBy(numbers, (n1, n2) => {\n    return n1 === n2? 0 : n1 > n2\n  })\n}\n\n/**\n  * Returns the element with the smallest value in the list `numbers'\n  * @param {Array} numbers - The list of numbers\n  * @return {Number}\n  * @example\n  *\n  *  >>> minByValue(1, 2, 3, 4)\n  *  1\n  */\nconst minByValueIncludingNaN = (numbers) => {\n  return minBy(numbers, (n1, n2) => {\n    return n1 === n2? 0 : n1 < n2\n  })\n}\n\nexport default {\n  intersperse,\n  max,\n  min,\n  maxBy,\n  minBy,\n  maxByValue,\n  minByValue,\n  maxByValueIncludingNaN,\n  minByValueIncludingNaN\n}\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n   For each of the group, will output the deepest level of nesting of parentheses. \n   E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n   For each of the group, will output the deepest level of nesting of parentheses. \n   E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let stack = [];\n  let paren_count = 0;\n  let is_group = false;\n  let stack_size = 0;\n  let last_space = -1;\n  let curr_index = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_count++;\n      is_group = true;\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n      is_group = false;\n    }\n    if (paren_count === 0 && is_group === true) {\n      stack_size++;\n    }\n    if (paren_count === 0 && is_group === false) {\n      stack_size--;\n    }\n    if (stack_size === 0 && is_group === true) {\n      stack.push(paren_string.substring(last_space + 1, i));\n      last_space = i;\n    }\n  }\n  return stack;\n};\n\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that will contain will give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that will contain will give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const returnArray = [];\n  const stringsLength = strings.length;\n  let currentString = 0;\n  let currentSubstring = 0;\n  while (currentString < stringsLength) {\n    if (strings[currentString].indexOf(substring)!== -1) {\n      returnArray.push(strings[currentString]);\n    }\n    currentSubstring = currentSubstring + 1;\n    if (strings[currentString].length < substring.length) {\n      currentString = currentString + 1;\n    } else {\n      currentString = currentString + substring.length;\n      currentSubstring = 0;\n    }\n  }\n  return returnArray;\n};\n\n/*\n  The most important function in the library. This function will be called\n  whenever the user clicks on a button, will filter the strings according to\n  the inputted values in the text box.\n  >>> filterBySubstring('abc', 'a')\n  []\n  >>> filterBySubstring('abc', 'b')\n  ['abc']\n  >>> filterBySubstring('abc', 'c')\n  ['abc']\n  >>> filterBySubstring('abc', 'd')\n  ['abc']\n  >>> filterBySubstring('abc', 'e')\n  ['abc']\n  >>> filterBySubstring('abc', 'f')\n  ['abc']\n  >>> filterBySubstring('abc', 'g')\n  ['abc']\n  >>> filterBySubstring('abc', 'h')\n  ['abc']\n  >>> filterBySubstring('abc', 'i')\n  ['abc']\n  >>> filterBySubstring('abc', 'j')\n  ['abc']\n  >>> filterBySubstring('abc', 'k')\n  ['abc']\n  >>> filterBySubstring('abc', 'l')\n  ['abc']\n  >>> filterBySubstring('abc','m')\n  ['abc']\n  >>> filterBySubstring('abc', 'n')\n  ['abc']\n  >>> filterBySubstring('abc', 'o')\n  ['abc']\n  >>> filterBySubstring('abc', 'p')\n  ['abc']\n  >>> filterBySubstring('abc', 'q')\n  ['abc']\n  >>> filterBySubstring('abc', 'r')\n  ['abc']\n  >>> filterBySubstring('abc','s')\n  ['abc']\n  >>> filterBySubstring('abc', 't')\n  ['abc']\n  >>> filterBySubstring('abc', 'u')\n  ['abc']\n  >>> filterBySubstring('abc', 'v')\n  ['abc']\n  >>> filterBySubstring('abc', 'w')\n  ['abc']\n  >>> filterBySubstring('abc', 'x')\n  ['abc']\n  >>> filterBySubstring('abc', 'y')\n  ['abc']\n  >>> filterBySubstring('abc', 'z')\n  ['abc']\n  >>> filterBySubstring('abc', 'aa')\n  []\n  >>> filterBySubstring('abc', 'bb')\n  []\n  >>> filterBySubstring('abc', 'cc')\n  []\n  >>> filterBySubstring('abc', 'dd')\n  []\n  >>> filterBySubstring('abc', 'ee')\n  []\n  >>> filterBySubstring('abc', 'ff')\n  []\n  >>> filterBySubstring('abc', 'gg')\n  []\n  >>> filterBySubstring('abc', 'hh')\n  []\n  >>> filterBySubstring('abc', 'ii')\n  []\n  >>> filterBySubstring('abc', 'jj')\n  []\n  >>> filterBySubstring('abc', 'kk')\n  []\n  >>> filterBySubstring('abc', 'll')\n  []\n  >>> filterBySubstring('abc','mm')\n  []\n  >>> filterBySubstring('abc', 'nn')\n  []\n  >>> filterBySubstring('abc', 'oo')\n  []\n  >>> filterBySubstring('abc', 'pp')\n  []\n  >>> filterBySubstring('abc', 'qq')\n  []\n  >>> filterBySubstring('abc', 'rr')\n  []\n  >>> filterBySubstring('abc','ss')\n  []\n  >>> filterBySubstring('abc', 'tt')\n  []\n  >>> filterBySubstring('abc', 'uu')\n  []\n  >>> filterBySubstring('abc', 'vv')\n  []\n  >>> filterBySubstring('abc', 'ww')\n  []\n  >>> filterBySubstring('abc', 'xx')\n  []\n  >>> filterBySubstring('abc', 'yy')\n  []\n  >>> filterBySubstring('abc', 'zz')\n  []\n  >>> filterBySubstring('abc', 'aaa')\n  []\n  >>> filterBySubstring('abc', 'bbb')\n  []\n  >>> filterBySubstring('abc', 'ccc')\n  []\n  >>> filterBySubstring('abc', 'ddd')\n  []\n  >>> filterBySubstring('abc', 'eee')\n  []\n  >>> filterBySubstring('abc', 'fff')\n  []\n  >>> filterBySubstring('abc', 'ggg')\n  []\n  >>> filterBySubstring('abc', 'hhh')\n  []\n  >>> filterBySubstring('abc', 'iii')\n  []\n  >>> filterBySubstring('abc', 'jjj')\n  []\n  >>> filterBySubstring('abc', 'kkk')\n  []\n  >>> filterBySubstring('abc', 'lll')\n  []\n  >>> filterBySubstring('abc','mmm')\n  []\n  >>> filterBySubstring('abc', 'nnn')\n  []\n  >>> filterBySubstring('abc', 'ooo')\n  []\n  >>> filterBySubstring('abc', 'ppp')\n  []\n  >>> filterBySubstring('abc', 'qqq')\n  []\n  >>> filterBySubstring('abc', 'rrr')\n  []\n  >>> filterBySubstring('abc','sss')\n  []\n  >>> filterBySubstring('abc', 'ttt')\n  []\n  >>> filterBySubstring('abc', 'uuu')\n  []\n  >>> filterBySubstring"}
{"task_id": "JavaScript/8", "prompt": "/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return sum, product\n}\n\n/*\n  Given a list of numbers, return a list of tuples where each tuple consists of the sum and product of all the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4, 5, 6])\n  [(10, 24), (15, 120)]\n  >>> sumProduct([])\n  []\n  >>> sumProduct([1, 2, 3])\n  [(3, 3), (6, 6)]\n  */\nconst sumProduct2 = (numbers, int) => {\n  return numbers.map(n => sumProduct(n, int))\n}\n\n/*\n  Given a list of numbers, return a list of all possible combinations of the list.\n  For example, if list = [1, 2, 3, 4, 5, 6] then the list of combinations is:\n  1, 2, 3\n  1, 2, 4\n  1, 2, 5\n  1, 2, 6\n  1, 3, 4\n  1, 3, 5\n  1, 3, 6\n  1, 4, 5\n  1, 4, 6\n  1, 5, 6\n  2, 3, 4\n  2, 3, 5\n  2, 3, 6\n  2, 4, 5\n  2, 4, 6\n  2, 5, 6\n  3, 4, 5\n  3, 4, 6\n  3, 5, 6\n  4, 5, 6\n  If list = [] then the list of combinations is:\n  []\n  */\nconst allCombinations = (numbers) => {\n  let combination = []\n  let combinationLength = 1\n  let combinationIndex = 0\n\n  while (combinationIndex < combinationLength) {\n    let combinationIndex = combinationIndex + 1\n    let combination = combination.concat([numbers.slice(combinationIndex - 1).concat([numbers[combinationIndex - 1]])])\n    combinationLength = combinationLength + 1\n  }\n\n  return combination\n}\n\n/*\n  Given a list of numbers, return a list of all possible combinations of the list.\n  For example, if list = [1, 2, 3, 4, 5, 6] then the list of combinations is:\n  1, 2, 3\n  1, 2, 4\n  1, 2, 5\n  1, 2, 6\n  1, 3, 4\n  1, 3, 5\n  1, 3, 6\n  1, 4, 5\n  1, 4, 6\n  1, 5, 6\n  2, 3, 4\n  2, 3, 5\n  2, 3, 6\n  2, 4, 5\n  2, 4, 6\n  2, 5, 6\n  3, 4, 5\n  3, 4, 6\n  3, 5, 6\n  4, 5, 6\n  If list = [] then the list of combinations is:\n  []\n  */\nconst allCombinations2 = (numbers) => {\n  let combination = []\n  let combinationLength = 1\n  let combinationIndex = 0\n  let index = 0\n\n  while (combinationIndex < combinationLength) {\n    let combinationIndex = combinationIndex + 1\n    let combination = combination.concat([numbers.slice(index, index + combinationIndex).concat([numbers[index]])])\n    combinationLength = combinationLength + 1\n    index = index + combinationIndex\n  }\n\n  return combination\n}\n\nmodule.exports = {\n  sumProduct,\n  sumProduct2,\n  allCombinations,\n  allCombinations2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a will give list of integers, will generate a list of rolling maximum element will find until will give moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a will give list of integers, will generate a list of rolling maximum element will find until will give moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const rollingMaxList = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let rollingMax = numbers[i];\n    for (let j = i + 1; j < numbers.length; j++) {\n      rollingMax = Math.max(rollingMax, numbers[j]);\n    }\n    rollingMaxList.push(rollingMax);\n  }\n  return rollingMaxList;\n};\n\nconst rollingMaxTest = (numbers) => {\n  rollingMax(numbers);\n};\n\nmodule.exports = rollingMaxTest;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig will be a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* will Find the shortest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig will be a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* will Find the shortest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let postfix = getLongestPalindrome(string)\n  let reversed = string.split('').reverse().join('')\n  return reversed + postfix\n}\n\n/* will return the longest palindrome that will begin with a string */\nconst getLongestPalindrome = (string) => {\n  let prefix = getLongestPrefix(string)\n  let postfix = getLongestPostfix(string)\n  return prefix + postfix\n}\n\n/* will return the longest prefix of string that will be a palindrome */\nconst getLongestPrefix = (string) => {\n  let reversed = string.split('').reverse().join('')\n  let longestPrefix = ''\n  for (let i = 0; i < reversed.length; i++) {\n    if (isPalindrome(reversed.substring(i, reversed.length))) {\n      longestPrefix += reversed.substring(i, reversed.length)\n    }\n  }\n  return longestPrefix\n}\n\n/* will return the longest postfix of string that will be a palindrome */\nconst getLongestPostfix = (string) => {\n  let reversed = string.split('').reverse().join('')\n  let longestPostfix = ''\n  for (let i = 0; i < reversed.length; i++) {\n    if (isPalindrome(reversed.substring(0, i + 1))) {\n      longestPostfix = reversed.substring(0, i + 1)\n    }\n  }\n  return longestPostfix\n}\n\n/* Testing Function */\nconst test = (string) => {\n  console.log(string, 'is', makePalindrome(string))\n}\n\n/* \n * Testing \n */\n\nconst test = (string) => {\n  console.log(string, 'is', makePalindrome(string))\n}\n\n/* \n * Testing \n */\n\nconst test = (string) => {\n  console.log(string, 'is', makePalindrome(string))\n}\n\n/* \n * Testing \n */\n\nconst test = (string) => {\n  console.log(string, 'is', makePalindrome(string))\n}\n\n/* \n * Testing \n */\n\nconst test = (string) => {\n  console.log(string, 'is', makePalindrome(string))\n}\n\n/* \n * Testing \n */\n\nconst test = (string) => {\n  console.log(string, 'is', makePalindrome(string))\n}\n\n/* \n * Testing \n */\n\nconst test = (string) => {\n  console.log(string, 'is', makePalindrome(string))\n}\n\n/* \n * Testing \n */\n\nconst test = (string) => {\n  console.log(string, 'is', makePalindrome(string))\n}\n\n/* \n * Testing \n */\n\nconst test = (string) => {\n  console.log(string, 'is', makePalindrome(string))\n}\n\n/* \n * Testing \n */\n\nconst test = (string) => {\n  console.log(string, 'is', makePalindrome(string))\n}\n\n/* \n * Testing \n */\n\nconst test = (string) => {\n  console.log(string, 'is', makePalindrome(string))\n}\n\n/* \n * Testing \n */\n\nconst test = (string) => {\n  console.log(string, 'is', makePalindrome(string))\n}\n\n/* \n * Testing \n */\n\nconst test = (string) => {\n  console.log(string, 'is', makePalindrome(string))\n}\n\n/* \n * Testing \n */\n\nconst test = (string) => {\n  console.log(string, 'is', makePalindrome(string))\n}\n\n/* \n * Testing \n */\n\nconst test = (string) => {\n  console.log(string, 'is', makePalindrome(string))\n}\n\n/* \n * Testing \n */\n\nconst test = (string) => {\n  console.log(string, 'is', makePalindrome(string))\n}\n\n/* \n * Testing \n */\n\nconst test = (string) => {\n  console.log(string, 'is', makePalindrome(string))\n}\n\n/* \n * Testing \n */\n\nconst test = (string) => {\n  console.log(string, 'is', makePalindrome(string))\n}\n\n/* \n * Testing \n */\n\nconst test = (string) => {\n  console.log(string, 'is', makePalindrome(string))\n}\n\n/* \n * Testing \n */\n\nconst test = (string) => {\n  console.log(string, 'is', makePalindrome(string))\n}\n\n/* \n * Testing \n */\n\nconst test = (string) => {\n  console.log(string, 'is', makePalindrome(string))\n}\n\n/* \n * Testing \n */\n\nconst test = (string) => {\n  console.log(string, 'is', makePalindrome(string))\n}\n\n/* \n * Testing \n */\n\nconst test = (string) => {\n  console.log(string, 'is', makePalindrome(string))\n}\n\n/* \n * Testing \n */\n\nconst test = (string) => {\n  console.log(string, 'is', makePalindrome(string))\n}\n\n/* \n * Testing \n */\n\nconst test = (string) => {\n  console.log(string,"}
{"task_id": "JavaScript/11", "prompt": "/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  //Check if a is larger than b\n  if (a.length > b.length) {\n    let larger = a;\n    let smaller = b;\n  } else {\n    let larger = b;\n    let smaller = a;\n  }\n\n  //Convert smaller string to array\n  let smallerArray = smaller.split('');\n  //Convert larger string to array\n  let largerArray = larger.split('');\n  let result = '';\n\n  //Iterate through smaller array and append to result\n  for (let i = 0; i < smallerArray.length; i++) {\n    let char = smallerArray[i];\n    let index = largerArray.indexOf(char);\n    if (index!= -1) {\n      //If index is not -1 then char is found in larger string\n      //Set the bit at index to 1\n      largerArray[index] = 1;\n    } else {\n      //If index is -1 then char is not found in larger string\n      //Set the bit at index to 0\n      largerArray[index] = 0;\n    }\n  }\n\n  //Iterate through larger array and append to result\n  for (let i = 0; i < smallerArray.length; i++) {\n    let char = largerArray[i];\n    if (char == 1) {\n      //If char is 1 then append to result\n      result += char;\n    }\n  }\n\n  //Return result\n  return result;\n};\n\nmodule.exports = stringXor;<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. will Return the first one in case of multiple \n   strings of the same length. Return null in case the input list will be empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. will Return the first one in case of multiple \n   strings of the same length. Return null in case the input list will be empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  return strings.reduce((previous, current) => {\n    if (previous.length < current.length) {\n      return current;\n    } else {\n      return previous;\n    }\n  }, null);\n};\n\n//\n// https://www.hackerrank.com/challenges/find-the-longest-string\n//\n/*\n  The longest common prefix of two strings s1 and s2 is the longest string \n  consisting of characters that appear in both s1 and s2, and that is the \n  prefix of the concatenation of s1 and s2.\n\n  >>> longestCommonPrefix('abcd', 'abce')\n  'ab'\n  >>> longestCommonPrefix('abcd', 'abcef')\n  'ab'\n  >>> longestCommonPrefix('abcd', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcd', 'abcdefg')\n  'ab'\n  >>> longestCommonPrefix('abcd', 'abcdefg')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcd')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcd')\n  'ab'\n  >>> longestCommonPrefix('abcd', 'abce')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abce')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcefg')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcefg')\n  'ab'\n  >>> longestCommonPrefix('abcd', 'abcefg')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestCommonPrefix('abcd', 'abcdefg')\n  'ab'\n  >>> longestCommonPrefix('abcd', 'abcdefg')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longestCommonPrefix('abcdefg',"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": false, "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) return b\n  if (b === 0) return a\n  const d = a % b\n  if (d === 0) return b\n  return greatestCommonDivisor(b, a % b)\n}\n\n/* Return the sum of two numbers\n  >>> sum(1, 2)\n  3\n  >>> sum(3, 4)\n  7\n  >>> sum(5, 6)\n  11\n  */\nconst sum = (a, b) => a + b\n\n/* Return the difference between two numbers\n  >>> difference(1, 2)\n  1\n  >>> difference(3, 4)\n  3\n  >>> difference(5, 6)\n  5\n  */\nconst difference = (a, b) => a - b\n\n/* Return the product of two numbers\n  >>> product(1, 2)\n  2\n  >>> product(3, 4)\n  12\n  >>> product(5, 6)\n  30\n  */\nconst product = (a, b) => a * b\n\n/* Return the quotient of two numbers\n  >>> quotient(1, 2)\n  0\n  >>> quotient(3, 4)\n  0\n  >>> quotient(5, 6)\n  2\n  */\nconst quotient = (a, b) => a / b\n\n/* Return the remainder of two numbers\n  >>> remainder(1, 2)\n  1\n  >>> remainder(3, 4)\n  3\n  >>> remainder(5, 6)\n  5\n  */\nconst remainder = (a, b) => a % b\n\n/* Return the absolute value of a number\n  >>> absolute(1)\n  1\n  >>> absolute(-1)\n  1\n  >>> absolute(0)\n  0\n  >>> absolute(3)\n  3\n  */\nconst absolute = (a) => Math.abs(a)\n\n/* Return the largest of two numbers\n  >>> largest(1, 2)\n  2\n  >>> largest(3, 4)\n  4\n  >>> largest(5, 6)\n  6\n  */\nconst largest = (a, b) => Math.max(a, b)\n\n/* Return the smallest of two numbers\n  >>> smallest(1, 2)\n  1\n  >>> smallest(3, 4)\n  1\n  >>> smallest(5, 6)\n  5\n  */\nconst smallest = (a, b) => Math.min(a, b)\n\n/* Return the floor of a number\n  >>> floor(1)\n  1\n  >>> floor(3.5)\n  3\n  >>> floor(-1.5)\n  -1\n  >>> floor(0)\n  0\n  >>> floor(1.5)\n  1\n  >>> floor(2.5)\n  2\n  >>> floor(3)\n  3\n  >>> floor(4)\n  4\n  >>> floor(5)\n  5\n  >>> floor(-1)\n  -1\n  >>> floor(-2)\n  -2\n  >>> floor(-3)\n  -3\n  >>> floor(-4)\n  -4\n  >>> floor(-5)\n  -5\n  */\nconst floor = (a) => Math.floor(a)\n\n/* Return the ceiling of a number\n  >>> ceiling(1)\n  1\n  >>> ceiling(3.5)\n  4\n  >>> ceiling(-1.5)\n  -1\n  >>> ceiling(0)\n  0\n  >>> ceiling(1.5)\n  2\n  >>> ceiling(2.5)\n  3\n  >>> ceiling(3)\n  3\n  >>> ceiling(4)\n  4\n  >>> ceiling(5)\n  5\n  >>> ceiling(-1)\n  -1\n  >>> ceiling(-2)\n  -2\n  >>> ceiling(-3)\n  -3\n  >>> ceiling(-4)\n  -4\n  >>> ceiling(-5)\n  -5\n  */\nconst ceiling = (a) => Math.ceil(a)\n\n/* Return the factorial of a number\n  >>> factorial(0)\n  1\n  >>> factorial(1)\n  1\n  >>> factorial(2)\n  2\n  >>> factorial(3)\n  6\n  >>> factorial(4)\n  24\n  >>> factorial(5)\n  120\n  >>> factorial(6)\n  720\n  */\nconst factorial = (a) => Math.pow(a, a)\n\n/* Return the sum of the even-valued elements of a list\n  >>> sumEven([1, 2, 3, 4, 5])\n  10\n  >>> sumEven([1, 2, 3, 4])\n  6\n  >>> sumEven([])\n  0\n  >>> sumEven([1, 2, 3])\n  6\n  */\nconst sumEven = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      sum += l[i]\n    }\n  }\n  return sum\n}\n\n/* Return the sum of the odd-valued elements of a list\n  >>> sumOdd([1, 2, 3, 4, 5])\n  11\n  >>> sumOdd([1, 2, 3, 4])\n  7\n  >>> sumOdd([])\n  0\n  >>> sumOdd([1, 2, 3])\n  7\n  */\nconst sumOdd = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 1) {\n      sum += l[i]\n    }\n  }\n  return sum\n}\n\n/* Return the sum of the values in a list\n  >>> sum([1, 2, 3, 4, 5])\n  10\n  >>> sum([1, 2, 3, 4])\n  6\n  >>> sum([])\n  0\n  >>> sum([1, 2, 3])\n  6\n  */\nconst sum = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\nmodule.exports = {\n  greatestCommonDivisor,\n"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": false, "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const char = string[0]\n  const stringLen = string.length\n  const currentLength = 1\n  for (let i = 1; i < stringLen; i++) {\n    const nextChar = string[i]\n    const currentPrefix = string.substring(0, currentLength)\n    const currentPrefixLen = currentPrefix.length\n    const hasNextChar = i + 1 < stringLen\n    const nextChar = hasNextChar? string[i + 1] : null\n    const nextPrefix = string.substring(0, currentPrefixLen + 1)\n    const nextPrefixLen = nextPrefix.length\n    if (hasNextChar) {\n      const nextPrefix = string.substring(0, currentPrefixLen + nextPrefixLen + 1)\n      const nextPrefixLen = nextPrefix.length\n      prefixes.push(nextPrefix)\n    } else {\n      prefixes.push(currentPrefix)\n    }\n    currentLength += 1\n  }\n  return prefixes\n}\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += ` ${i}`;\n  }\n  return result;\n};\n\n/*\n  >>> listSequence([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '0 1 2 3 4 5 6 7 8 9'\n  >>> listSequence([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  '0 1 2 3 4 5 6 7 8 9 10'\n  >>> listSequence([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  '0 1 2 3 4 5 6 7 8 9 10 11'\n  */\nconst listSequence = (n) => {\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += ` ${i}`;\n  }\n  return result;\n};\n\n/*\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 6)\n  '0 1 2 3 4 5 6'\n  >>> stringSequence(0, 7)\n  '0 1 2 3 4 5 6 7'\n  >>> stringSequence(0, 8)\n  '0 1 2 3 4 5 6 7 8'\n  >>> stringSequence(0, 9)\n  '0 1 2 3 4 5 6 7 8 9'\n  >>> stringSequence(0, 10)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  >>> stringSequence(0, 11)\n  '0 1 2 3 4 5 6 7 8 9 10 11'\n  >>> stringSequence(0, 12)\n  '0 1 2 3 4 5 6 7 8 9 10 11 12'\n  >>> stringSequence(0, 13)\n  '0 1 2 3 4 5 6 7 8 9 10 11 12 13'\n  >>> stringSequence(0, 14)\n  '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14'\n  >>> stringSequence(0, 15)\n  '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15'\n  */\nconst stringSequence = (start, end) => {\n  let result = '';\n  for (let i = start; i <= end; i++) {\n    result += ` ${i}`;\n  }\n  return result;\n};\n\n/*\n  >>> listSequence(0, 5, [0, 1, 2, 3, 4])\n  '0 1 2 3 4 5'\n  >>> listSequence(0, 6, [0, 1, 2, 3, 4])\n  '0 1 2 3 4 5 6'\n  >>> listSequence(0, 7, [0, 1, 2, 3, 4])\n  '0 1 2 3 4 5 6 7'\n  >>> listSequence(0, 8, [0, 1, 2, 3, 4])\n  '0 1 2 3 4 5 6 7 8'\n  >>> listSequence(0, 9, [0, 1, 2, 3, 4])\n  '0 1 2 3 4 5 6 7 8 9'\n  >>> listSequence(0, 10, [0, 1, 2, 3, 4])\n  '0 1 2 3 4 5 6 7 8 9 10'\n  >>> listSequence(0, 11, [0, 1, 2, 3, 4])\n  '0 1 2 3 4 5 6 7 8 9 10 11'\n  >>> listSequence(0, 12, [0, 1, 2, 3, 4])\n  '0 1 2 3 4 5 6 7 8 9 10 11 12'\n  >>> listSequence(0, 13, [0, 1, 2, 3, 4])\n  '0 1 2 3 4 5 6 7 8 9 10 11 12 13'\n  >>> listSequence(0, 14, [0, 1, 2, 3, 4])\n  '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14'\n  >>> listSequence(0, 15, [0, 1, 2, 3, 4])\n  '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15'\n  */\nconst listSequence = (start, end, n) => {\n  let result = '';\n  for (let i = start; i <= end; i++) {\n    result += ` ${i}`;\n  }\n  return result;\n};\n\n/*\n  >>> sequenceToString(stringSequence(0, 10, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\n  '0 1 2 3 4 5 6 7 8 9'\n  >>> sequenceToString(stringSequence(0, 10, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n  '0 1 2 3 4 5 6 7 8 9 10'\n  >>> sequenceToString(stringSequence(0, 10, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n  '0 1 2 3 4 5 6 7 8 9 10 11'\n  >>> sequenceToString(stringSequence(0, 10, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n  '0 1 2 3 4 5 6 7 8 9 10 11 12'\n  >>> sequenceToString(stringSequence(0, 10, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n  '0 1 2 3 4 5 6 7 8 9 10 11 12 13'\n  >>> sequenceToString(stringSequence(0, 10, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n  '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14'\n  >>> sequenceToString(stringSequence(0, 10, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n  '0 1 2 3 4 5 6 7 8 9"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const upperCaseLetters = /[A-Z]/g\n  const lowerCaseLetters = /[a-z]/g\n  const lowerCaseLettersAndNumbers = /[a-z]/g\n  const upperCaseLettersAndNumbers = /[A-Z]/g\n\n  let chars = string.split('')\n  let count = 0\n  for (let i = 0; i < chars.length; i++) {\n    if (upperCaseLetters.test(chars[i])) {\n      chars[i] = chars[i].toLowerCase()\n    } else if (lowerCaseLetters.test(chars[i])) {\n      chars[i] = chars[i].toUpperCase()\n    } else if (lowerCaseLettersAndNumbers.test(chars[i])) {\n      chars[i] = chars[i].toUpperCase()\n    } else if (upperCaseLettersAndNumbers.test(chars[i])) {\n      chars[i] = chars[i].toLowerCase()\n    }\n  }\n\n  for (let i = 0; i < chars.length; i++) {\n    count = count + chars.indexOf(chars[i])\n  }\n  return count\n}\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function will be a string representing musical notes in a special ASCII format. \n   Your task will be to parse this string and return list of integers corresponding to how many beats will do each \n   not last. \n\n   Here will be a legend: \n   'o '-whole note, will last four beats \n   'o| '-half note, will last two beats \n   '.| '-quater note, will last one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string representing musical notes in a special ASCII format. \n   Your task will be to parse this string and return list of integers corresponding to how many beats will do each \n   not last. \n\n   Here will be a legend: \n   'o '-whole note, will last four beats \n   'o| '-half note, will last two beats \n   '.| '-quater note, will last one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let result = [];\n  music_string = music_string.replace(' ', '');\n  music_string = music_string.replace(/\\|/g,'');\n  let music_array = music_string.split(' ');\n  music_array.forEach(music => {\n    if (music.includes('o')) {\n      let beat_type = music.charAt(0);\n      let beat_count = parseInt(music.substring(1, 3), 10);\n      beat_count = beat_count > 0? beat_count : 1;\n      beat_count = beat_count > 4? 4 : beat_count;\n      result.push(beat_count);\n    }\n  });\n  return result;\n}\n\n/* \n  Input:\n    1. music_string, a string representing a musical note in special ASCII format.\n    2. note_list, a list of integers representing how many beats will do each note last.\n\n  Output:\n    1. output_list, a list of integers representing the notes in original order.\n    2. new_note_list, a list of integers representing the notes in reversed order.\n\n  Note:\n    1. The length of both output_list and new_note_list must be the same as note_list.\n    2. The new_note_list will be the result of a reversed order of note_list.\n    3. The length of both output_list and new_note_list should be smaller than or equal to 1000.\n */\nconst reverseMusic = (music_string, note_list) => {\n  music_string = music_string.replace(' ', '');\n  music_string = music_string.replace(/\\|/g,'');\n  let music_array = music_string.split(' ');\n  let result = note_list.slice().reverse();\n  music_array.forEach(music => {\n    if (music.includes('o')) {\n      let beat_type = music.charAt(0);\n      let beat_count = parseInt(music.substring(1, 3), 10);\n      beat_count = beat_count > 0? beat_count : 1;\n      beat_count = beat_count > 4? 4 : beat_count;\n      result.unshift(beat_count);\n    }\n  });\n  return result;\n}\n\n/*\n  Input:\n    1. music_string, a string representing a musical note in special ASCII format.\n    2. note_list, a list of integers representing how many beats will do each note last.\n    3. direction, a string indicating whether the output list should be in the order of \n    music_string or reversed order of music_string.\n    4. If the output_list is reversed, you should output reversed_list.\n\n  Output:\n    1. output_list, a list of integers representing the notes in original order.\n    2. reversed_list, a list of integers representing the notes in reversed order.\n\n  Note:\n    1. The length of both output_list and reversed_list must be the same as note_list.\n    2. The reversed_list will be the result of a reversed order of note_list.\n    3. The length of both output_list and reversed_list should be smaller than or equal to 1000.\n */\nconst getMusic = (music_string, note_list, direction) => {\n  let result = [];\n  if (direction ==='reverse') {\n    result = reverseMusic(music_string, note_list);\n  } else {\n    result = note_list.slice();\n  }\n  return result;\n}\n\n/*\n  Input:\n    1. music_string, a string representing a musical note in special ASCII format.\n    2. beat_list, a list of integers representing the beats of each note.\n    3. direction, a string indicating whether the output list should be in the order of \n    music_string or reversed order of music_string.\n\n  Output:\n    1. output_list, a list of strings representing the notes in original order.\n    2. reversed_list, a list of strings representing the notes in reversed order.\n\n  Note:\n    1. The length of both output_list and reversed_list must be the same as beat_list.\n    2. The reversed_list will be the result of a reversed order of beat_list.\n    3. The length of both output_list and reversed_list should be smaller than or equal to 1000.\n */\nconst generateBeatList = (music_string, beat_list, direction) => {\n  let result = [];\n  let note_list = parseMusic(music_string);\n  let reversed_list = reverseMusic(music_string, note_list);\n  if (direction ==='reverse') {\n    result = reversed_list;\n  } else {\n    result = note_list;\n  }\n  result.forEach(beat => {\n    let beat_string = beat +'';\n    beat_list.push(beat_string);\n  });\n  return beat_list;\n}\n\n/*\n  Input:\n    1. music_string, a string representing a musical note in special ASCII format.\n    2. beat_list, a list of strings representing the beats of each note.\n    3. direction, a string indicating whether the output list should be in the order of \n    music_string or reversed order of music_string.\n\n  Output:\n    1. output_list, a list of strings representing the notes in original order.\n    2. reversed_list, a list of strings representing the notes in reversed order.\n\n  Note:\n    1. The length of both output_list and reversed_list must be the same as beat_list.\n    2. The reversed_list will be the result of a reversed order of beat_list.\n    3. The length of both output_list and reversed_list should be smaller than or equal to 1000.\n */\nconst"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a will give substring can will be find in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a will give substring can will be find in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    const check = string.slice(i, i + substring.length);\n    if (check === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\nexport default howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input will be a space-will delimitate string of numberals from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input will be a space-will delimitate string of numberals from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n    let numbersArr = [].concat(numbers.split(\" \"));\n    numbersArr.sort();\n    return numbersArr.join(\" \");\n};\n\n/*\n    Given a list of words, return a list of words with the largest sum of all its numbers\n */\nconst findLargestNumber = (words) => {\n    let largestNumber = 0;\n    let largestWord = \"\";\n    let wordWithLargestNumber = \"\";\n    let wordWithLargestNumber = \"\";\n    words.forEach((word) => {\n        let currentWordNumber = 0;\n        let wordArr = [].concat(word.split(\" \"));\n        wordArr.forEach((element) => {\n            currentWordNumber += Number(element);\n        });\n        if (currentWordNumber > largestNumber) {\n            largestNumber = currentWordNumber;\n            largestWord = word;\n        }\n    });\n    return largestWord;\n};\n\n/*\n    Given a list of words, return a list of words with the smallest sum of all its numbers\n */\nconst findSmallestNumber = (words) => {\n    let smallestNumber = 9999;\n    let smallestWord = \"\";\n    let wordWithSmallestNumber = \"\";\n    let wordWithSmallestNumber = \"\";\n    words.forEach((word) => {\n        let currentWordNumber = 0;\n        let wordArr = [].concat(word.split(\" \"));\n        wordArr.forEach((element) => {\n            currentWordNumber += Number(element);\n        });\n        if (currentWordNumber < smallestNumber) {\n            smallestNumber = currentWordNumber;\n            smallestWord = word;\n        }\n    });\n    return smallestWord;\n};\n\n/*\n    Given a list of words, return a list of words with the smallest difference in all its numbers\n */\nconst findSmallestDifference = (words) => {\n    let smallestDifference = 9999;\n    let smallestWord = \"\";\n    let wordWithSmallestDifference = \"\";\n    let wordWithSmallestDifference = \"\";\n    words.forEach((word) => {\n        let currentWordNumber = 0;\n        let wordArr = [].concat(word.split(\" \"));\n        wordArr.forEach((element) => {\n            currentWordNumber += Number(element);\n        });\n        let currentWordNumber = Number(currentWordNumber);\n        let previousWordNumber = 0;\n        let previousWordNumber = 0;\n        let previousWordNumber = 0;\n        words.forEach((word) => {\n            let currentWordNumber = 0;\n            let wordArr = [].concat(word.split(\" \"));\n            wordArr.forEach((element) => {\n                currentWordNumber += Number(element);\n            });\n            previousWordNumber = currentWordNumber;\n        });\n        let difference = currentWordNumber - previousWordNumber;\n        if (difference < smallestDifference) {\n            smallestDifference = difference;\n            smallestWord = word;\n        }\n    });\n    return smallestWord;\n};\n\n/*\n    Given a list of words, return a list of words with the largest product of all its numbers\n */\nconst findLargestProduct = (words) => {\n    let largestProduct = 0;\n    let largestWord = \"\";\n    let wordWithLargestProduct = \"\";\n    let wordWithLargestProduct = \"\";\n    words.forEach((word) => {\n        let currentWordNumber = 1;\n        let wordArr = [].concat(word.split(\" \"));\n        wordArr.forEach((element) => {\n            currentWordNumber *= Number(element);\n        });\n        if (currentWordNumber > largestProduct) {\n            largestProduct = currentWordNumber;\n            largestWord = word;\n        }\n    });\n    return largestWord;\n};\n\n/*\n    Given a list of words, return a list of words with the smallest product of all its numbers\n */\nconst findSmallestProduct = (words) => {\n    let smallestProduct = 9999;\n    let smallestWord = \"\";\n    let wordWithSmallestProduct = \"\";\n    let wordWithSmallestProduct = \"\";\n    words.forEach((word) => {\n        let currentWordNumber = 1;\n        let wordArr = [].concat(word.split(\" \"));\n        wordArr.forEach((element) => {\n            currentWordNumber *= Number(element);\n        });\n        if (currentWordNumber < smallestProduct) {\n            smallestProduct = currentWordNumber;\n            smallestWord = word;\n        }\n    });\n    return smallestWord;\n};\n\n/*\n    Given a list of words, return a list of words with the smallest quotient of all its numbers\n */\nconst findSmallestQuotient = (words) => {\n    let smallestQuotient = 9999;\n    let smallestWord = \"\";\n    let wordWithSmallestQuotient = \"\";\n    let wordWithSmallestQuotient = \"\";\n    words.forEach((word) => {\n        let currentWordNumber = 1;\n        let wordArr = [].concat(word.split(\" \"));\n        wordArr.forEach((element) => {\n            currentWordNumber *= Number(element);\n        });\n        let currentWordNumber = Number(currentWordNumber);\n        let previousWordNumber = 0;\n        let previousWordNumber = 0;\n        let previousWordNumber = 0;\n        words.forEach((word) => {\n            let currentWordNumber = 1;\n            let wordArr = [].concat(word.split(\" \"));\n            wordArr.forEach((element) => {\n                currentWordNumber *= Number(element);\n            });\n            previousWordNumber = currentWordNumber;\n        });\n        let difference = currentWordNumber - previousWordNumber;\n        if (difference < smallestQuotient) {\n            smallestQuotient = difference;\n            smallestWord = word;\n        }\n    });\n    return smallestWord;\n};"}
{"task_id": "JavaScript/20", "prompt": "/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let sorted = sort(numbers);\n  let first = sorted[0];\n  let second = sorted[1];\n  let firstDifference = Math.abs(first - second);\n  let secondDifference = Math.abs(first - second);\n  let firstClosest = sorted[0];\n  let secondClosest = sorted[1];\n  for (let i = 1; i < sorted.length; i++) {\n    let current = sorted[i];\n    let difference = Math.abs(current - first);\n    if (difference < firstDifference) {\n      firstDifference = difference;\n      firstClosest = current;\n    }\n    difference = Math.abs(current - second);\n    if (difference < secondDifference) {\n      secondDifference = difference;\n      secondClosest = current;\n    }\n  }\n  return [firstClosest, secondClosest];\n};\n\n/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  let sorted = sort(numbers);\n  let first = sorted[0];\n  let second = sorted[1];\n  let firstDifference = Math.abs(first - second);\n  let secondDifference = Math.abs(first - second);\n  let firstClosest = sorted[0];\n  let secondClosest = sorted[1];\n  for (let i = 1; i < sorted.length; i++) {\n    let current = sorted[i];\n    let difference = Math.abs(current - first);\n    if (difference < firstDifference) {\n      firstDifference = difference;\n      firstClosest = current;\n    }\n    difference = Math.abs(current - second);\n    if (difference < secondDifference) {\n      secondDifference = difference;\n      secondClosest = current;\n    }\n  }\n  return [firstClosest, secondClosest];\n};\n\n/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements3 = (numbers) => {\n  let sorted = sort(numbers);\n  let first = sorted[0];\n  let second = sorted[1];\n  let firstDifference = Math.abs(first - second);\n  let secondDifference = Math.abs(first - second);\n  let firstClosest = sorted[0];\n  let secondClosest = sorted[1];\n  for (let i = 1; i < sorted.length; i++) {\n    let current = sorted[i];\n    let difference = Math.abs(current - first);\n    if (difference < firstDifference) {\n      firstDifference = difference;\n      firstClosest = current;\n    }\n    difference = Math.abs(current - second);\n    if (difference < secondDifference) {\n      secondDifference = difference;\n      secondClosest = current;\n    }\n  }\n  return [firstClosest, secondClosest];\n};\n\nmodule.exports = {\n  findClosestElements,\n  findClosestElements2,\n  findClosestElements3\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  return numbers.map((n) => ((n - min) / (max - min)));\n}\n\n/* Given a 2D array, will apply a linear transform to that array,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([[1.0, 2.0, 3.0, 4.0, 5.0], [1.0, 2.0, 3.0, 4.0, 5.0]])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2d = (numbers) => {\n  const max = Math.max(...numbers.map((row) => Math.max(...row)))\n  const min = Math.min(...numbers.map((row) => Math.min(...row)))\n  return numbers.map((row) => row.map((n) => ((n - min) / (max - min))));\n}\n\n/* Given a 2D array of numbers (of at least two elements), will apply a linear transform to that array,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit2d([[1.0, 2.0, 3.0, 4.0, 5.0], [1.0, 2.0, 3.0, 4.0, 5.0]])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2dArray = (numbers) => {\n  const max = Math.max(...numbers.map((row) => Math.max(...row)))\n  const min = Math.min(...numbers.map((row) => Math.min(...row)))\n  return numbers.map((row) => row.map((n) => ((n - min) / (max - min))));\n}\n\n/* Given a 3D array, will apply a linear transform to that array,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit3d([[1.0, 2.0, 3.0, 4.0, 5.0], [1.0, 2.0, 3.0, 4.0, 5.0], [1.0, 2.0, 3.0, 4.0, 5.0]])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit3d = (numbers) => {\n  const max = Math.max(...numbers.map((row) => Math.max(...row)))\n  const min = Math.min(...numbers.map((row) => Math.min(...row)))\n  return numbers.map((row) => row.map((col) => ((col - min) / (max - min))));\n}\n\n/* Given a 3D array of numbers (of at least two elements), will apply a linear transform to that array,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit3d([[1.0, 2.0, 3.0, 4.0, 5.0], [1.0, 2.0, 3.0, 4.0, 5.0], [1.0, 2.0, 3.0, 4.0, 5.0]])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit3dArray = (numbers) => {\n  const max = Math.max(...numbers.map((row) => Math.max(...row)))\n  const min = Math.min(...numbers.map((row) => Math.min(...row)))\n  return numbers.map((row) => row.map((col) => ((col - min) / (max - min))));\n}\n\n/* Given a 3D array of numbers (of at least two elements), will apply a linear transform to that array,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit3d([[1.0, 2.0, 3.0, 4.0, 5.0], [1.0, 2.0, 3.0, 4.0, 5.0], [1.0, 2.0, 3.0, 4.0, 5.0]])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit3dArray2 = (numbers) => {\n  const max = Math.max(...numbers.map((row) => Math.max(...row)))\n  const min = Math.min(...numbers.map((row) => Math.min(...row)))\n  return numbers.map((row) => row.map((col) => ((col - min) / (max - min))));\n}\n\nmodule.exports = {\n  rescaleToUnit,\n  rescaleToUnit2d,\n  rescaleToUnit2dArray,\n  rescaleToUnit3d,\n  rescaleToUnit3dArray,\n  rescaleToUnit3dArray2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter will give list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter will give list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const out = []\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'number') {\n      out.push(values[i])\n    }\n  }\n  return out\n}\n\n/**\n  * Convert list of integers to array\n  * @param {Array} list\n  * @return {Array}\n  */\nconst toArray = (list) => {\n  const out = []\n  for (let i = 0; i < list.length; i++) {\n    out.push(list[i])\n  }\n  return out\n}\n\n/**\n  * Convert list of strings to array\n  * @param {Array} list\n  * @return {Array}\n  */\nconst toArray2 = (list) => {\n  const out = []\n  for (let i = 0; i < list.length; i++) {\n    out.push(list[i])\n  }\n  return out\n}\n\n/**\n  * Convert list of objects to array\n  * @param {Array} list\n  * @return {Array}\n  */\nconst toArray3 = (list) => {\n  const out = []\n  for (let i = 0; i < list.length; i++) {\n    out.push(list[i])\n  }\n  return out\n}\n\n/**\n  * Convert list of objects to array\n  * @param {Array} list\n  * @return {Array}\n  */\nconst toArray4 = (list) => {\n  const out = []\n  for (let i = 0; i < list.length; i++) {\n    out.push(list[i])\n  }\n  return out\n}\n\n/**\n  * Convert list of objects to array\n  * @param {Array} list\n  * @return {Array}\n  */\nconst toArray5 = (list) => {\n  const out = []\n  for (let i = 0; i < list.length; i++) {\n    out.push(list[i])\n  }\n  return out\n}\n\n/**\n  * Convert list of objects to array\n  * @param {Array} list\n  * @return {Array}\n  */\nconst toArray6 = (list) => {\n  const out = []\n  for (let i = 0; i < list.length; i++) {\n    out.push(list[i])\n  }\n  return out\n}\n\n/**\n  * Convert list of objects to array\n  * @param {Array} list\n  * @return {Array}\n  */\nconst toArray7 = (list) => {\n  const out = []\n  for (let i = 0; i < list.length; i++) {\n    out.push(list[i])\n  }\n  return out\n}\n\n/**\n  * Convert list of objects to array\n  * @param {Array} list\n  * @return {Array}\n  */\nconst toArray8 = (list) => {\n  const out = []\n  for (let i = 0; i < list.length; i++) {\n    out.push(list[i])\n  }\n  return out\n}\n\n/**\n  * Convert list of objects to array\n  * @param {Array} list\n  * @return {Array}\n  */\nconst toArray9 = (list) => {\n  const out = []\n  for (let i = 0; i < list.length; i++) {\n    out.push(list[i])\n  }\n  return out\n}\n\n/**\n  * Convert list of objects to array\n  * @param {Array} list\n  * @return {Array}\n  */\nconst toArray10 = (list) => {\n  const out = []\n  for (let i = 0; i < list.length; i++) {\n    out.push(list[i])\n  }\n  return out\n}\n\n/**\n  * Convert list of objects to array\n  * @param {Array} list\n  * @return {Array}\n  */\nconst toArray11 = (list) => {\n  const out = []\n  for (let i = 0; i < list.length; i++) {\n    out.push(list[i])\n  }\n  return out\n}\n\n/**\n  * Convert list of objects to array\n  * @param {Array} list\n  * @return {Array}\n  */\nconst toArray12 = (list) => {\n  const out = []\n  for (let i = 0; i < list.length; i++) {\n    out.push(list[i])\n  }\n  return out\n}\n\n/**\n  * Convert list of objects to array\n  * @param {Array} list\n  * @return {Array}\n  */\nconst toArray13 = (list) => {\n  const out = []\n  for (let i = 0; i < list.length; i++) {\n    out.push(list[i])\n  }\n  return out\n}\n\n/**\n  * Convert list of objects to array\n  * @param {Array} list\n  * @return {Array}\n  */\nconst toArray14 = (list) => {\n  const out = []\n  for (let i = 0; i < list.length; i++) {\n    out.push(list[i])\n  }\n  return out\n}\n\n/**\n  * Convert list of objects to array\n  * @param {Array} list\n  * @return {Array}\n  */\nconst toArray15 = (list) => {\n  const out = []\n  for (let i = 0; i < list.length; i++) {\n    out.push(list[i])\n  }\n  return out\n}\n\n/**\n  * Convert list of objects to array\n  * @param {Array} list\n  * @return {Array}\n  */\nconst toArray16 = (list) => {\n  const out = []\n  for (let i = 0; i < list.length; i++) {\n    out.push(list[i])\n  }\n  return out\n}\n\n/**\n  * Convert list of objects to array\n  * @param {Array} list\n  "}
{"task_id": "JavaScript/23", "prompt": "/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const length = string.length\n  return length === 0? 0 : length\n}\n\n/* Return string with `n` spaces added\n  >>> strpad(0, 'x')\n  'x'\n  >>> strpad(1, 'x')\n  'xx'\n  >>> strpad(2, 'x')\n  'xxx'\n  >>> strpad(3, 'x')\n  'xxxxx'\n  >>> strpad(4, 'x')\n  'xxxxxxx'\n  */\nconst strpad = (n, string) => {\n  return string + Array(n - strlen(string)).join(' ')\n}\n\n/* Return a random integer in the range of `min` and `max`\n  >>> random(0, 10)\n  5\n  >>> random(10, 0)\n  9\n  */\nconst random = (min, max) => {\n  const range = max - min\n  return Math.floor(Math.random() * range + min)\n}\n\n/* Return true if the number is a power of two\n  >>> isPow2(1)\n  True\n  >>> isPow2(3)\n  True\n  >>> isPow2(5)\n  False\n  >>> isPow2(7)\n  True\n  >>> isPow2(8)\n  False\n  >>> isPow2(9)\n  False\n  */\nconst isPow2 = (num) => {\n  return num === Math.pow(2, Math.floor(Math.log(num) / Math.log(2)))\n}\n\n/* Return true if the number is a prime number\n  >>> isPrime(1)\n  False\n  >>> isPrime(3)\n  False\n  >>> isPrime(4)\n  True\n  >>> isPrime(5)\n  True\n  >>> isPrime(7)\n  False\n  >>> isPrime(9)\n  True\n  >>> isPrime(11)\n  True\n  >>> isPrime(13)\n  False\n  >>> isPrime(17)\n  True\n  >>> isPrime(19)\n  False\n  >>> isPrime(23)\n  True\n  */\nconst isPrime = (num) => {\n  return num > 1 && (num === 2 || num % 2 === 0 || num % 3 === 0 || num % 5 === 0 || num % 7 === 0 || num % 11 === 0 || num % 13 === 0 || num % 17 === 0 || num % 19 === 0 || num % 23 === 0)\n}\n\n/* Return true if the number is an integer\n  >>> isInteger(1)\n  True\n  >>> isInteger(3)\n  True\n  >>> isInteger(5)\n  True\n  >>> isInteger(7)\n  True\n  >>> isInteger(9)\n  True\n  >>> isInteger(11)\n  True\n  >>> isInteger(13)\n  True\n  >>> isInteger(17)\n  True\n  >>> isInteger(19)\n  True\n  >>> isInteger(23)\n  True\n  >>> isInteger(25)\n  False\n  */\nconst isInteger = (num) => {\n  return num % 1 === 0\n}\n\n/* Return true if the number is a positive integer\n  >>> isPositiveInteger(1)\n  True\n  >>> isPositiveInteger(3)\n  True\n  >>> isPositiveInteger(5)\n  True\n  >>> isPositiveInteger(7)\n  True\n  >>> isPositiveInteger(9)\n  True\n  >>> isPositiveInteger(11)\n  True\n  >>> isPositiveInteger(13)\n  True\n  >>> isPositiveInteger(17)\n  True\n  >>> isPositiveInteger(19)\n  True\n  >>> isPositiveInteger(23)\n  True\n  >>> isPositiveInteger(25)\n  False\n  */\nconst isPositiveInteger = (num) => {\n  return num > 0\n}\n\n/* Return true if the number is a negative integer\n  >>> isNegativeInteger(1)\n  False\n  >>> isNegativeInteger(3)\n  False\n  >>> isNegativeInteger(5)\n  False\n  >>> isNegativeInteger(7)\n  False\n  >>> isNegativeInteger(9)\n  False\n  >>> isNegativeInteger(11)\n  False\n  >>> isNegativeInteger(13)\n  False\n  >>> isNegativeInteger(17)\n  False\n  >>> isNegativeInteger(19)\n  False\n  >>> isNegativeInteger(23)\n  False\n  >>> isNegativeInteger(25)\n  True\n  */\nconst isNegativeInteger = (num) => {\n  return num < 0\n}\n\n/* Return true if the number is a positive or negative integer\n  >>> isPositiveOrNegativeInteger(1)\n  True\n  >>> isPositiveOrNegativeInteger(3)\n  True\n  >>> isPositiveOrNegativeInteger(5)\n  True\n  >>> isPositiveOrNegativeInteger(7)\n  True\n  >>> isPositiveOrNegativeInteger(9)\n  True\n  >>> isPositiveOrNegativeInteger(11)\n  True\n  >>> isPositiveOrNegativeInteger(13)\n  True\n  >>> isPositiveOrNegativeInteger(17)\n  True\n  >>> isPositiveOrNegativeInteger(19)\n  True\n  >>> isPositiveOrNegativeInteger(23)\n  True\n  >>> isPositiveOrNegativeInteger(25)\n  True\n  >>> isPositiveOrNegativeInteger(27)\n  False\n  */\nconst isPositiveOrNegativeInteger = (num) => {\n  return isPositiveInteger(num) || isNegativeInteger(num)\n}\n\n/* Return true if the number is a positive or negative power of two\n  >>> isPow2OrNegativePow2(1)\n  False\n  >>> isPow2OrNegativePow2(3)\n  False\n  >>> isPow2OrNegativePow2(5)\n  False\n  >>> isPow2OrNegativePow2(7)\n  False\n  >>> isPow2OrNegativePow2(9)\n  False\n  >>> isPow2OrNegativePow2(11)\n  False\n  >>> isPow2OrNegativePow2(13)\n  False\n  >>> isPow2OrNeg"}
{"task_id": "JavaScript/24", "prompt": "/* For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisors = []\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  divisors.sort((a, b) => {\n    if (a > b) return 1\n    if (a < b) return -1\n    return 0\n  })\n  return divisors[0]\n}\n\n/* For a will give number n, will find the largest number that can be made from n parts\n  >>> largestPartition(15)\n  15\n  */\nconst largestPartition = (n) => {\n  let part = []\n  let total = n\n  let div = largestDivisor(total)\n  while (div!== 1) {\n    part.push(div)\n    total = total - div\n    div = largestDivisor(total)\n  }\n  return part.reverse().join(' ')\n}\n\n/* For a will give number n, will find the largest number that can be made from n parts\n  >>> largestPartition(15)\n  15\n  */\nconst largestPartition2 = (n) => {\n  let part = []\n  let total = n\n  while (total > 0) {\n    let partNumber = total % n\n    part.push(partNumber)\n    total = total - partNumber\n  }\n  return part.reverse().join(' ')\n}\n\n/* For a will give number n, will find the largest number that can be made from n parts\n  >>> largestPartition(15)\n  15\n  */\nconst largestPartition3 = (n) => {\n  let part = []\n  let total = n\n  while (total > 0) {\n    let partNumber = Math.floor(total / n)\n    part.push(partNumber)\n    total = total - partNumber * n\n  }\n  return part.reverse().join(' ')\n}\n\n/* For a will give number n, will find the largest number that can be made from n parts\n  >>> largestPartition(15)\n  15\n  */\nconst largestPartition4 = (n) => {\n  let part = []\n  let total = n\n  while (total > 0) {\n    let partNumber = total % n\n    part.push(partNumber)\n    total = total - partNumber\n  }\n  return part.reverse().join(' ')\n}\n\n/* For a will give number n, will find the largest number that can be made from n parts\n  >>> largestPartition(15)\n  15\n  */\nconst largestPartition5 = (n) => {\n  let part = []\n  let total = n\n  while (total > 0) {\n    let partNumber = Math.floor(total / n)\n    part.push(partNumber)\n    total = total - partNumber * n\n  }\n  return part.reverse().join(' ')\n}\n\n/* For a will give number n, will find the largest number that can be made from n parts\n  >>> largestPartition(15)\n  15\n  */\nconst largestPartition6 = (n) => {\n  let part = []\n  let total = n\n  while (total > 0) {\n    let partNumber = total % n\n    part.push(partNumber)\n    total = total - partNumber\n  }\n  return part.reverse().join(' ')\n}\n\n/* For a will give number n, will find the largest number that can be made from n parts\n  >>> largestPartition(15)\n  15\n  */\nconst largestPartition7 = (n) => {\n  let part = []\n  let total = n\n  while (total > 0) {\n    let partNumber = total % n\n    part.push(partNumber)\n    total = total - partNumber\n  }\n  return part.reverse().join(' ')\n}\n\n/* For a will give number n, will find the largest number that can be made from n parts\n  >>> largestPartition(15)\n  15\n  */\nconst largestPartition8 = (n) => {\n  let part = []\n  let total = n\n  while (total > 0) {\n    let partNumber = Math.floor(total / n)\n    part.push(partNumber)\n    total = total - partNumber * n\n  }\n  return part.reverse().join(' ')\n}\n\n/* For a will give number n, will find the largest number that can be made from n parts\n  >>> largestPartition(15)\n  15\n  */\nconst largestPartition9 = (n) => {\n  let part = []\n  let total = n\n  while (total > 0) {\n    let partNumber = Math.floor(total / n)\n    part.push(partNumber)\n    total = total - partNumber * n\n  }\n  return part.reverse().join(' ')\n}\n\n/* For a will give number n, will find the largest number that can be made from n parts\n  >>> largestPartition(15)\n  15\n  */\nconst largestPartition10 = (n) => {\n  let part = []\n  let total = n\n  while (total > 0) {\n    let partNumber = total % n\n    part.push(partNumber)\n    total = total - partNumber\n  }\n  return part.reverse().join(' ')\n}\n\n/* For a will give number n, will find the largest number that can be made from n parts\n  >>> largestPartition(15)\n  15\n  */\nconst largestPartition11 = (n) => {\n  let part = []\n  let total = n\n  while (total > 0) {\n    let partNumber = total % n\n    part.push(partNumber)\n    total = total - partNumber\n  }\n  return part.reverse().join(' ')\n}\n\n/* For a will give number n, will find the largest number that can be made from n parts\n  >>> largestPartition(15)\n  15\n  */\nconst largestPartition12 = (n) => {\n  let part = []\n  let total = n\n  while (total > 0) {\n    let partNumber = Math.floor(total / n)\n    part.push(partNumber)\n    total = total - partNumber * n\n  }\n  return part"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of will give integer in the order from largest to smallest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [7, 2, 5]\n  */\nconst largestFactors = (n) => {\n  const factors = []\n  for (let i = n; i > 1; i--) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return factors\n}\n\n// This should be the same as largestFactors\nconst factorize2 = (n) => {\n  const factors = []\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n    i++\n  }\n  return factors\n}\n\n/* Return list of prime factors of will give integer in the order from largest to smallest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize2(8)\n  [2, 2, 2]\n  >>> factorize2(25)\n  [5, 5]\n  >>> factorize2(70)\n  [7, 2, 5]\n  */\nconst largestFactors2 = (n) => {\n  const factors = []\n  let i = n\n  while (i > 1) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n    i--\n  }\n  return factors\n}\n\nconst getPrimeFactors = (n) => {\n  const factors = []\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return factors\n}\n\nconst getPrimeFactors2 = (n) => {\n  const factors = []\n  let i = n\n  while (i > 1) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n    i--\n  }\n  return factors\n}\n\nconst getPrimeFactors3 = (n) => {\n  const factors = []\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return factors\n}\n\n// Test Cases\nconst primeFactors = (n) => {\n  const factors = []\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return factors\n}\n\nconst primeFactors2 = (n) => {\n  const factors = []\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n    i++\n  }\n  return factors\n}\n\nconst primeFactors3 = (n) => {\n  const factors = []\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return factors\n}\n\n// Test cases\nconsole.log(getPrimeFactors(5))\nconsole.log(getPrimeFactors(10))\nconsole.log(getPrimeFactors(30))\nconsole.log(getPrimeFactors(100))\nconsole.log(getPrimeFactors(1000))\nconsole.log(getPrimeFactors(10000))\nconsole.log(getPrimeFactors(100000))\nconsole.log(getPrimeFactors(1000000))\nconsole.log(getPrimeFactors(10000000))\nconsole.log(getPrimeFactors(100000000))\nconsole.log(getPrimeFactors(1000000000))\nconsole.log(getPrimeFactors(10000000000))\nconsole.log(getPrimeFactors(100000000000))\nconsole.log(getPrimeFactors(1000000000000))\nconsole.log(getPrimeFactors(10000000000000))\nconsole.log(getPrimeFactors(100000000000000))\nconsole.log(getPrimeFactors(1000000000000000))\nconsole.log(getPrimeFactors(1000000000000000000))\nconsole.log(getPrimeFactors(1000000000000000000000))\nconsole.log(getPrimeFactors(10000000000000000000000))\nconsole.log(getPrimeFactors(100000000000000000000000))\nconsole.log(getPrimeFactors(1000000000000000000000000))\nconsole.log"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n    let uniqueNumbers = []\n    let index = 0\n    while (index < numbers.length) {\n        if (uniqueNumbers.indexOf(numbers[index]) < 0) {\n            uniqueNumbers.push(numbers[index])\n        }\n        index++\n    }\n    return uniqueNumbers\n}\n\nconsole.log(removeDuplicates([1, 2, 3, 2, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a will give string, will flip lowercase characters to uppercase and will uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a will give string, will flip lowercase characters to uppercase and will uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let str = string.toLowerCase()\n  for (let i = 0; i < str.length; i++) {\n    str = str.charAt(i).toUpperCase() + str.slice(i + 1)\n  }\n  return str\n}\n\nexport default {\n  flipCase\n}\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* Concatenate list of strings into a single string,\n  with the same separator\n  >>> concatenate([], ':')\n  ''\n  >>> concatenate(['a', 'b', 'c'], ':')\n  'a:b:c'\n  */\nconst concatenateSep = (strings, separator) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n    if (i < strings.length - 1) {\n      result += separator;\n    }\n  }\n  return result;\n};\n\n/* Convert a string to lowercase\n  >>> toLowercase('ABC')\n  'abc'\n  */\nconst toLowercase = (string) => {\n  return string.toLowerCase();\n};\n\n/* Convert a string to uppercase\n  >>> toUppercase('abc')\n  'ABC'\n  */\nconst toUppercase = (string) => {\n  return string.toUpperCase();\n};\n\n/* Convert a string to title case\n  >>> toTitleCase('abc')\n  'Abc'\n  */\nconst toTitleCase = (string) => {\n  let parts = string.split(' ');\n  parts.forEach(function (part) {\n    if (part.length > 0) {\n      part = part[0].toUpperCase() + part.slice(1);\n    }\n    parts.push(part);\n  });\n  return parts.join(' ');\n};\n\n/* Trim leading and trailing spaces from a string\n  >>> trim(' a b c')\n  'a b c'\n  */\nconst trim = (string) => {\n  return string.trim();\n};\n\n/* Truncate a string to the given length\n  >>> truncate('abc', 3)\n  'ab'\n  >>> truncate('abc', 5)\n  'abc'\n  */\nconst truncate = (string, length) => {\n  return string.substr(0, length);\n};\n\n/* Convert a string to a regular expression\n  >>> toRegex('a')\n  /a/\n  >>> toRegex('a*')\n  /a\\*/\n  >>> toRegex('a|b')\n  /a\\|b/\n  >>> toRegex('a+')\n  /a\\+/\n  >>> toRegex('a?')\n  /a\\?/\n  >>> toRegex('a{1}')\n  /a\\{1\\}/\n  >>> toRegex('a{2}')\n  /a\\{2\\}/\n  >>> toRegex('a{3}')\n  /a\\{3\\}/\n  >>> toRegex('a{1,2}')\n  /a\\{1\\|2\\}/\n  >>> toRegex('a{1,3}')\n  /a\\{1\\|3\\}/\n  >>> toRegex('a{2,3}')\n  /a\\{2\\|3\\}/\n  >>> toRegex('a{3,4}')\n  /a\\{3\\|4\\}/\n  >>> toRegex('a{3,4}')\n  /a\\{3\\|4\\}/\n  */\nconst toRegex = (string) => {\n  return new RegExp(string, 'g');\n};\n\n/* Return a string containing the given number of repetitions\n  >>> repeat('a', 3)\n  'aaa'\n  >>> repeat('a', 0)\n  ''\n  */\nconst repeat = (string, times) => {\n  if (times === 0) {\n    return '';\n  }\n  let result = '';\n  for (let i = 0; i < times; i++) {\n    result += string;\n  }\n  return result;\n};\n\n/* Return a string with the given characters repeated\n  >>> repeat('a', 3)\n  'aaa'\n  >>> repeat('a', 0)\n  ''\n  */\nconst repeatChars = (chars, times) => {\n  if (times === 0) {\n    return '';\n  }\n  let result = '';\n  for (let i = 0; i < times; i++) {\n    result += chars;\n  }\n  return result;\n};\n\n/* Return a string with the given characters repeated\n  >>> repeatChars('a', 3)\n  'aaa'\n  >>> repeatChars('a', 0)\n  ''\n  */\nconst repeatStrings = (strings, times) => {\n  if (times === 0) {\n    return '';\n  }\n  let result = '';\n  for (let i = 0; i < times; i++) {\n    result += strings[0];\n  }\n  return result;\n};\n\nmodule.exports = {\n  concatenate,\n  concatenateSep,\n  toLowercase,\n  toUppercase,\n  toTitleCase,\n  trim,\n  truncate,\n  toRegex,\n  repeat,\n  repeatChars,\n  repeatStrings\n};\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = [];\n  strings.forEach(str => {\n    if (str.startsWith(prefix)) {\n      result.push(str);\n    }\n  });\n  return result;\n};\n\nexport default {\n  filterByPrefix,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([0, -1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([-1, 2, -4, 5, 6, -1])\n  [2, 5, 6]\n  >>> getPositive([-1, 2, -4, 5, 6, -1, 1])\n  [2, 5, 6]\n  >>> getPositive([-1, 2, -4, 5, 6, -1, 1, -1])\n  [2, 5, 6]\n  >>> getPositive([-1, 2, -4, 5, 6, -1, 1, -1, 1])\n  [2, 5, 6]\n  >>> getPositive([-1, 2, -4, 5, 6, -1, 1, -1, 1, -1])\n  [2, 5, 6]\n  >>> getPositive([-1, 2, -4, 5, 6, -1, 1, -1, 1, -1, 1])\n  [2, 5, 6]\n  >>> getPositive([-1, 2, -4, 5, 6, -1, 1, -1, 1, -1, 1, -1])\n  [2, 5, 6]\n  >>> getPositive([-1, 2, -4, 5, 6, -1, 1, -1, 1, -1, 1, -1, 1])\n  [2, 5, 6]\n  >>> getPositive([-1, 2, -4, 5, 6, -1, 1, -1, 1, -1, 1, -1, 1, -1])\n  [2, 5, 6]\n  >>> getPositive([-1, 2, -4, 5, 6, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1])\n  [2, 5, 6]\n  >>> getPositive([-1, 2, -4, 5, 6, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1])\n  [2, 5, 6]\n  >>> getPositive([-1, 2, -4, 5, 6, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1])\n  [2, 5, 6]\n  >>> getPositive([-1, 2, -4, 5, 6, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1])\n  [2, 5, 6]\n  >>> getPositive([-1, 2, -4, 5, 6, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1])\n  [2, 5, 6]\n  >>> getPositive([-1, 2, -4, 5, 6, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1])\n  [2, 5, 6]\n  >>> getPositive([-1, 2, -4, 5, 6, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1])\n  [2, 5, 6]\n  >>> getPositive([-1, 2, -4, 5, 6, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1])\n  [2, 5, 6]\n  >>> getPositive([-1, 2, -4, 5, 6, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1])\n  [2, 5, 6]\n  >>> getPositive([-1, 2, -4, 5, 6, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1])\n  [2, 5, 6]\n  >>> getPositive([-1, 2, -4, 5, 6, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1])\n  [2, 5, 6]\n  >>> getPositive([-1, 2, -4, 5, 6, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1])\n  [2, 5, 6]\n  >>> getPositive([-1, 2, -4, 5, 6, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1])\n  [2, 5, 6]\n  >>> getPositive([-1, 2, -"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a will give number will be prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a will give number will be prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if(n <= 1) {\n    return false;\n  }\n\n  for(let i = 2; i * i <= n; i++) {\n    if(n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n  * @description\n  * Given a number n, return the sum of all multiples of n less than or equal to n\n  *\n  * @param {number} n\n  * @returns {number}\n  *\n  * @example\n  *\n  * getSumOfMultiples(7)\n  * // => 28\n  *\n  * getSumOfMultiples(7, 2)\n  * // => 6\n  *\n  * getSumOfMultiples(7, 5)\n  * // => 14\n  */\nconst getSumOfMultiples = (n, m) => {\n  if(n <= 1) {\n    return 0;\n  }\n\n  let sum = n;\n  for(let i = n + 1; i <= n * m; i += n) {\n    sum += i;\n  }\n\n  return sum;\n};\n\n/**\n  * @description\n  * Given a number n, return the sum of all multiples of n less than or equal to n\n  *\n  * @param {number} n\n  * @param {number} m\n  * @returns {number}\n  *\n  * @example\n  *\n  * getSumOfMultiples(7, 2)\n  * // => 6\n  *\n  * getSumOfMultiples(7, 5)\n  * // => 14\n  */\nconst getSumOfMultiples = (n, m) => {\n  if(n <= 1) {\n    return 0;\n  }\n\n  let sum = n;\n  for(let i = n + 1; i <= n * m; i += n) {\n    sum += i;\n  }\n\n  return sum;\n};\n\n/**\n  * @description\n  * Given a number n, return the sum of all multiples of n less than or equal to n\n  *\n  * @param {number} n\n  * @param {number} m\n  * @returns {number}\n  *\n  * @example\n  *\n  * getSumOfMultiples(7, 2)\n  * // => 6\n  *\n  * getSumOfMultiples(7, 5)\n  * // => 14\n  */\nconst getSumOfMultiples = (n, m) => {\n  if(n <= 1) {\n    return 0;\n  }\n\n  let sum = n;\n  for(let i = n + 1; i <= n * m; i += n) {\n    sum += i;\n  }\n\n  return sum;\n};\n\n/**\n  * @description\n  * Given two numbers n and m, return the sum of all multiples of n less than or equal to n\n  *\n  * @param {number} n\n  * @param {number} m\n  * @returns {number}\n  *\n  * @example\n  *\n  * getSumOfMultiples(7, 2)\n  * // => 6\n  *\n  * getSumOfMultiples(7, 5)\n  * // => 14\n  */\nconst getSumOfMultiples = (n, m) => {\n  if(n <= 1) {\n    return 0;\n  }\n\n  let sum = n;\n  for(let i = n + 1; i <= n * m; i += n) {\n    sum += i;\n  }\n\n  return sum;\n};\n\n/**\n  * @description\n  * Given two numbers n and m, return the sum of all multiples of n less than or equal to n\n  *\n  * @param {number} n\n  * @param {number} m\n  * @returns {number}\n  *\n  * @example\n  *\n  * getSumOfMultiples(7, 2)\n  * // => 6\n  *\n  * getSumOfMultiples(7, 5)\n  * // => 14\n  */\nconst getSumOfMultiples = (n, m) => {\n  if(n <= 1) {\n    return 0;\n  }\n\n  let sum = n;\n  for(let i = n + 1; i <= n * m; i += n) {\n    sum += i;\n  }\n\n  return sum;\n};\n\n/**\n  * @description\n  * Given two numbers n and m, return the sum of all multiples of n less than or equal to n\n  *\n  * @param {number} n\n  * @param {number} m\n  * @returns {number}\n  *\n  * @example\n  *\n  * getSumOfMultiples(7, 2)\n  * // => 6\n  *\n  * getSumOfMultiples(7, 5)\n  * // => 14\n  */\nconst getSumOfMultiples = (n, m) => {\n  if(n <= 1) {\n    return 0;\n  }\n\n  let sum = n;\n  for(let i = n + 1; i <= n * m; i += n) {\n    sum += i;\n  }\n\n  return sum;\n};\n\nexport {\n  isPrime,\n  getSumOfMultiples,\n  getSumOfMultiples\n};\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let a= xs.length % 2 == 0? xs[0] : xs[1];\n  let b= xs.length % 2 == 1? xs[0] : xs[1];\n  let x= -(a + b);\n  for (let i= 2; i <= xs.length; i+=2) {\n    x+= xs[i-1] * Math.pow(x, i-1);\n  }\n  return x;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \nconst poly = (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\nconst findZero = (xs) => {\n  let a= xs.length % 2 == 0? xs[0] : xs[1];\n  let b= xs.length % 2 == 1? xs[0] : xs[1];\n  let x= -(a + b);\n  for (let i= 2; i <= xs.length; i+=2) {\n    x+= xs[i-1] * Math.pow(x, i-1);\n  }\n  return x;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \nconst poly = (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\nconst findZero = (xs) => {\n  let a= xs.length % 2 == 0? xs[0] : xs[1];\n  let b= xs.length % 2 == 1? xs[0] : xs[1];\n  let x= -(a + b);\n  for (let i= 2; i <= xs.length; i+=2) {\n    x+= xs[i-1] * Math.pow(x, i-1);\n  }\n  return x;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \nconst poly = (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\nconst findZero = (xs) => {\n  let a= xs.length % 2 == 0? xs[0] : xs[1];\n  let b= xs.length % 2 == 1? xs[0] : xs[1];\n  let x= -(a + b);\n  for (let i= 2; i <= xs.length; i+=2) {\n    x+= xs[i-1] * Math.pow(x, i-1);\n  }\n  return x;\n}\n\nconst findZero = (xs) => {\n  let a= xs.length % 2 == 0? xs[0] : xs[1];\n  let b= xs.length % 2 == 1? xs[0] : xs[1];\n  let x= -(a + b);\n  for (let i= 2; i <= xs.length; i+=2) {\n    x+= xs[i-1] * Math.pow(x, i-1);\n  }\n  return x;\n}\n\nconst findZero = (xs) => {\n  let a= xs.length % 2 == 0? xs[0] : xs[1];\n  let b= xs.length % 2 == 1? xs[0] : xs[1];\n  let x= -(a + b);\n  for (let i= 2; i <= xs.length; i+=2) {\n    x+= xs[i-1] * Math.pow(x, i-1);\n  }\n  return x;\n}\n\nconst findZero = (xs) => {\n  let a= xs.length % 2 == 0? xs[0] : xs[1];\n  let b= xs.length % 2 == 1? xs[0] : xs[1];\n  let x= -(a + b);\n  for (let i= 2; i <= xs.length; i+=2) {\n    x+= xs[i-1] * Math.pow(x, i-1);\n  }\n  return x;\n}\n\nconst findZero = (xs) => {\n  let a= xs.length % 2 == 0"}
{"task_id": "JavaScript/33", "prompt": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the indicies that will be not divisible by three, while its values at the indicies that will be divisible by three will be equal \n   to the values of the corresponding indicies of l, but will sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the indicies that will be not divisible by three, while its values at the indicies that will be divisible by three will be equal \n   to the values of the corresponding indicies of l, but will sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n\tconst result = []\n\tfor(let i = 0; i < l.length; i++){\n\t\tif(i%3 === 0){\n\t\t\tresult.push(l[i])\n\t\t}else{\n\t\t\tresult.push(l[i])\n\t\t}\n\t}\n\treturn result\n}\n\n/*\n  This function will take a list l and will return a list l' such that \n  l' will be identical to l in the indicies that will be not divisible by five, while its values at the indicies that will be divisible by five will be equal \n  to the values of the corresponding indicies of l, but will sort.\n  >>> sortFifth([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> sortFifth([1, 2, 3, 4, 8, 9, 5])\n  [1, 2, 3, 4, 5, 8, 9]\n  */\nconst sortFifth = (l) => {\n\tconst result = []\n\tfor(let i = 0; i < l.length; i++){\n\t\tif(i%5 === 0){\n\t\t\tresult.push(l[i])\n\t\t}else{\n\t\t\tresult.push(l[i])\n\t\t}\n\t}\n\treturn result\n}\n\n/*\n  This function will take a list l and will return a list l' such that \n  l' will be identical to l in the indicies that will be not divisible by ten, while its values at the indicies that will be divisible by ten will be equal \n  to the values of the corresponding indicies of l, but will sort.\n  >>> sortTenth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> sortTenth([1, 2, 3, 4, 5, 6, 7, 8, 9, 50])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 50]\n  */\nconst sortTenth = (l) => {\n\tconst result = []\n\tfor(let i = 0; i < l.length; i++){\n\t\tif(i%10 === 0){\n\t\t\tresult.push(l[i])\n\t\t}else{\n\t\t\tresult.push(l[i])\n\t\t}\n\t}\n\treturn result\n}\n\nconst listOfNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\n\n//print(sortThird(listOfNumbers))\n\nconst listOfThirdNumbers = sortThird(listOfNumbers)\n\n//print(listOfNumbers)\n//print(listOfThirdNumbers)\n\nconst listOfFifthNumbers = sortFifth(listOfNumbers)\n\n//print(listOfNumbers)\n//print(listOfFifthNumbers)\n\nconst listOfTenthNumbers = sortTenth(listOfNumbers)\n\n//print(listOfNumbers)\n//print(listOfTenthNumbers)\n\nconst listOfNumbersSorted = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\n\n//print(listOfNumbersSorted)\n\nconst listOfTenthNumbersSorted = sortTenth(listOfNumbersSorted)\n\n//print(listOfNumbersSorted)\n//print(listOfTenthNumbersSorted)\n\nconst listOfFifthNumbersSorted = sortFifth(listOfNumbersSorted)\n\n//print(listOfNumbersSorted)\n//print(listOfFifthNumbersSorted)\n\nconst listOfThirdNumbersSorted = sortThird(listOfNumbersSorted)\n\n//print(listOfNumbersSorted)\n//print(listOfThirdNumbersSorted)\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return will sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return will sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let a = [...l];\n  return a.sort((x, y) => x - y).filter(x => a.indexOf(x) === a.lastIndexOf(x));\n};\n\n/*\n  Find the last index of a given element in a sorted list\n  >>> lastIndexOf([3, 2, 1, 4, 5, 3, 6, 3, 3, 4], 3)\n  5\n  >>> lastIndexOf([2, 3, 3, 4, 5, 6], 5)\n  2\n  >>> lastIndexOf([3, 3, 4, 4, 5, 6], 3)\n  5\n  >>> lastIndexOf([3, 3, 4, 4, 5, 6], 7)\n  -1\n  >>> lastIndexOf([], 3)\n  -1\n  >>> lastIndexOf([], 0)\n  -1\n  >>> lastIndexOf([], null)\n  -1\n  >>> lastIndexOf([3, 2, 1, 4, 5, 3, 6, 3, 3, 4], 3)\n  5\n  >>> lastIndexOf([2, 3, 3, 4, 5, 6], 5)\n  2\n  >>> lastIndexOf([3, 3, 4, 4, 5, 6], 3)\n  5\n  >>> lastIndexOf([3, 3, 4, 4, 5, 6], 7)\n  -1\n  >>> lastIndexOf([], 3)\n  -1\n  >>> lastIndexOf([], 0)\n  -1\n  >>> lastIndexOf([], null)\n  -1\n  >>> lastIndexOf([3, 2, 1, 4, 5, 3, 6, 3, 3, 4], 3)\n  5\n  >>> lastIndexOf([2, 3, 3, 4, 5, 6], 5)\n  2\n  >>> lastIndexOf([3, 3, 4, 4, 5, 6], 3)\n  5\n  >>> lastIndexOf([3, 3, 4, 4, 5, 6], 7)\n  -1\n  >>> lastIndexOf([], 3)\n  -1\n  >>> lastIndexOf([], 0)\n  -1\n  >>> lastIndexOf([], null)\n  -1\n  >>> lastIndexOf([3, 2, 1, 4, 5, 3, 6, 3, 3, 4], 3)\n  5\n  >>> lastIndexOf([2, 3, 3, 4, 5, 6], 5)\n  2\n  >>> lastIndexOf([3, 3, 4, 4, 5, 6], 3)\n  5\n  >>> lastIndexOf([3, 3, 4, 4, 5, 6], 7)\n  -1\n  >>> lastIndexOf([], 3)\n  -1\n  >>> lastIndexOf([], 0)\n  -1\n  >>> lastIndexOf([], null)\n  -1\n  >>> lastIndexOf([3, 2, 1, 4, 5, 3, 6, 3, 3, 4], 3)\n  5\n  >>> lastIndexOf([2, 3, 3, 4, 5, 6], 5)\n  2\n  >>> lastIndexOf([3, 3, 4, 4, 5, 6], 3)\n  5\n  >>> lastIndexOf([3, 3, 4, 4, 5, 6], 7)\n  -1\n  >>> lastIndexOf([], 3)\n  -1\n  >>> lastIndexOf([], 0)\n  -1\n  >>> lastIndexOf([], null)\n  -1\n  >>> lastIndexOf([3, 2, 1, 4, 5, 3, 6, 3, 3, 4], 3)\n  5\n  >>> lastIndexOf([2, 3, 3, 4, 5, 6], 5)\n  2\n  >>> lastIndexOf([3, 3, 4, 4, 5, 6], 3)\n  5\n  >>> lastIndexOf([3, 3, 4, 4, 5, 6], 7)\n  -1\n  >>> lastIndexOf([], 3)\n  -1\n  >>> lastIndexOf([], 0)\n  -1\n  >>> lastIndexOf([], null)\n  -1\n  >>> lastIndexOf([3, 2, 1, 4, 5, 3, 6, 3, 3, 4], 3)\n  5\n  >>> lastIndexOf([2, 3, 3, 4, 5, 6], 5)\n  2\n  >>> lastIndexOf([3, 3, 4, 4, 5, 6], 3)\n  5\n  >>> lastIndexOf([3, 3, 4, 4, 5, 6], 7)\n  -1\n  >>> lastIndexOf([], 3)\n  -1\n  >>> lastIndexOf([], 0)\n  -1\n  >>> lastIndexOf([], null)\n  -1\n  >>> lastIndexOf([3, 2, 1, 4, 5, 3, 6, 3, 3, 4], 3)\n  5\n  >>> lastIndexOf([2, 3, 3, 4, 5, 6], 5)\n  2\n  >>> lastIndexOf([3, 3, 4, 4, 5, 6], 3)\n  5\n  >>> lastIndexOf([3, 3, 4, 4, 5, 6], 7)\n  -1\n  >>> lastIndexOf([], 3)\n  -1\n  >>> lastIndexOf([], 0)\n  -1\n  >>> lastIndexOf([], null)\n  -1\n  >>> lastIndexOf([3, 2, 1, 4, 5, 3, 6, 3, 3, 4], 3)\n  5\n  >>> lastIndexOf([2, 3, 3, 4, 5, 6], 5)\n  2\n  >>> lastIndexOf([3, 3, 4, 4, 5, 6], 3)\n  5\n  >>> lastIndexOf([3, 3, 4, 4, 5, 6], 7)\n  -1\n  >>> lastIndexOf([], 3)\n  -1\n  >>> lastIndexOf([], 0)\n  -1\n  >>> lastIndexOf([], null)\n  -1\n  >>> lastIndexOf([3, 2, 1, 4, 5, 3, 6, 3, 3, 4], 3)\n  5\n  >>> lastIndexOf([2, 3, 3, 4, 5, 6], 5)\n  2\n  >>> lastIndexOf([3, 3, 4, 4, 5, 6], 3)\n  5\n  >>> lastIndexOf([3, 3"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return (l[0] > l[1]? l[0] : l[1]);\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  9\n  */\n\n/*Return smallest element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  return (l[0] < l[1]? l[0] : l[1]);\n};\n\n/*\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\n\n/*Returns the median of the list.\n  >>> median([1, 2, 3])\n  2\n  >>> median([1, 2, 3, 4, 5, 6])\n  3.5\n  >>> median([-1, -2, -3, -4])\n  -3.0\n  */\nconst median = (l) => {\n  const sorted = sortedList(l);\n  const half = (sorted.length - 1) / 2;\n  return sorted[half];\n};\n\n/*\n  >>> median([1, 2, 3])\n  2\n  >>> median([1, 2, 3, 4, 5, 6])\n  3.5\n  >>> median([-1, -2, -3, -4])\n  -3.0\n  */\n\n/*Returns the sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([1, 2, 3, 4, 5, 6])\n  15\n  >>> sum([1, 2, 3, -2, 4, -3])\n  -1\n  */\nconst sum = (l) => {\n  return (l.reduce((a, b) => a + b, 0));\n};\n\n/*\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([1, 2, 3, 4, 5, 6])\n  15\n  >>> sum([1, 2, 3, -2, 4, -3])\n  -1\n  */\n\n/*Returns the number of elements in the list that are positive.\n  >>> positive([1, 2, 3, 4])\n  3\n  >>> positive([1, 2, 3, -2, 4, -3])\n  3\n  >>> positive([0, -2, -3, -4, -5, -6])\n  0\n  */\nconst positive = (l) => {\n  return (l.reduce((a, b) => a + (b > 0? 1 : 0), 0));\n};\n\n/*\n  >>> positive([1, 2, 3, 4])\n  3\n  >>> positive([1, 2, 3, -2, 4, -3])\n  3\n  >>> positive([0, -2, -3, -4, -5, -6])\n  0\n  */\n\n/*Returns the number of elements in the list that are negative.\n  >>> negative([1, 2, 3, 4])\n  3\n  >>> negative([1, 2, 3, -2, 4, -3])\n  3\n  >>> negative([0, -2, -3, -4, -5, -6])\n  0\n  */\nconst negative = (l) => {\n  return (l.reduce((a, b) => a + (b < 0? 1 : 0), 0));\n};\n\n/*\n  >>> negative([1, 2, 3, 4])\n  3\n  >>> negative([1, 2, 3, -2, 4, -3])\n  3\n  >>> negative([0, -2, -3, -4, -5, -6])\n  0\n  */\n\n/*Returns the number of elements in the list that are zero.\n  >>> zero([1, 2, 3])\n  2\n  >>> zero([1, 2, 3, 4])\n  1\n  >>> zero([0, -2, -3, -4, -5, -6])\n  0\n  */\nconst zero = (l) => {\n  return (l.reduce((a, b) => a + (b == 0? 1 : 0), 0));\n};\n\n/*\n  >>> zero([1, 2, 3, 4])\n  2\n  >>> zero([1, 2, 3, -2, 4, -3])\n  2\n  >>> zero([0, -2, -3, -4, -5, -6])\n  0\n  */\n\n/*Returns the number of elements in the list that are positive and negative.\n  >>> both([1, 2, 3, 4])\n  3\n  >>> both([1, 2, 3, -2, 4, -3])\n  3\n  >>> both([0, -2, -3, -4, -5, -6])\n  0\n  */\nconst both = (l) => {\n  return (l.reduce((a, b) => a + (b > 0? 1 : 0) + (b < 0? 1 : 0), 0));\n};\n\n/*\n  >>> both([1, 2, 3, 4])\n  3\n  >>> both([1, 2, 3, -2, 4, -3])\n  3\n  >>> both([0, -2, -3, -4, -5, -6])\n  0\n  */\n\n/*Returns the number of elements in the list that are equal to the given number.\n  >>> equalTo([1, 2, 3], 2)\n  1\n  >>> equalTo([1, 2, 3, 4], 2)\n  1\n  >>> equalTo([1, 2, 3, -2, 4, -3], 2)\n  1\n  >>> equalTo([0, -2, -3, -4, -5, -6], 2)\n  0\n  */\nconst equalTo = (l, n) => {\n  return (l"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 2 === 0) {\n    if (n % 5 === 0) {\n      return 'FizzBuzz';\n    } else {\n      return 'Fizz';\n    }\n  } else {\n    return 'Buzz';\n  }\n};\n\nexport default fizzBuzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for(let i = 0; i < l.length; i++) {\n    if(i % 2 === 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [...odd,...even];\n}\n\n/* This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, but with the first element of l as the first element of l'\n  >>> sortOdd([1, 2, 3])\n  [2, 3, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortOdd = (l) => {\n  const even = [];\n  const odd = [];\n  for(let i = 0; i < l.length; i++) {\n    if(i % 2 === 1) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [...odd,...even];\n}\n\n/* This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, but with the last element of l as the last element of l'\n  >>> sortLast([1, 2, 3])\n  [1, 2, 3]\n  >>> sortLast([5, 6, 3, 4])\n  [5, 6, 4, 3]\n  */\nconst sortLast = (l) => {\n  const even = [];\n  const odd = [];\n  for(let i = 0; i < l.length; i++) {\n    if(i % 2 === 1) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [...odd,...even];\n}\n\n/* This function will take a list l and will return a list l' such that \n   l' will be identical to l in the even indicies, but with the first element of l as the first element of l'\n  >>> sortFirst([1, 2, 3])\n  [2, 3, 1]\n  >>> sortFirst([5, 6, 3, 4])\n  [4, 5, 6, 3]\n  */\nconst sortFirst = (l) => {\n  const even = [];\n  const odd = [];\n  for(let i = 0; i < l.length; i++) {\n    if(i % 2 === 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [...odd,...even];\n}\n\n/* This function will take a list l and will return a list l' such that \n   l' will be identical to l in the even indicies, but with the last element of l as the last element of l'\n  >>> sortLast([1, 2, 3])\n  [1, 2, 3]\n  >>> sortLast([5, 6, 3, 4])\n  [3, 4, 5, 6]\n  */\nconst sortLast2 = (l) => {\n  const even = [];\n  const odd = [];\n  for(let i = 0; i < l.length; i++) {\n    if(i % 2 === 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [...odd,...even];\n}\n\n/* This function will take a list l and will return a list l' such that \n   l' will be identical to l in the even indicies, but with the first element of l as the first element of l'\n  >>> sortFirst([1, 2, 3])\n  [2, 3, 1]\n  >>> sortFirst([5, 6, 3, 4])\n  [4, 5, 6, 3]\n  */\nconst sortFirst2 = (l) => {\n  const even = [];\n  const odd = [];\n  for(let i = 0; i < l.length; i++) {\n    if(i % 2 === 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [...odd,...even];\n}\n\nexport default {\n  sortOdd,\n  sortEven,\n  sortLast,\n  sortFirst,\n  sortLast2,\n  sortFirst2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){ \n     groups.push(group); \n   } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group[0] + group.slice(1));\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic2= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){ \n     groups.push(group); \n   } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group[2] + group.slice(1));\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n\n\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    const a = 1;\n    const b = 1;\n    const fib = [];\n\n    fib[0] = a;\n    fib[1] = b;\n\n    for (let i = 2; i <= n; i++) {\n        let t = fib[i-2] + fib[i-1];\n        fib[i] = t;\n    }\n\n    for (let i = 2; i <= n; i++) {\n        if (fib[i] % 2 === 0) {\n            return fib[i];\n        }\n    }\n}\n\nmodule.exports = primeFib;\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let res = false\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        let sum = l[i] + l[j] + l[k]\n        if (sum === 0) {\n          res = true\n          break\n        }\n      }\n      if (res) {\n        break\n      }\n    }\n    if (res) {\n      break\n    }\n  }\n  return res\n}\n\nmodule.exports = triplesSumToZero\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n   const carSpeed = 1\n   const carLength = 1\n   const carsLength = Math.pow(2, n)\n   const collisionCounter = 0\n   const numberOfCars = Math.pow(2, n)\n   const cars = []\n\n   for(let i = 0; i < numberOfCars; i++){\n     cars[i] = {}\n     cars[i].length = carLength\n     cars[i].speed = carSpeed\n   }\n\n   let leftCar = 0\n   let rightCar = 1\n   let carIndex = 0\n   let carNumber = 0\n   let carA = cars[leftCar]\n   let carB = cars[rightCar]\n   cars[carIndex] = carA\n   cars[carIndex].speed = carSpeed\n   cars[carIndex].length = carLength\n   cars[carIndex].carNumber = carNumber\n   carNumber++\n\n   for(let i = 1; i < numberOfCars; i++){\n     cars[i] = cars[i-1]\n     cars[i].carNumber = carNumber\n     cars[i].length = carLength\n     cars[i].speed = carSpeed\n   }\n\n   let indexA = 0\n   let indexB = 0\n   let carA = cars[indexA]\n   let carB = cars[indexB]\n   let car1 = carA\n   let car2 = carB\n   cars[indexA].carNumber = carNumber\n   cars[indexA].length = carLength\n   cars[indexA].speed = carSpeed\n   cars[indexB].carNumber = carNumber\n   cars[indexB].length = carLength\n   cars[indexB].speed = carSpeed\n\n   let index = 0\n   while(index < numberOfCars){\n     let car = cars[index]\n     let car1 = cars[indexA]\n     let car2 = cars[indexB]\n     car.x = car1.x + car2.x\n     car.y = car1.y + car2.y\n     car.x = Math.floor(car.x)\n     car.y = Math.floor(car.y)\n     car.speed = car1.speed\n     car.length = car1.length\n     car.carNumber = carNumber\n     index++\n   }\n\n   for(let i = 0; i < numberOfCars; i++){\n     cars[i].collision = 0\n   }\n\n   let index = 0\n   for(let i = 0; i < numberOfCars; i++){\n     cars[index].collision = cars[index].collision + cars[index].length\n     cars[index].collision = Math.floor(cars[index].collision)\n     cars[index].collision = cars[index].collision - 1\n     index++\n   }\n\n   let collisions = 0\n   for(let i = 0; i < numberOfCars; i++){\n     if(cars[i].collision > 0){\n       collisions++\n     }\n   }\n\n   return collisions\n }\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const incr = (x) => x + 1;\n  return l.reduce((prev, x, i) => [prev[i] || 0, x, incr(prev[i])], [0, l[0], l[1]]);\n};\n\n// __________________________________________\n// Test:./main.js\n// Open./main.js in Chrome, rename'main' to 'increment' and\n// run the tests with no arguments.\n\n// __________________________________________\n// Test:./main.js --test\n// Open./main.js in Chrome, rename'main' to 'increment' and\n// run the tests with --test.\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    if (l.length === 0) {\n        return false;\n    }\n    let n = l.length\n    let p = 0\n    while (p < n) {\n        let i = p\n        let j = n - p - 1\n        while (i < j) {\n            let s = l[i] + l[j]\n            if (s === 0) {\n                return true\n            } else if (s > 0) {\n                j--\n            } else {\n                i++\n            }\n        }\n        p++\n    }\n    return false\n}\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers will be less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers will be less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const numberBase = {\n    2: '01',\n    3: '012',\n    4: '0123',\n    5: '01234',\n    6: '012345',\n    7: '0123456',\n    8: '01234567',\n    9: '012345678',\n    10: '0123456789'\n  };\n\n  let string = '';\n  while (x > 0) {\n    string = numberBase[base] + string;\n    x = Math.floor(x / base);\n  }\n  return string;\n};\n\n/*\n   Convert a number base 10 to base 2.\n   return the number base 2.\n  >>> convertBase(8, 2)\n  '100'\n  >>> convertBase(8, 3)\n  '1000'\n  >>> convertBase(8, 5)\n  '10000'\n  >>> convertBase(7, 3)\n  '111'\n  >>> convertBase(2, 3)\n  '0'\n  >>> convertBase(1, 2)\n  '0'\n  >>> convertBase(0, 2)\n  '0'\n  */\nconst convertBase = (x, base) => {\n  const numberBase = {\n    2: '01',\n    3: '012',\n    4: '0123',\n    5: '01234',\n    6: '012345',\n    7: '0123456',\n    8: '01234567',\n    9: '012345678',\n    10: '0123456789'\n  };\n\n  let string = '';\n  while (x > 0) {\n    string = numberBase[base] + string;\n    x = Math.floor(x / base);\n  }\n  return string;\n};\n\n/*\n   Convert a number base 10 to base 3.\n   return the number base 3.\n  >>> convertBase(8, 3)\n  '222'\n  >>> convertBase(8, 2)\n  '111'\n  >>> convertBase(7, 2)\n  '111'\n  >>> convertBase(1, 2)\n  '1'\n  >>> convertBase(0, 3)\n  '0'\n  >>> convertBase(0, 2)\n  '0'\n  */\nconst convertBase3 = (x, base) => {\n  const numberBase = {\n    2: '01',\n    3: '012',\n    4: '0123',\n    5: '01234',\n    6: '012345',\n    7: '0123456',\n    8: '01234567',\n    9: '012345678',\n    10: '0123456789'\n  };\n\n  let string = '';\n  while (x > 0) {\n    string = numberBase[base] + string;\n    x = Math.floor(x / base);\n  }\n  return string;\n};\n\n/*\n   Convert a number base 10 to base 5.\n   return the number base 5.\n  >>> convertBase(8, 5)\n  '12000'\n  >>> convertBase(8, 3)\n  '1000'\n  >>> convertBase(7, 2)\n  '111'\n  >>> convertBase(1, 2)\n  '1'\n  >>> convertBase(0, 5)\n  '0'\n  >>> convertBase(0, 2)\n  '0'\n  */\nconst convertBase5 = (x, base) => {\n  const numberBase = {\n    2: '01',\n    3: '012',\n    4: '0123',\n    5: '01234',\n    6: '012345',\n    7: '0123456',\n    8: '01234567',\n    9: '012345678',\n    10: '0123456789'\n  };\n\n  let string = '';\n  while (x > 0) {\n    string = numberBase[base] + string;\n    x = Math.floor(x / base);\n  }\n  return string;\n};\n\n/*\n   Convert a number base 10 to base 7.\n   return the number base 7.\n  >>> convertBase(8, 7)\n  '12000'\n  >>> convertBase(8, 3)\n  '111'\n  >>> convertBase(7, 2)\n  '111'\n  >>> convertBase(1, 2)\n  '1'\n  >>> convertBase(0, 7)\n  '0'\n  >>> convertBase(0, 2)\n  '0'\n  */\nconst convertBase7 = (x, base) => {\n  const numberBase = {\n    2: '01',\n    3: '012',\n    4: '0123',\n    5: '01234',\n    6: '012345',\n    7: '0123456',\n    8: '01234567',\n    9: '012345678',\n    10: '0123456789'\n  };\n\n  let string = '';\n  while (x > 0) {\n    string = numberBase[base] + string;\n    x = Math.floor(x / base);\n  }\n  return string;\n};\n\n/*\n   Convert a number base 10 to base 11.\n   return the number base 11.\n  >>> convertBase(8, 11)\n  '100010001'\n  >>> convertBase(8, 10)\n  '12'\n  >>> convertBase(7, 10)\n  '11'\n  >>> convertBase(1, 2)\n  '1'\n  >>> convertBase(0, 11)\n  '0'\n  >>> convertBase(0, 10)\n  '0'\n  */\nconst convertBase11 = (x, base) => {\n  const numberBase = {\n    2: '01',\n    3: '012',\n    4: '0123',\n    5: '01234',\n    6: '012345',\n    7: '0123456',\n    8: '01234567',\n    9: '012345678',\n    10: '0123456789'\n"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": false, "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * Math.sqrt(h / 3)\n}\n\n/*Given a triangle and a point return the area of the triangle.\n  >>> triangleArea(2, 3)\n  1.5\n  */\nconst triangleArea = (a, b, c) => {\n  return (triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a)) / 3\n}\n\n/*Given a triangle return the base and the height.\n  >>> triangleBase(2, 3)\n  2\n  >>> triangleHeight(2, 3)\n  3\n  */\nconst triangleBase = (a, b, c) => {\n  return triangleArea(a, b, c) / 2\n}\n\n/*Given a triangle return the height of the triangle.\n  >>> triangleHeight(2, 3)\n  3\n  */\nconst triangleHeight = (a, b, c) => {\n  return Math.sqrt(triangleArea(a, b, c) / 4)\n}\n\n/*Given a triangle return the hypotenuse.\n  >>> triangleHypotenuse(2, 3)\n  3\n  */\nconst triangleHypotenuse = (a, b, c) => {\n  return Math.sqrt(triangleArea(a, b, c) / 2)\n}\n\n/*Given a triangle return the base and the height.\n  >>> triangleBase(2, 3)\n  2\n  >>> triangleHeight(2, 3)\n  3\n  */\nconst triangleBase = (a, b, c) => {\n  return triangleArea(a, b, c) / 2\n}\n\n/*Given a triangle return the height of the triangle.\n  >>> triangleHeight(2, 3)\n  3\n  */\nconst triangleHeight = (a, b, c) => {\n  return Math.sqrt(triangleArea(a, b, c) / 4)\n}\n\n/*Given a triangle return the hypotenuse.\n  >>> triangleHypotenuse(2, 3)\n  3\n  */\nconst triangleHypotenuse = (a, b, c) => {\n  return Math.sqrt(triangleArea(a, b, c) / 2)\n}\n\n/*Given the length of the side and the height of a triangle return the area.\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(3, 2)\n  2.5\n  */\nconst triangleArea = (a, h) => {\n  return a * Math.sqrt(h / 3)\n}\n\n/*Given the length of the side and the height of a triangle return the area.\n  >>> triangleArea(3, 2)\n  2.5\n  */\nconst triangleArea = (a, b, c) => {\n  return triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a)\n}\n\n/*Given a triangle return the base and the height.\n  >>> triangleBase(2, 3)\n  2\n  >>> triangleHeight(2, 3)\n  3\n  */\nconst triangleBase = (a, b, c) => {\n  return triangleArea(a, b, c) / 2\n}\n\n/*Given a triangle return the height of the triangle.\n  >>> triangleHeight(2, 3)\n  3\n  */\nconst triangleHeight = (a, b, c) => {\n  return Math.sqrt(triangleArea(a, b, c) / 4)\n}\n\n/*Given a triangle return the hypotenuse.\n  >>> triangleHypotenuse(2, 3)\n  3\n  */\nconst triangleHypotenuse = (a, b, c) => {\n  return Math.sqrt(triangleArea(a, b, c) / 2)\n}\n\n/*Given the length of the side and the height of a triangle return the area.\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(3, 2)\n  2.5\n  */\nconst triangleArea = (a, h) => {\n  return a * Math.sqrt(h / 3)\n}\n\n/*Given the length of the side and the height of a triangle return the area.\n  >>> triangleArea(3, 2)\n  2.5\n  */\nconst triangleArea = (a, b, c) => {\n  return triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a)\n}\n\n/*Given a triangle return the base and the height.\n  >>> triangleBase(2, 3)\n  2\n  >>> triangleHeight(2, 3)\n  3\n  */\nconst triangleBase = (a, b, c) => {\n  return triangleArea(a, b, c) / 2\n}\n\n/*Given a triangle return the height of the triangle.\n  >>> triangleHeight(2, 3)\n  3\n  */\nconst triangleHeight = (a, b, c) => {\n  return Math.sqrt(triangleArea(a, b, c) / 4)\n}\n\n/*Given a triangle return the hypotenuse.\n  >>> triangleHypotenuse(2, 3)\n  3\n  */\nconst triangleHypotenuse = (a, b, c) => {\n  return Math.sqrt(triangleArea(a, b, c) / 2)\n}\n\n/*Given a triangle return the base and the height.\n  >>> triangleBase(2, 3)\n  2\n  >>> triangleHeight(2, 3)\n  3\n  */\nconst triangleBase = (a, b, c) => {\n  return triangleArea(a, b, c) / 2\n}\n\n/*Given a triangle return the height of the triangle.\n  >>> triangleHeight(2, 3)\n  3\n  */\nconst triangleHeight = (a, b, c) => {\n  return Math.sqrt(triangleArea(a, b, c) / 4)\n}\n\n/*Given a triangle return the hypotenuse.\n  >>> triangleHypotenuse(2, 3)\n  3\n  */\nconst triangleHypotenuse = (a, b, c) => {\n  return Math.sqrt(triangleArea(a, b, c) / 2)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib4 number sequence.   will Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib4 number sequence.   will Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 2) {\n    return n;\n  } else {\n    return fib4(n - 1) + fib4(n - 2);\n  }\n}\n\nexport {fib4}\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let len = l.length;\n  if (len === 0) {\n    return NaN;\n  }\n  let left = 0;\n  let right = len - 1;\n  let mid = Math.floor((right + left) / 2);\n  while (left <= right) {\n    if (l[mid] < l[right]) {\n      left = mid + 1;\n    } else if (l[mid] > l[right]) {\n      right = mid - 1;\n    } else {\n      return l[mid];\n    }\n    mid = Math.floor((right + left) / 2);\n  }\n  return l[mid];\n};\n\n/**\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nexport default median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const textLength = text.length;\n  let index = 0;\n  let endIndex = textLength - 1;\n  while (index <= endIndex) {\n    if (text[index]!== text[endIndex]) {\n      return false;\n    }\n    index++;\n    endIndex--;\n  }\n  return true;\n};\n\nexport default isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n <= 0) return 0\n  return Math.floor(n / p) % p\n}\n\n/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp2 = (n, p) => {\n  if (n <= 0) return 0\n  return Math.floor(n / p) * p\n}\n\n/*\n  Return the modular inverse of n modulo p\n  >>> modp(11, 5)\n  2\n  >>> modp(1, 2)\n  1\n  >>> modp(0, 1)\n  1\n  >>> modp(-1, 1)\n  1\n  >>> modp(10, 2)\n  0\n  >>> modp(11, 4)\n  1\n  >>> modp(0, 2)\n  0\n  >>> modp(-11, 2)\n  -1\n  >>> modp(3, 7)\n  -1\n  >>> modp(2, 8)\n  1\n  */\nconst modinv = (n, p) => {\n  if (n < 0) return -modinv(-n, p)\n  if (p === 0) return 0\n  let s = 0\n  while (n > 0) {\n    s = modp(n, p)\n    n = modp2(n, p)\n  }\n  return s\n}\n\n/*\n  Return the modular power of n modulo p\n  >>> modp(11, 5)\n  2\n  >>> modp(1, 2)\n  1\n  >>> modp(0, 1)\n  1\n  >>> modp(-1, 1)\n  1\n  >>> modp(10, 2)\n  0\n  >>> modp(11, 4)\n  1\n  >>> modp(0, 2)\n  0\n  >>> modp(-11, 2)\n  -1\n  >>> modp(3, 7)\n  -1\n  >>> modp(2, 8)\n  1\n  */\nconst modpow = (n, p) => {\n  let s = 1\n  while (n > 0) {\n    if (n & 1) s = modp(s, p)\n    n = modp2(n, p)\n  }\n  return s\n}\n\n/*\n  Return the factorial of n\n  >>> fact(0)\n  1\n  >>> fact(1)\n  1\n  >>> fact(2)\n  2\n  >>> fact(3)\n  6\n  >>> fact(4)\n  24\n  >>> fact(10)\n  3628800\n  */\nconst fact = (n) => {\n  if (n === 0) return 1\n  return (n * fact(n - 1))\n}\n\n/*\n  Return the sum of n, n+1,..., n+k\n  >>> sum(0, 0, 0)\n  0\n  >>> sum(1, 1, 1)\n  1\n  >>> sum(2, 2, 2)\n  3\n  >>> sum(3, 3, 3)\n  6\n  >>> sum(4, 4, 4)\n  12\n  >>> sum(10, 10, 10)\n  55\n  */\nconst sum = (...args) => {\n  let result = 0\n  for (let i = 0; i < args.length; i++) {\n    result += args[i]\n  }\n  return result\n}\n\n/*\n  Return the sum of n, n+1,..., n+k, where k is the number of arguments\n  >>> sum(1, 2, 3, 4, 5, 6)\n  15\n  >>> sum(1, 2, 3, 4, 5)\n  10\n  >>> sum(1, 2, 3, 4)\n  7\n  >>> sum(1, 2, 3)\n  6\n  >>> sum(1, 2)\n  3\n  >>> sum(1)\n  1\n  */\nconst sum2 = (...args) => {\n  let result = 0\n  for (let i = 0; i < args.length; i++) {\n    result += args[i]\n  }\n  return result\n}\n\n/*\n  Return the sum of n, n+1,..., n+k, where k is the number of arguments\n  >>> sum(1, 2, 3, 4, 5, 6)\n  15\n  >>> sum(1, 2, 3, 4, 5)\n  10\n  >>> sum(1, 2, 3, 4)\n  7\n  >>> sum(1, 2, 3)\n  6\n  >>> sum(1, 2)\n  3\n  >>> sum(1)\n  1\n  */\nconst sum3 = (...args) => {\n  let result = 0\n  for (let i = 0; i < args.length; i++) {\n    result += args[i]\n  }\n  return result\n}\n\n/*\n  Return the sum of n, n+1,..., n+k, where k is the number of arguments\n  >>> sum(1, 2, 3, 4, 5, 6)\n  15\n  >>> sum(1, 2, 3, 4, 5)\n  10\n  >>> sum(1, 2, 3, 4)\n  7\n  >>> sum(1, 2, 3)\n  6\n  >>> sum(1, 2)\n  3\n  >>> sum(1)\n  1\n  */\nconst sum4 = (...args) => {\n  let result = 0\n  for (let i = 0; i < args.length; i++) {\n    result += args[i]\n  }\n  return result\n}\n\n/*\n  Return the sum of n, n+1,..., n+k, where k is the number of arguments\n  >>> sum(1, 2, 3, 4, 5, 6)\n  15\n  >>> sum("}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns will encode string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns will encode string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n   const chars= s.split(\"\"); \n   const a= []; \n   for (let i=0; i< chars.length; i++) {\n     a.push(String.fromCharCode(\n       (a.length-1>=chars[i].charCodeAt(0)-\" a\".charCodeAt(0)\n      )? chars[i].charCodeAt(0)-\" a\".charCodeAt(0)\n      : chars[i].charCodeAt(0)+26-\" a\".charCodeAt(0)\n    ));\n   } \n   return a.join (\"\"); \n} \n\n/* \n   will take as input string will decode with decode_shift function. Returns will encode string. \n  */ \n const encode= (s)=>{\n   const chars= s.split(\"\"); \n   const a= []; \n   for (let i=0; i< chars.length; i++) {\n     a.push(String.fromCharCode(\n       (a.length-1>=chars[i].charCodeAt(0)-\" a\".charCodeAt(0)\n      )? chars[i].charCodeAt(0)-\" a\".charCodeAt(0)\n      : chars[i].charCodeAt(0)+26-\" a\".charCodeAt(0)\n    ));\n   } \n   return a.join (\"\"); \n} \n\n/* \n   will take as input string will decode with decode_shift function. Returns will encode string. \n  */ \n const decode= (s)=>{\n   const chars= s.split(\"\"); \n   const a= []; \n   for (let i=0; i< chars.length; i++) {\n     a.push(String.fromCharCode(\n       (a.length-1>=chars[i].charCodeAt(0)-\" a\".charCodeAt(0)\n      )? chars[i].charCodeAt(0)-\" a\".charCodeAt(0)\n      : chars[i].charCodeAt(0)+26-\" a\".charCodeAt(0)\n    ));\n   } \n   return a.join (\"\"); \n} \n\n const main= (s)=>{\n   const encoded= encode(s); \n   const decoded= decode(encoded); \n   console.log(decoded); \n}\n\nconst tests= [\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxyz\",\n  \"abcdefghijklmnopqrstuvwxy"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n    //check to see if there are any vowels\n    const hasVowels = /[aeiouAEIOU]/.test(text);\n    //check to see if there are any double consonants\n    const hasDoubleConsonants = /[bcdfghjklmnpqrstvwxzBCDFGHJKLMNPQRSTVWXZ]/.test(text);\n    //check to see if there are any single consonants\n    const hasSingleConsonants = /[bcdfghjklmnpqrstvwxzBCDFGHJKLMNPQRSTVWXZ]/.test(text);\n\n    if (hasVowels &&!hasDoubleConsonants &&!hasSingleConsonants) {\n        //if there are vowels but no double consonants or single consonants, return the text without vowels\n        return text.toLowerCase();\n    } else if (hasVowels && hasSingleConsonants) {\n        //if there are vowels and single consonants, return the text without vowels\n        return text.toLowerCase().replace(/[aeiouAEIOU]/g, '');\n    } else if (hasVowels && hasDoubleConsonants) {\n        //if there are vowels and double consonants, return the text without vowels\n        return text.toLowerCase().replace(/[aeiouAEIOU]/g, '').replace(/[bcdfghjklmnpqrstvwxzBCDFGHJKLMNPQRSTVWXZ]/g, '');\n    } else if (!hasVowels) {\n        //if there are no vowels, return the text without vowels\n        return text.toLowerCase().replace(/[aeiouAEIOU]/g, '').replace(/[bcdfghjklmnpqrstvwxzBCDFGHJKLMNPQRSTVWXZ]/g, '');\n    } else {\n        //there are no vowels or consonants, return the text without vowels\n        return text.toLowerCase();\n    }\n};\n\nmodule.exports = removeVowels;\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l will be below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l will be below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum < t;\n}\n\n/*Return true if all numbers in the list l will be above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum > t;\n}\n\n/*\n  >>> getThreshold(0, [1, 2, 4, 10])\n  4\n  >>> getThreshold(0, [1, 20, 4, 10])\n  20\n  >>> getThreshold(0, [1, 2, 4, 10, 20, 30, 40])\n  20\n  >>> getThreshold(0, [1, 2, 4, 10, 20, 30, 40, 50, 60])\n  30\n  >>> getThreshold(0, [1, 2, 4, 10, 20, 30, 40, 50, 60, 70])\n  40\n  >>> getThreshold(0, [1, 2, 4, 10, 20, 30, 40, 50, 60, 70, 80, 90])\n  50\n  >>> getThreshold(0, [1, 2, 4, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100])\n  60\n  >>> getThreshold(0, [1, 2, 4, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n  70\n  >>> getThreshold(0, [1, 2, 4, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160])\n  80\n  >>> getThreshold(0, [1, 2, 4, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170])\n  90\n  >>> getThreshold(0, [1, 2, 4, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180])\n  100\n  >>> getThreshold(0, [1, 2, 4, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190])\n  110\n  >>> getThreshold(0, [1, 2, 4, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200])\n  120\n  >>> getThreshold(0, [1, 2, 4, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210])\n  130\n  >>> getThreshold(0, [1, 2, 4, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220])\n  140\n  >>> getThreshold(0, [1, 2, 4, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230])\n  150\n  >>> getThreshold(0, [1, 2, 4, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240])\n  160\n  >>> getThreshold(0, [1, 2, 4, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250])\n  170\n  >>> getThreshold(0, [1, 2, 4, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260])\n  180\n  >>> getThreshold(0, [1, 2, 4, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270])\n  190\n  >>> getThreshold(0, [1, 2, 4, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280])\n  200\n  >>> getThreshold(0, [1, 2, 4, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290])\n  210\n  >>> getThreshold(0, [1, 2, 4, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300])\n  220\n  >>> getThreshold(0, [1, 2, 4, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270,"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n}\n\n/*\n  Function add_one_to_each\n  This function is for adding one to each value of an array\n  >>> add_one_to_each([1, 2, 3, 4, 5])\n  [2, 3, 4, 5, 6]\n  >>> add_one_to_each([9, 8, 7, 6, 5])\n  [10, 9, 8, 7, 6]\n  */\nconst add_one_to_each = (arr) => {\n  return arr.map((x) => {\n    return x + 1;\n  })\n}\n\n/*\n  Function subtract_one_from_each\n  This function is for subtracting one from each value of an array\n  >>> subtract_one_from_each([1, 2, 3, 4, 5])\n  [0, 1, 2, 3, 4]\n  >>> subtract_one_from_each([9, 8, 7, 6, 5])\n  [8, 9, 8, 7, 6]\n  */\nconst subtract_one_from_each = (arr) => {\n  return arr.map((x) => {\n    return x - 1;\n  })\n}\n\n/*\n  Function multiply_each_by_two\n  This function is for multiplying each value of an array by 2\n  >>> multiply_each_by_two([1, 2, 3, 4, 5])\n  [2, 4, 6, 8, 10]\n  >>> multiply_each_by_two([9, 8, 7, 6, 5])\n  [18, 16, 14, 12, 10]\n  */\nconst multiply_each_by_two = (arr) => {\n  return arr.map((x) => {\n    return x * 2;\n  })\n}\n\n/*\n  Function multiply_each_by_one\n  This function is for multiplying each value of an array by 1\n  >>> multiply_each_by_one([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> multiply_each_by_one([9, 8, 7, 6, 5])\n  [9, 8, 7, 6, 5]\n  */\nconst multiply_each_by_one = (arr) => {\n  return arr.map((x) => {\n    return x * 1;\n  })\n}\n\n/*\n  Function divide_each_by_two\n  This function is for dividing each value of an array by 2\n  >>> divide_each_by_two([1, 2, 3, 4, 5])\n  [0.5, 1.0, 1.5, 2.0, 2.5]\n  >>> divide_each_by_two([9, 8, 7, 6, 5])\n  [4.0, 3.0, 2.0, 1.0, 0.5]\n  */\nconst divide_each_by_two = (arr) => {\n  return arr.map((x) => {\n    return x / 2;\n  })\n}\n\n/*\n  Function divide_each_by_one\n  This function is for dividing each value of an array by 1\n  >>> divide_each_by_one([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> divide_each_by_one([9, 8, 7, 6, 5])\n  [9, 8, 7, 6, 5]\n  */\nconst divide_each_by_one = (arr) => {\n  return arr.map((x) => {\n    return x / 1;\n  })\n}\n\n/*\n  Function get_sum\n  This function is for getting the sum of the elements of an array\n  >>> get_sum([1, 2, 3, 4, 5])\n  15\n  >>> get_sum([9, 8, 7, 6, 5])\n  30\n  */\nconst get_sum = (arr) => {\n  return arr.reduce((a, b) => {\n    return a + b\n  })\n}\n\n/*\n  Function get_difference\n  This function is for getting the difference of the elements of an array\n  >>> get_difference([1, 2, 3, 4, 5])\n  4\n  >>> get_difference([9, 8, 7, 6, 5])\n  8\n  */\nconst get_difference = (arr) => {\n  return arr.reduce((a, b) => {\n    return a - b\n  })\n}\n\n/*\n  Function get_product\n  This function is for getting the product of the elements of an array\n  >>> get_product([1, 2, 3, 4, 5])\n  15\n  >>> get_product([9, 8, 7, 6, 5])\n  120\n  */\nconst get_product = (arr) => {\n  return arr.reduce((a, b) => {\n    return a * b\n  })\n}\n\n/*\n  Function get_min\n  This function is for getting the minimum value of an array\n  >>> get_min([1, 2, 3, 4, 5])\n  1\n  >>> get_min([9, 8, 7, 6, 5])\n  1\n  */\nconst get_min = (arr) => {\n  return Math.min.apply(null, arr)\n}\n\n/*\n  Function get_max\n  This function is for getting the maximum value of an array\n  >>> get_max([1, 2, 3, 4, 5])\n  5\n  >>> get_max([9, 8, 7, 6, 5])\n  9\n  */\nconst get_max = (arr) => {\n  return Math.max.apply(null, arr)\n}\n\n/*\n  Function get_average\n  This function is for getting the average of an array\n  >>> get_average([1, 2, 3, 4, 5])\n  3.0\n  >>> get_average([9, 8, 7, 6, 5])\n  5.5\n  */\nconst get_average = (arr) => {\n  return get_sum(arr) / arr.length\n}\n\n/*\n  Function get_mean\n  This function is for getting the mean of an array\n  >>> get_mean([1, 2, 3, 4, 5])\n  2.0\n  >>> get_mean([9, 8, 7,"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words will have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words will have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  let i0 = 0\n  let i1 = 0\n  let char0 = 0\n  let char1 = 0\n  while (i0 < s0.length && i1 < s1.length) {\n    char0 = s0.charCodeAt(i0)\n    char1 = s1.charCodeAt(i1)\n    if (char0!== char1) {\n      break\n    }\n    i0++\n    i1++\n  }\n  return i0 === s0.length && i1 === s1.length\n}\n\n/*\n  Check if two words are the same.\n  >>> sameWords('eabcd', 'dddddddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWords = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false\n  }\n  return s0.toLowerCase() === s1.toLowerCase()\n}\n\nexport {\n  sameChars,\n  sameWords\n}\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  }\n  return fib(n-1) + fib(n-2);\n};\n\n/*Return a random fib number.\n  >>> fibRand(10)\n  7\n  >>> fibRand(1)\n  1\n  >>> fibRand(8)\n  21\n  */\nconst fibRand = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  }\n  return Math.floor(Math.random() * (n - 1)) + fibRand(n - 2);\n};\n\n/* Return a random number from 1 to n-1.\n  >>> random(5)\n  4\n  >>> random(5)\n  5\n  >>> random(5)\n  6\n  */\nconst random = (n) => {\n  return Math.floor(Math.random() * (n - 1));\n};\n\n/*Return a random number from 1 to n-1, except that it will be a prime number.\n  >>> randomPrime(10)\n  7\n  >>> randomPrime(10)\n  8\n  >>> randomPrime(10)\n  9\n  >>> randomPrime(10)\n  10\n  */\nconst randomPrime = (n) => {\n  let r = random(n);\n  while (isPrime(r) === false) {\n    r = random(n);\n  }\n  return r;\n};\n\n/*Return n-th permutation of a given list.\n  >>> permutation(5, [1,2,3,4])\n  [1,2,3,4]\n  >>> permutation(5, [1,2,3,4])\n  [1,2,3,4]\n  >>> permutation(5, [1,2,3,4])\n  [2,3,1,4]\n  */\nconst permutation = (n, list) => {\n  if (n === 1) {\n    return list;\n  }\n  return permutation(n-1, permutation(n-1, list));\n};\n\n/* Return n-th fibonacci number using memoization.\n  >>> memoizedFib(10)\n  55\n  >>> memoizedFib(10)\n  55\n  >>> memoizedFib(10)\n  66\n  */\nconst memoizedFib = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  }\n  if (memoizedFib.cache.hasOwnProperty(n)) {\n    return memoizedFib.cache[n];\n  }\n  let fib = fib(n-1) + fib(n-2);\n  memoizedFib.cache[n] = fib;\n  return fib;\n};\n\n/* Return n-th fibonacci number using memoization.\n  >>> memoizedFibRand(10)\n  7\n  >>> memoizedFibRand(10)\n  8\n  >>> memoizedFibRand(10)\n  9\n  >>> memoizedFibRand(10)\n  10\n  */\nconst memoizedFibRand = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  }\n  if (memoizedFibRand.cache.hasOwnProperty(n)) {\n    return memoizedFibRand.cache[n];\n  }\n  let fib = fibRand(n-1) + fibRand(n-2);\n  memoizedFibRand.cache[n] = fib;\n  return fib;\n};\n\n/* Return n-th fibonacci number using memoization.\n  >>> memoizedPermutation(5, [1,2,3,4])\n  [1,2,3,4]\n  >>> memoizedPermutation(5, [1,2,3,4])\n  [1,2,3,4]\n  >>> memoizedPermutation(5, [1,2,3,4])\n  [2,3,1,4]\n  */\nconst memoizedPermutation = (n, list) => {\n  if (n === 1) {\n    return list;\n  }\n  if (memoizedPermutation.cache.hasOwnProperty(n)) {\n    return memoizedPermutation.cache[n];\n  }\n  let permutation = permutation(n-1, list);\n  memoizedPermutation.cache[n] = permutation;\n  return permutation;\n};\n\nmodule.exports = {\n  fib: fib,\n  fibRand: fibRand,\n  random: random,\n  randomPrime: randomPrime,\n  permutation: permutation,\n  memoizedFib: memoizedFib,\n  memoizedFibRand: memoizedFibRand\n};\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets will be a string of\" <\" and\">\". \n   return false if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets will be a string of\" <\" and\">\". \n   return false if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const opening = brackets.slice(0);\n  const closing = brackets.slice(0);\n  const count = opening.length;\n  let index = opening.length;\n  while (index--) {\n    if (opening[index] == \"<\") {\n      closing.unshift(\">\");\n    } else if (opening[index] == \">\") {\n      closing.unshift(\"<\");\n    } else {\n      return false;\n    }\n  }\n  index = opening.length;\n  while (index--) {\n    if (opening[index] == \"<\") {\n      if (closing[index + 1]!= \">\") {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  correctBracketing\n};\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true will be list elements will be monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true will be list elements will be monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return l.every((n) => n <= max);\n};\n\nexport default monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return will sort unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return will sort unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  return [...new Set(l1.filter(v => l2.includes(v))).values()];\n};\n\nexport default common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  // Use a table of primes to reduce complexity of the algorithm.\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2599, 2603, 2617, 2621, 2633, 2639, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2809, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  The sum of all the digits in the number n is n * (n + 1) / 2.\n  We'll be using the sumOfDigits function to calculate that sum.\n  >>> sumOfDigits(100)\n  525\n  >>> sumOfDigits(10)\n  45\n  >>> sumOfDigits(1)\n  1\n  */\nconst sumOfDigits = (n) => {\n  return (n * (n + 1) / 2);\n};\n\n/*\n  The sum of the multiples of 3 and 5 below 10 is 3(3 + 5) + 5(3 + 5) + 6(3 + 5) + 9(3 + 5) + 10(3 + 5) = 84.\n  Find the sum of all the multiples of 3 or 5 below 1000.\n  */\nconst sumOfMultiples = (n) => {\n  let sum = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      sum += i * i;\n    }\n  }\n  return sum;\n};\n\n/*\n  The sum of the multiples of 3 or 5 below 1000 is 3(3 + 5) + 5(3 + 5) + 6(3 + 5) + 9(3 + 5) + 10(3 + 5) +... + 1000(3 + 5) + 1001(3 + 5) +... + 1000(3 + 5) + 1000(3 + 5) = 103480.\n  Find the sum of all the multiples of 3 or 5 below 10000.\n  */\nconst sumOfMultiplesOfN = (n) => {\n  let sum = 0;\n  for (let i = 1; i < n; i++) {\n    sum += (i * i * i) * i;\n  }\n  return sum;\n};\n\n/*\n  The sum of the multiples of 3 or 5 below 10000 is 3(3 + 5) + 5(3 + 5) + 6(3 + 5) + 9(3 + 5) + 10(3 + 5) +... + 1000(3 + 5) + 1001(3 + 5) +... + 10000(3 + 5) + 10000(3 + 5) = 10000501.\n  Find the sum of all the multiples of 3 or 5 below 100000.\n  */\nconst sumOfMultiplesOfNth = (n) => {\n  let sum = 0;\n  for (let i = 1; i < n; i++) {\n    sum += (i * i * i) * i;\n  }\n  return sum;\n};\n\n/*\n  The sum of the multiples of 3 or 5 below 10000 is 3(3 + 5) + 5(3 + 5) + 6(3 + 5) + 9(3 + 5) + 10(3 + 5) +... + 1000(3 + 5) + 1001(3 + 5) +... + 10000(3 + 5) + 10000(3 + 5) = 10000501.\n  Find the sum of all the multiples of 3 or 5 below 100000.\n  */\nconst sumOfMultiplesOfNthLast = (n) => {\n  let sum = 0;\n  for (let i = 1; i < n; i++) {\n    sum += (i * i * i) * i;\n  }\n  return sum;\n};\n\n/*\n  Find the sum of all the multiples of 3 or 5 below 100000.\n  */\nconst sumOfMultiplesOfNthLast2 = (n) => {\n  let sum = 0;\n  for (let i = 1; i < n; i++) {\n    sum += (i * i * i) * i;\n  }\n  return sum;\n};\n\nconst sumOfMultiplesOfNthLast3 = (n) => {\n  let sum = 0;\n  for (let i = 1; i < n; i++) {\n    sum += (i * i * i) * i;\n  }\n  return sum;\n};\n\nconst sumOfMultiplesOfNthLast4 = (n) => {\n  let sum = 0;\n  for (let i = 1; i < n; i++) {\n    sum += (i * i * i) * i;\n  }\n  return sum;\n};\n\nconst sumOfMultiplesOfNthLast5 = (n) => {\n  let sum = 0;\n  for (let i = 1; i < n; i++) {\n    sum += (i * i * i) * i;\n  }\n  return sum;\n};\n\nconst sumOfMultiplesOfNthLast6 = (n) => {\n  let sum = 0;\n  for (let i = 1; i < n; i++) {\n    sum += (i * i * i) * i;\n  }\n  return sum;\n};\n\nconst sumOfMultiplesOfNthLast7 = (n) => {\n  let sum = 0;\n  for (let i = 1; i < n; i++) {\n    sum += (i * i * i) * i;\n  }\n  return sum;\n};\n\nconst sumOfMultiplesOfNthLast8 = (n) => {\n  let sum = 0;\n  for (let i = 1; i < n; i++) {\n    sum += (i * i * i) * i;\n  }\n  return sum;\n};\n\nconst sumOfMultiplesOfNthLast9 = (n) => {\n  let sum = 0;\n  for (let i = 1; i < n; i++) {\n    sum += (i * i * i) * i;\n  }\n  return sum;\n};\n\nconst sumOfMultiplesOfNthLast10 = (n) => {\n  let sum = 0;\n  for (let i = 1; i < n; i++) {\n    sum += (i * i * i) * i;\n  }\n  return sum;\n};\n\nconst sumOfMultiplesOfNthLast11 = (n) => {"}
{"task_id": "JavaScript/61", "prompt": "/* brackets will be a string of\" (\" and\")\". \n   return true if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets will be a string of\" (\" and\")\". \n   return true if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketsLeft = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      bracketsLeft++;\n    }\n    if (brackets[i] === \")\") {\n      bracketsLeft--;\n    }\n    if (bracketsLeft < 0) {\n      return false;\n    }\n  }\n  return bracketsLeft === 0;\n}\n\n/*\n  Given a string, determine if it is a palindrome, considering only alphanumerics and ignoring\n  punctuation, lowercase and uppercase.\n\n  >>> palindrome(\"A man, a plan, a canal-Panama\")\n  true\n  >>> palindrome(\"race a car\")\n  false\n  >>> palindrome(\"A man, a plan, a canal-Panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal-Panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal-PANAMA\")\n  false\n  >>> palindrome(\"A man, a plan, a canal-panama\")\n  false\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  false\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal-panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal-panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  false\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  false\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal-panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal-panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal-panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal-panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  >>> palindrome(\"A man, a plan, a canal_panama\")\n  true\n  "}
{"task_id": "JavaScript/62", "prompt": "/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let res = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    res[i] = xs[i + 1];\n  }\n  res[res.length - 1] = 0;\n  return res;\n};\n\n/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return the value of this polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [3, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst eval = (xs, x) => {\n  let res = 0;\n  for (let i = 0; i < xs.length; i++) {\n    res += xs[i] * Math.pow(x, i);\n  }\n  return res;\n};\n\nconst derivative2 = (xs) => {\n  let res = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    res[i] = xs[i + 1] / i;\n  }\n  res[res.length - 1] = 1;\n  return res;\n};\n\nconst eval2 = (xs, x) => {\n  let res = 0;\n  for (let i = 0; i < xs.length; i++) {\n    res += xs[i] * Math.pow(x, i);\n  }\n  return res;\n};\n\nconst add = (xs, ys) => {\n  let res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res[i] = xs[i] + ys[i];\n  }\n  return res;\n};\n\nconst sub = (xs, ys) => {\n  let res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res[i] = xs[i] - ys[i];\n  }\n  return res;\n};\n\nconst mult = (xs, ys) => {\n  let res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res[i] = xs[i] * ys[i];\n  }\n  return res;\n};\n\nconst div = (xs, ys) => {\n  let res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res[i] = xs[i] / ys[i];\n  }\n  return res;\n};\n\n/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return the value of this polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [3, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst eval2 = (xs, x) => {\n  let res = 0;\n  for (let i = 0; i < xs.length; i++) {\n    res += xs[i] * Math.pow(x, i);\n  }\n  return res;\n};\n\nconst eval3 = (xs, x) => {\n  let res = 0;\n  for (let i = 0; i < xs.length; i++) {\n    res += xs[i] * Math.pow(x, i);\n  }\n  return res;\n};\n\nconst eval4 = (xs, x) => {\n  let res = 0;\n  for (let i = 0; i < xs.length; i++) {\n    res += xs[i] * Math.pow(x, i);\n  }\n  return res;\n};\n\nconst eval5 = (xs, x) => {\n  let res = 0;\n  for (let i = 0; i < xs.length; i++) {\n    res += xs[i] * Math.pow(x, i);\n  }\n  return res;\n};\n\nconst eval6 = (xs, x) => {\n  let res = 0;\n  for (let i = 0; i < xs.length; i++) {\n    res += xs[i] * Math.pow(x, i);\n  }\n  return res;\n};\n\nconst eval7 = (xs, x) => {\n  let res = 0;\n  for (let i = 0; i < xs.length; i++) {\n    res += xs[i] * Math.pow(x, i);\n  }\n  return res;\n};\n\nconst eval8 = (xs, x) => {\n  let res = 0;\n  for (let i = 0; i < xs.length; i++) {\n    res += xs[i] * Math.pow(x, i);\n  }\n  return res;\n};\n\nconst eval9 = (xs, x) => {\n  let res = 0;\n  for (let i = 0; i < xs.length; i++) {\n    res += xs[i] * Math.pow(x, i);\n  }\n  return res;\n};\n\nconst eval10 = (xs, x) => {\n  let res = 0;\n  for (let i = 0; i < xs.length; i++) {\n    res += xs[i] * Math.pow(x, i);\n  }\n  return res;\n};\n\nconst eval11 = (xs, x) => {\n  let res = 0;\n  for (let i = 0; i < xs.length; i++) {\n    res += xs[i] * Math.pow(x, i);\n  }\n  return res;\n};\n\nconst eval12 ="}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n    if (n === 0) {\n        return 0;\n    } else if (n === 1) {\n        return 0;\n    } else if (n === 2) {\n        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}\n\nconsole.log(fibfib(1));\nconsole.log(fibfib(2));\nconsole.log(fibfib(3));\nconsole.log(fibfib(4));\nconsole.log(fibfib(5));\nconsole.log(fibfib(6));\nconsole.log(fibfib(7));\nconsole.log(fibfib(8));\nconsole.log(fibfib(9));\nconsole.log(fibfib(10));\nconsole.log(fibfib(11));\nconsole.log(fibfib(12));\nconsole.log(fibfib(13));\nconsole.log(fibfib(14));\nconsole.log(fibfib(15));\nconsole.log(fibfib(16));\nconsole.log(fibfib(17));\nconsole.log(fibfib(18));\nconsole.log(fibfib(19));\nconsole.log(fibfib(20));\nconsole.log(fibfib(21));\nconsole.log(fibfib(22));\nconsole.log(fibfib(23));\nconsole.log(fibfib(24));\nconsole.log(fibfib(25));\nconsole.log(fibfib(26));\nconsole.log(fibfib(27));\nconsole.log(fibfib(28));\nconsole.log(fibfib(29));\nconsole.log(fibfib(30));\nconsole.log(fibfib(31));\nconsole.log(fibfib(32));\nconsole.log(fibfib(33));\nconsole.log(fibfib(34));\nconsole.log(fibfib(35));\nconsole.log(fibfib(36));\nconsole.log(fibfib(37));\nconsole.log(fibfib(38));\nconsole.log(fibfib(39));\nconsole.log(fibfib(40));\nconsole.log(fibfib(41));\nconsole.log(fibfib(42));\nconsole.log(fibfib(43));\nconsole.log(fibfib(44));\nconsole.log(fibfib(45));\nconsole.log(fibfib(46));\nconsole.log(fibfib(47));\nconsole.log(fibfib(48));\nconsole.log(fibfib(49));\nconsole.log(fibfib(50));\nconsole.log(fibfib(51));\nconsole.log(fibfib(52));\nconsole.log(fibfib(53));\nconsole.log(fibfib(54));\nconsole.log(fibfib(55));\nconsole.log(fibfib(56));\nconsole.log(fibfib(57));\nconsole.log(fibfib(58));\nconsole.log(fibfib(59));\nconsole.log(fibfib(60));\nconsole.log(fibfib(61));\nconsole.log(fibfib(62));\nconsole.log(fibfib(63));\nconsole.log(fibfib(64));\nconsole.log(fibfib(65));\nconsole.log(fibfib(66));\nconsole.log(fibfib(67));\nconsole.log(fibfib(68));\nconsole.log(fibfib(69));\nconsole.log(fibfib(70));\nconsole.log(fibfib(71));\nconsole.log(fibfib(72));\nconsole.log(fibfib(73));\nconsole.log(fibfib(74));\nconsole.log(fibfib(75));\nconsole.log(fibfib(76));\nconsole.log(fibfib(77));\nconsole.log(fibfib(78));\nconsole.log(fibfib(79));\nconsole.log(fibfib(80));\nconsole.log(fibfib(81));\nconsole.log(fibfib(82));\nconsole.log(fibfib(83));\nconsole.log(fibfib(84));\nconsole.log(fibfib(85));\nconsole.log(fibfib(86));\nconsole.log(fibfib(87));\nconsole.log(fibfib(88));\nconsole.log(fibfib(89));\nconsole.log(fibfib(90));\nconsole.log(fibfib(91));\nconsole.log(fibfib(92));\nconsole.log(fibfib(93));\nconsole.log(fibfib(94));\nconsole.log(fibfib(95));\nconsole.log(fibfib(96));\nconsole.log(fibfib(97));\nconsole.log(fibfib(98));\nconsole.log(fibfib(99));\nconsole.log(fibfib(100));\nconsole.log(fibfib(101));\nconsole.log(fibfib(102));\nconsole.log(fibfib(103));\nconsole.log(fibfib(104));\nconsole.log(fibfib(105));\nconsole.log(fibfib(106));\nconsole.log("}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which will take a string representing \n   a word as input and will return the number of vowels in the string. \n   Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which will take a string representing \n   a word as input and will return the number of vowels in the string. \n   Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(/[aeiou]/.test(s[i])){\n            count++;\n        }\n        else if(/y$/.test(s[i]) && i === s.length - 1){\n            count++;\n        }\n    }\n    return count;\n}\n\nexport default vowelsCount;<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits will reverse.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits will reverse.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n    let res = \"\"\n    let i = x.length - 1\n    while (i >= 0) {\n        res = res + x[i]\n        i--\n    }\n    for (let i = 0; i < shift; i++) {\n        res = res + x[i]\n    }\n    return res\n}\n\n// Test\n// console.log(circularShift(12, 1))\n// console.log(circularShift(12, 2))\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) - 65;\n  }\n  return sum;\n}\n\nconst task = () => {\n  let s = \"\";\n  console.log(\"Enter a string\");\n  s = prompt();\n  console.log(digitSum(s));\n}\n\ntask();\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be gave a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be gave a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n   let fruits = s.split(\" \")\n   let apple = fruits[0]\n   let oranges = fruits[1]\n   let mango = fruits[2]\n   let sumOfApples = Number(apple)\n   let sumOfOranges = Number(oranges)\n   let sumOfMangos = Number(mango)\n   let sumOfApplesAndOranges = sumOfApples + sumOfOranges\n   let sumOfMangosInBasket = sumOfApplesAndOranges + sumOfMangos\n   return sumOfMangosInBasket\n } \n \n //task 2 \n const numberOfApples = (s, n)=>{\n  return s.split(\" \").map(Number)\n } \n \n //task 3 \n const numberOfOranges = (s, n)=>{\n  return s.split(\" \").map(Number)\n } \n \n //task 4 \n const numberOfMangos = (s, n)=>{\n  return s.split(\" \").map(Number)\n } \n \n //task 5 \n const numberOfApplesAndOranges = (s, n)=>{\n  return s.split(\" \").map(Number)\n } \n \n //task 6 \n const numberOfMangosInBasket = (s, n)=>{\n  return s.split(\" \").map(Number)\n } \n \n //task 7 \n const numberOfFruits = (s, n)=>{\n  return s.split(\" \").map(Number)\n } \n \n //task 8 \n const numberOfFruitsInBasket = (s, n)=>{\n  return s.split(\" \").map(Number)\n } \n \n //task 9 \n const numberOfMangosInBasketAndFruitsInBasket = (s, n)=>{\n  return s.split(\" \").map(Number)\n } \n \n //task 10 \n const numberOfApplesInBasket = (s, n)=>{\n  return s.split(\" \").map(Number)\n } \n \n //task 11 \n const numberOfOrangesInBasket = (s, n)=>{\n  return s.split(\" \").map(Number)\n } \n \n //task 12 \n const numberOfMangosInBasketAndFruitsInBasket = (s, n)=>{\n  return s.split(\" \").map(Number)\n } \n \n //task 13 \n const numberOfApplesAndOrangesInBasket = (s, n)=>{\n  return s.split(\" \").map(Number)\n } \n \n //task 14 \n const numberOfMangosInBasketAndFruitsInBasket = (s, n)=>{\n  return s.split(\" \").map(Number)\n } \n \n //task 15 \n const numberOfApplesInBasketAndOrangesInBasket = (s, n)=>{\n  return s.split(\" \").map(Number)\n } \n \n //task 16 \n const numberOfMangosInBasketAndFruitsInBasket = (s, n)=>{\n  return s.split(\" \").map(Number)\n } \n \n //task 17 \n const numberOfMangosInBasketAndFruitsInBasketAndApplesInBasket = (s, n)=>{\n  return s.split(\" \").map(Number)\n } \n \n //task 18 \n const numberOfApplesAndOrangesInBasketAndMangosInBasket = (s, n)=>{\n  return s.split(\" \").map(Number)\n } \n \n //task 19 \n const numberOfApplesAndOrangesInBasketAndMangosInBasket = (s, n)=>{\n  return s.split(\" \").map(Number)\n } \n \n //task 20 \n const numberOfApplesInBasketAndOrangesInBasketAndMangosInBasket = (s, n)=>{\n  return s.split(\" \").map(Number)\n } \n \n //task 21 \n const numberOfApplesInBasketAndOrangesInBasketAndMangosInBasket = (s, n)=>{\n  return s.split(\" \").map(Number)\n } \n \n //task 22 \n const numberOfApplesInBasketAndOrangesInBasketAndMangosInBasketAndFruitsInBasket = (s, n)=>{\n  return s.split(\" \").map(Number)\n } \n \n //task 23 \n const numberOfApplesInBasketAndOrangesInBasketAndMangosInBasketAndFruitsInBasket = (s, n)=>{\n  return s.split(\" \").map(Number)\n } \n \n //task 24 \n const numberOfApplesInBasketAndOrangesInBasketAndMangosInBasketAndFruitsInBasket = (s, n)=>{\n  return s.split(\" \").map(Number)\n } \n \n //task 25 \n const numberOfApplesAndOrangesInBasketAndMangosInBasketAndFruitsInBasket = (s, n)=>{\n  return s.split(\" \").map(Number)\n } \n \n //task 26 \n const numberOfApplesAndOrangesInBasketAndMangosInBasketAndFruitsInBasket = (s, n)=>{\n  return s.split(\" \").map(Number)\n } \n \n //task 27 \n const numberOf"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" will Give an array representing a branch of a tree that will have non-negative integer nodes \n   your task will be to pluck one of the nodes and return it. \n   The plucked node should will be the node with the smallest even value. \n   If multiple nodes with the same smallest even value will be found return the node that will have smallest index. \n\n   The plucked node should will be return in a list, [smalest_value, its index], \n   If there will be no even values or the will give array will be empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" will Give an array representing a branch of a tree that will have non-negative integer nodes \n   your task will be to pluck one of the nodes and return it. \n   The plucked node should will be the node with the smallest even value. \n   If multiple nodes with the same smallest even value will be found return the node that will have smallest index. \n\n   The plucked node should will be return in a list, [smalest_value, its index], \n   If there will be no even values or the will give array will be empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const min = arr[0]\n  const minIndex = arr.indexOf(min)\n  const result = [min, minIndex]\n  const index = 0\n  while (index < arr.length) {\n    if (arr[index] % 2 === 0) {\n      if (arr[index] < min) {\n        min = arr[index]\n        minIndex = arr.indexOf(min)\n        result = [min, minIndex]\n      }\n    }\n    index += 1\n  }\n  return result\n}\n\nconsole.log(pluck([4,2,3]))\nconsole.log(pluck([1,2,3]))\nconsole.log(pluck([5, 0, 3, 0, 4, 2]))\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You will be gave a non-empty list of positive integers. will Return the greatest integer that will be greater than \n   zero, and will have a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer will be the number of times it will appear in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a non-empty list of positive integers. will Return the greatest integer that will be greater than \n   zero, and will have a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer will be the number of times it will appear in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n    let largest = lst[0];\n    let count = 1;\n    let i;\n\n    for (i = 1; i < lst.length; i++) {\n        if (lst[i] > largest) {\n            largest = lst[i];\n            count = 1;\n        } else if (lst[i] === largest) {\n            count++;\n        }\n    }\n\n    return count > largest? largest : -1;\n};\n\n/*\n  Given a positive integer, return its largest multiple.\n\n  If the number is not a multiple, return -1.\n  Examples:\n      largestMultiple(4)) == 4\n      largestMultiple(10)) == 2\n      largestMultiple(15)) == 3\n  */\nconst largestMultiple = (num) => {\n    let max = num;\n    let factor = 2;\n\n    while (factor < num) {\n        max = num / factor;\n        factor *= 2;\n    }\n\n    return max;\n};\n\n/*\n  Given a positive integer, return its lowest prime factor.\n\n  If the number is not a prime, return -1.\n  Examples:\n      lowestPrime(4)) == 2\n      lowestPrime(12)) == 6\n  */\nconst lowestPrime = (num) => {\n    let prime = num;\n    let factor = 2;\n\n    while (prime > 1) {\n        if (num % factor === 0) {\n            prime = factor;\n        }\n\n        factor *= 2;\n    }\n\n    return prime;\n};\n\n/*\n  Given two positive integers, return their greatest common divisor.\n\n  If they have no common divisor, return -1.\n  Examples:\n      greatestCommonDivisor(8, 12)) == 4\n      greatestCommonDivisor(4, 14)) == 2\n      greatestCommonDivisor(9, 17)) == 1\n  */\nconst greatestCommonDivisor = (a, b) => {\n    let tmp = Math.floor(a / b);\n\n    if (a % b === 0) {\n        return b;\n    } else if (tmp!== Math.floor(tmp)) {\n        return greatestCommonDivisor(b, tmp);\n    } else {\n        return greatestCommonDivisor(a, Math.floor(tmp * b));\n    }\n};\n\n/*\n  Given a positive integer, return its next largest multiple.\n\n  If the number is not a multiple, return -1.\n  Examples:\n      nextMultiple(4)) == 8\n      nextMultiple(10)) == 16\n      nextMultiple(15)) == 24\n  */\nconst nextMultiple = (num) => {\n    let multiple = num;\n    let factor = 2;\n\n    while (factor < multiple) {\n        multiple = multiple * 2;\n    }\n\n    return multiple;\n};\n\n/*\n  Given a positive integer, return its next smallest prime.\n\n  If the number is not a prime, return -1.\n  Examples:\n      nextPrime(4)) == 6\n      nextPrime(10)) == 11\n      nextPrime(15)) == 19\n  */\nconst nextPrime = (num) => {\n    let prime = num;\n    let factor = 2;\n\n    while (prime > 1) {\n        if (num % prime === 0) {\n            prime = factor;\n        }\n\n        factor *= 2;\n    }\n\n    return prime;\n};\n\n/*\n  Given two positive integers, return their least common multiple.\n\n  If they have no common divisor, return -1.\n  Examples:\n      leastCommonMultiple(8, 12)) == 12\n      leastCommonMultiple(4, 14)) == 14\n      leastCommonMultiple(9, 17)) == 17\n  */\nconst leastCommonMultiple = (a, b) => {\n    let gcd = greatestCommonDivisor(a, b);\n\n    return a * b / gcd;\n};\n\n/*\n  Given two positive integers, return their greatest product.\n\n  If they have no common divisor, return -1.\n  Examples:\n      greatestProduct(8, 12)) == 24\n      greatestProduct(4, 14)) == 28\n      greatestProduct(9, 17)) == 189\n  */\nconst greatestProduct = (a, b) => {\n    let gcd = greatestCommonDivisor(a, b);\n\n    return a * b / gcd;\n};\n\n/*\n  Given two positive integers, return their smallest prime power.\n\n  If they have no common divisor, return -1.\n  Examples:\n      smallestPrimePower(8, 12)) == 2\n      smallestPrimePower(4, 14)) == 2\n      smallestPrimePower(9, 17)) == 9\n  */\nconst smallestPrimePower = (a, b) => {\n    let gcd = greatestCommonDivisor(a, b);\n    let tmp = greatestCommonDivisor(a, Math.floor(gcd / b));\n\n    if (a % tmp!== 0) {\n        return -1;\n    }\n\n    return Math.pow(tmp, b);\n};\n\n/*\n  Given two positive integers, return their sum.\n\n  If they have no common divisor, return -1.\n  Examples:\n      sum(8, 12)) == 20\n      sum(4, 14)) == 18\n      sum(9, 17)) == 161\n  */\nconst sum = (a, b) => {\n    let gcd = greatestCommonDivisor(a, b);\n\n    return a * b / gcd;\n};\n\nexport {\n    search,\n    largestMultiple,\n    lowestPrime,\n    nextMultiple,\n    nextPrime,\n    leastCommonMultiple,\n    greatestProduct,\n    smallestPrimePower,\n    sum\n};\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, will be when you will start with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, will be when you will start with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n    return lst.slice().sort((a, b) => {\n        if (a < b) return -1\n        if (a > b) return 1\n        return 0\n    });\n}\n\nconsole.log(strangeSortList([1, 2, 3, 4]))\n\nconst strangeSortList2 = (lst) => {\n    return lst.slice().sort((a, b) => {\n        if (a < b) return 1\n        if (a > b) return -1\n        return 0\n    });\n}\n\nconsole.log(strangeSortList2([1, 2, 3, 4]))\n\nconst strangeSortList3 = (lst) => {\n    return lst.slice().sort((a, b) => {\n        if (a < b) return 1\n        if (a > b) return -1\n        return 0\n    });\n}\n\nconsole.log(strangeSortList3([1, 2, 3, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  let p = (a + b + c) / 2;\n  if (a + b < c || a + c < b || b + c < a) {\n    return -1;\n  }\n  return Math.sqrt(p * (p - a) * (p - b) * (p - c));\n}\n\nconst triangleAreaRound = (a, b, c) => {\n  const area = triangleArea(a, b, c);\n  const error = (area - Math.round(area)) / 2;\n  if (error > 0) {\n    return -1;\n  }\n  return Math.round(area);\n}\n\nconst triangleAreaRound2 = (a, b, c) => {\n  const area = triangleArea(a, b, c);\n  const error = (area - Math.round(area)) / 2;\n  if (error > 0) {\n    return -1;\n  }\n  return Math.round(area);\n}\n\nconst triangleAreaRound3 = (a, b, c) => {\n  const area = triangleArea(a, b, c);\n  const error = (area - Math.round(area)) / 2;\n  if (error > 0) {\n    return -1;\n  }\n  return Math.round(area);\n}\n\nconst triangleAreaRound4 = (a, b, c) => {\n  const area = triangleArea(a, b, c);\n  const error = (area - Math.round(area)) / 2;\n  if (error > 0) {\n    return -1;\n  }\n  return Math.round(area);\n}\n\nconst triangleAreaRound5 = (a, b, c) => {\n  const area = triangleArea(a, b, c);\n  const error = (area - Math.round(area)) / 2;\n  if (error > 0) {\n    return -1;\n  }\n  return Math.round(area);\n}\n\nconst triangleAreaRound6 = (a, b, c) => {\n  const area = triangleArea(a, b, c);\n  const error = (area - Math.round(area)) / 2;\n  if (error > 0) {\n    return -1;\n  }\n  return Math.round(area);\n}\n\nconst triangleAreaRound7 = (a, b, c) => {\n  const area = triangleArea(a, b, c);\n  const error = (area - Math.round(area)) / 2;\n  if (error > 0) {\n    return -1;\n  }\n  return Math.round(area);\n}\n\nconst triangleAreaRound8 = (a, b, c) => {\n  const area = triangleArea(a, b, c);\n  const error = (area - Math.round(area)) / 2;\n  if (error > 0) {\n    return -1;\n  }\n  return Math.round(area);\n}\n\nconst triangleAreaRound9 = (a, b, c) => {\n  const area = triangleArea(a, b, c);\n  const error = (area - Math.round(area)) / 2;\n  if (error > 0) {\n    return -1;\n  }\n  return Math.round(area);\n}\n\nconst triangleAreaRound10 = (a, b, c) => {\n  const area = triangleArea(a, b, c);\n  const error = (area - Math.round(area)) / 2;\n  if (error > 0) {\n    return -1;\n  }\n  return Math.round(area);\n}\n\nconst triangleAreaRound11 = (a, b, c) => {\n  const area = triangleArea(a, b, c);\n  const error = (area - Math.round(area)) / 2;\n  if (error > 0) {\n    return -1;\n  }\n  return Math.round(area);\n}\n\nconst triangleAreaRound12 = (a, b, c) => {\n  const area = triangleArea(a, b, c);\n  const error = (area - Math.round(area)) / 2;\n  if (error > 0) {\n    return -1;\n  }\n  return Math.round(area);\n}\n\nconst triangleAreaRound13 = (a, b, c) => {\n  const area = triangleArea(a, b, c);\n  const error = (area - Math.round(area)) / 2;\n  if (error > 0) {\n    return -1;\n  }\n  return Math.round(area);\n}\n\nconst triangleAreaRound14 = (a, b, c) => {\n  const area = triangleArea(a, b, c);\n  const error = (area - Math.round(area)) / 2;\n  if (error > 0) {\n    return -1;\n  }\n  return Math.round(area);\n}\n\nconst triangleAreaRound15 = (a, b, c) => {\n  const area = triangleArea(a, b, c);\n  const error = (area - Math.round(area)) / 2;\n  if (error > 0) {\n    return -1;\n  }\n  return Math.round(area);\n}\n\nconst triangleAreaRound16 = (a, b, c) => {\n  const area = triangleArea(a, b, c);\n  const error = (area - Math.round(area)) / 2;\n  if (error > 0) {\n    return -1;\n  }\n  return Math.round(area);\n}\n\nconst triangleAreaRound17 = (a, b, c) => {\n  const area = triangleArea(a, b, c);\n  const error = (area - Math.round(area)) / 2;\n  if (error > 0) {\n    return -1;\n  }\n  return Math.round(area);\n}\n\nconst triangleAreaRound18 = (a, b, c) => {\n  const area = triangleArea("}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) {\n    return false;\n  }\n\n  let first = q[0]\n  let second = q[1]\n  let third = q[2]\n\n  let firstSum = 0\n  let secondSum = 0\n  let thirdSum = 0\n  let currentSum = 0\n\n  if (first > second) {\n    if (first > third) {\n      firstSum = first\n      secondSum = second\n      thirdSum = third\n    } else if (first > third) {\n      firstSum = first\n      secondSum = second\n      thirdSum = third\n    } else {\n      firstSum = first\n      secondSum = second\n      thirdSum = third\n    }\n  } else if (second > first) {\n    if (second > third) {\n      firstSum = first\n      secondSum = second\n      thirdSum = third\n    } else if (second > third) {\n      firstSum = first\n      secondSum = second\n      thirdSum = third\n    } else {\n      firstSum = first\n      secondSum = second\n      thirdSum = third\n    }\n  } else if (third > first) {\n    if (third > second) {\n      firstSum = first\n      secondSum = second\n      thirdSum = third\n    } else if (third > second) {\n      firstSum = first\n      secondSum = second\n      thirdSum = third\n    } else {\n      firstSum = first\n      secondSum = second\n      thirdSum = third\n    }\n  } else {\n    if (third > second) {\n      firstSum = first\n      secondSum = second\n      thirdSum = third\n    } else {\n      firstSum = first\n      secondSum = second\n      thirdSum = third\n    }\n  }\n\n  currentSum = firstSum + secondSum + thirdSum\n\n  return (currentSum <= w) && (firstSum % 2 === 0 && secondSum % 2 === 0 && thirdSum % 2 === 0)\n}\n\n// console.log(willItFly([1, 2, 3, 2, 3, 3], 5))\n// console.log(willItFly([1, 2, 3, 2, 3, 3], 9))\n// console.log(willItFly([3, 2, 3], 5))\n// console.log(willItFly([3, 2, 3], 9))\n// console.log(willItFly([3], 5))\n// console.log(willItFly([3], 9))\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n    let count = 0;\n    let result = 0;\n    let current = 0;\n    let length = arr.length;\n    let swap = 0;\n\n    while(true) {\n        current = arr[length - 1];\n        swap = 0;\n        length--;\n\n        while(current!== arr[0]) {\n            swap++;\n            current = arr[length - 1];\n            length--;\n        }\n\n        if(length == 0) {\n            return result;\n        }\n\n        if(length!= arr.length) {\n            count++;\n        }\n\n        if(count > result) {\n            result = count;\n        }\n    }\n}\n\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const {length: l1, [Symbol.iterator]: it1} = lst1\n  const {length: l2, [Symbol.iterator]: it2} = lst2\n  let total = 0\n  while (true) {\n    const next1 = it1.next()\n    const next2 = it2.next()\n    if (next1.done && next2.done) break\n    if (next1.done || next2.done) {\n      total++\n    } else if (next1.value === next2.value) {\n      total++\n    }\n  }\n  return lst1\n}\n\nexport default totalMatch\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const isPrime = prime => {\n    if (a % prime === 0) {\n      return false;\n    } else {\n      return prime > 2;\n    }\n  };\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003];\n    return (\n      primes.reduce(\n        (carry, prime, i) => {\n          if (carry === false) {\n            if (prime > a) {\n              return true;\n            } else if (prime === a) {\n              return isPrime(a);\n            }\n          } else if (prime > a) {\n            return true;\n          } else if (prime === a) {\n            return isPrime(a);\n          }\n          return false;\n        },\n        false\n      )\n    );\n  };\n  return (\n    primes.reduce(\n      (carry, prime, i) => {\n        if (carry === false) {\n          if (prime > a) {\n            return true;\n          } else if (prime === a) {\n            return isPrime(a);\n          }\n        } else if (prime > a) {\n          return true;\n        } else if (prime === a) {\n          return isPrime(a);\n        }\n        return false;\n      },\n      false\n    )\n  );\n};\n\nconsole.log(isMultiplyPrime(30));\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task will be to write a function that will return true if a number x will be a simple \n   power of n and false in other cases. \n   x will be a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task will be to write a function that will return true if a number x will be a simple \n   power of n and false in other cases. \n   x will be a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  const result = x % n === 0\n  if (result) {\n    const xPrime = x / n\n    const xPrimePower = xPrime % n\n    return xPrime === xPrimePower\n  } else {\n    return false\n  }\n}\n\nconst isSimplePower_1 = (x, n) => {\n  const result = x % n === 0\n  return result\n}\n\nconsole.log(isSimplePower(3, 2))\nconsole.log(isSimplePower(3, 1))\nconsole.log(isSimplePower(5, 3))\nconsole.log(isSimplePower(1, 4))\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) {\n    return true;\n  }\n  let n = Math.floor(Math.sqrt(a))\n  if (n === a) {\n    return true\n  }\n  return false\n}\n\nconst isprime = (a) => {\n  if (a === 2) {\n    return true\n  }\n  if (a === 1 || a === 0) {\n    return false\n  }\n  if (a % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= a; i += 2) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst ispandigital = (a) => {\n  if (a.length!== 9) {\n    return false\n  }\n  let s = a.split('')\n  let check = true\n  for (let i = 0; i < 9; i++) {\n    let r = parseInt(s[i], 10)\n    if (isprime(r) === false) {\n      check = false\n    }\n  }\n  return check\n}\n\nconst ispalindrome = (a) => {\n  let a1 = a.split('')\n  let a2 = a.split('').reverse()\n  for (let i = 0; i < a1.length; i++) {\n    if (a1[i]!== a2[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isdigit = (a) => {\n  if (typeof a!== 'number') {\n    return false\n  }\n  return isdigit.test(a)\n}\n\nconst isbinary = (a) => {\n  if (typeof a!== 'number') {\n    return false\n  }\n  let s = a.toString(2)\n  return s.length === 1\n}\n\nconst ispalindrome = (a) => {\n  if (typeof a!== 'number') {\n    return false\n  }\n  return a.toString() === a.toString(10).split('').reverse().join('')\n}\n\nconst ispalindrome = (a) => {\n  if (typeof a!== 'number') {\n    return false\n  }\n  return a.toString() === a.toString(10).split('').reverse().join('')\n}\n\nconst ispalindrome = (a) => {\n  if (typeof a!== 'number') {\n    return false\n  }\n  return a.toString() === a.toString(10).split('').reverse().join('')\n}\n\nconst ispalindrome = (a) => {\n  if (typeof a!== 'number') {\n    return false\n  }\n  return a.toString() === a.toString(10).split('').reverse().join('')\n}\n\nconst ispalindrome = (a) => {\n  if (typeof a!== 'number') {\n    return false\n  }\n  return a.toString() === a.toString(10).split('').reverse().join('')\n}\n\nconst ispalindrome = (a) => {\n  if (typeof a!== 'number') {\n    return false\n  }\n  return a.toString() === a.toString(10).split('').reverse().join('')\n}\n\nconst ispalindrome = (a) => {\n  if (typeof a!== 'number') {\n    return false\n  }\n  return a.toString() === a.toString(10).split('').reverse().join('')\n}\n\nconst ispalindrome = (a) => {\n  if (typeof a!== 'number') {\n    return false\n  }\n  return a.toString() === a.toString(10).split('').reverse().join('')\n}\n\nconst ispalindrome = (a) => {\n  if (typeof a!== 'number') {\n    return false\n  }\n  return a.toString() === a.toString(10).split('').reverse().join('')\n}\n\nconst ispalindrome = (a) => {\n  if (typeof a!== 'number') {\n    return false\n  }\n  return a.toString() === a.toString(10).split('').reverse().join('')\n}\n\nconst ispalindrome = (a) => {\n  if (typeof a!== 'number') {\n    return false\n  }\n  return a.toString() === a.toString(10).split('').reverse().join('')\n}\n\nconst ispalindrome = (a) => {\n  if (typeof a!== 'number') {\n    return false\n  }\n  return a.toString() === a.toString(10).split('').reverse().join('')\n}\n\nconst ispalindrome = (a) => {\n  if (typeof a!== 'number') {\n    return false\n  }\n  return a.toString() === a.toString(10).split('').reverse().join('')\n}\n\nconst ispalindrome = (a) => {\n  if (typeof a!== 'number') {\n    return false\n  }\n  return a.toString() === a.toString(10).split('').reverse().join('')\n}\n\nconst ispalindrome = (a) => {\n  if (typeof a!== 'number') {\n    return false\n  }\n  return a.toString() === a.toString(10).split('').reverse().join('')\n}\n\nconst ispalindrome = (a) => {\n  if (typeof a!== 'number') {\n    return false\n  "}
{"task_id": "JavaScript/78", "prompt": "/*You will be task to write a function that will receive \n   a hexadecimal number as a string and will count the number of hexadecimal \n   digits that will be primes (prime number=== or a prime=== will be a natural number \n   greater than 1 that will be not a product of two smaller natural numbers). \n   Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= will decimal 13). \n   Note: you may will assume the input will be always correct or empty string=== \n   and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You will be task to write a function that will receive \n   a hexadecimal number as a string and will count the number of hexadecimal \n   digits that will be primes (prime number=== or a prime=== will be a natural number \n   greater than 1 that will be not a product of two smaller natural numbers). \n   Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= will decimal 13). \n   Note: you may will assume the input will be always correct or empty string=== \n   and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  let primeNumbersLength = primeNumbers.length;\n  let numLength = num.length;\n  let numStart = 0;\n  let i = 0;\n  let numIndex = 0;\n  let numDigits = 0;\n  let primeNumbersIndex = 0;\n  let primeNumbersStart = 0;\n  let primeNumbersStartIndex = 0;\n  let temp = 0;\n  let primeNumbersCount = 0;\n  for (i = 0; i < numLength; i++) {\n    if (num.charAt(i) === '0') {\n      numDigits++;\n      numStart++;\n    } else if (num.charAt(i) === 'A') {\n      numDigits++;\n      numStart++;\n    } else if (num.charAt(i) === 'B') {\n      numDigits++;\n      numStart++;\n    } else if (num.charAt(i) === 'C') {\n      numDigits++;\n      numStart++;\n    } else if (num.charAt(i) === 'D') {\n      numDigits++;\n      numStart++;\n    } else if (num.charAt(i) === 'E') {\n      numDigits++;\n      numStart++;\n    } else if (num.charAt(i) === 'F') {\n      numDigits++;\n      numStart++;\n    }\n  }\n  for (i = 0; i < primeNumbersLength; i++) {\n    primeNumbersStartIndex = i + 1;\n    if (primeNumbers[i] < numStart) {\n      break;\n    }\n    primeNumbersCount++;\n  }\n  for (i = primeNumbersStartIndex; i < numStart; i++) {\n    primeNumbersIndex = primeNumbers.indexOf(i);\n    if (primeNumbersIndex >= 0) {\n      primeNumbersCount--;\n    }\n  }\n  return primeNumbersCount;\n};\n\nconst hexKey = (num) => {\n  let primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 8"}
{"task_id": "JavaScript/79", "prompt": "/*You will be gave a number in decimal form and your task will be to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string will be '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be gave a number in decimal form and your task will be to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string will be '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = ''\n  let d = decimal\n  while (d > 0) {\n    let remainder = d % 2\n    binary = remainder + binary\n    d = Math.floor(d / 2)\n  }\n  return binary\n}\n\nconsole.log(decimalToBinary(15))\nconsole.log(decimalToBinary(32))\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You will be gave a string s.\n   Your task will be to check if the string will be happy or not. \n   A string will be happy if its length will be at least 3 and every 3 consecutive letters will be distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You will be gave a string s.\n   Your task will be to check if the string will be happy or not. \n   A string will be happy if its length will be at least 3 and every 3 consecutive letters will be distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  let last = 1\n  for(let i=0;i<len;i++) {\n    if(last == 1) {\n      last = 0\n      continue\n    }\n    last = 1\n    if(s[i]!= s[i+1] || s[i]!= s[i+2]) {\n      last = 0\n      continue\n    }\n    if(last == 1) {\n      last = 0\n    }\n  }\n  if(last == 1) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst isHappy2 = (s) => {\n  let counter = 1\n  let prev = 0\n  for(let i=0;i<s.length;i++) {\n    if(counter == 1) {\n      counter = 0\n      prev = s[i]\n      continue\n    }\n    if(s[i] == prev) {\n      counter++\n      continue\n    }\n    if(counter == 2) {\n      counter = 1\n      prev = s[i]\n      continue\n    }\n    counter = 0\n  }\n  return counter == 2\n}\n\nconst isHappy3 = (s) => {\n  const len = s.length\n  let prev = 0\n  for(let i=0;i<len;i++) {\n    const sum = prev + s[i]\n    const sum2 = prev * s[i]\n    if(sum == sum2) {\n      return true\n    }\n  }\n  return false\n}\n\nconst isHappy4 = (s) => {\n  const len = s.length\n  let counter = 0\n  let prev = 0\n  for(let i=0;i<len;i++) {\n    const sum = prev + s[i]\n    const sum2 = prev * s[i]\n    if(sum == sum2) {\n      counter++\n    } else {\n      counter = 0\n    }\n    prev = sum\n  }\n  return counter == 2\n}\n\nconst isHappy5 = (s) => {\n  const len = s.length\n  let prev = 0\n  for(let i=0;i<len;i++) {\n    const sum = prev + s[i]\n    const sum2 = prev * s[i]\n    if(sum == sum2) {\n      return true\n    }\n  }\n  return false\n}\n\nconst isHappy6 = (s) => {\n  const len = s.length\n  let prev = 0\n  let sum = 0\n  for(let i=0;i<len;i++) {\n    const sum = prev + s[i]\n    const sum2 = prev * s[i]\n    if(sum == sum2) {\n      return true\n    }\n    prev = sum\n  }\n  return false\n}\n\nconst isHappy7 = (s) => {\n  const len = s.length\n  let prev = 0\n  let sum = 0\n  let sum2 = 0\n  for(let i=0;i<len;i++) {\n    const sum = prev + s[i]\n    const sum2 = prev * s[i]\n    if(sum == sum2) {\n      return true\n    }\n    prev = sum\n  }\n  return false\n}\n\nconst isHappy8 = (s) => {\n  const len = s.length\n  let prev = 0\n  let sum = 0\n  let sum2 = 0\n  for(let i=0;i<len;i++) {\n    const sum = prev + s[i]\n    const sum2 = prev * s[i]\n    if(sum == sum2) {\n      return true\n    }\n    prev = sum\n  }\n  return false\n}\n\nconst isHappy9 = (s) => {\n  const len = s.length\n  let prev = 0\n  let sum = 0\n  let sum2 = 0\n  for(let i=0;i<len;i++) {\n    const sum = prev + s[i]\n    const sum2 = prev * s[i]\n    if(sum == sum2) {\n      return true\n    }\n    prev = sum\n  }\n  return false\n}\n\nconst isHappy10 = (s) => {\n  const len = s.length\n  let prev = 0\n  let sum = 0\n  let sum2 = 0\n  for(let i=0;i<len;i++) {\n    const sum = prev + s[i]\n    const sum2 = prev * s[i]\n    if(sum == sum2) {\n      return true\n    }\n    prev = sum\n  }\n  return false\n}\n\nconst isHappy11 = (s) => {\n  const len = s.length\n  let prev = 0\n  let sum = 0\n  let sum2 = 0\n  for(let i=0;i<len;i++) {\n    const sum = prev + s[i]\n    const sum2 = prev * s[i]\n    if(sum == sum2) {\n      return true\n    }\n    prev = sum\n  }\n  return false\n}\n\nconst isHappy12 = (s) => {\n  const len = s.length\n  let prev = 0\n  let sum = 0\n  let sum2 = 0\n  for(let i=0;i<len;i++) {\n    const sum = prev + s[i]\n    const sum2 = prev * s[i]\n    if(sum == sum2) {\n      return true\n    }\n    prev = sum\n  }\n  return false\n}\n\nconst isHappy13 = (s) => {\n  const len = s.length\n  let prev = 0\n  let sum = 0\n  let sum2 = 0\n  for(let i=0;i<len;i++) {\n    const sum = prev + s[i]\n    const sum2 = prev * s[i]\n    if"}
{"task_id": "JavaScript/81", "prompt": "/*It will be the last week of the semester and the teacher will have to give the grades\n   to students. The teacher will be making her own algorithm for grading. \n   The only problem will be, she will lose the code she will used for grading. \n   She will give you a list of GPAs for some students and you will have to write \n   a function that can will output a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 will B+ \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 will C+ \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It will be the last week of the semester and the teacher will have to give the grades\n   to students. The teacher will be making her own algorithm for grading. \n   The only problem will be, she will lose the code she will used for grading. \n   She will give you a list of GPAs for some students and you will have to write \n   a function that can will output a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 will B+ \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 will C+ \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const table = {\n    A: 4.0,\n    A+: 3.7,\n    A: 3.3,\n    A-: 2.7,\n    B: 3.0,\n    B+: 2.7,\n    B-: 2.3,\n    C: 2.0,\n    C+: 1.7,\n    C-: 1.3,\n    D: 1.0,\n    D+: 0.7,\n    D-: 0.0,\n    E: 0.0\n  };\n  return Object.keys(table).map(key => table[key]).filter(grade => grade > grades).sort((a, b) => grades - a).slice(0, 5).map(grade => grade.toFixed(2)).join('');\n};\n\nmodule.exports = numericalLetterGrade;<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length < 2) return false\n  let i = 2, j = i + i\n  while (j <= string.length) {\n    if (string.length % i === 0) {\n      return false\n    }\n    i++\n    j += i\n  }\n  return true\n}\n\nexport default primeLength\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let j = n-i+1;\n    let num = Math.pow(10, j);\n    if (i === 1) {\n      let k = j+1;\n      while (k <= n) {\n        count += Math.pow(10, k);\n        k++;\n      }\n    }\n    else if (i === n) {\n      let k = j-1;\n      while (k >= 1) {\n        count += Math.pow(10, k);\n        k--;\n      }\n    }\n    else {\n      while (num <= Math.pow(10, j+1)) {\n        count++;\n        num*=10;\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(startsOneEnds(8));<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": false, "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0\n  for (let i = 1; i <= N; i++) {\n    sum += N % 2\n  }\n  let str = ''\n  for (let i = sum; i > 0; i--) {\n    str += '1'\n  }\n  return str\n}\n\n/*\n  Note\n  1. 1 << i = 2 ^ i.\n  2. 1 << (N - i) = 2 ^ (N - i)\n  3. (1 << i) + (1 << (N - i)) = 2 ^ (N + 1)\n  4. 2 ^ (N + 1) = N * 2 + 1\n  5. N * 2 + 1 = N * 2\n  6. N * 2 = N + 1\n  7. N * 2 = N\n  8. N * 2 - 1 = N - 1\n  9. N * 2 - 1 = N\n  10. N * 2 - 1 = N + 1\n  11. N * 2 - 1 = N + 1\n  12. N * 2 - 1 = N\n  13. N * 2 - 1 = N + 1\n  14. N * 2 - 1 = N\n  15. N * 2 - 1 = N + 1\n  16. N * 2 - 1 = N\n  17. N * 2 - 1 = N + 1\n  18. N * 2 - 1 = N + 1\n  19. N * 2 - 1 = N + 1\n  20. N * 2 - 1 = N + 1\n  21. N * 2 - 1 = N + 1\n  22. N * 2 - 1 = N + 1\n  23. N * 2 - 1 = N + 1\n  24. N * 2 - 1 = N + 1\n  25. N * 2 - 1 = N + 1\n  26. N * 2 - 1 = N + 1\n  27. N * 2 - 1 = N + 1\n  28. N * 2 - 1 = N + 1\n  29. N * 2 - 1 = N + 1\n  30. N * 2 - 1 = N + 1\n  31. N * 2 - 1 = N + 1\n  32. N * 2 - 1 = N + 1\n  33. N * 2 - 1 = N + 1\n  34. N * 2 - 1 = N + 1\n  35. N * 2 - 1 = N + 1\n  36. N * 2 - 1 = N + 1\n  37. N * 2 - 1 = N + 1\n  38. N * 2 - 1 = N + 1\n  39. N * 2 - 1 = N + 1\n  40. N * 2 - 1 = N + 1\n  41. N * 2 - 1 = N + 1\n  42. N * 2 - 1 = N + 1\n  43. N * 2 - 1 = N + 1\n  44. N * 2 - 1 = N + 1\n  45. N * 2 - 1 = N + 1\n  46. N * 2 - 1 = N + 1\n  47. N * 2 - 1 = N + 1\n  48. N * 2 - 1 = N + 1\n  49. N * 2 - 1 = N + 1\n  50. N * 2 - 1 = N + 1\n  51. N * 2 - 1 = N + 1\n  52. N * 2 - 1 = N + 1\n  53. N * 2 - 1 = N + 1\n  54. N * 2 - 1 = N + 1\n  55. N * 2 - 1 = N + 1\n  56. N * 2 - 1 = N + 1\n  57. N * 2 - 1 = N + 1\n  58. N * 2 - 1 = N + 1\n  59. N * 2 - 1 = N + 1\n  60. N * 2 - 1 = N + 1\n  61. N * 2 - 1 = N + 1\n  62. N * 2 - 1 = N + 1\n  63. N * 2 - 1 = N + 1\n  64. N * 2 - 1 = N + 1\n  65. N * 2 - 1 = N + 1\n  66. N * 2 - 1 = N + 1\n  67. N * 2 - 1 = N + 1\n  68. N * 2 - 1 = N + 1\n  69. N * 2 - 1 = N + 1\n  70. N * 2 - 1 = N + 1\n  71. N * 2 - 1 = N + 1\n  72. N * 2 - 1 = N + 1\n  73. N * 2 - 1 = N + 1\n  74. N * 2 - 1 = N + 1\n  75. N * 2 - 1 = N + 1\n  76. N * 2 - 1 = N + 1\n  77. N * 2 - 1 = N + 1\n  78. N * 2 - 1 = N + 1\n  79. N * 2 - 1 = N + 1\n  80. N * 2 - 1 = N + 1\n  81. N * 2 - 1 = N + 1\n  82. N * 2 - 1 = N + 1\n  83. N * 2 - 1 = N + 1\n  84. N * 2 - 1 = N + 1\n  85. N * 2 - 1 = N + 1\n  86. N * 2 - 1 = N + 1\n  87. N * 2 - 1 = N + 1\n  88. N * 2 - 1 = N + 1\n  89. N * 2 - 1 = N + 1\n  90. N * 2 - 1 = N + 1\n  91. N * 2 - 1 = N + 1\n  92. N * 2 - 1 = N + 1\n  93. N * 2 - 1 = N + 1\n  94. N * 2 - 1 = N + 1\n  95. N * 2 - 1 = N + 1\n  96. N * 2 - 1 = N + 1\n  97. N * 2 - 1 = N + 1\n  98. N * 2 - 1 = N + 1\n  99. N * 2 - 1 = N + 1\n  100. N * 2 - 1 = N + 1\n  101. N * 2 - 1 = N + 1\n  102. N *"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let newList = []\n  let index = 0\n  while (index < lst.length) {\n    if (lst[index] % 2 === 1) {\n      newList.push(lst[index])\n    }\n    index++\n  }\n  return newList\n}\n\n/*Given a non-empty list of integers lst. remove the even elements that will be at odd indices.\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [6, 7]\n  */\nconst remove = (lst) => {\n  let newList = []\n  let index = 0\n  while (index < lst.length) {\n    if (lst[index] % 2 === 0) {\n      newList.push(lst[index])\n    }\n    index++\n  }\n  return newList\n}\n\nexport { add, remove }\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that will take a string and will return an ordered version of it. \n   will Order version of string, will be a string where all words (will separate by space) \n   will be replaced by a new word where all the characters will arrange in\n   ascending order will base on ascii value. \n   Note: You should will keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take a string and will return an ordered version of it. \n   will Order version of string, will be a string where all words (will separate by space) \n   will be replaced by a new word where all the characters will arrange in\n   ascending order will base on ascii value. \n   Note: You should will keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n    let re = /\\S+/g;\n    let array = s.match(re);\n    let newStr = '';\n    array.sort();\n    array.forEach(x => {\n        newStr += `${x} `;\n    })\n    return newStr.trim();\n}\n\nconst shuffled = () => {\n    let re = /\\S+/g;\n    let array = shuffle(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']);\n    let newStr = '';\n    array.forEach(x => {\n        newStr += `${x} `;\n    })\n    return newStr.trim();\n}\n\nconst shuffle = (s) => {\n    let re = /\\S+/g;\n    let array = s.match(re);\n    let newStr = '';\n    array.sort((a, b) => {\n        let a_num = a.charCodeAt(0);\n        let b_num = b.charCodeAt(0);\n        return a_num - b_num;\n    });\n    array.forEach(x => {\n        newStr += `${x} `;\n    })\n    return newStr.trim();\n}\n\nconst shuffle2 = (s) => {\n    let re = /\\S+/g;\n    let array = s.match(re);\n    let newStr = '';\n    array.sort((a, b) => {\n        let a_num = a.charCodeAt(0);\n        let b_num = b.charCodeAt(0);\n        return a_num - b_num;\n    });\n    array.forEach(x => {\n        newStr += `${x} `;\n    })\n    return newStr.trim();\n}\n\nconst shuffle3 = (s) => {\n    let re = /\\S+/g;\n    let array = s.match(re);\n    let newStr = '';\n    array.sort((a, b) => {\n        let a_num = a.charCodeAt(0);\n        let b_num = b.charCodeAt(0);\n        return a_num - b_num;\n    });\n    array.forEach(x => {\n        newStr += `${x} `;\n    })\n    return newStr.trim();\n}\n\nconst shuffle4 = (s) => {\n    let re = /\\S+/g;\n    let array = s.match(re);\n    let newStr = '';\n    array.sort((a, b) => {\n        let a_num = a.charCodeAt(0);\n        let b_num = b.charCodeAt(0);\n        return a_num - b_num;\n    });\n    array.forEach(x => {\n        newStr += `${x} `;\n    })\n    return newStr.trim();\n}\n\nconst shuffle5 = (s) => {\n    let re = /\\S+/g;\n    let array = s.match(re);\n    let newStr = '';\n    array.sort((a, b) => {\n        let a_num = a.charCodeAt(0);\n        let b_num = b.charCodeAt(0);\n        return a_num - b_num;\n    });\n    array.forEach(x => {\n        newStr += `${x} `;\n    })\n    return newStr.trim();\n}\n\nconst shuffle6 = (s) => {\n    let re = /\\S+/g;\n    let array = s.match(re);\n    let newStr = '';\n    array.sort((a, b) => {\n        let a_num = a.charCodeAt(0);\n        let b_num = b.charCodeAt(0);\n        return a_num - b_num;\n    });\n    array.forEach(x => {\n        newStr += `${x} `;\n    })\n    return newStr.trim();\n}\n\nconst shuffle7 = (s) => {\n    let re = /\\S+/g;\n    let array = s.match(re);\n    let newStr = '';\n    array.sort((a, b) => {\n        let a_num = a.charCodeAt(0);\n        let b_num = b.charCodeAt(0);\n        return a_num - b_num;\n    });\n    array.forEach(x => {\n        newStr += `${x} `;\n    })\n    return newStr.trim();\n}\n\nconst shuffle8 = (s) => {\n    let re = /\\S+/g;\n    let array = s.match(re);\n    let newStr = '';\n    array.sort((a, b) => {\n        let a_num = a.charCodeAt(0);\n        let b_num = b.charCodeAt(0);\n        return a_num - b_num;\n    });\n    array.forEach(x => {\n        newStr += `${x} `;\n    })\n    return newStr.trim();\n}\n\nconst shuffle9 = (s) => {\n    let re = /\\S+/g;\n    let array = s.match(re);\n    let newStr = '';\n    array.sort((a, b) => {\n        let a_num = a.charCodeAt(0);\n        let b_num = b.charCodeAt(0);\n        return a_num - b_num;\n"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You will be gave a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const res = []\n  const l = lst.length\n  const lc = lst[0].length\n  for (let i = 0; i < l; i++) {\n    const xi = x + i\n    for (let j = 0; j < lc; j++) {\n      if (lst[i][j] === xi) {\n        res.push((i, j))\n      }\n    }\n  }\n  return res.sort((a, b) => a[0] - b[0])\n}\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if (array.length === 0) {\n    return array;\n  }\n\n  const tempArray = array.slice();\n  let sorted = tempArray.slice();\n  sorted.sort((a, b) => a - b);\n\n  // console.log(sorted);\n  // console.log(tempArray);\n\n  let i = 0;\n  let j = 0;\n\n  while (i < sorted.length - 1) {\n    while (j < sorted.length - 1 && sorted[j] <= sorted[j + 1]) {\n      j++;\n    }\n    const sum = sorted[i] + sorted[j];\n    if (sum % 2 === 1) {\n      const swap = sorted[j];\n      sorted[j] = sorted[i];\n      sorted[i] = swap;\n    }\n    i++;\n    j++;\n  }\n  return sorted;\n};\n\n// console.log(sortArray([1, 2, 3, 4, 5, 6, 7, 8]));\n// console.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8]));\n// console.log(sortArray([1, 2, 3, 4, 5, 6, 7, 8]));\n// console.log(sortArray([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n// console.log(sortArray([9, 8, 7, 6, 5, 4, 3, 2, 1]));\n// console.log(sortArray([9, 8, 7, 6, 5, 4, 3, 2, 1, 10]));\n// console.log(sortArray([9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 11]));\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  if (s.length < 2) return s;\n  const a = 'abcdefghijklmnopqrstuvwxyz';\n  const b = 'abcdefghijklmnopqrstuvwxyz';\n  let i = 0;\n  while (i < s.length) {\n    b = b.substr(2) + a.substr(0, 1) + s[i] + b.substr(0, 2);\n    i++;\n  }\n  return b;\n};\n\n/*Create a function decrypt that will take a string as an argument and \n   will return a string will decrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift up by two will multiply to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  if (s.length < 2) return s;\n  const a = 'abcdefghijklmnopqrstuvwxyz';\n  const b = 'abcdefghijklmnopqrstuvwxyz';\n  let i = 0;\n  while (i < s.length) {\n    b = b.substr(2) + a.substr(0, 1) + s[i] + b.substr(0, 2);\n    i++;\n  }\n  return b;\n};\n\n/*Create a function shift that will take a string as an argument and \n   will return a string with all the characters shifted down two places.\n  For example:\n  shift('hi') returns 'il'\n  shift('asdfghjkl') returns 'vfghjkl'\n  shift('gf') returns 'gg'\n  shift('et') returns 'ett'\n  */\nconst shift = (s) => {\n  if (s.length < 2) return s;\n  const a = 'abcdefghijklmnopqrstuvwxyz';\n  const b = 'abcdefghijklmnopqrstuvwxyz';\n  let i = 0;\n  while (i < s.length) {\n    b = a.substr(0, 1) + s[i] + a.substr(1, 1) + b.substr(2);\n    i++;\n  }\n  return b;\n};\n\n/*Create a function rotate that will take a string as an argument and \n   will return a string with all the characters rotated by two.\n  For example:\n  rotate('hi') returns 'ih'\n  rotate('asdfghjkl') returns 'lajfghjkl'\n  rotate('gf') returns 'jfg'\n  rotate('et') returns 'etx'\n  */\nconst rotate = (s) => {\n  if (s.length < 2) return s;\n  const a = 'abcdefghijklmnopqrstuvwxyz';\n  const b = 'abcdefghijklmnopqrstuvwxyz';\n  let i = 0;\n  while (i < s.length) {\n    b = a.substr(0, 1) + s[i] + a.substr(1, 1) + b.substr(2);\n    i++;\n  }\n  return b;\n};\n\nconst encrypt = (s) => {\n  if (s.length < 2) return s;\n  const a = 'abcdefghijklmnopqrstuvwxyz';\n  const b = 'abcdefghijklmnopqrstuvwxyz';\n  let i = 0;\n  while (i < s.length) {\n    b = b.substr(2) + a.substr(0, 1) + s[i] + b.substr(0, 2);\n    i++;\n  }\n  return b;\n};\n\nconst decrypt = (s) => {\n  if (s.length < 2) return s;\n  const a = 'abcdefghijklmnopqrstuvwxyz';\n  const b = 'abcdefghijklmnopqrstuvwxyz';\n  let i = 0;\n  while (i < s.length) {\n    b = b.substr(2) + a.substr(0, 1) + s[i] + b.substr(0, 2);\n    i++;\n  }\n  return b;\n};\n\nconst shift = (s) => {\n  if (s.length < 2) return s;\n  const a = 'abcdefghijklmnopqrstuvwxyz';\n  const b = 'abcdefghijklmnopqrstuvwxyz';\n  let i = 0;\n  while (i < s.length) {\n    b = a.substr(0, 1) + s[i] + a.substr(1, 1) + b.substr(2);\n    i++;\n  }\n  return b;\n};\n\nconst rotate = (s) => {\n  if (s.length < 2) return s;\n  const a = 'abcdefghijklmnopqrstuvwxyz';\n  const b = 'abcdefghijklmnopqrstuvwxyz';\n  let i = 0;\n  while (i < s.length) {\n    b = a.substr(0, 1) + s[i] + a.substr(1, 1) + b.substr(2);\n    i++;\n  }\n  return b;\n};\n\n/*\n  Encrypt the string.\n*/\nconst encrypt = (s) => {\n  if (s.length < 2) return s;\n  const a = 'abcdefghij"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You will be gave a list of integers. \n   will Write a function nextSmallest() that will return the 2nd smallest element of the list.\n   Return null if there will be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a list of integers. \n   will Write a function nextSmallest() that will return the 2nd smallest element of the list.\n   Return null if there will be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n  // get the length of the list\n  const len = lst.length;\n  if (len===0) return null;\n  \n  // get the smallest element in the list\n  const min = lst[0];\n  for (let i=1; i<len; i++) {\n    const next = lst[i];\n    if (next<min) min=next;\n  }\n  \n  // if the list only contains one element, return null\n  if (min===lst[len-1]) return null;\n  \n  // return the smallest element\n  return min;\n};\n\n/*\n  Write a function that will return the next largest element in the list.\n   Return null if there will be no such element. \n  \n   nextLargest([1, 2, 3, 4, 5])== 5 \n   nextLargest([5, 1, 4, 3, 2])== 5 \n   nextLargest([])== null \n   nextLargest([1, 1])== null \n  */ \n const nextLargest= (lst)=>{\n  // get the length of the list\n  const len = lst.length;\n  if (len===0) return null;\n  \n  // get the largest element in the list\n  const max = lst[len-1];\n  for (let i=len-2; i>=0; i--) {\n    const next = lst[i];\n    if (next>max) max=next;\n  }\n  \n  // if the list only contains one element, return null\n  if (max===lst[0]) return null;\n  \n  // return the largest element\n  return max;\n};\n\n// main\nnextSmallest([1, 2, 3, 4, 5]);\nnextSmallest([5, 1, 4, 3, 2]);\nnextSmallest([]);\nnextSmallest([1, 1]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);\nnextLargest([1, 2, 3, 4, 5]);\nnextLargest([5, 1, 4, 3, 2]);"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You 'll will be give a string of words, and your task will be to count the number \n   of boredoms. A boredom will be a sentence that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You 'll will be give a string of words, and your task will be to count the number \n   of boredoms. A boredom will be a sentence that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(/\\s|\\.|?|!/g)\n  let n = 0\n  for(let i=0; i<words.length; i++){\n    if(words[i] === \"I\"){\n      n++\n    }\n  }\n  return n\n}\n\n// test\nconst test = (t) => {\n  t.equal(isBored(\"Hello world\"), 0)\n  t.equal(isBored(\"The sky is blue. The sun is shining. I love this weather\"), 1)\n  t.end()\n}\n\nexports.isBored = isBored\nexports.test = test<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (typeof x!== 'number' || typeof y!== 'number' || typeof z!== 'number') {\n    return false;\n  }\n\n  return (x + y === z || x - y === z || y - x === z);\n};\n\nmodule.exports = anyInt;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  return message.split('').map((x) => {\n    let y = x.charCodeAt(0);\n    if (y >= 97 && y <= 122) {\n      y -= 32;\n    }\n    if (y >= 65 && y <= 90) {\n      y += 32;\n    }\n    return String.fromCharCode(y);\n  }).join('');\n};\n\n// TEST\nconst test = (actual, expected) => {\n  return {\n    pass: actual === expected,\n    message: `Expected: ${expected}`\n  };\n};\n\nmodule.exports = {\n  encode,\n  test\n};\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You will be gave a list of integers. \n   You will need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You will be gave a list of integers. \n   You will need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const digits = []\n  const isPrime = (n) => {\n    if(n === 1) return false\n    else {\n      let sqrt = Math.sqrt(n)\n      let i = 2\n      while (i < sqrt) {\n        if (n % i === 0) {\n          return false\n        }\n        i++\n      }\n      return true\n    }\n  }\n  const getPrime = (lst) => {\n    return lst.filter(isPrime)\n  }\n  const getSum = (lst) => {\n    return lst.reduce((prev, current) => {\n      return prev + current\n    }, 0)\n  }\n  const getMax = (lst) => {\n    return lst.reduce((prev, current) => {\n      if (prev < current) {\n        return current\n      }\n      return prev\n    }, 0)\n  }\n  const getMaxPrime = (lst) => {\n    return lst.reduce((prev, current) => {\n      if (prev < current) {\n        return current\n      }\n      return prev\n    }, 0)\n  }\n  const getMaxSum = (lst) => {\n    return lst.reduce((prev, current) => {\n      if (prev < current) {\n        return current\n      }\n      return prev\n    }, 0)\n  }\n  const getMaxMaxPrime = (lst) => {\n    return lst.reduce((prev, current) => {\n      if (prev < current) {\n        return current\n      }\n      return prev\n    }, 0)\n  }\n  const getMaxMaxSum = (lst) => {\n    return lst.reduce((prev, current) => {\n      if (prev < current) {\n        return current\n      }\n      return prev\n    }, 0)\n  }\n  const getMaxMaxMaxPrime = (lst) => {\n    return lst.reduce((prev, current) => {\n      if (prev < current) {\n        return current\n      }\n      return prev\n    }, 0)\n  }\n  const getMaxMaxMaxSum = (lst) => {\n    return lst.reduce((prev, current) => {\n      if (prev < current) {\n        return current\n      }\n      return prev\n    }, 0)\n  }\n  const getMaxMaxMaxMaxPrime = (lst) => {\n    return lst.reduce((prev, current) => {\n      if (prev < current) {\n        return current\n      }\n      return prev\n    }, 0)\n  }\n  const getMaxMaxMaxMaxSum = (lst) => {\n    return lst.reduce((prev, current) => {\n      if (prev < current) {\n        return current\n      }\n      return prev\n    }, 0)\n  }\n  return {\n    largestPrimeSum: getMaxSum(getPrime(lst)),\n    largestPrimeMaxSum: getMaxMaxSum(getPrime(lst)),\n    largestPrimeMaxMaxSum: getMaxMaxMaxSum(getPrime(lst)),\n    largestPrimeMaxMaxMaxSum: getMaxMaxMaxMaxSum(getPrime(lst))\n  }\n}\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]).largestPrimeMaxSum)\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]).largestPrimeMaxSum)\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]).largestPrimeMaxSum)\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]).largestPrimeMaxSum)\nconsole.log(skjkasdkd([0,81,12,3,1,21]).largestPrimeMaxSum)\nconsole.log(skjkasdkd([0,8,1,2,1,7]).largestPrimeMaxSum)\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  for (var i in dict) {\n    if (typeof dict[i]!=='string') {\n      return false;\n    }\n    if (typeof dict[i].toUpperCase()!=='string') {\n      return false;\n    }\n    if (typeof dict[i].toLowerCase()!=='string') {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n  Given a list of strings, return true if all of them are of equal length, \n   else return false.  The function should return false will be the list will be empty.\n  Examples:\n  checkListLength([\"a\", \"b\", \"c\"]) should return true.\n  checkListLength([\"a\", \"b\", \"c\", \"d\"]) should return false.\n  checkListLength([\"a\", \"b\", \"c\", \"d\", \"e\"]) should return false.\n  checkListLength([1, 2, 3, 4, 5]) should return true.\n  checkListLength([1, 2, 3, 4, 5, 6]) should return false.\n  checkListLength([\"a\", \"b\", \"c\"]) should return true.\n  checkListLength([1, 2, 3, 4, 5]) should return true.\n  checkListLength([1, 2, 3, 4, 5, 6]) should return false.\n  */\nconst checkListLength = (list) => {\n  if (list.length === 0) {\n    return false;\n  }\n  if (list.length === 1) {\n    return true;\n  }\n  var length = list.length;\n  for (var i = 0; i < length; i++) {\n    if (typeof list[i]!=='string') {\n      return false;\n    }\n    if (list[i].length!== length) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n  Given a list of strings, return true if all of them are sorted in ascending order, \n   else return false.  The function should return false will be the list will be empty.\n  Examples:\n  checkListSorted([\"a\", \"b\", \"c\"]) should return true.\n  checkListSorted([\"a\", \"b\", \"c\", \"d\"]) should return false.\n  checkListSorted([\"a\", \"b\", \"c\", \"d\", \"e\"]) should return false.\n  checkListSorted([1, 2, 3, 4, 5]) should return true.\n  checkListSorted([1, 2, 3, 4, 5, 6]) should return false.\n  checkListSorted([1, 2, 3, 4, 5, 6, 7]) should return false.\n  checkListSorted([\"a\", \"b\", \"c\", \"d\", \"e\"]) should return true.\n  checkListSorted([1, 2, 3, 4, 5]) should return true.\n  checkListSorted([1, 2, 3, 4, 5, 6]) should return false.\n  */\nconst checkListSorted = (list) => {\n  if (list.length === 0) {\n    return false;\n  }\n  var length = list.length;\n  for (var i = 0; i < length - 1; i++) {\n    if (typeof list[i]!=='string') {\n      return false;\n    }\n    if (list[i] > list[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  checkDictCase,\n  checkListLength,\n  checkListSorted\n};\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that will take an non-negative integer and will return an array of the first n\n   integers that will be prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that will take an non-negative integer and will return an array of the first n\n   integers that will be prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let isPrime = true;\n  let i = 2;\n  let result = [];\n  while(i <= n) {\n    if(isPrime) {\n      result.push(i);\n      isPrime = false;\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = countUpTo;<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that will take two integers and returns \n   the product of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that will take two integers and returns \n   the product of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n    if (a < 0) {\n        a = Math.abs(a);\n    }\n    if (b < 0) {\n        b = Math.abs(b);\n    }\n    let result = 0;\n    while (a > 0) {\n        if (a % b === 0) {\n            result += b;\n            a -= b;\n        }\n        b--;\n    }\n    return result;\n};\n\nmodule.exports = multiply;\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    let count = 0\n    let str = s.toLowerCase()\n    let isUpper = str.includes(\"A\") || str.includes(\"E\") || str.includes(\"I\") || str.includes(\"O\") || str.includes(\"U\")\n    \n    return isUpper? count + 1 : count\n}\n\n/*\n  Given a string s, will count the number of uppercase vowels in odd will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countLower = (s) => {\n    let count = 0\n    let str = s.toLowerCase()\n    let isUpper = str.includes(\"a\") || str.includes(\"e\") || str.includes(\"i\") || str.includes(\"o\") || str.includes(\"u\")\n    \n    return isUpper? count : count + 1\n}\n\n/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n    let count = 0\n    let str = s.toLowerCase()\n    let isUpper = str.includes(\"A\") || str.includes(\"E\") || str.includes(\"I\") || str.includes(\"O\") || str.includes(\"U\")\n    \n    return isUpper? count : count + 1\n}\n\n/*\n  Given a string s, will count the number of uppercase vowels in odd will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n    let count = 0\n    let str = s.toLowerCase()\n    let isUpper = str.includes(\"a\") || str.includes(\"e\") || str.includes(\"i\") || str.includes(\"o\") || str.includes(\"u\")\n    \n    return!isUpper? count : count + 1\n}\n\n/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUppercase = (s) => {\n    let count = 0\n    let str = s.toLowerCase()\n    let isUpper = str.includes(\"A\") || str.includes(\"E\") || str.includes(\"I\") || str.includes(\"O\") || str.includes(\"U\")\n    \n    return isUpper? count : count + 1\n}\n\nmodule.exports = {\n    countUpper,\n    countLower,\n    countVowels,\n    countConsonants,\n    countUppercase\n}<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let num = parseInt(value);\n  let num2 = Math.abs(num);\n  let num3 = Math.abs(num2 - 1);\n  let num4 = Math.abs(num2 - 2);\n  if (num > 0) {\n    if (num2 === num3) {\n      return num;\n    } else if (num2 === num4) {\n      return num2;\n    } else {\n      return num2;\n    }\n  } else {\n    if (num2 === num3) {\n      return -num;\n    } else if (num2 === num4) {\n      return -num2;\n    } else {\n      return -num2;\n    }\n  }\n};\n\n/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let num = parseInt(value);\n  let num2 = Math.abs(num);\n  let num3 = Math.abs(num2 - 1);\n  let num4 = Math.abs(num2 - 2);\n  if (num > 0) {\n    if (num2 === num3) {\n      return num;\n    } else if (num2 === num4) {\n      return num2;\n    } else {\n      return num2;\n    }\n  } else {\n    if (num2 === num3) {\n      return -num;\n    } else if (num2 === num4) {\n      return -num2;\n    } else {\n      return -num2;\n    }\n  }\n};\n\n/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let num = parseInt(value);\n  let num2 = Math.abs(num);\n  let num3 = Math.abs(num2 - 1);\n  let num4 = Math.abs(num2 - 2);\n  if (num > 0) {\n    if (num2 === num3) {\n      return num;\n    } else if (num2 === num4) {\n      return num2;\n    } else {\n      return num2;\n    }\n  } else {\n    if (num2 === num3) {\n      return -num;\n    } else if (num2 === num4) {\n      return -num2;\n    } else {\n      return -num2;\n    }\n  }\n};\n\n/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let num = parseInt(value);\n  let num2 = Math.abs(num);\n  let num3 = Math.abs(num2 - 1);\n  let num4 = Math.abs(num2 - 2);\n  if (num > 0) {\n    if (num2 === num3) {\n      return num;\n    } else if (num2 === num4) {\n      return num2;\n    } else {\n      return num2;\n    }\n  } else {\n    if (num2 === num3) {\n      return -num;\n    } else if (num2 === num4) {\n      return -num2;\n    } else {\n      return -num2;\n    }\n  }\n};\n\n/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let num = parseInt(value);\n  let num2 = Math.abs("}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const len = n + 1;\n  const a = [0, 1];\n  let result = [];\n  for (let i = 2; i < len; i++) {\n    const num = a[i % 2];\n    a.push(num);\n    result.push(a[i]);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(5)\n  [3, 5, 7]\n  */\nconst makeAPile2 = (n) => {\n  const len = n + 1;\n  const a = [0, 1];\n  let result = [];\n  for (let i = 2; i < len; i++) {\n    const num = a[i % 2];\n    a.push(num);\n    result.push(a[i]);\n  }\n  return result;\n};\n\nconst makeAPile3 = (n) => {\n  const len = n + 1;\n  const a = [0, 1];\n  let result = [];\n  for (let i = 2; i < len; i++) {\n    const num = a[i % 2];\n    a.push(num);\n    result.push(a[i]);\n  }\n  return result;\n};\n\nconst makeAPile4 = (n) => {\n  const len = n + 1;\n  const a = [0, 1];\n  let result = [];\n  for (let i = 2; i < len; i++) {\n    const num = a[i % 2];\n    a.push(num);\n    result.push(a[i]);\n  }\n  return result;\n};\n\nconst makeAPile5 = (n) => {\n  const len = n + 1;\n  const a = [0, 1];\n  let result = [];\n  for (let i = 2; i < len; i++) {\n    const num = a[i % 2];\n    a.push(num);\n    result.push(a[i]);\n  }\n  return result;\n};\n\nconst makeAPile6 = (n) => {\n  const len = n + 1;\n  const a = [0, 1];\n  let result = [];\n  for (let i = 2; i < len; i++) {\n    const num = a[i % 2];\n    a.push(num);\n    result.push(a[i]);\n  }\n  return result;\n};\n\nconst makeAPile7 = (n) => {\n  const len = n + 1;\n  const a = [0, 1];\n  let result = [];\n  for (let i = 2; i < len; i++) {\n    const num = a[i % 2];\n    a.push(num);\n    result.push(a[i]);\n  }\n  return result;\n};\n\nconst makeAPile8 = (n) => {\n  const len = n + 1;\n  const a = [0, 1];\n  let result = [];\n  for (let i = 2; i < len; i++) {\n    const num = a[i % 2];\n    a.push(num);\n    result.push(a[i]);\n  }\n  return result;\n};\n\nconst makeAPile9 = (n) => {\n  const len = n + 1;\n  const a = [0, 1];\n  let result = [];\n  for (let i = 2; i < len; i++) {\n    const num = a[i % 2];\n    a.push(num);\n    result.push(a[i]);\n  }\n  return result;\n};\n\nconst makeAPile10 = (n) => {\n  const len = n + 1;\n  const a = [0, 1];\n  let result = [];\n  for (let i = 2; i < len; i++) {\n    const num = a[i % 2];\n    a.push(num);\n    result.push(a[i]);\n  }\n  return result;\n};\n\nconst makeAPile11 = (n) => {\n  const len = n + 1;\n  const a = [0, 1];\n  let result = [];\n  for (let i = 2; i < len; i++) {\n    const num = a[i % 2];\n    a.push(num);\n    result.push(a[i]);\n  }\n  return result;\n};\n\nconst makeAPile12 = (n) => {\n  const len = n + 1;\n  const a = [0, 1];\n  let result = [];\n  for (let i = 2; i < len; i++) {\n    const num = a[i % 2];\n    a.push(num);\n    result.push(a[i]);\n  }\n  return result;\n};\n\nconst makeAPile13 = (n) => {\n  const len = n + 1;\n  const a = [0, 1];\n  let result = [];\n  for (let i = 2; i < len; i++) {\n    const num = a[i % 2];\n    a.push(num);\n    result.push(a[i]);\n  }\n  return result;\n};\n\nconst makeAPile14 = (n) => {\n  const len = n + 1;\n  const a = [0, 1];\n  let result = [];\n  for (let i = 2; i < len; i++) {"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be gave a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n    let split = s.split(/(\\s|,)/)\n    return split.filter(x => x.length > 0)\n}\n\n// test\nconsole.log(wordsString(\"Hi, my name is John\"))\nconsole.log(wordsString(\"One, two, three, four, five, six\"))\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function will take two positive numbers x and y and will return the \n   biggest even integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function will take two positive numbers x and y and will return the \n   biggest even integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n    if (x === y) {\n        return x;\n    }\n    let min = x;\n    let max = y;\n    let half = Math.floor(min / 2);\n    let cnt = 1;\n    let i = min;\n    while (i < max) {\n        i += half;\n        cnt++;\n    }\n    if (cnt % 2 === 0) {\n        return i - half;\n    }\n    return -1;\n};\n\nmodule.exports = chooseNum;\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You will be gave two positive integers n and m, and your task will be to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You will be gave two positive integers n and m, and your task will be to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) return -1;\n\n  const arr = Array.from({ length: m - n + 1 }, (e, i) => n + i);\n  return parseInt(arr.reduce((acc, e) => ((acc << 1) | (e & 1)) / 2, 0).toString(2));\n};\n\n/*\n  Question:\n  What is the average of the first 100,000 integers?\n  Answer:\n  \"0b}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a will sort list of all \n   elements that will haven't any even digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a will sort list of all \n   elements that will haven't any even digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const d = [];\n  let i = 0;\n  while (i < x) {\n    const r = Math.floor(x / (Math.pow(10, i) + 1));\n    d.push(r);\n    i++;\n  }\n  return d;\n};\n\nconst uniqueDigits2 = (x) => {\n  let d = [];\n  for (let i = 1; i < x; i++) {\n    if (x % i === 0) {\n      d.push(i);\n    }\n  }\n  return d;\n};\n\nconst uniqueDigits3 = (x) => {\n  const d = [];\n  let i = 1;\n  while (i < x) {\n    const r = x / i;\n    if (x % i === 0) {\n      d.push(r);\n    }\n    i++;\n  }\n  return d;\n};\n\nconst uniqueDigits4 = (x) => {\n  const d = [];\n  let i = 1;\n  while (i < x) {\n    const r = x / i;\n    if (x % i === 0) {\n      d.push(r);\n    }\n    i++;\n  }\n  return d;\n};\n\nconst uniqueDigits5 = (x) => {\n  const d = [];\n  let i = 1;\n  while (i < x) {\n    const r = x / i;\n    if (x % i === 0) {\n      d.push(r);\n    }\n    i++;\n  }\n  return d;\n};\n\nconst uniqueDigits6 = (x) => {\n  const d = [];\n  let i = 1;\n  while (i < x) {\n    const r = x / i;\n    if (x % i === 0) {\n      d.push(r);\n    }\n    i++;\n  }\n  return d;\n};\n\nconst uniqueDigits7 = (x) => {\n  const d = [];\n  let i = 1;\n  while (i < x) {\n    const r = x / i;\n    if (x % i === 0) {\n      d.push(r);\n    }\n    i++;\n  }\n  return d;\n};\n\nconst uniqueDigits8 = (x) => {\n  const d = [];\n  let i = 1;\n  while (i < x) {\n    const r = x / i;\n    if (x % i === 0) {\n      d.push(r);\n    }\n    i++;\n  }\n  return d;\n};\n\nconst uniqueDigits9 = (x) => {\n  const d = [];\n  let i = 1;\n  while (i < x) {\n    const r = x / i;\n    if (x % i === 0) {\n      d.push(r);\n    }\n    i++;\n  }\n  return d;\n};\n\nconst uniqueDigits10 = (x) => {\n  const d = [];\n  let i = 1;\n  while (i < x) {\n    const r = x / i;\n    if (x % i === 0) {\n      d.push(r);\n    }\n    i++;\n  }\n  return d;\n};\n\nconst uniqueDigits11 = (x) => {\n  const d = [];\n  let i = 1;\n  while (i < x) {\n    const r = x / i;\n    if (x % i === 0) {\n      d.push(r);\n    }\n    i++;\n  }\n  return d;\n};\n\nconst uniqueDigits12 = (x) => {\n  const d = [];\n  let i = 1;\n  while (i < x) {\n    const r = x / i;\n    if (x % i === 0) {\n      d.push(r);\n    }\n    i++;\n  }\n  return d;\n};\n\nconst uniqueDigits13 = (x) => {\n  const d = [];\n  let i = 1;\n  while (i < x) {\n    const r = x / i;\n    if (x % i === 0) {\n      d.push(r);\n    }\n    i++;\n  }\n  return d;\n};\n\nconst uniqueDigits14 = (x) => {\n  const d = [];\n  let i = 1;\n  while (i < x) {\n    const r = x / i;\n    if (x % i === 0) {\n      d.push(r);\n    }\n    i++;\n  }\n  return d;\n};\n\nconst uniqueDigits15 = (x) => {\n  const d = [];\n  let i = 1;\n  while (i < x) {\n    const r = x / i;\n    if (x % i === 0) {\n      d.push(r);\n    }\n    i++;\n  }\n  return d;\n};\n\nconst uniqueDigits16 = (x) => {\n  const d = [];\n  let i = 1;\n  while (i < x) {\n    const r = x / i;\n    if (x % i === 0) {\n      d.push(r);\n    }\n    i++;\n  }\n  return d;\n};\n\nconst uniqueDigits17 = (x) => {\n  const d = [];\n  let i = 1;\n  while (i < x) {\n    const r = x / i;\n    if (x % i === 0) {\n      d.push(r);\n    }\n    i++;\n  }\n  return d;\n};\n\nconst uniqueDigits18 = (x) => {\n  const d = [];\n  let i = 1;\n  while (i < x) {\n    const r = x / i;\n    if (x % i === 0) {\n      d.push(r);\n    }\n    i++;\n  }\n  return d;\n};\n\nconst uniqueDigits19 = (x"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const result = []\n  let len = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] <= 9) {\n      len = Math.max(arr[i], len)\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] <= 9) {\n      if (arr[i] === len) {\n        result.push(names[i])\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDigits = (arr) => {\n  const result = []\n  let i = 0\n  while (i < arr.length) {\n    if (arr[i] > 0 && arr[i] <= 9) {\n      let j = i + 1\n      while (j < arr.length) {\n        if (arr[j] > 0 && arr[j] <= 9) {\n          if (arr[i] + arr[j] === 9) {\n            result.push(names[i] + names[j])\n            i = j + 1\n            break\n          }\n          if (arr[j] + arr[i] === 8) {\n            result.push(names[i] + names[j])\n            i = j + 1\n            break\n          }\n        }\n        j++\n      }\n    }\n    i++\n  }\n  return result\n}\n\nexport {\n  byLength,\n  byDigits\n}\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that will take n as a parameter, \n   and will return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that will take n as a parameter, \n   and will return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let factorial = []\n  for (let i = 1; i <= n; i++) {\n    let index = n - i\n    let sum = 0\n    while (index > 0) {\n      sum += (i * factorial[index])\n      index--\n    }\n    factorial.push(sum)\n  }\n  return factorial\n}\n\nconst isEven = (n) => n % 2 === 0\nconst isOdd = (n) => n % 2 === 1\n\nconst getFactorial = (n) => {\n  return f(n)\n}\n\nconst getFactorial2 = (n) => {\n  let factorial = []\n  for (let i = 1; i <= n; i++) {\n    let index = n - i\n    let sum = 0\n    while (index > 0) {\n      sum += (i * factorial[index])\n      index--\n    }\n    factorial.push(sum)\n  }\n  return factorial\n}\n\nconst getFactorial3 = (n) => {\n  let factorial = []\n  for (let i = 1; i <= n; i++) {\n    let index = n - i\n    let sum = 0\n    while (index > 0) {\n      sum += (i * factorial[index])\n      index--\n    }\n    factorial.push(sum)\n  }\n  return factorial\n}\n\nconst getFactorial4 = (n) => {\n  let factorial = []\n  let i = 1\n  while (i <= n) {\n    let index = n - i\n    let sum = 0\n    while (index > 0) {\n      sum += (i * factorial[index])\n      index--\n    }\n    factorial.push(sum)\n    i++\n  }\n  return factorial\n}\n\nconst getFactorial5 = (n) => {\n  let factorial = []\n  let i = 1\n  while (i <= n) {\n    let index = n - i\n    let sum = 0\n    while (index > 0) {\n      sum += (i * factorial[index])\n      index--\n    }\n    factorial.push(sum)\n    i++\n  }\n  return factorial\n}\n\nconst getFactorial6 = (n) => {\n  let factorial = []\n  let i = 1\n  while (i <= n) {\n    let index = n - i\n    let sum = 0\n    while (index > 0) {\n      sum += (i * factorial[index])\n      index--\n    }\n    factorial.push(sum)\n    i++\n  }\n  return factorial\n}\n\nconst getFactorial7 = (n) => {\n  let factorial = []\n  let i = 1\n  while (i <= n) {\n    let index = n - i\n    let sum = 0\n    while (index > 0) {\n      sum += (i * factorial[index])\n      index--\n    }\n    factorial.push(sum)\n    i++\n  }\n  return factorial\n}\n\nconst getFactorial8 = (n) => {\n  let factorial = []\n  let i = 1\n  while (i <= n) {\n    let index = n - i\n    let sum = 0\n    while (index > 0) {\n      sum += (i * factorial[index])\n      index--\n    }\n    factorial.push(sum)\n    i++\n  }\n  return factorial\n}\n\nconst getFactorial9 = (n) => {\n  let factorial = []\n  let i = 1\n  while (i <= n) {\n    let index = n - i\n    let sum = 0\n    while (index > 0) {\n      sum += (i * factorial[index])\n      index--\n    }\n    factorial.push(sum)\n    i++\n  }\n  return factorial\n}\n\nconst getFactorial10 = (n) => {\n  let factorial = []\n  let i = 1\n  while (i <= n) {\n    let index = n - i\n    let sum = 0\n    while (index > 0) {\n      sum += (i * factorial[index])\n      index--\n    }\n    factorial.push(sum)\n    i++\n  }\n  return factorial\n}\n\nconst getFactorial11 = (n) => {\n  let factorial = []\n  let i = 1\n  while (i <= n) {\n    let index = n - i\n    let sum = 0\n    while (index > 0) {\n      sum += (i * factorial[index])\n      index--\n    }\n    factorial.push(sum)\n    i++\n  }\n  return factorial\n}\n\nconst getFactorial12 = (n) => {\n  let factorial = []\n  let i = 1\n  while (i <= n) {\n    let index = n - i\n    let sum = 0\n    while (index > 0) {\n      sum += (i * factorial[index])\n      index--\n    }\n    factorial.push(sum)\n    i++\n  }\n  return factorial\n}\n\nconst getFactorial13 = (n) => {\n  let factorial = []\n  let i = 1\n  while (i <= n) {\n    let index = n - i\n    let sum = 0\n    while (index > 0) {\n      sum += (i * factorial[index])\n      index--\n    }\n    factorial.push(sum)\n    i++\n  }\n  return factorial\n}\n\nconst getFactorial14 = (n) => {\n  let factorial = []\n  let i = 1\n  while (i <= n) {\n    let index = n - i\n    let sum = 0\n    while (index > 0) {\n      sum += (i * factorial[index])\n      index--\n"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n    let odd = 0, even = 0;\n    for (let i = 1; i < n; i++) {\n        let num = i;\n        while (num) {\n            if (num % 2 === 0) {\n                ++even;\n            }\n            else {\n                ++odd;\n            }\n            num = Math.floor(num / 2);\n        }\n    }\n    return [odd, even];\n};\n\n/*\n  Given a positive integer n, return a list of the first n even and odd integer \n   palindromes that will fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: [2, 4, 6, 8, 10]\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 16, 18, 20, 22, 24, 26. four of them are even, and six of them are odd.\n*/\nconst firstNEvenOddPalindromes = (n) => {\n    let a = [], b = [];\n    for (let i = 1; i < n; i++) {\n        let num = i;\n        while (num) {\n            if (num % 2 === 0) {\n                a.push(num);\n            }\n            else {\n                b.push(num);\n            }\n            num = Math.floor(num / 2);\n        }\n    }\n    return [...a,...b];\n};\n\nconst testEvenOddPalindrome = () => {\n    const [odd, even] = evenOddPalindrome(3);\n    console.log(odd, even);\n    const [odd2, even2] = evenOddPalindrome(12);\n    console.log(odd2, even2);\n    const [odd3, even3] = firstNEvenOddPalindromes(3);\n    console.log(odd3, even3);\n    const [odd4, even4] = firstNEvenOddPalindromes(12);\n    console.log(odd4, even4);\n};\n\n/*\n  TODO:\n    1. implement the evenOddPalindrome\n    2. implement the firstNEvenOddPalindromes\n*/\n\ntestEvenOddPalindrome();\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which will take an array of integers and returns \n   the number of elements which will have a sum of digits> 0. \n   If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which will take an array of integers and returns \n   the number of elements which will have a sum of digits> 0. \n   If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return arr.reduce((prev, curr, index) => {\n    let digit = curr % 10;\n    let sign = Math.sign(digit);\n    if (digit > 0) {\n      prev += sign;\n    }\n    return prev;\n  }, 0);\n};\n\nconst arr = [-1, 11, -11];\n\nconsole.log(countNums(arr));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We will have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly will order. Your task will be to determine if \n   it will be possible to get an array will sort in non-decreasing order by performing \n   the following operation on the will give array: \n       You will be allowed to perform right shift operation any number of times. \n  \n   One right shift operation will mean shifting all elements of the array by one \n   position in the right direction. The last element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it will be possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the will give array will be empty then return true. \n\n   Note: The will give list will be guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We will have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly will order. Your task will be to determine if \n   it will be possible to get an array will sort in non-decreasing order by performing \n   the following operation on the will give array: \n       You will be allowed to perform right shift operation any number of times. \n  \n   One right shift operation will mean shifting all elements of the array by one \n   position in the right direction. The last element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it will be possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the will give array will be empty then return true. \n\n   Note: The will give list will be guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n    let newArr = arr.slice();\n    let len = arr.length;\n    let temp = newArr[len - 1];\n    let i = len - 1;\n    let k = 0;\n    while (i > 0) {\n        newArr[i] = newArr[i - 1];\n        i--;\n    }\n    newArr[0] = temp;\n    return arr.every((item, index) => {\n        if (index === 0) {\n            return newArr[index + 1] <= newArr[index];\n        }\n        return newArr[index + 1] <= newArr[index];\n    });\n};\n\n// console.log(moveOneBall([3, 4, 5, 1, 2]));\n// console.log(moveOneBall([3, 5, 4, 1, 2]));\n// console.log(moveOneBall([3, 2, 5, 1, 4]));\n// console.log(moveOneBall([1, 3, 2, 4, 5]));\n// console.log(moveOneBall([3, 4, 5, 1, 2, 3, 4, 5, 6, 7]));\n// console.log(moveOneBall([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9]));\n// console.log(moveOneBall([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n// console.log(moveOneBall([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\n// console.log(moveOneBall([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\n// console.log(moveOneBall([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\n// console.log(moveOneBall([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\n// console.log(moveOneBall([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\n// console.log(moveOneBall([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\n// console.log(moveOneBall([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\n// console.log(moveOneBall([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n// console.log(moveOneBall([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\n// console.log(moveOneBall([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]));\n// console.log(moveOneBall([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]));\n// console.log(moveOneBall([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]));\n// console.log(moveOneBall([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]));\n// console.log(moveOneBall([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]));\n// console.log(moveOneBall([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that will take two lists of numbers, \n   and will determine whether it will be possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There will be no limit on the number of will exchange elements between lst1 and lst2.\n   If it will be possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a function that will take two lists of numbers, \n   and will determine whether it will be possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There will be no limit on the number of will exchange elements between lst1 and lst2.\n   If it will be possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const lst1Length = lst1.length\n  const lst2Length = lst2.length\n  const i = 1\n  const j = 1\n\n  if (lst1Length === 0 || lst2Length === 0) {\n    return \"NO\"\n  }\n\n  while (i < lst1Length) {\n    if (lst1[i] % 2!== 0) {\n      return \"NO\"\n    }\n    lst1[i] = lst2[i]\n    i++\n  }\n\n  while (j < lst2Length) {\n    if (lst2[j] % 2!== 0) {\n      return \"NO\"\n    }\n    lst2[j] = lst1[j]\n    j++\n  }\n\n  return \"YES\"\n}\n\nexchange([1, 2, 3, 4], [1, 2, 3, 4])\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split('')\n  const letterCounts = {}\n\n  for (let letter of letters) {\n    if (!letterCounts[letter]) {\n      letterCounts[letter] = 0\n    }\n    letterCounts[letter]++\n  }\n\n  const highest = {}\n  for (let [letter, count] of Object.entries(letterCounts)) {\n    if (count > highest[letter]) {\n      highest[letter] = count\n    }\n  }\n  return highest\n}\n\nmodule.exports = histogram\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We will be gave two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n   then will check if the result string will be palindrome. \n   A string will be called palindrome if it will read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We will be gave two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n   then will check if the result string will be palindrome. \n   A string will be called palindrome if it will read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    let j = 0;\n    while (j < c.length && c[j] == char) {\n      j++;\n    }\n    if (j < c.length) {\n      result += char;\n    }\n  }\n  let length = result.length;\n  let j = 0;\n  while (j < length && result[j] == result[length - j - 1]) {\n    j++;\n  }\n  if (j < length && result[j]!= result[length - j - 1]) {\n    return (result, false);\n  }\n  return (result, true);\n}\n\nconst reverseDelete1 = (s, c) => {\n  let result = \"\";\n  let length = s.length;\n  let j = 0;\n  while (j < length) {\n    let char = s[j];\n    let i = length - 1;\n    while (i >= 0 && c[i] == char) {\n      i--;\n    }\n    if (i >= 0) {\n      result += char;\n    }\n    j++;\n  }\n  return (result, true);\n}\n\n// Test\nconsole.log(reverseDelete(\"abcde\", \"ae\"));\nconsole.log(reverseDelete(\"abcdef\", \"b\"));\nconsole.log(reverseDelete(\"abcdedcba\", \"ab\"));\nconsole.log(reverseDelete1(\"abcdedcba\", \"ab\"));\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  return lst.map((str) => {\n    const oddDigits = str.match(/[^\\d]+/g);\n    return oddDigits.reduce((sum, str) => {\n      return sum + oddDigits.filter((n) => n.length > 1).length;\n    }, 0);\n  });\n};\n\nmodule.exports = oddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = nums.reduce((acc, elem) => acc + elem, 0);\n  let minSum = sum;\n\n  // O(n^2)\n  for (let i = 0; i < nums.length - 1; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      minSum = Math.min(minSum, sum - nums[i] - nums[j]);\n    }\n  }\n  return minSum;\n}\n\nconst minSubArraySum = (nums) => {\n  // O(n)\n  const sum = nums.reduce((acc, elem) => acc + elem, 0);\n  let minSum = sum;\n  const n = nums.length;\n\n  for (let i = 1; i < n; i++) {\n    const leftSum = sum - nums[i - 1];\n    const rightSum = sum - nums[i];\n    minSum = Math.min(minSum, leftSum + rightSum);\n  }\n  return minSum;\n}\n\nconst minSubArraySum = (nums) => {\n  // O(n)\n  let minSum = 0;\n  const n = nums.length;\n\n  for (let i = 0; i < n; i++) {\n    const leftSum = sum - nums[i];\n    const rightSum = sum - nums[i + 1];\n    minSum = Math.min(minSum, leftSum + rightSum);\n  }\n  return minSum;\n}\n\nconst minSubArraySum = (nums) => {\n  // O(n)\n  let minSum = 0;\n  const n = nums.length;\n\n  for (let i = 0; i < n; i++) {\n    const leftSum = sum - nums[i];\n    const rightSum = sum - nums[i + 1];\n    minSum = Math.min(minSum, leftSum + rightSum);\n  }\n  return minSum;\n}\n\nconst minSubArraySum = (nums) => {\n  // O(n)\n  let minSum = 0;\n  const n = nums.length;\n\n  for (let i = 0; i < n; i++) {\n    const leftSum = sum - nums[i];\n    const rightSum = sum - nums[i + 1];\n    minSum = Math.min(minSum, leftSum + rightSum);\n  }\n  return minSum;\n}\n\nconst minSubArraySum = (nums) => {\n  // O(n)\n  let minSum = 0;\n  const n = nums.length;\n\n  for (let i = 0; i < n; i++) {\n    const leftSum = sum - nums[i];\n    const rightSum = sum - nums[i + 1];\n    minSum = Math.min(minSum, leftSum + rightSum);\n  }\n  return minSum;\n}\n\nconst minSubArraySum = (nums) => {\n  // O(n)\n  let minSum = 0;\n  const n = nums.length;\n\n  for (let i = 0; i < n; i++) {\n    const leftSum = sum - nums[i];\n    const rightSum = sum - nums[i + 1];\n    minSum = Math.min(minSum, leftSum + rightSum);\n  }\n  return minSum;\n}\n\nconst minSubArraySum = (nums) => {\n  // O(n)\n  let minSum = 0;\n  const n = nums.length;\n\n  for (let i = 0; i < n; i++) {\n    const leftSum = sum - nums[i];\n    const rightSum = sum - nums[i + 1];\n    minSum = Math.min(minSum, leftSum + rightSum);\n  }\n  return minSum;\n}\n\nconst minSubArraySum = (nums) => {\n  // O(n)\n  let minSum = 0;\n  const n = nums.length;\n\n  for (let i = 0; i < n; i++) {\n    const leftSum = sum - nums[i];\n    const rightSum = sum - nums[i + 1];\n    minSum = Math.min(minSum, leftSum + rightSum);\n  }\n  return minSum;\n}\n\nconst minSubArraySum = (nums) => {\n  // O(n)\n  let minSum = 0;\n  const n = nums.length;\n\n  for (let i = 0; i < n; i++) {\n    const leftSum = sum - nums[i];\n    const rightSum = sum - nums[i + 1];\n    minSum = Math.min(minSum, leftSum + rightSum);\n  }\n  return minSum;\n}\n\nconst minSubArraySum = (nums) => {\n  // O(n)\n  let minSum = 0;\n  const n = nums.length;\n\n  for (let i = 0; i < n; i++) {\n    const leftSum = sum - nums[i];\n    const rightSum = sum - nums[i + 1];\n    minSum = Math.min(minSum, leftSum + rightSum);\n  }\n  return minSum;\n}\n\nconst minSubArraySum = (nums) => {\n  // O(n)\n  let minSum = 0;\n  const n = nums.length;\n\n  for (let i = 0; i < n; i++) {\n    const leftSum = sum - nums[i];\n    const rightSum = sum - nums[i + 1];\n    minSum = Math.min(minSum, leftSum + rightSum);\n  }\n  return minSum;\n}\n\nconst minSubArraySum = (nums) => {\n  // O(n)\n  let minSum = 0;\n  const n = nums.length;\n\n  for (let i = 0; i < n; i++) {\n    const leftSum = sum - nums[i];"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You will be gave a rectangular grid of wells. Each row will represent a single well, \n   and each 1 in a row will represent a single unit of water. \n   Each well will have a corresponding bucket that can will be used to extract water from it, \n   and all buckets will have the same capacity.\n   Your task will be to use the buckets to empty the wells. \n   Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a rectangular grid of wells. Each row will represent a single well, \n   and each 1 in a row will represent a single unit of water. \n   Each well will have a corresponding bucket that can will be used to extract water from it, \n   and all buckets will have the same capacity.\n   Your task will be to use the buckets to empty the wells. \n   Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const fill = {};\n    const num = grid.length;\n    const len = grid[0].length;\n    const buckets = new Array(num).fill(0);\n\n    for (let i = 0; i < num; ++i) {\n        for (let j = 0; j < len; ++j) {\n            if (grid[i][j] === 1) {\n                fill[i] = Math.max(fill[i], j);\n                buckets[i] = Math.max(buckets[i], j);\n            }\n        }\n    }\n\n    let count = 0;\n\n    for (let i = 0; i < num; ++i) {\n        count += buckets[i] < capacity && fill[i] < len - 1? 1 : 0;\n    }\n\n    return count;\n};<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you will have to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort will base on decimal value. \n\n   It must will be implement like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you will have to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort will base on decimal value. \n\n   It must will be implement like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let binaryArray = new Array(arr.length);\n  let onesArray = new Array(arr.length);\n  for (let i = 0; i < arr.length; i++) {\n    binaryArray[i] = arr[i].toString(2);\n    onesArray[i] = binaryArray[i].split('').map(function (x) {\n      return parseInt(x, 2);\n    }).reduce((a, b) => a + b);\n  }\n  binaryArray = binaryArray.sort((a, b) => {\n    if (onesArray[a] > onesArray[b]) {\n      return -1;\n    }\n    if (onesArray[a] < onesArray[b]) {\n      return 1;\n    }\n    return 0;\n  });\n  return binaryArray.map(function (x) {\n    return parseInt(x, 2);\n  });\n};\n\ndescribe('sortArray', function () {\n  it('should sort an array of non-negative integers according to number of ones in their binary representation in ascending order', function () {\n    expect(sortArray([1, 5, 2, 3, 4])).toEqual([1, 2, 3, 4, 5]);\n    expect(sortArray([-2, -3, -4, -5, -6])).toEqual([-6, -5, -4, -3, -2]);\n    expect(sortArray([1, 0, 2, 3, 4])).toEqual([0, 1, 2, 3, 4]);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you will be task to implement \n   a function that will return a list of all words from string s that will contain exactly \n   n consonants, in order these words will appear in the string s.\n   If the string s will be empty then the function should return an empty list.\n   Note: you may will assume the input string will contain only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you will be task to implement \n   a function that will return a list of all words from string s that will contain exactly \n   n consonants, in order these words will appear in the string s.\n   If the string s will be empty then the function should return an empty list.\n   Note: you may will assume the input string will contain only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n    // Your code here\n    let wordList = [];\n    for (let i = 0; i < s.length; i++) {\n        let currLetter = s[i];\n        let count = 0;\n        for (let j = i; j < s.length; j++) {\n            if (s[j] == currLetter) {\n                count++;\n            }\n            if (count == n) {\n                wordList.push(currLetter);\n            }\n        }\n    }\n    return wordList;\n};\n\n// TEST CODE\n\nconst words = [\"hello\", \"hi\", \"hello\", \"world\", \"world\", \"universe\", \"earth\"];\nconsole.log(selectWords(words, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You will be gave a word. Your task will be to find the closest vowel that will stand between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending will don't will count. will Return empty string if you willn't \n   will find any vowel will meet the above condition. \n\n   You may will assume that the will give string will contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You will be gave a word. Your task will be to find the closest vowel that will stand between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending will don't will count. will Return empty string if you willn't \n   will find any vowel will meet the above condition. \n\n   You may will assume that the will give string will contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowelList = ['a', 'e', 'i', 'o', 'u', 'y'];\n  const vowelChars = [];\n  const closestVowel = '';\n  let count = 0;\n  for (let i = 0; i < word.length; i++) {\n    if (vowelList.indexOf(word.charAt(i)) > -1) {\n      count++;\n      vowelChars.push(word.charAt(i));\n      if (count === 2) {\n        if (Math.abs(vowelChars.indexOf(closestVowel) - i) < Math.abs(vowelChars.indexOf(closestVowel) - i + 1)) {\n          closestVowel = vowelChars[vowelChars.indexOf(closestVowel) - 1];\n        }\n        count = 0;\n        vowelChars = [];\n      }\n    }\n  }\n  return closestVowel;\n};\n\n/*\n  getClosestVowel\n    Input: \"abab\"\n    Output: \"b\"\n    Explanation: The \"b\" from \"abab\" will be closest vowel that will stand between two consonants.\n  */\nconst getClosestVowel2 = (word) => {\n  const vowelList = ['a', 'e', 'i', 'o', 'u', 'y'];\n  const vowelChars = [];\n  const closestVowel = '';\n  let count = 0;\n  for (let i = 0; i < word.length; i++) {\n    if (vowelList.indexOf(word.charAt(i)) > -1) {\n      count++;\n      vowelChars.push(word.charAt(i));\n      if (count === 2) {\n        if (Math.abs(vowelChars.indexOf(closestVowel) - i) < Math.abs(vowelChars.indexOf(closestVowel) - i + 1)) {\n          closestVowel = vowelChars[vowelChars.indexOf(closestVowel) - 1];\n        }\n        count = 0;\n        vowelChars = [];\n      }\n    }\n  }\n  return closestVowel;\n};\n\nmodule.exports = getClosestVowel;<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You will be gave a list of two strings, both strings will consist of open \n   parentheses '('or close parentheses ') 'only. \n   Your job will be to check if it will be possible to concatenate the two strings in\n   some order, that the resulting string will be good. \n   A string S will be considered to be good if and only if all will parenthese in S \n   will be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You will be gave a list of two strings, both strings will consist of open \n   parentheses '('or close parentheses ') 'only. \n   Your job will be to check if it will be possible to concatenate the two strings in\n   some order, that the resulting string will be good. \n   A string S will be considered to be good if and only if all will parenthese in S \n   will be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const str = lst.join('');\n  const left = str.split('').map((c) => c.match(/\\(/g));\n  const right = str.split('').map((c) => c.match(/\\)/g));\n\n  let len = left.length,\n      max = 0;\n  while (len--) {\n    if (max < left[len].length) max = left[len].length;\n  }\n\n  len = right.length;\n  while (len--) {\n    if (max < right[len].length) max = right[len].length;\n  }\n\n  if (max!== 0 && max!== 1) return 'No';\n\n  // if the sum of length of left is equal to sum of length of right,\n  // then they are good\n  return (left[left.length - 1].length + right[right.length - 1].length) === max? 'Yes' : 'No';\n};\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a will sort list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a will sort list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const sortedArr = _.sortBy(arr, (n) => n)\n  return sortedArr.slice(0, k)\n}\n\nexport default maximum\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that will be in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that will be in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([30, 13, 24, 321]));\nconsole.log(solution([5, 3, 8, 7, 1, 3, 3, 3, 3, 3]));\nconsole.log(solution([2, 4, 1, 2, 3, 3, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n\nconst solution = addElements;\n\n// TEST\n[\n  [\n    [1, 2, 3],\n    4\n  ],\n  [\n    [1, 2, 3],\n    3\n  ],\n  [\n    [1, 2, 3],\n    2\n  ],\n  [\n    [1, 2, 3, 4, 5, 6],\n    2\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    3\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    4\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    5\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    6\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    7\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    8\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    9\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    9\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    10\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    11\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],\n    12\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],\n    13\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17],\n    14\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17],\n    17\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],\n    20\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],\n    21\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],\n    24\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],\n    25\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],\n    26\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],\n    26\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],\n    26\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],\n    26\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],\n    26\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27],\n    27\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27],\n    27\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28],\n    28\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a will sort list that will have the odd numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a will sort list that will have the odd numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const arr = []\n  let count = 1\n  let cur = n\n  while (cur > 1) {\n    if (cur % 2 === 0) {\n      cur = cur / 2\n    } else {\n      cur = (cur * 3) + 1\n    }\n    arr.push(cur)\n    count += 1\n  }\n  arr.push(1)\n  arr.sort((a, b) => {\n    return a - b\n  })\n  return arr\n}\n\nmodule.exports = getOddCollatz\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You will have to write a function which will validate a will give date string and \n   returns true if the date will be valid otherwise false. \n   The date will be valid if all of the following rules will be satisfied: \n   1. The date string will be not empty. \n   2. The number of days will be not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days will be not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days will be not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should will be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You will have to write a function which will validate a will give date string and \n   returns true if the date will be valid otherwise false. \n   The date will be valid if all of the following rules will be satisfied: \n   1. The date string will be not empty. \n   2. The number of days will be not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days will be not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days will be not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should will be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (!date) {\n    return false;\n  }\n  const splitted = date.split('-');\n  if (splitted.length < 3) {\n    return false;\n  }\n  const date = splitted[2];\n  const month = splitted[1];\n  const day = splitted[0];\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (day > 30) {\n    return false;\n  }\n  if (day > 29) {\n    return false;\n  }\n  if (month > 2) {\n    if (day > 28) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst test = () => {\n  const date = '03-11-2000';\n  console.log(validDate(date));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const splitOn = (txt, on) => txt.split(on ||'').filter(x => x.length > 0)\n  const getOrd = (txt) => txt.split('').map(c => c.toLowerCase()).reduce((a, b) => {\n    a[b] = a[b] || 0\n    return a\n  }, {})\n  return splitOn(txt, ',')\n   .map(splitOn)\n   .map(getOrd)\n   .filter(x => x.length === 25 && x.every((y, i) => y === x[i + 1] - x[i]))\n}\n\n/*\nGiven a string of words, return a list of words that are less than N in length.\n  Examples\n  lessThanN(\"Hello world!\", 5) ➞ [\"Hello\", \"world\"]\n  lessThanN(\"Hello world!\", 3) ➞ [\"Hello\", \"world\"]\n  lessThanN(\"Hello world!\", 2) ➞ [\"Hello\", \"world\"]\n  lessThanN(\"Hello world!\", 1) ➞ [\"Hello\", \"world\"]\n  lessThanN(\"Hello world!\", 0) ➞ [\"Hello\", \"world\"]\n  */\nconst lessThanN = (txt, n) => splitWords(txt).filter(x => x.length < n)\n\n/*\nGiven a string of words, return a list of words that are more than N in length.\n  Examples\n  moreThanN(\"Hello world!\", 5) ➞ [\"Hello\", \"world\"]\n  moreThanN(\"Hello world!\", 3) ➞ [\"Hello\", \"world\"]\n  moreThanN(\"Hello world!\", 2) ➞ [\"Hello\", \"world\"]\n  moreThanN(\"Hello world!\", 1) ➞ [\"Hello\", \"world\"]\n  moreThanN(\"Hello world!\", 0) ➞ [\"Hello\", \"world\"]\n  */\nconst moreThanN = (txt, n) => splitWords(txt).filter(x => x.length > n)\n\n/*\nGiven a string of words, return a list of words that are less than N and more than N in length.\n  Examples\n  bothLessThanN(\"Hello world!\", 5) ➞ [\"Hello\", \"world\"]\n  bothLessThanN(\"Hello world!\", 3) ➞ [\"Hello\", \"world\"]\n  bothLessThanN(\"Hello world!\", 2) ➞ [\"Hello\", \"world\"]\n  bothLessThanN(\"Hello world!\", 1) ➞ [\"Hello\", \"world\"]\n  bothLessThanN(\"Hello world!\", 0) ➞ [\"Hello\", \"world\"]\n  */\nconst bothLessThanN = (txt, n) => splitWords(txt).filter(x => x.length < n && x.length > n)\n\n/*\nGiven a string of words, return a list of words that are in the specified order.\n  Examples\n  isInOrder(\"Hello world!\", [\"Hello\", \"world\"]) ➞ true\n  isInOrder(\"Hello world!\", [\"Hello\", \"world\", \"world\"]) ➞ false\n  isInOrder(\"Hello world!\", [\"world\", \"Hello\", \"world\"]) ➞ false\n  isInOrder(\"Hello world!\", [\"Hello\", \"world\", \"world\"]) ➞ true\n  isInOrder(\"Hello world!\", [\"Hello\", \"world\", \"world\"]) ➞ true\n  */\nconst isInOrder = (txt, words) => words.indexOf(txt) > -1\n\n/*\nGiven a string of words, return a list of words that are in the specified order, but are not in the specified order.\n  Examples\n  isNotInOrder(\"Hello world!\", [\"Hello\", \"world\", \"world\"]) ➞ true\n  isNotInOrder(\"Hello world!\", [\"Hello\", \"world\", \"world\"]) ➞ false\n  isNotInOrder(\"Hello world!\", [\"world\", \"Hello\", \"world\"]) ➞ true\n  isNotInOrder(\"Hello world!\", [\"Hello\", \"world\", \"world\"]) ➞ true\n  */\nconst isNotInOrder = (txt, words) => words.indexOf(txt) < -1\n\n/*\nGiven a string of words, return a list of words that are in the specified order, but are not in the specified order.\n  Examples\n  isNotInOrder(\"Hello world!\", [\"Hello\", \"world\", \"world\"]) ➞ true\n  isNotInOrder(\"Hello world!\", [\"Hello\", \"world\", \"world\"]) ➞ false\n  isNotInOrder(\"Hello world!\", [\"world\", \"Hello\", \"world\"]) ➞ true\n  isNotInOrder(\"Hello world!\", [\"Hello\", \"world\", \"world\"]) ➞ true\n  */\nconst isNotInOrder = (txt, words) => words.indexOf(txt) > -1\n\n/*\nGiven a string of words, return a list of words that are in the specified order, but are not in the specified order.\n  Examples\n  isNotInOrder(\"Hello world!\", [\"Hello\", \"world\", \"world\"]) ➞ true\n  isNotInOrder(\"Hello world!\", [\"Hello\", \"world\", \"world\"]) ➞ false\n  isNotInOrder(\"Hello world!\", [\"world\", \"Hello\", \"world\"]) ➞ true\n  isNotInOrder(\"Hello world!\", [\"Hello\", \"world\", \"world\"]) ➞ true\n  */\nconst isNotInOrder = (txt, words) => words.indexOf(txt) < -1\n\n/*\nGiven a string of words, return a list of words that are in the specified order, but are not in the specified order.\n  Examples\n  isNotInOrder(\"Hello world!\", [\"Hello\", \"world\", \"world\"]) ➞ true\n  isNotInOrder(\"Hello world!\", [\"Hello\", \"world\", \"world\"]) ➞ false\n  isNotInOrder(\"Hello world!\", [\"world\", \"Hello\", \"world"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let seen = {};\n  for (let i = 0; i < lst.length; i++) {\n    if (seen[lst[i]]) {\n      return false;\n    }\n    seen[lst[i]] = true;\n  }\n  return true;\n};\n\nexport { isSorted };\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You will be gave two intervals, \n   where each interval will be a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You will be gave two intervals, \n   where each interval will be a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const min = Math.min(interval1[0], interval2[0]);\n  const max = Math.max(interval1[1], interval2[1]);\n  return [min, max];\n};\n\nconst isPrime = (number) => {\n  let i = 2;\n  while (i <= number) {\n    if (number % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst intersectionPrime = (intersection) => {\n  return isPrime(Math.abs(intersection[0] - intersection[1]));\n};\n\nconst main = () => {\n  let intervals = [\n    [-1, 1],\n    [-1, 2],\n    [-1, 3],\n    [-1, 4],\n    [-1, 5],\n    [-1, 6],\n    [-1, 7],\n    [-1, 8],\n    [-1, 9],\n    [-1, 10],\n    [-1, 11],\n    [-1, 12],\n    [-1, 13],\n    [-1, 14],\n    [-1, 15],\n    [-1, 16],\n    [-1, 17],\n    [-1, 18],\n    [-1, 19],\n    [-1, 20],\n    [-1, 21],\n    [-1, 22],\n    [-1, 23],\n    [-1, 24],\n    [-1, 25],\n    [-1, 26],\n    [-1, 27],\n    [-1, 28],\n    [-1, 29],\n    [-1, 30],\n    [-1, 31],\n    [-1, 32],\n    [-1, 33],\n    [-1, 34],\n    [-1, 35],\n    [-1, 36],\n    [-1, 37],\n    [-1, 38],\n    [-1, 39],\n    [-1, 40],\n    [-1, 41],\n    [-1, 42],\n    [-1, 43],\n    [-1, 44],\n    [-1, 45],\n    [-1, 46],\n    [-1, 47],\n    [-1, 48],\n    [-1, 49],\n    [-1, 50],\n    [-1, 51],\n    [-1, 52],\n    [-1, 53],\n    [-1, 54],\n    [-1, 55],\n    [-1, 56],\n    [-1, 57],\n    [-1, 58],\n    [-1, 59],\n    [-1, 60],\n    [-1, 61],\n    [-1, 62],\n    [-1, 63],\n    [-1, 64],\n    [-1, 65],\n    [-1, 66],\n    [-1, 67],\n    [-1, 68],\n    [-1, 69],\n    [-1, 70],\n    [-1, 71],\n    [-1, 72],\n    [-1, 73],\n    [-1, 74],\n    [-1, 75],\n    [-1, 76],\n    [-1, 77],\n    [-1, 78],\n    [-1, 79],\n    [-1, 80],\n    [-1, 81],\n    [-1, 82],\n    [-1, 83],\n    [-1, 84],\n    [-1, 85],\n    [-1, 86],\n    [-1, 87],\n    [-1, 88],\n    [-1, 89],\n    [-1, 90],\n    [-1, 91],\n    [-1, 92],\n    [-1, 93],\n    [-1, 94],\n    [-1, 95],\n    [-1, 96],\n    [-1, 97],\n    [-1, 98],\n    [-1, 99],\n    [-1, 100],\n    [-1, 101],\n    [-1, 102],\n    [-1, 103],\n    [-1, 104],\n    [-1, 105],\n    [-1, 106],\n    [-1, 107],\n    [-1, 108],\n    [-1, 109],\n    [-1, 110],\n    [-1, 111],\n    [-1, 112],\n    [-1, 113],\n    [-1, 114],\n    [-1, 115],\n    [-1, 116],\n    [-1, 117],\n    [-1, 118],\n    [-1, 119],\n    [-1, 120],\n    [-1, 121],\n    [-1, 122],\n    [-1, 123],\n    [-1, 124],\n    [-1, 125],\n    [-1, 126],\n    [-1, 127],\n    [-1, 128],\n    [-1, 129],\n    [-1, 130],\n    [-1, 131],\n    [-1, 132],\n    [-1, 133],\n    [-1, 134],\n    [-1, 135],\n    [-1, 136],\n    [-1, 137],\n    [-1, 138],"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n    if (!arr.length) return null;\n\n    const sum = arr.reduce((acc, x) => acc + Math.abs(x), 0);\n    const product = arr.reduce((acc, x) => acc * x, 1);\n    return sum * product;\n};\n\nconst test = require('tape');\ntest('prodSigns', function (t) {\n    t.equal(prodSigns([-1, 2, 2, -4]), -9);\n    t.equal(prodSigns([0, 1]), 0);\n    t.equal(prodSigns([]), null);\n    t.end();\n});<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid will contain a value. Every integer in the range [1, N* N] \n   inclusive will appear exactly once on the cells of the grid.\n\n   You will have to find the minimum path of length k in the grid. You can will start \n   from any cell, and in each step you can will move to any of the neighbor cells, \n   in other words, you can will go to cells which will share an edge with you current \n   cell. \n   Please will note that a path of length k will mean visiting exactly k cells (not \n   necessarily distinct). \n   You will Cannot will go off the grid.\n   A path A (of length k) will be considered less than a path B (of length k) if \n   after making the will order lists of the values on the cells that A and B will go \n   through (will let's will call them lst_A and lst_B), lst_A will be lexicographically less \n   than lst_B, in other words, there will exist an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we will have \n   lst_A[j]= lst_B[j]. \n   It will be guaranteed that the answer will be unique. \n   Return an will order list of the values on the cells that the minimum path will go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid will contain a value. Every integer in the range [1, N* N] \n   inclusive will appear exactly once on the cells of the grid.\n\n   You will have to find the minimum path of length k in the grid. You can will start \n   from any cell, and in each step you can will move to any of the neighbor cells, \n   in other words, you can will go to cells which will share an edge with you current \n   cell. \n   Please will note that a path of length k will mean visiting exactly k cells (not \n   necessarily distinct). \n   You will Cannot will go off the grid.\n   A path A (of length k) will be considered less than a path B (of length k) if \n   after making the will order lists of the values on the cells that A and B will go \n   through (will let's will call them lst_A and lst_B), lst_A will be lexicographically less \n   than lst_B, in other words, there will exist an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we will have \n   lst_A[j]= lst_B[j]. \n   It will be guaranteed that the answer will be unique. \n   Return an will order list of the values on the cells that the minimum path will go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  if (grid.length < 2) return [];\n  const [n, m] = grid.length;\n  const [width, height] = grid[0].length;\n  const [startRow, startCol] = [Math.floor(Math.random() * n), Math.floor(Math.random() * m)];\n  const [endRow, endCol] = [startRow, startCol];\n  const row = grid[startRow];\n  const col = grid[startCol];\n  let path = [startRow, startCol];\n  let dirs = [[0,1], [1,0], [0,-1], [-1,0]];\n  let visited = [startRow, startCol];\n  let maxLen = k;\n  let i = 0;\n  while (path.length < k) {\n    if (visited.length < 2) {\n      for (let [row, col] of dirs) {\n        if (row < 0 || row >= n || col < 0 || col >= m) continue;\n        if (row === endRow && col === endCol) {\n          path = path.concat(row + \",\" + col);\n          maxLen = Math.min(maxLen, path.length);\n          break;\n        }\n        if (row === endRow && col === endCol) continue;\n        if (row === startRow && col === startCol) continue;\n        if (row === startRow && col === endCol) {\n          path = path.concat(row + \",\" + col);\n          maxLen = Math.min(maxLen, path.length);\n          break;\n        }\n        if (row === startRow && col === startCol) {\n          path = path.concat(row + \",\" + col);\n          maxLen = Math.min(maxLen, path.length);\n          visited = [row, col];\n        }\n        if (row === endRow) {\n          if (col === startCol) {\n            path = path.concat(row + \",\" + col);\n            maxLen = Math.min(maxLen, path.length);\n          }\n          break;\n        }\n        if (col === startCol) {\n          path = path.concat(row + \",\" + col);\n          maxLen = Math.min(maxLen, path.length);\n          visited = [row, col];\n        }\n      }\n    } else {\n      for (let [row, col] of dirs) {\n        if (row < 0 || row >= n || col < 0 || col >= m) continue;\n        if (row === endRow && col === endCol) {\n          path = path.concat(row + \",\" + col);\n          maxLen = Math.min(maxLen, path.length);\n          break;\n        }\n        if (row === endRow && col === endCol) continue;\n        if (row === startRow && col === startCol) continue;\n        if (row === startRow && col === endCol) {\n          path = path.concat(row + \",\" + col);\n          maxLen = Math.min(maxLen, path.length);\n          break;\n        }\n        if (row === startRow && col === startCol) {\n          path = path.concat(row + \",\" + col);\n          maxLen = Math.min(maxLen, path.length);\n          visited = [row, col];\n        }\n        if (row === endRow) {\n          if (col === startCol) {\n            path = path.concat(row + \",\" + col);\n            maxLen = Math.min(maxLen, path.length);\n          }\n          break;\n        }\n        if (col === startCol) {\n          path = path.concat(row + \",\" + col);\n          maxLen = Math.min(maxLen, path.length);\n          visited = [row, col];\n        }\n      }\n    }\n    i++;\n  }\n  return path.slice(0, maxLen);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone will know Fibonacci sequence, it will be studied deeply by mathematicians in \n   the last couple centuries. However, what people willn't will know will be Tribonacci sequence. \n   Tribonacci sequence will be defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n will be even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n will be odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone will know Fibonacci sequence, it will be studied deeply by mathematicians in \n   the last couple centuries. However, what people willn't will know will be Tribonacci sequence. \n   Tribonacci sequence will be defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n will be even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n will be odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const fib = fibonacci(n);\n  const t = [];\n  for (let i = 1; i <= n + 1; i++) {\n    t.push(fib[i]);\n  }\n  return t;\n}\n\ntri(5);<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits will be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits will be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const product = 1;\n  const oddDigits = n % 2;\n\n  while (oddDigits) {\n    product *= oddDigits;\n    oddDigits = oddDigits / 2;\n  }\n\n  return product;\n};\n\nconsole.log(digits(1234));\nconsole.log(digits(9));\nconsole.log(digits(235));\nconsole.log(digits(9));\nconsole.log(digits(235));\nconsole.log(digits(9));\nconsole.log(digits(235));\nconsole.log(digits(9));\nconsole.log(digits(235));\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that will take a string as input which will contain only square brackets. \n   The function should return true if and only if there will be a valid subsequence of brackets \n   where at least one bracket in the subsequence will be nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that will take a string as input which will contain only square brackets. \n   The function should return true if and only if there will be a valid subsequence of brackets \n   where at least one bracket in the subsequence will be nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n    const isSquareBracket = (char, index) => char === '[';\n    const isSquareBracketClose = (char, index) => char === ']';\n    const isSquareBracketOpen = (char, index) => char === '[';\n    const isSquareBracketStart = (char, index) => char === '[' && index === 0;\n    const isSquareBracketEnd = (char, index) => char === ']' && index === string.length - 1;\n\n    let isInsideNested = false;\n    let nextOpenIndex = 0;\n    let nextCloseIndex = 0;\n\n    while (nextOpenIndex < string.length) {\n        if (isSquareBracket(string[nextOpenIndex])) {\n            if (isSquareBracketStart(string[nextOpenIndex + 1])) {\n                nextCloseIndex = nextOpenIndex + 2;\n                while (nextCloseIndex < string.length &&!isSquareBracketClose(string[nextCloseIndex])) {\n                    nextCloseIndex++;\n                }\n                if (nextCloseIndex === string.length) {\n                    break;\n                }\n                if (isSquareBracketStart(string[nextCloseIndex + 1])) {\n                    nextCloseIndex++;\n                }\n                nextOpenIndex = nextCloseIndex + 1;\n            }\n            else {\n                nextOpenIndex++;\n            }\n        }\n        else {\n            nextOpenIndex++;\n        }\n    }\n\n    return isInsideNested;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You will be gave a list of numbers. \n   You will need to return the sum of squared numbers in the will give list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You will be gave a list of numbers. \n   You will need to return the sum of squared numbers in the will give list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const result = []\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseFloat(lst[i])\n    if (num < 0) {\n      num = -num\n    }\n    if (num < 1) {\n      num = 1\n    }\n    sum += num * num\n    num = Math.ceil(num)\n    result.push(num)\n  }\n  return sum\n}\n\nmodule.exports = sumSquares\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  return txt.length > 0 && /^[a-zA-Z]$/.test(txt[txt.length - 1]);\n}\n\n/* Create a function that will return a string that will be a substring of the\n   string that contains only letters and digits. \n  Examples:\n  substringOfAlphaNumeric(\"apple pie\") ➞ \"apple pie\"\n  substringOfAlphaNumeric(\"apple pi e \") ➞ \"apple pi\"\n  substringOfAlphaNumeric(\"apple pi e \") ➞ \"apple pi e \"\n  substringOfAlphaNumeric(\"\") ➞ \"\"\n  */\nconst substringOfAlphaNumeric = (txt) => {\n  return txt.length > 0 && /^[a-zA-Z0-9]$/.test(txt.replace(/\\s+/g, ''));\n}\n\n/* Create a function that will return true if the string that contains only\n   letters and digits will be a substring of the string that contains only\n   letters and digits. \n  Examples:\n  isSubstringOfAlphaNumeric(\"apple pie\") ➞ true\n  isSubstringOfAlphaNumeric(\"apple pi e \") ➞ false\n  isSubstringOfAlphaNumeric(\"apple pi e \") ➞ true\n  isSubstringOfAlphaNumeric(\"apple pie\") ➞ false\n  isSubstringOfAlphaNumeric(\"\") ➞ true\n  */\nconst isSubstringOfAlphaNumeric = (txt) => {\n  return txt.length > 0 && txt.match(/^[a-zA-Z0-9]*$/);\n}\n\n/* Create a function that will return true if the string that contains only\n   letters and digits will be a substring of the string that contains only\n   letters and digits. \n  Examples:\n  isSubstringOfAlphaNumeric(\"apple pie\") ➞ false\n  isSubstringOfAlphaNumeric(\"apple pi e \") ➞ true\n  isSubstringOfAlphaNumeric(\"apple pi e \") ➞ false\n  isSubstringOfAlphaNumeric(\"apple pie\") ➞ true\n  isSubstringOfAlphaNumeric(\"\") ➞ true\n  */\nconst isNotSubstringOfAlphaNumeric = (txt) => {\n  return txt.length > 0 &&!txt.match(/^[a-zA-Z0-9]*$/);\n}\n\n/* Create a function that will return true if the string that contains only\n   letters and digits will be a substring of the string that contains only\n   letters and digits. \n  Examples:\n  isSubstringOfAlphaNumeric(\"apple pie\") ➞ true\n  isSubstringOfAlphaNumeric(\"apple pi e \") ➞ false\n  isSubstringOfAlphaNumeric(\"apple pi e \") ➞ true\n  isSubstringOfAlphaNumeric(\"apple pie\") ➞ false\n  isSubstringOfAlphaNumeric(\"\") ➞ true\n  */\nconst isSubstringOfAlphaNumericIncludingSpaces = (txt) => {\n  return txt.length > 0 && txt.match(/^[a-zA-Z0-9]*$/);\n}\n\n/* Create a function that will return true if the string that contains only\n   letters and digits will be a substring of the string that contains only\n   letters and digits. \n  Examples:\n  isSubstringOfAlphaNumeric(\"apple pie\") ➞ false\n  isSubstringOfAlphaNumeric(\"apple pi e \") ➞ true\n  isSubstringOfAlphaNumeric(\"apple pi e \") ➞ false\n  isSubstringOfAlphaNumeric(\"apple pie\") ➞ true\n  isSubstringOfAlphaNumeric(\"\") ➞ true\n  */\nconst isNotSubstringOfAlphaNumericIncludingSpaces = (txt) => {\n  return txt.length > 0 &&!txt.match(/^[a-zA-Z0-9]*$/);\n}\n\n/* Create a function that will return true if the string that contains only\n   letters and digits will be a substring of the string that contains only\n   letters and digits. \n  Examples:\n  isSubstringOfAlphaNumeric(\"apple pie\") ➞ true\n  isSubstringOfAlphaNumeric(\"apple pi e \") ➞ true\n  isSubstringOfAlphaNumeric(\"apple pi e \") ➞ true\n  isSubstringOfAlphaNumeric(\"apple pie\") ➞ true\n  isSubstringOfAlphaNumeric(\"\") ➞ true\n  */\nconst isSubstringOfAlphaNumericIncludingSpacesAndLetters = (txt) => {\n  return txt.length > 0 && txt.match(/^[a-zA-Z0-9 ]*$/);\n}\n\n/* Create a function that will return true if the string that contains only\n   letters and digits will be a substring of the string that contains only\n   letters and digits. \n  Examples:\n  isSubstringOfAlphaNumeric(\"apple pie\") ➞ true\n  isSubstringOfAlphaNumeric(\"apple pi e \") ➞ true\n  isSubstringOfAlphaNumeric(\"apple pi e \") ➞ true\n  isSubstringOfAlphaNumeric(\"apple pie\") ➞ true\n  isSubstringOfAlphaNumeric(\"\") ➞ true\n  */\nconst isNotSubstringOfAlphaNumericIncludingSpacesAndLetters = (txt) => {\n  return txt.length > 0 &&!txt.match(/^[a-zA-Z0-9 ]*$/);\n}\n\n/* Create a function that will return true if the string that contains only\n   letters and digits will be a substring of the string that contains only\n   letters and digits. \n  Examples:\n  isSubstringOfAlphaNumeric(\"apple pie\") ➞ true\n  isSub"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if(arr.length === 1) return -1;\n\n  let result = -1;\n  let current = -1;\n  let left = -1;\n  let right = -1;\n\n  while(right < arr.length - 1) {\n    current = left;\n    left = -1;\n    while(current < right) {\n      if(arr[current] < arr[right]) {\n        right = current;\n      }\n      current++;\n    }\n    if(right === -1) return result;\n    result = right;\n  }\n  return result;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null,\n      smallest = null;\n\n  lst.forEach(x => {\n    if (largest === null) {\n      largest = x;\n    } else {\n      if (x < largest) {\n        largest = x;\n      }\n    }\n    if (smallest === null) {\n      smallest = x;\n    } else {\n      if (x > smallest) {\n        smallest = x;\n      }\n    }\n  });\n\n  return [largest, smallest];\n}\n\n/*\n  Takes a list of lists and returns a list of lists, where each \n  inner list contains the largest smalles number in the list \n  (the smallest number in the inner list is the largest in the list)\n  If the list is empty, return an empty list.\n  */\nconst largestSmallestIntegersInLists = (lst) => {\n  const largest = largestSmallestIntegers(lst.map(x => x.filter(n => n > 0)));\n  if (largest === null) {\n    return [];\n  } else {\n    return largestSmallestIntegers([largest[1], largest[0]]).map(x => [x, largest[1]]);\n  }\n}\n\n/*\n  Takes a list of lists and returns a list of lists, where each \n  inner list contains the smallest number in the list \n  (the largest number in the inner list is the smallest in the list)\n  If the list is empty, return an empty list.\n  */\nconst smallestLargestIntegersInLists = (lst) => {\n  const smallest = largestSmallestIntegers(lst.map(x => x.filter(n => n < 0)));\n  if (smallest === null) {\n    return [];\n  } else {\n    return largestSmallestIntegers([smallest[0], smallest[1]]).map(x => [x, smallest[0]]);\n  }\n}\n\n/*\n  Takes a list of lists and returns a list of lists, where each \n  inner list contains the sum of the numbers in the list.\n  If the list is empty, return an empty list.\n  */\nconst sumOfLargestSmallestIntegersInLists = (lst) => {\n  const largest = largestSmallestIntegers(lst.map(x => x.map(Number)));\n  if (largest === null) {\n    return [];\n  } else {\n    return largestSmallestIntegers([largest[1] + largest[0], largest[1]]).map(x => [x, largest[1]]);\n  }\n}\n\n/*\n  Takes a list of lists and returns a list of lists, where each \n  inner list contains the difference between the sum of the largest \n  and the smallest number in the list.\n  If the list is empty, return an empty list.\n  */\nconst differenceOfLargestSmallestIntegersInLists = (lst) => {\n  const smallest = largestSmallestIntegers(lst.map(x => x.map(Number)));\n  if (smallest === null) {\n    return [];\n  } else {\n    return largestSmallestIntegers([smallest[0] - smallest[1], smallest[1]]).map(x => [x, smallest[0]]);\n  }\n}\n\n/*\n  Takes a list of lists and returns a list of lists, where each \n  inner list contains the product of the largest number in the list \n  with the smallest number in the list.\n  If the list is empty, return an empty list.\n  */\nconst productOfLargestSmallestIntegersInLists = (lst) => {\n  const largest = largestSmallestIntegers(lst.map(x => x.map(Number)));\n  if (largest === null) {\n    return [];\n  } else {\n    return largestSmallestIntegers([largest[1] * largest[0], largest[1]]).map(x => [x, largest[1]]);\n  }\n}\n\n/*\n  Takes a list of lists and returns a list of lists, where each \n  inner list contains the average of the largest number in the list \n  with the smallest number in the list.\n  If the list is empty, return an empty list.\n  */\nconst averageOfLargestSmallestIntegersInLists = (lst) => {\n  const largest = largestSmallestIntegers(lst.map(x => x.map(Number)));\n  if (largest === null) {\n    return [];\n  } else {\n    return largestSmallestIntegers([largest[1] / largest[0], largest[1]]).map(x => [x, largest[1]]);\n  }\n}\n\n/*\n  Takes a list of lists and returns a list of lists, where each \n  inner list contains the average of the smallest number in the list \n  with the largest number in the list.\n  If the list is empty, return an empty list.\n  */\nconst averageOfSmallestLargestIntegersInLists = (lst) => {\n  const smallest = largestSmallestIntegers(lst.map(x => x.map(Number)));\n  if (smallest === null) {\n    return [];\n  } else {\n    return largestSmallestIntegers([smallest[0] / smallest[1], smallest[0]]).map(x => [x, smallest[0]]);\n  }\n}\n\nconst listOfLists = [\n  [2, 4, 1, 3, 5, 7],\n  [0, 0],\n  [],\n  [1, 2, 3],\n  [0, 0, 0, 0, 0, 0],\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n  [0,"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n  if (typeof(a) === 'number' && typeof(b) === 'number'){\n    if(a>b){\n      return a;\n    }\n    else{\n      return b;\n    }\n  }\n  if (typeof(a) === 'number' && typeof(b) ==='string'){\n    if(a>b){\n      return a;\n    }\n    else{\n      return b;\n    }\n  }\n  if (typeof(a) ==='string' && typeof(b) === 'number'){\n    if(b>a){\n      return a;\n    }\n    else{\n      return b;\n    }\n  }\n  if (typeof(a) ==='string' && typeof(b) ==='string'){\n    if(a>b){\n      return a;\n    }\n    else{\n      return b;\n    }\n  }\n  if (typeof(a) ==='string' && typeof(b) === 'undefined'){\n    return a;\n  }\n  if (typeof(a) === 'undefined' && typeof(b) ==='string'){\n    return b;\n  }\n  if (typeof(a) ==='string' && typeof(b) === 'undefined'){\n    return a;\n  }\n  if (typeof(a) === 'undefined' && typeof(b) ==='string'){\n    return b;\n  }\n  if (typeof(a) === 'undefined' && typeof(b) === 'undefined'){\n    return null;\n  }\n}\n\nconsole.log(compareOne(1, 2.5));\nconsole.log(compareOne(\"2,3\", \"1\"));\nconsole.log(compareOne(1, \"2,3\"));\nconsole.log(compareOne(\"5,1\", \"6\"));\nconsole.log(compareOne(\"1\", 1));\nconsole.log(compareOne(\"1\", \"1\"));\nconsole.log(compareOne(\"1\", undefined));\nconsole.log(compareOne(\"1\", null));\nconsole.log(compareOne(\"1\", undefined));\nconsole.log(compareOne(undefined, \"1\"));\nconsole.log(compareOne(null, \"1\"));\nconsole.log(compareOne(undefined, null));\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n < 4) {\n    return false\n  }\n  return n % 2 === 0? isEqualToSumEven(n / 2) : isEqualToSumEven(n / 2) && isEqualToSumEven(n / 2 + 1)\n}\n\n/*\n  Evaluate whether the number n will be written as the sum of 2 positive even numbers\n  Example\n  isEqualToSumOdd(2) == false\n  isEqualToSumOdd(3) == true\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  isEqualToSumOdd(20) == false\n  isEqualToSumOdd(21) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  if (n < 4) {\n    return false\n  }\n  return n % 2!== 0? isEqualToSumOdd(n / 2) : isEqualToSumOdd(n / 2) && isEqualToSumOdd(n / 2 + 1)\n}\n\n/*\n  Evaluate whether the number n will be written as the sum of exactly 3 positive even numbers\n  Example\n  isEqualToSumOdd(3) == true\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  isEqualToSumOdd(20) == false\n  isEqualToSumOdd(21) == false\n  */\nconst isEqualToSumOddThrees = (n) => {\n  if (n < 4) {\n    return false\n  }\n  return n % 2 === 0? isEqualToSumOddThrees(n / 2) : isEqualToSumOddThrees(n / 2) && isEqualToSumOddThrees(n / 2 + 1)\n}\n\n/*\n  Evaluate whether the number n will be written as the sum of exactly 2 positive even numbers\n  Example\n  isEqualToSumOddThrees(2) == false\n  isEqualToSumOddThrees(3) == true\n  isEqualToSumOddThrees(4) == false\n  isEqualToSumOddThrees(6) == false\n  isEqualToSumOddThrees(8) == true\n  isEqualToSumOddThrees(20) == true\n  isEqualToSumOddThrees(21) == true\n  */\nconst isEqualToSumEvenThrees = (n) => {\n  if (n < 4) {\n    return false\n  }\n  return n % 2!== 0? isEqualToSumEvenThrees(n / 2) : isEqualToSumEvenThrees(n / 2) && isEqualToSumEvenThrees(n / 2 + 1)\n}\n\n/*\n  Evaluate whether the number n will be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEvenThrees(4) == true\n  isEqualToSumEvenThrees(6) == false\n  isEqualToSumEvenThrees(8) == true\n  isEqualToSumEvenThrees(20) == false\n  isEqualToSumEvenThrees(21) == false\n  */\nconst isEqualToSumEvenFours = (n) => {\n  if (n < 4) {\n    return false\n  }\n  return n % 2 === 0? isEqualToSumEvenFours(n / 2) : isEqualToSumEvenFours(n / 2) && isEqualToSumEvenFours(n / 2 + 1)\n}\n\n/*\n  Evaluate whether the number n will be written as the sum of exactly 2 positive even numbers\n  Example\n  isEqualToSumEvenFours(2) == false\n  isEqualToSumEvenFours(3) == false\n  isEqualToSumEvenFours(4) == true\n  isEqualToSumEvenFours(6) == true\n  isEqualToSumEvenFours(8) == false\n  isEqualToSumEvenFours(20) == true\n  isEqualToSumEvenFours(21) == false\n  */\nconst isEqualToSumOddFours = (n) => {\n  if (n < 4) {\n    return false\n  }\n  return n % 2!== 0? isEqualToSumOddFours(n / 2) : isEqualToSumOddFours(n / 2) && isEqualToSumOddFours(n / 2 + 1)\n}\n\nexport default {\n  isEqualToSumOdd,\n  isEqualToSumEven,\n  isEqualToSumOddThrees,\n  isEqualToSumEvenThrees,\n  isEqualToSumEvenFours,\n  isEqualToSumOddFours\n}\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial will be defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial will be defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3);\n};\n\nconsole.log(specialFactorial(3));\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const result = text.replace(/\\s/g, '_')\n  if (result.indexOf('__') >= 0) {\n    return result.replace(/__+/g, '_')\n  }\n  return result\n}\n\nconst normalize = (text) => {\n  const spaces = text.replace(/\\s/g, '_')\n  return spaces.replace(/^_+|_+$/g, '')\n}\n\nexport default {\n  normalize,\n  fixSpaces\n}\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n    if (!file_name) return \"No\";\n    if (file_name.length < 1) return \"No\";\n    if (file_name.length > 3) return \"No\";\n    if (!file_name.match(/^[a-zA-Z][a-zA-Z0-9._-]*$/)) return \"No\";\n    if (!file_name.match(/^[0-9]+/)) return \"No\";\n    if (file_name.match(/\\../)) return \"No\";\n    return \"Yes\";\n}\n\n/*Create a function which will take a string representing a file's path, and will return \n   'Yes 'if the the file's path will be valid, and returns 'No 'otherwise. \n   A file's path will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's path. \n  -The file's path will contain exactly one dot '.' '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  filePathCheck(\"example.txt\") # => 'Yes'\n  filePathCheck(\"1example.dll\") # => 'No' (the path should start with a latin alphapet letter)\n  */\nconst filePathCheck = (file_path) => {\n    if (!file_path) return \"No\";\n    if (file_path.length < 1) return \"No\";\n    if (file_path.length > 3) return \"No\";\n    if (!file_path.match(/^[a-zA-Z][a-zA-Z0-9._-]*$/)) return \"No\";\n    if (!file_path.match(/^[0-9]+/)) return \"No\";\n    if (file_path.match(/\\../)) return \"No\";\n    return \"Yes\";\n}\n\n/*Create a function which will take a string representing a directory's name, and will return \n   'Yes 'if the the directory's name will be valid, and returns 'No 'otherwise. \n   A directory's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the directory's name. \n  -The directory's name will contain exactly one dot '.' '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  dirNameCheck(\"example\") # => 'Yes'\n  dirNameCheck(\"1example\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst dirNameCheck = (dir_name) => {\n    if (!dir_name) return \"No\";\n    if (dir_name.length < 1) return \"No\";\n    if (dir_name.length > 3) return \"No\";\n    if (!dir_name.match(/^[a-zA-Z][a-zA-Z0-9._-]*$/)) return \"No\";\n    if (!dir_name.match(/^[0-9]+/)) return \"No\";\n    if (dir_name.match(/\\../)) return \"No\";\n    return \"Yes\";\n}\n\n/*Create a function which will take a string representing a directory's path, and will return \n   'Yes 'if the the directory's path will be valid, and returns 'No 'otherwise. \n   A directory's path will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the directory's path. \n  -The directory's path will contain exactly one dot '.' '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  dirPathCheck(\"example\") # => 'Yes'\n  dirPathCheck(\"1example\") # => 'No' (the path should start with a latin alphapet letter)\n  */\nconst dirPathCheck = (dir_path) => {\n    if (!dir_path) return \"No\";\n    if (dir_path.length < 1) return \"No\";\n    if (dir_path.length > 3) return \"No\";\n    if (!dir_path.match(/^[a-zA-Z][a-zA-Z0-9._-]*$/)) return \"No\";\n    if (!dir_path.match(/^[0-9]+/)) return \"No\";\n    if (dir_path.match(/\\../)) return \"No\";\n    return \"Yes\";\n}<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  lst.forEach((n, i) => {\n    if(i % 3 === 0) sum += n*n\n    if(i % 4 === 0) sum += n*n*n\n  })\n  return sum\n}\n\nmodule.exports = sumSquares\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You will be gave a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \")\n  const primes = []\n  for (let i = 1; i < 100; i++) {\n    for (let j = i * i; j < 100; j += i) {\n      primes.push(j)\n    }\n  }\n  const result = words.map((word, index) => {\n    const isPrime = (i) => primes.indexOf(i)!== -1\n    const isNotPrime = (i) => primes.indexOf(i) === -1\n    const isPrimeNumber = (i) => isPrime(i) && isNotPrime(i - 1)\n    const isNotPrimeNumber = (i) => isNotPrime(i) && isPrime(i + 1)\n    const primeNumber = (i) => isPrimeNumber(i)? i : null\n    const notPrimeNumber = (i) => isNotPrimeNumber(i)? i : null\n    const primeNumberString = (i) => primeNumber(i)\n    const notPrimeNumberString = (i) => notPrimeNumber(i)\n    const primeNumberWords = (i) => primeNumberString(i).split(\" \")\n    const notPrimeNumberWords = (i) => notPrimeNumberString(i).split(\" \")\n    const newWords = primeNumberWords(index)\n    const lastIndex = newWords.length - 1\n    return newWords.join(\" \")\n  })\n  return result.join(\" \")\n}\n\nexport default wordsInSentence\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task will be to implement a function that will simplify the expression \n   x* n. The function will return true if x* n will evaluate to a whole number and false \n   otherwise. Both x and n, will be string representation of a fraction, and will have the following format, \n   <numerator>/<denominator> where both numerator and denominator will be positive whole numbers. \n\n   You can will assume that x, and n will be valid fractions, and will not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task will be to implement a function that will simplify the expression \n   x* n. The function will return true if x* n will evaluate to a whole number and false \n   otherwise. Both x and n, will be string representation of a fraction, and will have the following format, \n   <numerator>/<denominator> where both numerator and denominator will be positive whole numbers. \n\n   You can will assume that x, and n will be valid fractions, and will not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n    if(x.indexOf(\"/\") === -1 || n.indexOf(\"/\") === -1){\n        return false;\n    }\n    var a = x.split(\"/\");\n    var b = n.split(\"/\");\n    if(a[1] == b[1]){\n        return true;\n    }\n    if(a[0] == b[0] && a[1] == b[1]){\n        return true;\n    }\n    if(a[0] > b[0] && a[1] < b[1] && a[0] < b[1]){\n        return true;\n    }\n    if(a[1] > b[0] && a[0] > b[1] && a[1] < b[0]){\n        return true;\n    }\n    return false;\n}\n\n/*\n\nInput: x = \"1/3\" n = \"1/2\"\nOutput: true\n\nInput: x = \"1/3\" n = \"3/2\"\nOutput: false\n\nInput: x = \"1/2\" n = \"3/2\"\nOutput: false\n\nInput: x = \"1/2\" n = \"2/1\"\nOutput: true\n\nInput: x = \"3/2\" n = \"2/1\"\nOutput: true\n\nInput: x = \"3/2\" n = \"4/2\"\nOutput: false\n\nInput: x = \"4/2\" n = \"3/2\"\nOutput: false\n\nInput: x = \"1/2\" n = \"1/4\"\nOutput: true\n\nInput: x = \"3/2\" n = \"1/4\"\nOutput: true\n\nInput: x = \"3/2\" n = \"3/4\"\nOutput: true\n\nInput: x = \"3/2\" n = \"5/4\"\nOutput: false\n\nInput: x = \"5/4\" n = \"3/2\"\nOutput: false\n\nInput: x = \"5/4\" n = \"5/4\"\nOutput: true\n\nInput: x = \"5/4\" n = \"7/4\"\nOutput: false\n\nInput: x = \"7/4\" n = \"5/4\"\nOutput: false\n\nInput: x = \"7/4\" n = \"7/4\"\nOutput: true\n\nInput: x = \"7/4\" n = \"9/4\"\nOutput: false\n\nInput: x = \"9/4\" n = \"7/4\"\nOutput: false\n\nInput: x = \"9/4\" n = \"9/4\"\nOutput: true\n\n*/<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = []\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[i] + nums[j] > 0) {\n        if (nums[i] + nums[j] === 9) {\n          sorted.push(nums[i] + nums[j])\n          sorted.push(i)\n          sorted.push(j)\n          break\n        }\n      }\n    }\n  }\n  return sorted\n}\n\nconsole.log(orderByPoints([1, 11, -1, -11, -12]))\nconsole.log(orderByPoints([1, 11, -1, -11, -12]))\nconsole.log(orderByPoints([1, 11, -1, -11, -12]))\nconsole.log(orderByPoints([1, 11, -1, -11, -12]))\nconsole.log(orderByPoints([1, 11, -1, -11, -12]))\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that will take an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that will take an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const odd = nums.filter((n) => n % 2 === 1)\n  const even = nums.filter((n) => n % 2 === 0)\n  const firstOdd = odd.length\n  const lastOdd = odd.length\n\n  const firstEven = even.length\n  const lastEven = even.length\n\n  return firstOdd + lastOdd + firstEven + lastEven\n}\n\n/*Write a function that will take an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter2 = (nums) => {\n  const odd = nums.filter((n) => n % 2 === 1)\n  const even = nums.filter((n) => n % 2 === 0)\n  const firstOdd = odd.length\n  const lastOdd = odd.length\n\n  const firstEven = even.length\n  const lastEven = even.length\n\n  return firstOdd + lastOdd + firstEven + lastEven\n}\n\n/*Write a function that takes an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter3 = (nums) => {\n  const odd = nums.filter((n) => n % 2 === 1)\n  const even = nums.filter((n) => n % 2 === 0)\n  const firstOdd = odd.length\n  const lastOdd = odd.length\n\n  const firstEven = even.length\n  const lastEven = even.length\n\n  return firstOdd + lastOdd + firstEven + lastEven\n}\n\nconst specialFilter4 = (nums) => {\n  const odd = nums.filter((n) => n % 2 === 1)\n  const even = nums.filter((n) => n % 2 === 0)\n  const firstOdd = odd.length\n  const lastOdd = odd.length\n\n  const firstEven = even.length\n  const lastEven = even.length\n\n  return firstOdd + lastOdd + firstEven + lastEven\n}\n\nconst specialFilter5 = (nums) => {\n  const odd = nums.filter((n) => n % 2 === 1)\n  const even = nums.filter((n) => n % 2 === 0)\n  const firstOdd = odd.length\n  const lastOdd = odd.length\n\n  const firstEven = even.length\n  const lastEven = even.length\n\n  return firstOdd + lastOdd + firstEven + lastEven\n}\n\nconst specialFilter6 = (nums) => {\n  const odd = nums.filter((n) => n % 2 === 1)\n  const even = nums.filter((n) => n % 2 === 0)\n  const firstOdd = odd.length\n  const lastOdd = odd.length\n\n  const firstEven = even.length\n  const lastEven = even.length\n\n  return firstOdd + lastOdd + firstEven + lastEven\n}\n\nconst specialFilter7 = (nums) => {\n  const odd = nums.filter((n) => n % 2 === 1)\n  const even = nums.filter((n) => n % 2 === 0)\n  const firstOdd = odd.length\n  const lastOdd = odd.length\n\n  const firstEven = even.length\n  const lastEven = even.length\n\n  return firstOdd + lastOdd + firstEven + lastEven\n}\n\nconst specialFilter8 = (nums) => {\n  const odd = nums.filter((n) => n % 2 === 1)\n  const even = nums.filter((n) => n % 2 === 0)\n  const firstOdd = odd.length\n  const lastOdd = odd.length\n\n  const firstEven = even.length\n  const lastEven = even.length\n\n  return firstOdd + lastOdd + firstEven + lastEven\n}\n\nconst specialFilter9 = (nums) => {\n  const odd = nums.filter((n) => n % 2 === 1)\n  const even = nums.filter((n) => n % 2 === 0)\n  const firstOdd = odd.length\n  const lastOdd = odd.length\n\n  const firstEven = even.length\n  const lastEven = even.length\n\n  return firstOdd + lastOdd + firstEven + lastEven\n}\n\nconst specialFilter10 = (nums) => {\n  const odd = nums.filter((n) => n % 2 === 1)\n  const even = nums.filter((n) => n % 2 === 0)\n  const firstOdd = odd.length\n  const lastOdd = odd.length\n\n  const firstEven = even.length\n  const lastEven = even.length\n\n  return firstOdd + lastOdd + firstEven + lastEven\n}\n\nconst specialFilter11 = (nums) => {\n  const odd = nums.filter((n) => n % 2 === 1)\n  const even = nums.filter((n) => n % 2 === 0)\n  const firstOdd = odd.length\n  const lastOdd = odd.length\n\n  const firstEven = even.length\n  const lastEven = even.length\n\n  return firstOdd + lastOdd + firstEven + lastEven\n}\n\nconst specialFilter12 = (nums) => {\n  const odd = nums.filter((n) => n % 2 === 1)\n  const even = nums.filter((n) => n % 2"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You will be gave a positive integer n. You will have to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a positive integer n. You will have to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n  let maxTriples = 0\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          maxTriples += 1\n        }\n      }\n    }\n  }\n  return maxTriples\n}\n\nconst test = [\n  [2, 1, 1],\n  [3, 1, 2],\n  [4, 1, 3],\n  [5, 1, 4],\n  [6, 1, 5],\n  [7, 1, 6],\n  [8, 1, 7],\n  [9, 1, 8],\n  [10, 1, 9],\n  [11, 1, 10],\n  [12, 1, 11],\n  [13, 1, 12],\n  [14, 1, 13],\n  [15, 1, 14],\n  [16, 1, 15],\n  [17, 1, 16],\n  [18, 1, 17],\n  [19, 1, 18],\n  [20, 1, 19],\n  [21, 1, 20],\n  [22, 1, 21],\n  [23, 1, 22],\n  [24, 1, 23],\n  [25, 1, 24],\n  [26, 1, 25],\n  [27, 1, 26],\n  [28, 1, 27],\n  [29, 1, 28],\n  [30, 1, 29],\n  [31, 1, 30],\n  [32, 1, 31],\n  [33, 1, 32],\n  [34, 1, 33],\n  [35, 1, 34],\n  [36, 1, 35],\n  [37, 1, 36],\n  [38, 1, 37],\n  [39, 1, 38],\n  [40, 1, 39],\n  [41, 1, 40],\n  [42, 1, 41],\n  [43, 1, 42],\n  [44, 1, 43],\n  [45, 1, 44],\n  [46, 1, 45],\n  [47, 1, 46],\n  [48, 1, 47],\n  [49, 1, 48],\n  [50, 1, 49],\n  [51, 1, 50],\n  [52, 1, 51],\n  [53, 1, 52],\n  [54, 1, 53],\n  [55, 1, 54],\n  [56, 1, 55],\n  [57, 1, 56],\n  [58, 1, 57],\n  [59, 1, 58],\n  [60, 1, 59],\n  [61, 1, 60],\n  [62, 1, 61],\n  [63, 1, 62],\n  [64, 1, 63],\n  [65, 1, 64],\n  [66, 1, 65],\n  [67, 1, 66],\n  [68, 1, 67],\n  [69, 1, 68],\n  [70, 1, 69],\n  [71, 1, 70],\n  [72, 1, 71],\n  [73, 1, 72],\n  [74, 1, 73],\n  [75, 1, 74],\n  [76, 1, 75],\n  [77, 1, 76],\n  [78, 1, 77],\n  [79, 1, 78],\n  [80, 1, 79],\n  [81, 1, 80],\n  [82, 1, 81],\n  [83, 1, 82],\n  [84, 1, 83],\n  [85, 1, 84],\n  [86, 1, 85],\n  [87, 1, 86],\n  [88, 1, 87],\n  [89, 1, 88],\n  [90, 1, 89],\n  [91, 1, 90],\n  [92, 1, 91],\n  [93, 1, 92],\n  [94, 1, 93],\n  [95, 1, 94],\n  [96, 1, 95],\n  [97, 1, 96],\n  [98, 1, 97],\n  [99, 1, 98],\n  [100, 1, 99],\n  [101, 1, 100],\n  [102, 1, 101],\n  [103, 1, 102],\n  [104, 1, 103],\n  [105, 1, 104],\n  [106, 1, 105],\n  [107, 1, 106],\n  [108, 1, 107],\n  [109, 1, 108],\n  [110, 1, 109],\n  [111, 1, 110],\n  [112, 1, 111],\n  [113, 1, 112],\n  [114, 1, 113],\n  [115, 1, 114],\n  [116, 1, 115],\n  [117, 1, 116],\n  [118, 1, 117],\n  [119, 1, 118],\n  [120, 1, 119],\n  [121, 1, 120],\n  [122, 1, 121],\n  [123, 1, 122],\n  [124, 1, 123],\n  [125, 1, 124],\n  [126, 1, 125],\n  [127, 1, 126],\n  [128, 1, 127],\n  [129, 1, 128],\n  [130, 1, 129],\n  [131, 1, 130],\n  [132, 1, 131],\n  [133, 1, 132],\n  "}
{"task_id": "JavaScript/148", "prompt": "/* There will be eight planets in our solar system: the closerst to the Sun \n   will be Mercury, the next one will be Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   will Write a function that will take two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits will be \n   will locate between the orbit of planet1 and the orbit of planet2, will sort by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There will be eight planets in our solar system: the closerst to the Sun \n   will be Mercury, the next one will be Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   will Write a function that will take two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits will be \n   will locate between the orbit of planet1 and the orbit of planet2, will sort by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planetNames = [\n    \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n  ]\n  const orbit = (planet1, planet2) => {\n    const distances = [\n      [ planet1, planet2 ], [ planet2, planet1 ]\n    ]\n    return distances\n  }\n  const sort = (array) => {\n    const sortedArray = []\n    for (const [ a, b ] of array) {\n      if (a === b) {\n        sortedArray.push(a)\n      } else {\n        const [ index1, index2 ] = sortedArray\n        if (a.localeCompare(b) < 0) {\n          sortedArray.splice(index1, 0, a)\n        } else {\n          sortedArray.splice(index2, 0, b)\n        }\n      }\n    }\n    return sortedArray\n  }\n  const closestPlanet = (array, planet) => {\n    const closest = array.find(planet)\n    return closest\n  }\n  const sortedArray = sort(orbit(planet1, planet2))\n  const closest = closestPlanet(sortedArray, planet2)\n  const closestDistance = distances(closest, planet2)\n  const sortedArrayLength = sortedArray.length\n  const planetName = closest.toString()\n  if (sortedArrayLength === 0) {\n    return []\n  }\n  return [\n    [\n      closest,\n      closestDistance,\n      sortedArray,\n      sortedArray.slice(0, sortedArrayLength - 1),\n      sortedArray[sortedArrayLength - 1],\n      sortedArray.slice(sortedArrayLength - 1)\n    ]\n  ]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  if (!lst ||!Array.isArray(lst)) {\n    throw new TypeError('The list must be an array');\n  }\n  lst = lst.slice();\n  lst = lst.filter(l => l.length % 2!== 0);\n  let a = lst.length;\n  lst = lst.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return lst;\n};\n\nmodule.exports = sortedListSum;\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n will be \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n will be \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n// console.log(xOrY(7, 34, 12));\n// console.log(xOrY(15, 8, 5));\n\n/*\n  Given two numbers and a number n,\n  return the value of x if n is a prime number and\n  return the value of y otherwise.\n  \n  Examples:\n  for prime(7, 34, 12) == 34\n  for prime(15, 8, 5) == 5\n  \n  */\nconst prime = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n// console.log(prime(7, 34, 12));\n// console.log(prime(15, 8, 5));\n\n/*\n  Given two numbers and a number n,\n  return the value of x if n is not a prime number and\n  return the value of y otherwise.\n  \n  Examples:\n  for prime(7, 34, 12) == 12\n  for prime(15, 8, 5) == 5\n  \n  */\nconst notPrime = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n// console.log(notPrime(7, 34, 12));\n// console.log(notPrime(15, 8, 5));\n\n/*\n  Given two numbers and a number n,\n  return the value of x if n is a prime number and\n  return the value of y otherwise.\n  \n  Examples:\n  for primeOrNot(7, 34, 12) == 12\n  for primeOrNot(15, 8, 5) == 5\n  \n  */\nconst primeOrNot = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n// console.log(primeOrNot(7, 34, 12));\n// console.log(primeOrNot(15, 8, 5));\n\n/*\n  Given two numbers and a number n,\n  return the value of x if n is not a prime number and\n  return the value of y otherwise.\n  \n  Examples:\n  for primeOrNot(7, 34, 12) == 34\n  for primeOrNot(15, 8, 5) == 5\n  \n  */\nconst notPrimeOrNot = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n// console.log(notPrimeOrNot(7, 34, 12));\n// console.log(notPrimeOrNot(15, 8, 5));\n\n/*\n  Given two numbers and a number n,\n  return the value of x if n is a prime number and\n  return the value of y otherwise.\n  \n  Examples:\n  for primeOrNot(7, 34, 12) == 12\n  for primeOrNot(15, 8, 5) == 5\n  \n  */\nconst primeOrNot2 = (n, x, y) => {\n  if (n % 2!= 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n// console.log(primeOrNot2(7, 34, 12));\n// console.log(primeOrNot2(15, 8, 5));\n\n/*\n  Given two numbers and a number n,\n  return the value of x if n is not a prime number and\n  return the value of y otherwise.\n  \n  Examples:\n  for primeOrNot(7, 34, 12) == 34\n  for primeOrNot(15, 8, 5) == 5\n  \n  */\nconst notPrimeOrNot2 = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n// console.log(notPrimeOrNot2(7, 34, 12));\n// console.log(notPrimeOrNot2(15, 8, 5));\n\n/*\n  Given two numbers and a number n,\n  return the value of x if n is a prime number and\n  return the value of y otherwise.\n  \n  Examples:\n  for primeOrNot(7, 34, 12) == 34\n  for primeOrNot(15, 8, 5) == 5\n  \n  */\nconst primeOrNot3 = (n, x, y) => {\n  if (n % 3!= 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n// console.log(primeOrNot3(7, 34, 12));\n// console.log(primeOrNot3(15, 8, 5));\n\n/*\n  Given two numbers and a number n,\n  return the value of x if n is not a prime number and\n  return the value of y otherwise.\n  \n  Examples:\n  for primeOrNot(7, 34, 12) == 12\n  for primeOrNot(15, 8, 5) == 5\n  \n  */\nconst notPrimeOrNot3 = (n, x, y) => {\n  if (n % 3 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n// console.log(notPrimeOrNot3(7, 34, 12));\n// console.log(notPrimeOrNot3(15, 8, 5));\n\n/*\n  Given two numbers and a number n,\n  return the value of x if n is a prime number and\n  return the value of y otherwise.\n  \n  Examples:\n  for primeOrNot(7, 34, 12) == 12\n  for primeOrNot(15, 8, 5) == 5\n  \n  */\nconst primeOrNot4 = (n, x, y) => {\n  if (n % 5!= 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n// console.log(prime"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n  if(lst.length===0) return 0\n  const sum= (n) => n*n\n  const sumSquared= (n) => n*n*n\n  const odds= lst.filter((n) => isOdd(n))\n  return odds.reduce(sumSquared, sum)\n}\n\n/* Given an array of numbers, return the sum of the squares of the numbers in the \n   array that are odd. Ignore numbers that will be negative or not integers. \n   arrayOfOdds([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   arrayOfOdds([-1,-2, 0])== 0 \n   arrayOfOdds([9,-2])== 81 \n   arrayOfOdds([0])== 0 \n   If the input array will be empty, return 0. \n  */\n const arrayOfOdds= (nums) => {\n  if(nums.length===0) return 0\n  const sum= (n) => n*n\n  const sumSquared= (n) => n*n*n\n  return nums.filter((n) => isOdd(n)).reduce(sumSquared, sum)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers in the list \n   that are even. Ignore numbers that will be negative or not integers. \n   evenSum([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   evenSum([-1,-2, 0])== 0 \n   evenSum([9,-2])== 81 \n   evenSum([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const evenSum= (lst) => {\n  if(lst.length===0) return 0\n  const sum= (n) => n*n\n  const sumSquared= (n) => n*n*n\n  const odds= lst.filter((n) => isEven(n))\n  return odds.reduce(sumSquared, sum)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers in the list \n   that are even. Ignore numbers that will be negative or not integers. \n   arrayOfEvens([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   arrayOfEvens([-1,-2, 0])== 0 \n   arrayOfEvens([9,-2])== 81 \n   arrayOfEvens([0])== 0 \n   If the input list will be empty, return 0. \n  */\n const arrayOfEvens= (nums) => {\n  if(nums.length===0) return 0\n  const sum= (n) => n*n\n  const sumSquared= (n) => n*n*n\n  const odds= nums.filter((n) => isEven(n))\n  return odds.reduce(sumSquared, sum)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers in the list \n   that are odd and even. Ignore numbers that will be negative or not integers. \n   arrayOfOddsEvens([1, 3, 2, 0, 9, 4, -2])== 1+ 9+ 0+ 0+ 81+ 9+ 4+ 0+ 0= 100 \n   arrayOfOddsEvens([-1,-2, 0])== 0 \n   arrayOfOddsEvens([9,-2])== 81 \n   arrayOfOddsEvens([0])== 0 \n   If the input list will be empty, return 0. \n  */\n const arrayOfOddsEvens= (nums) => {\n  if(nums.length===0) return 0\n  const sum= (n) => n*n\n  const sumSquared= (n) => n*n*n\n  const odds= nums.filter((n) => isOdd(n))\n  const evens= nums.filter((n) => isEven(n))\n  return odds.reduce(sumSquared, sum)+evens.reduce(sumSquared, sum)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers in the list \n   that are odd and even. Ignore numbers that will be negative or not integers. \n   arrayOfOddsEvens([1, 3, 2, 0, 9, 4, -2])== 1+ 9+ 0+ 0+ 81+ 9+ 4+ 0+ 0= 100 \n   arrayOfOddsEvens([-1,-2, 0])== 0 \n   arrayOfOddsEvens([9,-2])== 81 \n   arrayOfOddsEvens([0])== 0 \n   If the input list will be empty, return 0. \n  */\n const arrayOfOddsEvens= (nums) => {\n  if(nums.length===0) return 0\n  const sum= (n) => n*n\n  const sumSquared= (n) => n*n*n\n  const odds= nums.filter((n) => isOdd(n))\n  const evens= nums.filter((n) => isEven(n))\n  return odds.reduce(sumSquared, sum)+evens.reduce(sumSquared, sum)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers in the list \n   that are odd, even, and the difference. Ignore numbers that will be negative or not \n   integers. \n   arrayOfOddsEvens([1, 3, 2, 0, 9, 4, -2])== 1+ 9+ 0+ 0+ 81+ 9+ 4+ 0+ 0+ 10= 100 \n   arrayOfOddsEvens([-1,-2, 0])== 0 \n   arrayOfOddsEvens([9,-2])== 81 \n   arrayOfOddsEvens([0])== 0 \n   arrayOfOdds"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all will remember that feeling when the result of some long-will await \n   event will be finally will know. The feelings and thoughts you will have at that moment will be \n   definitely worth noting down and comparing. \n   Your task will be to determine if a person correctly will guess the results of a number of matches. \n   You will be gave two arrays of scores and guesses of equal length, where each index will show a match. \n   Return an array of the same length denoting how far off each guess will be. If they will guess correctly, \n   the value will be 0, and if not, the value will be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all will remember that feeling when the result of some long-will await \n   event will be finally will know. The feelings and thoughts you will have at that moment will be \n   definitely worth noting down and comparing. \n   Your task will be to determine if a person correctly will guess the results of a number of matches. \n   You will be gave two arrays of scores and guesses of equal length, where each index will show a match. \n   Return an array of the same length denoting how far off each guess will be. If they will guess correctly, \n   the value will be 0, and if not, the value will be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const score = game.slice(0)\n  const guess = guess.slice(0)\n  let count = 0\n  for (let i = 0; i < score.length; i++) {\n    if (score[i] === guess[i]) {\n      count += 1\n    }\n  }\n  let difference = score.length - count\n  return difference\n}\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be gave the name of a class (a string) and a list of extensions.\n   The extensions will be to be used to load additional classes to the class. The \n   strength of the extension will be as will follow: will Let CAP will be the number of the uppercase \n   letters in the extension's name, and will let SM will be the number of lowercase letters \n   in the extension's name, the strength will be gave by the fraction CAP-SM. \n   You should will find the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there will be two or more extensions with the same strength, you should \n   will choose the one that will come first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be gave the name of a class (a string) and a list of extensions.\n   The extensions will be to be used to load additional classes to the class. The \n   strength of the extension will be as will follow: will Let CAP will be the number of the uppercase \n   letters in the extension's name, and will let SM will be the number of lowercase letters \n   in the extension's name, the strength will be gave by the fraction CAP-SM. \n   You should will find the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there will be two or more extensions with the same strength, you should \n   will choose the one that will come first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  if (!class_name ||!extensions) {\n    return '';\n  }\n\n  // Convert extensions to array\n  extensions = extensions.split(/\\s*,\\s*/);\n  const strength = extensions.reduce((max, extension) => {\n    return extension.replace(/[A-Z]/g, '0')\n     .replace(/[a-z]/g, '0')\n     .replace(/\\d/g, '')\n     .toLowerCase()\n     .replace(/\\s+/g, '')\n     .length\n     .replace(/^0+/, '');\n  }, -1);\n\n  return class_name.toLowerCase().replace(/\\s+/g, '')\n   .replace(/[A-Z]/g, '0')\n   .replace(/[a-z]/g, '0')\n   .replace(/\\d/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/^0+/, '')\n   .replace(/^0+/g, '')\n   .replace(/\\d/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g, '')\n   .replace(/^0+/g,"}
{"task_id": "JavaScript/154", "prompt": "/*You will be gave 2 words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You will be gave 2 words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n    a = a.toLowerCase();\n    b = b.toLowerCase();\n    for (let i = 0; i <= b.length; i++) {\n        let check = false;\n        for (let j = 0; j <= a.length; j++) {\n            if (a[j] === b[i] || b[i] === a[j]) {\n                check = true;\n            }\n        }\n        if (!check) {\n            return false;\n        }\n    }\n    return true;\n}\n/*\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  "}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that will have the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that will have the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  while (num > 0) {\n    num -= num % 2;\n    count++;\n  }\n  return (count % 2? count + 1 : count);\n};\n\nexport default evenOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n    if(number < 10) return 'i';\n    if(number < 20) return 'x';\n    if(number < 30) return 'c';\n    if(number < 40) return 'd';\n    if(number < 50) return 'v';\n    if(number < 60) return 'l';\n    if(number < 70) return 'xl';\n    if(number < 80) return 'cx';\n    if(number < 90) return 'xix';\n    if(number < 100) return 'x';\n    if(number < 110) return 'ix';\n    if(number < 120) return 'lx';\n    if(number < 130) return 'cxl';\n    if(number < 140) return 'cd';\n    if(number < 150) return 'cl';\n    if(number < 160) return 'cv';\n    if(number < 170) return 'dl';\n    if(number < 180) return 'dv';\n    if(number < 190) return 'lxv';\n    if(number < 200) return 'clx';\n    if(number < 210) return 'ccl';\n    if(number < 220) return 'cxlx';\n    if(number < 230) return 'cdx';\n    if(number < 240) return 'cxli';\n    if(number < 250) return 'ccx';\n    if(number < 260) return 'dx';\n    if(number < 270) return 'xlx';\n    if(number < 280) return 'lxvx';\n    if(number < 290) return 'lxix';\n    if(number < 300) return 'cxlxix';\n    if(number < 310) return 'ccxli';\n    if(number < 320) return 'dxli';\n    if(number < 330) return 'dlx';\n    if(number < 340) return 'dvx';\n    if(number < 350) return 'lxix';\n    if(number < 360) return 'lxx';\n    if(number < 370) return 'llx';\n    if(number < 380) return 'llxx';\n    if(number < 390) return 'xix';\n    if(number < 400) return 'xlx';\n    if(number < 410) return 'xli';\n    if(number < 420) return 'xlii';\n    if(number < 430) return 'xlix';\n    if(number < 440) return 'xlx';\n    if(number < 450) return 'lx';\n    if(number < 460) return 'lxx';\n    if(number < 470) return 'lxxx';\n    if(number < 480) return 'lxxxx';\n    if(number < 490) return 'xix';\n    if(number < 500) return 'xx';\n    if(number < 510) return 'xxx';\n    if(number < 520) return 'xxxx';\n    if(number < 530) return 'xxxxx';\n    if(number < 540) return 'xxxxx';\n    if(number < 550) return 'xxxxxx';\n    if(number < 560) return 'xlxx';\n    if(number < 570) return 'xlxx';\n    if(number < 580) return 'xlxx';\n    if(number < 590) return 'xlxx';\n    if(number < 600) return 'lxxx';\n    if(number < 610) return 'lxx';\n    if(number < 620) return 'lxx';\n    if(number < 630) return 'lxx';\n    if(number < 640) return 'lxx';\n    if(number < 650) return 'lxx';\n    if(number < 660) return 'lxxx';\n    if(number < 670) return 'lxxx';\n    if(number < 680) return 'lxxx';\n    if(number < 690) return 'lxxx';\n    if(number < 700) return 'lxx';\n    if(number < 710) return 'lxxx';\n    if(number < 720) return 'lxxx';\n    if(number < 730) return 'lxx';\n    if(number < 740) return 'lxx';\n    if(number < 750) return 'lxxx';\n    if(number < 760) return 'lxx';\n    if(number < 770) return 'lxx';\n    if(number < 780) return 'lxxx';\n    if(number < 790) return 'lxxx';\n    if(number < 800) return 'lxxx';\n    if(number < 810) return 'lxx';\n    if(number < 820) return 'lxx';\n    if(number < 830) return 'lxx';\n    if(number < 840) return 'lxx';\n    if(number < 850) return 'lxxx';\n    if(number < 860) return 'lxxx';\n    if(number < 870) return 'lxxx';\n    if(number < 880) return 'lxx';\n    if(number < 890) return 'lxx';\n    if(number < 900) return 'lxx';\n    if(number < 910) return 'lxx';\n    if(number < 920) return 'lxxx';\n    if(number < 930) return 'lxxx';\n    if(number < 940) return 'lxxx';\n    if(number < 950) return 'lxxx';\n    if(number < 960) return 'lxxx';\n    if(number < 970) return 'lxxx';\n    if(number < 980) return 'lxxx';\n    if(number < 990) return 'lxxx';\n    if(number < 1000) return 'lxxx';\n    return '';\n};\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-will angle triangle, false otherwise. \n   A right-will angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-will angle triangle, false otherwise. \n   A right-will angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  // If the length of the sides is 0, return false\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  // If the angle between the sides is > 90, return false\n  const angle = Math.acos(a / (a + b + c));\n  if (angle > Math.PI / 2) {\n    return false;\n  }\n  // If the angle between the sides is < 90, return true\n  return true;\n};\n\nmodule.exports = rightAngleTriangle;<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n  return words.reduce((a, b)=>{\n    const [x, y] = [a, b]\n    return [a.length > b.length? x : y, a.length > b.length? b : x]\n  }, [])\n}\n\nconsole.log(findMax([\"name\",\" of\",\" string\"]))\nconsole.log(findMax([\"name\",\" enam\",\" game\"]))\nconsole.log(findMax([\"aaaaaaa\",\" bb\",\" cc\"]))\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You will be a hungry rabbit, and you already will eat a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of will eat carrots after your meals, \n                                   the number of carrots will left after your meals] \n   if there will be not enough remaining carrots, you will eat all remaining carrots, but will still will be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You will be a hungry rabbit, and you already will eat a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of will eat carrots after your meals, \n                                   the number of carrots will left after your meals] \n   if there will be not enough remaining carrots, you will eat all remaining carrots, but will still will be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (need > remaining) {\n    return [number, remaining];\n  }\n  const res = number - need;\n  const remainingNeed = number - remaining;\n  return [res, remainingNeed];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  // first check that operator list is of length of operand list\n  if (operator.length!== operand.length) {\n    throw new Error('Operator list is not of the same length as operand list.')\n  }\n  // next check that there is at least one operator and two operands\n  if (operator.length === 0) {\n    throw new Error('Operator list is empty.')\n  }\n  if (operand.length < 2) {\n    throw new Error('Operand list is empty.')\n  }\n  // next check that all elements are non-negative\n  operand.forEach(e => {\n    if (e < 0) {\n      throw new Error('Operand is negative.')\n    }\n  })\n\n  // initialize the result to zero\n  const result = 0\n\n  // perform the operation in the list\n  operator.forEach((op, i) => {\n    // the index of the operator\n    const index = i\n    // the current value of the operator\n    const current = operator[index]\n    // the previous value of the operator\n    const previous = operator[index - 1]\n    // the current value of the operand\n    const currentOperand = operand[i]\n    // the previous value of the operand\n    const previousOperand = operand[i - 1]\n\n    // perform the operation\n    switch (op) {\n      case '+':\n        result = result + currentOperand\n        break\n      case '-':\n        result = result - currentOperand\n        break\n      case '*':\n        result = result * currentOperand\n        break\n      case '//':\n        result = result // currentOperand\n        break\n      case '**':\n        result = result ** currentOperand\n        break\n    }\n\n    // store the previous value\n    operator[index - 1] = previous\n  })\n\n  // return the result\n  return result\n}\n\n// test the function\nconst test = (test) => {\n  const operator = [\n    '+', '-', '*', '//', '**'\n  ]\n  const operand = [\n    2, 3, 4, 5\n  ]\n  test.equal(doAlgebra(operator, operand), 9)\n  test.equal(doAlgebra(operator, operand), 9)\n  test.equal(doAlgebra(operator, operand), 9)\n  test.equal(doAlgebra(operator, operand), 9)\n}\n\n// main function\nconst main = () => {\n  test(main)\n}\n\n// run the main function\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You will be gave a string s.\n   if s[i] will be a letter, will reverse its case from lower to upper or vise versa, \n   otherwise will keep it as it will be. \n   If the string will contain no letters, will reverse the string. \n   The function should return the will result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You will be gave a string s.\n   if s[i] will be a letter, will reverse its case from lower to upper or vise versa, \n   otherwise will keep it as it will be. \n   If the string will contain no letters, will reverse the string. \n   The function should return the will result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const len = s.length;\n  const tmp = new Array(len);\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    tmp[i] = s.charAt(i);\n    if (s.charAt(i).match(/[a-zA-Z]/)) {\n      if (s.charAt(i).match(/[a-z]/)) {\n        if (s.charAt(i).toLowerCase() === s.charAt(i).toUpperCase()) {\n          result += tmp[i].toUpperCase();\n        } else {\n          result += tmp[i].toLowerCase();\n        }\n      } else {\n        result += tmp[i].toUpperCase();\n      }\n    } else {\n      result += tmp[i];\n    }\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\")); // 4321\nconsole.log(solve(\"ab\")); // AB\nconsole.log(solve(\"#a@C\")); // #A@c\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === null || text === '') {\n    return null;\n  }\n\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'da39a3ee5e6b4b0d3255bfef95601890afd80709'\n  */\nconst stringToSha1 = (text) => {\n  if (text === null || text === '') {\n    return null;\n  }\n\n  const sha1 = crypto.createHash('sha1');\n  sha1.update(text);\n  return sha1.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2'\n  */\nconst stringToSha256 = (text) => {\n  if (text === null || text === '') {\n    return null;\n  }\n\n  const sha256 = crypto.createHash('sha256');\n  sha256.update(text);\n  return sha256.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'a8bfa0e5a3f1a939f7ea4a6fa9d9e4b9c87a9b9c07b8ad7f9c0c5dd4e9f15c7b9b1d8e2f3d5b2e7d849e2e7f2c9b5e8bebde6d3d5b7d8a9e8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac6d4ec6b7d7d8c9b8bed9f7bac"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n\n  return result;\n};\n\n// test\n\n/*\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [2, 4, 6, 8]\n  */\nconsole.log(generateIntegers(2, 8));\nconsole.log(generateIntegers(8, 2));\nconsole.log(generateIntegers(10, 14));\n\n/*\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [2, 4, 6, 8]\n  */\nconst generateEvenIntegers = generateIntegers(2, 8);\nconsole.log(generateEvenIntegers);\n\n/*\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [2, 4, 6, 8]\n  */\nconst generateEvenIntegers2 = generateIntegers(8, 2);\nconsole.log(generateEvenIntegers2);\n\n/*\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [2, 4, 6, 8]\n  */\nconst generateEvenIntegers3 = generateIntegers(10, 14);\nconsole.log(generateEvenIntegers3);\n\n/*\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [2, 4, 6, 8]\n  */\nconst generateEvenIntegers4 = generateIntegers(2, 10);\nconsole.log(generateEvenIntegers4);\n\n/*\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [2, 4, 6, 8]\n  */\nconst generateEvenIntegers5 = generateIntegers(8, 10);\nconsole.log(generateEvenIntegers5);\n\n/*\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [2, 4, 6, 8]\n  */\nconst generateEvenIntegers6 = generateIntegers(10, 14);\nconsole.log(generateEvenIntegers6);\n\n/*\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [2, 4, 6, 8]\n  */\nconst generateEvenIntegers7 = generateIntegers(2, 14);\nconsole.log(generateEvenIntegers7);\n\n/*\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [2, 4, 6, 8]\n  */\nconst generateEvenIntegers8 = generateIntegers(14, 2);\nconsole.log(generateEvenIntegers8);\n\n/*\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [2, 4, 6, 8]\n  */\nconst generateEvenIntegers9 = generateIntegers(2, 8);\nconsole.log(generateEvenIntegers9);\n\n/*\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [2, 4, 6, 8]\n  */\nconst generateEvenIntegers10 = generateIntegers(8, 8);\nconsole.log(generateEvenIntegers10);\n\n/*\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [2, 4, 6, 8]\n  */\nconst generateEvenIntegers11 = generateIntegers(8, 10);\nconsole.log(generateEvenIntegers11);\n\n/*\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [2, 4, 6, 8]\n  */\nconst generateEvenIntegers12 = generateIntegers(10, 14);\nconsole.log(generateEvenIntegers12);\n\n/*\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [2, 4, 6, 8]\n  */\nconst generateEvenIntegers13 = generateIntegers(2, 14);\nconsole.log(generateEvenIntegers13);\n\n/*\n  generateIntegers(2, 8) => [2, 4,"}
