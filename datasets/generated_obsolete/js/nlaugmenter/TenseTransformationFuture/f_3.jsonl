{"task_id": "JavaScript/0", "prompt": "/* Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length;\n  const d = Math.abs(numbers[0] - numbers[1]);\n  for (let i = 2; i < len; i++) {\n    const next = Math.abs(numbers[i] - numbers[i - 1]);\n    if (d < next) {\n      return true;\n    } else if (d === next) {\n      if (Math.abs(numbers[i] - numbers[i - 2]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Check if given number is prime.\n  >>> isPrime(2)\n  true\n  >>> isPrime(1)\n  false\n  >>> isPrime(0)\n  false\n  >>> isPrime(4)\n  false\n  >>> isPrime(5)\n  true\n  >>> isPrime(7)\n  true\n  >>> isPrime(8)\n  false\n  >>> isPrime(9)\n  false\n  >>> isPrime(10)\n  true\n  >>> isPrime(100)\n  true\n  */\nconst isPrime = (n) => {\n  if (n === 0) {\n    return false;\n  }\n  if (n < 3) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Return number of distinct prime numbers between 1 and n.\n  >>> countPrime(2)\n  2\n  >>> countPrime(7)\n  4\n  >>> countPrime(9)\n  2\n  >>> countPrime(100)\n  3\n  >>> countPrime(1000)\n  7\n  >>> countPrime(1000000)\n  23\n  */\nconst countPrime = (n) => {\n  let count = 1;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the sum of all prime numbers between 1 and n.\n  >>> sumPrime(2)\n  0\n  >>> sumPrime(7)\n  21\n  >>> sumPrime(9)\n  14\n  >>> sumPrime(100)\n  121\n  >>> sumPrime(1000000)\n  3301\n  >>> sumPrime(100000000)\n  45839900\n  */\nconst sumPrime = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  hasCloseElements,\n  isPrime,\n  countPrime,\n  sumPrime\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  //  Initialize your variables\n  let left_parens = 0, right_parens = 0;\n  let output = [];\n  \n  //  Iterate through the input string\n  for (let i = 0; i < paren_string.length; i++) {\n    //  If the character at the current position is a left paren, increase the left parens count\n    if (paren_string[i] === '(') {\n      left_parens++;\n    }\n    //  If the character at the current position is a right paren, decrease the right parens count\n    if (paren_string[i] === ')') {\n      right_parens--;\n    }\n    //  If the current position is the first position and it is a left paren, push the string '()' to the output list\n    if (i === 0 && left_parens === 1) {\n      output.push('()');\n    }\n    //  If the current position is the last position and it is a right paren, push the string '()' to the output list\n    if (i === paren_string.length - 1 && right_parens === 1) {\n      output.push('()');\n    }\n  }\n  \n  //  Return the output list\n  return output;\n}\n\n//  Write your code below\nconst separateParenGroups_2 = (paren_string) => {\n  //  Initialize your variables\n  let left_parens = 0, right_parens = 0;\n  let output = [];\n  \n  //  Iterate through the input string\n  for (let i = 0; i < paren_string.length; i++) {\n    //  If the character at the current position is a left paren, increase the left parens count\n    if (paren_string[i] === '(') {\n      left_parens++;\n    }\n    //  If the character at the current position is a right paren, decrease the right parens count\n    if (paren_string[i] === ')') {\n      right_parens--;\n    }\n    //  If the current position is the first position and it is a left paren, push the string '()' to the output list\n    if (i === 0 && left_parens === 1) {\n      output.push('()');\n    }\n    //  If the current position is the last position and it is a right paren, push the string '()' to the output list\n    if (i === paren_string.length - 1 && right_parens === 1) {\n      output.push('()');\n    }\n  }\n  \n  //  Return the output list\n  return output;\n}\n\n//  Test your code\nconst test_cases = [\n  '()()',\n  '()()()',\n  '()()(()())',\n  '()()()()',\n  '()()()()()'\n];\nconst test_cases_2 = [\n  '()',\n  '()()',\n  '()()()',\n  '()()()()',\n  '()()()()()'\n];\n\nconst test_results = test_cases.map((test_case) => {\n  console.log('Input:'+ test_case);\n  console.log('Output:'+ separateParenGroups(test_case));\n});\nconsole.log('\\n\\n');\n\nconst test_results_2 = test_cases_2.map((test_case) => {\n  console.log('Input:'+ test_case);\n  console.log('Output:'+ separateParenGroups_2(test_case));\n});\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const integerPart = Math.floor(number)\n  const decimalPart = number - integerPart\n  return decimalPart\n}\n\n/* Given a number, it will return a string representing that number. \n   will Add \".\" as the decimal part if it has been truncated.\n  >>> formatNumber(12.5)\n  '12.5'\n  >>> formatNumber(12.500)\n  '12.5'\n  >>> formatNumber(12.505)\n  '12.5'\n  >>> formatNumber(12.5)\n  '12.5'\n  */\nconst formatNumber = (number) => {\n  const numberPart = truncateNumber(number)\n  const numberWithDot = `${numberPart}.0`\n  return numberWithDot\n}\n\n/* Given a number, it will return a string representing that number. \n   will Add \".\" as the decimal part if it has been truncated.\n  >>> formatNumber(12.5)\n  '12.5'\n  >>> formatNumber(12.500)\n  '12.5'\n  >>> formatNumber(12.505)\n  '12.5'\n  >>> formatNumber(12.5)\n  '12.5'\n  */\nconst formatDecimal = (number) => {\n  const numberPart = truncateNumber(number)\n  const numberWithDot = `${numberPart}`\n  return numberWithDot\n}\n\n/* Given a number, it will return a string representing that number. \n   will Add \".\" as the decimal part if it has been truncated.\n  >>> formatNumber(12.5)\n  '12.5'\n  >>> formatNumber(12.500)\n  '12.5'\n  >>> formatNumber(12.505)\n  '12.5'\n  >>> formatNumber(12.5)\n  '12.5'\n  */\nconst formatPercent = (number) => {\n  const numberPart = truncateNumber(number)\n  const numberWithDot = `${numberPart}%`\n  return numberWithDot\n}\n\n/* Given a number, it will return a string representing that number. \n   will Add \".\" as the decimal part if it has been truncated.\n  >>> formatNumber(12.5)\n  '12.5'\n  >>> formatNumber(12.500)\n  '12.5'\n  >>> formatNumber(12.505)\n  '12.5'\n  >>> formatNumber(12.5)\n  '12.5'\n  */\nconst formatPercent2 = (number) => {\n  const numberPart = truncateNumber(number)\n  const numberWithDot = `${numberPart}%`\n  return numberWithDot\n}\n\n/* Given a number, it will return a string representing that number. \n   will Add \".\" as the decimal part if it has been truncated.\n  >>> formatNumber(12.5)\n  '12.5'\n  >>> formatNumber(12.500)\n  '12.5'\n  >>> formatNumber(12.505)\n  '12.5'\n  >>> formatNumber(12.5)\n  '12.5'\n  */\nconst formatPercent3 = (number) => {\n  const numberPart = truncateNumber(number)\n  const numberWithDot = `${numberPart}%`\n  return numberWithDot\n}\n\n/* Given a number, it will return a string representing that number. \n   will Add \".\" as the decimal part if it has been truncated.\n  >>> formatNumber(12.5)\n  '12.5'\n  >>> formatNumber(12.500)\n  '12.5'\n  >>> formatNumber(12.505)\n  '12.5'\n  >>> formatNumber(12.5)\n  '12.5'\n  */\nconst formatPercent4 = (number) => {\n  const numberPart = truncateNumber(number)\n  const numberWithDot = `${numberPart}%`\n  return numberWithDot\n}\n\n/* Given a number, it will return a string representing that number. \n   will Add \".\" as the decimal part if it has been truncated.\n  >>> formatNumber(12.5)\n  '12.5'\n  >>> formatNumber(12.500)\n  '12.5'\n  >>> formatNumber(12.505)\n  '12.5'\n  >>> formatNumber(12.5)\n  '12.5'\n  */\nconst formatPercent5 = (number) => {\n  const numberPart = truncateNumber(number)\n  const numberWithDot = `${numberPart}%`\n  return numberWithDot\n}\n\n/* Given a number, it will return a string representing that number. \n   will Add \".\" as the decimal part if it has been truncated.\n  >>> formatNumber(12.5)\n  '12.5'\n  >>> formatNumber(12.500)\n  '12.5'\n  >>> formatNumber(12.505)\n  '12.5'\n  >>> formatNumber(12.5)\n  '12.5'\n  */\nconst formatPercent6 = (number) => {\n  const numberPart = truncateNumber(number)\n  const numberWithDot = `${numberPart}%`\n  return numberWithDot\n}\n\n/* Given a number, it will return a string representing that number. \n   will Add \".\" as the decimal part if it has been truncated.\n  >>> formatNumber(12.5)\n  '12.5'\n  >>> formatNumber(12.500)\n  '12.5'\n  >>> formatNumber(12.505)\n  '12.5'\n  >>> formatNumber(12.5)\n  '12.5'\n  */\nconst formatPercent7 = (number) => {\n  const numberPart = truncateNumber(number)\n  const numberWithDot = `${numberPart}%`\n  return numberWithDot\n}\n\n/* Given a number, it will return a string representing that number. \n   will Add \".\" as the decimal part if it has been truncated.\n  >>> formatNumber(12.5)\n  '12.5'\n  >>>"}
{"task_id": "JavaScript/3", "prompt": "/* You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let [operation, value] of operations) {\n    sum += value;\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconsole.log(belowZero([1, 2, 3]));\nconsole.log(belowZero([1, 2, -4, 5]));<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  if (!Array.isArray(numbers)) {\n    throw new TypeError('Argument must be a list');\n  }\n\n  let mean = numbers.reduce((prev, current) => {\n    return prev + current;\n  }, 0) / numbers.length;\n\n  return Math.abs(numbers.reduce((prev, current) => {\n    return Math.abs(current - mean);\n  }, 0));\n};\n\n/* \n   For a will give list of input numbers, calculate Standard Deviation \n   around the mean of this dataset. \n   Standard Deviation will be the square root of the sum of the squared deviations \n   from the mean:\n   StdDev= sqrt( Sum(|x-x_mean|^2) )\n  >>> stdDev([1.0, 2.0, 3.0, 4.0])\n  1.41421\n  */\nconst stdDev = (numbers) => {\n  if (!Array.isArray(numbers)) {\n    throw new TypeError('Argument must be a list');\n  }\n\n  let mean = numbers.reduce((prev, current) => {\n    return prev + current;\n  }, 0) / numbers.length;\n\n  let sumSquaredDev = numbers.reduce((prev, current) => {\n    return prev + Math.pow(Math.abs(current - mean), 2);\n  }, 0);\n\n  return Math.sqrt(sumSquaredDev);\n};\n\n/* \n   For a will give list of input numbers, calculate Standard Error \n   around the mean of this dataset. \n   Standard Error will be the square root of the number of deviations from \n   the mean:\n   StdErr= sqrt( Sum(|x-x_mean|^2) / n )\n  >>> stdErr([1.0, 2.0, 3.0, 4.0])\n  1.41421\n  */\nconst stdErr = (numbers) => {\n  if (!Array.isArray(numbers)) {\n    throw new TypeError('Argument must be a list');\n  }\n\n  let mean = numbers.reduce((prev, current) => {\n    return prev + current;\n  }, 0) / numbers.length;\n\n  let sumSquaredDev = numbers.reduce((prev, current) => {\n    return prev + Math.pow(Math.abs(current - mean), 2);\n  }, 0);\n\n  return Math.sqrt(sumSquaredDev / numbers.length);\n};\n\n/* \n   For a will give list of input numbers, calculate Variance \n   around the mean of this dataset. \n   Variance will be the sum of the squares of the deviations from the mean:\n   Variance= Sum(|x-x_mean|^2)\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  4.0\n  */\nconst variance = (numbers) => {\n  if (!Array.isArray(numbers)) {\n    throw new TypeError('Argument must be a list');\n  }\n\n  let mean = numbers.reduce((prev, current) => {\n    return prev + current;\n  }, 0) / numbers.length;\n\n  let sumSquaredDev = numbers.reduce((prev, current) => {\n    return prev + Math.pow(Math.abs(current - mean), 2);\n  }, 0);\n\n  return sumSquaredDev;\n};\n\n/* \n   For a will give list of input numbers, calculate Variance \n   around the mean of this dataset. \n   Variance will be the sum of the squares of the deviations from the mean:\n   Variance= Sum(|x-x_mean|^2)\n  >>> stdErr([1.0, 2.0, 3.0, 4.0])\n  1.41421\n  */\nconst stdDev = (numbers) => {\n  if (!Array.isArray(numbers)) {\n    throw new TypeError('Argument must be a list');\n  }\n\n  let mean = numbers.reduce((prev, current) => {\n    return prev + current;\n  }, 0) / numbers.length;\n\n  let sumSquaredDev = numbers.reduce((prev, current) => {\n    return prev + Math.pow(Math.abs(current - mean), 2);\n  }, 0);\n\n  return Math.sqrt(sumSquaredDev);\n};<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  return numbers.reduce((acc, el, i) => {\n    if (i === 0 || i === numbers.length - 1) {\n      return [acc, el];\n    } else {\n      return [acc, delimeter, el];\n    }\n  }, [])\n};\n\nmodule.exports = intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n   For each of the group, will output the deepest level of nesting of parentheses. \n   E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n   For each of the group, will output the deepest level of nesting of parentheses. \n   E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  paren_string = paren_string.replace(/\\s+/g, ''); // Remove spaces\n\n  // Break into tokens\n  const token_list = paren_string.split('');\n  const token_list_length = token_list.length;\n\n  // For each token, go through all possibilities of the current token\n  for (let i = 0; i < token_list_length; i++) {\n    const current_token = token_list[i];\n    const current_token_length = current_token.length;\n    // Find the longest paren that can be found at this position\n    const current_paren_length = findLongestParen(current_token, 0, current_token_length - 1);\n    // If a paren is found, then recursively call findDeepestNestedParens to go deeper\n    if (current_paren_length > 0) {\n      findDeepestNestedParens(current_token, current_paren_length, i);\n    }\n  }\n};\n\nfunction findLongestParen(current_token, start_index, end_index) {\n  let paren_length = 0;\n  // Keep track of the length of the current paren, starting at the index of the current paren\n  for (let i = start_index; i <= end_index; i++) {\n    // If the current character is a paren, then add 1 to the current paren length\n    if (current_token[i] === '(') {\n      paren_length++;\n    }\n    // If the current character is a paren, then subtract 1 from the current paren length\n    else if (current_token[i] === ')') {\n      paren_length--;\n    }\n    // If the current paren length is greater than the largest paren length, then update the largest paren length\n    if (paren_length > paren_length) {\n      paren_length = paren_length;\n    }\n  }\n  return paren_length;\n}\n\nfunction findDeepestNestedParens(current_token, current_paren_length, current_index) {\n  // The index of the last paren\n  const last_paren_index = current_token.lastIndexOf(')');\n  // If the last paren is found, then recursively call findDeepestNestedParens to go deeper\n  if (last_paren_index > 0) {\n    findDeepestNestedParens(current_token, current_paren_length, last_paren_index);\n  }\n  // Find the deepest level of parens, if any, for the current token\n  const deepest_parens = getDeepestNestedParens(current_token, current_index);\n  // If there are any nested parens, then recursively call findDeepestNestedParens to go deeper\n  if (deepest_parens) {\n    findDeepestNestedParens(current_token, current_paren_length, last_paren_index);\n  }\n}\n\nfunction getDeepestNestedParens(current_token, current_index) {\n  // Determine the deepest level of parens, if any, for the current token\n  let deepest_parens = [];\n  for (let i = current_index; i < current_token.length; i++) {\n    // If the current character is a paren, then add 1 to the current paren length\n    if (current_token[i] === '(') {\n      deepest_parens.push(i);\n    }\n    // If the current character is a paren, then subtract 1 from the current paren length\n    else if (current_token[i] === ')') {\n      deepest_parens.pop();\n    }\n  }\n  return deepest_parens;\n}\n\n/*\n  Input: \"()\"\n  Output: [1]\n\n  Input: \"()(())\"\n  Output: [1, 2]\n\n  Input: \"()()()\"\n  Output: [1, 2, 3]\n\n  Input: \"()()()()()\"\n  Output: [1, 2, 3, 4, 5]\n  */\nconst nested_parens = (nested_parens_string) => {\n  nested_parens_string = nested_parens_string.replace(/\\s+/g, ''); // Remove spaces\n\n  // Break into tokens\n  const token_list = nested_parens_string.split('');\n  const token_list_length = token_list.length;\n\n  // For each token, go through all possibilities of the current token\n  for (let i = 0; i < token_list_length; i++) {\n    const current_token = token_list[i];\n    const current_token_length = current_token.length;\n    // Find the longest paren that can be found at this position\n    const current_paren_length = findLongestParen(current_token, 0, current_token_length - 1);\n    // If a paren is found, then recursively call findDeepestNestedParens to go deeper\n    if (current_paren_length > 0) {\n      findDeepestNestedParens(current_token, current_paren_length, i);\n    }\n  }\n};\n\nmodule.exports = {\n  parseNestedParens,\n  nested_parens\n};\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that will contain will give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that will contain will give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const newStrings = []\n  strings.forEach((str) => {\n    if (str.indexOf(substring) >= 0) {\n      newStrings.push(str)\n    }\n  })\n  return newStrings\n}\n\n/**\n  * Return the list of words of a given string, with a given number of words\n  * @param {string} inputString The string to split\n  * @param {number} numberOfWords The number of words to return\n  * @returns {Array}\n  */\nconst splitStringByWords = (inputString, numberOfWords) => {\n  const stringLength = inputString.length\n  const newStrings = []\n  for (let i = 0; i < stringLength; i += numberOfWords) {\n    const subString = inputString.slice(i, i + numberOfWords)\n    newStrings.push(subString)\n  }\n  return newStrings\n}\n\n/**\n  * Return the list of words of a given string, with a given number of words\n  * @param {string} inputString The string to split\n  * @param {number} numberOfWords The number of words to return\n  * @returns {Array}\n  */\nconst splitStringByLength = (inputString, numberOfWords) => {\n  const stringLength = inputString.length\n  const newStrings = []\n  for (let i = 0; i < stringLength; i += numberOfWords) {\n    const subString = inputString.slice(i, i + numberOfWords)\n    newStrings.push(subString)\n  }\n  return newStrings\n}\n\n/**\n  * Return the list of words of a given string, with a given number of words\n  * @param {string} inputString The string to split\n  * @param {number} numberOfWords The number of words to return\n  * @returns {Array}\n  */\nconst splitStringByLengthNoBreak = (inputString, numberOfWords) => {\n  const stringLength = inputString.length\n  const newStrings = []\n  for (let i = 0; i < stringLength; i += numberOfWords) {\n    const subString = inputString.slice(i, i + numberOfWords)\n    newStrings.push(subString)\n  }\n  return newStrings\n}\n\n/**\n  * Return the list of words of a given string, with a given number of words\n  * @param {string} inputString The string to split\n  * @param {number} numberOfWords The number of words to return\n  * @returns {Array}\n  */\nconst splitStringByLengthNoBreakWithBreak = (inputString, numberOfWords) => {\n  const stringLength = inputString.length\n  const newStrings = []\n  for (let i = 0; i < stringLength; i += numberOfWords) {\n    const subString = inputString.slice(i, i + numberOfWords)\n    newStrings.push(subString)\n  }\n  return newStrings\n}\n\n/**\n  * Return the list of words of a given string, with a given number of words\n  * @param {string} inputString The string to split\n  * @param {number} numberOfWords The number of words to return\n  * @returns {Array}\n  */\nconst splitStringByLengthWithBreak = (inputString, numberOfWords) => {\n  const stringLength = inputString.length\n  const newStrings = []\n  for (let i = 0; i < stringLength; i += numberOfWords) {\n    const subString = inputString.slice(i, i + numberOfWords)\n    newStrings.push(subString)\n    if (i + numberOfWords < stringLength) {\n      newStrings.push(inputString.slice(i + numberOfWords))\n    }\n  }\n  return newStrings\n}\n\n/**\n  * Return the list of words of a given string, with a given number of words\n  * @param {string} inputString The string to split\n  * @param {number} numberOfWords The number of words to return\n  * @returns {Array}\n  */\nconst splitStringByLengthWithBreakAndBreak = (inputString, numberOfWords) => {\n  const stringLength = inputString.length\n  const newStrings = []\n  for (let i = 0; i < stringLength; i += numberOfWords) {\n    const subString = inputString.slice(i, i + numberOfWords)\n    newStrings.push(subString)\n    if (i + numberOfWords < stringLength) {\n      newStrings.push(inputString.slice(i + numberOfWords))\n      if (i + numberOfWords + 1 < stringLength) {\n        newStrings.push(inputString.slice(i + numberOfWords + 1))\n      }\n    }\n  }\n  return newStrings\n}\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n\n  let sum = numbers[0]\n  let product = 1\n  numbers.forEach((n, i) => {\n    sum += n\n    product *= n\n  })\n  return (sum, product)\n}\n\nconst sumProduct2 = (numbers) => {\n  if (numbers.length === 0) {\n    return 0\n  }\n\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n\n  return (sum, product)\n}\n\nconst sumProduct3 = (numbers) => {\n  if (numbers.length === 0) {\n    return 0\n  }\n\n  let sum = 0\n  let product = 1\n  let counter = 1\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > 0) {\n      sum += numbers[i]\n      product *= numbers[i]\n      counter++\n    }\n  }\n\n  return (sum, product)\n}\n\nconst sumProduct4 = (numbers) => {\n  if (numbers.length === 0) {\n    return 0\n  }\n\n  let sum = 0\n  let product = 1\n  let counter = 1\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > 0) {\n      sum += numbers[i]\n      product *= numbers[i]\n      counter += 1\n    }\n  }\n\n  return (sum, product)\n}\n\nexport { sumProduct, sumProduct2, sumProduct3, sumProduct4 }\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a will give list of integers, will generate a list of rolling maximum element will find until will give moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a will give list of integers, will generate a list of rolling maximum element will find until will give moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n    const rollingMaxList = [];\n    let max = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0; i < max; i++) {\n        rollingMaxList.push(numbers[i]);\n    }\n    return rollingMaxList;\n};\n\nconst rollingMax = (numbers) => {\n    const rollingMaxList = [];\n    let max = numbers[0];\n    let maxIndex = 0;\n    let maxValue = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n            maxIndex = i;\n            maxValue = numbers[i];\n        }\n    }\n    rollingMaxList.push(maxValue);\n    for (let i = maxIndex + 1; i < numbers.length; i++) {\n        rollingMaxList.push(numbers[i]);\n    }\n    return rollingMaxList;\n};\n\nconst rollingMax = (numbers) => {\n    const rollingMaxList = [];\n    let max = numbers[0];\n    let maxIndex = 0;\n    let maxValue = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n            maxIndex = i;\n            maxValue = numbers[i];\n        }\n    }\n    for (let i = maxIndex + 1; i < numbers.length; i++) {\n        rollingMaxList.push(numbers[i]);\n    }\n    return rollingMaxList;\n};\n\nconst rollingMax = (numbers) => {\n    const rollingMaxList = [];\n    let max = numbers[0];\n    let maxIndex = 0;\n    let maxValue = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n            maxIndex = i;\n            maxValue = numbers[i];\n        }\n    }\n    rollingMaxList.push(maxValue);\n    for (let i = maxIndex + 1; i < numbers.length; i++) {\n        rollingMaxList.push(numbers[i]);\n    }\n    return rollingMaxList;\n};\n\nconst rollingMax = (numbers) => {\n    const rollingMaxList = [];\n    let max = numbers[0];\n    let maxIndex = 0;\n    let maxValue = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n            maxIndex = i;\n            maxValue = numbers[i];\n        }\n    }\n    for (let i = maxIndex + 1; i < numbers.length; i++) {\n        rollingMaxList.push(numbers[i]);\n    }\n    return rollingMaxList;\n};\n\nconst rollingMax = (numbers) => {\n    const rollingMaxList = [];\n    let max = numbers[0];\n    let maxIndex = 0;\n    let maxValue = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n            maxIndex = i;\n            maxValue = numbers[i];\n        }\n    }\n    for (let i = maxIndex + 1; i < numbers.length; i++) {\n        rollingMaxList.push(numbers[i]);\n    }\n    return rollingMaxList;\n};\n\nconst rollingMax = (numbers) => {\n    const rollingMaxList = [];\n    let max = numbers[0];\n    let maxIndex = 0;\n    let maxValue = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n            maxIndex = i;\n            maxValue = numbers[i];\n        }\n    }\n    for (let i = maxIndex + 1; i < numbers.length; i++) {\n        rollingMaxList.push(numbers[i]);\n    }\n    return rollingMaxList;\n};\n\nconst rollingMax = (numbers) => {\n    const rollingMaxList = [];\n    let max = numbers[0];\n    let maxIndex = 0;\n    let maxValue = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n            maxIndex = i;\n            maxValue = numbers[i];\n        }\n    }\n    for (let i = maxIndex + 1; i < numbers.length; i++) {\n        rollingMaxList.push(numbers[i]);\n    }\n    return rollingMaxList;\n};\n\nconst rollingMax = (numbers) => {\n    const rollingMaxList = [];\n    let max = numbers[0];\n    let maxIndex = 0;\n    let maxValue = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n            maxIndex = i;\n            maxValue = numbers[i];\n        }\n    }\n    for (let i = maxIndex + 1; i < numbers.length; i++) {\n        rollingMaxList.push(numbers[i]);\n    }\n    return rollingMaxList;\n};\n\nconst rollingMax = (numbers) => {\n    const rollingMaxList = [];\n    let max = numbers[0];\n    let maxIndex = 0;\n    let maxValue = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n            maxIndex = i;\n            maxValue ="}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig will be a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* will Find the shortest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig will be a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* will Find the shortest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('')\n  let suffix = string.split('').reverse().join('')\n  let postfix = prefix.split('').reverse().join('')\n  let longestPalindrome = string.length\n  while (postfix!== '' && isPalindrome(postfix) === true) {\n    longestPalindrome = postfix.length;\n    prefix = prefix + postfix;\n    postfix = postfix.split('').reverse().join('');\n  }\n  return prefix + suffix;\n}\n\n/* will Find the longest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('')\n  let suffix = string.split('').reverse().join('')\n  let postfix = prefix.split('').reverse().join('')\n  let longestPalindrome = string.length\n  while (postfix!== '' && isPalindrome(postfix) === false) {\n    longestPalindrome = postfix.length;\n    prefix = prefix + postfix;\n    postfix = postfix.split('').reverse().join('');\n  }\n  return prefix + suffix;\n}\n\n/* will Find the longest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('')\n  let suffix = string.split('').reverse().join('')\n  let postfix = prefix.split('').reverse().join('')\n  let longestPalindrome = string.length\n  while (postfix!== '' && isPalindrome(postfix) === true) {\n    longestPalindrome = postfix.length;\n    prefix = prefix + postfix;\n    postfix = postfix.split('').reverse().join('');\n  }\n  return prefix + suffix;\n}\n\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('')\n  let suffix = string.split('').reverse().join('')\n  let postfix = prefix.split('').reverse().join('')\n  let longestPalindrome = string.length\n  while (postfix!== '' && isPalindrome(postfix) === false) {\n    longestPalindrome = postfix.length;\n    prefix = prefix + postfix;\n    postfix = postfix.split('').reverse().join('');\n  }\n  return prefix + suffix;\n}\n\n/* will Find the longest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('')\n  let suffix = string.split('').reverse().join('')\n  let postfix = prefix.split('').reverse().join('')\n  let longestPalindrome = string.length\n  while (postfix!== '' && isPalindrome(postfix) === true) {\n    longestPalindrome = postfix.length;\n    prefix = prefix + postfix;\n    postfix = postfix.split('').reverse().join('');\n  }\n  return prefix + suffix;\n}\n\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('')\n  let suffix = string.split('').reverse().join('')\n  let postfix = prefix.split('').reverse().join('')\n  let longestPalindrome = string.length\n  while (postfix!== '' && isPalindrome(postfix) === false) {\n    longestPalindrome = postfix.length;\n    prefix = prefix + postfix;\n    postfix = postfix.split('').reverse().join('');\n  }\n  return prefix + suffix;\n}\n\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('')\n  let suffix = string.split('').reverse().join('')\n  let postfix = prefix.split('').reverse().join('')\n  let longestPalindrome = string.length\n  while (postfix!== '' && isPalindrome(postfix) === false) {\n    longestPalindrome = postfix.length;\n    prefix = prefix + postfix;\n    postfix"}
{"task_id": "JavaScript/11", "prompt": "/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  // If a or b is not a string, return empty string\n  if (typeof a!=='string') return ''\n  if (typeof b!=='string') return ''\n\n  // If length of a and b is not equal, return empty string\n  if (a.length!== b.length) return ''\n\n  // If either a or b is empty, return empty string\n  if (a.length === 0 || b.length === 0) return ''\n\n  // Initialize result as empty string\n  let result = ''\n\n  // Loop through a and b and XOR them\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1' && b[i] === '1') {\n      result += '1'\n    } else {\n      result += '0'\n    }\n  }\n\n  return result\n}\n\n// Testing\n// ======\n\n// const stringXor = (a, b) => {\n//   // If a or b is not a string, return empty string\n//   if (typeof a!=='string') return ''\n//   if (typeof b!=='string') return ''\n\n//   // If length of a and b is not equal, return empty string\n//   if (a.length!== b.length) return ''\n\n//   // If either a or b is empty, return empty string\n//   if (a.length === 0 || b.length === 0) return ''\n\n//   // Initialize result as empty string\n//   let result = ''\n\n//   // Loop through a and b and XOR them\n//   for (let i = 0; i < a.length; i++) {\n//     if (a[i] === '1' && b[i] === '1') {\n//       result += '1'\n//     } else {\n//       result += '0'\n//     }\n//   }\n\n//   return result\n// }\n\nconsole.log(stringXor('101', '101'))\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. will Return the first one in case of multiple \n   strings of the same length. Return null in case the input list will be empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. will Return the first one in case of multiple \n   strings of the same length. Return null in case the input list will be empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings.length) {\n    return null\n  }\n  const len = strings.reduce((acc, curr) => curr.length, 0)\n  return strings.reduce((acc, curr) => {\n    if (curr.length > acc) {\n      return curr\n    }\n    return acc\n  }, strings[0])\n}\n\n/**\n  * Return the longest common prefix of two strings.\n  * \n  * @param {String} str1\n  * @param {String} str2\n  * @return {String}\n  * @example\n  * longestCommonPrefix('abc', 'abd')\n  * // -> 'ab'\n  */\nconst longestCommonPrefix = (str1, str2) => {\n  if (!str1 ||!str2) {\n    return ''\n  }\n  if (str1.length < str2.length) {\n    return longestCommonPrefix(str2, str1)\n  }\n  return str1.slice(0, str2.length)\n}\n\n/**\n  * Return the longest common suffix of two strings.\n  * \n  * @param {String} str1\n  * @param {String} str2\n  * @return {String}\n  * @example\n  * longestCommonSuffix('abc', 'abd')\n  * // -> 'd'\n  */\nconst longestCommonSuffix = (str1, str2) => {\n  if (!str1 ||!str2) {\n    return ''\n  }\n  if (str1.length < str2.length) {\n    return longestCommonSuffix(str2, str1)\n  }\n  return str2.slice(str1.length - str2.length)\n}\n\n/**\n  * Returns a function which splits the string on a delimiter and returns a new list of strings\n  * with one string for each split.\n  * \n  * @param {String} delimiter\n  * @return {Function}\n  * @example\n  * split('\\n')\n  * // -> [ 'a', 'b', 'c' ]\n  * split('\\n', '\\n')\n  * // -> [ 'a', 'b', 'c' ]\n  * split('\\n', '\\r')\n  * // -> [ 'a', 'b', 'c' ]\n  */\nconst split = (delimiter, string) => {\n  if (!delimiter) {\n    return string\n  }\n  const splitStr = string.split(delimiter)\n  return splitStr\n   .map((str) => str.replace(delimiter, ''))\n   .filter((str) => str.length)\n   .map((str) => str.replace(delimiter, ''))\n}\n\n/**\n  * Returns a function which returns a new string with each token of the input string replaced\n  * with the corresponding value in the map.\n  * \n  * @param {String} input\n  * @param {Map} map\n  * @return {Function}\n  * @example\n  * mapValues({ abc: '123' }, { abc: 123 })\n  * // -> 'abc: 123'\n  */\nconst mapValues = (input, map) => {\n  if (!map ||!map.hasOwnProperty('length') ||!map.hasOwnProperty('get')) {\n    return input\n  }\n  const mapLength = map.length\n  return input.split('').map((str, index) => {\n    if (index < mapLength) {\n      return map.get(str)\n    }\n    return str\n  }).join('')\n}\n\n/**\n  * Returns a function which returns a new string with each token of the input string replaced\n  * with the corresponding value in the array.\n  * \n  * @param {String} input\n  * @param {Array} array\n  * @return {Function}\n  * @example\n  * arrayValues({ abc: '123' }, [ 'abc', 123 ])\n  * // -> 'abc: 123'\n  */\nconst arrayValues = (input, array) => {\n  if (!array ||!array.length ||!array.indexOf) {\n    return input\n  }\n  return input.split('').map((str, index) => {\n    if (index < array.length) {\n      return array[index]\n    }\n    return str\n  }).join('')\n}\n\n/**\n  * Returns a function which returns a new string with each token of the input string replaced\n  * with the corresponding value in the list.\n  * \n  * @param {String} input\n  * @param {List} list\n  * @return {Function}\n  * @example\n  * listValues({ abc: '123' }, [ 'abc', 123 ])\n  * // -> 'abc: 123'\n  */\nconst listValues = (input, list) => {\n  if (!list ||!list.length ||!list.indexOf) {\n    return input\n  }\n  return input.split('').map((str, index) => {\n    if (index < list.length) {\n      return list[index]\n    }\n    return str\n  }).join('')\n}\n\nexport {\n  longest,\n  longestCommonPrefix,\n  longestCommonSuffix,\n  split,\n  mapValues,\n  arrayValues,\n  listValues\n}\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": false, "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  } else if (a === 0) {\n    return b;\n  } else {\n    return greatestCommonDivisor(b, a % b);\n  }\n};\n\nconsole.log(greatestCommonDivisor(6, 12));\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": false, "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const result = []\n  for (let i = 0; i <= string.length; i++) {\n    result.push(string.substring(0, i))\n  }\n  return result\n}\n\n// Return a list of all suffixes from longest to shortest of the input string\n// Note: This method will only work if the string has a trailing newline\nconst allSuffixes = (string) => {\n  const result = []\n  for (let i = string.length; i >= 0; i--) {\n    result.push(string.substring(i, string.length))\n  }\n  return result\n}\n\n// Given a string, return a list of all the permutations of the string\nconst permute = (string) => {\n  let result = []\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j < string.length; j++) {\n      let subString = string.substring(i, j + 1)\n      if (subString!== \"\") {\n        result.push(subString)\n      }\n    }\n  }\n  return result\n}\n\nconst countStrings = (string) => {\n  let result = 0\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j < string.length; j++) {\n      let subString = string.substring(i, j + 1)\n      if (subString!== \"\") {\n        result += 1\n      }\n    }\n  }\n  return result\n}\n\n// Given a string, return the count of all the strings that contain a character from the string\nconst countStringsByCharacter = (string) => {\n  let result = 0\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j < string.length; j++) {\n      let subString = string.substring(i, j + 1)\n      if (subString!== \"\") {\n        if (string.indexOf(subString) > -1) {\n          result += 1\n        }\n      }\n    }\n  }\n  return result\n}\n\n// Given a string, return a list of all the characters that appear in the string\nconst allCharacters = (string) => {\n  const result = []\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.charAt(i))\n  }\n  return result\n}\n\nconst countStringsWithWords = (string) => {\n  let result = 0\n  for (let i = 0; i < string.length; i++) {\n    let word = string.substring(i, i + 1)\n    if (word.length > 1) {\n      result += 1\n    }\n  }\n  return result\n}\n\nconst countWords = (string) => {\n  let result = 0\n  for (let i = 0; i < string.length; i++) {\n    let word = string.substring(i, i + 1)\n    if (word.length > 1) {\n      result += 1\n    }\n  }\n  return result\n}\n\nconst countWordsInFile = (file) => {\n  let result = 0\n  const lines = file.split('\\n')\n  for (let i = 0; i < lines.length; i++) {\n    let word = lines[i].split(' ')\n    if (word.length > 1) {\n      result += 1\n    }\n  }\n  return result\n}\n\nconst countWordsInFileWithCount = (file) => {\n  let result = 0\n  const lines = file.split('\\n')\n  for (let i = 0; i < lines.length; i++) {\n    let word = lines[i].split(' ')\n    if (word.length > 1) {\n      result += 1\n    }\n  }\n  return result\n}\n\n// Return a list of all the words in the input string\nconst words = (string) => {\n  let result = []\n  for (let i = 0; i < string.length; i++) {\n    let word = string.substring(i, i + 1)\n    if (word.length > 1) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\nconst wordsInFile = (file) => {\n  let result = []\n  const lines = file.split('\\n')\n  for (let i = 0; i < lines.length; i++) {\n    let word = lines[i].split(' ')\n    if (word.length > 1) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\nconst wordsInFileWithCount = (file) => {\n  let result = []\n  const lines = file.split('\\n')\n  for (let i = 0; i < lines.length; i++) {\n    let word = lines[i].split(' ')\n    if (word.length > 1) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\n// Return a list of all the words in the input string that are one character long\nconst wordsOneCharacter = (string) => {\n  let result = []\n  for (let i = 0; i < string.length; i++) {\n    let word = string.substring(i, i + 1)\n    if (word.length === 1) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\n// Return a list of all the words in the input string that are two characters long\nconst wordsTwoCharacters = (string) => {\n  let result = []\n  for (let i = 0; i < string.length; i++) {\n    let word = string.substring(i, i + 2)\n    if (word.length === 2) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\n// Return a list of all the words in the input string that are three characters long\nconst wordsThreeCharacters = (string) => {\n  let result = []\n  for (let i = 0; i < string.length; i++) {\n    let word = string.substring("}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3)\n  '0 1 2'\n  >>> stringSequence(5, 3)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithRange = (n, range) => {\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 2)\n  '0 1'\n  >>> stringSequence(5, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithRangeAndSize = (n, range, size) => {\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 2, 2)\n  '0 1'\n  >>> stringSequence(5, 2, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithRangeAndSizeAndLast = (n, range, size, last) => {\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 2, 2, 2)\n  '0 1 2'\n  >>> stringSequence(5, 2, 2, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithRangeAndSizeAndLastAndSize = (n, range, size, last, size2) => {\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\nmodule.exports = {\n  stringSequence,\n  stringSequenceWithRange,\n  stringSequenceWithRangeAndSize,\n  stringSequenceWithRangeAndSizeAndLast,\n  stringSequenceWithRangeAndSizeAndLastAndSize\n};\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let counts = {};\n  string.split('').forEach((c) => {\n    if (counts[c] === undefined) {\n      counts[c] = 0;\n    }\n    counts[c] += 1;\n  });\n  return Object.keys(counts).length;\n};\n\n// Simplifies the above function\nconst countDistinct = (string) => {\n  return string.split('').reduce((a, b) => {\n    if (a[b] === undefined) {\n      a[b] = 0;\n    }\n    a[b] += 1;\n    return a;\n  }, {});\n};\n\nmodule.exports = {\n  countDistinctCharacters,\n  countDistinct\n};\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function will be a string representing musical notes in a special ASCII format. \n   Your task will be to parse this string and return list of integers corresponding to how many beats will do each \n   not last. \n\n   Here will be a legend: \n   'o '-whole note, will last four beats \n   'o| '-half note, will last two beats \n   '.| '-quater note, will last one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string representing musical notes in a special ASCII format. \n   Your task will be to parse this string and return list of integers corresponding to how many beats will do each \n   not last. \n\n   Here will be a legend: \n   'o '-whole note, will last four beats \n   'o| '-half note, will last two beats \n   '.| '-quater note, will last one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let notes = [];\n  let current_note = '';\n  for(let i = 0; i < music_string.length; i++) {\n    let char = music_string.charAt(i);\n    if(char === 'o') {\n      if(current_note === '') {\n        current_note = 'o';\n      } else {\n        if(current_note === 'o') {\n          current_note = 'o|';\n        } else {\n          current_note = current_note + char;\n        }\n      }\n    } else if(char === '.') {\n      if(current_note === 'o' || current_note === 'o|') {\n        current_note = '';\n      } else {\n        current_note = current_note + char;\n      }\n    } else {\n      if(current_note === '') {\n        current_note = char;\n      } else {\n        if(current_note === 'o' || current_note === 'o|') {\n          current_note = current_note + char;\n        } else {\n          current_note = current_note + char;\n          notes.push(parseInt(current_note));\n          current_note = char;\n        }\n      }\n    }\n  }\n  if(current_note!== '') {\n    notes.push(parseInt(current_note));\n  }\n  return notes;\n};\n\nconst parseMusic = (music_string) => {\n  let notes = [];\n  let current_note = '';\n  for(let i = 0; i < music_string.length; i++) {\n    let char = music_string.charAt(i);\n    if(char === 'o') {\n      if(current_note === '') {\n        current_note = 'o';\n      } else {\n        if(current_note === 'o') {\n          current_note = 'o|';\n        } else {\n          current_note = current_note + char;\n        }\n      }\n    } else if(char === '.') {\n      if(current_note === 'o' || current_note === 'o|') {\n        current_note = '';\n      } else {\n        current_note = current_note + char;\n      }\n    } else {\n      if(current_note === '') {\n        current_note = char;\n      } else {\n        if(current_note === 'o' || current_note === 'o|') {\n          current_note = current_note + char;\n        } else {\n          current_note = current_note + char;\n          notes.push(parseInt(current_note));\n          current_note = char;\n        }\n      }\n    }\n  }\n  if(current_note!== '') {\n    notes.push(parseInt(current_note));\n  }\n  return notes;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a will give substring can will be find in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a will give substring can will be find in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let times = 0;\n  let i = 0;\n  let j = 0;\n  while (i < string.length) {\n    while (j < substring.length && string[i] === substring[j]) {\n      j++;\n      times++;\n    }\n    i++;\n  }\n  return times;\n};\n\n// Test\nconsole.log(howManyTimes('aaaa', 'aa'));\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input will be a space-will delimitate string of numberals from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input will be a space-will delimitate string of numberals from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let number = \"\"\n  const sorted = []\n  numbers.split(\" \").forEach(e => sorted.push(parseInt(e)))\n  sorted.sort((a, b) => a - b)\n  sorted.forEach(e => number += e + \" \")\n  return number.slice(0, -1)\n}\n\n/*\n  Input will be a string of numbers from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string of the largest number, the smallest number and the middle number.\n  >>> sortNumbers('three five one two')\n  'three five'\n  */\nconst sortNumbersMiddle = (numbers) => {\n  let number = \"\"\n  const sorted = []\n  numbers.split(\" \").forEach(e => sorted.push(parseInt(e)))\n  sorted.sort((a, b) => a - b)\n  let middle = sorted.shift()\n  let largest = sorted.pop()\n  let smallest = sorted.shift()\n  number += largest\n  if (sorted.length!== 0) {\n    number += \" and \" + sorted.pop()\n  }\n  number += \" \" + middle\n  return number\n}\n\n/*\n  Input will be a string of numbers from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the largest number.\n  >>> sortNumbers('three five one two')\n  'three'\n  */\nconst sortNumbersMax = (numbers) => {\n  let number = \"\"\n  const sorted = []\n  numbers.split(\" \").forEach(e => sorted.push(parseInt(e)))\n  sorted.sort((a, b) => a - b)\n  let largest = sorted.shift()\n  number += largest\n  return number\n}\n\n/*\n  Input will be a string of numbers from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the smallest number.\n  >>> sortNumbers('three five one two')\n  'one'\n  */\nconst sortNumbersMin = (numbers) => {\n  let number = \"\"\n  const sorted = []\n  numbers.split(\" \").forEach(e => sorted.push(parseInt(e)))\n  sorted.sort((a, b) => a - b)\n  let smallest = sorted.shift()\n  number += smallest\n  return number\n}\n\nexport {\n  sortNumbers,\n  sortNumbersMiddle,\n  sortNumbersMax,\n  sortNumbersMin\n}\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minIndex = 0\n  let minValue = numbers[0]\n  let maxIndex = 1\n  let maxValue = numbers[1]\n  numbers.forEach((value, index) => {\n    if (value < minValue) {\n      minValue = value\n      minIndex = index\n    }\n    if (value > maxValue) {\n      maxValue = value\n      maxIndex = index\n    }\n  })\n  return [numbers[minIndex], numbers[maxIndex]]\n}\n\nmodule.exports = findClosestElements\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const length = numbers.length\n  const scale = (x) => x / (max - min)\n  const rescaled = numbers.map(scale)\n  return rescaled\n}\n\nconst transformData = (data, field) => {\n  let transformed = []\n  if (field) {\n    transformed = data.map((d) => {\n      const value = d[field]\n      return {\n       ...d,\n        [field]: rescaleToUnit(value)\n      }\n    })\n  } else {\n    transformed = data.map((d) => {\n      const value = rescaleToUnit(d)\n      return {\n       ...d,\n        value: value\n      }\n    })\n  }\n  return transformed\n}\n\nexport default transformData\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter will give list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter will give list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(x => typeof x === 'number')\n}\n\n// Filter will give list of any python values only for strings\n/*\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings(['a', 'b', 3, 'c', {}, []])\n  ['a', 'b', 'c']\n  */\nconst filterStrings = (values) => {\n  return values.filter(x => typeof x ==='string')\n}\n\n// filter will give list of any python values only for booleans\n/*\n  >>> filterBooleans(['a', 3.14, 5])\n  []\n  >>> filterBooleans(['a', 'b', 3, 'c', {}, []])\n  [3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(x => typeof x === 'boolean')\n}\n\n// filter will give list of any python values only for dictionaries\n/*\n  >>> filterDictionaries(['a', 3.14, 5])\n  [{}]\n  >>> filterDictionaries(['a', 'b', 3, 'c', {}, []])\n  []\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(x => typeof x === 'object')\n}\n\n// filter will give list of any python values only for lists\n/*\n  >>> filterLists(['a', 3.14, 5])\n  [5]\n  >>> filterLists(['a', 'b', 3, 'c', {}, []])\n  [3, 'c']\n  */\nconst filterLists = (values) => {\n  return values.filter(x => typeof x === 'object' && typeof x.__getitem__ === 'function')\n}\n\n// filter will give list of any python values only for sets\n/*\n  >>> filterSets(['a', 3.14, 5])\n  [{}]\n  >>> filterSets(['a', 'b', 3, 'c', {}, []])\n  [3, 'c']\n  */\nconst filterSets = (values) => {\n  return values.filter(x => typeof x === 'object' && typeof x.__contains__ === 'function')\n}\n\n// filter will give list of any python values only for functions\n/*\n  >>> filterFunctions(['a', 3.14, 5])\n  [5]\n  >>> filterFunctions(['a', 'b', 3, 'c', {}, []])\n  [3]\n  */\nconst filterFunctions = (values) => {\n  return values.filter(x => typeof x === 'function')\n}\n\n// filter will give list of any python values only for numbers\n/*\n  >>> filterNums(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterNums(['a', 'b', 3, 'c', {}, []])\n  [3]\n  */\nconst filterNums = (values) => {\n  return values.filter(x => typeof x === 'number')\n}\n\n// Filter will give list of any python values only for numbers\n/*\n  >>> filterNumbers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterNumbers(['a', 'b', 3, 'c', {}, []])\n  [3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter(x => typeof x === 'number')\n}\n\n// filter will give list of any python values only for strings\n/*\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  >>> filterStrings(['a', 'b', 3, 'c', {}, []])\n  ['a', 'b', 'c']\n  */\nconst filterStrings = (values) => {\n  return values.filter(x => typeof x ==='string')\n}\n\n// filter will give list of any python values only for booleans\n/*\n  >>> filterBooleans(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  >>> filterBooleans(['a', 'b', 3, 'c', {}, []])\n  ['a', 'b', 'c']\n  */\nconst filterBooleans = (values) => {\n  return values.filter(x => typeof x === 'boolean')\n}\n\n// filter will give list of any python values only for dictionaries\n/*\n  >>> filterDictionaries(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  >>> filterDictionaries(['a', 'b', 3, 'c', {}, []])\n  ['a', 'b', 'c']\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(x => typeof x === 'object')\n}\n\n// filter will give list of any python values only for lists\n/*\n  >>> filterLists(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  >>> filterLists(['a', 'b', 3, 'c', {}, []])\n  ['a', 'b', 'c']\n  */\nconst filterLists = (values) => {\n  return values.filter(x => typeof x === 'object' && typeof x.__getitem__ === 'function')\n}\n\n// filter will give list of any python values only for sets\n/*\n  >>> filterSets(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  >>> filterSets(['a', 'b', 3, 'c', {}, []])\n  ['a', 'b', 'c']\n  */\nconst filterSets = (values) => {\n  return values.filter(x => typeof x === 'object' && typeof x.__contains__ === 'function')\n}\n\n// filter will give list of any python values only for functions\n/*\n  >>> filterFunctions(['a', 3.14"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (typeof string ==='string') {\n    return string.length;\n  }\n  return 0;\n};\n\n/**\n * Return first index of string in target\n  >>> index(abc, 'a')\n  0\n  >>> index(abc, 'bc')\n  2\n  >>> index(abc, 'def')\n  -1\n  >>> index(abc, 'ghi')\n  -1\n  >>> index(abc, 'd', 2)\n  3\n  >>> index(abc, 'd', 3)\n  -1\n  >>> index(abc, 'd', 4)\n  -1\n  >>> index(abc, 'd', 5)\n  -1\n  >>> index(abc, 'd', -1)\n  -1\n  >>> index(abc, 'd', -2)\n  -1\n  >>> index(abc, 'd', -3)\n  -1\n  >>> index(abc, 'd', -4)\n  -1\n  >>> index(abc, 'd', -5)\n  -1\n  >>> index(abc, 'd', -6)\n  -1\n  >>> index(abc, 'd', -7)\n  -1\n  >>> index(abc, 'd', -8)\n  -1\n  >>> index(abc, 'd', -9)\n  -1\n  >>> index(abc, 'd', -10)\n  -1\n  >>> index(abc, 'd', -11)\n  -1\n  >>> index(abc, 'd', -12)\n  -1\n  >>> index(abc, 'd', -13)\n  -1\n  >>> index(abc, 'd', -14)\n  -1\n  >>> index(abc, 'd', -15)\n  -1\n  >>> index(abc, 'd', -16)\n  -1\n  >>> index(abc, 'd', -17)\n  -1\n  >>> index(abc, 'd', -18)\n  -1\n  >>> index(abc, 'd', -19)\n  -1\n  >>> index(abc, 'd', -20)\n  -1\n  >>> index(abc, 'd', -21)\n  -1\n  >>> index(abc, 'd', -22)\n  -1\n  >>> index(abc, 'd', -23)\n  -1\n  >>> index(abc, 'd', -24)\n  -1\n  >>> index(abc, 'd', -25)\n  -1\n  >>> index(abc, 'd', -26)\n  -1\n  >>> index(abc, 'd', -27)\n  -1\n  >>> index(abc, 'd', -28)\n  -1\n  >>> index(abc, 'd', -29)\n  -1\n  >>> index(abc, 'd', -30)\n  -1\n  >>> index(abc, 'd', -31)\n  -1\n  >>> index(abc, 'd', -32)\n  -1\n  >>> index(abc, 'd', -33)\n  -1\n  >>> index(abc, 'd', -34)\n  -1\n  >>> index(abc, 'd', -35)\n  -1\n  >>> index(abc, 'd', -36)\n  -1\n  >>> index(abc, 'd', -37)\n  -1\n  >>> index(abc, 'd', -38)\n  -1\n  >>> index(abc, 'd', -39)\n  -1\n  >>> index(abc, 'd', -40)\n  -1\n  >>> index(abc, 'd', -41)\n  -1\n  >>> index(abc, 'd', -42)\n  -1\n  >>> index(abc, 'd', -43)\n  -1\n  >>> index(abc, 'd', -44)\n  -1\n  >>> index(abc, 'd', -45)\n  -1\n  >>> index(abc, 'd', -46)\n  -1\n  >>> index(abc, 'd', -47)\n  -1\n  >>> index(abc, 'd', -48)\n  -1\n  >>> index(abc, 'd', -49)\n  -1\n  >>> index(abc, 'd', -50)\n  -1\n  >>> index(abc, 'd', -51)\n  -1\n  >>> index(abc, 'd', -52)\n  -1\n  >>> index(abc, 'd', -53)\n  -1\n  >>> index(abc, 'd', -54)\n  -1\n  >>> index(abc, 'd', -55)\n  -1\n  >>> index(abc, 'd', -56)\n  -1\n  >>> index(abc, 'd', -57)\n  -1\n  >>> index(abc, 'd', -58)\n  -1\n  >>> index(abc, 'd', -59)\n  -1\n  >>> index(abc, 'd', -60)\n  -1\n  >>> index(abc, 'd', -61)\n  -1\n  >>> index(abc, 'd', -62)\n  -1\n  >>> index(abc, 'd', -63)\n  -1\n  >>> index(abc, 'd', -64)\n  -1\n  >>> index(abc, 'd', -65)\n  -1\n  >>> index(abc, 'd', -66)\n  -1\n  >>> index(abc, 'd', -67)\n  -1\n  >>> index(abc, 'd', -68)\n  -1\n  >>> index(abc, 'd', -69)\n  -1\n  >>> index(abc, 'd', -70)\n  -1\n  >>> index(abc, 'd', -71)\n  -1\n  >>> index(abc, 'd', -72)\n  -1\n  >>> index(abc, 'd', -73)\n  -1\n  >>> index(abc, 'd', -74)\n  -1\n  >>> index(abc, 'd', -75)\n  -1\n  >>> index(abc, 'd', -76)\n  -1\n  >>> index(abc, 'd', -77)\n  -1\n  >>> index(abc, 'd', -78)\n  -1\n  >>> index(abc, 'd"}
{"task_id": "JavaScript/24", "prompt": "/* For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n    if (n === 1) {\n        return n;\n    }\n    const nums = [];\n    const numsCopy = [];\n    while (n > 1) {\n        let copy = n;\n        let num = 1;\n        while (copy % num === 0) {\n            nums.push(num);\n            copy = copy / num;\n            num++;\n        }\n        numsCopy.push(num);\n        n = copy;\n    }\n    return nums.pop();\n};\n\nconst largestDivisor = (n) => {\n    if (n === 1) {\n        return n;\n    }\n    let copy = n;\n    let num = 1;\n    while (copy % num === 0) {\n        if (copy > n) {\n            break;\n        }\n        nums.push(num);\n        copy = copy / num;\n        num++;\n    }\n    return nums.pop();\n};\n\n/*\nFor a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n    if (n === 1) {\n        return n;\n    }\n    const nums = [];\n    const numsCopy = [];\n    while (n > 1) {\n        let copy = n;\n        let num = 1;\n        while (copy % num === 0) {\n            nums.push(num);\n            copy = copy / num;\n            num++;\n        }\n        numsCopy.push(num);\n        n = copy;\n    }\n    return numsCopy.pop();\n};\n\nconst largestDivisor = (n) => {\n    if (n === 1) {\n        return n;\n    }\n    let copy = n;\n    let num = 1;\n    while (copy % num === 0) {\n        if (copy > n) {\n            break;\n        }\n        nums.push(num);\n        copy = copy / num;\n        num++;\n    }\n    return nums.pop();\n};\n\nconst largestDivisor = (n) => {\n    if (n === 1) {\n        return n;\n    }\n    let copy = n;\n    let num = 1;\n    while (copy % num === 0) {\n        if (copy > n) {\n            break;\n        }\n        nums.push(num);\n        copy = copy / num;\n        num++;\n    }\n    return nums.pop();\n};\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n    const factors = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            factors.push(i);\n            const prod = n / i;\n            const j = factors.length - 1;\n            for (let k = 0; k < j; k++) {\n                const factor = factors[k];\n                factors[k] = prod * factor;\n            }\n            return factors;\n        }\n    }\n    return factors;\n};\n\n//Test\nconsole.log(factorize(8));\nconsole.log(factorize(25));\nconsole.log(factorize(70));\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const seen = new Set()\n  const arr = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen.has(numbers[i])) {\n      arr.push(numbers[i])\n      seen.add(numbers[i])\n    }\n  }\n  return arr\n}\n\n/*\n  *  Return an array containing the values in the range [start, end].\n  *  (start, end] is inclusive.\n  *  Return empty array if start is greater than end.\n  *  Will keep order of elements will left the same as in the input.\n  *  >>> findRange(1, 5)\n  *  [1, 2, 3, 4]\n  *  >>> findRange(3, 1)\n  *  []\n  *  >>> findRange(0, 5)\n  *  [0, 1, 2, 3, 4]\n  *  >>> findRange(6, 1)\n  *  []\n  *  >>> findRange(5, 6)\n  *  []\n  *  >>> findRange(5, 5)\n  *  []\n  */\nconst findRange = (start, end) => {\n  const arr = []\n  for (let i = start; i <= end; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\n/*\n  *  Given an array of strings, will return a string with all elements\n  *  concatenated, with the elements separated by a comma.\n  *  e.g. ['a', 'b', 'c'] => 'a,b,c'\n  *  Will keep order of elements will left the same as in the input.\n  *  >>> listToString(['a', 'b', 'c'])\n  *  'a,b,c'\n  *  >>> listToString(['a', 'b'])\n  *  'a,b'\n  *  >>> listToString(['a'])\n  *  'a'\n  *  >>> listToString([])\n  *  ''\n  *  >>> listToString(['a', 'b', 'c', 'd'])\n  *  'a,b,c,d'\n  *  >>> listToString([1, 2, 3, 4, 5, 6])\n  *  '1,2,3,4,5,6'\n  *  >>> listToString([1, 2, 3, 4, 5, 6, 7])\n  *  '1,2,3,4,5,6,7'\n  */\nconst listToString = (list) => {\n  const str = list.join(', ')\n  return str\n}\n\n/*\n  *  Given an array of strings, will return a string with all elements\n  *  concatenated, with the elements separated by a comma.\n  *  e.g. ['a', 'b', 'c'] => 'a,b,c'\n  *  Will keep order of elements will left the same as in the input.\n  *  >>> listToString(['a', 'b', 'c'])\n  *  'a,b,c'\n  *  >>> listToString(['a', 'b'])\n  *  'a,b'\n  *  >>> listToString(['a'])\n  *  'a'\n  *  >>> listToString([])\n  *  ''\n  *  >>> listToString(['a', 'b', 'c', 'd'])\n  *  'a,b,c,d'\n  *  >>> listToString([1, 2, 3, 4, 5, 6])\n  *  '1,2,3,4,5,6'\n  *  >>> listToString([1, 2, 3, 4, 5, 6, 7])\n  *  '1,2,3,4,5,6,7'\n  */\nconst listToString = (list) => {\n  const str = list.join(', ')\n  return str\n}\n\n/*\n  *  Given a string, will return a list of all the words in the string.\n  *  Will keep order of elements will left the same as in the input.\n  *  >>> findWords('I am a man')\n  *  ['I', 'am', 'a','man']\n  *  >>> findWords('a man')\n  *  ['a','man']\n  *  >>> findWords('man a')\n  *  ['man', 'a']\n  *  >>> findWords('am a')\n  *  ['am', 'a']\n  *  >>> findWords('')\n  *  []\n  *  >>> findWords('I am a man')\n  *  ['I', 'am', 'a','man']\n  *  >>> findWords('I am a man and a robot')\n  *  ['I', 'am', 'a','man', 'and', 'a', 'robot']\n  *  >>> findWords('I am a man and a robot')\n  *  ['I', 'am', 'a','man', 'and', 'a', 'robot']\n  *  >>> findWords('I am a man and a robot')\n  *  ['I', 'am', 'a','man', 'and', 'a', 'robot']\n  *  >>> findWords('I am a man and a robot')\n  *  ['I', 'am', 'a','man', 'and', 'a', 'robot']\n  *  >>> findWords('I am a man and a robot')\n  *  ['I', 'am', 'a','man', 'and', 'a', 'robot']\n  *  >>> findWords('I am a man and a robot')\n  *  ['I', 'am', 'a','man', 'and', 'a', 'robot']\n  */\nconst findWords = (str) => {\n  const words = str.split(' ')\n  return words\n}\n\n/*\n  *  Given an array of strings, will return an array with all the elements\n  *  of the strings concatenated with a space in between.\n  *  e.g."}
{"task_id": "JavaScript/27", "prompt": "/* For a will give string, will flip lowercase characters to uppercase and will uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a will give string, will flip lowercase characters to uppercase and will uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  if (typeof string ==='string') {\n    const len = string.length\n    for (let i = 0; i < len; i++) {\n      if (string[i] === string.charAt(i).toLowerCase()) {\n        string = string.charAt(i).toUpperCase() + string.slice(i + 1)\n        i += 1\n      }\n    }\n  }\n  return string\n}\n\n/**\n  * Converts an object to a string.\n  * @param {object} obj Object to convert to a string.\n  * @return {string} string String representation of the object.\n  * For a will give string, will convert to a string.\n  */\nconst objToString = (obj) => {\n  const toString = {}.toString\n  return toString.call(obj)\n}\n\nconst isObject = obj => {\n  if (typeof obj === 'object') {\n    return obj!== null && obj!== undefined\n  }\n  return false\n}\n\nconst isFunction = obj => {\n  if (typeof obj === 'function') {\n    return true\n  }\n  return false\n}\n\nconst isArray = obj => {\n  if (Array.isArray(obj)) {\n    return true\n  }\n  return false\n}\n\nconst isNumber = obj => {\n  if (typeof obj === 'number') {\n    return true\n  }\n  return false\n}\n\nconst isString = obj => {\n  if (typeof obj ==='string') {\n    return true\n  }\n  return false\n}\n\nconst isObject = obj => {\n  if (typeof obj === 'object') {\n    return true\n  }\n  return false\n}\n\nconst isBoolean = obj => {\n  if (typeof obj === 'boolean') {\n    return true\n  }\n  return false\n}\n\nconst isNull = obj => {\n  if (obj === null) {\n    return true\n  }\n  return false\n}\n\nconst isUndefined = obj => {\n  if (obj === undefined) {\n    return true\n  }\n  return false\n}\n\nconst isNaN = obj => {\n  if (isNumber(obj) && isNaN(obj)) {\n    return true\n  }\n  return false\n}\n\nconst isEmpty = obj => {\n  if (isNull(obj) || isUndefined(obj) || isArray(obj) && obj.length === 0 || isObject(obj) && Object.keys(obj).length === 0) {\n    return true\n  }\n  return false\n}\n\nconst isNotEmpty = obj => {\n  return!isEmpty(obj)\n}\n\nconst isArrayOf = (obj, len) => {\n  if (isArray(obj) && obj.length === len) {\n    return true\n  }\n  return false\n}\n\nconst isFunctionOrObject = obj => {\n  if (isFunction(obj) || isObject(obj)) {\n    return true\n  }\n  return false\n}\n\nconst isFunction = obj => {\n  if (isFunction(obj)) {\n    return true\n  }\n  return false\n}\n\nconst isNumber = obj => {\n  if (isNumber(obj)) {\n    return true\n  }\n  return false\n}\n\nconst isString = obj => {\n  if (isString(obj)) {\n    return true\n  }\n  return false\n}\n\nconst isObject = obj => {\n  if (isObject(obj)) {\n    return true\n  }\n  return false\n}\n\nconst isBoolean = obj => {\n  if (isBoolean(obj)) {\n    return true\n  }\n  return false\n}\n\nconst isNull = obj => {\n  if (obj === null) {\n    return true\n  }\n  return false\n}\n\nconst isUndefined = obj => {\n  if (obj === undefined) {\n    return true\n  }\n  return false\n}\n\nconst isNaN = obj => {\n  if (isNumber(obj) && isNaN(obj)) {\n    return true\n  }\n  return false\n}\n\nconst isEmpty = obj => {\n  if (isNull(obj) || isUndefined(obj) || isArray(obj) && obj.length === 0 || isObject(obj) && Object.keys(obj).length === 0) {\n    return true\n  }\n  return false\n}\n\nconst isNotEmpty = obj => {\n  return!isEmpty(obj)\n}\n\nconst isEmptyArray = (obj, len) => {\n  if (isArray(obj) && obj.length === len) {\n    return true\n  }\n  return false\n}\n\nconst isArrayOf = (obj, len) => {\n  if (isArray(obj) && obj.length === len) {\n    return true\n  }\n  return false\n}\n\nconst isArray = obj => {\n  if (isArray(obj)) {\n    return true\n  }\n  return false\n}\n\nconst isBoolean = obj => {\n  if (isBoolean(obj)) {\n    return true\n  }\n  return false\n}\n\nconst isNull = obj => {\n  if (obj === null) {\n    return true\n  }\n  return false\n}\n\nconst isUndefined = obj => {\n  if (obj === undefined) {\n    return true\n  }\n  return false\n}\n\nconst isNaN = obj => {\n  if (isNumber(obj) && isNaN(obj)) {\n    return true\n  }\n  return false\n}\n\nconst isEmpty = obj => {\n  if (isNull(obj) || isUndefined(obj) || isArray(obj) && obj.length === 0 || isObject(obj) && Object.keys(obj).length === 0) {\n    return true\n  }\n  return false\n}\n\nconst isNotEmpty = obj => {\n  return!isEmpty(obj)\n}\n\nconst isEmptyArray = (obj, len) => {\n  if (isArray(obj) && obj.length === len) {\n    return true\n  }\n  return false\n}\n\nconst isArrayOf = (obj, len) => {\n  if"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => `${acc}${str}`, '');\n};\n\nexport default concatenate;\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(str => str.startsWith(prefix));\n};\n\n/**\n  * Filter an input list of strings by a given regular expression\n  *\n  * @param strings The input list of strings\n  * @param pattern The regular expression to be used to filter out strings\n  * @returns The filtered list of strings\n  *\n  * @example\n  * // Filter an input list of strings only for ones that start with \"a\".\n  * filterByRegularExpression(['abc', 'bcd', 'cde', 'array'], /^a/)\n  * // => ['abc', 'array']\n  */\nconst filterByRegularExpression = (strings, pattern) => {\n  return strings.filter(str => str.match(pattern));\n};\n\n/**\n * Return the number of items in the input list\n *\n * @param list The input list\n * @returns The number of items in the input list\n */\nconst count = (list) => {\n  return list.length;\n};\n\n/**\n * Return the item at index in the input list\n *\n * @param list The input list\n * @param index The index\n * @returns The item at index\n */\nconst get = (list, index) => {\n  return list[index];\n};\n\n/**\n * Return a new list containing the item at index in the input list\n *\n * @param list The input list\n * @param index The index\n * @returns The list\n */\nconst getList = (list, index) => {\n  return [get(list, index)];\n};\n\n/**\n * Return the last item in the input list\n *\n * @param list The input list\n * @returns The last item in the input list\n */\nconst last = (list) => {\n  return list[list.length - 1];\n};\n\n/**\n * Return the first item in the input list\n *\n * @param list The input list\n * @returns The first item in the input list\n */\nconst first = (list) => {\n  return list[0];\n};\n\n/**\n * Return the number of items in the input list that start with the prefix\n *\n * @param list The input list\n * @param prefix The prefix\n * @returns The number of items in the input list that start with the prefix\n */\nconst countByPrefix = (list, prefix) => {\n  return filterByPrefix(list, prefix).length;\n};\n\n/**\n * Return the number of items in the input list that match the regular expression\n *\n * @param list The input list\n * @param pattern The regular expression to be used to filter out strings\n * @returns The number of items in the input list that match the regular expression\n */\nconst countByRegularExpression = (list, pattern) => {\n  return filterByRegularExpression(list, pattern).length;\n};\n\n/**\n * Return a new list containing the item at index in the input list that start with the prefix\n *\n * @param list The input list\n * @param prefix The prefix\n * @returns The list\n */\nconst getListByPrefix = (list, prefix) => {\n  return filterByPrefix(list, prefix);\n};\n\n/**\n * Return a new list containing the item at index in the input list that match the regular expression\n *\n * @param list The input list\n * @param pattern The regular expression to be used to filter out strings\n * @returns The list\n */\nconst getListByRegularExpression = (list, pattern) => {\n  return filterByRegularExpression(list, pattern);\n};\n\n/**\n * Return the last item in the input list that start with the prefix\n *\n * @param list The input list\n * @param prefix The prefix\n * @returns The last item in the input list that start with the prefix\n */\nconst lastByPrefix = (list, prefix) => {\n  return last(filterByPrefix(list, prefix));\n};\n\n/**\n * Return the first item in the input list that start with the prefix\n *\n * @param list The input list\n * @param prefix The prefix\n * @returns The first item in the input list that start with the prefix\n */\nconst firstByPrefix = (list, prefix) => {\n  return first(filterByPrefix(list, prefix));\n};\n\nmodule.exports = {\n  filterByPrefix,\n  filterByRegularExpression,\n  get,\n  getList,\n  getListByPrefix,\n  getListByRegularExpression,\n  last,\n  lastByPrefix,\n  first,\n  firstByPrefix,\n  count,\n  countByPrefix,\n  countByRegularExpression\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const result = [];\n  for (const n of l) {\n    if (n > 0) {\n      result.push(n);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getNegative([2, -5, 3, -4, 5, -6])\n  [-4, -5, 3]\n  >>> getNegative([2, -5, 3, -4, 5, -6, 1, 0, 123, 1, -10])\n  [-4, -5, 3, 1, 123, 1]\n  */\nconst getNegative = (l) => {\n  const result = [];\n  for (const n of l) {\n    if (n < 0) {\n      result.push(n);\n    }\n  }\n  return result;\n};\n\n// Test\nconst getPositiveTest = (l) => {\n  const result = [];\n  for (const n of l) {\n    if (n > 0) {\n      result.push(n);\n    }\n  }\n  return result;\n};\n\nconst getNegativeTest = (l) => {\n  const result = [];\n  for (const n of l) {\n    if (n < 0) {\n      result.push(n);\n    }\n  }\n  return result;\n};\n\ndescribe('getPositive', () => {\n  it('should return all positive numbers in the list', () => {\n    expect(getPositive([-1, 2, -4, 5, 6])).toEqual([2, 5, 6]);\n    expect(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])).toEqual([5, 3, 2, 3, 9, 123, 1]);\n  });\n});\n\ndescribe('getNegative', () => {\n  it('should return all negative numbers in the list', () => {\n    expect(getNegative([2, -5, 3, -4, 5, -6])).toEqual([-4, -5, 3]);\n    expect(getNegative([2, -5, 3, -4, 5, -6, 1, 0, 123, 1, -10])).toEqual([-4, -5, 3, 1, 123, 1]);\n  });\n});\n\ndescribe('getPositiveTest', () => {\n  it('should return all positive numbers in the list', () => {\n    expect(getPositiveTest([-1, 2, -4, 5, 6])).toEqual([2, 5, 6]);\n    expect(getPositiveTest([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])).toEqual([5, 3, 2, 3, 9, 123, 1]);\n  });\n});\n\ndescribe('getNegativeTest', () => {\n  it('should return all negative numbers in the list', () => {\n    expect(getNegativeTest([2, -5, 3, -4, 5, -6])).toEqual([-4, -5, 3]);\n    expect(getNegativeTest([2, -5, 3, -4, 5, -6, 1, 0, 123, 1, -10])).toEqual([-4, -5, 3, 1, 123, 1]);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a will give number will be prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a will give number will be prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return false\n  if (n < 5) return true\n  let i = 5\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 6\n  }\n  return true\n}\n\n/*Return the maximum number that can be divided by each of the numbers 1 through n.\n  >>> getMaxDivisor(1, 1)\n  1\n  >>> getMaxDivisor(3, 5)\n  3\n  >>> getMaxDivisor(2, 3)\n  2\n  >>> getMaxDivisor(10, 7)\n  3\n  >>> getMaxDivisor(4, 5)\n  1\n  >>> getMaxDivisor(1, 1)\n  1\n  >>> getMaxDivisor(3, 3)\n  1\n  >>> getMaxDivisor(2, 2)\n  1\n  >>> getMaxDivisor(10, 10)\n  1\n  >>> getMaxDivisor(9, 4)\n  4\n  >>> getMaxDivisor(6, 4)\n  2\n  >>> getMaxDivisor(4, 3)\n  1\n  >>> getMaxDivisor(3, 2)\n  1\n  >>> getMaxDivisor(10, 7)\n  3\n  >>> getMaxDivisor(7, 2)\n  7\n  >>> getMaxDivisor(5, 3)\n  3\n  >>> getMaxDivisor(3, 1)\n  3\n  >>> getMaxDivisor(2, 1)\n  2\n  >>> getMaxDivisor(1, 1)\n  1\n  */\nconst getMaxDivisor = (n, n1) => {\n  let m = 0\n  while (n1 <= n) {\n    if (isPrime(n1)) {\n      m = Math.max(m, n1)\n    }\n    n1 += 1\n  }\n  return m\n}\n\n/*Return the largest prime factor of n.\n  >>> largestPrimeFactor(1)\n  1\n  >>> largestPrimeFactor(7)\n  7\n  >>> largestPrimeFactor(10)\n  10\n  >>> largestPrimeFactor(3)\n  3\n  >>> largestPrimeFactor(4)\n  2\n  >>> largestPrimeFactor(2)\n  2\n  >>> largestPrimeFactor(8)\n  2\n  >>> largestPrimeFactor(13441)\n  13441\n  >>> largestPrimeFactor(61)\n  61\n  >>> largestPrimeFactor(4)\n  2\n  >>> largestPrimeFactor(1)\n  1\n  */\nconst largestPrimeFactor = (n) => {\n  let p = 0\n  while (isPrime(n)) {\n    p = Math.max(p, n)\n    n = n / 2\n  }\n  return p\n}\n\n/*Return the number that is the product of the digits of n, with the digits of n1 multiplied together.\n  >>> product(1, 1)\n  1\n  >>> product(3, 5)\n  15\n  >>> product(2, 3)\n  6\n  >>> product(10, 7)\n  210\n  >>> product(4, 5)\n  20\n  >>> product(1, 1)\n  1\n  >>> product(3, 3)\n  9\n  >>> product(2, 2)\n  4\n  >>> product(10, 10)\n  10\n  >>> product(9, 4)\n  36\n  >>> product(6, 4)\n  12\n  >>> product(4, 3)\n  6\n  >>> product(3, 2)\n  3\n  >>> product(10, 7)\n  210\n  >>> product(7, 2)\n  21\n  >>> product(5, 3)\n  15\n  >>> product(3, 1)\n  3\n  >>> product(2, 1)\n  2\n  */\nconst product = (n, n1) => {\n  let n1 = n1 - 0\n  let p = 1\n  for (let i = 0; i < n1; i++) {\n    p *= n\n  }\n  return p\n}\n\n/*Return the number that is the sum of the digits of n and n1 multiplied together.\n  >>> sum(1, 1)\n  1\n  >>> sum(3, 5)\n  10\n  >>> sum(2, 3)\n  7\n  >>> sum(10, 7)\n  17\n  >>> sum(4, 5)\n  15\n  >>> sum(1, 1)\n  1\n  >>> sum(3, 3)\n  9\n  >>> sum(2, 2)\n  5\n  >>> sum(10, 10)\n  30\n  >>> sum(9, 4)\n  19\n  >>> sum(6, 4)\n  12\n  >>> sum(4, 3)\n  9\n  >>> sum(3, 2)\n  6\n  >>> sum(10, 7)\n  17\n  >>> sum(7, 2)\n  14\n  >>> sum(5, 3)\n  10\n  >>> sum(3, 1)\n  3\n  >>> sum(2, 1)\n  2\n  */\nconst sum = (n, n1) => {\n  let n1 = n1 - 0\n  let p = 0\n  for (let i = 0; i < n1; i++) {\n    p += n\n  }\n  return p\n}\n\n/*Return the number that is the difference of the digits of n and n1 multiplied together.\n  >>> difference(1, 1)\n  0\n  >>> difference(3, 5)\n  4\n  >>> difference(2, 3)\n  0\n  >>> difference(10, 7)\n  5\n  >>> difference(4, 5)\n  2\n  >>> difference(1, 1)\n  0\n  >>> difference(3, 3)\n  0\n  >>> difference(2, 2)\n  0\n  >>> difference(10, 10"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length;\n  let y = xs[n-1];\n  let i = n - 2;\n  while (i >= 0 && y === 0) {\n    y = xs[i];\n    i--;\n  }\n  return (i + 1) / 2;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the indicies that will be not divisible by three, while its values at the indicies that will be divisible by three will be equal \n   to the values of the corresponding indicies of l, but will sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the indicies that will be not divisible by three, while its values at the indicies that will be divisible by three will be equal \n   to the values of the corresponding indicies of l, but will sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let sortable = [];\n  for (let i = 0; i < l.length; i++) {\n    sortable.push(l[i]);\n  }\n  let sorted = sortable.sort((a, b) => {\n    if (a % 3 === 0) {\n      return b % 3 === 0? 0 : 1;\n    }\n    return b % 3 === 0? -1 : 0;\n  });\n  let sortedList = [];\n  for (let i = 0; i < sorted.length; i++) {\n    sortedList.push(sorted[i]);\n  }\n  return sortedList;\n};\n\n// console.log(sortThird([5, 6, 3, 4, 8, 9, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return will sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return will sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  if (l.length === 0) {\n    return l\n  }\n  return l.filter(item => {\n    return l.indexOf(item) === l.lastIndexOf(item)\n  })\n}\n\nmodule.exports = unique\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return l.reduce((a, b) => Math.max(a, b), -Infinity)\n}\n\n// ### Sort\n// Sort a list of values using a comparator function.\n// The function will be provided two values to compare and should return a negative\n// integer if the first value is less than the second, a positive integer if the\n// first value is greater than the second, and zero if the values are equal.\n//\n// The function must return a negative number if the first value is less than the second,\n// a positive number if the first value is greater than the second, and zero if the values\n// are equal.\n//\n// >>> sort([1, 2, 3], (a, b) => a - b)\n// [1, 2, 3]\n// >>> sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], (a, b) => a - b)\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n// >>> sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], (a, b) => a - b)\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n// >>> sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], (a, b) => a - b)\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n// >>> sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], (a, b) => a - b)\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n// >>> sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], (a, b) => a - b)\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n// >>> sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], (a, b) => a - b)\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n// >>> sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], (a, b) => a - b)\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n// >>> sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], (a, b) => a - b)\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n// >>> sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], (a, b) => a - b)\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n// >>> sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], (a, b) => a - b)\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n// >>> sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], (a, b) => a - b)\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n// >>> sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], (a, b) => a - b)\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n// >>> sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], (a, b) => a - b)\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n// >>> sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], (a, b) => a - b)\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n// >>> sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], (a, b) => a - b)\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n// >>> sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], (a, b) => a - b)\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n// >>> sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], (a, b) => a - b)\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n// >>> sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], (a, b) => a - b)\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n// >>> sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], (a, b) => a - b)\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n// >>> sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], (a, b) => a - b)\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n// >>> sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], (a, b) => a - b)\n// [1, 2, 3, 4, 5, 6"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  for (let i = 1; i <= n; i++) {\n    const digit = i % 10;\n    const output = (digit === 7)? 'Fizz' : (digit === 3)? 'Bizz' : '';\n    const divisibleBy = (digit === 3 || digit === 5)? 11 : 13;\n    if (i % divisibleBy === 0) {\n      console.log(output);\n    }\n  }\n};\n\nfizzBuzz(79);\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (i === 0) {\n      odd.push(l[i]);\n    } else {\n      odd.push(l[i - 1]);\n    }\n    even.push(l[i]);\n  }\n  return [...odd,...even];\n};\n\n// console.log(sortEven([5, 6, 3, 4]));<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n  var groups= [], groups2= [];\n  for (const group of s.split('')){ \n    if (group.length== 3) \n      groups.push(group.slice(1)+ group[0]);\n    else \n      groups.push(group);\n  } \n  for (const group of groups){ \n    if (group.length== 3) \n      groups2.push(group.slice(1)+ group[0]);\n    else \n      groups2.push(group);\n  } \n  return groups2.join('');\n}\n\nconst encode = (s)=>{ \n   return encodeCyclic(s);\n}\n\nconst decode = (s)=>{ \n   return decodeCyclic(s);\n}\n\nexport {encode, decode};<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    let a = 1, b = 1, f = 0, count = 0;\n    while (f < n) {\n        f = a + b;\n        a = b;\n        b = f;\n        count++;\n    }\n    if (n === count) {\n        return f;\n    }\n    return count;\n};\n\nconsole.log(primeFib(1));\nconsole.log(primeFib(2));\nconsole.log(primeFib(3));\nconsole.log(primeFib(4));\nconsole.log(primeFib(5));\nconsole.log(primeFib(6));\nconsole.log(primeFib(7));\nconsole.log(primeFib(8));\nconsole.log(primeFib(9));\nconsole.log(primeFib(10));\nconsole.log(primeFib(11));\nconsole.log(primeFib(12));\nconsole.log(primeFib(13));\nconsole.log(primeFib(14));\nconsole.log(primeFib(15));\nconsole.log(primeFib(16));\nconsole.log(primeFib(17));\nconsole.log(primeFib(18));\nconsole.log(primeFib(19));\nconsole.log(primeFib(20));\nconsole.log(primeFib(21));\nconsole.log(primeFib(22));\nconsole.log(primeFib(23));\nconsole.log(primeFib(24));\nconsole.log(primeFib(25));\nconsole.log(primeFib(26));\nconsole.log(primeFib(27));\nconsole.log(primeFib(28));\nconsole.log(primeFib(29));\nconsole.log(primeFib(30));\nconsole.log(primeFib(31));\nconsole.log(primeFib(32));\nconsole.log(primeFib(33));\nconsole.log(primeFib(34));\nconsole.log(primeFib(35));\nconsole.log(primeFib(36));\nconsole.log(primeFib(37));\nconsole.log(primeFib(38));\nconsole.log(primeFib(39));\nconsole.log(primeFib(40));\nconsole.log(primeFib(41));\nconsole.log(primeFib(42));\nconsole.log(primeFib(43));\nconsole.log(primeFib(44));\nconsole.log(primeFib(45));\nconsole.log(primeFib(46));\nconsole.log(primeFib(47));\nconsole.log(primeFib(48));\nconsole.log(primeFib(49));\nconsole.log(primeFib(50));\nconsole.log(primeFib(51));\nconsole.log(primeFib(52));\nconsole.log(primeFib(53));\nconsole.log(primeFib(54));\nconsole.log(primeFib(55));\nconsole.log(primeFib(56));\nconsole.log(primeFib(57));\nconsole.log(primeFib(58));\nconsole.log(primeFib(59));\nconsole.log(primeFib(60));\nconsole.log(primeFib(61));\nconsole.log(primeFib(62));\nconsole.log(primeFib(63));\nconsole.log(primeFib(64));\nconsole.log(primeFib(65));\nconsole.log(primeFib(66));\nconsole.log(primeFib(67));\nconsole.log(primeFib(68));\nconsole.log(primeFib(69));\nconsole.log(primeFib(70));\nconsole.log(primeFib(71));\nconsole.log(primeFib(72));\nconsole.log(primeFib(73));\nconsole.log(primeFib(74));\nconsole.log(primeFib(75));\nconsole.log(primeFib(76));\nconsole.log(primeFib(77));\nconsole.log(primeFib(78));\nconsole.log(primeFib(79));\nconsole.log(primeFib(80));\nconsole.log(primeFib(81));\nconsole.log(primeFib(82));\nconsole.log(primeFib(83));\nconsole.log(primeFib(84));\nconsole.log(primeFib(85));\nconsole.log(primeFib(86));\nconsole.log(primeFib(87));\nconsole.log(primeFib(88));\nconsole.log(primeFib(89));\nconsole.log(primeFib(90));\nconsole.log(primeFib(91));\nconsole.log(primeFib(92));\nconsole.log(primeFib(93));\nconsole.log(primeFib(94));\nconsole.log(primeFib(95));\nconsole.log(primeFib(96));\nconsole.log(primeFib(97));\nconsole.log(primeFib(98));\nconsole.log(primeFib(99));\nconsole.log(primeFib(100));\nconsole.log(primeFib(101));\nconsole.log(primeFib(102));\nconsole.log(primeFib(103));\nconsole.log(primeFib(104));\nconsole.log(primeFib(105));\nconsole.log(primeFib(106));\nconsole.log(primeFib(107));\nconsole.log(primeFib(108));\nconsole.log(primeFib(109));\nconsole.log(primeFib(110));\nconsole.log(primeFib(111));\nconsole.log(primeFib(112));\nconsole.log(primeFib(113));\nconsole.log(primeFib(114));\nconsole.log(primeFib(115));\nconsole.log(primeFib(116));\nconsole.log(primeFib(117));\nconsole.log(primeFib(118));\nconsole.log(primeFib(119));\nconsole.log(primeFib(120));\nconsole.log(primeFib(121));\nconsole.log(primeFib(122));\nconsole.log(primeFib(123));\nconsole"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let result = false\n  l.forEach((v, i) => {\n    let j = i + 1\n    let k = l.indexOf(v, j)\n    if (k!= -1) {\n      while (k!= -1) {\n        let m = l.indexOf(v, k)\n        if (k == m) {\n          break\n        }\n        k = m\n      }\n      if (k == -1) {\n        result = true\n      }\n    }\n  })\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n\tlet cars = []\n\tlet collision = 0\n\tfor(let i=0; i<=n; i++){\n\t\tcars.push(new Car(0,0,0))\n\t}\n\tcars.forEach((car)=>{\n\t\tcars.forEach((otherCar)=>{\n\t\t\tif(car.x>otherCar.x && car.x<otherCar.x+otherCar.width)\n\t\t\t\tcollision+=1\n\t\t})\n\t})\n\treturn collision\n}\n\nconst carRaceCollision2 = (n) => {\n\tlet cars = []\n\tlet collision = 0\n\tfor(let i=0; i<=n; i++){\n\t\tcars.push(new Car(0,0,0))\n\t}\n\tcars.forEach((car)=>{\n\t\tcars.forEach((otherCar)=>{\n\t\t\tif(car.y>otherCar.y && car.y<otherCar.y+otherCar.height)\n\t\t\t\tcollision+=1\n\t\t})\n\t})\n\treturn collision\n}\n\n\n\n\n\n\n\n\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const len = l.length\n  const result = new Array(len + 1)\n  for (let i = 0; i < len; i += 1) {\n    result[i] = l[i]\n  }\n  result[len] = 1\n  return result\n}\n\nexport default incrList\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    l = l.sort();\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            if (i === l.length - 1) {\n                return true;\n            } else if (i < l.length - 1 && l[i + 1] === l[i]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nexport default pairsSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers will be less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers will be less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let z = x, b = base;\n  while (b < z.toString().length) {\n    z = z.toString().charAt(z.toString().length - b - 1);\n    b++;\n  }\n  return z.toString();\n};\n\nmodule.exports = changeBase;<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": false, "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (Math.sqrt(h * (h - a) * (a + h)) / 2);\n};\n\nconst triangleArea = (a, h) => {\n  return (Math.sqrt(h * (h - a) * (a + h)) / 2);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib4 number sequence.   will Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib4 number sequence.   will Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    let a = 0, b = 1, c = 0, d = 1;\n    return n > 0? fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) : n === 0? 0 : c;\n}\n\nconsole.log(fib4(3));\nconsole.log(fib4(5));\nconsole.log(fib4(8));\nconsole.log(fib4(15));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const n = l.length;\n  if (n === 0) {\n    throw new Error('list is empty');\n  }\n  let half = n / 2;\n  let left = 0;\n  let right = half - 1;\n  let m;\n  while (left < right) {\n    m = (left + right) / 2;\n    if (l[m] < l[half]) {\n      left = m + 1;\n    } else {\n      right = m;\n    }\n  }\n  return l[half];\n};\n\nexport default median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let textLen = text.length;\n    let index = 0;\n    let j = 0;\n    let result = true;\n    while (index < textLen) {\n        if (text[index]!== text[textLen - index - 1]) {\n            result = false;\n            break;\n        }\n        index++;\n    }\n    return result;\n};\n\nexport default isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  n = n % p\n  while (n > 0) {\n    n = n - p\n  }\n  return n\n}\n\n/*\n  >>> ispow(3, 3)\n  True\n  >>> ispow(3, 4)\n  False\n  >>> ispow(3, 3, 3)\n  True\n  >>> ispow(3, 4, 3)\n  False\n  >>> ispow(3, 3, 5)\n  False\n  */\nconst ispow = (n, p, mod) => {\n  return mod === n && mod % p === 0\n}\n\n/*\n  >>> modp(0, 5)\n  0\n  >>> modp(1, 5)\n  1\n  >>> modp(2, 5)\n  2\n  >>> modp(3, 5)\n  3\n  >>> modp(4, 5)\n  4\n  >>> modp(5, 5)\n  0\n  */\nconst modp2 = (n, p) => {\n  if (n > 0) {\n    return modp(n, p)\n  } else {\n    return 0\n  }\n}\n\n/*\n  >>> ispow(0, 5)\n  True\n  >>> ispow(1, 5)\n  True\n  >>> ispow(2, 5)\n  True\n  >>> ispow(3, 5)\n  True\n  >>> ispow(4, 5)\n  True\n  >>> ispow(5, 5)\n  True\n  >>> ispow(6, 5)\n  False\n  >>> ispow(7, 5)\n  False\n  */\nconst ispow2 = (n, p) => {\n  if (n > 0) {\n    return ispow(n, p)\n  } else {\n    return false\n  }\n}\n\n/*\n  >>> ispow(1, 101)\n  True\n  >>> ispow(2, 101)\n  True\n  >>> ispow(3, 101)\n  True\n  >>> ispow(4, 101)\n  True\n  >>> ispow(5, 101)\n  True\n  >>> ispow(6, 101)\n  False\n  >>> ispow(7, 101)\n  False\n  */\nconst ispow3 = (n, p) => {\n  if (n > 0) {\n    return ispow(n, p)\n  } else {\n    return false\n  }\n}\n\n/*\n  >>> ispow(1, 101, 101)\n  True\n  >>> ispow(2, 101, 101)\n  True\n  >>> ispow(3, 101, 101)\n  True\n  >>> ispow(4, 101, 101)\n  True\n  >>> ispow(5, 101, 101)\n  True\n  >>> ispow(6, 101, 101)\n  False\n  >>> ispow(7, 101, 101)\n  False\n  */\nconst ispow4 = (n, p, mod) => {\n  if (mod === n && mod % p === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  >>> ispow(1, 101, 101, 101)\n  True\n  >>> ispow(2, 101, 101, 101)\n  True\n  >>> ispow(3, 101, 101, 101)\n  True\n  >>> ispow(4, 101, 101, 101)\n  True\n  >>> ispow(5, 101, 101, 101)\n  True\n  >>> ispow(6, 101, 101, 101)\n  False\n  >>> ispow(7, 101, 101, 101)\n  False\n  */\nconst ispow5 = (n, p, mod) => {\n  if (mod === n && mod % p === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  >>> ispow(1, 101, 101, 101, 101)\n  True\n  >>> ispow(2, 101, 101, 101, 101)\n  True\n  >>> ispow(3, 101, 101, 101, 101)\n  True\n  >>> ispow(4, 101, 101, 101, 101)\n  True\n  >>> ispow(5, 101, 101, 101, 101)\n  True\n  >>> ispow(6, 101, 101, 101, 101)\n  False\n  >>> ispow(7, 101, 101, 101, 101)\n  False\n  */\nconst ispow6 = (n, p, mod) => {\n  if (mod === n && mod % p === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  >>> ispow(1, 101, 101, 101, 101, 101)\n  True\n  >>> ispow(2, 101, 101, 101, 101, 101)\n  True\n  >>> ispow(3, 101, 101, 101, 101, 101)\n  True\n  >>> ispow(4, 101, 101, 101, 101, 101)\n  True\n  >>> ispow(5, 101, 101, 101, 101, 101)\n  True\n  >>> ispow(6, 101, 101, 101, 101, 101)\n  False\n  >>> ispow(7, 101, 101, 101, 101, 101)\n  False\n  */\nconst ispow7 = (n, p, mod) => {\n  if (mod === n && mod % p === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  >>> ispow(1, 101, 101, 101, 101, 101, 101)\n  True\n  >>> ispow(2, 101, 101, 101, 101, 101, 101)\n  True\n  >>> ispow(3, 101, 101, 101, 101, 101, 101)\n  True\n  >>> ispow(4, 101, 101, 101, 101, 101, 101)"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns will encode string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns will encode string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n  return s.split(\"\").map(ch=> \n    ( ( (ch.charCodeAt(0)- \" a\".charCodeAt(0))- 5 )% 26)+\" a\"\n  ).join(\"\");\n} \n\n/* \n   encodes string with encode_shift and returns string. \n  */ \n const encodeShift2= (s)=>{\n  return encodeShift(s);\n} \n\n/* \n   decodes string with decode_shift and returns string. \n  */ \n const decodeShift2= (s)=>{\n  return decodeShift(s);\n} \n\n/* \n   encodes string with encode_shift and returns string. \n  */ \n const encodeShift3= (s)=>{\n  return encodeShift(s);\n} \n\n/* \n   decodes string with decode_shift and returns string. \n  */ \n const decodeShift3= (s)=>{\n  return decodeShift(s);\n} \n\n/* \n   encodes string with encode_shift and returns string. \n  */ \n const encodeShift4= (s)=>{\n  return encodeShift(s);\n} \n\n/* \n   decodes string with decode_shift and returns string. \n  */ \n const decodeShift4= (s)=>{\n  return decodeShift(s);\n} \n\n/* \n   encodes string with encode_shift and returns string. \n  */ \n const encodeShift5= (s)=>{\n  return encodeShift(s);\n} \n\n/* \n   decodes string with decode_shift and returns string. \n  */ \n const decodeShift5= (s)=>{\n  return decodeShift(s);\n} \n\n/* \n   encodes string with encode_shift and returns string. \n  */ \n const encodeShift6= (s)=>{\n  return encodeShift(s);\n} \n\n/* \n   decodes string with decode_shift and returns string. \n  */ \n const decodeShift6= (s)=>{\n  return decodeShift(s);\n} \n\n/* \n   encodes string with encode_shift and returns string. \n  */ \n const encodeShift7= (s)=>{\n  return encodeShift(s);\n} \n\n/* \n   decodes string with decode_shift and returns string. \n  */ \n const decodeShift7= (s)=>{\n  return decodeShift(s);\n} \n\n/* \n   encodes string with encode_shift and returns string. \n  */ \n const encodeShift8= (s)=>{\n  return encodeShift(s);\n} \n\n/* \n   decodes string with decode_shift and returns string. \n  */ \n const decodeShift8= (s)=>{\n  return decodeShift(s);\n} \n\n/* \n   encodes string with encode_shift and returns string. \n  */ \n const encodeShift9= (s)=>{\n  return encodeShift(s);\n} \n\n/* \n   decodes string with decode_shift and returns string. \n  */ \n const decodeShift9= (s)=>{\n  return decodeShift(s);\n} \n\n/* \n   encodes string with encode_shift and returns string. \n  */ \n const encodeShift10= (s)=>{\n  return encodeShift(s);\n} \n\n/* \n   decodes string with decode_shift and returns string. \n  */ \n const decodeShift10= (s)=>{\n  return decodeShift(s);\n} \n\n/* \n   encodes string with encode_shift and returns string. \n  */ \n const encodeShift11= (s)=>{\n  return encodeShift(s);\n} \n\n/* \n   decodes string with decode_shift and returns string. \n  */ \n const decodeShift11= (s)=>{\n  return decodeShift(s);\n} \n\n/* \n   encodes string with encode_shift and returns string. \n  */ \n const encodeShift12= (s)=>{\n  return encodeShift(s);\n} \n\n/* \n   decodes string with decode_shift and returns string. \n  */ \n const decodeShift12= (s)=>{\n  return decodeShift(s);\n} \n\n/* \n   encodes string with encode_shift and returns string. \n  */ \n const encodeShift13= (s)=>{\n  return encodeShift(s);\n} \n\n/* \n   decodes string with decode_shift and returns string. \n  */ \n const decodeShift13= (s)=>{\n  return decodeShift(s);\n} \n\n/* \n   encodes string with encode_shift and returns string. \n  */ \n const encodeShift14= (s)=>{\n  return encodeShift(s);\n} \n\n/* \n   decodes string with decode_shift and returns string. \n  */ \n const decodeShift14= (s)=>{\n  return decodeShift(s);\n} \n\n/* \n   encodes string with encode_shift and returns string. \n  */ \n const encodeShift15= (s)=>{\n  return encodeShift(s);\n} \n\n/* \n   decodes string with decode_shift and returns string. \n  */ \n const decodeShift15= (s)=>{\n  return decodeShift(s);\n} \n\n/* \n   encodes string with encode_shift and returns string. \n  */ \n const encodeShift16= (s)=>{\n  return encodeShift(s);\n} \n\n/* \n   decodes string with decode_shift and returns string. \n  */ \n const decodeShift16= (s)=>{\n  return decodeShift(s);\n} \n\n\n/* \n   encodes string with encode_shift and returns string. \n  */ \n const encodeShift17="}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = 'aeiouAEIOU'\n  return text.toLowerCase().replace(new RegExp(vowels, 'g'), '')\n}\n\n/*\n  convertToUppercase will be a function that will take string and returns string in upper case.\n  >>> convertToUppercase('')\n  ''\n  >>> convertToUppercase('abcdef')\n  'ABCDEF'\n  >>> convertToUppercase('abcdefg')\n  'ABCDEFG'\n  >>> convertToUppercase('aBcDeF')\n  'ABCDEF'\n  >>> convertToUppercase('AaaBbb')\n  'AaaaBBB'\n  >>> convertToUppercase('aBcDeFg')\n  'ABCDEFG'\n  */\nconst convertToUppercase = (text) => {\n  return text.toUpperCase()\n}\n\n/*\n  convertToLowercase will be a function that will take string and returns string in lower case.\n  >>> convertToLowercase('')\n  ''\n  >>> convertToLowercase('abcdef')\n  'abcdef'\n  >>> convertToLowercase('ABCDEF')\n  'abcdef'\n  >>> convertToLowercase('aBcDeF')\n  'abcdef'\n  >>> convertToLowercase('AaaBbb')\n  'aaaabbb'\n  >>> convertToLowercase('aBcDeFg')\n  'abcdefg'\n  */\nconst convertToLowercase = (text) => {\n  return text.toLowerCase()\n}\n\n/*\n  convertToTitlecase will be a function that will take string and returns string in title case.\n  >>> convertToTitlecase('')\n  ''\n  >>> convertToTitlecase('abcdef')\n  'AbcDef'\n  >>> convertToTitlecase('abcdefg')\n  'AbcDefG'\n  >>> convertToTitlecase('aBcDeF')\n  'AbcDef'\n  >>> convertToTitlecase('AaaBbb')\n  'AaaBBB'\n  >>> convertToTitlecase('aBcDeFg')\n  'AbcDefG'\n  */\nconst convertToTitlecase = (text) => {\n  return text.toUpperCase().replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n  })\n}\n\nmodule.exports = {\n  convertToTitlecase,\n  convertToLowercase,\n  convertToUppercase,\n  removeVowels,\n  convertToTitlecase,\n  convertToLowercase,\n  convertToUppercase\n}\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l will be below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l will be below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const i = 0;\n  while (i < l.length) {\n    if (l[i] > t) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  Test case:\n    #1: belowThreshold([1, 2, 3], 3) = false\n    #2: belowThreshold([1, 2, 3], 4) = true\n    #3: belowThreshold([1, 2, 3], 2) = true\n  */\nconst test = () => {\n  const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n  const [t, l] = [3, nums];\n  console.log(`belowThreshold({${nums}, ${t}}) = ${belowThreshold(l, t)}`);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/**\n * Calculate the average of two numbers.\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst avg = (x, y) => {\n  return (x + y) / 2;\n};\n\n/**\n * Calculate the square root of a number.\n * @param {number} x\n * @return {number}\n */\nconst sqrt = x => {\n  return Math.sqrt(x);\n};\n\n/**\n * Calculate the average of two numbers.\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst sub = (x, y) => {\n  return x - y;\n};\n\n/**\n * Calculate the average of two numbers.\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst div = (x, y) => {\n  return x / y;\n};\n\n/**\n * Calculate the average of two numbers.\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst mul = (x, y) => {\n  return x * y;\n};\n\n/**\n * Calculate the average of two numbers.\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst mod = (x, y) => {\n  return x % y;\n};\n\n/**\n * Calculate the average of two numbers.\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst pwr = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/**\n * Calculate the average of two numbers.\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst log = (x, y) => {\n  return Math.log(x) / Math.log(y);\n};\n\n/**\n * Calculate the average of two numbers.\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst pow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/**\n * Calculate the average of two numbers.\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst acos = (x, y) => {\n  return Math.acos(x / y);\n};\n\n/**\n * Calculate the average of two numbers.\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst cos = (x, y) => {\n  return Math.cos(x) * y + Math.sin(x) * x;\n};\n\n/**\n * Calculate the average of two numbers.\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst sin = (x, y) => {\n  return Math.cos(x) * x - Math.sin(x) * y;\n};\n\n/**\n * Calculate the average of two numbers.\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst tan = (x, y) => {\n  return Math.tan(x) * y + Math.cos(x) * Math.pow(y, 2);\n};\n\nexport { add, avg, sqrt, sub, div, mul, mod, pwr, log, pow, acos, cos, sin, tan };\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words will have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words will have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const a = s0.split('')\n    const b = s1.split('')\n    return a.every((c, i) => b[i] === c)\n}\n\nconst isOdd = (x) => x % 2 === 1\n\nconst make = (f, a, b) => f(a, b)\n\nconst f = (a, b) => {\n    if (a === b) {\n        return a\n    }\n    if (isOdd(a) && isOdd(b)) {\n        return 'odd'\n    }\n    if (isOdd(a) &&!isOdd(b)) {\n        return 'even'\n    }\n    if (!isOdd(a) && isOdd(b)) {\n        return 'even'\n    }\n    return 'even'\n}\n\n// console.log(f(2, 2))\n// console.log(f(1, 2))\n// console.log(f(2, 1))\n\n// console.log(make(f, 1, 2))\n// console.log(make(f, 2, 1))\n// console.log(make(f, 1, 1))\n\n// console.log(make(f, 2, 2))\n// console.log(make(f, 2, 3))\n// console.log(make(f, 3, 3))\n// console.log(make(f, 3, 2))\n// console.log(make(f, 3, 2))\n\nconst isEven = (x) => x % 2 === 0\n\nconst even = (x, y) => x === y && isEven(x)\n\n// console.log(make(isEven, 2, 2))\n// console.log(make(isEven, 2, 3))\n// console.log(make(isEven, 3, 3))\n// console.log(make(isEven, 3, 2))\n// console.log(make(isEven, 3, 2))\n\n// console.log(make(even, 2, 2))\n// console.log(make(even, 2, 3))\n// console.log(make(even, 3, 3))\n// console.log(make(even, 3, 2))\n// console.log(make(even, 3, 2))\n\nconst isOdd = (x) => x % 2 === 1\n\nconst odd = (x, y) => x === y && isOdd(x)\n\n// console.log(make(odd, 2, 2))\n// console.log(make(odd, 2, 3))\n// console.log(make(odd, 3, 3))\n// console.log(make(odd, 3, 2))\n// console.log(make(odd, 3, 2))\n\n// console.log(make(odd, 2, 2))\n// console.log(make(odd, 2, 3))\n// console.log(make(odd, 3, 3))\n// console.log(make(odd, 3, 2))\n// console.log(make(odd, 3, 2))\n\nconst add = (x, y) => x + y\n\nconst add2 = (x, y) => x + y + x\n\nconst mul = (x, y) => x * y\n\nconst div = (x, y) => x / y\n\n// console.log(add2(2, 2))\n// console.log(add2(3, 2))\n// console.log(add2(2, 3))\n// console.log(add2(3, 3))\n// console.log(add2(2, 2))\n// console.log(add2(3, 2))\n// console.log(add2(3, 3))\n// console.log(add2(2, 2))\n// console.log(add2(3, 2))\n// console.log(add2(3, 3))\n// console.log(add2(2, 3))\n// console.log(add2(3, 3))\n// console.log(add2(2, 2))\n// console.log(add2(3, 2))\n// console.log(add2(3, 3))\n// console.log(add2(2, 3))\n// console.log(add2(3, 3))\n// console.log(add2(2, 2))\n// console.log(add2(3, 2))\n// console.log(add2(3, 3))\n// console.log(add2(2, 3))\n// console.log(add2(3, 3))\n// console.log(add2(2, 2))\n// console.log(add2(3, 2))\n// console.log(add2(3, 3))\n// console.log(add2(2, 3))\n// console.log(add2(3, 3))\n// console.log(add2(2, 2))\n// console.log(add2(3, 2))\n// console.log(add2(3, 3))\n// console.log(add2(2, 3))\n// console.log(add2(3, 3))\n// console.log(add2(2, 2))\n// console.log(add2(3, 2))\n// console.log(add2(3, 3))\n// console.log(add2(2, 3))\n// console.log(add2(3, 3))\n// console.log(add2(2, 2))\n// console.log(add2(3, 2))\n// console.log(add2(3, 3))\n// console.log(add2(2, 3))\n// console.log(add2(3, 3))\n// console.log(add2(2, 2))\n// console.log(add2(3, 2))\n// console.log(add2(3, 3))\n// console.log(add2(2, 3))\n"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  return fib(n - 1) + fib(n - 2)\n}\n\nexport default fib\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets will be a string of\" <\" and\">\". \n   return false if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets will be a string of\" <\" and\">\". \n   return false if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBracket = brackets[0];\n  const closingBracket = brackets[brackets.length - 1];\n\n  const openingCount = brackets.filter((character) => character === openingBracket).length;\n  const closingCount = brackets.filter((character) => character === closingBracket).length;\n\n  return openingCount === closingCount;\n};\n\n/*\n  >>> findBrackets(\"<>\")\n  [0, 1, 2]\n  >>> findBrackets(\"<\")\n  [0]\n  >>> findBrackets(\"\")\n  []\n  >>> findBrackets(\"<>\")\n  [0, 1, 2]\n  >>> findBrackets(\"<><>\")\n  [0, 1, 2]\n  >>> findBrackets(\"<>\")\n  [0, 1]\n  >>> findBrackets(\"<\")\n  [0]\n  >>> findBrackets(\"<>\")\n  [0, 1]\n  >>> findBrackets(\"<>\")\n  [0, 1]\n  >>> findBrackets(\"<>\")\n  [0, 1]\n  >>> findBrackets(\"<><><><><><><>\")\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541"}
{"task_id": "JavaScript/57", "prompt": "/*Return true will be list elements will be monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true will be list elements will be monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (!l) return false\n  let previous = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < previous) return false\n    previous = l[i]\n  }\n  return true\n}\n\n/**\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst lex = (l) => {\n  let current = l[0]\n  let previous = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > previous) return false\n    previous = l[i]\n    if (l[i] < current) current = l[i]\n  }\n  return true\n}\n\n/**\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst bin = (l) => {\n  let current = l[0]\n  let previous = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > previous) return false\n    previous = l[i]\n    if (l[i] < current) current = l[i]\n  }\n  return true\n}\n\nmodule.exports = {\n  monotonic,\n  lex,\n  bin\n}\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return will sort unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return will sort unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set(l1);\n  const set2 = new Set(l2);\n\n  return [...set2,...set];\n};\n\n/*\n  Return a copy of an array with elements sorted in ascending order.\n  >>> sort(1, 2, 3, 4)\n  [1, 2, 3, 4]\n  >>> sort([3, 2, 1])\n  [1, 2, 3]\n  >>> sort([1, 3, 2])\n  [1, 2, 3]\n  >>> sort([2, 3, 1])\n  [1, 2, 3]\n  >>> sort([1, 3, 2])\n  [1, 2, 3]\n  >>> sort([2, 1, 3])\n  [1, 2, 3]\n  >>> sort([1, 2, 3, 4])\n  [1, 2, 3, 4]\n  >>> sort([1, 2, 2, 4])\n  [1, 2, 4]\n  >>> sort([2, 3, 1, 4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sort([1, 3, 3, 1, 1, 2, 2, 3])\n  [1, 1, 2, 2, 3, 3]\n  >>> sort([1, 3, 2, 3, 1, 3, 2])\n  [1, 2, 3, 3, 1, 2]\n  >>> sort([1, 2, 2, 3, 4, 5, 6, 7])\n  [1, 2, 2, 3, 4, 5, 6, 7]\n  >>> sort([1, 3, 2, 4, 1, 3, 2])\n  [1, 2, 3, 4, 1, 3, 2]\n  >>> sort([1, 2, 2, 2, 3, 4, 5, 6])\n  [1, 2, 2, 3, 4, 5, 6]\n  >>> sort([1, 3, 2, 4, 1, 3, 2, 3])\n  [1, 2, 2, 3, 3, 4, 1, 2]\n  >>> sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n  >>> sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435,"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  const factors = largestPrimeFactors(n);\n  return factors.reduce((a, b) => a * b, 1);\n};\n\nmodule.exports = largestPrimeFactor;\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let total = 0;\n  for (let i = 1; i <= n; i++) {\n    total += i;\n  }\n  return total;\n};\n\nconsole.log(sumToN(5));\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets will be a string of\" (\" and\")\". \n   return true if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets will be a string of\" (\" and\")\". \n   return true if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  return new Set(brackets).every(openingBracket => {\n    return new Set(brackets).includes(closingBracket = closingBracket = openingBracket + \")\") &&\n      new Set(brackets).includes(closingBracket = openingBracket + \"(\");\n  }) &&\n    new Set(brackets).every(openingBracket => {\n      return new Set(brackets).includes(closingBracket = openingBracket + \")\") &&\n        new Set(brackets).includes(closingBracket = openingBracket + \"(\");\n    });\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let x = xs[0];\n  let sum = xs[1];\n  let p = xs[2];\n  let p2 = xs[3];\n  let p3 = xs[4];\n  let p4 = xs[5];\n  let p5 = xs[6];\n  let p6 = xs[7];\n  let p7 = xs[8];\n  let p8 = xs[9];\n  let p9 = xs[10];\n  let p10 = xs[11];\n  let p11 = xs[12];\n  let p12 = xs[13];\n  let p13 = xs[14];\n  let p14 = xs[15];\n  let p15 = xs[16];\n  let p16 = xs[17];\n  let p17 = xs[18];\n  let p18 = xs[19];\n  let p19 = xs[20];\n  let p20 = xs[21];\n  let p21 = xs[22];\n  let p22 = xs[23];\n  let p23 = xs[24];\n  let p24 = xs[25];\n  let p25 = xs[26];\n  let p26 = xs[27];\n  let p27 = xs[28];\n  let p28 = xs[29];\n  let p29 = xs[30];\n  let p30 = xs[31];\n  let p31 = xs[32];\n  let p32 = xs[33];\n  let p33 = xs[34];\n  let p34 = xs[35];\n  let p35 = xs[36];\n  let p36 = xs[37];\n  let p37 = xs[38];\n  let p38 = xs[39];\n  let p39 = xs[40];\n  let p40 = xs[41];\n  let p41 = xs[42];\n  let p42 = xs[43];\n  let p43 = xs[44];\n  let p44 = xs[45];\n  let p45 = xs[46];\n  let p46 = xs[47];\n  let p47 = xs[48];\n  let p48 = xs[49];\n  let p49 = xs[50];\n  let p50 = xs[51];\n  let p51 = xs[52];\n  let p52 = xs[53];\n  let p53 = xs[54];\n  let p54 = xs[55];\n  let p55 = xs[56];\n  let p56 = xs[57];\n  let p57 = xs[58];\n  let p58 = xs[59];\n  let p59 = xs[60];\n  let p60 = xs[61];\n  let p61 = xs[62];\n  let p62 = xs[63];\n  let p63 = xs[64];\n  let p64 = xs[65];\n  let p65 = xs[66];\n  let p66 = xs[67];\n  let p67 = xs[68];\n  let p68 = xs[69];\n  let p69 = xs[70];\n  let p70 = xs[71];\n  let p71 = xs[72];\n  let p72 = xs[73];\n  let p73 = xs[74];\n  let p74 = xs[75];\n  let p75 = xs[76];\n  let p76 = xs[77];\n  let p77 = xs[78];\n  let p78 = xs[79];\n  let p79 = xs[80];\n  let p80 = xs[81];\n  let p81 = xs[82];\n  let p82 = xs[83];\n  let p83 = xs[84];\n  let p84 = xs[85];\n  let p85 = xs[86];\n  let p86 = xs[87];\n  let p87 = xs[88];\n  let p88 = xs[89];\n  let p89 = xs[90];\n  let p90 = xs[91];\n  let p91 = xs[92];\n  let p92 = xs[93];\n  let p93 = xs[94];\n  let p94 = xs[95];\n  let p95 = xs[96];\n  let p96 = xs[97];\n  let p97 = xs[98];\n  let p98 = xs[99];\n  let p99 = xs[100];\n  let p100 = xs[101];\n  let p101 = xs[102];\n  let p102 = xs[103];\n  let p103 = xs[104];\n  let p104 = xs[105];\n  let p105 = xs[106];\n  let p106 = xs[107];\n  let p107 = xs[108];\n  let p108 = xs[109];\n  let p109 = xs[110];\n  let p110 = xs[111];\n  let p111 = xs[112];\n  let p112 = xs[113];\n  let p113 = xs[114];\n  let p114 = xs[115];\n  let p115 = xs[116];\n  let p116 = xs[117];\n  let p117 = xs[118];\n  let p118 = xs[119];\n  let p119 = xs[120];\n  let p120 = xs[121];\n  let p121 = xs[122];\n  let p122 = xs[123];\n  let p123 = xs[124];\n  let p124 = xs[125];\n  let p125 = xs[126];\n  let p126 = xs[127];\n  let p127 = xs[128];\n  let p128 = xs[129];"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fibfib_rec = (a,b) => {\n    if (n===1) {\n      return a;\n    } else if (n===2) {\n      return b;\n    } else {\n      return fibfib_rec(a,b) + fibfib_rec(a,b);\n    }\n  };\n  return fibfib_rec(0,1);\n};\n\n/*The fibfib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib_seq = (n) => {\n  let fibfib_rec_seq = (a,b) => {\n    if (n===1) {\n      return a;\n    } else if (n===2) {\n      return b;\n    } else {\n      return fibfib_seq(a) + fibfib_seq(b);\n    }\n  };\n  return fibfib_rec_seq(0,1);\n};\n\n/*The fibfib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib_seq_seq = (n) => {\n  let fibfib_rec_seq_seq = (a,b) => {\n    if (n===1) {\n      return a;\n    } else if (n===2) {\n      return b;\n    } else {\n      return fibfib_seq_seq(a) + fibfib_seq_seq(b);\n    }\n  };\n  return fibfib_rec_seq_seq(0,1);\n};\n\n/*The fibfib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib_seq_seq_seq = (n) => {\n  let fibfib_rec_seq_seq_seq = (a,b) => {\n    if (n===1) {\n      return a;\n    } else if (n===2) {\n      return b;\n    } else {\n      return fibfib_seq_seq_seq(a) + fibfib_seq_seq_seq(b);\n    }\n  };\n  return fibfib_rec_seq_seq_seq(0,1);\n};\n\n/*The fibfib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib_seq_seq_seq_seq = (n) => {\n  let fibfib_rec_seq_seq_seq_seq = (a,b) => {\n    if (n===1) {\n      return a;\n    } else if (n===2) {\n      return b;\n    } else {\n      return fibfib_seq_seq_seq_seq(a) + fibfib_seq_seq_seq_seq(b);\n    }\n  };\n  return fibfib_rec_seq_seq_seq_seq(0,1);\n};\n\nconsole.log(\"fibfib(0) ==\", fibfib(0));\nconsole.log(\"fibfib(1) ==\", fibfib(1));\nconsole.log(\"fibfib(2) ==\", fibfib(2));\nconsole.log(\"fibfib(3) ==\", fibfib(3));\nconsole.log(\"fibfib(4) ==\", fibfib(4));\nconsole.log(\"fibfib(5) ==\","}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which will take a string representing \n   a word as input and will return the number of vowels in the string. \n   Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which will take a string representing \n   a word as input and will return the number of vowels in the string. \n   Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowelMap = {\n    a: 1,\n    e: 1,\n    i: 1,\n    o: 1,\n    u: 1,\n    y: 1,\n  }\n  let len = 0\n  let i = 0\n  while (i < s.length) {\n    if (s[i] in vowelMap) {\n      len += 1\n    }\n    i++\n  }\n  return len\n}\n\nexport default vowelsCount\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits will reverse.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits will reverse.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (shift === 0) return x\n  let res = \"\"\n  for (let i = x.length - 1; i >= 0; i--) {\n    res = res + x[i + shift]\n  }\n  return res\n}\n\n/*\n  Given two numbers, x and y, return their sum.\n  If x > y, then the sum is greater than x+y.\n  If x < y, then the sum is less than x+y.\n  If x == y, then the sum is equal to x.\n  >>> add(2, 2)\n  4\n  >>> add(3, 4)\n  7\n  >>> add(2, 3)\n  5\n  */\nconst add = (x, y) => {\n  if (x > y) {\n    return x + y\n  } else if (x < y) {\n    return x + y\n  } else {\n    return x\n  }\n}\n\n/*\n  Given two numbers, x and y, return their difference.\n  If x > y, then the difference is greater than x-y.\n  If x < y, then the difference is less than x-y.\n  If x == y, then the difference is equal to x.\n  >>> subtract(5, 3)\n  2\n  >>> subtract(2, 2)\n  0\n  >>> subtract(3, 4)\n  1\n  */\nconst subtract = (x, y) => {\n  if (x > y) {\n    return x - y\n  } else if (x < y) {\n    return x - y\n  } else {\n    return x\n  }\n}\n\n/*\n  Given two numbers, x and y, return their product.\n  If x > y, then the product is greater than x*y.\n  If x < y, then the product is less than x*y.\n  If x == y, then the product is equal to x.\n  >>> multiply(3, 4)\n  12\n  >>> multiply(3, 3)\n  9\n  >>> multiply(4, 4)\n  16\n  */\nconst multiply = (x, y) => {\n  if (x > y) {\n    return x * y\n  } else if (x < y) {\n    return x * y\n  } else {\n    return x\n  }\n}\n\n/*\n  Given two numbers, x and y, return their quotient.\n  If x > y, then the quotient is greater than x/y.\n  If x < y, then the quotient is less than x/y.\n  If x == y, then the quotient is equal to x.\n  >>> divide(12, 4)\n  3\n  >>> divide(12, 3)\n  4\n  >>> divide(12, 6)\n  2\n  */\nconst divide = (x, y) => {\n  if (x > y) {\n    return x / y\n  } else if (x < y) {\n    return x / y\n  } else {\n    return x\n  }\n}\n\nexport { circularShift, add, subtract, multiply, divide }\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const chars = s.split('');\n  return chars.reduce((sum, char) => sum + (char.charCodeAt(0) - 97), 0);\n};\n\nmodule.exports = digitSum;\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be gave a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be gave a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n   let { apples, oranges, mango } = s.split(',').map(Number);\n   let numOfOranges = oranges.length;\n   let numOfApples = apples.length;\n   let numOfMango = mango.length;\n   let total = numOfOranges + numOfApples + numOfMango;\n   let totalFruits = apples.concat(oranges).concat(mango);\n   let totalFruits = totalFruits.filter(fruit => fruit!= 0);\n   return total - totalFruits.length;\n }; \n\nconst fruitDistribution = (s, n) => {\n  let { apples, oranges, mango } = s.split(',').map(Number);\n  let numOfOranges = oranges.length;\n  let numOfApples = apples.length;\n  let numOfMango = mango.length;\n  let total = numOfOranges + numOfApples + numOfMango;\n  let totalFruits = apples.concat(oranges).concat(mango);\n  let totalFruits = totalFruits.filter(fruit => fruit!= 0);\n  return total - totalFruits.length;\n};\n\nfruitDistribution(\"5 apples and 6 oranges\", 19)\n// 19-5-6= 8\n\nfruitDistribution(\"0 apples and 1 oranges\", 3)\n// 3-0-1= 2\n\nfruitDistribution(\"2 apples and 3 oranges\", 100)\n// 100-2-3= 95\n\nfruitDistribution(\"100 apples and 1 oranges\", 120)\n// 120-100-1= 19\n\nfruitDistribution(\"0 apples and 0 oranges\", 12)\n// 12-0-0= 12\n\nfruitDistribution(\"2 apples and 3 oranges\", 15)\n// 15-2-3= 11\n\nfruitDistribution(\"5 apples and 1 oranges\", 6)\n// 6-5-1= 1\n\nfruitDistribution(\"100 apples and 2 oranges\", 20)\n// 20-100-2= 18\n\nfruitDistribution(\"0 apples and 2 oranges\", 3)\n// 3-0-2= 2\n\nfruitDistribution(\"0 apples and 0 oranges\", 1)\n// 1-0-0= 1\n\nfruitDistribution(\"0 apples and 0 oranges\", 0)\n// 0-0-0= 0\n\nfruitDistribution(\"2 apples and 3 oranges\", 4)\n// 4-2-3= 2\n\nfruitDistribution(\"3 apples and 3 oranges\", 4)\n// 4-3-3= 0\n\nfruitDistribution(\"2 apples and 0 oranges\", 1)\n// 1-2-0= 1\n\nfruitDistribution(\"2 apples and 0 oranges\", 2)\n// 2-2-0= 0\n\nfruitDistribution(\"1 apples and 2 oranges\", 2)\n// 2-1-2= 1\n\nfruitDistribution(\"1 apples and 0 oranges\", 1)\n// 1-1-0= 1\n\nfruitDistribution(\"0 apples and 2 oranges\", 1)\n// 1-2-1= 0\n\nfruitDistribution(\"2 apples and 1 oranges\", 1)\n// 1-2-1= 0\n\nfruitDistribution(\"2 apples and 0 oranges\", 0)\n// 2-0-0= 0\n\nfruitDistribution(\"0 apples and 1 mango\", 1)\n// 1-0-1= 1\n\nfruitDistribution(\"0 apples and 0 oranges\", 0)\n// 0-0-0= 0\n\nfruitDistribution(\"1 apples and 1 mango\", 1)\n// 1-1-1= 1\n\nfruitDistribution(\"0 apples and 0 oranges\", 0)\n// 0-0-0= 0\n\nfruitDistribution(\"0 apples and 0 mango\", 0)\n// 0-0-0= 0\n\nfruitDistribution(\"0 apples and 1 mango\", 0)\n// 0-1-1= 0\n\nfruitDistribution(\"1 apples and 1 mango\", 1)\n// 1-1-1= 1\n\nfruitDistribution(\"1 apples and 0 mango\", 1)\n// 1-0-1= 1\n\nfruitDistribution(\"0 apples and 0 mango\", 0)\n// 0-0-0= 0\n\nfruitDistribution(\"0 apples and 1 mango\", 0)\n// 0-1-1= 0\n\nfruitDistribution(\"1 apples and 0 mango\", 0)\n// 1-0-1= 0\n\nfruitDistribution(\"1 apples and 1 mango\", 1)\n// 1-1-1= 1\n\nfruitDistribution(\"1 apples and 0 mango\", 1)\n// 1-0-1= 1\n\nfruitDistribution(\"0 apples and 0 mango\", 0)\n// 0-0-0= 0\n\nfruitDistribution(\"1 apples and 1 mango\", 1)\n// 1-1-1= 1\n\nfruitDistribution(\"0 apples and 0 mango\", 0)\n// 0-0-0= 0\n\nfruitDistribution(\"0 apples and 1 mango\", 0)\n// 0-1-1= 0\n\nfruitDistribution(\"0 apples and 1 mango\", 0)\n// 0-1-1= 0\n\nfruitDistribution(\"1 apples and 1 mango\", 1)\n// 1-1-1= 1\n\nfruitDistribution(\"0 apples and 0 mango\", 0)\n// 0-0-0= 0\n\nfruitDistribution(\"0 apples and 1 mango\", 0)\n// 0-0-0= 0\n\nfruitDistribution(\"1 apples and 0 mango\", 0)\n// 1-0-0= 0\n\nfruitDistribution(\"1 apples and 1 mango\", 1)\n// 1-1-1= 1\n\nfruitDistribution(\"0 apples and 0 mango\", 0)\n// 0-0-0= 0\n\nfruitDistribution(\"0 apples and 1 mango\", 0)\n// 0-0-0= 0\n\nfruitDistribution(\"1 apples and 0 mango\","}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" will Give an array representing a branch of a tree that will have non-negative integer nodes \n   your task will be to pluck one of the nodes and return it. \n   The plucked node should will be the node with the smallest even value. \n   If multiple nodes with the same smallest even value will be found return the node that will have smallest index. \n\n   The plucked node should will be return in a list, [smalest_value, its index], \n   If there will be no even values or the will give array will be empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" will Give an array representing a branch of a tree that will have non-negative integer nodes \n   your task will be to pluck one of the nodes and return it. \n   The plucked node should will be the node with the smallest even value. \n   If multiple nodes with the same smallest even value will be found return the node that will have smallest index. \n\n   The plucked node should will be return in a list, [smalest_value, its index], \n   If there will be no even values or the will give array will be empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let left = [];\n  let right = [];\n  let root = arr[0];\n  let n = arr.length;\n  let smallest = null;\n  let index = 0;\n  for (let i = 1; i < n; i++) {\n    if (arr[i] === root) {\n      smallest = arr[i];\n      index = i;\n    } else {\n      if (smallest!== null) {\n        if (smallest < arr[i]) {\n          root = arr[i];\n          index = i;\n        }\n      } else {\n        root = arr[i];\n        index = i;\n      }\n    }\n  }\n  if (smallest!== null) {\n    left = [smallest, index];\n    right = arr.slice(index + 1);\n  }\n  return [left, right];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You will be gave a non-empty list of positive integers. will Return the greatest integer that will be greater than \n   zero, and will have a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer will be the number of times it will appear in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a non-empty list of positive integers. will Return the greatest integer that will be greater than \n   zero, and will have a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer will be the number of times it will appear in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let largest = -1\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i]\n      maxFreq = i + 1\n    }\n    if (lst[i] === largest) {\n      if (i + 1 > maxFreq) {\n        maxFreq = i + 1\n      }\n    }\n  }\n  return largest > 0? largest : -1\n}\n\n/*\n  Let us create a function called searchInList that takes a non-empty list of numbers as a parameter, and \n   returns the largest number in the list that is greater than or equal to 0, and also has a frequency greater than \n   or equal to the value of the number itself.\n  Examples:\n      searchInList([4, 1, 2, 2, 3, 1])) == 4\n      searchInList([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      searchInList([5, 5, 4, 4, 4])) == 4\n  */\nconst searchInList = (lst) => {\n  let largest = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0 && lst[i] > largest) {\n      largest = lst[i]\n    }\n  }\n  return largest\n}\n\n/*\n  Let us create a function called searchInRange that takes a non-empty list of numbers and a range of integers as \n   parameters, and returns the largest number in the list that is greater than or equal to the first number in the range, \n   and also has a frequency greater than or equal to the value of the number itself.\n  Examples:\n      searchInRange([4, 1, 2, 2, 3, 1], [0, 1]) == 2\n      searchInRange([1, 2, 2, 3, 3, 3, 4, 4, 4], [0, 3])) == 3\n      searchInRange([5, 5, 4, 4, 4], [3, 5])) == 5\n  */\nconst searchInRange = (lst, range) => {\n  let largest = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= range[0] && lst[i] > largest) {\n      largest = lst[i]\n    }\n  }\n  return largest\n}\n\n/*\n  Let us create a function called searchInRange that takes a non-empty list of numbers and a range of integers as \n   parameters, and returns the largest number in the list that is greater than or equal to the first number in the range, \n   and also has a frequency greater than or equal to the value of the number itself.\n  Examples:\n      searchInRange([4, 1, 2, 2, 3, 1], [0, 1]) == 4\n      searchInRange([1, 2, 2, 3, 3, 3, 4, 4, 4], [0, 3])) == 4\n      searchInRange([5, 5, 4, 4, 4], [3, 5])) == 5\n  */\nconst searchInRange2 = (lst, range) => {\n  let largest = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= range[0] && lst[i] > largest) {\n      largest = lst[i]\n    }\n  }\n  return largest\n}\n\nconst searchInRange3 = (lst, range) => {\n  let largest = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= range[0] && lst[i] > largest) {\n      largest = lst[i]\n    }\n  }\n  return largest\n}\n\nconst searchInRange4 = (lst, range) => {\n  let largest = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= range[0] && lst[i] > largest) {\n      largest = lst[i]\n    }\n  }\n  return largest\n}\n\nconst searchInRange5 = (lst, range) => {\n  let largest = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= range[0] && lst[i] > largest) {\n      largest = lst[i]\n    }\n  }\n  return largest\n}\n\nconst searchInRange6 = (lst, range) => {\n  let largest = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= range[0] && lst[i] > largest) {\n      largest = lst[i]\n    }\n  }\n  return largest\n}\n\nconst searchInRange7 = (lst, range) => {\n  let largest = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= range[0] && lst[i] > largest) {\n      largest = lst[i]\n    }\n  }\n  return largest\n}\n\nconst searchInRange8 = (lst, range) => {\n  let largest = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= range[0] && lst[i] > largest) {\n      largest = lst[i]\n    }\n  }\n  return largest\n}\n\nconst searchIn"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, will be when you will start with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, will be when you will start with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let firstIndex = 0;\n  let secondIndex = lst.length - 1;\n  let pivot = lst[firstIndex];\n  let temp = [];\n  let tempIndex = 0;\n  while(firstIndex < secondIndex) {\n    if (lst[secondIndex] < pivot) {\n      swap(lst, temp, secondIndex, firstIndex);\n      swap(temp, lst, firstIndex, secondIndex);\n      firstIndex++;\n    }\n    secondIndex--;\n  }\n  if (firstIndex == secondIndex) {\n      swap(lst, temp, firstIndex, secondIndex);\n      swap(temp, lst, firstIndex, secondIndex);\n  }\n  return lst.concat(temp);\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if(a === 0 || b === 0 || c === 0) return -1;\n  const sum = a + b + c;\n  if(sum > c) return -1;\n  return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let isPal = q.every((x) => x.toString() === q.reverse().toString());\n  let sum = q.reduce((acc, x) => acc + x, 0);\n  return isPal && sum <= w;\n};\n\nconst test = [\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2,"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n\n  let last = newArr.pop();\n  let current = newArr.pop();\n  let len = newArr.length;\n  while (current!== last) {\n    last = current;\n    current = newArr.pop();\n    len -= 1;\n  }\n  return len;\n};\n\nconsole.log(smallestChange([1, 2, 3, 2, 1])); // 0\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1])); // 1\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2])); // 4\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2, 3])); // 7\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2, 3, 4])); // 12\nconsole.log(smallestChange([1, 2, 3, 4, 5, 4, 3, 2, 1])); // 10\nconsole.log(smallestChange([1, 2, 3, 4, 5, 4, 3, 2, 1, 5])); // 16\nconsole.log(smallestChange([1, 2, 3, 4, 5, 4, 3, 2, 1, 5, 6])); // 20\nconsole.log(smallestChange([1, 2, 3, 4, 5, 4, 3, 2, 1, 5, 6, 7])); // 23\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if(lst1.length === 0 && lst2.length === 0) return lst1\n  if(lst1.length === 0) return lst2\n  if(lst2.length === 0) return lst1\n  let count = 0\n  let i = 0\n  let j = 0\n  while(i < lst1.length && j < lst2.length){\n    if(lst1[i].length === lst2[j].length){\n      count += lst1[i].length\n      i++\n      j++\n    } else if(lst1[i].length > lst2[j].length){\n      j++\n    } else {\n      i++\n    }\n  }\n  return lst1[i:]\n}\n\n/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch2 = (lst1, lst2) => {\n  if(lst1.length === 0 && lst2.length === 0) return lst1\n  if(lst1.length === 0) return lst2\n  if(lst2.length === 0) return lst1\n  let count = 0\n  let i = 0\n  let j = 0\n  while(i < lst1.length && j < lst2.length){\n    if(lst1[i].length === lst2[j].length){\n      count += lst1[i].length\n      i++\n      j++\n    } else if(lst1[i].length > lst2[j].length){\n      j++\n    } else {\n      i++\n    }\n  }\n  return lst2[j:]\n}\n\nconst test = [\n  [],\n  ['hi', 'admin'],\n  ['hi', 'hi', 'admin', 'project'],\n  ['4'],\n  ['1', '2', '3', '4', '5']\n]\n\nconst test2 = [\n  [],\n  ['hi', 'admin'],\n  ['hi', 'hi', 'admin', 'project'],\n  ['4'],\n  ['1', '2', '3', '4', '5']\n]\n\nconst test3 = [\n  [],\n  ['hi', 'admin'],\n  ['hi', 'hi', 'admin', 'project'],\n  ['4'],\n  ['1', '2', '3', '4', '5']\n]\n\nconsole.log(totalMatch(test, test2))\nconsole.log(totalMatch2(test, test2))\nconsole.log(totalMatch(test, test3))\nconsole.log(totalMatch2(test, test3))\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) return false\n  let isPrime = isPrime(a)\n  let primes = [2, 3, 5]\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] == 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that will return the prime factors of a number. \n  Example:\n  primeFactors(15) == [2, 3, 5]\n  */\nconst primeFactors = (a) => {\n  let primes = []\n  for (let i = 2; i <= a; i++) {\n    if (a % i == 0) {\n      primes.push(i)\n      while (a % i == 0) {\n        a /= i\n      }\n    }\n  }\n  return primes\n}\n\nconst isMultiplyPrime = (a) => {\n  if (a < 100) return false\n  let isPrime = isPrime(a)\n  let primes = [2, 3, 5]\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] == 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n == 2) return true\n  if (n == 3) return true\n  if (n % 2 == 0) return false\n  if (n % 3 == 0) return false\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i == 0) return false\n  }\n  return true\n}\n\n// const isPrime = (n) => {\n//   if (n < 2) return false\n//   if (n == 2) return true\n//   if (n == 3) return true\n//   if (n % 2 == 0) return false\n//   if (n % 3 == 0) return false\n//   for (let i = 5; i * i <= n; i += 6) {\n//     if (n % i == 0) return false\n//   }\n//   return true\n// }\n\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n == 2) return true\n  if (n == 3) return true\n  if (n % 2 == 0) return false\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i == 0) return false\n  }\n  return true\n}\n\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n == 2) return true\n  if (n == 3) return true\n  if (n % 2 == 0) return false\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i == 0) return false\n  }\n  return true\n}\n\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n == 2) return true\n  if (n == 3) return true\n  if (n % 2 == 0) return false\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i == 0) return false\n  }\n  return true\n}\n\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n == 2) return true\n  if (n == 3) return true\n  if (n % 2 == 0) return false\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i == 0) return false\n  }\n  return true\n}\n\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n == 2) return true\n  if (n == 3) return true\n  if (n % 2 == 0) return false\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i == 0) return false\n  }\n  return true\n}\n\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n == 2) return true\n  if (n == 3) return true\n  if (n % 2 == 0) return false\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i == 0) return false\n  }\n  return true\n}\n\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n == 2) return true\n  if (n == 3) return true\n  if (n % 2 == 0) return false\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i == 0) return false\n  }\n  return true\n}\n\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n == 2) return true\n  if (n == 3) return true\n  if (n % 2 == 0) return false\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i == 0) return false\n  }\n  return true\n}\n\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n == 2) return true\n  if (n == 3) return true\n  if (n % 2 == 0) return false\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i == 0) return false\n  }\n  return true\n}\n\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n == 2) return true\n  if (n == 3) return true\n  if (n % 2 == 0) return false\n  for (let i = 5; i * i <= n; i += 6) {\n    "}
{"task_id": "JavaScript/76", "prompt": "/*Your task will be to write a function that will return true if a number x will be a simple \n   power of n and false in other cases. \n   x will be a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task will be to write a function that will return true if a number x will be a simple \n   power of n and false in other cases. \n   x will be a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  return (n % 1 === 0 && x % n === 0)\n}\n\n/*\n  What is the largest prime number that is a \n  power of two times three?\n*/\nconst largestPrimePowerOfTwoTimesThree = (x) => {\n  let l = 1\n  let h = x\n  while (h!== l * l) {\n    l = l * 2\n    h = l * (x - l)\n  }\n  return l\n}\n\n/*\n  What is the largest prime number that is a \n  power of two times five?\n*/\nconst largestPrimePowerOfTwoTimesFive = (x) => {\n  let l = 1\n  let h = x\n  while (h!== l * l) {\n    l = l * 2\n    h = l * (x - l)\n  }\n  return l\n}\n\n/*\n  What is the largest prime number that is a \n  power of two times 7?\n*/\nconst largestPrimePowerOfTwoTimesSeven = (x) => {\n  let l = 1\n  let h = x\n  while (h!== l * l) {\n    l = l * 2\n    h = l * (x - l)\n  }\n  return l\n}\n\n/*\n  What is the largest prime number that is a \n  power of two times 11?\n*/\nconst largestPrimePowerOfTwoTimesEleven = (x) => {\n  let l = 1\n  let h = x\n  while (h!== l * l) {\n    l = l * 2\n    h = l * (x - l)\n  }\n  return l\n}\n\n/*\n  What is the largest prime number that is a \n  power of two times 13?\n*/\nconst largestPrimePowerOfTwoTimesThirteen = (x) => {\n  let l = 1\n  let h = x\n  while (h!== l * l) {\n    l = l * 2\n    h = l * (x - l)\n  }\n  return l\n}\n\n/*\n  What is the largest prime number that is a \n  power of two times 17?\n*/\nconst largestPrimePowerOfTwoTimesSeventeen = (x) => {\n  let l = 1\n  let h = x\n  while (h!== l * l) {\n    l = l * 2\n    h = l * (x - l)\n  }\n  return l\n}\n\n/*\n  What is the largest prime number that is a \n  power of two times 19?\n*/\nconst largestPrimePowerOfTwoTimesNineteen = (x) => {\n  let l = 1\n  let h = x\n  while (h!== l * l) {\n    l = l * 2\n    h = l * (x - l)\n  }\n  return l\n}\n\n/*\n  What is the largest prime number that is a \n  power of two times 23?\n*/\nconst largestPrimePowerOfTwoTimesTwentyThree = (x) => {\n  let l = 1\n  let h = x\n  while (h!== l * l) {\n    l = l * 2\n    h = l * (x - l)\n  }\n  return l\n}\n\n/*\n  What is the largest prime number that is a \n  power of two times 31?\n*/\nconst largestPrimePowerOfTwoTimesThirtyOne = (x) => {\n  let l = 1\n  let h = x\n  while (h!== l * l) {\n    l = l * 2\n    h = l * (x - l)\n  }\n  return l\n}\n\n/*\n  What is the largest prime number that is a \n  power of two times 41?\n*/\nconst largestPrimePowerOfTwoTimesFourOne = (x) => {\n  let l = 1\n  let h = x\n  while (h!== l * l) {\n    l = l * 2\n    h = l * (x - l)\n  }\n  return l\n}\n\n/*\n  What is the largest prime number that is a \n  power of two times 43?\n*/\nconst largestPrimePowerOfTwoTimesFourThree = (x) => {\n  let l = 1\n  let h = x\n  while (h!== l * l) {\n    l = l * 2\n    h = l * (x - l)\n  }\n  return l\n}\n\n/*\n  What is the largest prime number that is a \n  power of two times 47?\n*/\nconst largestPrimePowerOfTwoTimesFourSeven = (x) => {\n  let l = 1\n  let h = x\n  while (h!== l * l) {\n    l = l * 2\n    h = l * (x - l)\n  }\n  return l\n}\n\n/*\n  What is the largest prime number that is a \n  power of two times 53?\n*/\nconst largestPrimePowerOfTwoTimesFiveThree = (x) => {\n  let l = 1\n  let h = x\n  while (h!== l * l) {\n    l = l * 2\n    h = l * (x - l)\n  }\n  return l\n}\n\n/*\n  What is the largest prime number that is a \n  power of two times 59?\n*/\nconst largestPrimePowerOfTwoTimesFiveNine = (x) => {\n  let l = 1\n  let h = x\n  while (h!== l * l) {\n    l = l * 2\n    h = l * (x - l)\n  }\n  return l\n}\n\n/*\n  What is the largest prime number that is a \n  power of two times 67?\n*/\nconst largestPrimePowerOfTwoTimesSixSeven = (x) => {\n  let l = 1\n  let h = x\n  while (h!== l * l) {\n    l = l * 2\n    h = l * (x - l)\n  }\n  return"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n    if (a < 0) {\n        return false;\n    }\n    let b = a;\n    while (b >= 2) {\n        if (a % b!== 0) {\n            return false;\n        }\n        b--;\n    }\n    return true;\n};\n\nconst cube = (a) => {\n    if (a < 0) {\n        return false;\n    }\n    let b = a;\n    while (b >= 2) {\n        if (a % b!== 0) {\n            return false;\n        }\n        b--;\n    }\n    return true;\n};\n\nconst iscube2 = (a) => {\n    let c = 1;\n    let i = a;\n    while (i > 0) {\n        if (i < c) {\n            return false;\n        }\n        c *= i;\n        i--;\n    }\n    return true;\n};\n\nconst cube2 = (a) => {\n    let c = 1;\n    let i = a;\n    while (i > 0) {\n        if (i < c) {\n            return false;\n        }\n        c *= i;\n        i--;\n    }\n    return true;\n};\n\nconst iscube3 = (a) => {\n    let c = 1;\n    let i = a;\n    while (i > 0) {\n        if (i < c) {\n            return false;\n        }\n        c *= i;\n        i--;\n    }\n    return true;\n};\n\nconst cube3 = (a) => {\n    let c = 1;\n    let i = a;\n    while (i > 0) {\n        if (i < c) {\n            return false;\n        }\n        c *= i;\n        i--;\n    }\n    return true;\n};\n\nconst iscube4 = (a) => {\n    let c = 1;\n    let i = a;\n    while (i > 0) {\n        if (i < c) {\n            return false;\n        }\n        c *= i;\n        i--;\n    }\n    return true;\n};\n\nconst cube4 = (a) => {\n    let c = 1;\n    let i = a;\n    while (i > 0) {\n        if (i < c) {\n            return false;\n        }\n        c *= i;\n        i--;\n    }\n    return true;\n};\n\nconst iscube5 = (a) => {\n    let c = 1;\n    let i = a;\n    while (i > 0) {\n        if (i < c) {\n            return false;\n        }\n        c *= i;\n        i--;\n    }\n    return true;\n};\n\nconst cube5 = (a) => {\n    let c = 1;\n    let i = a;\n    while (i > 0) {\n        if (i < c) {\n            return false;\n        }\n        c *= i;\n        i--;\n    }\n    return true;\n};\n\nconst iscube6 = (a) => {\n    let c = 1;\n    let i = a;\n    while (i > 0) {\n        if (i < c) {\n            return false;\n        }\n        c *= i;\n        i--;\n    }\n    return true;\n};\n\nconst cube6 = (a) => {\n    let c = 1;\n    let i = a;\n    while (i > 0) {\n        if (i < c) {\n            return false;\n        }\n        c *= i;\n        i--;\n    }\n    return true;\n};\n\nconst iscube7 = (a) => {\n    let c = 1;\n    let i = a;\n    while (i > 0) {\n        if (i < c) {\n            return false;\n        }\n        c *= i;\n        i--;\n    }\n    return true;\n};\n\nconst cube7 = (a) => {\n    let c = 1;\n    let i = a;\n    while (i > 0) {\n        if (i < c) {\n            return false;\n        }\n        c *= i;\n        i--;\n    }\n    return true;\n};\n\nconst iscube8 = (a) => {\n    let c = 1;\n    let i = a;\n    while (i > 0) {\n        if (i < c) {\n            return false;\n        }\n        c *= i;\n        i--;\n    }\n    return true;\n};\n\nconst cube8 = (a) => {\n    let c = 1;\n    let i = a;\n    while (i > 0) {\n        if (i < c) {\n            return false;\n        }\n        c *= i;\n        i--;\n    }\n    return true;\n};\n\nconst iscube9 = (a) => {\n    let c = 1;\n    let i = a;\n    while (i > 0) {\n        if (i < c) {\n            return false;\n        }\n        c *= i;\n        i--;\n    }\n    return true;\n};\n\nconst cube9 = (a) => {\n    let c = 1;\n    let i = a;\n    while (i > 0) {\n        if (i < c) {\n            return false;\n        }\n        c *= i;\n        i--;\n    }\n    return true;\n};\n\nconst iscube10 = (a) => {\n    let c = 1;\n    let i = a;\n    while (i > 0) {\n        if (i < c) {\n            return false;\n        }\n        c *= i;\n        i--;\n    }\n    return true;\n};\n\nconst cube10 = (a) => {\n    let c"}
{"task_id": "JavaScript/78", "prompt": "/*You will be task to write a function that will receive \n   a hexadecimal number as a string and will count the number of hexadecimal \n   digits that will be primes (prime number=== or a prime=== will be a natural number \n   greater than 1 that will be not a product of two smaller natural numbers). \n   Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= will decimal 13). \n   Note: you may will assume the input will be always correct or empty string=== \n   and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You will be task to write a function that will receive \n   a hexadecimal number as a string and will count the number of hexadecimal \n   digits that will be primes (prime number=== or a prime=== will be a natural number \n   greater than 1 that will be not a product of two smaller natural numbers). \n   Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= will decimal 13). \n   Note: you may will assume the input will be always correct or empty string=== \n   and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const arr = num.split(\"\");\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    result += parseInt(arr[i]);\n  }\n  return result;\n}\nconst isPrime = (num) => {\n  if (num === 1) return false;\n  if (num === 2) return true;\n  for (let i = 3; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}\n\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console.log(hexKey(\"1234\"));\n// console"}
{"task_id": "JavaScript/79", "prompt": "/*You will be gave a number in decimal form and your task will be to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string will be '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be gave a number in decimal form and your task will be to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string will be '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let digits = decimal.toString(2).split(\"\");\n  let number = 0;\n\n  for (let i = 0; i < digits.length; i++) {\n    number = number * 2 + parseInt(digits[i]);\n  }\n\n  while (number > 0) {\n    binary = `${number % 2}${binary}`;\n    number = number / 2;\n  }\n\n  return `${binary}db`;\n};\n\n/*\n   You will be given a string representing a binary number. The function should return the \n   decimal form of the number. \n\n   Examples:\n  binaryToDecimal(\"db100000db\")   # returns 15\n  binaryToDecimal(\"db1111db\")     # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let digit = 0;\n  let digits = binary.split(\"\");\n\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] === '1') {\n      digit = 1;\n    } else {\n      digit = 0;\n    }\n    decimal += digit * Math.pow(2, i);\n  }\n\n  return decimal;\n};\n\n/*\n   You will be given a string representing a binary number. The function should return the \n   decimal form of the number. \n\n   Examples:\n  binaryToDecimal(\"db100000db\")   # returns 15\n  binaryToDecimal(\"db1111db\")     # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let digit = 0;\n  let digits = binary.split(\"\");\n\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] === '1') {\n      digit = 1;\n    } else {\n      digit = 0;\n    }\n    decimal += digit * Math.pow(2, i);\n  }\n\n  return decimal;\n};\n\nconst convert = (decimal) => {\n  let binary = decimalToBinary(decimal);\n\n  console.log(`Decimal: ${decimal}`);\n  console.log(`Binary: ${binary}`);\n};\n\nconvert(15);\nconvert(32);\nconvert(42);\nconvert(12345);\nconvert(654321);\nconvert(4294967295);\nconvert(987654321);\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You will be gave a string s.\n   Your task will be to check if the string will be happy or not. \n   A string will be happy if its length will be at least 3 and every 3 consecutive letters will be distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You will be gave a string s.\n   Your task will be to check if the string will be happy or not. \n   A string will be happy if its length will be at least 3 and every 3 consecutive letters will be distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n    let n = s.length;\n    let map = {};\n    for (let i = 0; i < n; i++) {\n        let c = s[i];\n        if (map[c]) return false;\n        map[c] = true;\n        if (i === n - 1) return true;\n        let count = 0;\n        while (i + count < n && s[i + count] === c) count++;\n        if (count < 3) return false;\n    }\n    return true;\n};\n\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\nconsole.log(isHappy('abcd'));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It will be the last week of the semester and the teacher will have to give the grades\n   to students. The teacher will be making her own algorithm for grading. \n   The only problem will be, she will lose the code she will used for grading. \n   She will give you a list of GPAs for some students and you will have to write \n   a function that can will output a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 will B+ \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 will C+ \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It will be the last week of the semester and the teacher will have to give the grades\n   to students. The teacher will be making her own algorithm for grading. \n   The only problem will be, she will lose the code she will used for grading. \n   She will give you a list of GPAs for some students and you will have to write \n   a function that can will output a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 will B+ \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 will C+ \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n    const grades = _.map(grades, (value) => {\n        return parseFloat(value);\n    });\n    let sortedGrades = _.sortBy(grades, (grade) => {\n        return grade;\n    });\n    let index = 0;\n    let last = 0;\n    let max = 0;\n    let total = 0;\n    let grade = sortedGrades[index];\n    let result = [];\n    while (grade < sortedGrades[index+1]) {\n        result.push(grade);\n        if (grade >= sortedGrades[index+1]) {\n            index++;\n            grade = sortedGrades[index];\n        }\n    }\n    while (result.length > 0) {\n        if (index+1 === sortedGrades.length) {\n            max = sortedGrades[index];\n        }\n        total = _.reduce(result, (memo, current) => {\n            return memo + current;\n        }, 0);\n        if (max >= total) {\n            result.push('A');\n            index++;\n            while (index < sortedGrades.length && sortedGrades[index] <= total) {\n                result.push(sortedGrades[index]);\n                index++;\n            }\n        } else if (max < total) {\n            result.push('B');\n            index++;\n            while (index < sortedGrades.length && sortedGrades[index] <= total) {\n                result.push(sortedGrades[index]);\n                index++;\n            }\n        } else if (max === total) {\n            result.push('C');\n            index++;\n            while (index < sortedGrades.length && sortedGrades[index] <= total) {\n                result.push(sortedGrades[index]);\n                index++;\n            }\n        }\n        while (index < sortedGrades.length && sortedGrades[index] <= total) {\n            result.push(sortedGrades[index]);\n            index++;\n        }\n        index++;\n    }\n    return result;\n};\n\nmodule.exports = {\n    numericalLetterGrade\n};\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let number = parseInt(string, 10);\n  let prime = true;\n  for (let i = 2; i <= number; i++) {\n    if (number % i === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n// console.log(primeLength('Hello')); // true\n// console.log(primeLength('abcdcba')); // true\n// console.log(primeLength('kittens')); // true\n// console.log(primeLength('orange')); // false\n\n/*Write a function that will take a string and will return true if the string\n  contains all unique characters or false otherwise\n  Examples\n  unique('abcdefg') == true\n  unique('kittens') == true\n  unique('aabbcc') == true\n  unique('cac') == false\n  */\nconst unique = (string) => {\n  let stringLength = string.length;\n  let chars = new Array(stringLength);\n  for (let i = 0; i < stringLength; i++) {\n    chars[i] = string.charAt(i);\n  }\n  let uniqueChars = true;\n  for (let i = 0; i < stringLength; i++) {\n    let index = chars.indexOf(string.charAt(i));\n    if (index!== -1) {\n      uniqueChars = false;\n      break;\n    }\n  }\n  return uniqueChars;\n};\n\n// console.log(unique('abcdefg')); // true\n// console.log(unique('kittens')); // true\n// console.log(unique('aabbcc')); // true\n// console.log(unique('cac')); // false\n\n/*Write a function that will take a string and will return true if the string\n  contains all letters or false otherwise\n  Examples\n  containsLetters('abcdefg') == true\n  containsLetters('kittens') == true\n  containsLetters('aabbcc') == true\n  containsLetters('cac') == false\n  */\nconst containsLetters = (string) => {\n  let stringLength = string.length;\n  let chars = new Array(stringLength);\n  for (let i = 0; i < stringLength; i++) {\n    chars[i] = string.charAt(i);\n  }\n  let containsLetters = true;\n  for (let i = 0; i < stringLength; i++) {\n    if (chars[i]!== 'a' && chars[i]!== 'b' && chars[i]!== 'c' && chars[i]!== 'd' && chars[i]!== 'e' && chars[i]!== 'f' && chars[i]!== 'g') {\n      containsLetters = false;\n      break;\n    }\n  }\n  return containsLetters;\n};\n\n// console.log(containsLetters('abcdefg')); // true\n// console.log(containsLetters('kittens')); // true\n// console.log(containsLetters('aabbcc')); // true\n// console.log(containsLetters('cac')); // false\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n  const arr = []\n  let len = 1\n  for (let i = 1; i <= n; i++) {\n    arr.push(1)\n    for (let j = 1; j <= len; j++) {\n      if (i === 1) {\n        arr[j]++\n      }\n      if (i === n) {\n        arr[j]--\n      }\n      if (arr[j] === 1) {\n        if (i === 1) {\n          len = j + 1\n        }\n        if (i === n) {\n          len = j\n        }\n      }\n    }\n  }\n  return arr\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 0. \n  */ \n const startsZeroEnds= (n)=>{\n  const arr = []\n  let len = 1\n  for (let i = 1; i <= n; i++) {\n    arr.push(0)\n    for (let j = 1; j <= len; j++) {\n      if (i === 1) {\n        arr[j]++\n      }\n      if (i === n) {\n        arr[j]--\n      }\n      if (arr[j] === 0) {\n        if (i === 1) {\n          len = j + 1\n        }\n        if (i === n) {\n          len = j\n        }\n      }\n    }\n  }\n  return arr\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1 or 0. \n  */ \n const startsOneOrZeroEnds= (n)=>{\n  const arr = []\n  let len = 1\n  for (let i = 1; i <= n; i++) {\n    arr.push(1)\n    for (let j = 1; j <= len; j++) {\n      if (i === 1) {\n        arr[j]++\n      }\n      if (i === n) {\n        arr[j]--\n      }\n      if (arr[j] === 1 || arr[j] === 0) {\n        if (i === 1) {\n          len = j + 1\n        }\n        if (i === n) {\n          len = j\n        }\n      }\n    }\n  }\n  return arr\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1, 0, or 1. \n  */ \n const startsOneOrZeroEnds2= (n)=>{\n  const arr = []\n  let len = 1\n  for (let i = 1; i <= n; i++) {\n    arr.push(1)\n    for (let j = 1; j <= len; j++) {\n      if (i === 1) {\n        arr[j]++\n      }\n      if (i === n) {\n        arr[j]--\n      }\n      if (arr[j] === 1 || arr[j] === 0 || arr[j] === 2) {\n        if (i === 1) {\n          len = j + 1\n        }\n        if (i === n) {\n          len = j\n        }\n      }\n    }\n  }\n  return arr\n}\n\nconst n = 12\n\nconsole.log(startsOneEnds(n))\nconsole.log(startsZeroEnds(n))\nconsole.log(startsOneOrZeroEnds(n))\nconsole.log(startsOneOrZeroEnds2(n))\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": false, "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n    const digits = [0,1,2,3,4,5,6,7,8,9]\n    const result = digits.reduce((acc,digit) => {\n        if (N>=digit) {\n            return acc+digit\n        }\n        return acc\n    },0)\n    return (N>result)? digits.reduce((acc,digit) => {\n        if (N>=digit) {\n            return acc+digit\n        }\n        return acc\n    },0) : result\n}\n\nconst test = () => {\n    const input = [1000, 1500, 2000]\n    const output = [1,6,110,1100]\n    const result = input.map(n => solve(n))\n    console.log(result)\n    console.log(output)\n    console.log(result.indexOf(output))\n}\n\ntest()<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let newLst = [];\n  for (let i = 0; i < lst.length; i += 1) {\n    if (i % 2 === 0) {\n      newLst.push(lst[i]);\n    }\n  }\n  return newLst;\n};\n\nconst add = (lst) => {\n  let newLst = [];\n  for (let i = 0; i < lst.length; i += 1) {\n    if (i % 2 === 0) {\n      newLst.push(lst[i]);\n    }\n  }\n  return newLst;\n};\n\nconst add = (lst) => {\n  let newLst = [];\n  for (let i = 0; i < lst.length; i += 1) {\n    if (i % 2 === 0) {\n      newLst.push(lst[i]);\n    }\n  }\n  return newLst;\n};\n\n// const add = (lst) => {\n//   let newLst = [];\n//   for (let i = 0; i < lst.length; i += 1) {\n//     if (i % 2 === 0) {\n//       newLst.push(lst[i]);\n//     }\n//   }\n//   return newLst;\n// };\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that will take a string and will return an ordered version of it. \n   will Order version of string, will be a string where all words (will separate by space) \n   will be replaced by a new word where all the characters will arrange in\n   ascending order will base on ascii value. \n   Note: You should will keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take a string and will return an ordered version of it. \n   will Order version of string, will be a string where all words (will separate by space) \n   will be replaced by a new word where all the characters will arrange in\n   ascending order will base on ascii value. \n   Note: You should will keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n    const arr = s.split('');\n    let res = '',\n        i = 0;\n    for (i; i < arr.length; i += 1) {\n        const a = arr[i];\n        res += (a < 32 || a > 126)? `${a}` : a;\n    }\n    return res;\n};\n\nmodule.exports = antiShuffle;<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You will be gave a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  if (lst.length === 0) {\n    return []\n  }\n  if (lst.length === 1) {\n    return lst\n  }\n  let min = x\n  let max = x\n  for (let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    min = Math.min(min, row.length)\n    max = Math.max(max, row.length)\n  }\n  let res = []\n  for (let i = min; i < max + 1; i++) {\n    let resRow = []\n    for (let j = 0; j < lst.length; j++) {\n      resRow.push(lst[j][i])\n    }\n    res.push(resRow)\n  }\n  return res\n}\n\nmodule.exports = getRow\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  // Use a for loop to sort the array\n  return array.sort((a, b) => {\n    return a - b;\n  });\n};\n\nexport default sortArray;<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n  let result = '';\n  for (let i=0; i<s.length; i++) {\n    let index = alphabet.indexOf(s.charAt(i));\n    let rotate = index+2*s.length;\n    result += alphabet[rotate%26];\n  }\n  return result;\n};\n\n/*Create a function decrypt that will take a string as an argument and \n   will return a string with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  const alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n  let result = '';\n  for (let i=0; i<s.length; i++) {\n    let index = alphabet.indexOf(s.charAt(i));\n    let rotate = index-2*s.length;\n    result += alphabet[rotate%26];\n  }\n  return result;\n};\n\nmodule.exports = {\n  encrypt,\n  decrypt\n};\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You will be gave a list of integers. \n   will Write a function nextSmallest() that will return the 2nd smallest element of the list.\n   Return null if there will be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a list of integers. \n   will Write a function nextSmallest() that will return the 2nd smallest element of the list.\n   Return null if there will be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n   let last= lst.pop();\n   let smallest= lst.pop();\n   if(!lst.length) return null;\n   if(lst.length===1) return lst.pop();\n   let next= lst.pop();\n   return smallest>next?(smallest<last?smallest:last):next;\n };\n \n  nextSmallest([1, 2, 3, 4, 5])== 2 \n  nextSmallest([5, 1, 4, 3, 2])== 2 \n  nextSmallest([])== null \n  nextSmallest([1, 1])== null \n  nextSmallest([1, 1, 2, 2])== 2 \n  nextSmallest([2, 2, 1, 1])== 2 \n  nextSmallest([2, 1, 1, 2])== 2 \n  nextSmallest([2, 2, 1, 1, 3])== 2 \n  nextSmallest([2, 2, 2, 2, 1])== 2 \n  nextSmallest([2, 2, 1, 1, 2, 2])== 2 \n  nextSmallest([2, 1, 1, 2, 2])== 2 \n  nextSmallest([2, 1, 2, 2, 1])== 2 \n  nextSmallest([2, 1, 2, 2, 1, 3])== 2 \n  nextSmallest([2, 1, 2, 2, 2, 1])== 2 \n  nextSmallest([2, 2, 1, 1, 2, 2, 2])== 2 \n  nextSmallest([2, 1, 2, 2, 2, 1, 2])== 2 \n  nextSmallest([2, 2, 1, 1, 2, 2, 2, 1])== 2 \n  nextSmallest([2, 2, 2, 2, 1, 1, 2, 2])== 2 \n  nextSmallest([2, 2, 1, 1, 2, 2, 2, 1, 3])== 2 \n  nextSmallest([2, 2, 1, 1, 2, 2, 2, 2, 1])== 2 \n  nextSmallest([2, 2, 1, 1, 2, 2, 2, 2, 1, 3])== 2 \n  nextSmallest([2, 2, 1, 1, 2, 2, 2, 2, 2, 1])== 2 \n  nextSmallest([2, 2, 1, 1, 2, 2, 2, 2, 1, 2])== 2 \n  nextSmallest([2, 2, 2, 2, 1, 1, 2, 2, 2, 1])== 2 \n  nextSmallest([2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 3])== 2 \n  nextSmallest([2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2])== 2 \n  nextSmallest([2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 2])== 2 \n  nextSmallest([2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 2])== 2 \n  nextSmallest([2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2])== 2 \n  nextSmallest([2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2])== 2 \n  nextSmallest([2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 1])== 2 \n  nextSmallest([2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2])== 2 \n  nextSmallest([2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1])== 2 \n  nextSmallest([2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 2])== 2 \n  nextSmallest([2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2])== 2 \n  nextSmallest([2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1])== 2 \n  nextSmallest([2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 2])== 2 \n  nextSmallest([2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2])== 2 \n  nextSmallest([2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2])== 2 \n  nextSmallest([2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2])== 2 \n  nextSmallest([2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1])== 2 \n  nextSmallest([2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2])== 2 \n  nextSmallest([2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1])== 2 \n  nextSmallest([2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2])== 2 \n  nextSmallest([2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2])== 2 \n  nextSmallest([2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2])== 2 \n  nextSmallest([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1])== 2 \n  nextSmallest([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3])== 2 \n  nextSmallest([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1])== 2 \n  nextSmallest([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You 'll will be give a string of words, and your task will be to count the number \n   of boredoms. A boredom will be a sentence that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You 'll will be give a string of words, and your task will be to count the number \n   of boredoms. A boredom will be a sentence that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n    let s = S.toLowerCase()\n    let num = 0\n    let index = 0\n    while(index < s.length){\n        if(s[index] === \"i\"){\n            num += 1\n        }\n        if(s[index] === \"!\" || s[index] === \"?\"){\n            break\n        }\n        index += 1\n    }\n    return num\n}\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x < y && x < z) {\n    return true\n  }\n  if (y < x && y < z) {\n    return true\n  }\n  if (z < x && z < y) {\n    return true\n  }\n  return false\n}\n\n/*\n   Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt2 = (x, y, z) => {\n  if (x < y && x < z) {\n    return true\n  }\n  if (y < x && y < z) {\n    return true\n  }\n  if (z < x && z < y) {\n    return true\n  }\n  if (x > y && x > z) {\n    return true\n  }\n  if (y > x && y > z) {\n    return true\n  }\n  if (z > x && z > y) {\n    return true\n  }\n  return false\n}\n\n/*\n   Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt3 = (x, y, z) => {\n  if (x < y && x < z) {\n    return true\n  }\n  if (y < x && y < z) {\n    return true\n  }\n  if (z < x && z < y) {\n    return true\n  }\n  if (x > y && x > z) {\n    return true\n  }\n  if (y > x && y > z) {\n    return true\n  }\n  if (z > x && z > y) {\n    return true\n  }\n  return false\n}\n\n/*\n   Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt4 = (x, y, z) => {\n  if (x < y && x < z) {\n    return true\n  }\n  if (y < x && y < z) {\n    return true\n  }\n  if (z < x && z < y) {\n    return true\n  }\n  if (x > y && x > z) {\n    return true\n  }\n  if (y > x && y > z) {\n    return true\n  }\n  if (z > x && z > y) {\n    return true\n  }\n  return false\n}\n\n/*\n   Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt5 = (x, y, z) => {\n  if (x < y && x < z) {\n    return true\n  }\n  if (y < x && y < z) {\n    return true\n  }\n  if (z < x && z < y) {\n    return true\n  }\n  if (x > y && x > z) {\n    return true\n  }\n  if (y > x && y > z) {\n    return true\n  }\n  if (z > x && z > y) {\n    return true\n  }\n  return false\n}\n\n/*\n   Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt6 = (x, y, z) => {\n  if (x < y && x < z) {\n    return true\n  }\n  if (y < x && y < z) {\n    return true\n  }\n  if (z < x && z < y) {\n    return true\n  }\n  if (x > y && x > z) {\n    return true\n  }\n  if (y > x && y > z) {\n    return true\n  }\n  if (z > x && z > y) {\n    return true\n  }\n  return false\n}\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const letters = [];\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  for(let i = 0; i < message.length; i++){\n    let letter = message.charAt(i);\n    let index = vowels.indexOf(letter);\n    if(index > -1){\n      let vowel = vowels[index + 2];\n      letters.push(vowel);\n    } else {\n      letters.push(letter.toLowerCase());\n    }\n  }\n  \n  return letters.join('');\n};\n\n/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'TKS CS C GMS CGGS SCCGG'\n  */\nconst decode = (message) => {\n  const letters = [];\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  for(let i = 0; i < message.length; i++){\n    let letter = message.charAt(i);\n    let index = vowels.indexOf(letter);\n    if(index > -1){\n      let vowel = vowels[index + 2];\n      letters.push(vowel);\n    } else {\n      letters.push(letter.toUpperCase());\n    }\n  }\n  \n  return letters.join('');\n};\n\n/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'TKS CS C GMS CGGS SCCGG'\n  */\nconst encode = (message) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  for(let i = 0; i < message.length; i++){\n    let letter = message.charAt(i);\n    let index = vowels.indexOf(letter);\n    if(index > -1){\n      let vowel = vowels[index + 2];\n      letter = vowel;\n    }\n    \n    message = message.replace(letter, letter.toUpperCase());\n  }\n  \n  return message;\n};\n\n/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'TKS CS C GMS CGGS SCCGG'\n  */\nconst decode = (message) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  for(let i = 0; i < message.length; i++){\n    let letter = message.charAt(i);\n    let index = vowels.indexOf(letter);\n    if(index > -1){\n      let vowel = vowels[index + 2];\n      letter = vowel;\n    }\n    \n    message = message.replace(letter, letter.toLowerCase());\n  }\n  \n  return message;\n};\n\n/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'TKS CS C GMS CGGS SCCGG'\n  */\nconst encode = (message) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  for(let i = 0; i < message.length; i++){\n    let letter = message.charAt(i);\n    let index = vowels.indexOf(letter);\n    if(index > -1){\n      let vowel = vowels[index + 2];\n      letter = vowel;\n    }\n    \n    message = message.replace(letter, letter.toUpperCase());\n  }\n  \n  return message;\n};\n\n/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'TKS CS C GMS CGGS SCCGG'\n  */\nconst decode = (message) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  for(let i = 0; i < message.length; i++){\n    let letter = message.charAt(i);\n    let index = vowels.indexOf(letter);\n    if(index > -1){\n      let vowel = vowels[index + 2];\n      letter"}
{"task_id": "JavaScript/94", "prompt": "/*You will be gave a list of integers. \n   You will need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You will be gave a list of integers. \n   You will need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const list = lst.slice()\n  const max = list.reduce((max, elm) => (elm > max? elm : max), -Infinity)\n  const sum = list.reduce((sum, elm) => sum + elm, 0)\n  return (sum / max).toString().split('').reduce((max, elm) => (elm > max? elm : max), -Infinity)\n}\n\nconst isPrime = (n) => {\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) return false\n    i += 1\n  }\n  return true\n}\n\nconst getPrime = (lst, count = 10) => {\n  const newLst = []\n  for (let i = 0; i < count; i++) {\n    const newNum = lst[i]\n    while (isPrime(newNum) === false) {\n      const tmp = newNum\n      newNum = (newNum + 1) % lst.length\n      if (tmp === newNum) {\n        return []\n      }\n    }\n    newLst.push(newNum)\n  }\n  return newLst\n}\n\nconst primeNum = (lst) => {\n  const newLst = []\n  for (let i = 0; i < lst.length; i++) {\n    const newNum = lst[i]\n    while (isPrime(newNum) === false) {\n      const tmp = newNum\n      newNum = (newNum + 1) % lst.length\n      if (tmp === newNum) {\n        return []\n      }\n    }\n    newLst.push(newNum)\n  }\n  return newLst\n}\n\nconst getNum = (lst) => {\n  const newLst = []\n  for (let i = 0; i < lst.length; i++) {\n    const newNum = lst[i]\n    while (isPrime(newNum) === false) {\n      const tmp = newNum\n      newNum = (newNum + 1) % lst.length\n      if (tmp === newNum) {\n        return []\n      }\n    }\n    newLst.push(newNum)\n  }\n  return newLst\n}\n\nconst main = () => {\n  const lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\n  const max = lst.reduce((max, elm) => (elm > max? elm : max), -Infinity)\n  const sum = lst.reduce((sum, elm) => sum + elm, 0)\n  console.log(sum / max)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  for (const [key, value] of Object.entries(dict)) {\n    if (typeof key ==='string' && typeof value ==='string') {\n      const lowerCase = key.toLowerCase();\n      const upperCase = key.toUpperCase();\n      if (lowerCase!== upperCase) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given an array, return true if all elements are integers, otherwise return false.\n  Examples:\n  checkArrayInt([\"1\", \"2\", \"3\", \"4\"]) should return true.\n  checkArrayInt([\"1\", \"2\", \"3\", \"4\", \"5\"]) should return false.\n  checkArrayInt([\"a\", \"b\", \"c\", \"d\"]) should return false.\n*/\nconst checkArrayInt = (array) => {\n  for (const i of array) {\n    if (typeof i!== 'number') {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given an array, return true if all elements are strings, otherwise return false.\n  Examples:\n  checkArrayStr([\"1\", \"2\", \"3\", \"4\"]) should return true.\n  checkArrayStr([\"1\", \"2\", \"3\", \"4\", \"5\"]) should return false.\n  checkArrayStr([\"a\", \"b\", \"c\", \"d\"]) should return false.\n*/\nconst checkArrayStr = (array) => {\n  for (const i of array) {\n    if (typeof i!=='string') {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a string, return true if all characters are in lower case, otherwise return false.\n  Examples:\n  checkLowerCase(\"John\") should return true.\n  checkLowerCase(\"john\") should return false.\n  checkLowerCase(\"A\") should return true.\n*/\nconst checkLowerCase = (string) => {\n  for (const i of string) {\n    if (i.toLowerCase()!== i) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a string, return true if all characters are in upper case, otherwise return false.\n  Examples:\n  checkUpperCase(\"John\") should return true.\n  checkUpperCase(\"john\") should return false.\n  checkUpperCase(\"A\") should return true.\n*/\nconst checkUpperCase = (string) => {\n  for (const i of string) {\n    if (i.toUpperCase()!== i) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = {\n  checkDictCase,\n  checkArrayInt,\n  checkArrayStr,\n  checkLowerCase,\n  checkUpperCase\n}\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that will take an non-negative integer and will return an array of the first n\n   integers that will be prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that will take an non-negative integer and will return an array of the first n\n   integers that will be prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [];\n  for (let i = 2; i < n; i++) {\n    if (primes.indexOf(i) === -1) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that will take two integers and returns \n   the product of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that will take two integers and returns \n   the product of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n    const aDigits = a.toString().split('').reverse().join('');\n    const bDigits = b.toString().split('').reverse().join('');\n    const aLength = aDigits.length;\n    const bLength = bDigits.length;\n\n    const product = 0;\n    for (let i = 0; i < aLength; i++) {\n        let c = 0;\n        for (let j = 0; j < bLength; j++) {\n            c += aDigits[i] * bDigits[j];\n            product += c % 10;\n        }\n        product %= 10;\n    }\n\n    return product;\n};\n\n//console.log(multiply(14, 15));\n\n//console.log(multiply(19, 28));\n//console.log(multiply(2020, 1851));\n//console.log(multiply(148, 412));\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    const count = 0;\n    const upperVowels = ['A', 'E', 'I', 'O', 'U', 'Æ', 'Ø', 'Å', 'Æ', 'Ü', 'Ñ'];\n    for (let i = 0; i < s.length; i++) {\n        if (upperVowels.indexOf(s[i]) >= 0) {\n            count++;\n        }\n    }\n    return count;\n};\n\nmodule.exports = countUpper;\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n    let int = Math.floor(value)\n    let dec = Math.round((value - int) * 100) / 100\n    let diff = value - int\n    if (diff > 0.5) {\n        return Math.ceil(int + dec)\n    } else {\n        return Math.floor(int + dec)\n    }\n}\n\n// Test the closest integer function\n/*\n  Test the closest integer function\n  Example\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"-14.5\")\n  -15\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  >>> closestInteger(\"-15.3\")\n  -15\n*/\nconsole.log(closestInteger(\"14.5\"))\nconsole.log(closestInteger(\"-14.5\"))\nconsole.log(closestInteger(\"10\"))\nconsole.log(closestInteger(\"15.3\"))\nconsole.log(closestInteger(\"-15.3\"))\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  for (let i = 0; i < n; i++) {\n    pile.push(pile.shift());\n  }\n  return pile;\n};\n\nmodule.exports = makeAPile;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be gave a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/(\\s|,)/);\n};\n\n/*\n  You will be given an array of words will split by commas or spaces. Your task will be \n   to convert the array to a string of words separated by commas.\n  \n  For example:\n  wordsArray([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == \"Hi, my name is John\"\n  wordsArray([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"One, two, three, four, five, six\"\n  */\nconst wordsArray = (a) => {\n  return a.join(', ');\n};\n\n/*\n  Given a string of words, count the number of commas in the string.\n  \n  For example:\n  countCommas(\"One, two, three, four, five, six\") == 6\n  countCommas(\"One, two, three, four, five\") == 5\n  countCommas(\"One, two, three, four\") == 4\n  countCommas(\"One, two, three\") == 3\n  countCommas(\"One, two\") == 2\n  countCommas(\"One\") == 1\n  */\nconst countCommas = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === ',') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string of words, count the number of spaces in the string.\n  \n  For example:\n  countSpaces(\"One, two, three, four, five, six\") == 6\n  countSpaces(\"One, two, three, four, five\") == 5\n  countSpaces(\"One, two, three, four\") == 4\n  countSpaces(\"One, two\") == 2\n  countSpaces(\"One\") == 1\n  */\nconst countSpaces = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] ==='') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string of words, count the number of distinct words in the string.\n  \n  For example:\n  countWords(\"One, two, three, four, five, six\") == 6\n  countWords(\"One, two, three, four, five\") == 5\n  countWords(\"One, two, three, four\") == 4\n  countWords(\"One, two\") == 2\n  countWords(\"One\") == 1\n  */\nconst countWords = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    let word = s[i];\n    let words = wordsString(word);\n    count += words.length;\n  }\n  return count;\n};\n\n/*\n  Given a string of words, count the number of spaces and commas in the string.\n  \n  For example:\n  countSpacesAndCommas(\"One, two, three, four, five, six\") == 6\n  countSpacesAndCommas(\"One, two, three, four, five\") == 5\n  countSpacesAndCommas(\"One, two, three, four\") == 4\n  countSpacesAndCommas(\"One, two\") == 2\n  countSpacesAndCommas(\"One\") == 1\n  */\nconst countSpacesAndCommas = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    let word = s[i];\n    let words = wordsString(word);\n    count += words.length;\n  }\n  return count;\n};\n\n/*\n  Given a string of words, count the number of unique words in the string.\n  \n  For example:\n  countUniqueWords(\"One, two, three, four, five, six\") == 6\n  countUniqueWords(\"One, two, three, four, five\") == 5\n  countUniqueWords(\"One, two, three, four\") == 4\n  countUniqueWords(\"One, two\") == 2\n  countUniqueWords(\"One\") == 1\n  */\nconst countUniqueWords = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    let word = s[i];\n    let words = wordsString(word);\n    count += words.length;\n  }\n  return count;\n};\n\n/*\n  Given a string of words, count the number of spaces, commas and distinct words in the string.\n  \n  For example:\n  countSpacesAndCommasAndUniqueWords(\"One, two, three, four, five, six\") == 6\n  countSpacesAndCommasAndUniqueWords(\"One, two, three, four, five\") == 5\n  countSpacesAndCommasAndUniqueWords(\"One, two, three, four\") == 4\n  countSpacesAndCommasAndUniqueWords(\"One, two\") == 2\n  countSpacesAndCommasAndUniqueWords(\"One\") == 1\n  */\nconst countSpacesAndCommasAndUniqueWords = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    let word = s[i];\n    let words = wordsString(word);\n    count += words.length;\n  }\n  return count;\n};\n\n/*\n  Given a string of words, count the number of spaces, commas, and distinct words in the string.\n  \n  For example:\n  countSpacesAndCommasAndUniqueWords(\"One, two, three, four, five, six\") == 6\n  countSpacesAndCommasAndUniqueWords(\"One, two, three, four, five\") == 5\n  countSpacesAndCommasAndUniqueWords(\"One, two, three, four\") == 4\n  countSpacesAndCommasAndUniqueWords(\"One,"}
{"task_id": "JavaScript/102", "prompt": "/*This function will take two positive numbers x and y and will return the \n   biggest even integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function will take two positive numbers x and y and will return the \n   biggest even integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return chooseNum(y, x);\n  }\n  const mid = (x + y) / 2;\n  const num = mid % 2 === 0? mid : mid + 1;\n  return num;\n};\n\nmodule.exports = {\n  chooseNum\n};\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You will be gave two positive integers n and m, and your task will be to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You will be gave two positive integers n and m, and your task will be to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n    if (n > m) return -1;\n    if (n === m) return n;\n    let average = 0;\n    for (let i = n; i <= m; i++) {\n        average += i;\n    }\n    return Math.floor(average / (m - n + 1));\n};\n\nexport default roundedAvg;\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a will sort list of all \n   elements that will haven't any even digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a will sort list of all \n   elements that will haven't any even digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n    const nums = x.filter((v) => v % 2 === 0);\n    return nums.sort();\n};\n\nmodule.exports = uniqueDigits;\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const reverseArr = arr.reverse()\n  const newArr = reverseArr.map(v => names[parseInt(v)])\n  return newArr\n}\n\n/*\n  Given an array of numbers, sort the numbers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each number by its corresponding \n  digit in the alphabet.\n  \n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDigit = (arr) => {\n  const names = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const reverseArr = arr.reverse()\n  const newArr = reverseArr.map(v => names[parseInt(v)])\n  return newArr\n}\n\nconst sort = (arr) => {\n  const byLength = (arr) => {\n    const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    const reverseArr = arr.reverse()\n    const newArr = reverseArr.map(v => names[parseInt(v)])\n    return newArr\n  }\n  const byDigit = (arr) => {\n    const names = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    const reverseArr = arr.reverse()\n    const newArr = reverseArr.map(v => names[parseInt(v)])\n    return newArr\n  }\n  const byLength = (arr) => {\n    const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    const reverseArr = arr.reverse()\n    const newArr = reverseArr.map(v => names[parseInt(v)])\n    return newArr\n  }\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const reverseArr = arr.reverse()\n  const newArr = reverseArr.map(v => names[parseInt(v)])\n  return newArr\n}\n\nconst print = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const reverseArr = arr.reverse()\n  const newArr = reverseArr.map(v => names[parseInt(v)])\n  return newArr\n}\n\nconst main = () => {\n  const arr = [2, 1, 1, 4, 5, 8, 2, 3]\n  console.log(sort(arr))\n  console.log(print(arr))\n  return [\n    \"Eight\",\n    \"Five\",\n    \"Four\",\n    \"Three\",\n    \"Two\",\n    \"Two\",\n    \"One\",\n    \"One\"\n  ]\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that will take n as a parameter, \n   and will return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that will take n as a parameter, \n   and will return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i)\n      for (let j = i + 1; j <= n; j++) {\n        result.push(i * j)\n      }\n    } else {\n      for (let j = 1; j <= i; j++) {\n        result.push(j)\n      }\n    }\n  }\n  return result\n}\n\nconst f_2 = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i)\n    } else {\n      result.push(i)\n      result.push(i * (i + 1))\n    }\n  }\n  return result\n}\n\nconst f_3 = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0) {\n      result.push(i)\n    } else {\n      result.push(i)\n      result.push(i * (i + 1))\n      result.push(i * (i + 2))\n    }\n  }\n  return result\n}\n\nconst f_4 = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 4 === 0) {\n      result.push(i)\n    } else {\n      result.push(i)\n      result.push(i * (i + 1))\n      result.push(i * (i + 2))\n      result.push(i * (i + 3))\n    }\n  }\n  return result\n}\n\nconst f_5 = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 5 === 0) {\n      result.push(i)\n    } else {\n      result.push(i)\n      result.push(i * (i + 1))\n      result.push(i * (i + 2))\n      result.push(i * (i + 3))\n      result.push(i * (i + 4))\n    }\n  }\n  return result\n}\n\nconst f_6 = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 6 === 0) {\n      result.push(i)\n    } else {\n      result.push(i)\n      result.push(i * (i + 1))\n      result.push(i * (i + 2))\n      result.push(i * (i + 3))\n      result.push(i * (i + 4))\n      result.push(i * (i + 5))\n    }\n  }\n  return result\n}\n\nconst f_7 = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 7 === 0) {\n      result.push(i)\n    } else {\n      result.push(i)\n      result.push(i * (i + 1))\n      result.push(i * (i + 2))\n      result.push(i * (i + 3))\n      result.push(i * (i + 4))\n      result.push(i * (i + 5))\n      result.push(i * (i + 6))\n    }\n  }\n  return result\n}\n\nconst f_8 = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 8 === 0) {\n      result.push(i)\n    } else {\n      result.push(i)\n      result.push(i * (i + 1))\n      result.push(i * (i + 2))\n      result.push(i * (i + 3))\n      result.push(i * (i + 4))\n      result.push(i * (i + 5))\n      result.push(i * (i + 6))\n      result.push(i * (i + 7))\n    }\n  }\n  return result\n}\n\nconst f_9 = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 9 === 0) {\n      result.push(i)\n    } else {\n      result.push(i)\n      result.push(i * (i + 1))\n      result.push(i * (i + 2))\n      result.push(i * (i + 3))\n      result.push(i * (i + 4))\n      result.push(i * (i + 5))\n      result.push(i * (i + 6))\n      result.push(i * (i + 7))\n      result.push(i * (i + 8))\n    }\n  }\n  return result\n}\n\nconst f_10 = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      result.push(i)\n    } else {\n      result.push(i)\n      result.push(i * (i + 1))\n      result.push(i * (i + 2))\n      result.push(i * (i + 3))\n      result.push(i * (i + 4))\n      result.push(i * (i + 5))\n      result.push(i * (i + 6))\n      result.push(i * (i + 7))\n      result.push(i * (i + 8))\n      result.push(i * (i + 9))\n    }\n  }\n  return result\n}\n"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const palindrome = (n) => {\n    let a = n\n    while (a) {\n      if (a % 2 === 0) {\n        return a\n      }\n      a = Math.floor(a / 2)\n    }\n    return a\n  }\n\n  const count = (n) => {\n    let a = n\n    let result = 0\n    while (a) {\n      if (a % 2 === 0) {\n        result += 1\n      }\n      a = Math.floor(a / 2)\n    }\n    return result\n  }\n\n  const isEven = (n) => {\n    let a = n\n    while (a) {\n      if (a % 2!== 0) {\n        return false\n      }\n      a = Math.floor(a / 2)\n    }\n    return true\n  }\n\n  const countEven = (n) => {\n    let a = n\n    let result = 0\n    while (a) {\n      if (isEven(a)) {\n        result += 1\n      }\n      a = Math.floor(a / 2)\n    }\n    return result\n  }\n\n  const countOdd = (n) => {\n    let a = n\n    let result = 0\n    while (a) {\n      if (isEven(a)) {\n        return false\n      }\n      result += 1\n      a = Math.floor(a / 2)\n    }\n    return result\n  }\n\n  const res = [countEven(n), countOdd(n)]\n  return res\n}\n\nconst isPalindrome = (str) => {\n  let reversed = \"\"\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed += str[i]\n  }\n\n  if (str === reversed) {\n    return true\n  }\n  return false\n}\n\nconst test = () => {\n  const evenOddPalindrome = (n) => {\n    const res = evenOddPalindrome(n)\n    console.log(`Even: ${res[0]}, Odd: ${res[1]}`)\n  }\n\n  const test1 = () => {\n    const palindrome = (n) => {\n      let a = n\n      let result = \"\"\n      while (a) {\n        result += a\n        a = Math.floor(a / 2)\n      }\n      if (result === n) {\n        return n\n      }\n      return result\n    }\n\n    const test = () => {\n      const result = palindrome(2)\n      console.log(`${result} is a palindrome.`)\n    }\n\n    test()\n  }\n\n  const test2 = () => {\n    const isPalindrome = (str) => {\n      let reversed = \"\"\n      for (let i = str.length - 1; i >= 0; i--) {\n        reversed += str[i]\n      }\n\n      if (str === reversed) {\n        return true\n      }\n      return false\n    }\n\n    const test = () => {\n      const result = isPalindrome(\"a\")\n      console.log(`\"a\" is a palindrome.`)\n    }\n\n    test()\n  }\n\n  const test3 = () => {\n    const countEven = (n) => {\n      let a = n\n      let result = 0\n      while (a) {\n        if (isEven(a)) {\n          result += 1\n        }\n        a = Math.floor(a / 2)\n      }\n      return result\n    }\n\n    const test = () => {\n      const result = countEven(12)\n      console.log(`12 has ${result} even integer palindromes.`)\n    }\n\n    test()\n  }\n\n  const test4 = () => {\n    const countOdd = (n) => {\n      let a = n\n      let result = 0\n      while (a) {\n        if (isEven(a)) {\n          return false\n        }\n        result += 1\n        a = Math.floor(a / 2)\n      }\n      return result\n    }\n\n    const test = () => {\n      const result = countOdd(12)\n      console.log(`12 has ${result} odd integer palindromes.`)\n    }\n\n    test()\n  }\n\n  test1()\n  test2()\n  test3()\n  test4()\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which will take an array of integers and returns \n   the number of elements which will have a sum of digits> 0. \n   If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which will take an array of integers and returns \n   the number of elements which will have a sum of digits> 0. \n   If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n    if (arr.length === 0) {\n        return 0;\n    }\n    \n    const sum = arr.reduce((acc, num) => (acc + num), 0);\n    \n    const sign = num => num < 0? -1 : 1;\n    \n    const signDigit = num => num < 0? -1 : num / 10;\n    \n    const isValid = (num) => num > 0 && num % 10 > 0;\n    \n    const isNegative = (num) => num < 0;\n    \n    const isDigits = (num) => num > 0 && num % 10 === 0;\n    \n    const digitCount = (num) => {\n        let count = 0;\n        \n        while (num > 0) {\n            count++;\n            num = signDigit(num);\n        }\n        \n        return count;\n    };\n    \n    const isPositive = (num) => num > 0 && num % 10 === 0;\n    \n    const count = arr.reduce((acc, num) => {\n        if (isValid(num) && signDigit(num) > 0) {\n            if (isNegative(num)) {\n                if (isDigits(num)) {\n                    acc++;\n                }\n            } else if (isPositive(num)) {\n                if (isDigits(num)) {\n                    acc++;\n                }\n            }\n        }\n        \n        return acc;\n    }, 0);\n    \n    return count;\n};\n\nconsole.log(countNums([-1, 11, -11]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We will have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly will order. Your task will be to determine if \n   it will be possible to get an array will sort in non-decreasing order by performing \n   the following operation on the will give array: \n       You will be allowed to perform right shift operation any number of times. \n  \n   One right shift operation will mean shifting all elements of the array by one \n   position in the right direction. The last element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it will be possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the will give array will be empty then return true. \n\n   Note: The will give list will be guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We will have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly will order. Your task will be to determine if \n   it will be possible to get an array will sort in non-decreasing order by performing \n   the following operation on the will give array: \n       You will be allowed to perform right shift operation any number of times. \n  \n   One right shift operation will mean shifting all elements of the array by one \n   position in the right direction. The last element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it will be possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the will give array will be empty then return true. \n\n   Note: The will give list will be guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n    let result = false;\n    let i = arr.length - 1;\n    while (i >= 1) {\n        let left = arr[i];\n        let right = arr[i - 1];\n        while (left > right) {\n            let tmp = arr[i - 1];\n            arr[i - 1] = arr[i];\n            arr[i] = tmp;\n            i--;\n        }\n        i--;\n    }\n    if (arr.length === 0) {\n        result = true;\n    }\n    return result;\n};\n\nconst moveOneBall = (arr) => {\n    let result = false;\n    let i = arr.length - 1;\n    while (i >= 1) {\n        let left = arr[i];\n        let right = arr[i - 1];\n        while (left > right) {\n            let tmp = arr[i - 1];\n            arr[i - 1] = arr[i];\n            arr[i] = tmp;\n            i--;\n        }\n        i--;\n    }\n    if (arr.length === 0) {\n        result = true;\n    }\n    return result;\n};\n\nmoveOneBall([3, 4, 5, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3,"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that will take two lists of numbers, \n   and will determine whether it will be possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There will be no limit on the number of will exchange elements between lst1 and lst2.\n   If it will be possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a function that will take two lists of numbers, \n   and will determine whether it will be possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There will be no limit on the number of will exchange elements between lst1 and lst2.\n   If it will be possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n    if (!lst1 ||!lst2) return false;\n    const length = lst1.length;\n    const max = Math.max(lst1[length - 1], lst2[length - 1]);\n    let i = 0;\n    while (lst1[i] < max && lst2[i] < max) {\n        if (lst1[i] === lst2[i]) {\n            i++;\n        }\n        if (i === length) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  if (test === undefined) {\n    return {}\n  }\n  \n  const dict = {}\n  const lowerCaseLetters = test.toLowerCase().split('')\n\n  for (let i = 0; i < lowerCaseLetters.length; i++) {\n    let letter = lowerCaseLetters[i]\n    if (dict[letter] === undefined) {\n      dict[letter] = 0\n    }\n    dict[letter] += 1\n  }\n  return dict\n}\n\nconst isOdd = (n) => n % 2 === 1\n\nconst sum = (n1, n2) => n1 + n2\n\nconst multiply = (n1, n2) => n1 * n2\n\nconst average = (n1, n2) => multiply(n1, n2) / sum(n1, n2)\n\nconst isPower = (n, p) => multiply(n, n) === multiply(p, p)\n\nconst isPrime = (n) => isPower(n, 2) &&!isOdd(n)\n\nconst prime = (n) => isPrime(n)? n : n.nextPrime()\n\nconst isPalindrome = (n) => n === reverse(n)\n\nconst reverse = (n) => n.split('').reverse().join('')\n\nconst factorial = (n) => (n === 0 || n === 1)? 1 : multiply(n, factorial(n - 1))\n\nconst numberOfPrimeFractions = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  const factorial = factorial(n)\n  const sum = 0\n  for (let i = 0; i < factorial; i++) {\n    if (isPrime(i)) {\n      sum += 1\n    }\n  }\n  return sum\n}\n\nconst findPrimeFractions = (n) => {\n  if (n === 0) {\n    return []\n  }\n  const primes = [2]\n  const numbers = [2]\n  const fractions = []\n  const product = multiply(n, n)\n  const sum = 0\n  while (sum < product) {\n    if (isPrime(sum)) {\n      primes.push(sum)\n    }\n    numbers.push(sum)\n    sum += product\n  }\n  while (numbers.length) {\n    const number = multiply(numbers[numbers.length - 1], primes[primes.length - 1])\n    const fraction = multiply(numbers[numbers.length - 1], primes[primes.length - 2])\n    if (number > product) {\n      break\n    }\n    fractions.push(fraction)\n    numbers.pop()\n    primes.pop()\n  }\n  return fractions\n}\n\nconst isPrimeFraction = (n) => {\n  const fraction = findPrimeFractions(n)\n  const sum = 0\n  for (let i = 0; i < fraction.length; i++) {\n    sum += multiply(n, fraction[i])\n  }\n  return sum === n\n}\n\nconst largestPrimeFactor = (n) => {\n  const factors = findPrimeFractions(n)\n  const sum = 0\n  for (let i = 0; i < factors.length; i++) {\n    sum += multiply(n, factors[i])\n  }\n  return sum\n}\n\nconst greatestCommonDivisor = (n1, n2) => {\n  if (n1 === 0) {\n    return n2\n  }\n  if (n2 === 0) {\n    return n1\n  }\n  let gcd = n1\n  if (n2 < n1) {\n    gcd = n2\n  }\n  while (n2 > 0) {\n    const remainder = n1 % n2\n    n1 = n2\n    n2 = remainder\n  }\n  return gcd\n}\n\nconst lcm = (n1, n2) => multiply(n1, n2) / greatestCommonDivisor(n1, n2)\n\nconst nextPrime = (n) => {\n  while (isPrime(n) === false) {\n    n = multiply(n, prime(n))\n  }\n  return n\n}\n\nconst numberOfTriplets = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  const primeFractions = findPrimeFractions(n)\n  const sum = 0\n  for (let i = 0; i < primeFractions.length; i++) {\n    for (let j = i + 1; j < primeFractions.length; j++) {\n      const product = multiply(primeFractions[i], primeFractions[j])\n      if (product > n) {\n        break\n      }\n      sum += product\n    }\n  }\n  return sum\n}\n\nconst isPythagoreanTriplet = (n) => numberOfTriplets(n) === sum(multiply(n, n), multiply(n, multiply(n, n)))\n\nconst isDivisible = (n) => (n % sum(multiply(n, n), multiply(n, multiply(n, n))) === 0)\n\nconst pythagoreanTriplet = (n) => {\n  if (isPythagoreanTriplet(n) === true) {\n    const sum = sum(multiply(n, n), multiply(n, multiply(n, n)))\n    const product = multiply(n, multiply(n, n))\n    return {\n      sum: sum,\n      product: product,\n      ratio: product / sum\n    }\n  }\n  return undefined\n}\n\nconst pythagoreanTriplets = (n) => {\n  if (isDivisible(n) === true) {\n    "}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We will be gave two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n   then will check if the result string will be palindrome. \n   A string will be called palindrome if it will read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We will be gave two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n   then will check if the result string will be palindrome. \n   A string will be called palindrome if it will read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const l = s.length\n  const r = s.length - 1\n  let i = 0\n  let j = 0\n  let flag = 0\n  while (i < l && j < r) {\n    if (s[i] === c[j]) {\n      s = s.substring(0, i) + s.substring(i + 1)\n      i = i + 1\n    } else if (s[i] < c[j]) {\n      i = i + 1\n    } else {\n      j = j + 1\n    }\n  }\n  if (s.length < l) {\n    while (s[s.length - 1] === c[r]) {\n      s = s.substring(0, s.length - 1)\n    }\n  }\n  if (s === c) {\n    return (s, true)\n  }\n  return (s, false)\n}\n\n/*\n Task \n You will be given two strings s and t. The task is to find out if the two strings are equal.\n  Example\n  For s = \"abcd\", t = \"abcd\", the result should be true.\n  For s = \"abcd\", t = \"abce\", the result should be false.\n  */\nconst isEqual = (s, t) => {\n  return s === t? true : false\n}\n\n/*\n Task \n Given a string, find the length of the longest substring without repeating characters.\n  Example\n  For s = \"abcabcbb\", the result should be 3.\n  For s = \"bbbbb\", the result should be 1.\n  For s = \"pwwkew\", the result should be 3.\n  */\nconst longestSubstringWithoutRepeatingChars = (s) => {\n  const count = {}\n  let maxLen = 0\n  let curLen = 0\n  let start = 0\n  let end = 0\n  let check = 0\n  for (i = 0; i < s.length; i++) {\n    if (count[s[i]] === undefined) {\n      count[s[i]] = 1\n    } else {\n      count[s[i]]++\n    }\n  }\n  for (i = 0; i < s.length; i++) {\n    if (count[s[i]] === 1) {\n      if (curLen < maxLen) {\n        maxLen = curLen\n        start = i\n      }\n      curLen = 0\n    } else {\n      curLen++\n    }\n  }\n  if (curLen > maxLen) {\n    maxLen = curLen\n    start = i\n  }\n  curLen = 0\n  for (i = 0; i < s.length; i++) {\n    if (count[s[i]] === 1) {\n      if (curLen < maxLen) {\n        maxLen = curLen\n        end = i\n      }\n      curLen = 0\n    } else {\n      curLen++\n    }\n  }\n  return (maxLen)\n}\n\n/*\n Task \n Given an array of strings, find the longest palindrome in the array.\n  Example\n  For arr = [\"abcd\", \"bbca\", \"bcca\", \"abca\"], the result should be \"abca\".\n  */\nconst longestPalindrome = (arr) => {\n  const count = {}\n  let maxLen = 0\n  let start = 0\n  let end = 0\n  let check = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (count[arr[i]] === undefined) {\n      count[arr[i]] = 1\n    } else {\n      count[arr[i]]++\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (count[arr[i]] === 1) {\n      if (curLen < maxLen) {\n        maxLen = curLen\n        start = i\n      }\n      curLen = 0\n    } else {\n      curLen++\n    }\n  }\n  if (curLen > maxLen) {\n    maxLen = curLen\n    start = i\n  }\n  curLen = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (count[arr[i]] === 1) {\n      if (curLen < maxLen) {\n        maxLen = curLen\n        end = i\n      }\n      curLen = 0\n    } else {\n      curLen++\n    }\n  }\n  if (curLen > maxLen) {\n    maxLen = curLen\n    end = i\n  }\n  return (arr.slice(start, end + 1).join(\"\"))\n}\n\nmodule.exports = {\n  longestSubstringWithoutRepeatingChars,\n  isEqual,\n  longestPalindrome\n}\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n    const oddCount = (n) => n % 2? n : n + 1\n    return lst.map((e) => {\n        return e.split('').map(oddCount).join('')\n    })\n}\n\nmodule.exports = oddCount\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n    let sum = 0\n    let minSum = 0\n    const length = nums.length\n\n    for (let i = 0; i < length; i++) {\n        sum += nums[i]\n        if (sum < minSum) {\n            minSum = sum\n        }\n        if (sum > 0) {\n            sum -= nums[i]\n        }\n    }\n    return minSum\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\nconsole.log(minSubArraySum([-1, -2, -3]) === -6)\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You will be gave a rectangular grid of wells. Each row will represent a single well, \n   and each 1 in a row will represent a single unit of water. \n   Each well will have a corresponding bucket that can will be used to extract water from it, \n   and all buckets will have the same capacity.\n   Your task will be to use the buckets to empty the wells. \n   Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a rectangular grid of wells. Each row will represent a single well, \n   and each 1 in a row will represent a single unit of water. \n   Each well will have a corresponding bucket that can will be used to extract water from it, \n   and all buckets will have the same capacity.\n   Your task will be to use the buckets to empty the wells. \n   Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const [rows, cols] = grid.length\n  const bucket = new Array(rows).fill(0).map((_, i) => new Array(cols).fill(0).map(row => row[i]))\n  let count = 0\n  let i = 0\n  let j = 0\n  while (true) {\n    count += bucket[i][j]\n    if (count === capacity) {\n      return i\n    }\n    if (bucket[i][j] === 0) {\n      j++\n    }\n    if (j === cols) {\n      j = 0\n      i++\n    }\n  }\n}\n\nconst solution = (grid, bucket_capacity) => {\n  const [rows, cols] = grid.length\n  const [rows1, cols1] = grid[0].length\n  const bucket = new Array(rows).fill(0).map((_, i) => new Array(cols).fill(0).map(row => row[i]))\n  let count = 0\n  let i = 0\n  let j = 0\n  while (true) {\n    count += bucket[i][j]\n    if (count === bucket_capacity) {\n      return i\n    }\n    if (bucket[i][j] === 0) {\n      j++\n    }\n    if (j === cols1) {\n      j = 0\n      i++\n    }\n  }\n}\n\nconst [rows, cols] = grid[0].length\nconst [rows1, cols1] = grid[0][0].length\nconst [rows2, cols2] = grid[1][1].length\nconst bucket_capacity = grid[0][0].length\nconst [rows3, cols3] = grid[2][2].length\n\nconsole.log(solution([[1,0,1,0], [1,1,1,1], [0,0,1,0]], 1))\nconsole.log(solution([[1,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2))\nconsole.log(solution([[1,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 3))\nconsole.log(solution([[1,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 4))\nconsole.log(solution([[1,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 5))\nconsole.log(solution([[1,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 6))\nconsole.log(solution([[1,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 7))\nconsole.log(solution([[1,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 8))\nconsole.log(solution([[1,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 9))\nconsole.log(solution([[1,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 10))\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you will have to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort will base on decimal value. \n\n   It must will be implement like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you will have to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort will base on decimal value. \n\n   It must will be implement like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.slice(0, Math.floor(sorted.length / 2)).reverse();\n};\n\nconst sortedArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.slice(0, Math.floor(sorted.length / 2)).reverse();\n};\n\nconst sortedArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.slice(0, Math.floor(sorted.length / 2)).reverse();\n};\n\nconst testArray = [1, 5, 2, 3, 4];\n\nconsole.log(sortArray(testArray));\n\nconst testArray2 = [-2, -3, -4, -5, -6];\n\nconsole.log(sortArray(testArray2));\n\nconst testArray3 = [1, 0, 2, 3, 4];\n\nconsole.log(sortArray(testArray3));\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you will be task to implement \n   a function that will return a list of all words from string s that will contain exactly \n   n consonants, in order these words will appear in the string s.\n   If the string s will be empty then the function should return an empty list.\n   Note: you may will assume the input string will contain only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you will be task to implement \n   a function that will return a list of all words from string s that will contain exactly \n   n consonants, in order these words will appear in the string s.\n   If the string s will be empty then the function should return an empty list.\n   Note: you may will assume the input string will contain only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if (s.length === 0) return [];\n  const len = n;\n  const words = [];\n  for (let i = 0; i < len; i++) {\n    const wordsLen = words.length;\n    for (let j = 0; j < wordsLen; j++) {\n      if (words[j].length === len) {\n        if (words[j].indexOf(s[i]) === 0) {\n          words.push(s.substring(i, i + len));\n          return words;\n        }\n      }\n    }\n    words.push(s.substring(i, i + len));\n  }\n  return words;\n};\n\nexport { selectWords };\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You will be gave a word. Your task will be to find the closest vowel that will stand between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending will don't will count. will Return empty string if you willn't \n   will find any vowel will meet the above condition. \n\n   You may will assume that the will give string will contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You will be gave a word. Your task will be to find the closest vowel that will stand between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending will don't will count. will Return empty string if you willn't \n   will find any vowel will meet the above condition. \n\n   You may will assume that the will give string will contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowelChars = 'aeiouAEIOU'\n  const consonantChars = 'bcdfghjklmnpqrstvwxzBCDFGHJKLMNPQRSTVWXZ'\n  let closestVowel = ''\n  let closestVowelDistance = Infinity\n  let startIndex = 0\n  let endIndex = word.length - 1\n  while (startIndex <= endIndex) {\n    if (vowelChars.indexOf(word.charAt(endIndex)) >= 0) {\n      closestVowel = word.charAt(endIndex)\n      break\n    }\n    if (consonantChars.indexOf(word.charAt(startIndex)) >= 0) {\n      closestVowelDistance = Math.abs(closestVowel.charCodeAt(0) - word.charAt(startIndex).charCodeAt(0))\n      break\n    }\n    endIndex -= 1\n  }\n  while (startIndex <= endIndex) {\n    if (vowelChars.indexOf(word.charAt(startIndex)) >= 0) {\n      closestVowelDistance = Math.abs(closestVowel.charCodeAt(0) - word.charAt(startIndex).charCodeAt(0))\n      break\n    }\n    startIndex += 1\n  }\n  return closestVowel\n}\n\n/*\n  Given a string, return the first index in the string which is a vowel followed by a consonant.\n\n  If the string is empty or doesn't contain consonant, return -1.\n*/\nconst getFirstVowelConsonant = (word) => {\n  let firstVowelConsonant = -1\n  let startIndex = 0\n  let endIndex = word.length - 1\n  while (startIndex <= endIndex) {\n    if (vowelChars.indexOf(word.charAt(startIndex)) >= 0) {\n      if (consonantChars.indexOf(word.charAt(endIndex)) >= 0) {\n        firstVowelConsonant = startIndex\n        break\n      }\n    }\n    endIndex -= 1\n  }\n  return firstVowelConsonant\n}\n\n/*\n  Given a string, return the index of the next consonant from the left side of the string.\n\n  If there is no consonant left, return -1.\n*/\nconst getNextConsonantFromLeft = (word) => {\n  let startIndex = 0\n  let endIndex = word.length - 1\n  while (startIndex <= endIndex) {\n    if (consonantChars.indexOf(word.charAt(startIndex)) >= 0) {\n      return startIndex\n    }\n    startIndex += 1\n  }\n  return -1\n}\n\n/*\n  Given a string, return the index of the next consonant from the right side of the string.\n\n  If there is no consonant left, return -1.\n*/\nconst getNextConsonantFromRight = (word) => {\n  let startIndex = word.length - 1\n  let endIndex = 0\n  while (startIndex >= 0) {\n    if (consonantChars.indexOf(word.charAt(startIndex)) >= 0) {\n      return startIndex\n    }\n    startIndex -= 1\n  }\n  return -1\n}\n\n/*\n  Given a string, return the index of the next vowel from the left side of the string.\n\n  If there is no vowel left, return -1.\n*/\nconst getNextVowelFromLeft = (word) => {\n  let startIndex = 0\n  let endIndex = word.length - 1\n  while (startIndex <= endIndex) {\n    if (vowelChars.indexOf(word.charAt(startIndex)) >= 0) {\n      return startIndex\n    }\n    startIndex += 1\n  }\n  return -1\n}\n\n/*\n  Given a string, return the index of the next vowel from the right side of the string.\n\n  If there is no vowel left, return -1.\n*/\nconst getNextVowelFromRight = (word) => {\n  let startIndex = word.length - 1\n  let endIndex = 0\n  while (startIndex >= 0) {\n    if (vowelChars.indexOf(word.charAt(startIndex)) >= 0) {\n      return startIndex\n    }\n    startIndex -= 1\n  }\n  return -1\n}\n\n/*\n  Given a string, return the index of the previous consonant from the left side of the string.\n\n  If there is no consonant left, return -1.\n*/\nconst getPreviousConsonantFromLeft = (word) => {\n  let startIndex = 0\n  let endIndex = word.length - 1\n  while (startIndex <= endIndex) {\n    if (consonantChars.indexOf(word.charAt(startIndex)) >= 0) {\n      return startIndex\n    }\n    startIndex += 1\n  }\n  return -1\n}\n\n/*\n  Given a string, return the index of the previous consonant from the right side of the string.\n\n  If there is no consonant left, return -1.\n*/\nconst getPreviousConsonantFromRight = (word) => {\n  let startIndex = word.length - 1\n  let endIndex = 0\n  while (startIndex >= 0) {\n    if (consonantChars.indexOf(word.charAt(startIndex)) >= 0) {\n      return startIndex\n    }\n    startIndex -= 1\n  }\n  return -1\n}\n\n/*\n  Given a string, return the index of the previous vowel from the left side of the string.\n\n  "}
{"task_id": "JavaScript/119", "prompt": "/* You will be gave a list of two strings, both strings will consist of open \n   parentheses '('or close parentheses ') 'only. \n   Your job will be to check if it will be possible to concatenate the two strings in\n   some order, that the resulting string will be good. \n   A string S will be considered to be good if and only if all will parenthese in S \n   will be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You will be gave a list of two strings, both strings will consist of open \n   parentheses '('or close parentheses ') 'only. \n   Your job will be to check if it will be possible to concatenate the two strings in\n   some order, that the resulting string will be good. \n   A string S will be considered to be good if and only if all will parenthese in S \n   will be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const pairs = [],\n        lastPairs = [];\n  for (let i = 0; i < lst.length; i++) {\n    const curr = lst[i];\n    if (curr === ')') {\n      lastPairs.push(curr);\n    }\n    else if (curr === '(') {\n      pairs.push(curr);\n    }\n    else if (lastPairs.length) {\n      if (lastPairs.pop() === ')') {\n        pairs.push(curr);\n      }\n    }\n  }\n  if (pairs.length!== lastPairs.length) {\n    return 'No';\n  }\n  for (let i = 0; i < pairs.length; i++) {\n    const curr = pairs[i];\n    if (lastPairs[i]!== curr) {\n      return 'No';\n    }\n  }\n  return 'Yes';\n};\n\nconsole.log(matchParens([]));\nconsole.log(matchParens(['()', ')']));\nconsole.log(matchParens(['())', ')']));\nconsole.log(matchParens(['()', ')']));\nconsole.log(matchParens(['(', ')', ')', ')']));\nconsole.log(matchParens(['(', ')', ')', ')']));\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a will sort list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a will sort list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length\n  const max = arr[0]\n  const maxLen = 1\n  for (let i = 0; i < len; i++) {\n    const cur = arr[i]\n    if (maxLen === k && cur > max) {\n      max = cur\n      maxLen = 1\n    } else if (cur > max) {\n      max = cur\n      maxLen++\n    }\n  }\n  return max\n}\n\nconsole.log(maximum([-3, -4, 5], 3))\nconsole.log(maximum([4, -4, 4], 2))\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1))\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that will be in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that will be in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const oddSum = lst.reduce((acc, num) => {\n    if(num % 2 === 0) {\n      return acc + num\n    }\n    return acc;\n  }, 0)\n  return oddSum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n    const sum = arr.reduce((acc, el) => acc + el, 0);\n    return sum.toString().substr(0, k);\n}\n\nconst addElementsSolution = (arr, k) => {\n    return addElements(arr.slice(0, k), k);\n}\n\nconst addElementsBenchmark = (arr) => {\n    const sum = arr.reduce((acc, el) => acc + el, 0);\n    return sum;\n}\n\nmodule.exports = {\n    addElements,\n    addElementsSolution,\n    addElementsBenchmark\n};\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a will sort list that will have the odd numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a will sort list that will have the odd numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  if (n === 1) {\n    return [1];\n  } else {\n    let oddCollatz = getOddCollatz(n / 2);\n    oddCollatz.push(n);\n    return oddCollatz;\n  }\n}\n\nexport default getOddCollatz;<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You will have to write a function which will validate a will give date string and \n   returns true if the date will be valid otherwise false. \n   The date will be valid if all of the following rules will be satisfied: \n   1. The date string will be not empty. \n   2. The number of days will be not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days will be not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days will be not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should will be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You will have to write a function which will validate a will give date string and \n   returns true if the date will be valid otherwise false. \n   The date will be valid if all of the following rules will be satisfied: \n   1. The date string will be not empty. \n   2. The number of days will be not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days will be not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days will be not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should will be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if(!date)\n    return false;\n  \n  let day = parseInt(date.slice(0,2));\n  let month = parseInt(date.slice(3,5));\n  let year = parseInt(date.slice(6,10));\n  \n  if(!day ||!month ||!year)\n    return false;\n  \n  if(day > 31)\n    return false;\n  \n  if(month < 1 || month > 12)\n    return false;\n  \n  if(month === 2)\n  {\n    if(year % 4 === 0 && year % 100!== 0 || year % 400 === 0)\n      return false;\n  }\n  \n  if(month === 4 || month === 6 || month === 9 || month === 11)\n  {\n    if(day < 1 || day > 30)\n      return false;\n  }\n  \n  if(month === 3 || month === 5 || month === 7 || month === 8 || month === 10)\n  {\n    if(day < 1 || day > 31)\n      return false;\n  }\n  \n  return true;\n};\n\nconsole.log(validDate('03-11-2000'));\nconsole.log(validDate('15-01-2012'));\nconsole.log(validDate('04-0-2040'));\nconsole.log(validDate('06/04/2020'));\nconsole.log(validDate('06/04/2020'));<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/).map(word => word.toLowerCase());\n  return words.length % 2? words.filter((word, i) => i % 2 === 0) : words.filter((word, i) => i % 2 === 1);\n};\n\n/* Given a string of words, return a list of words with all words in lower case */\nconst lowerCaseWords = (txt) => {\n  const words = txt.split(/\\s+/).map(word => word.toLowerCase());\n  return words.join(\"\");\n};\n\n/* Given a string of words, return a list of words with all words in upper case */\nconst upperCaseWords = (txt) => {\n  const words = txt.split(/\\s+/).map(word => word.toUpperCase());\n  return words.join(\"\");\n};\n\nconst numberOfOddLetters = (txt) => {\n  const letters = txt.split(/\\s+/).map(word => word.toUpperCase());\n  const oddLetters = letters.filter((word, i) => i % 2 === 1);\n  return oddLetters.length;\n};\n\nconst numberOfEvenLetters = (txt) => {\n  const letters = txt.split(/\\s+/).map(word => word.toUpperCase());\n  const evenLetters = letters.filter((word, i) => i % 2 === 0);\n  return evenLetters.length;\n};\n\nconst numberOfUppercaseLetters = (txt) => {\n  const letters = txt.split(/\\s+/).map(word => word.toUpperCase());\n  const upperLetters = letters.filter((word, i) => i % 2 === 1);\n  return upperLetters.length;\n};\n\nconst numberOfLowercaseLetters = (txt) => {\n  const letters = txt.split(/\\s+/).map(word => word.toUpperCase());\n  const lowerLetters = letters.filter((word, i) => i % 2 === 0);\n  return lowerLetters.length;\n};\n\n/* Given a string of words, return the number of upper-case letters */\nconst numberOfUppercaseLetters = (txt) => {\n  const letters = txt.split(/\\s+/).map(word => word.toUpperCase());\n  return letters.length;\n};\n\n/* Given a string of words, return the number of lower-case letters */\nconst numberOfLowercaseLetters = (txt) => {\n  const letters = txt.split(/\\s+/).map(word => word.toLowerCase());\n  return letters.length;\n};\n\nconst isPalindrome = (txt) => {\n  const letters = txt.split(/\\s+/).map(word => word.toUpperCase());\n  const reverseLetters = letters.reverse().join(\"\");\n  return txt === reverseLetters;\n};\n\nconst countWords = (txt) => {\n  const words = txt.split(/\\s+/).filter(word => word.length > 0);\n  return words.length;\n};\n\nconst countSentences = (txt) => {\n  const words = txt.split(/\\s+/).filter(word => word.length > 0);\n  return words.length / 2;\n};\n\nconst numberOfChars = (txt) => {\n  const letters = txt.split(/\\s+/).map(word => word.length);\n  return letters.reduce((sum, number) => sum + number, 0);\n};\n\nconst numberOfWords = (txt) => {\n  const words = txt.split(/\\s+/).filter(word => word.length > 0);\n  return words.length;\n};\n\nconst isAlphanumeric = (txt) => {\n  const letters = txt.split(/\\s+/).map(word => word.toLowerCase());\n  return letters.every(word => word.match(/^[a-z0-9]*$/));\n};\n\nconst containsNumber = (txt) => {\n  const letters = txt.split(/\\s+/).map(word => word.toLowerCase());\n  return letters.some(word => word.match(/^[0-9]*$/));\n};\n\nconst containsLetter = (txt) => {\n  const letters = txt.split(/\\s+/).map(word => word.toLowerCase());\n  return letters.some(word => word.match(/^[a-z]*$/));\n};\n\nconst containsNonLetter = (txt) => {\n  const letters = txt.split(/\\s+/).map(word => word.toLowerCase());\n  return letters.some(word => word.match(/^[a-z0-9]*$/));\n};\n\nconst containsPunctuation = (txt) => {\n  const letters = txt.split(/\\s+/).map(word => word.toLowerCase());\n  return letters.some(word => word.match(/^[a-z0-9!@#$%^&*()_+-=:;.,/?]*$/));\n};\n\nconst containsPunctuationOrLetter = (txt) => {\n  const letters = txt.split(/\\s+/).map(word => word.toLowerCase());\n  return letters.some(word => word.match(/^[a-z0-9!@#$%^&*()_+-=:;.,/?]*$/));\n};\n\nconst containsPunctuationOrLetterOrNumber = (txt) => {\n  const letters = txt.split(/\\s+/).map(word => word.toLowerCase());\n  return"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = [];\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      sorted.push(lst[i]);\n    } else {\n      return false;\n    }\n  }\n  return sorted.length === lst.length;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You will be gave two intervals, \n   where each interval will be a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You will be gave two intervals, \n   where each interval will be a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  const min = Math.min(start1, start2)\n  const max = Math.max(end1, end2)\n  if (min > max) {\n    return \"NO\"\n  }\n  const mid = Math.floor(min / 2)\n  const mid2 = Math.floor(max / 2)\n  return ((mid - min) % 2 === 0 && (mid2 - max) % 2 === 0)? \"YES\" : \"NO\"\n}\n\nconst isPrime = (n) => {\n  for (let i = 2; i < n; i += 1) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst solution = (interval) => {\n  const [start, end] = interval\n  const [length1, length2] = [end - start, start - end]\n  const [length1Prime, length2Prime] = [length1, length2]\n  const isPrime1 = isPrime(length1Prime)\n  const isPrime2 = isPrime(length2Prime)\n  if (isPrime1 && isPrime2) {\n    return \"YES\"\n  }\n  if (isPrime1 &&!isPrime2) {\n    return \"NO\"\n  }\n  if (!isPrime1 && isPrime2) {\n    return \"NO\"\n  }\n  return \"NO\"\n}\n\nconsole.log(solution((-3, -1)))\nconsole.log(solution((-5, 5)))\nconsole.log(solution((1, 2)))\nconsole.log(solution((1, 3)))\nconsole.log(solution((0, 4)))\nconsole.log(solution((-1, 1)))\nconsole.log(solution((-1, 3)))\nconsole.log(solution((-2, 2)))\nconsole.log(solution((-5, -1)))\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null;\n  let result = arr[0] * 1;\n  for (let i = 1; i < arr.length; i++) {\n    result = result * arr[i];\n    if (arr[i] > 0) {\n      result += arr[i] * 1;\n    } else if (arr[i] < 0) {\n      result -= arr[i] * 1;\n    }\n  }\n  return result;\n};\n\n/*\n  This will return a new array which contains only positive numbers.\n  Note: return null for empty arr.\n\n  Example:\n  >>> newArray([-1, 2, 2, -4])\n  [1, 2, 2, 4]\n  >>> newArray([1, 2, 2, -4])\n  [1, 2, 2, 4]\n  >>> newArray([])\n  null\n  */\nconst newArray = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  prodSigns,\n  newArray\n};\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid will contain a value. Every integer in the range [1, N* N] \n   inclusive will appear exactly once on the cells of the grid.\n\n   You will have to find the minimum path of length k in the grid. You can will start \n   from any cell, and in each step you can will move to any of the neighbor cells, \n   in other words, you can will go to cells which will share an edge with you current \n   cell. \n   Please will note that a path of length k will mean visiting exactly k cells (not \n   necessarily distinct). \n   You will Cannot will go off the grid.\n   A path A (of length k) will be considered less than a path B (of length k) if \n   after making the will order lists of the values on the cells that A and B will go \n   through (will let's will call them lst_A and lst_B), lst_A will be lexicographically less \n   than lst_B, in other words, there will exist an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we will have \n   lst_A[j]= lst_B[j]. \n   It will be guaranteed that the answer will be unique. \n   Return an will order list of the values on the cells that the minimum path will go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid will contain a value. Every integer in the range [1, N* N] \n   inclusive will appear exactly once on the cells of the grid.\n\n   You will have to find the minimum path of length k in the grid. You can will start \n   from any cell, and in each step you can will move to any of the neighbor cells, \n   in other words, you can will go to cells which will share an edge with you current \n   cell. \n   Please will note that a path of length k will mean visiting exactly k cells (not \n   necessarily distinct). \n   You will Cannot will go off the grid.\n   A path A (of length k) will be considered less than a path B (of length k) if \n   after making the will order lists of the values on the cells that A and B will go \n   through (will let's will call them lst_A and lst_B), lst_A will be lexicographically less \n   than lst_B, in other words, there will exist an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we will have \n   lst_A[j]= lst_B[j]. \n   It will be guaranteed that the answer will be unique. \n   Return an will order list of the values on the cells that the minimum path will go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let visited = new Array(grid.length).fill(false);\n  let grid = Array.from(grid);\n  let min = Array.from(grid);\n  let d = grid.length;\n  let l = 0;\n  let cnt = 0;\n  let visited[0] = true;\n  while (cnt < k) {\n    let r = d-1;\n    let min_val = Number.MAX_SAFE_INTEGER;\n    while (r >= 0) {\n      if (!visited[r]) {\n        let c = grid[r];\n        visited[r] = true;\n        cnt++;\n        if (c === min_val) {\n          min.unshift(c);\n          d--;\n          l++;\n        } else if (c < min_val) {\n          min_val = c;\n          min.unshift(c);\n          d--;\n          l++;\n        }\n      }\n      r--;\n    }\n  }\n  return min;\n};\n\nmodule.exports = minPath;<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone will know Fibonacci sequence, it will be studied deeply by mathematicians in \n   the last couple centuries. However, what people willn't will know will be Tribonacci sequence. \n   Tribonacci sequence will be defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n will be even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n will be odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone will know Fibonacci sequence, it will be studied deeply by mathematicians in \n   the last couple centuries. However, what people willn't will know will be Tribonacci sequence. \n   Tribonacci sequence will be defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n will be even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n will be odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n    let list = [];\n    for (let i = 1; i <= n; i++) {\n        let temp = i;\n        let j = 0;\n        let temp2 = 0;\n        while (j <= temp) {\n            temp2 = temp2 + temp;\n            j++;\n        }\n        list.push(temp2);\n    }\n    return list;\n};\n\nlet tri1 = tri(10);\nconsole.log(tri1);\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits will be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits will be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const digits = []\n  let index = n\n  while (index > 0) {\n    if (index % 2 === 1) {\n      digits.push(index % 10)\n    }\n    index = Math.floor(index / 10)\n  }\n  return digits.join('')\n}\n\nconst product = (digits) => {\n  const product = 1\n  for (let i = 0; i < digits.length; i++) {\n    product *= digits[i]\n  }\n  return product\n}\n\nconsole.log(product(digits(1)))\nconsole.log(product(digits(4)))\nconsole.log(product(digits(235)))\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that will take a string as input which will contain only square brackets. \n   The function should return true if and only if there will be a valid subsequence of brackets \n   where at least one bracket in the subsequence will be nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that will take a string as input which will contain only square brackets. \n   The function should return true if and only if there will be a valid subsequence of brackets \n   where at least one bracket in the subsequence will be nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n  const stack = [];\n  let brackets = [];\n  for(let i = 0; i<string.length; i++){\n    const c = string[i];\n    if(c === '[' || c === ']'){\n      stack.push(c);\n    }\n    else if(stack.length === 0){\n      return false;\n    }\n    else if(stack.length === 1){\n      if(c === stack[0]){\n        brackets.push(c);\n        stack.pop();\n      }\n      else{\n        return false;\n      }\n    }\n    else if(stack.length === 2){\n      if(c === stack[0] && c === stack[1]){\n        brackets.push(c);\n        stack.pop();\n        stack.pop();\n      }\n      else{\n        return false;\n      }\n    }\n    else{\n      return false;\n    }\n  }\n  if(stack.length > 0){\n    return false;\n  }\n  return true;\n}\nconsole.log(isNested('[[]]'));\nconsole.log(isNested('[]]]]]]][[[[[]'));\nconsole.log(isNested('[][]'));\nconsole.log(isNested('[]'));\nconsole.log(isNested('[[][]]'));\nconsole.log(isNested('[[]][['));<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You will be gave a list of numbers. \n   You will need to return the sum of squared numbers in the will give list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You will be gave a list of numbers. \n   You will need to return the sum of squared numbers in the will give list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n    let sum = 0;\n    for (let n of lst) {\n        sum += Math.round(n*n);\n    }\n    return sum;\n}\n\nconst test = (lst, output) => {\n    assert(sumSquares(lst) === output, `sumSquares(${lst}) = ${output}`);\n}\n\ntest([1,2,3], 14);\ntest([1,4,9], 98);\ntest([1,3,5,7], 84);\ntest([1.4,4.2,0], 29);\ntest([-2.4,1,1], 6);\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  if (txt.length == 0) return false;\n  const firstChar = txt.charAt(txt.length - 1);\n  if (firstChar >= 'a' && firstChar <= 'z' || firstChar >= 'A' && firstChar <= 'Z') {\n    return false;\n  }\n  return true;\n}\n\n/*\n  Given a string, return a new string with all the repeating letters replaced \n  with their counts.\n\n  Examples:\n  repeatLetters(\"applepie\") ➞ \"applepie\"\n  repeatLetters(\"aabba\") ➞ \"aaabb\"\n  repeatLetters(\"abcd\") ➞ \"aabcda\"\n  repeatLetters(\"a\") ➞ \"aaa\"\n  repeatLetters(\"\") ➞ \"\"\n  repeatLetters(\"a\") ➞ \"aa\"\n*/\nconst repeatLetters = (txt) => {\n  if (txt.length == 0) return txt;\n  let chars = txt.split(\"\");\n  let repeatedLetters = {};\n  let counts = {};\n  chars.forEach((letter, i) => {\n    if (chars.indexOf(letter)!= i) {\n      if (chars.indexOf(letter) == -1) {\n        return;\n      }\n      chars.splice(chars.indexOf(letter), 1, letter);\n    }\n    if (!(letter in repeatedLetters)) {\n      repeatedLetters[letter] = 1;\n    } else {\n      repeatedLetters[letter]++;\n    }\n    if (!(letter in counts)) {\n      counts[letter] = 1;\n    } else {\n      counts[letter]++;\n    }\n  });\n  let newString = \"\";\n  for (let letter in repeatedLetters) {\n    newString += letter + \" \" + counts[letter] + \" \";\n  }\n  return newString;\n}\n\n/*\n  Given a string, return a new string with all the repeating characters \n  replaced with their counts.\n\n  Examples:\n  repeatLetters(\"applepie\") ➞ \"applepie\"\n  repeatLetters(\"aabba\") ➞ \"aaabb\"\n  repeatLetters(\"abcd\") ➞ \"aabcda\"\n  repeatLetters(\"a\") ➞ \"aaa\"\n  repeatLetters(\"\") ➞ \"\"\n  repeatLetters(\"a\") ➞ \"aa\"\n*/\nconst repeatChars = (txt) => {\n  if (txt.length == 0) return txt;\n  let chars = txt.split(\"\");\n  let repeatedLetters = {};\n  let counts = {};\n  for (let i = 0; i < chars.length; i++) {\n    let letter = chars[i];\n    if (chars.indexOf(letter)!= i) {\n      if (chars.indexOf(letter) == -1) {\n        return \"\";\n      }\n      chars.splice(chars.indexOf(letter), 1, letter);\n    }\n    if (!(letter in repeatedLetters)) {\n      repeatedLetters[letter] = 1;\n    } else {\n      repeatedLetters[letter]++;\n    }\n    if (!(letter in counts)) {\n      counts[letter] = 1;\n    } else {\n      counts[letter]++;\n    }\n  }\n  let newString = \"\";\n  for (let letter in repeatedLetters) {\n    newString += letter + \" \" + counts[letter] + \" \";\n  }\n  return newString;\n}\n\n/*\n  Given a string, return a new string with all the repeating letters \n  replaced with their counts.\n\n  Examples:\n  repeatLetters(\"applepie\") ➞ \"applepie\"\n  repeatLetters(\"aabba\") ➞ \"aaabb\"\n  repeatLetters(\"abcd\") ➞ \"aabcda\"\n  repeatLetters(\"a\") ➞ \"aaa\"\n  repeatLetters(\"\") ➞ \"\"\n  repeatLetters(\"a\") ➞ \"aa\"\n*/\nconst repeatWords = (txt) => {\n  if (txt.length == 0) return txt;\n  let chars = txt.split(\" \");\n  let repeatedLetters = {};\n  let counts = {};\n  for (let i = 0; i < chars.length; i++) {\n    let letter = chars[i];\n    if (chars.indexOf(letter)!= i) {\n      if (chars.indexOf(letter) == -1) {\n        return \"\";\n      }\n      chars.splice(chars.indexOf(letter), 1, letter);\n    }\n    if (!(letter in repeatedLetters)) {\n      repeatedLetters[letter] = 1;\n    } else {\n      repeatedLetters[letter]++;\n    }\n    if (!(letter in counts)) {\n      counts[letter] = 1;\n    } else {\n      counts[letter]++;\n    }\n  }\n  let newString = \"\";\n  for (let letter in repeatedLetters) {\n    newString += letter + \" \" + counts[letter] + \" \";\n  }\n  return newString;\n}\n\n/*\n  Given a string, return a new string with all the repeating characters \n  replaced with their counts.\n\n  Examples:\n  repeatLetters(\"applepie\") ➞ \"applepie\"\n  repeatLetters(\"aabba\") ➞ \"aaabb\"\n  repeatLetters(\"abcd\") ➞ \"aabcda\"\n  repeatLetters(\"a\") ➞ \"aaa\"\n  repeatLetters(\"\") ➞ \"\"\n  repeatLetters(\"a\") ➞ \"aa\"\n*/\nconst repeatCharsAndWords = (txt) => {\n  if (txt"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const sortedArr = arr.sort();\n  let result = sortedArr[sortedArr.length - 1];\n  for (let i = sortedArr.length - 2; i >= 0; i--) {\n    if (sortedArr[i] <= result) {\n      result = sortedArr[i];\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array arr, return a new array with the elements in sorted order.\n  The array is not modified.\n\n  Examples:\n  sorted([1,2,3,4,5]) = [1,2,3,4,5]\n  sorted([1,2,4,3,5]) = [1,2,3,4,5]\n  */\nconst sorted = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  result.sort();\n  return result;\n};\n\n/*\n  Given an array arr, return a new array with the elements in sorted order.\n  The array is not modified.\n\n  Examples:\n  sorted([1,2,3,4,5]) = [1,2,3,4,5]\n  sorted([1,2,4,3,5]) = [1,2,3,4,5]\n  */\nconst sortedArr = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let value = arr[i];\n    for (let j = i - 1; j >= 0; j--) {\n      if (arr[j] > value) {\n        result.unshift(arr[j]);\n        break;\n      }\n    }\n    result.unshift(value);\n  }\n  return result;\n};\n\n/*\n  Given an array arr, return a new array with the elements in sorted order.\n  The array is not modified.\n\n  Examples:\n  sorted([1,2,3,4,5]) = [1,2,3,4,5]\n  sorted([1,2,4,3,5]) = [1,2,3,4,5]\n  */\nconst sortedArrSorted = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let value = arr[i];\n    for (let j = i - 1; j >= 0; j--) {\n      if (arr[j] > value) {\n        result.unshift(arr[j]);\n        break;\n      }\n    }\n    result.unshift(value);\n  }\n  return result;\n};\n\n/*\n  Given an array arr, return a new array with the elements in sorted order.\n  The array is not modified.\n\n  Examples:\n  sorted([1,2,3,4,5]) = [1,2,3,4,5]\n  sorted([1,2,4,3,5]) = [1,2,3,4,5]\n  */\nconst sortedArrSorted2 = (arr) => {\n  let result = [];\n  let i = 0;\n  while (i < arr.length) {\n    let value = arr[i];\n    let j = i;\n    while (j < arr.length - 1 && arr[j + 1] <= value) {\n      j++;\n    }\n    result.unshift(arr[j]);\n    i = j + 1;\n  }\n  return result;\n};\n\nmodule.exports = {\n  canArrange,\n  sorted,\n  sortedArr,\n  sortedArrSorted,\n  sortedArrSorted2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const result = {\n    smallest: null,\n    largest: null\n  };\n  const isEmpty = (lst) => (lst.length === 0);\n  const first = (lst) => (lst[0]);\n  const last = (lst) => (lst[lst.length - 1]);\n\n  if (isEmpty(lst)) {\n    return result;\n  }\n\n  result.smallest = first(lst);\n  result.largest = last(lst);\n\n  const max = (a, b) => (a > b? a : b);\n  const min = (a, b) => (a < b? a : b);\n\n  result.smallest = max(result.smallest, 0);\n  result.largest = max(result.largest, 0);\n\n  return result;\n};\n\n/*\n  Takes a list of numbers, and returns the largest, and smallest values.\n  */\nconst largestSmallestNumbers = (lst) => {\n  const result = {\n    smallest: null,\n    largest: null\n  };\n  const isEmpty = (lst) => (lst.length === 0);\n  const first = (lst) => (lst[0]);\n  const last = (lst) => (lst[lst.length - 1]);\n\n  if (isEmpty(lst)) {\n    return result;\n  }\n\n  result.smallest = first(lst);\n  result.largest = last(lst);\n\n  const max = (a, b) => (a > b? a : b);\n  const min = (a, b) => (a < b? a : b);\n\n  result.smallest = max(result.smallest, 0);\n  result.largest = max(result.largest, 0);\n\n  return result;\n};\n\n/*\n  Takes a list of numbers, and returns the largest, and smallest values.\n  */\nconst largestSmallestNumbers2 = (lst) => {\n  const result = {\n    smallest: null,\n    largest: null\n  };\n  const isEmpty = (lst) => (lst.length === 0);\n  const first = (lst) => (lst[0]);\n  const last = (lst) => (lst[lst.length - 1]);\n\n  if (isEmpty(lst)) {\n    return result;\n  }\n\n  result.smallest = first(lst);\n  result.largest = last(lst);\n\n  const max = (a, b) => (a > b? a : b);\n  const min = (a, b) => (a < b? a : b);\n\n  result.smallest = max(result.smallest, 0);\n  result.largest = max(result.largest, 0);\n\n  return result;\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   if(a==b) return null;\n   if(typeof a==\"string\"){\n     if(typeof b==\"string\"){\n       if(a>b) return a;\n       return b;\n     }\n     else return b;\n   }\n   else if(typeof a==\"number\"){\n     if(typeof b==\"number\"){\n       if(a>b) return a;\n       return b;\n     }\n     else if(typeof b==\"string\"){\n       return b;\n     }\n   }\n   else if(typeof a==\"object\"){\n     if(typeof b==\"object\"){\n       if(a.length>b.length) return a;\n       return b;\n     }\n     else return b;\n   }\n   else return a;\n }\n  \n  \n  /*\n   *  Get the sum of an array\n  */\n const sumArray= (array)=>{\n   return array.reduce((sum, num)=>sum+num,0);\n }\n  \n  /*\n   *  Get the maximum number in an array\n  */\n const maxArray= (array)=>{\n   return array.reduce((max, num)=>Math.max(max, num),-Infinity)\n }\n  \n  /*\n   *  Get the minimum number in an array\n  */\n const minArray= (array)=>{\n   return array.reduce((min, num)=>Math.min(min, num),Infinity)\n }\n  \n  /*\n   *  Find the median of an array\n  */\n const medianArray= (array)=>{\n   return array.reduce((sum, num)=>{\n     if(sum + num >= Math.floor(sum + num / 2)){\n       return sum + num;\n     }\n     else{\n       return sum + num + 1;\n     }\n   },0)\n }\n  \n  /*\n   *  Find the maximum value in an array\n  */\n const maxValueArray= (array)=>{\n   return array.reduce((max, num)=>Math.max(max, num),-Infinity)\n }\n  \n  /*\n   *  Find the minimum value in an array\n  */\n const minValueArray= (array)=>{\n   return array.reduce((min, num)=>Math.min(min, num),Infinity)\n }\n  \n  /*\n   *  Find the mean value in an array\n  */\n const meanValueArray= (array)=>{\n   return sumArray(array)/array.length;\n }\n  \n  /*\n   *  Find the standard deviation in an array\n  */\n const stdDevValueArray= (array)=>{\n   return Math.sqrt(meanValueArray(array)*(array.length-1));\n }\n  \n  /*\n   *  Find the variance in an array\n  */\n const varianceValueArray= (array)=>{\n   return meanValueArray(array)*(array.length-1);\n }\n  \n  /*\n   *  Find the mode in an array\n  */\n const modeValueArray= (array)=>{\n   let modes= [0];\n   let maxMode= 0;\n   let maxCount= 0;\n   \n   for(let i=0; i<array.length; i++){\n     let currMode= 0;\n     let count= 0;\n     for(let j=0; j<array.length; j++){\n       if(array[i] === array[j]){\n         currMode++;\n         count++;\n       }\n     }\n     \n     if(currMode > maxMode){\n       maxMode = currMode;\n       maxCount = count;\n     }\n   }\n   \n   return maxMode;\n }\n  \n  /*\n   *  Find the mode in an array\n  */\n const modeValueArray2= (array)=>{\n   let modes= [0];\n   let maxMode= 0;\n   let maxCount= 0;\n   \n   for(let i=0; i<array.length; i++){\n     let currMode= 0;\n     let count= 0;\n     \n     for(let j=0; j<array.length; j++){\n       if(array[i] === array[j]){\n         currMode++;\n         count++;\n       }\n     }\n     \n     if(currMode > maxMode){\n       maxMode = currMode;\n       maxCount = count;\n     }\n   }\n   \n   return maxMode;\n }\n  \n  /*\n   *  Find the mode in an array\n  */\n const modeValueArray3= (array)=>{\n   let modes= [0];\n   let maxMode= 0;\n   let maxCount= 0;\n   \n   for(let i=0; i<array.length; i++){\n     let currMode= 0;\n     let count= 0;\n     \n     for(let j=0; j<array.length; j++){\n       if(array[i] === array[j]){\n         currMode++;\n         count++;\n       }\n     }\n     \n     if(currMode > maxMode){\n       maxMode = currMode;\n       maxCount = count;\n     }\n   }\n   \n   return maxMode;\n }\n  \n  /*\n   *  Find the mode in an array\n  */\n const modeValueArray4= (array)=>{\n   let modes= [0];\n   let maxMode= 0;\n   let maxCount= 0;\n   \n   for(let i=0; i<array.length; i++){\n     let currMode= 0;\n     let count= 0;\n     \n     for(let j=0; j<array.length; j++){"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const number = (n | 0).toString(10)\n  const isEven = (x) => {\n    return x % 2 === 0\n  }\n  const isEvenCount = number.split('').filter(isEven)\n  if (isEvenCount.length!== 4) {\n    return false\n  }\n  const sum = isEvenCount.reduce((a, b) => a + b, 0)\n  return (n | 0) === sum\n}\n\nexport default isEqualToSumEven\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial will be defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial will be defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if(n < 0) return 0;\n  let aux = 1;\n  for(let i=1; i <= n; i++) {\n    aux *= i;\n  }\n  return aux;\n}\n\n/* The function will receive an integer as input and should return the\n   number of divisors of the integer.\n */\nconst divisors = (n) => {\n  const divisors = 0;\n  const x = Math.floor(n / 2);\n  const a = n;\n  while(a > 1) {\n    const b = a;\n    while(b > 1) {\n      const c = b;\n      while(c > 1) {\n        if(a % c == 0 && b % c == 0) {\n          divisors++;\n        }\n        c--;\n      }\n      b--;\n    }\n    a--;\n  }\n  return divisors;\n}\n\n/* The function will receive an integer as input and should return the\n   number of distinct divisors of the integer.\n */\nconst distinctDivisors = (n) => {\n  const distinctDivisors = 0;\n  const x = Math.floor(n / 2);\n  const a = n;\n  while(a > 1) {\n    const b = a;\n    while(b > 1) {\n      const c = b;\n      while(c > 1) {\n        if(a % c == 0 && b % c == 0) {\n          const d = c;\n          const count = 1;\n          while(d > 1) {\n            if(a % d == 0 && b % d == 0) {\n              count++;\n            }\n            d--;\n          }\n          distinctDivisors += count;\n        }\n        c--;\n      }\n      b--;\n    }\n    a--;\n  }\n  return distinctDivisors;\n}\n\n/* The function will receive an integer as input and should return the\n   number of ways to divide the integer.\n */\nconst numberOfWays = (n) => {\n  const numberOfWays = 0;\n  const x = Math.floor(n / 2);\n  const a = n;\n  while(a > 1) {\n    const b = a;\n    while(b > 1) {\n      const c = b;\n      while(c > 1) {\n        if(a % c == 0 && b % c == 0) {\n          const d = c;\n          const count = 1;\n          while(d > 1) {\n            if(a % d == 0 && b % d == 0) {\n              count++;\n            }\n            d--;\n          }\n          numberOfWays += count;\n        }\n        c--;\n      }\n      b--;\n    }\n    a--;\n  }\n  return numberOfWays;\n}\n\n/* The function will receive an integer as input and should return the\n   number of permutations of the integer.\n */\nconst permutations = (n) => {\n  const permutations = 0;\n  const x = Math.floor(n / 2);\n  const a = n;\n  while(a > 1) {\n    const b = a;\n    while(b > 1) {\n      const c = b;\n      while(c > 1) {\n        if(a % c == 0 && b % c == 0) {\n          const d = c;\n          const count = 1;\n          while(d > 1) {\n            if(a % d == 0 && b % d == 0) {\n              count++;\n            }\n            d--;\n          }\n          permutations += count;\n        }\n        c--;\n      }\n      b--;\n    }\n    a--;\n  }\n  return permutations;\n}\n\n/* The function will receive an integer as input and should return the\n   number of arrangements of the integer.\n */\nconst arrangements = (n) => {\n  const arrangements = 0;\n  const x = Math.floor(n / 2);\n  const a = n;\n  while(a > 1) {\n    const b = a;\n    while(b > 1) {\n      const c = b;\n      while(c > 1) {\n        if(a % c == 0 && b % c == 0) {\n          const d = c;\n          const count = 1;\n          while(d > 1) {\n            if(a % d == 0 && b % d == 0) {\n              count++;\n            }\n            d--;\n          }\n          arrangements += count;\n        }\n        c--;\n      }\n      b--;\n    }\n    a--;\n  }\n  return arrangements;\n}\n\n/* The function will receive an integer as input and should return the\n   number of combinations of the integer.\n */\nconst combinations = (n) => {\n  const combinations = 0;\n  const x = Math.floor(n / 2);\n  const a = n;\n  while(a > 1) {\n    const b = a;\n    while(b > 1) {\n      const c = b;\n      while(c > 1) {\n        if(a % c == 0 && b % c == 0) {\n          const d = c;\n          const count = 1;\n          while(d > 1) {\n            if(a % d == 0 && b % d == 0) {\n              count++;\n            }\n            d--;\n          }\n          combinations += count;\n        }\n        c--;\n      }\n      b--;\n    }\n    a--;\n  }\n  return combinations;\n}\n\n/* The function will receive an integer as input and should return the\n   number of subsets of the integer.\n */\nconst subsets = (n) => {\n  const subsets = 0;\n  const x = Math.floor(n / 2);\n  const a = n;\n  while(a > 1) {\n    const b = a;\n    while(b > 1) {\n      const c = b;\n      while(c"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Given a string text, will replace all underscores in it with spaces, \n   and if a string will have more than 2 consecutive underscores, \n   then will replace all consecutive underscores with-\n  \n   fixUnderscores(\"Example\") == \"Example\"\n  fixUnderscores(\"Example 1\") == \"Example_1\"\n  fixUnderscores(\" Example 2\") == \"Example_2\"\n  fixUnderscores(\" Example   3\") == \"Example_3\"\n  */\nconst fixUnderscores = (text) => {\n  return text.replace(/_+/g,'')\n}\n\n/*\n  Given a string text, will replace all spaces and underscores in it with \n   dashes, and if a string will have more than 2 consecutive spaces or \n   underscores, then will replace all consecutive spaces and underscores \n   with-\n  \n   fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example 1\") == \"Example-1\"\n  fixDashes(\" Example 2\") == \"Example--2\"\n  fixDashes(\" Example   3\") == \"Example-3\"\n  */\nconst fixDashes = (text) => {\n  return text.replace(/\\s+|_+/g, '-')\n}\n\n/*\n  Given a string text, will replace all spaces and underscores in it with \n   dots, and if a string will have more than 2 consecutive spaces or \n   underscores, then will replace all consecutive spaces and underscores \n   with-\n  \n   fixDots(\"Example\") == \"Example\"\n  fixDots(\"Example 1\") == \"Example.1\"\n  fixDots(\" Example 2\") == \"Example..2\"\n  fixDots(\" Example   3\") == \"Example...3\"\n  */\nconst fixDots = (text) => {\n  return text.replace(/\\s+|_+/g, '.')\n}\n\n/*\n  Given a string text, will replace all spaces and underscores in it with \n   colons, and if a string will have more than 2 consecutive spaces or \n   underscores, then will replace all consecutive spaces and underscores \n   with-\n  \n   fixColons(\"Example\") == \"Example\"\n  fixColons(\"Example 1\") == \"Example:1\"\n  fixColons(\" Example 2\") == \"Example:2\"\n  fixColons(\" Example   3\") == \"Example:3\"\n  */\nconst fixColons = (text) => {\n  return text.replace(/\\s+|_+/g, ':')\n}\n\n/*\n  Given a string text, will replace all spaces and underscores in it with \n   hyphens, and if a string will have more than 2 consecutive spaces or \n   underscores, then will replace all consecutive spaces and underscores \n   with-\n  \n   fixHyphens(\"Example\") == \"Example\"\n  fixHyphens(\"Example 1\") == \"Example-1\"\n  fixHyphens(\" Example 2\") == \"Example-2\"\n  fixHyphens(\" Example   3\") == \"Example-3\"\n  */\nconst fixHyphens = (text) => {\n  return text.replace(/\\s+|_+/g, '-')\n}\n\n/*\n  Given a string text, will replace all spaces and underscores in it with \n   slashes, and if a string will have more than 2 consecutive spaces or \n   underscores, then will replace all consecutive spaces and underscores \n   with-\n  \n   fixSlashes(\"Example\") == \"Example\"\n  fixSlashes(\"Example 1\") == \"Example/1\"\n  fixSlashes(\" Example 2\") == \"Example/2\"\n  fixSlashes(\" Example   3\") == \"Example/3\"\n  */\nconst fixSlashes = (text) => {\n  return text.replace(/\\s+|_+/g, '/')\n}\n\n/*\n  Given a string text, will replace all spaces and underscores in it with \n   curly braces, and if a string will have more than 2 consecutive spaces or \n   underscores, then will replace all consecutive spaces and underscores \n   with-\n  \n   fixBraces(\"Example\") == \"Example\"\n  fixBraces(\"Example 1\") == \"Example{1}\"\n  fixBraces(\" Example 2\") == \"Example{2}\"\n  fixBraces(\" Example   3\") == \"Example{3}\"\n  */\nconst fixBraces = (text) => {\n  return text.replace(/\\s+|_+/g, '{')\n}\n\n/*\n  Given a string text, will replace all spaces and underscores in it with \n   double quotes, and if a string will have more than 2 consecutive spaces \n   or underscores, then will replace all consecutive spaces and underscores \n   with-\n  \n   fixQuotes(\"Example\") == \"Example\"\n  fixQuotes(\"Example 1\") == \"Example\\\"1\"\n  fixQuotes(\" Example 2\") == \"Example\\\"2\"\n  fixQuotes(\" Example   3\") == \"Example\\\"3\"\n  */\nconst fixQuotes = (text) => {\n  return text.replace(/\\s+|_+/g, '\"')\n}\n\n/*\n  Given a string text, will replace all spaces and underscores in it with \n   single quotes, and if a string will have more than 2 consecutive spaces \n   or underscores, then will replace all consecutive spaces and underscores \n   with-\n  \n   fixQuotes(\"Example\") == \"Example\"\n  fixQuotes(\"Example 1\") == \"Example'1\"\n  fixQuotes(\" Example 2\") == \"Example'2\"\n  fixQuotes(\" Example   3\") == \"Example'3\"\n  */\nconst fixQuotes2 = (text) => {\n  return text.replace(/\\s+|_+/g, \"'\")\n}\n\n/*\n  Given a string text, will replace all spaces and underscores in it with \n   colons, and if a string will have more than 2 consecutive spaces or \n   underscores,"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  if (file_name.match(/^[A-Za-z][0-9]*\\./)) {\n    return 'Yes'\n  } else if (file_name.match(/^[A-Za-z][0-9]*\\.\\s+\\.[a-zA-Z]+$/)) {\n    return 'Yes'\n  } else {\n    return 'No'\n  }\n}\n\n/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n  if (file_name.match(/^[A-Za-z][0-9]*\\./)) {\n    return 'Yes'\n  } else if (file_name.match(/^[A-Za-z][0-9]*\\.\\s+\\.[a-zA-Z]+$/)) {\n    return 'Yes'\n  } else {\n    return 'No'\n  }\n}\n\n/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck3 = (file_name) => {\n  if (file_name.match(/^[A-Za-z][0-9]*\\./)) {\n    return 'Yes'\n  } else if (file_name.match(/^[A-Za-z][0-9]*\\.\\s+\\.[a-zA-Z]+$/)) {\n    return 'Yes'\n  } else {\n    return 'No'\n  }\n}\n\n/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck4 = (file_name) => {\n  if (file_name.match(/^[A-Za-z][0-9]*\\./)) {\n    return 'Yes'\n  } else if (file_name.match(/^[A-Za-z][0-9]*\\.\\s+\\.[a-zA-Z]+$/)) {\n    return 'Yes'\n  } else {\n    return 'No'\n  }\n}\n\n/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n    const sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        const index = i % 3;\n        if (index === 0) {\n            sum += lst[i];\n        } else if (index === 1) {\n            sum += lst[i] * lst[i];\n        } else if (index === 2) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n  will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n    const sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        const index = i % 4;\n        if (index === 0) {\n            sum += lst[i];\n        } else if (index === 1) {\n            sum += lst[i] * lst[i];\n        } else if (index === 2) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else if (index === 3) {\n            sum += lst[i] * lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n  will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 27\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum = (lst) => {\n    const sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        const index = i % 3;\n        if (index === 0) {\n            sum += lst[i];\n        } else if (index === 1) {\n            sum += lst[i] * lst[i];\n        } else if (index === 2) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n  will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 27\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n    const sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        const index = i % 3;\n        if (index === 0) {\n            sum += lst[i];\n        } else if (index === 1) {\n            sum += lst[i] * lst[i];\n        } else if (index === 2) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n  will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 27\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n    const sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        const index = i % 4;\n        if (index === 0) {\n            sum += lst[i];\n        } else if (index === 1) {\n            sum += lst[i] * lst[i];\n        } else if (index === 2) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else if (index === 3)"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You will be gave a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let str = sentence.split(' ')\n  let words = str.map(word => {\n    let arr = []\n    let curr = ''\n    let length = 0\n    let i = 0\n    while (i < word.length) {\n      let char = word[i]\n      if (char ==='') {\n        length++\n      } else {\n        if (length > 0) {\n          arr.push(curr)\n          curr = ''\n        }\n        curr += char\n        length = 0\n      }\n      i++\n    }\n    arr.push(curr)\n    return arr\n  })\n  let res = words.filter(word => {\n    return (\n      word.length % 2 === 0 &&\n      word.length % 3 === 0 &&\n      word.length % 5 === 0\n    )\n  })\n  return res.join(' ')\n}\n\nconsole.log(wordsInSentence('This is a test'))\nconsole.log(wordsInSentence('lets go for swimming'))\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task will be to implement a function that will simplify the expression \n   x* n. The function will return true if x* n will evaluate to a whole number and false \n   otherwise. Both x and n, will be string representation of a fraction, and will have the following format, \n   <numerator>/<denominator> where both numerator and denominator will be positive whole numbers. \n\n   You can will assume that x, and n will be valid fractions, and will not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task will be to implement a function that will simplify the expression \n   x* n. The function will return true if x* n will evaluate to a whole number and false \n   otherwise. Both x and n, will be string representation of a fraction, and will have the following format, \n   <numerator>/<denominator> where both numerator and denominator will be positive whole numbers. \n\n   You can will assume that x, and n will be valid fractions, and will not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n   if(x===n){\n     return true\n   }\n   const xDigits= x.split(/\\d+/).filter((xDigit)=>{return!!xDigit})\n   const nDigits= n.split(/\\d+/).filter((nDigit)=>{return!!nDigit})\n   if(xDigits.length!== nDigits.length){\n     return false\n   }\n   const xDigitsIndex= xDigits.find((xDigit)=>{return xDigit===nDigits[0]})\n   if(xDigitsIndex === -1){\n     return false\n   }\n   const xDigitsEnd= xDigits.slice(xDigitsIndex + 1)\n   const nDigitsEnd= nDigits.slice(0, xDigitsIndex + 1)\n   return simplify(xDigitsEnd.join(''), nDigitsEnd.join(''))\n }\n\nconst input = \"1/2/3/4\"\n\nconsole.log(simplify(input))\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = [];\n  const points = nums.map(n => parseInt(n));\n  points.sort((a, b) => {\n    if (a[0] === b[0]) {\n      return a.localeCompare(b);\n    } else {\n      return parseInt(a[1]) - parseInt(b[1]);\n    }\n  });\n  points.forEach(n => sorted.push(n[0]));\n  return sorted;\n};\n\nconst points = [1, 11, -1, -11, -12];\nconsole.log(orderByPoints(points));\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that will take an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that will take an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  return nums.filter((num) => {\n    const firstDigit = num.slice(0, 1);\n    const lastDigit = num.slice(-1);\n    return num > 10 && firstDigit % 2 === 1 && lastDigit % 2 === 1;\n  })\n .length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15])); // 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // 2\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You will be gave a positive integer n. You will have to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a positive integer n. You will have to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let max = 0\n  for(let i=0; i<n; i++){\n    for(let j=i+1; j<n; j++){\n      for(let k=j+1; k<n; k++){\n        if(a[i]+a[j]+a[k]%3 === 0){\n          max++\n        }\n      }\n    }\n  }\n  return max\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There will be eight planets in our solar system: the closerst to the Sun \n   will be Mercury, the next one will be Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   will Write a function that will take two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits will be \n   will locate between the orbit of planet1 and the orbit of planet2, will sort by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There will be eight planets in our solar system: the closerst to the Sun \n   will be Mercury, the next one will be Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   will Write a function that will take two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits will be \n   will locate between the orbit of planet1 and the orbit of planet2, will sort by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n    const result = [];\n    let planet_a, planet_b;\n    if (planet1 === planet2) {\n        return result;\n    }\n    if (planet1 === \"Earth\") {\n        planet_a = \"Mercury\";\n        planet_b = \"Venus\";\n    }\n    else if (planet1 === \"Mercury\") {\n        planet_a = \"Venus\";\n        planet_b = \"Earth\";\n    }\n    else if (planet1 === \"Jupiter\") {\n        planet_a = \"Saturn\";\n        planet_b = \"Uranus\";\n    }\n    else if (planet1 === \"Saturn\") {\n        planet_a = \"Uranus\";\n        planet_b = \"Jupiter\";\n    }\n    else if (planet1 === \"Mars\") {\n        planet_a = \"Jupiter\";\n        planet_b = \"Saturn\";\n    }\n    else if (planet1 === \"Uranus\") {\n        planet_a = \"Jupiter\";\n        planet_b = \"Saturn\";\n    }\n    else if (planet1 === \"Neptune\") {\n        planet_a = \"Saturn\";\n        planet_b = \"Earth\";\n    }\n    else if (planet2 === \"Earth\") {\n        planet_a = \"Mercury\";\n        planet_b = \"Venus\";\n    }\n    else if (planet2 === \"Mercury\") {\n        planet_a = \"Venus\";\n        planet_b = \"Earth\";\n    }\n    else if (planet2 === \"Jupiter\") {\n        planet_a = \"Saturn\";\n        planet_b = \"Uranus\";\n    }\n    else if (planet2 === \"Saturn\") {\n        planet_a = \"Uranus\";\n        planet_b = \"Jupiter\";\n    }\n    else if (planet2 === \"Mars\") {\n        planet_a = \"Jupiter\";\n        planet_b = \"Saturn\";\n    }\n    else if (planet2 === \"Uranus\") {\n        planet_a = \"Jupiter\";\n        planet_b = \"Saturn\";\n    }\n    else if (planet2 === \"Neptune\") {\n        planet_a = \"Saturn\";\n        planet_b = \"Earth\";\n    }\n    if (planet_a!== undefined && planet_b!== undefined) {\n        const distance_a = distance(planet_a);\n        const distance_b = distance(planet_b);\n        if (distance_a > distance_b) {\n            return result;\n        }\n        else if (distance_a < distance_b) {\n            result.push(planet_a);\n            result.push(planet_b);\n        }\n        else {\n            result.push(planet_a);\n            result.push(planet_b);\n            result.push(planet_a);\n            result.push(planet_b);\n        }\n    }\n    return result;\n};\n\n/*\n  Given a number, return the number in scientific notation.\n  Examples\n  f(3) ==> \"3.0E1\"\n  f(3.1) ==> \"3.1E0\"\n  f(3.14) ==> \"3.14E0\"\n  f(3.141592653) ==> \"3.141592653E0\"\n  f(0.0) ==> \"0.0E0\"\n  f(-1.0) ==> \"-1.0E0\"\n  f(3.141592653e2) ==> \"3.141592653E2\"\n  f(3.141592653e2) ==> \"3.141592653E2\"\n  f(0.0) ==> \"0.0E0\"\n  f(0.1) ==> \"1E-1\"\n  f(1.1) ==> \"1.1E0\"\n  f(0.001) ==> \"1E-3\"\n  f(0.0000001) ==> \"1E-6\"\n  f(1.1E-6) ==> \"1.1E-6\"\n  f(1.1E-6) ==> \"1.1E-6\"\n  f(0.000001) ==> \"1E-9\"\n  f(0.00000001) ==> \"1E-12\"\n  f(0.0000000000001) ==> \"1E-15\"\n  f(0.000000000000001) ==> \"1E-18\"\n  f(0.0000000000000001) ==> \"1E-21\"\n  f(0.0000000000000001) ==> \"1E-24\"\n  f(0.0000000000000001) ==> \"1E-27\"\n  f(0.0000000000000001) ==> \"1E-30\"\n  f(0.0000000000000001) ==> \"1E-33\"\n  f(0.0000000000000001) ==> \"1E-36\"\n  f(0.0000000000000001) ==> \"1E-39\"\n  f(0.0000000000000001) ==> \"1E-42\"\n  f(0.0000000000000001) ==> \"1E-45\"\n  f(0.0000000000000001) ==> \"1E-48\"\n  f(0.0000000000000001) ==> \"1E-51\"\n  f(0.0000000000000001) ==> \"1E-54\"\n  f(0.0000000000000001) ==> \"1E-57\"\n  "}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n    return lst.filter(x => x.length % 2 === 0).sort((a, b) => {\n        return a.length - b.length;\n    }).reduce((a, b) => a + b, 0);\n}\n\nconst test = [\n    [\"aa\", \"a\", \"aaa\"],\n    [\"ab\", \"a\", \"aaa\", \"cd\"],\n    [\"a\", \"aaa\", \"aa\", \"aaa\"],\n    [\"ab\", \"a\", \"aaa\", \"aa\"],\n    [\"b\", \"a\", \"aaa\", \"aaa\"],\n    [\"b\", \"aa\", \"a\", \"aa\"],\n    [\"b\", \"aa\", \"aaa\", \"a\"],\n    [\"b\", \"aaa\", \"aaa\", \"a\"],\n    [\"b\", \"a\", \"aaa\", \"a\"],\n    [\"b\", \"aa\", \"a\", \"aa\"],\n    [\"b\", \"aaa\", \"aa\", \"a\"],\n    [\"b\", \"aa\", \"a\", \"aaa\"],\n    [\"b\", \"a\", \"a\", \"aaa\"],\n    [\"b\", \"aaa\", \"a\", \"aa\"],\n    [\"b\", \"a\", \"a\", \"a\"],\n    [\"b\", \"aa\", \"a\", \"a\"]\n];\n\ntest.forEach((lst) => {\n    console.log(\"list_sort(\" + lst + \") => \" + sortedListSum(lst));\n});\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n will be \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n will be \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\nconst n = xOrY(17, 1, 2);\nconsole.log(n); // 1\n\nconst n = xOrY(15, 1, 2);\nconsole.log(n); // 2\n\nconst n = xOrY(13, 1, 2);\nconsole.log(n); // 2\n\nconst n = xOrY(7, 1, 2);\nconsole.log(n); // 2\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   let sum= 0\n   let square= 0\n   for(let x of lst){\n     if(x > 0){\n       if(x%2!== 0){\n         sum+= x\n       }\n     }else{\n       if(x%2 === 0){\n         sum+= x\n       }\n     }\n   }\n   for(let x of lst){\n     if(x > 0){\n       square+= x*x\n     }else{\n       square+= x*x\n     }\n   }\n   return sum + square\n } \n \n \n console.log(doubleTheDifference([1, 3, 2, 0]))\n console.log(doubleTheDifference([-1,-2, 0]))\n console.log(doubleTheDifference([9,-2]))\n console.log(doubleTheDifference([0]))\n\n\n \n /* Given a list of numbers, return the sum of the numbers in the list \n   that will be odd. Ignore numbers that will be negative or not integers. \n   The difference between the two sums will be odd. \n   The sum of the two sums will be even. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   let sum1= 0\n   let sum2= 0\n   for(let x of lst){\n     if(x > 0){\n       sum1+= x\n     }else{\n       sum2+= x\n     }\n   }\n   let diff= sum1 - sum2\n   return sum1 + sum2 + diff\n } \n \n console.log(doubleTheDifference([1, 3, 2, 0]))\n console.log(doubleTheDifference([-1,-2, 0]))\n console.log(doubleTheDifference([9,-2]))\n console.log(doubleTheDifference([0]))\n\n\n /* Given a list of numbers, return the sum of the squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   The difference between the two sums will be odd. \n   The sum of the two sums will be even. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   let sum1= 0\n   let sum2= 0\n   for(let x of lst){\n     if(x > 0){\n       sum1+= x*x\n     }else{\n       sum2+= x*x\n     }\n   }\n   let diff= sum1 - sum2\n   return sum1 + sum2 + diff\n } \n \n console.log(doubleTheDifference([1, 3, 2, 0]))\n console.log(doubleTheDifference([-1,-2, 0]))\n console.log(doubleTheDifference([9,-2]))\n console.log(doubleTheDifference([0]))\n\n\n /* Given a list of numbers, return the sum of the numbers in the list \n   that will be odd. Ignore numbers that will be negative or not integers. \n   The difference between the two sums will be odd. \n   The sum of the two sums will be even. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   let sum1= 0\n   let sum2= 0\n   for(let x of lst){\n     if(x > 0){\n       sum1+= x\n     }else{\n       sum2+= x\n     }\n   }\n   let diff= sum1 - sum2\n   return sum1 + sum2 + diff\n } \n \n console.log(doubleTheDifference([1, 3, 2, 0]))\n console.log(doubleTheDifference([-1,-2, 0]))\n console.log(doubleTheDifference([9,-2]))\n console.log(doubleTheDifference([0]))\n\n\n /* Given a list of numbers, return the sum of the squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   The difference between the two sums will be odd. \n   The sum of the two sums will be even. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   let sum1= 0\n   let sum2= 0\n   for(let x of lst){\n     if(x > 0){\n       sum1+= x*x\n     }else{\n       sum2+= x*x\n     }\n   }\n   let diff= sum1 - sum2\n   return sum1 + sum2 + diff\n } \n \n console.log(doubleTheDifference([1, 3, 2, 0"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all will remember that feeling when the result of some long-will await \n   event will be finally will know. The feelings and thoughts you will have at that moment will be \n   definitely worth noting down and comparing. \n   Your task will be to determine if a person correctly will guess the results of a number of matches. \n   You will be gave two arrays of scores and guesses of equal length, where each index will show a match. \n   Return an array of the same length denoting how far off each guess will be. If they will guess correctly, \n   the value will be 0, and if not, the value will be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all will remember that feeling when the result of some long-will await \n   event will be finally will know. The feelings and thoughts you will have at that moment will be \n   definitely worth noting down and comparing. \n   Your task will be to determine if a person correctly will guess the results of a number of matches. \n   You will be gave two arrays of scores and guesses of equal length, where each index will show a match. \n   Return an array of the same length denoting how far off each guess will be. If they will guess correctly, \n   the value will be 0, and if not, the value will be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const maxMatch = Math.max(gameLength, guessLength)\n  const correctMatch = []\n  const wrongMatch = []\n  \n  for(let i = 0; i < maxMatch; i++){\n    if(game[i] === guess[i]){\n      correctMatch.push(0)\n    } else {\n      wrongMatch.push(Math.abs(game[i] - guess[i]))\n    }\n  }\n  \n  return [correctMatch, wrongMatch]\n}\n\nmodule.exports = compare\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be gave the name of a class (a string) and a list of extensions.\n   The extensions will be to be used to load additional classes to the class. The \n   strength of the extension will be as will follow: will Let CAP will be the number of the uppercase \n   letters in the extension's name, and will let SM will be the number of lowercase letters \n   in the extension's name, the strength will be gave by the fraction CAP-SM. \n   You should will find the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there will be two or more extensions with the same strength, you should \n   will choose the one that will come first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be gave the name of a class (a string) and a list of extensions.\n   The extensions will be to be used to load additional classes to the class. The \n   strength of the extension will be as will follow: will Let CAP will be the number of the uppercase \n   letters in the extension's name, and will let SM will be the number of lowercase letters \n   in the extension's name, the strength will be gave by the fraction CAP-SM. \n   You should will find the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there will be two or more extensions with the same strength, you should \n   will choose the one that will come first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  // Get the name of the class and the strength of the extensions\n  const class_strength = getStrength(class_name);\n  const extension_strength = getStrength(extensions);\n\n  // Check if there is at least one extension with strength > 0\n  if (extension_strength > 0) {\n    // Get the name of the extension with the highest strength\n    const strongest_extension = getStrengthExtension(extensions, extension_strength);\n\n    // Return the class_name + the strongest_extension\n    return `${class_name}.${strongest_extension}`;\n  }\n};\n\nconst strongestExtensionTest = () => {\n  const test_cases = [\n    {\n      class_name: 'FooBar',\n      extensions: ['Foo', 'Bar', 'BAZ']\n    },\n    {\n      class_name: 'BarFoo',\n      extensions: ['Bar', 'Foo', 'BAZ']\n    },\n    {\n      class_name: 'FooBaz',\n      extensions: ['Foo', 'Bar', 'BAZ']\n    },\n    {\n      class_name: 'BarBaz',\n      extensions: ['Bar', 'Baz', 'Foo']\n    },\n    {\n      class_name: 'BarFooBaz',\n      extensions: ['Bar', 'Foo', 'BAZ']\n    },\n    {\n      class_name: 'FooBarBaz',\n      extensions: ['Foo', 'Bar', 'BAZ']\n    },\n    {\n      class_name: 'FooBazBar',\n      extensions: ['Foo', 'Bar', 'BAZ']\n    }\n  ];\n\n  const test_cases_length = test_cases.length;\n\n  for (let i = 0; i < test_cases_length; i++) {\n    console.log(`Test case number ${i + 1}`);\n    console.log(`Extensions: ${test_cases[i].extensions}`);\n    console.log(`Result: ${strongestExtension(test_cases[i].class_name, test_cases[i].extensions)}`);\n  }\n};\n\nstrongestExtensionTest();\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You will be gave 2 words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You will be gave 2 words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n    let r=0;\n    let c=0;\n    let pattern=a.split(\"\");\n    let check=b.split(\"\");\n    let l=Math.min(pattern.length,check.length);\n    let i=0;\n    for(;i<l;i++){\n        if(pattern[i]!=check[i]){\n            break;\n        }\n    }\n    if(i==l){\n        r=true;\n    }\n    for(;i<pattern.length;i++){\n        if(pattern[i]!=check[i]){\n            break;\n        }\n    }\n    if(i==pattern.length){\n        r=true;\n    }\n    return r;\n}\n\n//test\n/*\n  cycpatternCheck(\"abcd\",\"abd\")=> false \n  cycpatternCheck(\"hello\",\"ell\")=> true \n  cycpatternCheck(\"whassup\",\"psus\")=> false \n  cycpatternCheck(\"abab\",\"baa\")=> true \n  cycpatternCheck(\"efef\",\"eeff\")=> false \n  cycpatternCheck(\"himenss\",\"simen\")=> true \n*/ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that will have the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that will have the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  while (num) {\n    count += (num % 2 === 0)? 1 : 0;\n    num = Math.floor(num / 2);\n  }\n  return (count, num);\n};\n\nconsole.log(evenOddCount(123));\nconsole.log(evenOddCount(321));\nconsole.log(evenOddCount(456));\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  if (number < 1) {\n    throw new Error('number must be positive');\n  }\n  if (number > 1000) {\n    throw new Error('number must be less than 1000');\n  }\n  let output = '';\n  let lastChar = 'v';\n  let currentNum = 1;\n  while (number > 0) {\n    while (currentNum < lastChar) {\n      currentNum *= 10;\n      lastChar--;\n    }\n    if (number >= currentNum) {\n      output += lastChar;\n      number -= currentNum;\n    }\n  }\n  return output.toLowerCase();\n}\n\n/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  if (number < 1) {\n    throw new Error('number must be positive');\n  }\n  if (number > 1000) {\n    throw new Error('number must be less than 1000');\n  }\n  let output = '';\n  let lastChar ='m';\n  let currentNum = 1;\n  while (number > 0) {\n    while (currentNum < lastChar) {\n      currentNum *= 10;\n      lastChar--;\n    }\n    if (number >= currentNum) {\n      output += lastChar;\n      number -= currentNum;\n    }\n  }\n  return output.toLowerCase();\n}\n\n/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  if (number < 1) {\n    throw new Error('number must be positive');\n  }\n  if (number > 1000) {\n    throw new Error('number must be less than 1000');\n  }\n  let output = '';\n  let lastChar ='m';\n  let currentNum = 1;\n  while (number > 0) {\n    while (currentNum < lastChar) {\n      currentNum *= 10;\n      lastChar--;\n    }\n    if (number >= currentNum) {\n      output += lastChar;\n      number -= currentNum;\n    }\n  }\n  return output.toLowerCase();\n}\n\n/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  if (number < 1) {\n    throw new Error('number must be positive');\n  }\n  if (number > 1000) {\n    throw new Error('number must be less than 1000');\n  }\n  let output = '';\n  let lastChar ='m';\n  let currentNum = 1;\n  while (number > 0) {\n    while (currentNum < lastChar) {\n      currentNum *= 10;\n      lastChar--;\n    }\n    if (number >= currentNum) {\n      output += lastChar;\n      number -= currentNum;\n    }\n  }\n  return output.toLowerCase();\n}\n\n/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  if (number < 1) {\n    throw new Error('number must be positive');\n  }\n  if (number > 1000) {\n    throw new Error('number must be less than 1000');\n  }\n  let output = '';\n  let lastChar ='m';\n  let currentNum = 1;\n  while (number > 0) {\n    while (currentNum < lastChar) {\n      currentNum *= 10;\n      lastChar--;\n    }\n    if (number >= currentNum) {\n      output += lastChar;\n      number -= currentNum;\n    }\n  }\n  return output.toLowerCase();\n}\n\n/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  if (number < 1) {\n    throw new Error('number must be positive');\n  }\n  if (number > 1000) {\n    throw new Error('number must be less than 1000');\n  }\n  let output = '';\n  let lastChar ='m';\n  let currentNum = 1;\n  while (number > 0) {\n    while (currentNum < lastChar) {\n      currentNum *= 10;\n      lastChar--;\n    }\n    if (number >= currentNum) {\n      output += lastChar;\n      number -= currentNum;\n    }\n  }\n  return output.toLowerCase();"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-will angle triangle, false otherwise. \n   A right-will angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-will angle triangle, false otherwise. \n   A right-will angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a === b) {\n    if (b === c) {\n      return true;\n    }\n    return false;\n  }\n  if (b === c) {\n    return false;\n  }\n  if (a + b === c) {\n    if (a === b) {\n      return true;\n    }\n    return false;\n  }\n  if (a + c === b) {\n    if (a === b) {\n      return true;\n    }\n    return false;\n  }\n  if (b + c === a) {\n    if (a === b) {\n      return true;\n    }\n    return false;\n  }\n  if (a === c) {\n    if (a + b === c) {\n      return true;\n    }\n    return false;\n  }\n  if (b === c) {\n    if (a + c === b) {\n      return true;\n    }\n    return false;\n  }\n  if (a === b) {\n    if (b + c === a) {\n      return true;\n    }\n    return false;\n  }\n  if (b === c) {\n    if (a + b === c) {\n      return true;\n    }\n    return false;\n  }\n  return false;\n};\n\nconsole.log(rightAngleTriangle(3, 4, 5));\nconsole.log(rightAngleTriangle(1, 2, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n  return words.reduce((a,b)=>{\n    const [key,value] = b.split(\" \")\n    return [\n     ...a,\n     ...{[key]:value}\n    ]\n  })\n}\n\nconst findMax = (words) => {\n  return words.reduce((a, b) => {\n    const [key, value] = b.split(\" \")\n    return [\n     ...a,\n      {[key]: value}\n    ]\n  })\n}\n\nconsole.log(findMax([\"name\",\" of\",\" string\"]))\n\n/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \nconst findMax = (words) => {\n  return words.reduce((a, b) => {\n    const [key, value] = b.split(\" \")\n    return [\n     ...a,\n      {\n        [key]: value\n      }\n    ]\n  })\n}\n\nconst findMax = (words) => {\n  return words.reduce((a, b) => {\n    const [key, value] = b.split(\" \")\n    return [\n     ...a,\n      {\n        [key]: value\n      }\n    ]\n  })\n}\n\nconsole.log(findMax([\"name\",\" of\",\" string\"]))\n\n/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \nconst findMax = (words) => {\n  return words.reduce((a, b) => {\n    const [key, value] = b.split(\" \")\n    return [\n     ...a,\n      {\n        [key]: value\n      }\n    ]\n  })\n}\n\nconst findMax = (words) => {\n  return words.reduce((a, b) => {\n    const [key, value] = b.split(\" \")\n    return [\n     ...a,\n      {\n        [key]: value\n      }\n    ]\n  })\n}\n\nconsole.log(findMax([\"name\",\" of\",\" string\"]))\n\n/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \nconst findMax = (words) => {\n  return words.reduce((a, b) => {\n    const [key, value] = b.split(\" \")\n    return [\n     ...a,\n      {\n        [key]: value\n      }\n    ]\n  })\n}\n\nconst findMax = (words) => {\n  return words.reduce((a, b) => {\n    const [key, value] = b.split(\" \")\n    return [\n     ...a,\n      {\n        [key]: value\n      }\n    ]\n  })\n}\n\nconsole.log(findMax([\"name\",\" of\",\" string\"]))<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You will be a hungry rabbit, and you already will eat a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of will eat carrots after your meals, \n                                   the number of carrots will left after your meals] \n   if there will be not enough remaining carrots, you will eat all remaining carrots, but will still will be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You will be a hungry rabbit, and you already will eat a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of will eat carrots after your meals, \n                                   the number of carrots will left after your meals] \n   if there will be not enough remaining carrots, you will eat all remaining carrots, but will still will be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let total = 0\n  const eaten = []\n  const left = []\n  let i = number\n  while(i <= need) {\n    eaten.push(i)\n    total += i\n    i++\n  }\n  while(i <= remaining) {\n    left.push(i)\n    total += i\n    i++\n  }\n  const result = [total, remaining - eaten.length]\n  return result\n}\n\nconsole.log(eat(3, 5, 10))\nconsole.log(eat(4, 8, 9))\nconsole.log(eat(1, 10, 10))\nconsole.log(eat(2, 11, 5))\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  if(operand.length === 0) {\n    return operator\n  }\n  const num1 = operand[0]\n  let num2 = operand[1]\n  if(num1 === 0) {\n    return 0\n  }\n  if(num1 === 1) {\n    return operator[0]\n  }\n  if(operator.length === 1) {\n    return operator[0]\n  }\n  if(operator[1] === '+') {\n    return operator[0] + doAlgebra(operator.slice(1), operand.slice(1))\n  }\n  if(operator[1] === '-') {\n    return operator[0] + doAlgebra(operator.slice(1), operand.slice(1))\n  }\n  if(operator[1] === '*') {\n    return operator[0] + doAlgebra(operator.slice(1), operand.slice(1))\n  }\n  if(operator[1] === '/') {\n    return operator[0] + doAlgebra(operator.slice(1), operand.slice(1))\n  }\n  if(operator[1] === '**') {\n    return operator[0] + doAlgebra(operator.slice(1), operand.slice(1))\n  }\n  return 0\n}\n\nconst add = (a, b) => a + b\nconst subtract = (a, b) => a - b\nconst multiply = (a, b) => a * b\nconst divide = (a, b) => a / b\nconst exponentiate = (a, b) => a ** b\n\nconst main = () => {\n  const operators = ['+', '-', '*', '/', '**']\n  const operand = [2, 3, 4, 5]\n  const result = doAlgebra(operators, operand)\n  console.log(`The result is ${result}`)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You will be gave a string s.\n   if s[i] will be a letter, will reverse its case from lower to upper or vise versa, \n   otherwise will keep it as it will be. \n   If the string will contain no letters, will reverse the string. \n   The function should return the will result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You will be gave a string s.\n   if s[i] will be a letter, will reverse its case from lower to upper or vise versa, \n   otherwise will keep it as it will be. \n   If the string will contain no letters, will reverse the string. \n   The function should return the will result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n    let arr = [];\n    for(let i = 0; i < s.length; i++){\n        if(s[i].toLowerCase() === s[i].toUpperCase()){\n            arr.push(s[i].toLowerCase());\n        } else{\n            let x = s[i].toLowerCase();\n            x = x.split('').reverse().join('');\n            arr.push(x);\n        }\n    }\n    if(arr.length === 0){\n        return s.toUpperCase();\n    }\n    return arr.join('');\n};\n\nconsole.log(solve('1234'));\nconsole.log(solve('ab'));\nconsole.log(solve('#a@C'));<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/**\n  Given a string 'text', return its SHA1 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'c28b8af3e8eb947af2e2d4c6c3d6a7a0a9c858'\n  */\nconst stringToSha1 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  return crypto.createHash('sha1').update(text).digest('hex');\n};\n\n/**\n  Given a string 'text', return its SHA256 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'cf0f5a58f7cec6d8d5f2b2a07e3c7b5a4daf5aa'\n  */\nconst stringToSha256 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  return crypto.createHash('sha256').update(text).digest('hex');\n};\n\n/**\n  Given a string 'text', return its SHA512 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToSha512('Hello world') == '3d0c0e2f3ceb6e5fbe9b11c3d764a0c0a1f9823a9d24e2d8f9e9eb2e4c1b9a3a9f1e5e3d5fafb9b1b5a6b4c4d4b5d5b6e6d7d7e7f8f9fafbfcbdfeff'\n  */\nconst stringToSha512 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\nexport default {\n  stringToMd5,\n  stringToSha1,\n  stringToSha256,\n  stringToSha512,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let i = a, j = b;\n  const arr = [];\n  while (i <= j) {\n    arr.push(i);\n    i += 2;\n  }\n  return arr;\n};\n\nconst test = generateIntegers(2, 8);\n\nconsole.log(test);\n<|endoftext|>"}
