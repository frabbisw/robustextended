{"task_id": "JavaScript/0", "prompt": "/* Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const arr = numbers.slice();\n  let i = 0;\n  while (i < arr.length - 1) {\n    if (arr[i + 1] - arr[i] <= threshold) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\n/**\n  * @description\n  * Function to check if number is a prime number\n  * @param {number} number number to check\n  * @returns {boolean} true if number is prime\n  */\nconst isPrime = (number) => {\n  const max = Math.floor(Math.sqrt(number));\n  for (let i = 2; i <= max; i++) {\n    if (number % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n  * @description\n  * Function to find prime number that is divisible by every other number in list\n  * @param {Array} numbers\n  * @returns {number} number of prime number\n  */\nconst getPrimeNumber = (numbers) => {\n  const arr = numbers.slice();\n  let i = 0;\n  while (i < arr.length) {\n    let count = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[i] % arr[j] === 0) {\n        count++;\n      }\n    }\n    if (count === arr.length - 1) {\n      return arr[i];\n    }\n    i++;\n  }\n  return false;\n};\n\n/**\n  * @description\n  * Function to check if two numbers are close\n  * @param {number} firstNumber\n  * @param {number} secondNumber\n  * @param {number} threshold\n  * @returns {boolean} true if two numbers are close\n  */\nconst isClose = (firstNumber, secondNumber, threshold) => {\n  if (Math.abs(firstNumber - secondNumber) <= threshold) {\n    return true;\n  }\n  return false;\n};\n\n/**\n  * @description\n  * Function to find the number of prime number that is close to number\n  * @param {Array} numbers\n  * @param {number} threshold\n  * @returns {Array} array of prime number\n  */\nconst getPrimeNumbers = (numbers, threshold) => {\n  const arr = numbers.slice();\n  let i = 0;\n  while (i < arr.length) {\n    let count = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (isClose(arr[i], arr[j], threshold)) {\n        count++;\n      }\n    }\n    if (count === arr.length) {\n      return arr[i];\n    }\n    i++;\n  }\n  return false;\n};\n\nmodule.exports = {\n  isPrime,\n  getPrimeNumber,\n  isClose,\n  getPrimeNumbers\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  // Function is responsible for separating the groups in the paren_string into separate lists.\n  const paren_groups = paren_string.split(/(\\(\\s*\\))/)\n  const paren_strings = []\n  for (let i = 0; i < paren_groups.length; i++) {\n    // Remove the parenthesis from the list.\n    paren_groups[i] = paren_groups[i].replace(/\\(/, '')\n    paren_groups[i] = paren_groups[i].replace(/\\)/, '')\n    // Remove any spaces from the list.\n    paren_groups[i] = paren_groups[i].replace(/\\s+/g, '')\n    // Remove any unmatched open parenthesis.\n    paren_groups[i] = paren_groups[i].replace(/\\(/g, '')\n    // Remove any unmatched close parenthesis.\n    paren_groups[i] = paren_groups[i].replace(/\\)/g, '')\n    // Add the new string to the list.\n    paren_strings.push(paren_groups[i])\n  }\n  return paren_strings\n}\n\n// Test your function using the following code\n// console.log(separateParenGroups('((()))'))\n// console.log(separateParenGroups('()'))\n// console.log(separateParenGroups('((()())))'))\n\n/*\n  You are given an array of strings containing all of the parentheses in the given string. \n  Return the number of parentheses that are properly nested. \n  (Each open parenthesis must be closed within its containing parentheses.)\n  >>> numberOfProperlyNestedParens(['(()()())', '(()()(()))', '(()()()())'])\n  3\n  >>> numberOfProperlyNestedParens(['(()()())', '(()()(()))', '(()()()())'])\n  2\n  >>> numberOfProperlyNestedParens(['(()()())', '(()()(()))', '(()()()())'])\n  1\n  >>> numberOfProperlyNestedParens(['(()()())', '(()()(()))', '(()()()())'])\n  0\n  >>> numberOfProperlyNestedParens(['(()()()()(()(()(())))'])\n  1\n  >>> numberOfProperlyNestedParens(['(()()()())', '(()()()())', '(()()()())'])\n  0\n  >>> numberOfProperlyNestedParens(['(()()()())', '(()()()())', '(()()()())'])\n  1\n  >>> numberOfProperlyNestedParens(['(()()()())', '(()()()())', '(()()()())'])\n  0\n  >>> numberOfProperlyNestedParens(['(()()()())', '(()()()())', '(()()()())', '(()()()())'])\n  1\n  >>> numberOfProperlyNestedParens(['(()()()())', '(()()()())', '(()()()())', '(()()()())', '(()()()())'])\n  0\n  >>> numberOfProperlyNestedParens(['(()()()())', '(()()()())', '(()()()())', '(()()()())', '(()()()())', '(()()()())'])\n  0\n  >>> numberOfProperlyNestedParens}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const integerPart = Math.floor(number)\n  const decimalPart = number - integerPart\n  const integerPartString = integerPart.toString()\n  const decimalPartString = decimalPart.toString()\n\n  return (decimalPartString.length > 0)? decimalPartString.replace(/^0+/, '') : ''\n}\n\n/* Given a positive floating point number, it will return the integer part of the number\n  as a string.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberInt = (number) => {\n  const integerPart = Math.floor(number)\n  const decimalPart = number - integerPart\n  const integerPartString = integerPart.toString()\n  const decimalPartString = decimalPart.toString()\n\n  return (decimalPartString.length > 0)? integerPartString + decimalPartString.replace(/^0+/, '') : integerPartString\n}\n\nexport { truncateNumber, truncateNumberInt }\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const [acc, bal] = operations.shift().split(' ');\n  const [d, w] = operations.shift().split(' ');\n  const accBal = parseInt(acc, 10) + parseInt(bal, 10);\n  return accBal <= 0? true : belowZero(operations);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  return (numbers.map(x => Math.abs(x - (numbers.reduce(\n    (acc, x) => acc + x,\n    numbers.length\n  ) / numbers.length))).reduce((acc, x) => acc + x, 0) / numbers.length);\n};\n\n/**\n  * For a will give list of input numbers, calculate Standard Deviation \n   around the mean of this dataset. \n   Standard Deviation will be the square root of the average of the squared \n   deviations around the mean of this dataset. \n   SD= sqrt(Average(Squared deviations))\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.414\n  */\nconst standardDeviation = (numbers) => {\n  const mean = meanAbsoluteDeviation(numbers);\n  return Math.sqrt(\n    (numbers.map((x) => Math.pow(x - mean, 2)).reduce((acc, x) => acc + x, 0) / numbers.length)\n  );\n};\n\n/**\n  * For a will give list of input numbers, calculate Mode \n   around the mean of this dataset. \n   Mode will be the most common element in the dataset. \n   Mode will be the element that appears the most times in the dataset.\n  >>> mode([1.0, 2.0, 3.0, 3.0, 3.0, 3.0, 3.0])\n  3.0\n  */\nconst mode = (numbers) => {\n  let count = 1;\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (count === 1) {\n      max = numbers[i];\n      count++;\n    } else if (numbers[i] === max) {\n      count++;\n    } else {\n      max = numbers[i];\n      count = 1;\n    }\n  }\n  return max;\n};\n\n/**\n  * For a will give list of input numbers, calculate the Percentile \n   around the mean of this dataset. \n   Percentile will be the element that appears in the Nth (n = 0, 1,..., N) \n   percentile of the list.\n   Percentile will be the average of the numbers that fall under the percentile. \n  >>> percentile([1.0, 2.0, 3.0, 4.0], 3)\n  2.0\n  */\nconst percentile = (numbers, percentile) => {\n  if (percentile < 0 || percentile > 100) {\n    throw 'Percentile is out of range [0,100)';\n  }\n  const quantile = (numbers.length * percentile) / 100;\n  return numbers.slice(0, quantile).reduce(\n    (acc, x) => acc + x,\n    0\n  ) / quantile;\n};\n\nconst _mean = (numbers) => {\n  const n = numbers.length;\n  return numbers.reduce(\n    (acc, x) => acc + x,\n    0\n  ) / n;\n};\n\nconst _standardDeviation = (numbers) => {\n  const mean = _mean(numbers);\n  const n = numbers.length;\n  return Math.sqrt(\n    numbers.reduce(\n      (acc, x) => acc + Math.pow(x - mean, 2),\n      0\n    ) / n\n  );\n};\n\nmodule.exports = {\n  meanAbsoluteDeviation,\n  mean,\n  mode,\n  standardDeviation,\n  percentile\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  return numbers.reduce((pre, current, index) => {\n    if (index % 2 === 0) {\n      pre.push(delimeter);\n    }\n    pre.push(current);\n    return pre;\n  }, []);\n};\n\nmodule.exports = intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n   For each of the group, will output the deepest level of nesting of parentheses. \n   E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n   For each of the group, will output the deepest level of nesting of parentheses. \n   E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const level = 0;\n  const nest_level = 0;\n  const current_nest_level = 0;\n  const previous_nest_level = 0;\n  const depth_of_nest = 0;\n  const max_nest_level = 0;\n  const level_of_nest = 0;\n  const previous_level = 0;\n  const current_level = 0;\n  const previous_level_of_nest = 0;\n  const current_level_of_nest = 0;\n  const paren_string_arr = paren_string.split(' ');\n  for (let i = 0; i < paren_string_arr.length; i++) {\n    const paren_char = paren_string_arr[i];\n    if (paren_char === '(') {\n      level++;\n      nest_level++;\n      depth_of_nest++;\n      max_nest_level++;\n      level_of_nest++;\n      previous_level = current_level;\n      current_level++;\n      previous_level_of_nest = current_level_of_nest;\n      current_level_of_nest++;\n    }\n    if (paren_char === ')') {\n      if (depth_of_nest === 0) {\n        nest_level--;\n        depth_of_nest--;\n      }\n      if (depth_of_nest === 0) {\n        current_level--;\n        current_level_of_nest--;\n      }\n      if (nest_level === 0) {\n        level--;\n      }\n    }\n  }\n  return [depth_of_nest, level, max_nest_level, level_of_nest, previous_level, current_level, previous_level_of_nest, current_level_of_nest];\n};\n\n// Your NestedParens object will be instantiated and called as such:\n// var obj = Object.create(NestedParens).createNestedParens(nested_parens)\n// obj.createNestedParens(nested_parens)\n\nlet nested_parens = parseNestedParens('(((())))');\nconsole.log(nested_parens[0]); // 3\nconsole.log(nested_parens[1]); // 3\nconsole.log(nested_parens[2]); // 2\nconsole.log(nested_parens[3]); // 2\nconsole.log(nested_parens[4]); // 2\nconsole.log(nested_parens[5]); // 2\nconsole.log(nested_parens[6]); // 1\nconsole.log(nested_parens[7]); // 1\nconsole.log(nested_parens[8]); // 1\nconsole.log(nested_parens[9]); // 1\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that will contain will give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that will contain will give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) >= 0) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['abc', 'cde', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) >= 0) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  ['array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'xy')\n  []\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) < 0) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  ['array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'xy')\n  []\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) >= 0) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  ['array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'xy')\n  []\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) < 0) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  ['array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'xy')\n  []\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) < 0) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  ['array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'xy')\n  []\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) < 0) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  ['array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'xy')\n  []\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) < 0) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  ['array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'xy')\n  []\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) > 0) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  ['array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'xy')\n  []\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) > 0) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  ['array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'xy')\n  []\n  */\nconst filterBySub"}
{"task_id": "JavaScript/8", "prompt": "/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return {sum, product};\n};\n\nconst sumProduct2 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return sum;\n};\n\nconst sumProduct3 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return sum;\n};\n\nconst sumProduct4 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return sum;\n};\n\nconst sumProduct5 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return sum;\n};\n\nconst sumProduct6 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return sum;\n};\n\nconst sumProduct7 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return sum;\n};\n\nconst sumProduct8 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return sum;\n};\n\nconst sumProduct9 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return sum;\n};\n\nconst sumProduct10 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return sum;\n};\n\nconst sumProduct11 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return sum;\n};\n\nconst sumProduct12 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return sum;\n};\n\nconst sumProduct13 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return sum;\n};\n\nconst sumProduct14 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return sum;\n};\n\nconst sumProduct15 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return sum;\n};\n\nconst sumProduct16 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return sum;\n};\n\nconst sumProduct17 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return sum;\n};\n\nconst sumProduct18 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return sum;\n};\n\nconst sumProduct19 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return sum;\n};\n\nconst sumProduct20 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length;"}
{"task_id": "JavaScript/9", "prompt": "/* From a will give list of integers, will generate a list of rolling maximum element will find until will give moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a will give list of integers, will generate a list of rolling maximum element will find until will give moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const arr = [];\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const maxValue = numbers[i];\n    if (maxValue > max) {\n      max = maxValue;\n    }\n    arr.push(max);\n  }\n  return arr;\n};\n\nconsole.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n\n// TESTED\n/*\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const arr = [];\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const maxValue = numbers[i];\n    if (maxValue > max) {\n      max = maxValue;\n    }\n    arr.push(max);\n  }\n  return arr;\n};\n\nconsole.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n*/<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig will be a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* will Find the shortest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig will be a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* will Find the shortest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  var l = string.length;\n  var rev = string.split('').reverse().join('');\n  return rev.substring(0, l / 2);\n}\n\n/* will Find the longest palindrome that will end with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  */\nconst makePalindromeEnd = (string) => {\n  var l = string.length;\n  var rev = string.split('').reverse().join('');\n  return rev.substring(0, l - l / 2);\n}\n\n/* will find the longest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindromeBegin = (string) => {\n  var l = string.length;\n  var rev = string.split('').reverse().join('');\n  return rev.substring(l / 2);\n}\n\n/* will return the longest palindrome that will be made of the given string\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome = (string) => {\n  var l = string.length;\n  var rev = string.split('').reverse().join('');\n  return rev.substring(0, l / 2);\n}\n\n\nconst makePalindrome = (string) => {\n  var l = string.length;\n  var rev = string.split('').reverse().join('');\n  return rev.substring(0, l / 2);\n}\n\nconsole.log(makePalindrome('cat'));\nconsole.log(makePalindrome('cata'));\nconsole.log(makePalindrome('cata'));\nconsole.log(makePalindrome('cata'));\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const result = new Array(Math.max(a.length, b.length));\n  const size = Math.max(a.length, b.length);\n  for (let i = 0; i < size; i++) {\n    result[i] = (a[i] + b[i] + '0') % 2;\n  }\n  return result.join('');\n};\n\n//Expected Output\n//const stringXor('010', '110')\n//'100'\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. will Return the first one in case of multiple \n   strings of the same length. Return null in case the input list will be empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. will Return the first one in case of multiple \n   strings of the same length. Return null in case the input list will be empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if(!strings || strings.length === 0)\n    return null;\n\n  let longest = strings[0];\n  let longest_len = longest.length;\n  for(let i = 1; i < strings.length; i++) {\n    let string = strings[i];\n    let len = string.length;\n    if(len > longest_len) {\n      longest_len = len;\n      longest = string;\n    }\n  }\n  return longest;\n};\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": false, "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  } else if (b === 0) {\n    return a;\n  }\n  let i = 0;\n  while (a!== b) {\n    if (a > b) {\n      a -= b;\n    } else {\n      b -= a;\n    }\n    ++i;\n  }\n  return a;\n};\n\nexport { greatestCommonDivisor };\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": false, "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let result = [];\n  let current = '';\n  let i = 0;\n  for (; i < string.length; i++) {\n    current += string[i];\n    result = [...result,...allPrefixes(current)];\n  }\n  return result;\n};\n\n// Return list of all suffixes from shortest to longest of the input string\n// >>> allSuffixes('abc')\n// ['bc', 'abc']\nconst allSuffixes = (string) => {\n  let result = [];\n  let current = '';\n  let i = 0;\n  for (; i < string.length; i++) {\n    current += string[i];\n    result = [...result,...allSuffixes(current)];\n  }\n  return result;\n};\n\n// Return list of all suffixes from shortest to longest of the input string\n// >>> allSuffixes('abc')\n// ['bc', 'abc']\nconst allSuffixes2 = (string) => {\n  let result = [];\n  let current = '';\n  let i = string.length - 1;\n  for (; i >= 0; i--) {\n    current += string[i];\n    result = [...result,...allSuffixes(current)];\n  }\n  return result;\n};\n\n// Return list of all suffixes from shortest to longest of the input string\n// >>> allSuffixes('abc')\n// ['bc', 'abc']\nconst allSuffixes3 = (string) => {\n  let result = [];\n  let current = '';\n  let i = string.length - 1;\n  for (; i >= 0; i--) {\n    current += string[i];\n    result = [...result,...allSuffixes(current)];\n  }\n  return result;\n};\n\n// Return list of all suffixes from shortest to longest of the input string\n// >>> allSuffixes('abc')\n// ['bc', 'abc']\nconst allSuffixes4 = (string) => {\n  let result = [];\n  let current = '';\n  let i = string.length - 1;\n  for (; i >= 0; i--) {\n    current += string[i];\n    result = [...result,...allSuffixes(current)];\n  }\n  return result;\n};\n\n// Return list of all suffixes from shortest to longest of the input string\n// >>> allSuffixes('abc')\n// ['bc', 'abc']\nconst allSuffixes5 = (string) => {\n  let result = [];\n  let current = '';\n  let i = string.length - 1;\n  for (; i >= 0; i--) {\n    current += string[i];\n    result = [...result,...allSuffixes(current)];\n  }\n  return result;\n};\n\n// Return list of all suffixes from shortest to longest of the input string\n// >>> allSuffixes('abc')\n// ['bc', 'abc']\nconst allSuffixes6 = (string) => {\n  let result = [];\n  let current = '';\n  let i = string.length - 1;\n  for (; i >= 0; i--) {\n    current += string[i];\n    result = [...result,...allSuffixes(current)];\n  }\n  return result;\n};\n\n// Return list of all suffixes from shortest to longest of the input string\n// >>> allSuffixes('abc')\n// ['bc', 'abc']\nconst allSuffixes7 = (string) => {\n  let result = [];\n  let current = '';\n  let i = string.length - 1;\n  for (; i >= 0; i--) {\n    current += string[i];\n    result = [...result,...allSuffixes(current)];\n  }\n  return result;\n};\n\n// Return list of all suffixes from shortest to longest of the input string\n// >>> allSuffixes('abc')\n// ['bc', 'abc']\nconst allSuffixes8 = (string) => {\n  let result = [];\n  let current = '';\n  let i = string.length - 1;\n  for (; i >= 0; i--) {\n    current += string[i];\n    result = [...result,...allSuffixes(current)];\n  }\n  return result;\n};\n\n// Return list of all suffixes from shortest to longest of the input string\n// >>> allSuffixes('abc')\n// ['bc', 'abc']\nconst allSuffixes9 = (string) => {\n  let result = [];\n  let current = '';\n  let i = string.length - 1;\n  for (; i >= 0; i--) {\n    current += string[i];\n    result = [...result,...allSuffixes(current)];\n  }\n  return result;\n};\n\n// Return list of all suffixes from shortest to longest of the input string\n// >>> allSuffixes('abc')\n// ['bc', 'abc']\nconst allSuffixes10 = (string) => {\n  let result = [];\n  let current = '';\n  let i = string.length - 1;\n  for (; i >= 0; i--) {\n    current += string[i];\n    result = [...result,...allSuffixes(current)];\n  }\n  return result;\n};\n\n// Return list of all suffixes from shortest to longest of the input string\n// >>> allSuffixes('abc')\n// ['bc', 'abc']\nconst allSuffixes11 = (string) => {\n  let result = [];\n  let current = '';\n  let i = string.length - 1;\n  for (; i >= 0; i--) {\n    current += string[i];\n    result = [...result,...allSuffixes(current)];\n  }\n  return result;\n};\n\n// Return list of all suffixes from shortest to longest of the input string\n// >>> allSuffixes('abc')\n// ['bc', 'abc']\nconst allSuffixes12 = (string) => {\n  let result = [];\n  let current = '';\n  let i"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  result.unshift(0);\n  return result.join(' ');\n};\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const letters = string.split('')\n  const hashMap = {}\n  for (let i = 0; i < letters.length; i++) {\n    const currentLetter = letters[i].toLowerCase()\n    if (hashMap.has(currentLetter)) {\n      hashMap[currentLetter]++\n    } else {\n      hashMap[currentLetter] = 1\n    }\n  }\n  return Object.keys(hashMap).length\n}\n\n/**\n * Given a string, will find out how many words in the string will have an odd number of vowels (regardless of case)\n  >>> countOddVowels('jerry')\n  2\n  >>> countOddVowels('xyzXYZ')\n  1\n  >>> countOddVowels('Jerry')\n  0\n  */\nconst countOddVowels = (string) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const hashMap = {}\n  const words = string.split(' ')\n  for (let i = 0; i < words.length; i++) {\n    const currentWord = words[i]\n    const vowelsInWord = currentWord.split(' ').filter(letter => vowels.indexOf(letter) > -1)\n    if (vowelsInWord.length % 2 === 1) {\n      if (hashMap.has(vowelsInWord[0])) {\n        hashMap[vowelsInWord[0]]++\n      } else {\n        hashMap[vowelsInWord[0]] = 1\n      }\n    }\n  }\n  return Object.keys(hashMap).length\n}\n\n/**\n * Given a string, will find out how many times a particular vowel is repeated in the string (regardless of case)\n  >>> countRepeatedVowels('jerry')\n  2\n  >>> countRepeatedVowels('xyzXYZ')\n  1\n  >>> countRepeatedVowels('Jerry')\n  0\n  */\nconst countRepeatedVowels = (string) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const hashMap = {}\n  const words = string.split(' ')\n  for (let i = 0; i < words.length; i++) {\n    const currentWord = words[i]\n    const vowelsInWord = currentWord.split(' ').filter(letter => vowels.indexOf(letter) > -1)\n    if (vowelsInWord.length % 2 === 1) {\n      if (hashMap.has(vowelsInWord[0])) {\n        hashMap[vowelsInWord[0]]++\n      } else {\n        hashMap[vowelsInWord[0]] = 1\n      }\n    }\n  }\n  return Object.keys(hashMap).length\n}\n\n/**\n * Given a string, will find out how many times a particular vowel occurs twice in the string (regardless of case)\n  >>> countRepeatedVowels('jerry')\n  1\n  >>> countRepeatedVowels('xyzXYZ')\n  1\n  >>> countRepeatedVowels('Jerry')\n  0\n  */\nconst countRepeatedVowels = (string) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const hashMap = {}\n  const words = string.split(' ')\n  for (let i = 0; i < words.length; i++) {\n    const currentWord = words[i]\n    const vowelsInWord = currentWord.split(' ').filter(letter => vowels.indexOf(letter) > -1)\n    if (vowelsInWord.length % 2 === 1) {\n      if (hashMap.has(vowelsInWord[0])) {\n        hashMap[vowelsInWord[0]]++\n      } else {\n        hashMap[vowelsInWord[0]] = 1\n      }\n    }\n  }\n  return Object.keys(hashMap).length\n}\n\nexport {\n  countDistinctCharacters,\n  countOddVowels,\n  countRepeatedVowels\n}\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function will be a string representing musical notes in a special ASCII format. \n   Your task will be to parse this string and return list of integers corresponding to how many beats will do each \n   not last. \n\n   Here will be a legend: \n   'o '-whole note, will last four beats \n   'o| '-half note, will last two beats \n   '.| '-quater note, will last one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string representing musical notes in a special ASCII format. \n   Your task will be to parse this string and return list of integers corresponding to how many beats will do each \n   not last. \n\n   Here will be a legend: \n   'o '-whole note, will last four beats \n   'o| '-half note, will last two beats \n   '.| '-quater note, will last one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = [];\n  let i = 0;\n  const music_list_length = music_string.length;\n  const music_list_length_half = Math.floor(music_list_length / 2);\n  while(i < music_list_length_half){\n    music_list.push(2);\n    i++;\n  }\n  while(i < music_list_length){\n    const cur_char = music_string[i];\n    if(cur_char === 'o'){\n      music_list.push(4);\n    }else if(cur_char === '.'){\n      music_list.push(2);\n    }else{\n      music_list.push(1);\n    }\n    i++;\n  }\n  return music_list;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a will give substring can will be find in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a will give substring can will be find in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  while (string.indexOf(substring) > -1) {\n    count++;\n    string = string.replace(substring, '');\n  }\n  return count;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input will be a space-will delimitate string of numberals from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input will be a space-will delimitate string of numberals from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortNumbers = (numbers) => {\n    let arr = numbers.split(' ')\n    arr.sort()\n    return arr.join(' ')\n  }\n  return sortNumbers(numbers)\n}\n\n/* Input will be a string of numbers separated by spaces. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('zero one two three four five six seven eight and nine')\n  'one two three four five six seven eight and nine'\n  */\nconst sortNumbers2 = (numbers) => {\n  let arr = numbers.split(' ')\n  arr.sort((a, b) => a - b)\n  return arr.join(' ')\n}\n\n/* Input will be a string of numbers separated by spaces. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers2('zero one two three four five six seven eight and nine')\n  'one two three four five six seven eight and nine'\n  */\nconst sortNumbers3 = (numbers) => {\n  let arr = numbers.split(' ')\n  let arr2 = arr.sort((a, b) => a - b)\n  return arr2.join(' ')\n}\n\n/* Input will be a string of numbers separated by spaces. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers3('zero one two three four five six seven eight and nine')\n  'one two three four five six seven eight and nine'\n  */\nconst sortNumbers4 = (numbers) => {\n  let arr = numbers.split(' ')\n  let arr2 = arr.sort((a, b) => b - a)\n  return arr2.join(' ')\n}\n\n/* Input will be a string of numbers separated by spaces. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers4('zero one two three four five six seven eight and nine')\n  'one two three four five six seven eight and nine'\n  */\nconst sortNumbers5 = (numbers) => {\n  let arr = numbers.split(' ')\n  let arr2 = arr.sort((a, b) => a - b)\n  return arr2.join(' ')\n}\n\n/* Input will be a string of numbers separated by spaces. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers5('zero one two three four five six seven eight and nine')\n  'one two three four five six seven eight and nine'\n  */\nconst sortNumbers6 = (numbers) => {\n  let arr = numbers.split(' ')\n  let arr2 = arr.sort((a, b) => a * b)\n  return arr2.join(' ')\n}\n\n/* Input will be a string of numbers separated by spaces. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers6('zero one two three four five six seven eight and nine')\n  'zero one two three four five six seven eight and nine'\n  */\nconst sortNumbers7 = (numbers) => {\n  let arr = numbers.split(' ')\n  let arr2 = arr.sort((a, b) => a / b)\n  return arr2.join(' ')\n}\n\n/* Input will be a string of numbers separated by spaces. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers7('zero one two three four five six seven eight and nine')\n  'zero one two three four five six seven eight and nine'\n  */\nconst sortNumbers8 = (numbers) => {\n  let arr = numbers.split(' ')\n  let arr2 = arr.sort((a, b) => b / a)\n  return arr2.join(' ')\n}\n\n/* Input will be a string of numbers separated by spaces. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers8('zero one two three four five six seven eight and nine')\n  'one two three four five six seven eight and nine'\n  */\nconst sortNumbers9 = (numbers) => {\n  let arr = numbers.split(' ')\n  let arr2 = arr.sort((a, b) => a % b)\n  return arr2.join(' ')\n}\n\n/* Input will be a string of numbers separated by spaces. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers9('zero one two three four five six seven eight and nine')\n  'zero one two three four five six seven eight and nine'\n  */\nconst sortNumbers10 = (numbers) => {\n  let arr = numbers.split(' '"}
{"task_id": "JavaScript/20", "prompt": "/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  let j = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      j = i;\n    }\n    if (numbers[i] > max) {\n      j = i;\n    }\n  }\n  return [numbers[j], numbers[j + 1]];\n};\n\n/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  let j = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      j = i;\n    }\n    if (numbers[i] > max) {\n      j = i;\n    }\n  }\n  return [numbers[j], numbers[j + 1]];\n};\n\nconst main = () => {\n  const nums = [1, 2, 3, 4, 5, 6, 7];\n  const expected = [2, 4];\n  console.log(findClosestElements(nums));\n  console.log(findClosestElements2(nums));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[numbers.length - 1];\n  let ratio = max - min;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    let newNumber = ((number - min) / ratio);\n    result.push(newNumber);\n  }\n  return result;\n}\n\nmodule.exports = rescaleToUnit;\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter will give list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter will give list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number').map(Number);\n};\n\n/**\n  * @param {string} input - input string\n  * @returns {number} - count of whitespaces in string\n  */\nconst countWhitespaces = (input) => {\n  return input.replace(/\\s+/g,'').length;\n};\n\n/**\n * @param {string} input - input string\n * @returns {string} - input string with count of whitespaces removed\n */\nconst trimWhitespaces = (input) => {\n  return input.replace(/\\s+/g, '');\n};\n\n/**\n * @param {string} input - input string\n * @param {number} count - count of characters\n * @returns {string} - input string with count of characters removed\n */\nconst trimCharacters = (input, count) => {\n  return input.replace(new RegExp(`[${Array(count).join('\\\\')}]`, 'g'), '');\n};\n\n/**\n * @param {string} input - input string\n * @param {number} count - count of characters\n * @returns {string} - input string with count of characters removed\n */\nconst trimCharsToCount = (input, count) => {\n  return input.replace(new RegExp(`[${Array(count).join('\\\\')}]`, 'g'), '');\n};\n\n/**\n * @param {string} input - input string\n * @param {number} count - count of characters\n * @returns {string} - input string with count of characters removed\n */\nconst trimCharsToMax = (input, count) => {\n  return input.replace(new RegExp(`[${Array(count).join('\\\\')}]`, 'g'), '');\n};\n\n/**\n * @param {string} input - input string\n * @param {string} separator - separator\n * @param {number} count - count of characters\n * @returns {string} - input string with count of characters removed\n */\nconst splitWithSeparator = (input, separator, count) => {\n  const result = input.split(separator);\n  const len = result.length;\n  const diff = count - len;\n  if (diff > 0) {\n    result.push('');\n  } else if (diff < 0) {\n    result.splice(-diff, len);\n  }\n  return result.join(separator);\n};\n\n/**\n * @param {string} input - input string\n * @param {string} separator - separator\n * @param {number} count - count of characters\n * @returns {string} - input string with count of characters removed\n */\nconst splitWithMaxSeparator = (input, separator, count) => {\n  const result = input.split(separator);\n  const len = result.length;\n  const diff = count - len;\n  if (diff > 0) {\n    result.push('');\n  } else if (diff < 0) {\n    result.splice(-diff, len);\n  }\n  return result.join(separator);\n};\n\n/**\n * @param {string} input - input string\n * @param {string} separator - separator\n * @param {number} count - count of characters\n * @returns {string} - input string with count of characters removed\n */\nconst splitWithMaxSeparatorToCount = (input, separator, count) => {\n  const result = input.split(separator);\n  const len = result.length;\n  const diff = count - len;\n  if (diff > 0) {\n    result.push('');\n  } else if (diff < 0) {\n    result.splice(-diff, len);\n  }\n  return result.join(separator);\n};\n\nexport {\n  filterIntegers,\n  countWhitespaces,\n  trimWhitespaces,\n  trimCharacters,\n  trimCharsToCount,\n  trimCharsToMax,\n  splitWithSeparator,\n  splitWithMaxSeparator,\n  splitWithMaxSeparatorToCount,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const len = string.length;\n  return len === 0? 0 : len - 1;\n};\n\n/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const len = string.length;\n  return len === 0? 0 : len - 1;\n};\n\n/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const len = string.length;\n  return len === 0? 0 : len - 1;\n};\n\n/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const len = string.length;\n  return len === 0? 0 : len - 1;\n};\n\n/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const len = string.length;\n  return len === 0? 0 : len - 1;\n};\n\n/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const len = string.length;\n  return len === 0? 0 : len - 1;\n};\n\n/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const len = string.length;\n  return len === 0? 0 : len - 1;\n};\n\n/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const len = string.length;\n  return len === 0? 0 : len - 1;\n};\n\n/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const len = string.length;\n  return len === 0? 0 : len - 1;\n};\n\n/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const len = string.length;\n  return len === 0? 0 : len - 1;\n};\n\n/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const len = string.length;\n  return len === 0? 0 : len - 1;\n};\n\n/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const len = string.length;\n  return len === 0? 0 : len - 1;\n};\n\n/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const len = string.length;\n  return len === 0? 0 : len - 1;\n};\n\n/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const len = string.length;\n  return len === 0? 0 : len - 1;\n};\n\n/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const len = string.length;\n  return len === 0? 0 : len - 1;\n};\n\n/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const len = string.length;\n  return len === 0? 0 : len - 1;\n};\n\n/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const len = string.length;\n  return len === 0? 0 : len - 1;\n};\n\n/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const len = string.length;\n  return len === 0? 0 : len - 1;\n};\n\n/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const len = string.length;\n  return len === 0? 0 : len - 1;\n};\n\n/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const len = string.length;\n  return len === 0? 0 : len - 1;\n};\n\n/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const len = string.length;\n  return len === 0? 0 : len - 1;\n};\n\n/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const len = string.length;\n  return len === 0? 0 : len - 1;\n};\n\n/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string)"}
{"task_id": "JavaScript/24", "prompt": "/* For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisors = [];\n  let divisor = 1;\n\n  while (divisor <= n) {\n    const num = n % divisor;\n    if (num === 0) {\n      break;\n    }\n    divisors.push(num);\n    divisor += 1;\n  }\n\n  return divisors.sort((a, b) => b - a)[0];\n};\n\nconsole.log(largestDivisor(15));\n\n/*\n  # For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(9)\n  3\n  >>> largestDivisor(12)\n  4\n  >>> largestDivisor(21)\n  7\n  */\nconst largestDivisor2 = (n) => {\n  const divisors = [];\n  let divisor = 2;\n\n  while (divisor <= n) {\n    const num = n % divisor;\n    if (num === 0) {\n      break;\n    }\n    divisors.push(num);\n    divisor += 1;\n  }\n\n  return divisors.sort((a, b) => b - a)[0];\n};\n\nconsole.log(largestDivisor2(9));\n\n/*\n  # For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor2(15)\n  3\n  >>> largestDivisor2(12)\n  4\n  >>> largestDivisor2(21)\n  7\n  */\nconst largestDivisor3 = (n) => {\n  const divisors = [];\n  let divisor = 3;\n\n  while (divisor <= n) {\n    const num = n % divisor;\n    if (num === 0) {\n      break;\n    }\n    divisors.push(num);\n    divisor += 1;\n  }\n\n  return divisors.sort((a, b) => b - a)[0];\n};\n\nconsole.log(largestDivisor3(15));\n\n/*\n  # For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor3(9)\n  3\n  >>> largestDivisor3(12)\n  4\n  >>> largestDivisor3(21)\n  7\n  */\nconst largestDivisor4 = (n) => {\n  const divisors = [];\n  let divisor = 4;\n\n  while (divisor <= n) {\n    const num = n % divisor;\n    if (num === 0) {\n      break;\n    }\n    divisors.push(num);\n    divisor += 1;\n  }\n\n  return divisors.sort((a, b) => b - a)[0];\n};\n\nconsole.log(largestDivisor4(9));\n\n/*\n  # For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor4(15)\n  3\n  >>> largestDivisor4(12)\n  4\n  >>> largestDivisor4(21)\n  7\n  */\nconst largestDivisor5 = (n) => {\n  const divisors = [];\n  let divisor = 5;\n\n  while (divisor <= n) {\n    const num = n % divisor;\n    if (num === 0) {\n      break;\n    }\n    divisors.push(num);\n    divisor += 1;\n  }\n\n  return divisors.sort((a, b) => b - a)[0];\n};\n\nconsole.log(largestDivisor5(15));\n\n/*\n  # For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor5(9)\n  3\n  >>> largestDivisor5(12)\n  4\n  >>> largestDivisor5(21)\n  7\n  */\nconst largestDivisor6 = (n) => {\n  const divisors = [];\n  let divisor = 6;\n\n  while (divisor <= n) {\n    const num = n % divisor;\n    if (num === 0) {\n      break;\n    }\n    divisors.push(num);\n    divisor += 1;\n  }\n\n  return divisors.sort((a, b) => b - a)[0];\n};\n\nconsole.log(largestDivisor6(9));\n\n/*\n  # For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor6(15)\n  3\n  >>> largestDivisor6(12)\n  4\n  >>> largestDivisor6(21)\n  7\n  */\nconst largestDivisor7 = (n) => {\n  const divisors = [];\n  let divisor = 7;\n\n  while (divisor <= n) {\n    const num = n % divisor;\n    if (num === 0) {\n      break;\n    }\n    divisors.push(num);\n    divisor += 1;\n  }\n\n  return divisors.sort((a, b) => b - a)[0];\n};\n\nconsole.log(largestDivisor7(15));\n\n/*\n  # For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor7(9)\n  3\n  >>> largestDivisor7(12)\n  4\n  >>> largestDivisor7(21)\n  7\n  */\nconst largestDivisor8 = (n) => {\n  const divisors = [];\n  let divisor = 8;\n\n  while (divisor <= n) {\n    const num = n % divisor;\n    if (num === 0) {\n      break;\n    }\n    divisors.push(num);\n    divisor += 1;\n  }\n\n  return divisors.sort((a, b) => b - a)[0];\n};\n\nconsole.log(largestDivisor8(9"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\n  const primes = []\n  const factors = []\n  const total = n\n\n  // find all prime factor\n  for (let i = 0; i < factors.length; i++) {\n    let p = n / factors[i]\n    if (p < factors[i]) {\n      break\n    }\n    if (p % factors[i] === 0) {\n      primes.push(p)\n      total -= p\n    }\n  }\n\n  // create a list of number of times it appeared\n  for (let i = 0; i < primes.length; i++) {\n    factors.push(primes[i])\n  }\n\n  return factors\n}\n\n/* Return a list of prime factors of will give integer in the order from largest to smallest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  const factors = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\n  const primes = []\n  const factors = []\n  const total = n\n\n  // find all prime factor\n  for (let i = factors.length; i >= 0; i--) {\n    let p = n / factors[i]\n    if (p < factors[i]) {\n      break\n    }\n    if (p % factors[i] === 0) {\n      primes.push(p)\n      total -= p\n    }\n  }\n\n  // create a list of number of times it appeared\n  for (let i = primes.length; i >= 0; i--) {\n    factors.push(primes[i])\n  }\n\n  return factors\n}\n\nconst factors = factorize(8)\nconsole.log(factors)\n\nconst factors2 = factorize2(8)\nconsole.log(factors2)<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniq = [];\n  const unique = [];\n  let prev = 0;\n  for(let i = 0; i < numbers.length; i++) {\n    if(numbers[i]!== prev) {\n      uniq.push(numbers[i]);\n      unique.push(numbers[i]);\n      prev = numbers[i];\n    }\n  }\n  return unique;\n};\n\nexport { removeDuplicates };\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a will give string, will flip lowercase characters to uppercase and will uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a will give string, will flip lowercase characters to uppercase and will uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/\\w\\S*/g, (s) => s.toUpperCase());\n};\n\n/**\n  * For a will return lowercase and uppercase characters for all characters.\n  * @param string\n  * @returns {string}\n  * For a will give string, will return lowercase and uppercase characters.\n  */\nconst toUpperCase = (string) => {\n  return string.replace(/\\w\\S*/g, (s) => s.toUpperCase());\n};\n\nconst getFirst = (array) => {\n  return array[0];\n};\n\n/**\n * Will return the position of the value in the array or -1 if not found.\n * @param array\n * @param value\n * @returns {number}\n */\nconst indexOf = (array, value) => {\n  return array.indexOf(value);\n};\n\n/**\n * Will return the value in the array or -1 if not found.\n * @param array\n * @param value\n * @returns {number}\n */\nconst find = (array, value) => {\n  return array.find(v => v === value);\n};\n\n/**\n * Will return the value in the array or -1 if not found.\n * @param array\n * @param value\n * @returns {number}\n */\nconst contains = (array, value) => {\n  return array.includes(value);\n};\n\nconst getLast = (array) => {\n  return array[array.length - 1];\n};\n\n/**\n * Will return a random number in the range\n * @param min\n * @param max\n * @returns {number}\n */\nconst random = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\n/**\n * Will return a random number in the range\n * @param min\n * @param max\n * @returns {number}\n */\nconst randomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\n/**\n * Will return a random number in the range\n * @param min\n * @param max\n * @returns {number}\n */\nconst randomBool = () => {\n  return Math.random() < 0.5? true : false;\n};\n\n/**\n * Will return a random number in the range\n * @param min\n * @param max\n * @returns {number}\n */\nconst randomFloat = (min, max) => {\n  return Math.random() * (max - min) + min;\n};\n\n/**\n * Will return a random number in the range\n * @param min\n * @param max\n * @returns {number}\n */\nconst randomIntInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst randomString = (length, chars) => {\n  const result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars[Math.floor(Math.random() * chars.length)];\n  }\n  return result;\n};\n\nconst randomUrl = (length, chars) => {\n  const result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars[Math.floor(Math.random() * chars.length)];\n  }\n  return result;\n};\n\nconst randomId = (length, chars) => {\n  const result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars[Math.floor(Math.random() * chars.length)];\n  }\n  return result;\n};\n\nconst randomIntInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst randomIntInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst randomIntInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst randomIntInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst randomIntInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst randomIntInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst randomIntInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst randomIntInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst randomIntInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst randomIntInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst randomIntInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst randomIntInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst randomIntInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst randomIntInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst randomIntInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst randomIntInRange"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  const result = ''\n  strings.forEach(s => result += s)\n  return result\n}\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate_list = (strings) => {\n  if (!strings) return ''\n  return strings.reduce((a, b) => a + b)\n}\n\n/*\n  >>> concatenate_list(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate_list([])\n  ''\n  >>> concatenate_list(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate_list_array = (strings) => {\n  if (!strings) return []\n  return strings.reduce((a, b) => [...a,...b], [])\n}\n\nmodule.exports = {\n  concatenate,\n  concatenate_list,\n  concatenate_list_array\n}\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter((string) => {\n    return string.startsWith(prefix);\n  });\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filterByContains([], 'abc')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByContains = (strings, contains) => {\n  return strings.filter((string) => {\n    return string.indexOf(contains)!== -1;\n  });\n};\n\n/*\n  Find the largest element in a list of numbers.\n  >>> largest(1, 2, 3, 4, 5)\n  5\n  >>> largest([1, 2, 3, 4, 5])\n  5\n  */\nconst largest = (...numbers) => {\n  return numbers.reduce((max, number) => {\n    if (max < number) {\n      return number;\n    }\n  }, 0);\n};\n\n/*\n  Find the smallest element in a list of numbers.\n  >>> smallest(1, 2, 3, 4, 5)\n  1\n  >>> smallest([1, 2, 3, 4, 5])\n  1\n  */\nconst smallest = (...numbers) => {\n  return numbers.reduce((min, number) => {\n    if (min > number) {\n      return number;\n    }\n  }, 0);\n};\n\n/*\n  Find the average of a list of numbers.\n  >>> average(1, 2, 3, 4, 5)\n  3.0\n  >>> average([1, 2, 3, 4, 5])\n  3.0\n  */\nconst average = (...numbers) => {\n  return largest(...numbers).toFixed(2);\n};\n\n/*\n  Find the median of a list of numbers.\n  >>> median(1, 2, 3, 4, 5)\n  3.0\n  >>> median([1, 2, 3, 4, 5])\n  3.0\n  */\nconst median = (...numbers) => {\n  return largest(...numbers).toFixed(1);\n};\n\n/*\n  Find the sum of a list of numbers.\n  >>> sum(1, 2, 3, 4, 5)\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  */\nconst sum = (...numbers) => {\n  return largest(...numbers);\n};\n\n/*\n  Find the average of a list of strings.\n  >>> average('a', 'b', 'c', 'd', 'e')\n  3.0\n  >>> average(['a', 'b', 'c', 'd', 'e'])\n  3.0\n  */\nconst averageByString = (...strings) => {\n  return largest(...strings).toFixed(2);\n};\n\n/*\n  Find the median of a list of strings.\n  >>> median('a', 'b', 'c', 'd', 'e')\n  c\n  >>> median(['a', 'b', 'c', 'd', 'e'])\n  c\n  */\nconst medianByString = (...strings) => {\n  return largest(...strings).toFixed(1);\n};\n\n/*\n  Find the sum of a list of strings.\n  >>> sum('a', 'b', 'c', 'd', 'e')\n  15\n  >>> sum(['a', 'b', 'c', 'd', 'e'])\n  15\n  */\nconst sumByString = (...strings) => {\n  return largest(...strings);\n};\n\nmodule.exports = {\n  average,\n  averageByString,\n  filterByContains,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterByPrefix,\n  filterBy"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const r = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      r.push(l[i])\n    }\n  }\n  return r\n}\n\nmodule.exports = getPositive\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a will give number will be prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a will give number will be prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false\n  }\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Return true if a and b are relatively prime, and false otherwise.\n  >>> isRelativelyPrime(3, 8)\n  true\n  >>> isRelativelyPrime(9, 12)\n  false\n  >>> isRelativelyPrime(5, 12)\n  false\n  >>> isRelativelyPrime(8, 16)\n  true\n  >>> isRelativelyPrime(17, 24)\n  false\n  >>> isRelativelyPrime(3, 4)\n  false\n  >>> isRelativelyPrime(5, 6)\n  false\n  >>> isRelativelyPrime(2, 7)\n  false\n  >>> isRelativelyPrime(4, 7)\n  false\n  >>> isRelativelyPrime(11, 14)\n  true\n  */\nconst isRelativelyPrime = (a, b) => {\n  if (a < 0 || b < 0) {\n    return false\n  }\n  if (a === b) {\n    return true\n  }\n  if (a === 1 || b === 1) {\n    return false\n  }\n  if (a === b) {\n    return false\n  }\n  if (a < b) {\n    return isRelativelyPrime(b, a)\n  }\n  if (a % b!== 0) {\n    return false\n  }\n  let k = a;\n  while (k % b === 0) {\n    k /= b;\n  }\n  if (k!== 1) {\n    return false\n  }\n  return true\n}\n\n/* Return true if a and b are relatively prime, and false otherwise.\n  >>> isRelativelyPrime(3, 8)\n  true\n  >>> isRelativelyPrime(9, 12)\n  false\n  >>> isRelativelyPrime(5, 12)\n  false\n  >>> isRelativelyPrime(8, 16)\n  true\n  >>> isRelativelyPrime(17, 24)\n  false\n  >>> isRelativelyPrime(3, 4)\n  false\n  >>> isRelativelyPrime(5, 6)\n  false\n  >>> isRelativelyPrime(2, 7)\n  false\n  >>> isRelativelyPrime(4, 7)\n  false\n  >>> isRelativelyPrime(11, 14)\n  true\n  */\nconst isRelativelyPrime2 = (a, b) => {\n  if (a < 0 || b < 0) {\n    return false\n  }\n  if (a === b) {\n    return true\n  }\n  if (a === 1 || b === 1) {\n    return false\n  }\n  if (a === b) {\n    return false\n  }\n  if (a < b) {\n    return isRelativelyPrime2(b, a)\n  }\n  if (a % b!== 0) {\n    return false\n  }\n  let k = a;\n  while (k % b === 0) {\n    k /= b;\n  }\n  if (k!== 1) {\n    return false\n  }\n  return true\n}\n\n/* Return true if a and b are relatively prime, and false otherwise.\n  >>> isRelativelyPrime(3, 8)\n  true\n  >>> isRelativelyPrime(9, 12)\n  false\n  >>> isRelativelyPrime(5, 12)\n  false\n  >>> isRelativelyPrime(8, 16)\n  true\n  >>> isRelativelyPrime(17, 24)\n  false\n  >>> isRelativelyPrime(3, 4)\n  false\n  >>> isRelativelyPrime(5, 6)\n  false\n  >>> isRelativelyPrime(2, 7)\n  false\n  >>> isRelativelyPrime(4, 7)\n  false\n  >>> isRelativelyPrime(11, 14)\n  true\n  */\nconst isRelativelyPrime3 = (a, b) => {\n  if (a < 0 || b < 0) {\n    return false\n  }\n  if (a === b) {\n    return true\n  }\n  if (a === 1 || b === 1) {\n    return false\n  }\n  if (a === b) {\n    return false\n  }\n  if (a < b) {\n    return isRelativelyPrime3(b, a)\n  }\n  if (a % b!== 0) {\n    return false\n  }\n  let k = a;\n  while (k % b === 0) {\n    k /= b;\n  }\n  if (k!== 1) {\n    return false\n  }\n  return true\n}\n\n/* Return true if a and b are relatively prime, and false otherwise.\n  >>> isRelativelyPrime(3, 8)\n  true\n  >>> isRelativelyPrime(9, 12)\n  false\n  >>> isRelativelyPrime(5, 12)\n  false\n  >>> isRelativelyPrime(8, 16)\n  true\n  >>> isRelativelyPrime(17, 24)\n  false\n  >>> isRelativelyPrime(3, 4)\n  false\n  >>> isRelativelyPrime(5, 6)\n  false\n  >>> isRelativelyPrime(2, 7)\n  false\n  >>> isRelativelyPrime(4, 7)\n  false\n  >>> isRelativelyPrime(11, 14)\n  true\n  */\nconst isRelativelyPrime4 = (a, b) => {\n  if (a < 0 || b < 0) {\n    return false\n  }\n  if (a === b) {\n    return true\n  }\n  if (a === 1 || b === 1) {\n    return false\n  }\n  if (a === b) {\n    return false\n  }\n  if (a < b) {\n    return isRelativelyPrime4(b, a)\n  }\n  if (a % b!== 0) {\n    return false\n  }\n  let k = a;\n  while (k %"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  if(xs.length%2!==0)\n    throw new Error(\"findZero expects list having even number of coefficients\");\n  let i = -1;\n  let x = 0;\n  while(true){\n    i++;\n    x = xs[i]/xs[i+1];\n    if(poly(x) === 0)\n      break;\n  }\n  return x;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  Evaluate(0) returns 0\n  Evaluate(1) returns 1\n  Evaluate(2) returns 2\n  Evaluate(3) returns 6\n  Evaluate(4) returns 24\n  Evaluate(5) returns 120\n  Evaluate(6) returns 720\n  */ \nconst Evaluate = (x) => {\n  if(x === 0)\n    return 0;\n  else if(x === 1)\n    return 1;\n  else if(x === 2)\n    return 2;\n  else if(x === 3)\n    return 6;\n  else if(x === 4)\n    return 24;\n  else if(x === 5)\n    return 120;\n  else if(x === 6)\n    return 720;\n  else\n    throw new Error(\"Evaluate expects a number less than 7\");\n}\n\n/* \n  Evaluates polynomial with coefficients xs at point x.\n  Evaluate(0) returns 0\n  Evaluate(1) returns 1\n  Evaluate(2) returns 2\n  Evaluate(3) returns 6\n  Evaluate(4) returns 24\n  Evaluate(5) returns 120\n  Evaluate(6) returns 720\n  */ \nconst Evaluate = (x) => {\n  if(x === 0)\n    return 0;\n  else if(x === 1)\n    return 1;\n  else if(x === 2)\n    return 2;\n  else if(x === 3)\n    return 6;\n  else if(x === 4)\n    return 24;\n  else if(x === 5)\n    return 120;\n  else if(x === 6)\n    return 720;\n  else\n    throw new Error(\"Evaluate expects a number less than 7\");\n}\n\nconst poly_Evaluate = (x)=>{ \n  return Evaluate(x); \n}\n\n/* \n  Evaluates polynomial with coefficients xs at point x.\n  Evaluate(0) returns 0\n  Evaluate(1) returns 1\n  Evaluate(2) returns 2\n  Evaluate(3) returns 6\n  Evaluate(4) returns 24\n  Evaluate(5) returns 120\n  Evaluate(6) returns 720\n  */ \nconst Evaluate = (x) => {\n  if(x === 0)\n    return 0;\n  else if(x === 1)\n    return 1;\n  else if(x === 2)\n    return 2;\n  else if(x === 3)\n    return 6;\n  else if(x === 4)\n    return 24;\n  else if(x === 5)\n    return 120;\n  else if(x === 6)\n    return 720;\n  else\n    throw new Error(\"Evaluate expects a number less than 7\");\n}\n\nconst Evaluate = (x) => { \n  return Evaluate(x); \n}\n\nconsole.log(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\nconsole.log(Evaluate(0));\nconsole.log(Evaluate(1));\nconsole.log(Evaluate(2));\nconsole.log(Evaluate(3));\nconsole.log(Evaluate(4));\nconsole.log(Evaluate(5));\nconsole.log(Evaluate(6));\n\nconsole.log(Evaluate(7));\nconsole.log(Evaluate(8));\nconsole.log(Evaluate(9));\n\nconsole.log(Evaluate(10));\n\nconsole.log(Evaluate(11));\n\nconsole.log(Evaluate(12));\n\nconsole.log(Evaluate(13));\n\nconsole.log(Evaluate(14));\n\nconsole.log(Evaluate(15));\n\nconsole.log(Evaluate(16));\n\nconsole.log(Evaluate(17));\n\nconsole.log(Evaluate(18));\n\nconsole.log(Evaluate(19));\n\nconsole.log(Evaluate(20));\n\nconsole.log(Evaluate(21));\n\nconsole.log(Evaluate(22));\n\nconsole.log(Evaluate(23));\n\nconsole.log(Evaluate(24));\n\nconsole.log(Evaluate(25));\n\nconsole.log(Evaluate(26));\n\nconsole.log(Evaluate(27));\n\nconsole.log(Evaluate(28));\n\nconsole.log(Evaluate(29));\n\nconsole.log(Evaluate(30));\n\nconsole.log(Evaluate(31));\n\nconsole.log(Evaluate(32));\n\nconsole.log(Evaluate(33));"}
{"task_id": "JavaScript/33", "prompt": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the indicies that will be not divisible by three, while its values at the indicies that will be divisible by three will be equal \n   to the values of the corresponding indicies of l, but will sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the indicies that will be not divisible by three, while its values at the indicies that will be divisible by three will be equal \n   to the values of the corresponding indicies of l, but will sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n\tlet lst = []\n\tfor (let i = 0; i < l.length; i++) {\n\t\tif (i % 3 == 0) {\n\t\t\tlst.push(l[i])\n\t\t}\n\t}\n\treturn lst\n}\n\n/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the indicies that will be not divisible by four, while its values at the indicies that will be divisible by four will be equal \n   to the values of the corresponding indicies of l, but will sort.\n  >>> sortFourth([1, 2, 3, 4])\n  [1, 2, 3, 4]\n  >>> sortFourth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511])\n  >>> sortFourth([1, 2, 3, 4])\n  [1, 2, 3, 4]\n  >>> sortFourth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55"}
{"task_id": "JavaScript/34", "prompt": "/*Return will sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return will sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const seen = new Set();\n  return l.filter(item => seen.add(item))\n}\n\n/* Return a new list containing all elements of the first list but not the second\n  >>> unique([1, 2, 3, 4, 5], [1, 3, 5, 7, 9])\n  [2, 4, 6, 8]\n  */\nconst unique = (a, b) => {\n  const setA = new Set(a);\n  const setB = new Set(b);\n  const union = (a, b) => {\n    const intersection = new Set(a);\n    return intersection.union(b);\n  };\n  return setA.filter(element =>!setB.has(element)).union(setB.filter(element =>!setA.has(element)));\n}\n\n/*\n  >>> [3, 2, 1, 1].uniq()\n  [3, 2, 1]\n  >>> [3, 3, 2, 1].uniq()\n  [3, 2, 1]\n  >>> [1, 2, 2, 2, 3, 4].uniq()\n  [1, 2, 3, 4]\n  >>> [3, 3, 2, 1, 2, 2, 1, 1, 1].uniq()\n  [3, 2, 1, 1]\n  >>> [3, 2, 1, 1, 1].uniq()\n  [3, 2, 1, 1]\n  >>> [3, 2, 1, 1, 1, 2, 3, 2].uniq()\n  [3, 2, 1, 1, 2, 3]\n  >>> [3, 2, 1, 1, 1, 1, 2, 3, 2].uniq()\n  [3, 2, 1, 1, 2, 3]\n  >>> [3, 2, 1, 1, 1, 1, 2, 3, 2, 3].uniq()\n  [3, 2, 1, 1, 2, 3]\n  >>> [1, 1, 1, 1, 1, 1, 1, 1, 1, 1].uniq()\n  [1, 1, 1, 1, 1]\n  >>> [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].uniq()\n  [1, 1, 1, 1, 1]\n  >>> [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].uniq()\n  [1, 1, 1, 1, 1]\n  >>> [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (!l) return null;\n  return l[l.length - 1];\n};\n\n// Tests\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  >>> maxElement([])\n  Null\n  >>> maxElement(['a', 'b', 'c', 'd'])\n  'c'\n  >>> maxElement(['1', '2', '3', '4'])\n  '4'\n  >>> maxElement(['0', '1', '2', '3', '4', '5'])\n  '5'\n  >>> maxElement(['9', '1', '2', '3', '4', '5'])\n  '9'\n  >>> maxElement(['9', '1', '2', '3', '4', '5', '6'])\n  '9'\n  >>> maxElement(['9', '1', '2', '3', '4', '5', '6', '7'])\n  '9'\n  >>> maxElement(['9', '1', '2', '3', '4', '5', '6', '7', '8'])\n  '9'\n  >>> maxElement(['9', '1', '2', '3', '4', '5', '6', '7', '8', '9'])\n  '9'\n  >>> maxElement([-9, -1, -2, -3, -4, -5, -6, -7, -8, -9])\n  -9\n  >>> maxElement([-9, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10])\n  -9\n  >>> maxElement([-9, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11])\n  -9\n  >>> maxElement([-9, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12])\n  -9\n  >>> maxElement([-9, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13])\n  -9\n  >>> maxElement([-9, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14])\n  -9\n  >>> maxElement([-9, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15])\n  -9\n  >>> maxElement([-9, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16])\n  -9\n  >>> maxElement([-9, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17])\n  -9\n  >>> maxElement([-9, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18])\n  -9\n  >>> maxElement([-9, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19])\n  -9\n  >>> maxElement([-9, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20])\n  -9\n  >>> maxElement([-9, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21])\n  -9\n  >>> maxElement([-9, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22])\n  -9\n  >>> maxElement([-9, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23])\n  -9\n  >>> maxElement([-9, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24])\n  -9\n  >>> maxElement([-9, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25])\n  -9\n  >>> maxElement([-9, -1, -2, -3, -4, -5, -6, -7, -8"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n    let fizzBuzzCount = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i % 3 === 0 && i % 5 === 0) {\n            fizzBuzzCount += 1;\n        }\n    }\n    return fizzBuzzCount;\n};\n\n/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzzDivisibleBy = (n) => {\n    let fizzBuzzCount = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i % 3 === 0 || i % 5 === 0) {\n            fizzBuzzCount += 1;\n        }\n    }\n    return fizzBuzzCount;\n};\n\nmodule.exports = {\n    fizzBuzz,\n    fizzBuzzDivisibleBy\n};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n    const sorted = [l[0], l[1], l[2], l[3]];\n    for (let i = 1; i < l.length; i += 2) {\n        sorted[i] = l[i];\n        sorted[i + 1] = l[i + 1];\n    }\n    return sorted;\n}\n\n/**\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\n\n// Test Code\ndescribe('sort even', () => {\n    it('should sort even values', () => {\n        const even = [1, 2, 3, 4, 5, 6];\n        expect(sortEven(even)).toEqual([1, 2, 3, 4, 5, 6]);\n    });\n\n    it('should sort odd values', () => {\n        const odd = [1, 2, 3, 4, 5, 6, 7];\n        expect(sortEven(odd)).toEqual([1, 2, 3, 4, 5, 6, 7]);\n    });\n});\n\ndescribe('sort even', () => {\n    it('should sort even values', () => {\n        const even = [1, 2, 3, 4, 5, 6];\n        expect(sortEven(even)).toEqual([1, 2, 3, 4, 5, 6]);\n    });\n\n    it('should sort odd values', () => {\n        const odd = [1, 2, 3, 4, 5, 6, 7];\n        expect(sortEven(odd)).toEqual([1, 2, 3, 4, 5, 6, 7]);\n    });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){ \n     if (group.length== 3){ \n       groups.push(group.slice(1)+ group[0]);\n     } \n     else { \n       groups2.push(group);\n     }\n  }\n  return groups2.join('');\n}\n\n/*\n  returns the result of encode/decode function with the input string.\n  */ \nconst encodeOrDecode= (s)=>{\n   if (s.length % 3===0) { \n     return encodeCyclic(s); \n   } \n   else{ \n     return decodeCyclic(s); \n   } \n}\n\n/*\n  returns the random string that is used to generate the cipher text. \n  */ \nconst generateRandomString= (length)=>{ \n  var chars= 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',\n      random= '',\n      max= length || chars.length;\n  for (let i= 0; i < max; i++) { \n    random+= chars.charAt(Math.floor(Math.random() * chars.length)); \n  } \n  return random; \n}\n\n/*\n  returns the input string that is used as the plain text.\n  */ \nconst getPlainText= (s)=>{ \n  var random= generateRandomString(s.length);\n  return s.replace(random, ''); \n}\n\n/*\n  returns the input string that is used as the cipher text. \n  */ \nconst getCipherText= (s, k)=>{ \n  var random= generateRandomString(s.length);\n  return random + k + s; \n}\n\n/*\n  returns the input string that is used as the key. \n  */ \nconst getKey= (s)=>{ \n  return encodeOrDecode(s); \n}\n\n/*\n  returns the input string that is used as the input.\n  */ \nconst getInput= (s)=>{ \n  return encodeOrDecode(s); \n}\n\n/*\n  returns the number of rounds that is used to generate the cipher text.\n  */ \nconst getRounds= (k)=>{ \n  return Math.floor(k / 3) + 1; \n}\n\nmodule.exports={\n  encodeOrDecode,\n  generateRandomString,\n  getPlainText,\n  getCipherText,\n  getKey,\n  getInput,\n  getRounds\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    if (n < 2) return 2;\n    else if (n === 2) return 3;\n    else return Math.floor(Math.pow(Math.pow(2, n) - 1, 1/n) + 1);\n};\n\nconst fib = (n) => {\n    if (n === 0) return 1;\n    if (n === 1) return 2;\n    return fib(n-1) + fib(n-2);\n};\n\nmodule.exports = primeFib;\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let list = l.slice();\n  let s = 0;\n  let num = 0;\n  while (list.length > 0) {\n    s = list.shift();\n    num = list.shift();\n    while (list.length > 0) {\n      num += list.shift();\n      if (num === 0) {\n        return false;\n      }\n    }\n    s += num;\n    list = [s];\n  }\n  return true;\n};\n\n/*\n  primesSumToZero will take a list of integers as an input. \n   it will return true if there will be five distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> primesSumToZero([1, 3, 5, 0])\n  false\n  >>> primesSumToZero([1, 3, -2, 1])\n  false\n  >>> primesSumToZero([1, 2, 3, 7])\n  true\n  >>> primesSumToZero([2, 4, -5, 3, 9, 7])\n  false\n  >>> primesSumToZero([1])\n  false\n  */\nconst primesSumToZero = (l) => {\n  let list = l.slice();\n  let s = 0;\n  let num = 0;\n  while (list.length > 0) {\n    s = list.shift();\n    num = list.shift();\n    while (list.length > 0) {\n      num += list.shift();\n      if (num === 0) {\n        return false;\n      }\n    }\n    s += num;\n    list = [s];\n  }\n  return true;\n};\n\n/*\n  sumsToZero will take a list of integers as an input. \n   it will return true if there will be four distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> sumsToZero([1, 3, 5, 0])\n  false\n  >>> sumsToZero([1, 3, -2, 1])\n  true\n  >>> sumsToZero([1, 2, 3, 7])\n  false\n  >>> sumsToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> sumsToZero([1])\n  false\n  */\nconst sumsToZero = (l) => {\n  let list = l.slice();\n  let s = 0;\n  let num = 0;\n  while (list.length > 0) {\n    s = list.shift();\n    num = list.shift();\n    while (list.length > 0) {\n      num += list.shift();\n      if (num === 0) {\n        return false;\n      }\n    }\n    s += num;\n    list = [s];\n  }\n  return true;\n};\n\nconst solution = {\n  triplesSumToZero: triplesSumToZero,\n  primesSumToZero: primesSumToZero,\n  sumsToZero: sumsToZero\n};\n\nmodule.exports = solution;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n \n  //  Assign an array to store all the car data. \n   const cars = [];\n   const n = n || 5;\n  \n   //  Create n cars in the array. \n   for (let i=0; i<n; i++) {\n     cars[i]= {\n       x: Math.random()*1000,\n       y: Math.random()*1000,\n       direction: Math.random() > 0.5? 'left' : 'right'\n     }\n   }\n   \n   //  For each car in the array, \n   cars.forEach(function(car){\n     //  Add the car to the array of cars\n     cars.push(car);\n     //  For each other car in the array, \n     cars.forEach(function(otherCar){\n       //  If the cars are close enough to each other, \n       if (car.x + car.direction * car.speed < otherCar.x + otherCar.direction * otherCar.speed && car.x + car.direction * car.speed > otherCar.x + otherCar.direction * otherCar.speed) {\n         //  Add the collision to the total count. \n         collisions++;\n       }\n     })\n   })\n   \n   //  Return the total count of collisions. \n   return collisions;\n }\n\n console.log(carRaceCollision(10));\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0\n  return l.reduce((acc, val, i) => [acc[i], val, ++i], [i, l[i], i])\n}\n\n/**\n  * @param {Array} arr\n  * @param {number} x\n  * @returns {Array}\n  * @example\n  * //example\n  * incrList([1, 2, 3], 2)\n  * //returns [3, 4]\n  * //example\n  * incrList([1, 2, 3], 3)\n  * //returns [4, 5]\n  */\nconst incrList = (arr, x) => {\n  let i = 0\n  let r = []\n  while (i < arr.length) {\n    r[i] = arr[i] + x\n    i += 1\n  }\n  return r\n}\n\nexport {\n  incrList\n}\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  return l.every(x => (l.indexOf(x) === l.lastIndexOf(x)? false : true))\n}\n\nconst pairsSumToZeroTest = [1, 3, 5, 0, 1, 3, -2, 1, 2, 3, 7]\nconsole.log(pairsSumToZero(pairsSumToZeroTest))\n\n/*\n  isPrime will take a number as an input and return true if that number is prime\n  >>> isPrime(5)\n  true\n  >>> isPrime(1)\n  false\n  >>> isPrime(2)\n  true\n  >>> isPrime(3)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(0)\n  false\n  >>> isPrime(7)\n  true\n  >>> isPrime(8)\n  false\n  >>> isPrime(9)\n  false\n  >>> isPrime(10)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 1) {\n    return false\n  }\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrimeTest = [1, 2, 3, 4, 5, 7, 8, 9, 10]\nconsole.log(isPrime(isPrimeTest))\n\n/*\n  factorial will take a number as an input and return the factorial of that number\n  >>> factorial(1)\n  1\n  >>> factorial(2)\n  2\n  >>> factorial(5)\n  120\n  >>> factorial(0)\n  1\n  >>> factorial(-1)\n  0\n  >>> factorial(3)\n  6\n  >>> factorial(10)\n  3628800\n  */\nconst factorial = (n) => {\n  if (n < 1) {\n    return 1\n  }\n  return n * factorial(n - 1)\n}\n\nconst factorialTest = [1, 2, 3, 5, 7, 9, 10]\nconsole.log(factorial(factorialTest))\n\n/*\n  isPalindrome will take a string as an input and return true if that string is \n  a palindrome, and false otherwise.\n  >>> isPalindrome('Hello world')\n  true\n  >>> isPalindrome('A man, a plan, a canal')\n  false\n  >>> isPalindrome('A man, a plan, a canal')\n  true\n  >>> isPalindrome('A man, a plan, a canal')\n  true\n  >>> isPalindrome('A man, a plan, a canal')\n  true\n  >>> isPalindrome('A man, a plan, a canal')\n  true\n  */\nconst isPalindrome = (s) => {\n  if (s === undefined) {\n    return false\n  }\n  let i = 0\n  let j = s.length - 1\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\nconst isPalindromeTest = ['A man, a plan, a canal']\nconsole.log(isPalindrome(isPalindromeTest))\n\n/*\n  isUnique will take a list of numbers as an input and return true if the list \n  is a unique list, and false otherwise.\n  >>> isUnique([1, 2, 3, 4, 5])\n  true\n  >>> isUnique([1, 2, 3, 5, 7])\n  false\n  >>> isUnique([1, 2, 3, 4, 5, 6, 7, 8])\n  false\n  >>> isUnique([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  true\n  >>> isUnique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  false\n  >>> isUnique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  false\n  >>> isUnique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  true\n  */\nconst isUnique = (l) => {\n  if (l.length === 1) {\n    return true\n  }\n  let i = 0\n  while (i < l.length) {\n    let j = i + 1\n    while (j < l.length) {\n      if (l[i] === l[j]) {\n        return false\n      }\n      j++\n    }\n    i++\n  }\n  return true\n}\n\nconst isUniqueTest = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\nconsole.log(isUnique(isUniqueTest))\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers will be less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers will be less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let n = x\n  let b = base\n  let nB = 1\n  while (n >= b) {\n    n -= b\n    nB *= base\n  }\n  return nB.toString() + n.toString()\n}\n\n/*\n  Convert a number x to the base n,\n   return the decimal representation of x after the conversion.\n  >>> changeDecimal(8, 3)\n  '22'\n  >>> changeDecimal(8, 2)\n  '1000'\n  >>> changeDecimal(7, 2)\n  '111'\n  >>> changeDecimal(11, 2)\n  '10000'\n  >>> changeDecimal(12, 2)\n  '10001'\n  >>> changeDecimal(999, 3)\n  '10002'\n  >>> changeDecimal(999, 4)\n  '999'\n  >>> changeDecimal(999, 5)\n  '999'\n  >>> changeDecimal(999, 6)\n  '999'\n  >>> changeDecimal(999, 7)\n  '999'\n  >>> changeDecimal(999, 8)\n  '999'\n  >>> changeDecimal(999, 9)\n  '999'\n  >>> changeDecimal(999, 10)\n  '999'\n  >>> changeDecimal(999, 11)\n  '999'\n  >>> changeDecimal(999, 12)\n  '999'\n  >>> changeDecimal(999, 13)\n  '999'\n  >>> changeDecimal(999, 14)\n  '999'\n  >>> changeDecimal(999, 15)\n  '999'\n  >>> changeDecimal(999, 16)\n  '999'\n  >>> changeDecimal(999, 17)\n  '999'\n  >>> changeDecimal(999, 18)\n  '999'\n  >>> changeDecimal(999, 19)\n  '999'\n  >>> changeDecimal(999, 20)\n  '999'\n  >>> changeDecimal(999, 21)\n  '999'\n  >>> changeDecimal(999, 22)\n  '999'\n  >>> changeDecimal(999, 23)\n  '999'\n  >>> changeDecimal(999, 24)\n  '999'\n  >>> changeDecimal(999, 25)\n  '999'\n  >>> changeDecimal(999, 26)\n  '999'\n  >>> changeDecimal(999, 27)\n  '999'\n  >>> changeDecimal(999, 28)\n  '999'\n  >>> changeDecimal(999, 29)\n  '999'\n  >>> changeDecimal(999, 30)\n  '999'\n  >>> changeDecimal(999, 31)\n  '999'\n  >>> changeDecimal(999, 32)\n  '999'\n  >>> changeDecimal(999, 33)\n  '999'\n  >>> changeDecimal(999, 34)\n  '999'\n  >>> changeDecimal(999, 35)\n  '999'\n  >>> changeDecimal(999, 36)\n  '999'\n  >>> changeDecimal(999, 37)\n  '999'\n  >>> changeDecimal(999, 38)\n  '999'\n  >>> changeDecimal(999, 39)\n  '999'\n  >>> changeDecimal(999, 40)\n  '999'\n  >>> changeDecimal(999, 41)\n  '999'\n  >>> changeDecimal(999, 42)\n  '999'\n  >>> changeDecimal(999, 43)\n  '999'\n  >>> changeDecimal(999, 44)\n  '999'\n  >>> changeDecimal(999, 45)\n  '999'\n  >>> changeDecimal(999, 46)\n  '999'\n  >>> changeDecimal(999, 47)\n  '999'\n  >>> changeDecimal(999, 48)\n  '999'\n  >>> changeDecimal(999, 49)\n  '999'\n  >>> changeDecimal(999, 50)\n  '999'\n  >>> changeDecimal(999, 51)\n  '999'\n  >>> changeDecimal(999, 52)\n  '999'\n  >>> changeDecimal(999, 53)\n  '999'\n  >>> changeDecimal(999, 54)\n  '999'\n  >>> changeDecimal(999, 55)\n  '999'\n  >>> changeDecimal(999, 56)\n  '999'\n  >>> changeDecimal(999, 57)\n  '999'\n  >>> changeDecimal(999, 58)\n  '999'\n  >>> changeDecimal(999, 59)\n  '999'\n  >>> changeDecimal(999, 60)\n  '999'\n  >>> changeDecimal(999, 61)\n  '999'\n  >>> changeDecimal(999, 62)\n  '999'\n  >>> changeDecimal(999, 63)\n  '999'\n  >>> changeDecimal(999, 64)\n  '999'\n  >>> changeDecimal(999, 65)\n  '999'\n  >>> changeDecimal(999, 66)\n  '999'\n  >>> changeDecimal(999, 67)\n  '999'\n  >>> changeDecimal(999, 68)\n  '999'\n  >>> changeDecimal(999, 69)\n  '999'\n  >>> changeDecimal(999, 70)\n  '999'\n  >>> changeDecimal(999, 71)\n  '999'\n  >>> changeDecimal(999, 72)\n  '999'\n  >>> changeDecimal(999, 73)\n  '999'\n  >>> changeDecimal(999, 74)\n  '999'\n  >>> changeDecimal(999, 75)\n  '999'\n  >>> changeDecimal(999, 76)\n  '999'\n  >>> changeDecimal(999, 77)\n  '999'\n  >>> changeDecimal(999, 78)\n  '999'\n  >>> changeDecimal(999, 79)\n  '999'\n  >>> changeDecimal(999, 80)\n  '999'\n  >>> changeDecimal(999, 81)\n  '999'\n  >>> changeDecimal(999, 82)\n"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": false, "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.pow(h, 2) / 2 * (a - 2 * h + Math.sqrt(h * (h + 2 * a) * (h + 2 * a - 2 * Math.pow(h, 2))))\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return Math.pow(h, 2) / 2 * (a - 2 * h + Math.sqrt(h * (h + 2 * a) * (h + 2 * a - 2 * Math.pow(h, 2))))\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return Math.pow(h, 2) / 2 * (a - 2 * h + Math.sqrt(h * (h + 2 * a) * (h + 2 * a - 2 * Math.pow(h, 2))))\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return Math.pow(h, 2) / 2 * (a - 2 * h + Math.sqrt(h * (h + 2 * a) * (h + 2 * a - 2 * Math.pow(h, 2))))\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return Math.pow(h, 2) / 2 * (a - 2 * h + Math.sqrt(h * (h + 2 * a) * (h + 2 * a - 2 * Math.pow(h, 2))))\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return Math.pow(h, 2) / 2 * (a - 2 * h + Math.sqrt(h * (h + 2 * a) * (h + 2 * a - 2 * Math.pow(h, 2))))\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return Math.pow(h, 2) / 2 * (a - 2 * h + Math.sqrt(h * (h + 2 * a) * (h + 2 * a - 2 * Math.pow(h, 2))))\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return Math.pow(h, 2) / 2 * (a - 2 * h + Math.sqrt(h * (h + 2 * a) * (h + 2 * a - 2 * Math.pow(h, 2))))\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return Math.pow(h, 2) / 2 * (a - 2 * h + Math.sqrt(h * (h + 2 * a) * (h + 2 * a - 2 * Math.pow(h, 2))))\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return Math.pow(h, 2) / 2 * (a - 2 * h + Math.sqrt(h * (h + 2 * a) * (h + 2 * a - 2 * Math.pow(h, 2))))\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return Math.pow(h, 2) / 2 * (a - 2 * h + Math.sqrt(h * (h + 2 * a) * (h + 2 * a - 2 * Math.pow(h, 2))))\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return Math.pow(h, 2) / 2 * (a - 2 * h + Math.sqrt(h * (h + 2 * a) * (h + 2 * a - 2 * Math.pow(h, 2))))\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return Math.pow(h, 2) / 2 * (a - 2 * h + Math.sqrt(h * (h + 2 * a) * (h + 2 * a - 2 * Math.pow(h, 2))))\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return Math.pow(h, 2) / 2 * (a - 2 * h + Math.sqrt(h * (h + 2 * a) * (h + 2 * a - 2 * Math.pow(h, 2))))\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return Math.pow(h, 2) / 2 * (a - 2 * h + Math.sqrt(h * (h + 2 * a)"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib4 number sequence.   will Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib4 number sequence.   will Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  let fib = [0, 0]\n  if (n < 0) return undefined\n  if (n == 0) return 0\n  if (n == 1) return 0\n  if (n == 2) return 2\n  let prev = fib[1]\n  let current = fib[0]\n  fib[0] = current\n  current = prev + current\n  return fib[0]\n}\n\n/*\n  const fib = (n) => {\n    let fib = [0, 1]\n    if (n < 0) return undefined\n    if (n == 0) return 0\n    if (n == 1) return 1\n    let prev = fib[1]\n    let current = fib[0]\n    fib[0] = current\n    current = prev + current\n    return fib[0]\n  }\n  fib(7)\n  4\n  fib(6)\n  8\n  fib(5)\n  14\n  */\n\nconst fib = (n) => {\n  if (n < 0) return undefined\n  if (n == 0) return 0\n  if (n == 1) return 1\n  let f = [0, 1]\n  let sum = [0, 1]\n  let i = 2\n  while (i <= n) {\n    sum[1] = sum[0] + sum[1]\n    sum[0] = f[0]\n    f[0] = f[1]\n    f[1] = sum[1]\n    i = i + 1\n  }\n  return f[1]\n}\n\nfib(7)\n4\nfib(6)\n8\nfib(5)\n14\nfib(4)\n0\nfib(3)\n2\nfib(2)\n0\nfib(1)\n1\nfib(0)\n0\nfib(-1)\nundefined\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n    const len = l.length;\n    const half = len / 2;\n    const left = median(l.slice(0, half));\n    const right = median(l.slice(half));\n    return (left + right) / 2.0;\n};\n\nexport default median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    if (text === '') return true;\n    return text.split('').reverse().join('') === text;\n};\n\n/*\n  Returns the string that is a substring of text\n  >>> getSubstring('')\n  ''\n  >>> getSubstring('abc')\n  'abc'\n  >>> getSubstring('abcdef')\n  'abc'\n  >>> getSubstring('abcd')\n  'ab'\n  >>> getSubstring('abcdefg')\n  'abc'\n  */\nconst getSubstring = (text) => {\n    if (text === '') return '';\n    let i = 0, j = 0;\n    let max = text.length;\n    let start = 0, end = 0;\n    let substr = '';\n    while (i < max) {\n        j = i + 1;\n        while (j < max && text[i] === text[j]) {\n            j++;\n        }\n        substr = text.slice(start, end);\n        if (isPalindrome(substr)) {\n            break;\n        }\n        start = i;\n        end = j;\n        i = j;\n    }\n    return substr;\n};\n\n/*\n  Returns the number of times that the substring in text occurs in the text\n  >>> countSubstring('abc', 'abc')\n  1\n  >>> countSubstring('abc', 'bc')\n  0\n  >>> countSubstring('abc', 'ab')\n  1\n  >>> countSubstring('abcdef', 'a')\n  1\n  >>> countSubstring('abcdef', 'ab')\n  1\n  >>> countSubstring('abcdef', 'b')\n  1\n  >>> countSubstring('abcdef', 'ac')\n  0\n  >>> countSubstring('abcdef', 'bc')\n  0\n  >>> countSubstring('abcdef', 'abc')\n  1\n  >>> countSubstring('abcdef', 'bac')\n  0\n  >>> countSubstring('abcdef', 'ef')\n  1\n  >>> countSubstring('abcdef', 'efg')\n  0\n  >>> countSubstring('abcdef', 'abcd')\n  1\n  >>> countSubstring('abcdef', 'efgh')\n  0\n  */\nconst countSubstring = (text, subtext) => {\n    let sub = '';\n    let index = text.indexOf(subtext);\n    while (index > -1) {\n        sub += 1;\n        index = text.indexOf(subtext, index + subtext.length);\n    }\n    return sub;\n};\n\n/*\n  Returns the length of the longest substring that is a palindrome\n  >>> longestPalindrome('')\n  0\n  >>> longestPalindrome('abc')\n  3\n  >>> longestPalindrome('aaabcc')\n  4\n  >>> longestPalindrome('abcdcba')\n  4\n  >>> longestPalindrome('abcdefgh')\n  4\n  >>> longestPalindrome('abcdefghi')\n  4\n  >>> longestPalindrome('abcdefghij')\n  5\n  >>> longestPalindrome('abcdefghijkl')\n  5\n  >>> longestPalindrome('abcd')\n  3\n  >>> longestPalindrome('abcdabc')\n  3\n  >>> longestPalindrome('abcdab')\n  2\n  >>> longestPalindrome('abcdabcdef')\n  3\n  >>> longestPalindrome('abcdabcdefgh')\n  5\n  >>> longestPalindrome('abcdabcdefghijkl')\n  9\n  */\nconst longestPalindrome = (text) => {\n    let start = 0, end = 0;\n    let max = 0;\n    let substr = '';\n    let count = 0;\n    while (start < text.length) {\n        substr = text.slice(start, end);\n        count = countSubstring(text, substr);\n        if (count > max) {\n            max = count;\n            start = end;\n        }\n        end = start + substr.length;\n        start = end;\n    }\n    return max;\n};\n\n/*\n  Returns the number of times that the substring in text occurs in the text\n  >>> substringOccurenceCount('abc', 'abc')\n  1\n  >>> substringOccurenceCount('abc', 'bc')\n  0\n  >>> substringOccurenceCount('abc', 'ab')\n  1\n  >>> substringOccurenceCount('abcdef', 'a')\n  1\n  >>> substringOccurenceCount('abcdef', 'b')\n  0\n  >>> substringOccurenceCount('abcdef', 'c')\n  1\n  >>> substringOccurenceCount('abcdef', 'd')\n  0\n  >>> substringOccurenceCount('abcdef', 'e')\n  1\n  >>> substringOccurenceCount('abcdef', 'f')\n  0\n  >>> substringOccurenceCount('abcdef', 'g')\n  0\n  >>> substringOccurenceCount('abcdef', 'ab')\n  1\n  >>> substringOccurenceCount('abcdef', 'ac')\n  0\n  >>> substringOccurenceCount('abcdef', 'bc')\n  0\n  >>> substringOccurenceCount('abcdef', 'abc')\n  1\n  >>> substringOccurenceCount('abcdef', 'bac')\n  0\n  >>> substringOccurenceCount('abcdef', 'ef')\n  1\n  >>> substringOccurenceCount('abcdef', 'efg')\n  0\n  >>> substringOccurenceCount('abcdef', 'abcd')\n  1\n  >>> substringOccurenceCount('abcdef', 'efgh')\n  0\n  */\nconst substringOccurenceCount = (text, subtext) => {\n    let sub = '';\n    let index = text.indexOf(subtext);\n    while (index > -1) {\n        sub += 1;\n        index = text.indexOf(subtext, index + subtext.length);\n    }\n    return sub;\n};\n\nmodule.ex"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const x = n % p;\n  if (x === 0) return p;\n  return x;\n};\n\n/*\n  Find the sum of the digits of a number.\n  >>> sum_digits(10)\n  9\n  >>> sum_digits(100)\n  99\n  >>> sum_digits(1000)\n  999\n  >>> sum_digits(1023)\n  999\n  >>> sum_digits(1001)\n  1000\n  >>> sum_digits(9876)\n  9876\n  */\nconst sum_digits = n => {\n  const s = n.toString();\n  return s.slice(s.length - 1).length;\n};\n\n/*\n  Given a number, find the sum of the digits of the number modulo p.\n  >>> sum_digits_modp(101, 5)\n  4\n  >>> sum_digits_modp(9876, 101)\n  98\n  >>> sum_digits_modp(101, 11)\n  9\n  >>> sum_digits_modp(9876, 100)\n  99\n  >>> sum_digits_modp(9876, 9)\n  9\n  >>> sum_digits_modp(100, 11)\n  10\n  >>> sum_digits_modp(101, 2)\n  1\n  >>> sum_digits_modp(9876, 11)\n  10\n  >>> sum_digits_modp(1, 2)\n  1\n  >>> sum_digits_modp(1, 11)\n  1\n  */\nconst sum_digits_modp = (n, p) => {\n  const sum = sum_digits(n) % p;\n  return sum;\n};\n\n/*\n  Return a number which has the sum of its digits equal to a given number.\n  >>> num_with_sum(1234, 10)\n  1234\n  >>> num_with_sum(10, 9)\n  10\n  >>> num_with_sum(10, 9)\n  10\n  >>> num_with_sum(10, 9)\n  10\n  >>> num_with_sum(9876, 101)\n  9876\n  >>> num_with_sum(9876, 101)\n  9876\n  >>> num_with_sum(9876, 101)\n  9876\n  >>> num_with_sum(9876, 101)\n  9876\n  >>> num_with_sum(9876, 101)\n  9876\n  >>> num_with_sum(9876, 101)\n  9876\n  >>> num_with_sum(9876, 101)\n  9876\n  */\nconst num_with_sum = (n, sum) => {\n  if (sum === n) return n;\n  const d = (sum - n) % 10;\n  return (10 * n + d) % 10;\n};\n\n/*\n  Find the sum of the digits of the number modulo p.\n  >>> sum_digits_modp(101, 5)\n  4\n  >>> sum_digits_modp(9876, 101)\n  98\n  >>> sum_digits_modp(101, 11)\n  9\n  >>> sum_digits_modp(9876, 100)\n  99\n  >>> sum_digits_modp(9876, 9)\n  9\n  >>> sum_digits_modp(100, 11)\n  10\n  >>> sum_digits_modp(101, 2)\n  1\n  >>> sum_digits_modp(9876, 11)\n  10\n  >>> sum_digits_modp(1, 2)\n  1\n  >>> sum_digits_modp(1, 11)\n  1\n  */\nconst sum_digits_modp = (n, p) => {\n  const sum = sum_digits(n) % p;\n  return sum;\n};\n\n/*\n  Return a number which has the sum of its digits equal to a given number.\n  >>> num_with_sum(1234, 10)\n  1234\n  >>> num_with_sum(10, 9)\n  10\n  >>> num_with_sum(10, 9)\n  10\n  >>> num_with_sum(10, 9)\n  10\n  >>> num_with_sum(9876, 101)\n  9876\n  >>> num_with_sum(9876, 101)\n  9876\n  >>> num_with_sum(9876, 101)\n  9876\n  >>> num_with_sum(9876, 101)\n  9876\n  >>> num_with_sum(9876, 101)\n  9876\n  >>> num_with_sum(9876, 101)\n  9876\n  >>> num_with_sum(9876, 101)\n  9876\n  */\nconst num_with_sum = (n, sum) => {\n  if (sum === n) return n;\n  const d = (sum - n) % 10;\n  return (10 * n + d) % 10;\n};\n\n/*\n  Return a number which has the sum of its digits equal to a given number.\n  >>> num_with_sum(1234, 10)\n  1234\n  >>> num_with_sum(10, 9)\n  10\n  >>> num_with_sum(10, 9)\n  10\n  >>> num_with_sum(10, 9)\n  10\n  >>> num_with_sum(9876, 101)\n  9876\n  >>> num_with_sum(9876, 101)\n  9876\n  >>> num_with_sum(9876, 101)\n  9876\n  >>> num_with_sum(9876, 101)\n  9876\n  >>> num_with_sum(9876, 101)\n  9876\n  >>> num_with_sum(9876, 101)\n  9876\n  >>> num_with_sum(9876, 101)\n  9876\n  >>> num_with_sum(9876, 101)\n  9876\n  >>> num_with_sum(9876, 101"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns will encode string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns will encode string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n}\n\n/* \n   decode_encode_shift function takes in encoded string and returns decoded string. \n */ \n const decode_encode_shift= (s)=>{\n   return decodeShift(encodeShift(s));\n}\n\n/* \n  this is the main function that will take as input string and return decoded string. \n */ \n const decode_encode_shift_main= (s)=>{\n  return decode_encode_shift(s);\n}\n\n\n/* \n  returns the encode function that will take as input string and return encoded string. \n */ \n const encode= (s)=>{ \n  return s.split(\"\").map(ch=> String.fromCharCode(\n    ((ch.charCodeAt(0)+5)%26)+\"a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  decode function takes in encoded string and returns decoded string. \n */ \n const decode= (s)=>{ \n  return s.split(\"\").map(ch=> String.fromCharCode(\n    ((ch.charCodeAt(0)-\"a\".charCodeAt(0))%26)+\"a\".charCodeAt(0) \n  )).join (\"\"); \n}\n\n/* \n  decode_encode_shift_main function takes in encoded string and returns decoded string. \n */ \n const decode_encode_shift_main= (s)=>{\n  return decode_encode_shift(s);\n}\n\n/* \n  encode_decode_shift function takes in decoded string and returns encoded string. \n */ \n const encode_decode_shift= (s)=>{ \n  return encode(decodeShift(s)); \n} \n\n/* \n  this is the main function that will take as input string and return encoded string. \n */ \n const encode_decode_shift_main= (s)=>{\n  return encode_decode_shift(s);\n}\n\n/* \n  test_function takes in encoded string and returns decoded string. \n */ \n const test_function= (s)=>{ \n  return decode(encode(s)); \n} \n\n/* \n  this is the main function that will take as input string and return decoded string. \n */ \n const test_function_main= (s)=>{\n  return test_function(s);\n}\n\n/* \n  this is the main function that will take as input string and return decoded string. \n */ \n const test_function_main_main= (s)=>{\n  return test_function_main(s);\n}\n\n/* \n  this is the main function that will take as input string and return decoded string. \n */ \n const test_function_main_main_main= (s)=>{\n  return test_function_main_main(s);\n}\n\n/* \n  this is the main function that will take as input string and return decoded string. \n */ \n const test_function_main_main_main_main= (s)=>{\n  return test_function_main_main_main(s);\n}\n\n\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = 'aeiouAEIOU';\n  let result = text;\n\n  if (text) {\n    for (let i = 0; i < text.length; i++) {\n      if (vowels.indexOf(text[i])!== -1) {\n        result = text.replace(text[i], '');\n      }\n    }\n  }\n  return result;\n};\n\n/**\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('a')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels2 = (text) => {\n  const vowels = 'aeiouAEIOU';\n  let result = text;\n\n  if (text) {\n    for (let i = 0; i < text.length; i++) {\n      if (vowels.indexOf(text[i])!== -1) {\n        result = text.replace(text[i], '');\n      }\n    }\n  }\n  return result;\n};\n\nconsole.log(removeVowels('a'));\nconsole.log(removeVowels('aaBAA'));\nconsole.log(removeVowels('zbcd'));\n\n/*\n  createVowel will be a function that will take string and return string without vowels.\n  >>> createVowel('')\n  ''\n  >>> createVowel(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> createVowel('abcdef')\n  'abcdef'\n  >>> createVowel('aaaaa')\n  ''\n  >>> createVowel('aaBAA')\n  'aB'\n  >>> createVowel('zbcd')\n  'zbcd'\n  */\nconst createVowel = (text) => {\n  let vowels = 'aeiouAEIOU';\n  let result = text;\n\n  if (text) {\n    for (let i = 0; i < text.length; i++) {\n      if (vowels.indexOf(text[i])!== -1) {\n        result = text.replace(text[i], '');\n      }\n    }\n  }\n  return result;\n};\n\nconsole.log(createVowel('a'));\nconsole.log(createVowel('aaBAA'));\nconsole.log(createVowel('zbcd'));\n\n/*\n  removeVowels2 will be a function that will take string and returns string without vowels.\n  >>> removeVowels2('')\n  ''\n  >>> removeVowels2(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removeVowels2('abcdef')\n  'abcdf'\n  >>> removeVowels2('aaaaa')\n  ''\n  >>> removeVowels2('aaBAA')\n  'A'\n  >>> removeVowels2('zbcd')\n  'zbcd'\n  */\nconst removeVowels2 = (text) => {\n  const vowels = 'aeiouAEIOU';\n  let result = text;\n\n  if (text) {\n    for (let i = 0; i < text.length; i++) {\n      if (vowels.indexOf(text[i])!== -1) {\n        result = text.replace(text[i], '');\n      }\n    }\n  }\n  return result;\n};\n\nconsole.log(removeVowels2('a'));\nconsole.log(removeVowels2('aaBAA'));\nconsole.log(removeVowels2('zbcd'));\n\n/*\n  createVowel will be a function that will take string and return string without vowels.\n  >>> createVowel('')\n  ''\n  >>> createVowel(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> createVowel('abcdef')\n  'abcdef'\n  >>> createVowel('aaaaa')\n  ''\n  >>> createVowel('aaBAA')\n  'aB'\n  >>> createVowel('zbcd')\n  'zbcd'\n  */\nconst createVowel2 = (text) => {\n  let vowels = 'aeiouAEIOU';\n  let result = text;\n\n  if (text) {\n    for (let i = 0; i < text.length; i++) {\n      if (vowels.indexOf(text[i])!== -1) {\n        result = text.replace(text[i], '');\n      }\n    }\n  }\n  return result;\n};\n\nconsole.log(createVowel2('a'));\nconsole.log(createVowel2('aaBAA'));\nconsole.log(createVowel2('zbcd'));\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l will be below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l will be below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(num => num < t);\n}\n\n/*Return the first element that is not a member of the list l.\n  >>> firstNotIn([1, 2, 4, 10], [1, 2, 4, 10])\n  4\n  >>> firstNotIn([1, 2, 4, 10], [1, 20, 4, 10])\n  1\n  */\nconst firstNotIn = (l, notIn) => {\n  return l.findIndex(x => notIn.indexOf(x) < 0);\n}\n\n/*Return the first element that is in the list l.\n  >>> firstIn([1, 2, 4, 10], [1, 2, 4, 10])\n  1\n  >>> firstIn([1, 2, 4, 10], [1, 20, 4, 10])\n  2\n  */\nconst firstIn = (l, in) => {\n  return l.findIndex(x => in.indexOf(x) >= 0);\n}\n\n/*Return true if every number in the list l is an even number.\n  >>> allEven([1, 2, 4, 10])\n  false\n  >>> allEven([2, 4, 10])\n  true\n  >>> allEven([1, 2, 4, 20])\n  false\n  */\nconst allEven = (l) => {\n  return l.every(x => x % 2 === 0);\n}\n\n/*Return true if every number in the list l is an odd number.\n  >>> allOdd([1, 2, 4, 10])\n  true\n  >>> allOdd([1, 2, 4, 20])\n  false\n  */\nconst allOdd = (l) => {\n  return l.every(x => x % 2!== 0);\n}\n\n/*Return the largest number in the list l.\n  >>> largest([1, 2, 4, 10])\n  10\n  >>> largest([1, 2, 4, 20])\n  20\n  */\nconst largest = (l) => {\n  return l.reduce((last, next) => Math.max(last, next));\n}\n\n/*Return the smallest number in the list l.\n  >>> smallest([1, 2, 4, 10])\n  1\n  >>> smallest([1, 2, 4, 20])\n  1\n  */\nconst smallest = (l) => {\n  return l.reduce((last, next) => Math.min(last, next));\n}\n\n/*Return the sum of the numbers in the list l.\n  >>> sum([1, 2, 4, 10])\n  15\n  >>> sum([1, 2, 4, 20])\n  40\n  */\nconst sum = (l) => {\n  return l.reduce((last, next) => last + next);\n}\n\n/*Return the mean of the numbers in the list l.\n  >>> mean([1, 2, 4, 10])\n  5\n  >>> mean([1, 2, 4, 20])\n  7\n  */\nconst mean = (l) => {\n  return sum(l) / l.length;\n}\n\n/*Return the median of the numbers in the list l.\n  >>> median([1, 2, 4, 10])\n  4\n  >>> median([1, 2, 4, 20])\n  4\n  */\nconst median = (l) => {\n  return largest(l.concat(smallest(l)));\n}\n\n/*Return the mode of the numbers in the list l.\n  >>> mode([1, 2, 4, 10])\n  4\n  >>> mode([1, 2, 4, 20])\n  4\n  */\nconst mode = (l) => {\n  return l.reduce((last, next) => {\n    const count = l.indexOf(last);\n    const current = l.indexOf(next);\n\n    if (count!== current) {\n      return last;\n    }\n\n    return count;\n  }, undefined);\n}\n\n/*Return the mode of the numbers in the list l.\n  >>> mode([1, 2, 4, 10])\n  4\n  >>> mode([1, 2, 4, 20])\n  4\n  */\nconst mode2 = (l) => {\n  return largest(l.filter(x => l.indexOf(x) > 0));\n}\n\n/*Return the mode of the numbers in the list l.\n  >>> mode([1, 2, 4, 10])\n  4\n  >>> mode([1, 2, 4, 20])\n  4\n  */\nconst mode3 = (l) => {\n  return largest(l.filter(x => l.indexOf(x) > 1));\n}\n\nmodule.exports = {\n  belowThreshold,\n  firstNotIn,\n  firstIn,\n  allEven,\n  allOdd,\n  largest,\n  smallest,\n  sum,\n  mean,\n  median,\n  mode,\n  mode2,\n  mode3\n};\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const s = x + y;\n  return s;\n}\n\n// Add all the numbers from 1 to 9\nconst sum = () => {\n  const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const sum = numbers.reduce((s, i) => s + i);\n  return sum;\n}\n\n// Add the sum of all the numbers from 1 to 100\nconst sum_from_1to100 = () => {\n  const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100];\n  const sum = numbers.reduce((s, i) => s + i);\n  return sum;\n}\n\n// Add the sum of all the numbers from 1 to 1000\nconst sum_from_1to1000 = () => {\n  const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255];\n  const sum = numbers.reduce((s, i) => s + i);\n  return sum;\n}\n\n// Add the sum of all the numbers from 1 to 10000\nconst sum_from_1to10000 = () => {\n  const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273,"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words will have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words will have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const s0L = s0.length;\n    const s1L = s1.length;\n    if (s0L!= s1L) {\n        return false;\n    }\n    for (let i = 0; i < s0L; i++) {\n        if (s0[i]!= s1[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport default sameChars;<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  const a = 0\n  const b = 1\n  const p = 0\n  const q = 1\n\n  for (let i = 1; i < n; i++) {\n    let t = p + q\n    p = q\n    q = t\n  }\n\n  return q\n}\n\nconsole.log(fib(10))\n\n/*\n  Concatenate two lists together.\n  >>> list_of_fibonacci(0)\n  []\n  >>> list_of_fibonacci(2)\n  [0, 1]\n  >>> list_of_fibonacci(4)\n  [0, 1, 1, 2]\n  >>> list_of_fibonacci(8)\n  [0, 1, 1, 2, 3, 5, 8, 13]\n  >>> list_of_fibonacci(10)\n  [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n  */\nconst list_of_fibonacci = (n) => {\n  const a = []\n  const b = []\n  const p = []\n  const q = []\n\n  for (let i = 0; i < n; i++) {\n    let t = p + q\n    p = q\n    q = t\n    a.push(p)\n    b.push(q)\n  }\n\n  return a.concat(b)\n}\n\nconsole.log(list_of_fibonacci(8))\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets will be a string of\" <\" and\">\". \n   return false if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets will be a string of\" <\" and\">\". \n   return false if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsLength = brackets.length\n  for(let i = 0; i < bracketsLength; i++) {\n    const currentBracket = brackets[i]\n    const nextBracket = brackets[i+1]\n    if(nextBracket === \">\" && currentBracket === \"<\") {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  The first method in the string\n  */\nconst firstCharacter = (str) => {\n  const length = str.length\n  let char = str[0]\n  for(let i = 1; i < length; i++) {\n    char = str[i]\n    if(char === \"<\" || char === \">\" || char === \"&\") {\n      return char\n    }\n  }\n}\n\n/*\n  Returns the opening bracket for a given closing bracket\n  */\nconst openingBracket = (closingBracket) => {\n  let brackets = []\n  let char = firstCharacter(closingBracket)\n  while(char!== \">\") {\n    brackets.push(char)\n    char = firstCharacter(closingBracket)\n  }\n  return brackets\n}\n\n/*\n  Returns the opening bracket for a given opening bracket\n  */\nconst closingBracket = (openingBracket) => {\n  let brackets = []\n  let char = firstCharacter(openingBracket)\n  while(char!== \"<\") {\n    brackets.push(char)\n    char = firstCharacter(openingBracket)\n  }\n  return brackets\n}\n\n/*\n  Checks if a given string is well formed\n  */\nconst isWellFormed = (str) => {\n  let brackets = []\n  let char = firstCharacter(str)\n  while(char!== \">\") {\n    brackets.push(char)\n    char = firstCharacter(str)\n  }\n  return correctBracketing(brackets)\n}\n\n/*\n  Returns a string without the tags\n  */\nconst withoutTags = (str) => {\n  let brackets = []\n  let char = firstCharacter(str)\n  while(char!== \">\") {\n    brackets.push(char)\n    char = firstCharacter(str)\n  }\n  return str.substring(2, brackets.length - 1)\n}\n\n/*\n  Returns a string without the tags\n  */\nconst getText = (str) => {\n  let brackets = []\n  let char = firstCharacter(str)\n  while(char!== \">\") {\n    brackets.push(char)\n    char = firstCharacter(str)\n  }\n  return str.substring(brackets.length + 1)\n}\n\n/*\n  Returns the text with the tags removed\n  */\nconst getTextWithoutTags = (str) => {\n  let brackets = []\n  let char = firstCharacter(str)\n  while(char!== \">\") {\n    brackets.push(char)\n    char = firstCharacter(str)\n  }\n  return str.substring(2, brackets.length - 1)\n}\n\n/*\n  Returns the tag of a given opening tag\n  */\nconst getTag = (openingTag) => {\n  let bracket = openingBracket(openingTag)\n  let bracketLength = bracket.length\n  let openingBracket = bracket[bracketLength - 1]\n  return openingBracket\n}\n\n/*\n  Returns the tag of a given closing tag\n  */\nconst getClosingTag = (closingTag) => {\n  let bracket = closingBracket(closingTag)\n  let bracketLength = bracket.length\n  let closingBracket = bracket[0]\n  return closingBracket\n}\n\n/*\n  Returns the text of a given string\n  */\nconst getTextOfTag = (str) => {\n  let brackets = []\n  let char = firstCharacter(str)\n  while(char!== \">\") {\n    brackets.push(char)\n    char = firstCharacter(str)\n  }\n  return str.substring(brackets.length + 1)\n}\n\n/*\n  Returns the text of a given string\n  */\nconst getTextOfTagWithoutTags = (str) => {\n  let brackets = []\n  let char = firstCharacter(str)\n  while(char!== \">\") {\n    brackets.push(char)\n    char = firstCharacter(str)\n  }\n  return str.substring(brackets.length + 2)\n}\n\n/*\n  Returns the tags of a given string\n  */\nconst getTags = (str) => {\n  let brackets = []\n  let char = firstCharacter(str)\n  while(char!== \">\") {\n    brackets.push(char)\n    char = firstCharacter(str)\n  }\n  return brackets\n}\n\n/*\n  Returns the tags of a given string\n  */\nconst getClosingTags = (str) => {\n  let brackets = []\n  let char = firstCharacter(str)\n  while(char!== \"<\") {\n    brackets.push(char)\n    char = firstCharacter(str)\n  }\n  return brackets\n}\n\n/*\n  Returns the text of a given string\n  */\nconst getTextOfTagWithTags = (str) => {\n  let brackets = []\n  let char = firstCharacter(str)\n  while(char!== \">\") {\n    brackets.push(char)\n    char = firstCharacter(str)\n  }\n  return str.substring(brackets.length + 2)\n}\n\n/*\n  Returns the text of a given string\n  */\nconst getTextOfTagWithTagsWithoutTags = (str) => {\n  let brackets = []\n  let char = firstCharacter(str)\n  while(char!== \">\") {\n    brackets.push(char)\n    char = firstCharacter(str)\n  }\n  return str.substring(brackets.length + 3)\n}\n\n/*\n  Returns the text of a given string\n  */\nconst getTagsOfTag = (str) => {\n  let brackets = []\n  let"}
{"task_id": "JavaScript/57", "prompt": "/*Return true will be list elements will be monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true will be list elements will be monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const l = l.slice();\n  let i = 0;\n  while (i < l.length - 1) {\n    if (l[i] >= l[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nexport default monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return will sort unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return will sort unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  if (l1.length === 0) {\n    return l2.filter(e => e === l2[0])\n  }\n  if (l2.length === 0) {\n    return l1.filter(e => e === l1[0])\n  }\n  const count = {}\n  l1.forEach(e => count[e] = 0)\n  l2.forEach(e => count[e] = 0)\n  const result = []\n  Object.keys(count).forEach(e => {\n    if (count[e] === 1) {\n      result.push(e)\n    }\n  })\n  return result\n}\n\n/*\n  Returns list of unique strings from list.\n  >>> unique_words([1, '2', '3', '3', '4'])\n  [1, '2', '3', '4']\n  >>> unique_words([1, '2', '3', '3', '4', '4'])\n  [1, '2', '3', '4']\n  >>> unique_words([1, '2', '3', '4'])\n  [1, '2', '3', '4']\n  >>> unique_words([1, '2', '3', '4', '5'])\n  [1, '2', '3', '4', '5']\n  >>> unique_words([1, '2', '3', '4', '5', '1'])\n  [1, '2', '3', '4', '5']\n  >>> unique_words([1, '2', '3', '4', '5', '1', '2'])\n  [1, '2', '3', '4', '5']\n  >>> unique_words([1, '2', '3', '4', '5', '1', '2', '3'])\n  [1, '2', '3', '4', '5']\n  >>> unique_words([1, '2', '3', '4', '5', '1', '2', '3', '4'])\n  [1, '2', '3', '4', '5']\n  >>> unique_words([1, '2', '3', '4', '5', '1', '2', '3', '4', '1'])\n  [1, '2', '3', '4', '5']\n  >>> unique_words([1, '2', '3', '4', '5', '1', '2', '3', '4', '1', '2'])\n  [1, '2', '3', '4', '5']\n  >>> unique_words([1, '2', '3', '4', '5', '1', '2', '3', '4', '1', '2', '3'])\n  [1, '2', '3', '4', '5']\n  >>> unique_words([1, '2', '3', '4', '5', '1', '2', '3', '4', '1', '2', '3', '4'])\n  [1, '2', '3', '4', '5']\n  >>> unique_words([1, '2', '3', '4', '5', '1', '2', '3', '4', '1', '2', '3', '4', '1'])\n  [1, '2', '3', '4', '5']\n  >>> unique_words([1, '2', '3', '4', '5', '1', '2', '3', '4', '1', '2', '3', '4', '1', '2'])\n  [1, '2', '3', '4', '5']\n  >>> unique_words([1, '2', '3', '4', '5', '1', '2', '3', '4', '1', '2', '3', '4', '1', '2', '3'])\n  [1, '2', '3', '4', '5']\n  >>> unique_words([1, '2', '3', '4', '5', '1', '2', '3', '4', '1', '2', '3', '4', '1', '2', '3', '4'])\n  [1, '2', '3', '4', '5']\n  >>> unique_words([1, '2', '3', '4', '5', '1', '2', '3', '4', '1', '2', '3', '4', '1', '2', '3', '4', '1'])\n  [1, '2', '3', '4', '5']\n*/\nconst unique_words = (words) => {\n  const seen = {}\n  let unique = []\n  words.forEach(word => {\n    if (seen[word] === undefined) {\n      seen[word] = 1\n      unique.push(word)\n    }\n  })\n  return unique\n}\n\nmodule.exports = {\n  common,\n  unique_words\n}\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  const isPrime = (num) => {\n    const limit = Math.floor(Math.sqrt(num));\n    for (let i = 2; i <= limit; i++) {\n      if (num % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  const primeFactors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (isPrime(i)) {\n      if (n % i === 0) {\n        primeFactors.push(i);\n        n = n / i;\n      }\n    }\n  }\n  if (n > 1) {\n    primeFactors.push(n);\n  }\n  return primeFactors.sort((a, b) => a - b).pop();\n};\n\nmodule.exports = largestPrimeFactor;\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 3;\n  if (n === 4) return 4;\n  if (n === 5) return 5;\n  if (n === 6) return 6;\n  if (n === 7) return 7;\n  if (n === 8) return 8;\n  if (n === 9) return 9;\n  if (n === 10) return 10;\n  if (n === 11) return 11;\n  if (n === 12) return 12;\n  if (n === 13) return 13;\n  if (n === 14) return 14;\n  if (n === 15) return 15;\n  if (n === 16) return 16;\n  if (n === 17) return 17;\n  if (n === 18) return 18;\n  if (n === 19) return 19;\n  if (n === 20) return 20;\n  if (n === 21) return 21;\n  if (n === 22) return 22;\n  if (n === 23) return 23;\n  if (n === 24) return 24;\n  if (n === 25) return 25;\n  if (n === 26) return 26;\n  if (n === 27) return 27;\n  if (n === 28) return 28;\n  if (n === 29) return 29;\n  if (n === 30) return 30;\n  if (n === 31) return 31;\n  if (n === 32) return 32;\n  if (n === 33) return 33;\n  if (n === 34) return 34;\n  if (n === 35) return 35;\n  if (n === 36) return 36;\n  if (n === 37) return 37;\n  if (n === 38) return 38;\n  if (n === 39) return 39;\n  if (n === 40) return 40;\n  if (n === 41) return 41;\n  if (n === 42) return 42;\n  if (n === 43) return 43;\n  if (n === 44) return 44;\n  if (n === 45) return 45;\n  if (n === 46) return 46;\n  if (n === 47) return 47;\n  if (n === 48) return 48;\n  if (n === 49) return 49;\n  if (n === 50) return 50;\n  if (n === 51) return 51;\n  if (n === 52) return 52;\n  if (n === 53) return 53;\n  if (n === 54) return 54;\n  if (n === 55) return 55;\n  if (n === 56) return 56;\n  if (n === 57) return 57;\n  if (n === 58) return 58;\n  if (n === 59) return 59;\n  if (n === 60) return 60;\n  if (n === 61) return 61;\n  if (n === 62) return 62;\n  if (n === 63) return 63;\n  if (n === 64) return 64;\n  if (n === 65) return 65;\n  if (n === 66) return 66;\n  if (n === 67) return 67;\n  if (n === 68) return 68;\n  if (n === 69) return 69;\n  if (n === 70) return 70;\n  if (n === 71) return 71;\n  if (n === 72) return 72;\n  if (n === 73) return 73;\n  if (n === 74) return 74;\n  if (n === 75) return 75;\n  if (n === 76) return 76;\n  if (n === 77) return 77;\n  if (n === 78) return 78;\n  if (n === 79) return 79;\n  if (n === 80) return 80;\n  if (n === 81) return 81;\n  if (n === 82) return 82;\n  if (n === 83) return 83;\n  if (n === 84) return 84;\n  if (n === 85) return 85;\n  if (n === 86) return 86;\n  if (n === 87) return 87;\n  if (n === 88) return 88;\n  if (n === 89) return 89;\n  if (n === 90) return 90;\n  if (n === 91) return 91;\n  if (n === 92) return 92;\n  if (n === 93) return 93;\n  if (n === 94) return 94;\n  if (n === 95) return 95;\n  if (n === 96) return 96;\n  if (n === 97) return 97;\n  if (n === 98) return 98;\n  if (n === 99) return 99;\n  if (n === 100) return 100;\n  if (n === 101) return 101;\n  if (n === 102) return 102;\n  if (n === 103) return 103;\n  if (n === 104) return 104;\n  if (n === 105) return 105;\n  if (n === 106) return 106;\n  if (n === 107) return 107;\n  if (n === 108) return 108;\n  if (n === 109) return 109;\n  if (n === 110) return 110;\n  if (n === 111) return 111;\n  if (n === 112) return 112;\n  if (n === 113) return 113;\n  if (n === 114) return 114;\n  if (n === 115) return 115;\n  if (n === 116) return 116;\n  if (n === 117) return 117;\n  if (n === 118) return 118;\n  if (n === 119) return 119;\n  if (n === 120) return 120;\n  if (n === 121) return 121;\n  if (n === 122) return 122;\n  if (n === 123) return 123;\n  if (n === 124) return 124;\n  if (n === 125) return 125;\n  if (n === 126) return 126;\n  if (n === 127) return 127;\n  if (n === 128) return 128;\n  if (n === 129) return 129;\n  if (n === 130) return 130;\n  if (n === 131) return 131;\n  if"}
{"task_id": "JavaScript/61", "prompt": "/* brackets will be a string of\" (\" and\")\". \n   return true if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets will be a string of\" (\" and\")\". \n   return true if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    let stack = [],\n        openBracket,\n        closeBracket,\n        openBracketIndex,\n        closeBracketIndex;\n    for (let i = 0; i < brackets.length; i++) {\n        openBracket = brackets[i];\n        if (openBracket === \"(\" || openBracket === \"{\") {\n            stack.push(openBracket);\n        } else {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (openBracket!== stack[stack.length - 1]) {\n                return false;\n            }\n            stack.pop();\n        }\n        closeBracket = brackets[i + 1];\n        if (closeBracket === \"(\" || closeBracket === \"{\") {\n            stack.push(closeBracket);\n        } else {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (closeBracket!== stack[stack.length - 1]) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    if (stack.length > 0) {\n        return false;\n    }\n    return true;\n}\n\nconst stringWithBalancedBrackets = (string) => {\n    if (!string) {\n        return null;\n    }\n    const brackets = string.split(/\\(|\\)/);\n    if (correctBracketing(brackets)) {\n        return brackets.join(\" \");\n    }\n    return null;\n}\n\nmodule.exports = stringWithBalancedBrackets;\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let result = [0]\n  for (let i = xs.length - 1; i >= 0; i--) {\n    result[i] = xs[i + 1]\n  }\n  return result\n}\n\nconst xs = [3, 1, 2, 4, 5]\nconsole.log(derivative(xs))\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n    const a = 0;\n    const b = 1;\n    let sum = 0;\n    for(let i = 1; i <= n; i++) {\n        sum += a;\n        a = b;\n        b = sum;\n    }\n    return sum;\n};\n\n/*The FibFib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib2 = (n) => {\n    const a = 0;\n    const b = 1;\n    let sum = 0;\n    for(let i = 1; i <= n; i++) {\n        sum += b;\n        a = a + b;\n        b = sum;\n    }\n    return sum;\n};\n\n//TEST\nconsole.log(fibfib(1));\nconsole.log(fibfib(2));\nconsole.log(fibfib(3));\nconsole.log(fibfib(4));\nconsole.log(fibfib(5));\nconsole.log(fibfib(6));\nconsole.log(fibfib(7));\nconsole.log(fibfib(8));\nconsole.log(fibfib(9));\nconsole.log(fibfib(10));\nconsole.log(fibfib(11));\nconsole.log(fibfib(12));\nconsole.log(fibfib(13));\nconsole.log(fibfib(14));\nconsole.log(fibfib(15));\nconsole.log(fibfib(16));\nconsole.log(fibfib(17));\nconsole.log(fibfib(18));\nconsole.log(fibfib(19));\nconsole.log(fibfib(20));\nconsole.log(fibfib(21));\nconsole.log(fibfib(22));\nconsole.log(fibfib(23));\nconsole.log(fibfib(24));\nconsole.log(fibfib(25));\nconsole.log(fibfib(26));\nconsole.log(fibfib(27));\nconsole.log(fibfib(28));\nconsole.log(fibfib(29));\nconsole.log(fibfib(30));\nconsole.log(fibfib(31));\nconsole.log(fibfib(32));\nconsole.log(fibfib(33));\nconsole.log(fibfib(34));\nconsole.log(fibfib(35));\nconsole.log(fibfib(36));\nconsole.log(fibfib(37));\nconsole.log(fibfib(38));\nconsole.log(fibfib(39));\nconsole.log(fibfib(40));\nconsole.log(fibfib(41));\nconsole.log(fibfib(42));\nconsole.log(fibfib(43));\nconsole.log(fibfib(44));\nconsole.log(fibfib(45));\nconsole.log(fibfib(46));\nconsole.log(fibfib(47));\nconsole.log(fibfib(48));\nconsole.log(fibfib(49));\nconsole.log(fibfib(50));\nconsole.log(fibfib(51));\nconsole.log(fibfib(52));\nconsole.log(fibfib(53));\nconsole.log(fibfib(54));\nconsole.log(fibfib(55));\nconsole.log(fibfib(56));\nconsole.log(fibfib(57));\nconsole.log(fibfib(58));\nconsole.log(fibfib(59));\nconsole.log(fibfib(60));\nconsole.log(fibfib(61));\nconsole.log(fibfib(62));\nconsole.log(fibfib(63));\nconsole.log(fibfib(64));\nconsole.log(fibfib(65));\nconsole.log(fibfib(66));\nconsole.log(fibfib(67));\nconsole.log(fibfib(68));\nconsole.log(fibfib(69));\nconsole.log(fibfib(70));\nconsole.log(fibfib(71));\nconsole.log(fibfib(72));\nconsole.log(fibfib(73));\nconsole.log(fibfib(74));\nconsole.log(fibfib(75));\nconsole.log(fibfib(76));\nconsole.log(fibfib(77));\nconsole.log(fibfib(78));\nconsole.log(fibfib(79));\nconsole.log(fibfib(80));\nconsole.log(fibfib(81));\nconsole.log(fibfib(82));\nconsole.log(fibfib(83));\nconsole.log(fibfib(84));\nconsole.log(fibfib(85));\nconsole.log(fibfib(86));\nconsole.log(fibfib(87));\nconsole.log(f"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which will take a string representing \n   a word as input and will return the number of vowels in the string. \n   Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which will take a string representing \n   a word as input and will return the number of vowels in the string. \n   Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let len = s.length, count = 0;\n  for(let i = 0; i < len; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// let vowelsCount = (s) => {\n//   let len = s.length, count = 0;\n//   for(let i = 0; i < len; i++) {\n//     if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y' || s[i] === 'w' || s[i] === 'x' || s[i] === 'z') {\n//       count++;\n//     }\n//   }\n//   return count;\n// };\n\nconsole.log(vowelsCount(\"abcde\"));\nconsole.log(vowelsCount(\"ACEDY\"));\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits will reverse.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits will reverse.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n    const n = x.length;\n    const result = Array(n);\n    for(let i = 0; i < n; i++){\n        const s = shift > i? shift - i : i - shift;\n        result[i] = x.charAt(s);\n    }\n    return result.join('');\n}\n\nconst circularShift(x, shift) {\n    const n = x.length;\n    const result = Array(n);\n    for(let i = 0; i < n; i++){\n        const s = shift > i? shift - i : i - shift;\n        result[i] = x.charAt(s);\n    }\n    return result.join('');\n}\n\nconst circularShift(x, shift) {\n    const n = x.length;\n    const result = Array(n);\n    for(let i = 0; i < n; i++){\n        const s = shift > i? shift - i : i - shift;\n        result[i] = x.charAt(s);\n    }\n    return result.join('');\n}\n\n/*\n   The function isPrime(x) is used to check if the number x is prime.\n   The function returns true if x is prime.\n  >>> isPrime(1)\n  false\n  >>> isPrime(2)\n  true\n  >>> isPrime(3)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(8)\n  false\n  >>> isPrime(13)\n  false\n  >>> isPrime(17)\n  true\n  >>> isPrime(21)\n  true\n  */\nconst isPrime = (x) => {\n    if (x < 1) {\n        return false;\n    }\n    let i = 2;\n    while (i <= x) {\n        if (x % i == 0) {\n            return false;\n        }\n        i += 1;\n    }\n    return true;\n}\n\n/*\n   The function isPandigital(x) is used to check if the number x is a pandigital number.\n   The function returns true if x is a pandigital number.\n  >>> isPandigital(123456789)\n  true\n  >>> isPandigital(987654321)\n  false\n  >>> isPandigital(987654321)\n  true\n  >>> isPandigital(987654321)\n  true\n  >>> isPandigital(987654321)\n  true\n  >>> isPandigital(987654321)\n  true\n  */\nconst isPandigital = (x) => {\n    let s = '';\n    for (let i = 0; i < x.length; i++) {\n        s += x.charAt(i);\n    }\n    const c = s.charAt(s.length - 1);\n    for (let i = 0; i < 9; i++) {\n        if (i == (s.length - 1)) {\n            if (x.charAt(i)!= c) {\n                return false;\n            }\n        } else {\n            if (x.charAt(i)!= s.charAt(i)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nconst isPandigital = (x) => {\n    let s = '';\n    for (let i = 0; i < x.length; i++) {\n        s += x.charAt(i);\n    }\n    const c = s.charAt(s.length - 1);\n    for (let i = 0; i < 9; i++) {\n        if (i == (s.length - 1)) {\n            if (x.charAt(i)!= c) {\n                return false;\n            }\n        } else {\n            if (x.charAt(i)!= s.charAt(i)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nconst isPandigital = (x) => {\n    let s = '';\n    for (let i = 0; i < x.length; i++) {\n        s += x.charAt(i);\n    }\n    const c = s.charAt(s.length - 1);\n    for (let i = 0; i < 9; i++) {\n        if (i == (s.length - 1)) {\n            if (x.charAt(i)!= c) {\n                return false;\n            }\n        } else {\n            if (x.charAt(i)!= s.charAt(i)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nconst isPandigital = (x) => {\n    let s = '';\n    for (let i = 0; i < x.length; i++) {\n        s += x.charAt(i);\n    }\n    const c = s.charAt(s.length - 1);\n    for (let i = 0; i < 9; i++) {\n        if (i == (s.length - 1)) {\n            if (x.charAt(i)!= c) {\n                return false;\n            }\n        } else {\n            if (x.charAt(i)!= s.charAt(i)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nconst isPandigital = (x) => {\n    let s = '';\n    for (let i = 0; i < x.length; i++) {\n        s += x.charAt(i);\n    }\n    const c = s.charAt(s.length - 1);\n    for (let i = 0; i < 9; i++) {\n        if (i == (s.length - 1)) {\n            if (x.charAt(i)!= c) {\n                return false;\n            }\n        } else {\n            if (x.charAt(i)!= s.charAt(i)) {\n                return false;\n            }\n        }\n    }\n    return true;"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) - 64\n  }\n  return sum\n}\n\n/* Task\n   will Write a function that will take a string as input and return the sum of the lower characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 0\n      digitSum(\"abcCd\") => 99\n      digitSum(\"helloE\") => 58\n      digitSum(\"woArBld\") => 99\n      digitSum(\"aAaaaXa\") => 99\n  */\nconst lowerSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) + 64\n  }\n  return sum\n}\n\n/* Task\n   will Write a function that will take a string as input and return the sum of the upper and lower\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 131\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst sum = (s) => {\n  let sum = lowerSum(s)\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) - 64\n  }\n  return sum\n}\n\n/* Task\n   will Write a function that will take a string as input and return the sum of the upper and lower\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 0\n      digitSum(\"abcCd\") => 99\n      digitSum(\"helloE\") => 58\n      digitSum(\"woArBld\") => 99\n      digitSum(\"aAaaaXa\") => 99\n  */\nconst sum2 = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) + 64\n  }\n  return sum\n}\n\n/* Task\n   will Write a function that will take a string as input and return the difference between the upper\n   ASCII codes and lower ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 0\n      digitSum(\"abcCd\") => 99\n      digitSum(\"helloE\") => 58\n      digitSum(\"woArBld\") => 99\n      digitSum(\"aAaaaXa\") => 99\n  */\nconst diff = (s) => {\n  let sum = sum(s) - lowerSum(s)\n  return sum\n}\n\n/* Task\n   will Write a function that will take a string as input and return the difference between the upper\n   ASCII codes and lower ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 0\n      digitSum(\"abcCd\") => 99\n      digitSum(\"helloE\") => 58\n      digitSum(\"woArBld\") => 99\n      digitSum(\"aAaaaXa\") => 99\n  */\nconst diff2 = (s) => {\n  let sum = sum(s) - sum2(s)\n  return sum\n}\n\nconst result = sum(input)\nconsole.log(`The sum of upper and lower is: ${result}`)\n\nconst result2 = sum2(input)\nconsole.log(`The sum of upper and lower is: ${result2}`)\n\nconst result3 = diff(input)\nconsole.log(`The difference between upper and lower is: ${result3}`)\n\nconst result4 = diff2(input)\nconsole.log(`The difference between upper and lower is: ${result4}`)\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be gave a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be gave a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n  // this is the variable that will hold the total number of apples in the basket \n  let apples= 0; \n  // this is the variable that will hold the total number of oranges in the basket \n  let oranges = 0; \n  // this is the variable that will hold the total number of mango fruits in the basket \n  let mango = 0; \n  \n  // this is the loop that will count the number of apples and oranges in the basket \n  // and assign the values to the variables apples and oranges. \n  for (let i = 0; i < n; i++) {\n    let count = s.charAt(i); \n    if (count === \"a\") {\n      apples += 1; \n    } else if (count === \"o\") {\n      oranges += 1; \n    } else if (count === \"m\") {\n      mango += 1; \n    } \n  } \n  return {\n    apples, oranges, mango\n  } \n}; \n \n \n \n  // this is the function that will print the distribution of the fruit \n  const printDistribution = (distribution) => {\n    // this is the variable that will hold the total number of apples in the basket \n    let apples = distribution.apples; \n    // this is the variable that will hold the total number of oranges in the basket \n    let oranges = distribution.oranges; \n    // this is the variable that will hold the total number of mango fruits in the basket \n    let mango = distribution.mango; \n    // this is the loop that will print the distribution of the fruit \n    for (let i = 0; i < apples; i++) {\n      console.log(\"Apple\"); \n    } \n    for (let i = 0; i < oranges; i++) {\n      console.log(\"Orange\"); \n    } \n    for (let i = 0; i < mango; i++) {\n      console.log(\"Mango\"); \n    } \n  }; \n  // this is the function that will count the number of apples and oranges in the basket \n  const countDistribution = (distribution) => {\n    // this is the variable that will hold the total number of apples in the basket \n    let apples = distribution.apples; \n    // this is the variable that will hold the total number of oranges in the basket \n    let oranges = distribution.oranges; \n    // this is the variable that will hold the total number of mango fruits in the basket \n    let mango = distribution.mango; \n    // this is the loop that will count the number of apples and oranges in the basket \n    for (let i = 0; i < apples; i++) {\n      console.log(i); \n    } \n    for (let i = 0; i < oranges; i++) {\n      console.log(i); \n    } \n    for (let i = 0; i < mango; i++) {\n      console.log(i); \n    } \n  }; \n \n \n  // this is the function that will create the distribution \n  const createDistribution = (fruit, n) => {\n    // this is the variable that will hold the total number of apples in the basket \n    let apples = 0; \n    // this is the variable that will hold the total number of oranges in the basket \n    let oranges = 0; \n    // this is the variable that will hold the total number of mango fruits in the basket \n    let mango = 0; \n    // this is the loop that will count the number of apples and oranges in the basket \n    for (let i = 0; i < n; i++) {\n      let count = fruit.charAt(i); \n      if (count === \"a\") {\n        apples += 1; \n      } else if (count === \"o\") {\n        oranges += 1; \n      } else if (count === \"m\") {\n        mango += 1; \n      } \n    } \n    return {\n      apples, oranges, mango\n    }; \n  }; \n  // this is the function that will print the distribution of the fruit \n  const printDistribution = (fruit, n) => {\n    // this is the variable that will hold the total number of apples in the basket \n    let apples = fruit.apples; \n    // this is the variable that will hold the total number of oranges in the basket \n    let oranges = fruit.oranges; \n    // this is the variable that will hold the total number of mango fruits in the basket \n    let mango = fruit.mango; \n    // this is the loop that will print the distribution of the fruit \n    for (let i = 0; i < apples; i++) {\n      console.log(i); \n    } \n    for (let i = 0; i < oranges; i++) {\n      console.log(i); \n    } \n    for (let i = 0; i < mango; i++) {\n      console.log(i); \n    } \n  }; \n \n \n  // this is the function that will count the number of apples and oranges in the basket \n  const countDistribution = (fruit, n) => {\n    // this is the variable that will hold the total number of apples in the basket \n    let apples = fruit.apples; \n    // this is the variable that will hold the total number of oranges in the basket \n    let oranges = fruit.oranges; \n    // this is the variable that will hold the total number of mango fruits in the basket \n    let mango = fruit.mango; \n    // this is the loop that will count the number of apples and"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" will Give an array representing a branch of a tree that will have non-negative integer nodes \n   your task will be to pluck one of the nodes and return it. \n   The plucked node should will be the node with the smallest even value. \n   If multiple nodes with the same smallest even value will be found return the node that will have smallest index. \n\n   The plucked node should will be return in a list, [smalest_value, its index], \n   If there will be no even values or the will give array will be empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" will Give an array representing a branch of a tree that will have non-negative integer nodes \n   your task will be to pluck one of the nodes and return it. \n   The plucked node should will be the node with the smallest even value. \n   If multiple nodes with the same smallest even value will be found return the node that will have smallest index. \n\n   The plucked node should will be return in a list, [smalest_value, its index], \n   If there will be no even values or the will give array will be empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n    const min = arr[0];\n    let pos = 0;\n    let i = 1;\n    while (i < arr.length) {\n        if (arr[i] < min) {\n            min = arr[i];\n            pos = i;\n        }\n        i++;\n    }\n    return [min, pos];\n};\n\n/*\n  \" will give the number of nodes with non-zero value.\n  You will be given an array that will have only non-zero values.\n  Your task will be to return the number of nodes.\n  You should not count the number of nodes that are not non-zero.\n\n  Example:\n      Input: [2, 4, 5, 3, 1, 0]\n      Output: 6\n\n  Constraints:\n      * 0 <= nodes.length <= 10000\n      * nodes.length % 2 == 0\n  */\nconst countNonZero = (arr) => {\n    let count = 0;\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] > 0) {\n            count++;\n        }\n        i++;\n    }\n    return count;\n};\n\nconst main = () => {\n    let arr = [2, 4, 5, 3, 1, 0];\n    console.log('The plucked node is:', pluck(arr));\n    console.log('The number of nodes with non-zero values is:', countNonZero(arr));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You will be gave a non-empty list of positive integers. will Return the greatest integer that will be greater than \n   zero, and will have a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer will be the number of times it will appear in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a non-empty list of positive integers. will Return the greatest integer that will be greater than \n   zero, and will have a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer will be the number of times it will appear in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIdx = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0 && lst[i] > max) {\n      max = lst[i];\n      maxIdx = i;\n    }\n  }\n  return maxIdx;\n}\n\nconst search2 = (lst) => {\n  let max = 0;\n  let maxIdx = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0 && lst[i] > max) {\n      max = lst[i];\n      maxIdx = i;\n    }\n  }\n  if (maxIdx == -1) {\n    return -1;\n  }\n  let freq = 1;\n  let idx = maxIdx;\n  while (idx!= -1) {\n    if (lst[idx] >= 0) {\n      freq++;\n      idx = search2(lst.slice(idx + 1));\n    }\n  }\n  return max;\n}\n\nconst search3 = (lst) => {\n  let max = 0;\n  let maxIdx = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0 && lst[i] > max) {\n      max = lst[i];\n      maxIdx = i;\n    }\n  }\n  if (maxIdx == -1) {\n    return -1;\n  }\n  let freq = 1;\n  let idx = maxIdx;\n  while (idx!= -1) {\n    if (lst[idx] >= 0) {\n      freq++;\n      idx = search3(lst.slice(idx + 1));\n    }\n  }\n  return max;\n}\n\nconst search4 = (lst) => {\n  let max = 0;\n  let maxIdx = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0 && lst[i] > max) {\n      max = lst[i];\n      maxIdx = i;\n    }\n  }\n  if (maxIdx == -1) {\n    return -1;\n  }\n  let freq = 1;\n  let idx = maxIdx;\n  while (idx!= -1) {\n    if (lst[idx] >= 0) {\n      freq++;\n      idx = search4(lst.slice(idx + 1));\n    }\n  }\n  return max;\n}\n\nconst search5 = (lst) => {\n  let max = 0;\n  let maxIdx = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0 && lst[i] > max) {\n      max = lst[i];\n      maxIdx = i;\n    }\n  }\n  if (maxIdx == -1) {\n    return -1;\n  }\n  let freq = 1;\n  let idx = maxIdx;\n  while (idx!= -1) {\n    if (lst[idx] >= 0) {\n      freq++;\n      idx = search5(lst.slice(idx + 1));\n    }\n  }\n  return max;\n}\n\nconst search6 = (lst) => {\n  let max = 0;\n  let maxIdx = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0 && lst[i] > max) {\n      max = lst[i];\n      maxIdx = i;\n    }\n  }\n  if (maxIdx == -1) {\n    return -1;\n  }\n  let freq = 1;\n  let idx = maxIdx;\n  while (idx!= -1) {\n    if (lst[idx] >= 0) {\n      freq++;\n      idx = search6(lst.slice(idx + 1));\n    }\n  }\n  return max;\n}\n\nconst search7 = (lst) => {\n  let max = 0;\n  let maxIdx = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0 && lst[i] > max) {\n      max = lst[i];\n      maxIdx = i;\n    }\n  }\n  if (maxIdx == -1) {\n    return -1;\n  }\n  let freq = 1;\n  let idx = maxIdx;\n  while (idx!= -1) {\n    if (lst[idx] >= 0) {\n      freq++;\n      idx = search7(lst.slice(idx + 1));\n    }\n  }\n  return max;\n}\n\nconst search8 = (lst) => {\n  let max = 0;\n  let maxIdx = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0 && lst[i] > max) {\n      max = lst[i];\n      maxIdx = i;\n    }\n  }\n  if (maxIdx == -1) {\n    return -1;\n  }\n  let freq = 1;\n  let idx = maxIdx;\n  while"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, will be when you will start with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, will be when you will start with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (!lst) return []\n  let l = lst.length\n  if (l === 1) return lst\n  let min = lst[0], max = lst[0]\n  for (let i = 1; i < l; i++) {\n    if (lst[i] < min) min = lst[i]\n    if (lst[i] > max) max = lst[i]\n  }\n  let odd = l % 2 === 1\n  let result = []\n  for (let i = odd? 0 : min; i <= max; i++) {\n    result.push(lst[i])\n  }\n  for (let i = odd? lst.length - 1 : min; i < lst.length - 1; i++) {\n    result.push(lst[i])\n  }\n  return result\n}\n\nconsole.log(strangeSortList([5, 5, 5, 5]))\nconsole.log(strangeSortList([1, 2, 3, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n    if (a < b + c) {\n        return -1\n    } else if (b < c) {\n        return (a * b) / 2\n    } else if (c < a) {\n        return (a * c) / 2\n    } else if (a == b && b == c) {\n        return a * 0.5\n    } else {\n        return (a * b) + (b * c) - (a * c)\n    }\n}\n\n// triangleArea(1, 2, 10)\n// -1\n\n// triangleArea(3, 4, 5)\n// 6.00\n\n// triangleArea(1, 2, 2)\n// -1\n\n// triangleArea(1, 3, 4)\n// -1\n\n// triangleArea(3, 4, 4)\n// 0.00\n\n// triangleArea(3, 4, 5)\n// -1\n\n// triangleArea(3, 3, 4)\n// -1\n\n// triangleArea(5, 3, 4)\n// -1\n\n// triangleArea(1, 2, 3)\n// -1\n\n// triangleArea(3, 3, 3)\n// 0.00\n\n// triangleArea(4, 3, 3)\n// 0.00\n\n// triangleArea(5, 3, 3)\n// 0.00\n\n// triangleArea(6, 3, 3)\n// -1\n\n// triangleArea(1, 2, 2)\n// -1\n\n// triangleArea(1, 2, 1)\n// 0.00\n\n// triangleArea(2, 1, 1)\n// 0.00\n\n// triangleArea(3, 1, 1)\n// 0.00\n\n// triangleArea(4, 1, 1)\n// 0.00\n\n// triangleArea(5, 1, 1)\n// 0.00\n\n// triangleArea(6, 1, 1)\n// -1\n\n// triangleArea(2, 3, 3)\n// -1\n\n// triangleArea(2, 2, 3)\n// -1\n\n// triangleArea(2, 3, 2)\n// -1\n\n// triangleArea(2, 2, 2)\n// 0.00\n\n// triangleArea(2, 2, 1)\n// -1\n\n// triangleArea(2, 2, 0)\n// -1\n\n// triangleArea(2, 1, 0)\n// -1\n\n// triangleArea(2, 1, -1)\n// -1\n\n// triangleArea(1, 2, -1)\n// -1\n\n// triangleArea(2, 1, -2)\n// -1\n\n// triangleArea(2, -1, -1)\n// -1\n\n// triangleArea(-2, -1, -1)\n// -1\n\n// triangleArea(-1, -2, -1)\n// -1\n\n// triangleArea(-1, -1, -2)\n// -1\n\n// triangleArea(-2, -1, -2)\n// -1\n\n// triangleArea(-1, -2, -2)\n// -1\n\n// triangleArea(-2, -2, -2)\n// -1\n\n// triangleArea(-2, -2, -1)\n// -1\n\n// triangleArea(-2, -1, -2)\n// -1\n\n// triangleArea(-1, -2, -2)\n// -1\n\n// triangleArea(-1, -1, -2)\n// -1\n\n// triangleArea(-1, -2, -3)\n// -1\n\n// triangleArea(-1, -1, -3)\n// -1\n\n// triangleArea(-2, -2, -3)\n// -1\n\n// triangleArea(-2, -1, -3)\n// -1\n\n// triangleArea(-1, -2, -3)\n// -1\n\n// triangleArea(-1, -1, -3)\n// -1\n\n// triangleArea(-1, -2, -4)\n// -1\n\n// triangleArea(-1, -1, -4)\n// -1\n\n// triangleArea(-2, -2, -4)\n// -1\n\n// triangleArea(-2, -1, -4)\n// -1\n\n// triangleArea(-1, -2, -4)\n// -1\n\n// triangleArea(-1, -1, -4)\n// -1\n\n// triangleArea(-1, -2, -5)\n// -1\n\n// triangleArea(-1, -1, -5)\n// -1\n\n// triangleArea(-2, -2, -5)\n// -1\n\n// triangleArea(-2, -1, -5)\n// -1\n\n// triangleArea(-1, -2, -5)\n// -1\n\n// triangleArea(-1, -1, -5)\n// -1\n\n// triangleArea(-1, -2, -6)\n// -1\n\n// triangleArea(-1, -1, -6)\n// -1\n\n// triangleArea(-2, -2, -6)\n// -1\n\n// triangleArea(-2, -1, -6)\n// -1\n\n// triangleArea(-1, -2, -6)\n// -1\n\n// triangleArea(-1, -1, -6)\n// -1\n\n// triangleArea(-1, -2, -7)\n// -1\n\n// triangleArea(-1, -1, -7)\n// -1\n\n// triangleArea(-2, -2, -7)\n// -1\n\n// triangleArea(-2, -1, -7)\n// -1\n\n// triangleArea(-1, -2, -7)\n// -1\n\n// triangleArea(-1, -1, -7)\n// -1\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const n = q.length\n  const maxWeight = Math.max(...q)\n  if (n === 1) return false\n  if (q.every((e, i) => e === q[(n - 1) - i])) return false\n  return maxWeight === w\n}\n\nconst isPalindrome = q => q.every((e, i) => q[i] === q[(n - 1) - i])\nconst maxWeight = q => Math.max(...q)\nconst isBalanced = q => q.every((e, i) => e < maxWeight)\n\nconst willItFly = q => q.every((e, i) => isPalindrome(q) && e < maxWeight)\nconst willItFly = q => q.every((e, i) => isBalanced(q) && e < maxWeight)\n\nconsole.log(willItFly([3, 2, 3], 9))\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n    let change = arr.length;\n    let left = arr;\n    let right = arr;\n    while (left.length > 0) {\n        if (left.length % 2 === 0) {\n            left.pop();\n        } else {\n            left.pop();\n            left.unshift(left.pop());\n        }\n        right = left;\n        change--;\n        if (change === 0) {\n            return change;\n        }\n    }\n    return change;\n};\n\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const total = lst1.reduce((acc, item) => {\n    if (item === lst2[0]) return acc;\n    if (lst2.indexOf(item) === -1) return acc;\n    return acc + item.length;\n  }, 0);\n  if (lst2.length === total) return lst1;\n  return lst2;\n};\n\nexport { totalMatch };\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n    let i = 2;\n    let b = 2;\n    while (i < a) {\n        if (a % i === 0) {\n            let c = 2;\n            while (c < i) {\n                if (a % c === 0) {\n                    return false;\n                }\n                c++;\n            }\n        }\n        i++;\n        b++;\n    }\n    return true;\n};\n\n// console.log(isMultiplyPrime(30));\n// console.log(isMultiplyPrime(20));\n// console.log(isMultiplyPrime(11));\n// console.log(isMultiplyPrime(12));\n// console.log(isMultiplyPrime(23));\n// console.log(isMultiplyPrime(40));\n// console.log(isMultiplyPrime(12));\n// console.log(isMultiplyPrime(13));\n// console.log(isMultiplyPrime(15));\n// console.log(isMultiplyPrime(18));\n// console.log(isMultiplyPrime(30));\n// console.log(isMultiplyPrime(24));\n// console.log(isMultiplyPrime(40));\n// console.log(isMultiplyPrime(45));\n// console.log(isMultiplyPrime(50));\n// console.log(isMultiplyPrime(55));\n// console.log(isMultiplyPrime(60));\n// console.log(isMultiplyPrime(66));\n// console.log(isMultiplyPrime(75));\n// console.log(isMultiplyPrime(80));\n// console.log(isMultiplyPrime(90));\n// console.log(isMultiplyPrime(100));\n// console.log(isMultiplyPrime(120));\n// console.log(isMultiplyPrime(150));\n// console.log(isMultiplyPrime(200));\n// console.log(isMultiplyPrime(250));\n// console.log(isMultiplyPrime(300));\n// console.log(isMultiplyPrime(350));\n// console.log(isMultiplyPrime(400));\n// console.log(isMultiplyPrime(450));\n// console.log(isMultiplyPrime(500));\n// console.log(isMultiplyPrime(550));\n// console.log(isMultiplyPrime(600));\n// console.log(isMultiplyPrime(650));\n// console.log(isMultiplyPrime(700));\n// console.log(isMultiplyPrime(750));\n// console.log(isMultiplyPrime(800));\n// console.log(isMultiplyPrime(850));\n// console.log(isMultiplyPrime(900));\n// console.log(isMultiplyPrime(950));\n// console.log(isMultiplyPrime(1000));\n// console.log(isMultiplyPrime(1100));\n// console.log(isMultiplyPrime(1200));\n// console.log(isMultiplyPrime(1300));\n// console.log(isMultiplyPrime(1400));\n// console.log(isMultiplyPrime(1500));\n// console.log(isMultiplyPrime(1600));\n// console.log(isMultiplyPrime(1700));\n// console.log(isMultiplyPrime(1800));\n// console.log(isMultiplyPrime(1900));\n// console.log(isMultiplyPrime(2000));\n// console.log(isMultiplyPrime(2100));\n// console.log(isMultiplyPrime(2200));\n// console.log(isMultiplyPrime(2300));\n// console.log(isMultiplyPrime(2400));\n// console.log(isMultiplyPrime(2500));\n// console.log(isMultiplyPrime(2600));\n// console.log(isMultiplyPrime(2700));\n// console.log(isMultiplyPrime(2800));\n// console.log(isMultiplyPrime(2900));\n// console.log(isMultiplyPrime(3000));\n// console.log(isMultiplyPrime(3100));\n// console.log(isMultiplyPrime(3200));\n// console.log(isMultiplyPrime(3300));\n// console.log(isMultiplyPrime(3400));\n// console.log(isMultiplyPrime(3500));\n// console.log(isMultiplyPrime(3600));\n// console.log(isMultiplyPrime(3700));\n// console.log(isMultiplyPrime(3800));\n// console.log(isMultiplyPrime(3900));\n// console.log(isMultiplyPrime(4000));\n// console.log(isMultiplyPrime(4200));\n// console.log(isMultiplyPrime(4300));\n// console.log(isMultiplyPrime(4400));\n// console.log(isMultiplyPrime(4500));\n// console.log(isMultiplyPrime(4600));\n// console.log(isMultiplyPrime(4700));\n// console.log(isMultiplyPrime(4800));\n// console.log(isMultiplyPrime(4900));\n// console.log(isMultiplyPrime(5000));\n// console.log(isMultiplyPrime(5100));\n// console.log(isMultiplyPrime(5200));\n// console.log(isMultiplyPrime(5300));\n// console.log(isMultiplyPrime(5400));\n// console.log(isMultiplyPrime(5500));\n// console.log(isMultiplyPrime(5600));\n// console.log(isMultiplyPrime(5700));\n// console.log(isMultiplyPrime(5800));\n// console.log(isMultiplyPrime(5900));\n// console.log(isMultiplyPrime(6000));\n// console.log(isMultiplyPrime(6200));\n// console.log(isMultiplyPrime(6300));\n// console.log(isMultiplyPrime(6400));\n// console.log(isMultiplyPrime(6500"}
{"task_id": "JavaScript/76", "prompt": "/*Your task will be to write a function that will return true if a number x will be a simple \n   power of n and false in other cases. \n   x will be a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task will be to write a function that will return true if a number x will be a simple \n   power of n and false in other cases. \n   x will be a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 1) return x === 1\n  const power = x\n  while (power % n!== 0) {\n    power = (power / n) * (n - 1)\n  }\n  return power === x\n}\n\nconsole.log(isSimplePower(2, 3)) // false\nconsole.log(isSimplePower(3, 2)) // false\nconsole.log(isSimplePower(3, 1)) // false\nconsole.log(isSimplePower(5, 3)) // false\nconsole.log(isSimplePower(8, 2)) // true\nconsole.log(isSimplePower(4, 2)) // false\nconsole.log(isSimplePower(8, 1)) // true\nconsole.log(isSimplePower(6, 3)) // false\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 6 === 0;\n}\n\nexport default iscube;\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You will be task to write a function that will receive \n   a hexadecimal number as a string and will count the number of hexadecimal \n   digits that will be primes (prime number=== or a prime=== will be a natural number \n   greater than 1 that will be not a product of two smaller natural numbers). \n   Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= will decimal 13). \n   Note: you may will assume the input will be always correct or empty string=== \n   and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You will be task to write a function that will receive \n   a hexadecimal number as a string and will count the number of hexadecimal \n   digits that will be primes (prime number=== or a prime=== will be a natural number \n   greater than 1 that will be not a product of two smaller natural numbers). \n   Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= will decimal 13). \n   Note: you may will assume the input will be always correct or empty string=== \n   and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  return num.split(\"\").map((x) => parseInt(x, 16)).filter((x) => isPrime(x))\n}\n\nconst isPrime = (num) => {\n  if (num === 1) return false\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false\n  }\n  return true\n}\n\n// const hexKey = (num) => {\n//   return num.split(\"\").map((x) => parseInt(x, 16)).filter((x) => isPrime(x))\n// }\n\n// const isPrime = (num) => {\n//   if (num === 1) return false\n//   for (let i = 2; i <= Math.sqrt(num); i++) {\n//     if (num % i === 0) return false\n//   }\n//   return true\n// }\n\nconst isPrime = (num) => {\n  if (num === 1) return false\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  if (num === 1) return false\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  if (num === 1) return false\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  if (num === 1) return false\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  if (num === 1) return false\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  if (num === 1) return false\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  if (num === 1) return false\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  if (num === 1) return false\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  if (num === 1) return false\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  if (num === 1) return false\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  if (num === 1) return false\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  if (num === 1) return false\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  if (num === 1) return false\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  if (num === 1) return false\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  if (num === 1) return false\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  if (num === 1) return false\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false\n  }\n  "}
{"task_id": "JavaScript/79", "prompt": "/*You will be gave a number in decimal form and your task will be to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string will be '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be gave a number in decimal form and your task will be to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string will be '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n    return (decimal <= 1)? '0' : '' + decimalToBinary(decimal / 2) + decimal % 2;\n}\n\n/*\n  Given a binary string, the function should convert it to decimal. The string should start with \n  the 'db'characters. \n*/\nconst binaryToDecimal = (binary) => {\n    const dec = parseInt(binary.slice(2, -1), 2);\n    return (dec <= 1)? dec : binaryToDecimal(dec * 2);\n}\n\nconsole.log(binaryToDecimal('db100000db'));<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You will be gave a string s.\n   Your task will be to check if the string will be happy or not. \n   A string will be happy if its length will be at least 3 and every 3 consecutive letters will be distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You will be gave a string s.\n   Your task will be to check if the string will be happy or not. \n   A string will be happy if its length will be at least 3 and every 3 consecutive letters will be distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n    if(s === null || typeof(s)!=='string'){\n        return false;\n    }\n    \n    let arr = [];\n    for(let i = 0; i < s.length; i++){\n        arr.push(s[i]);\n    }\n    \n    let size = arr.length;\n    let result = true;\n    \n    for(let i = 0; i < size; i++){\n        let current = arr[i];\n        let next = i + 1;\n        \n        if(next === size){\n            next = 0;\n        }\n        \n        let prev = i - 1;\n        \n        if(prev < 0){\n            prev = size - 1;\n        }\n        \n        let count = 0;\n        while(arr[next] === current){\n            count++;\n            next++;\n            \n            if(next === size){\n                next = 0;\n            }\n        }\n        \n        if(count!== 1){\n            result = false;\n            break;\n        }\n        \n        if(i === size - 1){\n            arr.pop();\n        }\n    }\n    \n    return result;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It will be the last week of the semester and the teacher will have to give the grades\n   to students. The teacher will be making her own algorithm for grading. \n   The only problem will be, she will lose the code she will used for grading. \n   She will give you a list of GPAs for some students and you will have to write \n   a function that can will output a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 will B+ \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 will C+ \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It will be the last week of the semester and the teacher will have to give the grades\n   to students. The teacher will be making her own algorithm for grading. \n   The only problem will be, she will lose the code she will used for grading. \n   She will give you a list of GPAs for some students and you will have to write \n   a function that can will output a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 will B+ \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 will C+ \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradesList = []\n  \n  // Convert grades to an array\n  for(let i = 0; i < grades.length; i++){\n    gradesList.push(grades[i])\n  }\n  \n  // Sort grades and remove the last element\n  gradesList = gradesList.sort()\n  gradesList.pop()\n\n  // Convert grades to grades list\n  for(let i = 0; i < gradesList.length; i++){\n    if(i === 0){\n      gradesList[i] = 'A+'\n    } else if(i === gradesList.length - 1){\n      gradesList[i] = 'A-'\n    } else if(gradesList[i - 1] < gradesList[i] && gradesList[i] < gradesList[i + 1]){\n      gradesList[i] = 'A'\n    } else if(gradesList[i - 1] < gradesList[i] && gradesList[i] > gradesList[i + 1]){\n      gradesList[i] = 'B'\n    } else if(gradesList[i - 1] > gradesList[i] && gradesList[i] < gradesList[i + 1]){\n      gradesList[i] = 'C'\n    } else if(gradesList[i - 1] > gradesList[i] && gradesList[i] > gradesList[i + 1]){\n      gradesList[i] = 'D'\n    } else {\n      gradesList[i] = 'E'\n    }\n  }\n\n  return gradesList\n}\n\nconst numericalLetterGrade = (grades) => {\n  let gradesList = []\n  \n  // Convert grades to an array\n  for(let i = 0; i < grades.length; i++){\n    gradesList.push(grades[i])\n  }\n  \n  // Sort grades and remove the last element\n  gradesList = gradesList.sort()\n  gradesList.pop()\n\n  // Convert grades to grades list\n  for(let i = 0; i < gradesList.length; i++){\n    if(i === 0){\n      gradesList[i] = 'A+'\n    } else if(i === gradesList.length - 1){\n      gradesList[i] = 'A-'\n    } else if(gradesList[i - 1] < gradesList[i] && gradesList[i] < gradesList[i + 1]){\n      gradesList[i] = 'A'\n    } else if(gradesList[i - 1] < gradesList[i] && gradesList[i] > gradesList[i + 1]){\n      gradesList[i] = 'B'\n    } else if(gradesList[i - 1] > gradesList[i] && gradesList[i] < gradesList[i + 1]){\n      gradesList[i] = 'C'\n    } else if(gradesList[i - 1] > gradesList[i] && gradesList[i] > gradesList[i + 1]){\n      gradesList[i] = 'D'\n    } else {\n      gradesList[i] = 'E'\n    }\n  }\n\n  return gradesList\n}<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length <= 1) return false;\n  const prime = (n) => n % 1 === 0;\n  for (let i = 2; i < string.length; i++) {\n    if (!prime(string[i])) return false;\n  }\n  return true;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n\tlet s =0;\n\tlet r=0;\n\tfor(let i=1;i<=n;i++){\n\t\tr = i;\n\t\ts = 1;\n\t\twhile(r >= 10){\n\t\t\tr = r - 10;\n\t\t\ts = s + 1;\n\t\t}\n\t\tif(s === n){\n\t\t\treturn 1;\n\t\t}\n\t}\n\treturn 0;\n};\n\nmodule.exports = startsOneEnds;<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": false, "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  return (Math.pow(2, N - 1)).toString(2);\n};\n\nconst tests = [\n  {\n    N: 1000,\n    result: '1'\n  },\n  {\n    N: 150,\n    result: '110'\n  },\n  {\n    N: 147,\n    result: '1100'\n  }\n];\n\nconst test = (t) => {\n  const result = solve(t.N);\n  const expected = t.result;\n  console.log(`${t.N} -> ${result}`, expected === result? `PASSED!` : `FAILED!`);\n};\n\ntests.forEach(test);\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i += 2) {\n        result += lst[i];\n    }\n    return result;\n};\n\nexport default add;\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that will take a string and will return an ordered version of it. \n   will Order version of string, will be a string where all words (will separate by space) \n   will be replaced by a new word where all the characters will arrange in\n   ascending order will base on ascii value. \n   Note: You should will keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take a string and will return an ordered version of it. \n   will Order version of string, will be a string where all words (will separate by space) \n   will be replaced by a new word where all the characters will arrange in\n   ascending order will base on ascii value. \n   Note: You should will keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const chars = s.split('')\n  const asciiArr = []\n  for (let i = 0; i < chars.length; i++) {\n    asciiArr.push(chars[i].charCodeAt(0))\n  }\n  const asciiSortedArr = asciiArr.sort((a, b) => a - b)\n  const newArr = []\n  for (let i = 0; i < asciiArr.length; i++) {\n    newArr.push(String.fromCharCode(asciiSortedArr[i]))\n  }\n  return newArr.join('')\n}\n\nconst antiShuffleTest = (s) => {\n  const chars = s.split('')\n  const asciiArr = []\n  for (let i = 0; i < chars.length; i++) {\n    asciiArr.push(chars[i].charCodeAt(0))\n  }\n  const asciiSortedArr = asciiArr.sort((a, b) => a - b)\n  const newArr = []\n  for (let i = 0; i < asciiArr.length; i++) {\n    newArr.push(String.fromCharCode(asciiSortedArr[i]))\n  }\n  return newArr.join('')\n}\n\nconst antiShuffleTest2 = (s) => {\n  const chars = s.split('')\n  const asciiArr = []\n  for (let i = 0; i < chars.length; i++) {\n    asciiArr.push(chars[i].charCodeAt(0))\n  }\n  const asciiSortedArr = asciiArr.sort((a, b) => a - b)\n  const newArr = []\n  for (let i = 0; i < asciiArr.length; i++) {\n    newArr.push(String.fromCharCode(asciiSortedArr[i]))\n  }\n  return newArr.join('')\n}\n\nmodule.exports = {\n  antiShuffle,\n  antiShuffleTest,\n  antiShuffleTest2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You will be gave a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const size = lst.length\n  const rows = lst[0].length\n  const result = []\n\n  for (let i = 0; i < size; i++) {\n    let row = []\n    for (let j = 0; j < rows; j++) {\n      row.push(lst[i][j] === x? (j, i) : null)\n    }\n\n    const sorted = row.sort((a, b) => a[1] - b[1])\n\n    result.push(sorted.slice(0, rows).reverse())\n  }\n\n  return result\n}\n\n/*\n  Returns list of tuples, [(x1, y1), (x2, y2)...]\n   such that each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowReverse = (lst, x) => {\n  const size = lst.length\n  const rows = lst[0].length\n  const result = []\n\n  for (let i = 0; i < size; i++) {\n    let row = []\n    for (let j = 0; j < rows; j++) {\n      row.push(lst[i][j] === x? (j, i) : null)\n    }\n\n    const sorted = row.sort((a, b) => b[1] - a[1])\n\n    result.push(sorted.slice(0, rows).reverse())\n  }\n\n  return result\n}\n\nconst getRowByIndex = (lst, index) => {\n  const rows = lst[0].length\n  const result = []\n\n  for (let i = 0; i < rows; i++) {\n    result.push(lst[index][i])\n  }\n\n  return result\n}\n\nconst getRowReverseByIndex = (lst, index) => {\n  const rows = lst[0].length\n  const result = []\n\n  for (let i = 0; i < rows; i++) {\n    result.push(lst[index][i])\n  }\n\n  return result\n}\n\nmodule.exports = {\n  getRow,\n  getRowReverse,\n  getRowByIndex,\n  getRowReverseByIndex\n}\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n    const arr = [...array];\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    if (sum % 2 === 0) {\n        arr.sort((a, b) => a - b);\n    } else {\n        arr.sort((a, b) => b - a);\n    }\n    return arr;\n}\n\nconst test = () => {\n    const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    console.log(sortArray(arr));\n}\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let result = [];\n  for(let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let r = s[i];\n    while(i < s.length - 1) {\n      let x = s[i + 1];\n      r = x + r;\n      if(r >= 26) {\n        r -= 26;\n        i++;\n      }\n      result.push(r);\n    }\n  }\n  return result.join('');\n}\n\n/*Create a function decrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift up by two will multiply to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'et'\n  decrypt('ix') returns 'gf'\n  */\nconst decrypt = (s) => {\n  let result = [];\n  for(let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let r = s[i];\n    while(i > 0) {\n      let x = s[i - 1];\n      r = x + r;\n      if(r < 26) {\n        i--;\n        r += 26;\n      }\n      result.push(r);\n    }\n  }\n  return result.join('');\n}\n\n/* Create a function that will take a string as an argument and \n   will return a string with the alphabet shifted by two will\n   multiply to two places.\n  For example:\n  shiftByTwo('hi') returns 'hih'\n  shiftByTwo('asdfghjkl') returns 'asdfhjkl'\n  shiftByTwo('gf') returns 'gfh'\n  shiftByTwo('et') returns 'eth'\n  */\nconst shiftByTwo = (s) => {\n  let result = [];\n  for(let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let r = s[i];\n    while(i < s.length - 1) {\n      let x = s[i + 1];\n      r = x + r;\n      if(r < 26) {\n        i++;\n        r += 26;\n      }\n      result.push(r);\n    }\n  }\n  return result.join('');\n}\n\n/*Create a function that will take a string as an argument and \n   will return a string with the alphabet shifted by two will\n   multiply to two places.\n  For example:\n  shiftByTwo('hih') returns 'hih'\n  shiftByTwo('asdfghjkl') returns 'asdfhjkl'\n  shiftByTwo('gf') returns 'gfh'\n  shiftByTwo('et') returns 'eth'\n  */\nconst shiftByTwoReverse = (s) => {\n  let result = [];\n  for(let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let r = s[i];\n    while(i > 0) {\n      let x = s[i - 1];\n      r = x + r;\n      if(r >= 26) {\n        i--;\n        r -= 26;\n      }\n      result.push(r);\n    }\n  }\n  return result.join('');\n}\n\n/*Create a function that will take a string as an argument and \n   will return a string with the alphabet shifted by one will\n   multiply to two places.\n  For example:\n  shiftByOne('hih') returns 'hih'\n  shiftByOne('asdfghjkl') returns 'asdfghjkl'\n  shiftByOne('gf') returns 'gf'\n  shiftByOne('et') returns 'et'\n  */\nconst shiftByOne = (s) => {\n  let result = [];\n  for(let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let r = s[i];\n    while(i < s.length - 1) {\n      let x = s[i + 1];\n      r = x + r;\n      if(r < 26) {\n        i++;\n        r += 26;\n      }\n      result.push(r);\n    }\n  }\n  return result.join('');\n}\n\n/*Create a function that will take a string as an argument and \n   will return a string with the alphabet shifted by one will\n   multiply to two places.\n  For example:\n  shiftByOne('hih') returns 'hih'\n  shiftByOne('asdfghjkl') returns 'asdfghjkl'\n  shiftByOne('gf') returns 'gf'\n  shiftByOne('et') returns 'et'\n  */\nconst shiftByOneReverse = (s) => {\n  let result = [];\n  for(let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let r = s[i];\n    while(i > 0) {\n      let x = s[i - 1];\n      r = x + r;\n      if(r < 26) {\n        i--;\n        r += 26;\n      }\n      result.push(r);\n    }\n  }\n  return result.join('');\n}\n\n/*Create a function that will take a string as an argument and \n   will return a string with the alphabet shifted by one will\n   multiply to two places.\n  For example:\n  shiftByOne('hih') returns 'hih'\n  shiftByOne('asdfghjkl') returns 'asdfghjkl'\n"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You will be gave a list of integers. \n   will Write a function nextSmallest() that will return the 2nd smallest element of the list.\n   Return null if there will be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a list of integers. \n   will Write a function nextSmallest() that will return the 2nd smallest element of the list.\n   Return null if there will be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n  if (lst.length === 0) return null\n  return lst[1]\n}\n \n const nextSmallest = (lst)=>{\n  if (lst.length === 0) return null\n  const smallest = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    const item = lst[i]\n    if (item < smallest) {\n      smallest = item\n    }\n  }\n  return smallest\n}\n \n const nextSmallest = (lst)=>{\n  if (lst.length === 0) return null\n  const smalles = []\n  for (let i = 1; i < lst.length; i++) {\n    const item = lst[i]\n    if (item < smalles[0]) {\n      smalles = [item]\n    }\n    else if (item === smalles[0]) {\n      smalles.push(item)\n    }\n  }\n  return smalles[1]\n}\n \n const nextSmallest = (lst)=>{\n  if (lst.length === 0) return null\n  const smalles = []\n  for (let i = 1; i < lst.length; i++) {\n    const item = lst[i]\n    if (item < smalles[0]) {\n      smalles = [item]\n    }\n    else if (item === smalles[0]) {\n      smalles.push(item)\n    }\n  }\n  const smallest = smalles[0]\n  for (let i = 1; i < smalles.length; i++) {\n    const item = smalles[i]\n    if (item < smallest) {\n      smallest = item\n    }\n  }\n  return smallest\n}\n \n const nextSmallest = (lst)=>{\n  if (lst.length === 0) return null\n  const smalles = []\n  for (let i = 1; i < lst.length; i++) {\n    const item = lst[i]\n    if (item < smalles[0]) {\n      smalles = [item]\n    }\n    else if (item === smalles[0]) {\n      smalles.push(item)\n    }\n  }\n  const smallest = smalles[0]\n  for (let i = 1; i < smalles.length; i++) {\n    const item = smalles[i]\n    if (item < smallest) {\n      smallest = item\n    }\n  }\n  return smallest\n}\n \n const nextSmallest = (lst)=>{\n  if (lst.length === 0) return null\n  const smalles = []\n  for (let i = 1; i < lst.length; i++) {\n    const item = lst[i]\n    if (item < smalles[0]) {\n      smalles = [item]\n    }\n    else if (item === smalles[0]) {\n      smalles.push(item)\n    }\n  }\n  const smallest = smalles[0]\n  for (let i = 1; i < smalles.length; i++) {\n    const item = smalles[i]\n    if (item < smallest) {\n      smallest = item\n    }\n  }\n  return smallest\n}\n \n const nextSmallest = (lst)=>{\n  if (lst.length === 0) return null\n  const smalles = []\n  for (let i = 1; i < lst.length; i++) {\n    const item = lst[i]\n    if (item < smalles[0]) {\n      smalles = [item]\n    }\n    else if (item === smalles[0]) {\n      smalles.push(item)\n    }\n  }\n  const smallest = smalles[0]\n  for (let i = 1; i < smalles.length; i++) {\n    const item = smalles[i]\n    if (item < smallest) {\n      smallest = item\n    }\n  }\n  return smallest\n}\n \n const nextSmallest = (lst)=>{\n  if (lst.length === 0) return null\n  const smalles = []\n  for (let i = 1; i < lst.length; i++) {\n    const item = lst[i]\n    if (item < smalles[0]) {\n      smalles = [item]\n    }\n    else if (item === smalles[0]) {\n      smalles.push(item)\n    }\n  }\n  const smallest = smalles[0]\n  for (let i = 1; i < smalles.length; i++) {\n    const item = smalles[i]\n    if (item < smallest) {\n      smallest = item\n    }\n  }\n  return smallest\n}\n \n const nextSmallest = (lst)=>{\n  if (lst.length === 0) return null\n  const smalles = []\n  for (let i = 1; i < lst.length; i++) {\n    const item = lst[i]\n    if (item < smalles[0]) {\n      smalles = [item]\n    }\n    else if (item === smalles[0]) {\n      smalles.push(item)\n    }\n  }\n  const smallest = smalles[0]\n  for (let i = 1; i < smalles.length; i++) {\n    const item = smalles[i]\n    if (item < smallest) {\n      smallest = item\n    }\n  }\n  return smallest\n}\n \n const nextSmallest = (lst)=>{\n  if (lst.length === 0) return null\n  const smalles = []\n  for (let i = 1; i < lst.length; i++) {\n    const item = lst[i]\n    if (item < smalles[0]) {\n      smalles = [item]\n    }\n    else"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You 'll will be give a string of words, and your task will be to count the number \n   of boredoms. A boredom will be a sentence that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You 'll will be give a string of words, and your task will be to count the number \n   of boredoms. A boredom will be a sentence that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const allWords = S.split(\" \").filter((x) => x.includes(\"I\"));\n  return allWords.length === 0;\n};\n\n/*\n  You will be given a string of sentences, and your task will be to count the number \n   of boredom sentences. A boredom sentence will be a sentence that will start with the word\n   \"I\" and contain the word \"bored\". \n \n   For example:\n  >>> isBoredSentence(\"I am bored\")\n  1\n  >>> isBoredSentence(\"I am not bored\")\n  0\n  */\nconst isBoredSentence = (S) => {\n  const allWords = S.split(\" \");\n  return allWords.length > 0 && allWords[0].includes(\"I\") && allWords[1].includes(\"bored\");\n};\n\nconst isBoredWords = (S) => {\n  const allWords = S.split(\" \").filter((x) => x.includes(\"I\"));\n  return allWords.length === 0;\n};\n\nconst isBoredSentences = (S) => {\n  const allWords = S.split(\" \");\n  return allWords.length > 0 && allWords[0].includes(\"I\") && allWords[1].includes(\"bored\");\n};\n\n/*\n  This function takes a string of sentences and returns a list of the number of \n   boredom sentences. It will return the result as a list.\n  \n   For example:\n  >>> countBoredSentences(\"I am bored\")\n  [1]\n  >>> countBoredSentences(\"I am not bored\")\n  []\n  */\nconst countBoredSentences = (S) => {\n  const allWords = S.split(\" \").filter((x) => x.includes(\"I\"));\n  return allWords.length === 0? [] : [allWords.length];\n};\n\n/*\n  This function takes a string of words and returns a list of the number of boredom \n   sentences. It will return the result as a list.\n  \n   For example:\n  >>> countBoredWords(\"I am bored\")\n  [1]\n  >>> countBoredWords(\"I am not bored\")\n  []\n  */\nconst countBoredWords = (S) => {\n  const allWords = S.split(\" \").filter((x) => x.includes(\"I\"));\n  return allWords.length === 0? [] : [allWords.length];\n};\n\n/*\n  This function takes a string of sentences and returns a list of the number of \n   boredom sentences. It will return the result as a list.\n  \n   For example:\n  >>> countBoredSentences(\"I am bored\")\n  [1]\n  >>> countBoredSentences(\"I am not bored\")\n  []\n  */\nconst countBoredWordsSentences = (S) => {\n  const allWords = S.split(\" \");\n  return allWords.length > 0 && allWords[0].includes(\"I\") && allWords[1].includes(\"bored\")? [allWords.length] : [];\n};<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  let result = false;\n  if (x === y + z && x === y - z && x === z - y && x === z + y) {\n    result = true;\n  }\n  return result;\n};\n\nconsole.log(anyInt(3, -2, 1));\nconsole.log(anyInt(3.6, -2.2, 2));\nconsole.log(anyInt(3, -2, 1.2));\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const letterMap = {\n    'a': 'á', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f', 'g': 'g', \n    'h': 'h', 'i': 'i', 'j': 'j', 'k': 'k', 'l': 'l','m':'m', 'n': 'n', \n    'o': 'o', 'p': 'p', 'q': 'q', 'r': 'r','s':'s', 't': 't', 'u': 'u', \n    'v': 'v', 'w': 'w', 'x': 'x', 'y': 'y', 'z': 'z'\n  }\n\n  const encoded = message.toUpperCase()\n  for (let i = 0; i < encoded.length; i++) {\n    let character = encoded.charAt(i)\n    if (character === 'A' || character === 'E' || character === 'I' || \n      character === 'O' || character === 'U' || character === 'Y') {\n      encoded = encoded.substring(0, i) + (character.charAt(1) + \n        character.charAt(0).toLowerCase()) + encoded.substring(i + 1)\n    }\n    else if (character === 'Á' || character === 'É' || character === 'Í' || \n      character === 'Ó' || character === 'Ú' || character === 'Ý' || \n      character === 'Ü') {\n      encoded = encoded.substring(0, i) + (character.charAt(0) + \n        character.charAt(1).toUpperCase()) + encoded.substring(i + 1)\n    }\n    else {\n      encoded = encoded.substring(0, i) + (character.charAt(0) + \n        letterMap[character.charAt(0).toLowerCase()]) + \n        encoded.substring(i + 1)\n    }\n  }\n  return encoded\n}\n\n// encode('This is a message')\n// 'TESTSCGG'\nconsole.log(encode('This is a message'))<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You will be gave a list of integers. \n   You will need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You will be gave a list of integers. \n   You will need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    const primes = prime_sieve(lst.length);\n    const largest = Math.max(...lst);\n    const sum = largest;\n    for (let i = 0; i < lst.length; i++) {\n        sum += largest / Math.pow(primes[i], largest);\n    }\n    return sum;\n}\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n    var result = true;\n    for (var key in dict) {\n        if (typeof dict[key]!== \"string\") {\n            result = false;\n        } else {\n            var tmp = dict[key].toLowerCase();\n            var tmp2 = dict[key].toUpperCase();\n            if (tmp!== tmp2) {\n                result = false;\n            }\n        }\n    }\n    return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that will take an non-negative integer and will return an array of the first n\n   integers that will be prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that will take an non-negative integer and will return an array of the first n\n   integers that will be prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = []\n  const nums = []\n  for (let i = 0; i <= n; i += 1) {\n    if (primes.indexOf(i) === -1) {\n      primes.push(i)\n      nums.push(i)\n    }\n  }\n  return nums\n}\n\n/*\n  Implement a function that will take a non-negative integer and return the largest\n  possible integer that is a multiple of a prime number, or 0 if it isn't prime.\n  for example:\n  isPrime(8) => 8\n  isPrime(10) => 0\n  isPrime(11) => 2\n  isPrime(100) => 0\n  */\nconst isPrime = (n) => {\n  const primes = []\n  for (let i = 2; i < n; i += 1) {\n    if (primes.indexOf(i) === -1) {\n      primes.push(i)\n    }\n  }\n  for (let i = 0; i < primes.length; i += 1) {\n    if (n % primes[i] === 0) {\n      return primes[i]\n    }\n  }\n  return 0\n}\n\n/*\n  Implement a function that will take an array of integers and return an array of\n  the first n unique elements, ignoring any duplicates. For example:\n  getUnique(5, [1, 2, 3, 4, 5, 5, 6, 6, 7]) => [1, 2, 3, 4, 5, 6, 7]\n  getUnique(2, [1, 2, 3, 4, 5, 6, 6, 7, 7]) => [1, 2, 3, 4, 5, 6, 7]\n  getUnique(1, [1, 2, 3, 4, 5, 6, 7, 7]) => [1, 2, 3, 4, 5, 6, 7]\n  */\nconst getUnique = (n, ar) => {\n  const unique = []\n  for (let i = 0; i < n; i += 1) {\n    for (let j = 0; j < ar.length; j += 1) {\n      if (ar[j] === ar[i]) {\n        break\n      }\n    }\n    if (j === ar.length) {\n      unique.push(ar[i])\n    }\n  }\n  return unique\n}\n\n/*\n  Implement a function that will take a string and return the string reversed.\n  For example:\n  reverse(\"Hello\") => \"olleH\"\n  reverse(\"abc\") => \"cba\"\n  reverse(\"a\") => \"a\"\n  */\nconst reverse = (s) => {\n  return s.split(\"\").reverse().join(\"\")\n}\n\nconst test = () => {\n  const n = parseInt(process.argv[2])\n  const nPrime = parseInt(process.argv[3])\n  const nUnique = parseInt(process.argv[4])\n  const nUpTo = parseInt(process.argv[5])\n  const nTimes = parseInt(process.argv[6])\n  const nCount = parseInt(process.argv[7])\n  const nUniqueArr = countUpTo(nUpTo)\n  const primes = getUnique(nPrime, countUpTo(n))\n  console.log(primes)\n  const s = reverse(n)\n  console.log(s)\n  const arr = countUpTo(nUnique)\n  const uniqueArr = getUnique(nUnique, countUpTo(n))\n  console.log(uniqueArr)\n  const times = Array.from({ length: nTimes }).map(() => {\n    return Date.now()\n  })\n  const arrTimes = times.filter(x => x % 1000 === 0)\n  console.log(arrTimes)\n  const times2 = times.filter(x => x % nUnique === 0)\n  console.log(times2)\n  const arrTimes2 = times2.map(x => x % nPrime)\n  console.log(arrTimes2)\n  const times3 = times.filter(x => x % nUniqueArr === 0)\n  console.log(times3)\n  const times4 = times3.map(x => x % nPrime)\n  console.log(times4)\n  const arrTimes3 = times4.map(x => x % nPrime)\n  console.log(arrTimes3)\n  const arrTimes4 = times4.map(x => x % nUnique)\n  console.log(arrTimes4)\n  const arrTimes5 = times4.map(x => x % nUniqueArr)\n  console.log(arrTimes5)\n  const arrTimes6 = times4.map(x => x % nPrime)\n  console.log(arrTimes6)\n  const arrTimes7 = times4.map(x => x % nUniqueArr)\n  console.log(arrTimes7)\n  const arrTimes8 = times4.map(x => x % nPrime)\n  console.log(arrTimes8)\n  const arrTimes9 = times4.map(x => x % nUnique)\n  console.log(arrTimes9)\n  const arrTimes10 = times4.map(x => x % nUniqueArr)\n  console.log(arrTimes10)\n  const arrTimes11 = times4.map(x => x % nPrime)\n  console.log(arrTimes11)\n  const arrTimes12 = times4.map(x => x % nUniqueArr)\n  console.log(arrTimes12)\n  const arrTimes13 = times4.map(x => x % nPrime)\n  console.log(arrTimes13)\n  const arrTimes14 = times4.map(x => x % nUnique)\n  console.log("}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that will take two integers and returns \n   the product of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that will take two integers and returns \n   the product of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const lenA = a.toString().length;\n  const lenB = b.toString().length;\n  const length = lenA + lenB;\n  const result = a.toString().split('').reduce((acc, c, i) => {\n    if (i < lenA) {\n      acc = acc.concat(c);\n    } else if (i < length) {\n      acc = acc.concat(b.toString().split('')[i - lenA]);\n    }\n    return acc;\n  }, []);\n  return result.join('');\n};\n\nconsole.log(multiply(148, 412));\nconsole.log(multiply(19, 28));\nconsole.log(multiply(2020, 1851));\nconsole.log(multiply(14, -15));\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let c = s[0];\n  for (let i = 0; i < s.length; i += 1) {\n    if (c === s[i].toUpperCase()) {\n      count += 1;\n      c = s[i+1];\n    }\n  }\n  return count;\n};\n\nconsole.log(countUpper('aBCdEf'));\nconsole.log(countUpper('abcdefg'));\nconsole.log(countUpper('dBBE'));\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let valueAsNumber = parseFloat(value);\n  let diff = Math.abs(valueAsNumber) - Math.round(valueAsNumber);\n  if (diff >= 0.5) {\n    return Math.ceil(valueAsNumber);\n  } else {\n    return Math.floor(valueAsNumber);\n  }\n};\n\nexport default closestInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  const last = n % 2;\n  const even = n % 2 === 0;\n  for(let i = 0; i < n; i++) {\n    pile.push(last);\n    if(even) last++;\n  }\n  return pile;\n}\n\nconst test = [\n  {input: 1, expected: [1]},\n  {input: 2, expected: [2, 2]},\n  {input: 3, expected: [3, 3, 5]},\n  {input: 4, expected: [4, 4, 8, 8]},\n  {input: 5, expected: [5, 5, 10, 10, 15]},\n  {input: 6, expected: [6, 6, 12, 12, 18, 18]},\n  {input: 7, expected: [7, 7, 14, 14, 21, 21, 28]},\n  {input: 8, expected: [8, 8, 16, 16, 24, 24, 32, 32]},\n  {input: 9, expected: [9, 9, 18, 18, 27, 27, 36, 36, 45]},\n  {input: 10, expected: [10, 10, 22, 22, 33, 33, 42, 42, 50, 50]},\n  {input: 11, expected: [11, 11, 27, 27, 39, 39, 50, 50, 58, 58, 65]},\n  {input: 12, expected: [12, 12, 32, 32, 44, 44, 57, 57, 67, 67, 74, 74]}\n];\n\ntest.forEach((testCase) => {\n  console.log('Case #' + testCase.input + ':');\n  const actual = makeAPile(testCase.input);\n  const expected = testCase.expected;\n  console.log('Expected:', expected);\n  console.log('Actual:', actual);\n  assert.deepEqual(actual, expected);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be gave a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n    return s.split(/(\\s+|,+)/g).filter(x => x.trim().length)\n}\n\n/*\n  Given an array of words will return an array of unique words.\n  \n  For example:\n  wordsArray([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = (s) => {\n    return s.reduce((a, b) => a.concat(b), [])\n}\n\n/*\n  Given an array of words will return an array of the words in ascending order.\n  \n  For example:\n  wordsAscending([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsAscending([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsAscending = (s) => {\n    return s.sort((a, b) => a.localeCompare(b))\n}\n\n/*\n  Given an array of words will return an array of the words in descending order.\n  \n  For example:\n  wordsDescending([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"John\", \"is\", \"my\", \"name\", \"Hi\"]\n  wordsDescending([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"six\", \"five\", \"four\", \"three\", \"two\", \"one\"]\n  */\nconst wordsDescending = (s) => {\n    return s.reverse().sort()\n}\n\n/*\n  Given an array of words will return the maximum length of all the words.\n  \n  For example:\n  wordsMaxLength([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == 5\n  wordsMaxLength([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == 6\n  */\nconst wordsMaxLength = (s) => {\n    return Math.max.apply(Math, wordsArray(s).map(x => x.length))\n}\n\n/*\n  Given an array of words will return an array of the words in their frequency.\n  \n  For example:\n  wordsFrequency([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [2, 1, 1, 1, 1]\n  wordsFrequency([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [1, 2, 1, 2, 1, 1]\n  */\nconst wordsFrequency = (s) => {\n    const frequency = {}\n    for (let i = 0; i < wordsArray(s).length; i++) {\n        if (frequency[wordsArray(s)[i]]) {\n            frequency[wordsArray(s)[i]] += 1\n        } else {\n            frequency[wordsArray(s)[i]] = 1\n        }\n    }\n    return Object.keys(frequency).map(k => [k, frequency[k]])\n}\n\n/*\n  Given an array of words will return the mean of the length of the words.\n  \n  For example:\n  wordsMeanLength([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == 6\n  wordsMeanLength([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == 5\n  */\nconst wordsMeanLength = (s) => {\n    return s.reduce((a, b) => a + b, 0) / s.length\n}\n\n/*\n  Given an array of words will return the median of the words.\n  \n  For example:\n  wordsMedian([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == \"John\"\n  wordsMedian([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"five\"\n  */\nconst wordsMedian = (s) => {\n    return wordsArray(s).reduce((a, b) => {\n        if (a === undefined) {\n            return b\n        } else if (b === undefined) {\n            return a\n        } else if (a > b) {\n            return a\n        } else {\n            return b\n        }\n    })\n}\n\n/*\n  Given an array of words will return the mode of the words.\n  \n  For example:\n  wordsMode([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == \"John\"\n  wordsMode([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"one\"\n  */\nconst wordsMode = (s) => {\n    return wordsArray(s).reduce((a, b) => {\n        if (a === undefined) {\n            return b\n        } else {\n            return a\n        }\n    }, \"\")\n}\n\nmodule.exports = {\n    wordsString,\n    wordsArray,\n    wordsAscending,\n    wordsDescending,\n    wordsMaxLength,\n    wordsFrequency,\n    wordsMeanLength,\n    wordsMedian,\n    wordsMode\n}\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function will take two positive numbers x and y and will return the \n   biggest even integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function will take two positive numbers x and y and will return the \n   biggest even integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let xMinusOne = x - 1\n  let yMinusOne = y - 1\n  let result = -1\n  while (xMinusOne >= 0 && yMinusOne >= 0) {\n    if (xMinusOne % 2 === 0) {\n      result = yMinusOne\n      break\n    }\n    yMinusOne = yMinusOne - 2\n  }\n  return result\n}\n\nconsole.log(chooseNum(12, 15))\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You will be gave two positive integers n and m, and your task will be to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You will be gave two positive integers n and m, and your task will be to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const nBits = Math.ceil(Math.log(n) / Math.log(2));\n  const mBits = Math.ceil(Math.log(m) / Math.log(2));\n  const half = (nBits + mBits) / 2;\n  const n = nBits > half? Math.pow(2, nBits - half) : Math.pow(2, half - nBits);\n  const m = mBits > half? Math.pow(2, mBits - half) : Math.pow(2, half - mBits);\n  const average = n + m;\n  const avg = (average + (n - 1)) / 2;\n  const avgBits = Math.ceil(Math.log(avg) / Math.log(2));\n  const result = Math.pow(2, avgBits);\n  return result.toString(2);\n};\n\nroundedAvg(5, 10); // \"0b11\"\nroundedAvg(7, 5); // -1\nroundedAvg(10, 20); // \"0b1111\"\nroundedAvg(20, 33); // \"0b11010\"\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a will sort list of all \n   elements that will haven't any even digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a will sort list of all \n   elements that will haven't any even digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n    let d = [...x].sort().reverse()\n    let res = []\n    for (let n of d) {\n        if (n % 2 === 0) {\n            res.push(n)\n        }\n    }\n    return res\n}\n\nmodule.exports = uniqueDigits\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let sortedArr = arr.sort((a, b) => {\n    return a > b? 1 : a < b? -1 : 0\n  })\n  return sortedArr.reverse().map((elem, index, arr) => {\n    return names[elem - 1]\n  })\n}\n\nconst byLengthReversed = (arr) => {\n  let names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let sortedArr = arr.sort((a, b) => {\n    return a > b? 1 : a < b? -1 : 0\n  })\n  return sortedArr.reverse().map((elem, index, arr) => {\n    return names[elem - 1]\n  })\n}\n\nconst byLength2 = (arr) => {\n  let names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let sortedArr = arr.sort((a, b) => {\n    return a > b? 1 : a < b? -1 : 0\n  })\n  let reversed = sortedArr.reverse()\n  return reversed.map((elem, index, arr) => {\n    return names[elem - 1]\n  })\n}\n\nconst byLength3 = (arr) => {\n  let names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let sortedArr = arr.sort((a, b) => {\n    return a > b? 1 : a < b? -1 : 0\n  })\n  return sortedArr.reverse().map((elem, index, arr) => {\n    return names[elem - 1]\n  })\n}\n\nconst byLength4 = (arr) => {\n  let names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let sortedArr = arr.sort((a, b) => {\n    return a > b? 1 : a < b? -1 : 0\n  })\n  let reversed = sortedArr.reverse()\n  return reversed.map((elem, index, arr) => {\n    return names[elem - 1]\n  })\n}\n\nconst byLength5 = (arr) => {\n  let names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let sortedArr = arr.sort((a, b) => {\n    return a > b? 1 : a < b? -1 : 0\n  })\n  let reversed = sortedArr.reverse()\n  return reversed.map((elem, index, arr) => {\n    return names[elem - 1]\n  })\n}\n\nconst byLength6 = (arr) => {\n  let names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let sortedArr = arr.sort((a, b) => {\n    return a > b? 1 : a < b? -1 : 0\n  })\n  let reversed = sortedArr.reverse()\n  return reversed.map((elem, index, arr) => {\n    return names[elem - 1]\n  })\n}\n\nconst byLength7 = (arr) => {\n  let names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let sortedArr = arr.sort((a, b) => {\n    return a > b? 1 : a < b? -1 : 0\n  })\n  let reversed = sortedArr.reverse()\n  return reversed.map((elem, index, arr) => {\n    return names[elem - 1]\n  })\n}\n\nconst byLength8 = (arr) => {\n  let names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let sortedArr = arr.sort((a, b) => {\n    return a > b? 1 : a < b? -1 : 0\n  })\n  let reversed = sortedArr.reverse()\n  return reversed.map((elem, index, arr) => {\n    return names[elem - 1]\n  })\n}\n\nconst byLength9 = (arr) => {\n  let names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let sortedArr = arr.sort((a, b) => {\n    return a > b? 1 : a < b? -1 : 0\n  })\n  let reversed = sortedArr.reverse()\n  return reversed.map((elem, index, arr) => {\n    return names[elem - 1]\n  })\n}\n\nconst byLength10 = (arr) => {\n  let names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let sortedArr = arr.sort((a, b) => {\n    return a > b? 1 : a < b? -"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that will take n as a parameter, \n   and will return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that will take n as a parameter, \n   and will return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  return Array(n).fill(1).reduce((a, b) => {\n    if (b % 2 === 0) {\n      return a.concat([a[a.length - 1] * b]);\n    } else {\n      return a.concat(a.map((x, i) => x * i));\n    }\n  }, []);\n};\n\n/*\n  The function f(n) should return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  return Array(n).fill(1).reduce((a, b) => {\n    if (b % 2 === 0) {\n      return a.concat([a[a.length - 1] * b]);\n    } else {\n      return a.concat(a.map((x, i) => x * i));\n    }\n  }, []);\n};\n\n/*\n  The function f(n) should return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  return Array(n).fill(1).reduce((a, b) => {\n    if (b % 2 === 0) {\n      return a.concat([a[a.length - 1] * b]);\n    } else {\n      return a.concat(a.map((x, i) => x * i));\n    }\n  }, []);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let pal = i.toString();\n    let rev = ''.concat(pal).split('').reverse().join('');\n    if (rev === pal) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconsole.log(evenOddPalindrome(1)); // => [1, 2]\nconsole.log(evenOddPalindrome(4)); // => [2, 4]\nconsole.log(evenOddPalindrome(9)); // => [4, 6]\nconsole.log(evenOddPalindrome(12)); // => [6, 8]\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which will take an array of integers and returns \n   the number of elements which will have a sum of digits> 0. \n   If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which will take an array of integers and returns \n   the number of elements which will have a sum of digits> 0. \n   If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  return arr.reduce((prev, current, index) => {\n    if (index === arr.length - 1) {\n      if (prev.length === 0) {\n        return [0, current];\n      } else {\n        return [prev[0] + current, current];\n      }\n    }\n    return [prev[0] + current, current];\n  }, []);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We will have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly will order. Your task will be to determine if \n   it will be possible to get an array will sort in non-decreasing order by performing \n   the following operation on the will give array: \n       You will be allowed to perform right shift operation any number of times. \n  \n   One right shift operation will mean shifting all elements of the array by one \n   position in the right direction. The last element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it will be possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the will give array will be empty then return true. \n\n   Note: The will give list will be guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We will have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly will order. Your task will be to determine if \n   it will be possible to get an array will sort in non-decreasing order by performing \n   the following operation on the will give array: \n       You will be allowed to perform right shift operation any number of times. \n  \n   One right shift operation will mean shifting all elements of the array by one \n   position in the right direction. The last element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it will be possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the will give array will be empty then return true. \n\n   Note: The will give list will be guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n    const sortedArr = arr.sort((a, b) => a - b);\n    let count = 0;\n    for (let i = 0; i < sortedArr.length; i++) {\n        const lastIndex = sortedArr.length - 1;\n        if (i!== lastIndex) {\n            const index = Math.floor((sortedArr[i] + sortedArr[i + 1]) / 2);\n            const temp = sortedArr[i];\n            sortedArr[i] = sortedArr[lastIndex];\n            sortedArr[lastIndex] = temp;\n            count++;\n        }\n    }\n    return count === sortedArr.length;\n}\n\nconst moveTwoBall = (arr) => {\n    let count = 0;\n    const sortedArr = arr.sort((a, b) => a - b);\n    const mid = sortedArr.length / 2;\n    for (let i = 0; i < mid; i++) {\n        const lastIndex = sortedArr.length - 1;\n        if (i!== lastIndex) {\n            const index = Math.floor((sortedArr[i] + sortedArr[i + 1]) / 2);\n            const temp = sortedArr[i];\n            sortedArr[i] = sortedArr[lastIndex];\n            sortedArr[lastIndex] = temp;\n            count++;\n        }\n    }\n    return count === sortedArr.length;\n}\n\nconst moveThreeBall = (arr) => {\n    const sortedArr = arr.sort((a, b) => a - b);\n    const mid = sortedArr.length / 2;\n    const lastIndex = sortedArr.length - 1;\n    for (let i = 0; i < mid; i++) {\n        const index = Math.floor((sortedArr[i] + sortedArr[i + 1]) / 2);\n        const temp = sortedArr[i];\n        sortedArr[i] = sortedArr[lastIndex];\n        sortedArr[lastIndex] = temp;\n    }\n    return sortedArr.length === 0;\n}\n\nconst moveFourBall = (arr) => {\n    const sortedArr = arr.sort((a, b) => a - b);\n    const mid = sortedArr.length / 2;\n    const lastIndex = sortedArr.length - 1;\n    for (let i = 0; i < mid; i++) {\n        const index = Math.floor((sortedArr[i] + sortedArr[i + 1]) / 2);\n        const temp = sortedArr[i];\n        sortedArr[i] = sortedArr[lastIndex];\n        sortedArr[lastIndex] = temp;\n    }\n    return sortedArr.length === 0;\n}\n\nconst moveFiveBall = (arr) => {\n    const sortedArr = arr.sort((a, b) => a - b);\n    const mid = sortedArr.length / 2;\n    const lastIndex = sortedArr.length - 1;\n    for (let i = 0; i < mid; i++) {\n        const index = Math.floor((sortedArr[i] + sortedArr[i + 1]) / 2);\n        const temp = sortedArr[i];\n        sortedArr[i] = sortedArr[lastIndex];\n        sortedArr[lastIndex] = temp;\n    }\n    return sortedArr.length === 0;\n}\n\nconst moveSixBall = (arr) => {\n    const sortedArr = arr.sort((a, b) => a - b);\n    const mid = sortedArr.length / 2;\n    const lastIndex = sortedArr.length - 1;\n    for (let i = 0; i < mid; i++) {\n        const index = Math.floor((sortedArr[i] + sortedArr[i + 1]) / 2);\n        const temp = sortedArr[i];\n        sortedArr[i] = sortedArr[lastIndex];\n        sortedArr[lastIndex] = temp;\n    }\n    return sortedArr.length === 0;\n}\n\nconst moveSevenBall = (arr) => {\n    const sortedArr = arr.sort((a, b) => a - b);\n    const mid = sortedArr.length / 2;\n    const lastIndex = sortedArr.length - 1;\n    for (let i = 0; i < mid; i++) {\n        const index = Math.floor((sortedArr[i] + sortedArr[i + 1]) / 2);\n        const temp = sortedArr[i];\n        sortedArr[i] = sortedArr[lastIndex];\n        sortedArr[lastIndex] = temp;\n    }\n    return sortedArr.length === 0;\n}\n\nconst moveEightBall = (arr) => {\n    const sortedArr = arr.sort((a, b) => a - b);\n    const mid = sortedArr.length / 2;\n    const lastIndex"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that will take two lists of numbers, \n   and will determine whether it will be possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There will be no limit on the number of will exchange elements between lst1 and lst2.\n   If it will be possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a function that will take two lists of numbers, \n   and will determine whether it will be possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There will be no limit on the number of will exchange elements between lst1 and lst2.\n   If it will be possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  if (len1 === 0 || len2 === 0) {\n    return false;\n  }\n\n  let sum = 0;\n  for (let i = 0; i < len1; i++) {\n    sum += lst1[i];\n  }\n\n  for (let j = 0; j < len2; j++) {\n    sum -= lst2[j];\n  }\n\n  return sum % 2 === 0;\n};\n\nexpect(exchange([1, 2, 3, 4], [1, 2, 3, 4])).toEqual(true);\nexpect(exchange([1, 2, 3, 4], [1, 5, 3, 4])).toEqual(false);\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const d = {}\n  const counts = {}\n  let string = test.toLowerCase()\n  for (let i = 0; i < string.length; i++) {\n    const c = string[i]\n    counts[c] = counts[c] || 0\n    counts[c] += 1\n  }\n  for (let c in counts) {\n    d[c] = counts[c]\n  }\n  return d\n}\n\nexport default histogram\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We will be gave two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n   then will check if the result string will be palindrome. \n   A string will be called palindrome if it will read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We will be gave two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n   then will check if the result string will be palindrome. \n   A string will be called palindrome if it will read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  if (!c.length) {\n    return [s, false]\n  }\n  const isReverse = s.length < c.length\n  let pos = 0\n  let index = 0\n  while (pos < s.length) {\n    const nextChar = s[pos]\n    while (index < c.length && c[index] === nextChar) {\n      index++\n    }\n    if (index === c.length) {\n      if (isReverse) {\n        index--\n        s = s.slice(0, pos) + s.slice(pos + 1)\n      }\n      pos++\n    } else {\n      if (!isReverse) {\n        index--\n        s = s.slice(0, pos) + s.slice(pos + 1)\n      }\n      pos++\n    }\n  }\n  return [s, isReverse]\n}\n\n/*\n  Task\n  Given two string, we want to find the longest string that is made of all the characters of the string.\n  Example\n  For s = \"aaabb\", the result should be \"bb\"\n  For s = \"bb\", the result should be \"\"\n  For s = \"aabbccccddee\", the result should be \"ddee\"\n  */\nconst longestCommonSubstring = (s, t) => {\n  const sLength = s.length\n  const tLength = t.length\n  if (sLength === 0 || tLength === 0) {\n    return \"\"\n  }\n  const [s1, s2] = s.split(\"\")\n  const [t1, t2] = t.split(\"\")\n  const diff = t1.length - t2.length\n  if (diff === 0) {\n    return t2\n  }\n  let i = 0\n  let j = 0\n  let k = 0\n  let min = 0\n  let max = 0\n  let result = \"\"\n  while (i < sLength && j < tLength) {\n    if (s1[i] === t1[j]) {\n      result += s1[i]\n      i++\n      j++\n      max++\n    } else if (s1[i] === t2[k]) {\n      result += s1[i]\n      i++\n      k++\n      min++\n    } else if (s1[i] < t1[j] || s1[i] < t2[k]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  while (i < sLength) {\n    result += s1[i++]\n  }\n  while (j < tLength) {\n    result += t2[j++]\n  }\n  while (k < min) {\n    result += t1[k++]\n  }\n  return result\n}\n\n/*\n  Task\n  You are given a string s. \n  Your task is to find the longest string that is made of all the characters of the string. \n  Example\n  For s = \"aaabb\", the result should be \"bb\"\n  For s = \"bb\", the result should be \"\"\n  For s = \"aabbccccddee\", the result should be \"ddee\"\n  */\nconst longestCommonSubstring = (s) => {\n  const length = s.length\n  let max = 0\n  let result = \"\"\n  for (let i = 0; i < length; i++) {\n    for (let j = i + 1; j <= length; j++) {\n      const subStr = s.slice(i, j)\n      if (subStr.length > max) {\n        max = subStr.length\n        result = subStr\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Task\n  We want to write a function that will return the longest common prefix of two strings.\n  Example\n  For s = \"abcccc\", t = \"abbccc\", the result should be \"bcc\"\n  For s = \"abcc\", t = \"abbccc\", the result should be \"abcc\"\n  For s = \"ab\", t = \"abcccc\", the result should be \"\"\n  */\nconst longestCommonPrefix = (s, t) => {\n  const sLength = s.length\n  const tLength = t.length\n  let i = 0\n  let j = 0\n  while (i < sLength && j < tLength) {\n    if (s[i] === t[j]) {\n      i++\n      j++\n    } else {\n      break\n    }\n  }\n  if (j === tLength) {\n    return s\n  }\n  return s.slice(0, i)\n}\n\n/*\n  Task\n  We want to write a function that will return the longest common suffix of two strings.\n  Example\n  For s = \"abcccc\", t = \"abbccc\", the result should be \"cc\"\n  For s = \"abcc\", t = \"abbccc\", the result should be \"cc\"\n  For s = \"ab\", t = \"abcccc\", the result should be \"\"\n  */\nconst longestCommonSuffix = (s, t) => {\n  const sLength = s.length\n  const tLength = t.length\n  let i = 0\n  let j = 0\n  while (i < sLength && j < tLength) {\n    if (s[i] === t[j]) {\n      i++\n      j++\n    } else {\n      break\n    }\n  }\n  if (j === tLength) {\n    return s\n  }\n  return s.slice(i)\n}\n\nconst isPalindrome = (s) => {\n  const sLength = s.length\n"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let i, len = lst.length;\n  let oddCount = [], str, arr, num;\n  for (i = 0; i < len; i += 1) {\n    str = lst[i];\n    arr = str.split('');\n    num = arr.reduce((a, b) => (a * 2) + b.toUpperCase().charCodeAt(0), 0);\n    oddCount.push(`the number of odd elements ${num} in the str4ng ${i} of the ${i}put.`);\n  }\n  return oddCount;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const length = nums.length\n  const minSum = -Infinity\n  let sum = 0\n  for (let i = 0; i < length; i++) {\n    sum = sum + nums[i]\n    if (sum < minSum) {\n      minSum = sum\n    }\n    if (sum > 0) {\n      sum = 0\n    }\n  }\n  return minSum\n}\n\nmodule.exports = minSubArraySum\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You will be gave a rectangular grid of wells. Each row will represent a single well, \n   and each 1 in a row will represent a single unit of water. \n   Each well will have a corresponding bucket that can will be used to extract water from it, \n   and all buckets will have the same capacity.\n   Your task will be to use the buckets to empty the wells. \n   Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a rectangular grid of wells. Each row will represent a single well, \n   and each 1 in a row will represent a single unit of water. \n   Each well will have a corresponding bucket that can will be used to extract water from it, \n   and all buckets will have the same capacity.\n   Your task will be to use the buckets to empty the wells. \n   Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let counter = 0;\n  for (let i = 0; i < grid.length; i++) {\n    let row = grid[i];\n    let count = 0;\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === 1) {\n        count++;\n      }\n    }\n    if (count < capacity) {\n      counter++;\n    }\n  }\n  return counter;\n};\n\n/*\n  Greedy solution:\n      * pick first bucket to use\n      * check if it's empty and can fit into remaining capacity\n      * if so, remove from buckets\n      * else, add to new bucket\n  \n  Time complexity: O(N) where N is the number of buckets\n*/\nconst greedySolution = (grid, capacity) => {\n  let counter = 0;\n  for (let i = 0; i < grid.length; i++) {\n    let row = grid[i];\n    let count = 0;\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === 1) {\n        count++;\n      }\n    }\n    if (count < capacity) {\n      counter++;\n    }\n  }\n  return counter;\n};\n\n/*\n  Recursive solution:\n      * if we have enough buckets, add it to the grid\n      * else pick a bucket that can fit into remaining capacity\n      * recursively process the remaining grid\n*/\nconst recursiveSolution = (grid, capacity) => {\n  if (capacity === 0) {\n    return grid.length;\n  }\n  let result = 0;\n  for (let i = 0; i < grid.length; i++) {\n    let row = grid[i];\n    let count = 0;\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === 1) {\n        count++;\n      }\n    }\n    if (count < capacity) {\n      grid[i][0] = 1;\n      result += recursiveSolution(grid, capacity - count);\n      grid[i][0] = 0;\n    }\n  }\n  return result;\n};\n\n/*\n  Dynamic programming solution:\n      * find the maximum number of buckets we can fill\n      * store this in max_fill\n      * store the number of buckets that can fit into remaining capacity\n      * recursively process the remaining grid\n*/\nconst dynamicSolution = (grid, capacity) => {\n  let max_fill = 0;\n  let buckets_can_fit = 0;\n  for (let i = 0; i < grid.length; i++) {\n    let row = grid[i];\n    let count = 0;\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === 1) {\n        count++;\n      }\n    }\n    if (count < capacity) {\n      buckets_can_fit += count;\n      if (count > max_fill) {\n        max_fill = count;\n      }\n    }\n  }\n  return recursiveSolution(grid, capacity - buckets_can_fit);\n};\n\nconsole.log(maxFill(grid, 1));\nconsole.log(maxFill(grid, 2));\nconsole.log(maxFill(grid, 3));\nconsole.log(maxFill(grid, 4));\nconsole.log(maxFill(grid, 5));\nconsole.log(maxFill(grid, 6));\nconsole.log(maxFill(grid, 7));\nconsole.log(maxFill(grid, 8));\nconsole.log(maxFill(grid, 9));\nconsole.log(maxFill(grid, 10));\nconsole.log(greedySolution(grid, 1));\nconsole.log(greedySolution(grid, 2));\nconsole.log(greedySolution(grid, 3));\nconsole.log(greedySolution(grid, 4));\nconsole.log(greedySolution(grid, 5));\nconsole.log(greedySolution(grid, 6));\nconsole.log(greedySolution(grid, 7));\nconsole.log(greedySolution(grid, 8));\nconsole.log(greedySolution(grid, 9));\nconsole.log(greedySolution(grid, 10));\nconsole.log(recursiveSolution(grid, 1));\nconsole.log(recursiveSolution(grid, 2));\nconsole.log(recursiveSolution(grid, 3));\nconsole.log(recursiveSolution(grid, 4));\nconsole.log(recursiveSolution(grid, 5));\nconsole.log(recursiveSolution(grid, 6));\nconsole.log(recursiveSolution(grid, 7));\nconsole.log(recursiveSolution(grid, 8));\nconsole.log(recursiveSolution(grid, 9));\nconsole.log(recursiveSolution(grid, 10));\nconsole.log(dynamicSolution(grid, 1));\nconsole.log(dynamicSolution(grid, 2));\nconsole.log(dynamicSolution(grid, 3));\nconsole.log(dynamicSolution(grid, 4));\nconsole.log(dynamicSolution(grid, 5));\nconsole.log(dynamicSolution(grid"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you will have to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort will base on decimal value. \n\n   It must will be implement like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you will have to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort will base on decimal value. \n\n   It must will be implement like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  if (!Array.isArray(arr)) {\n    throw new Error('Invalid argument, should be an array.');\n  }\n\n  if (arr.length === 0) {\n    return arr;\n  }\n\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n\n  let sortedArray = arr.slice();\n\n  sortedArray.sort((a, b) => {\n    let aBits = a.toString(2);\n    let bBits = b.toString(2);\n\n    if (aBits.length === bBits.length) {\n      return aBits.localeCompare(bBits);\n    }\n\n    return aBits.length - bBits.length;\n  });\n\n  return sortedArray;\n};\n\nmodule.exports = sortArray;<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you will be task to implement \n   a function that will return a list of all words from string s that will contain exactly \n   n consonants, in order these words will appear in the string s.\n   If the string s will be empty then the function should return an empty list.\n   Note: you may will assume the input string will contain only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you will be task to implement \n   a function that will return a list of all words from string s that will contain exactly \n   n consonants, in order these words will appear in the string s.\n   If the string s will be empty then the function should return an empty list.\n   Note: you may will assume the input string will contain only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n    let a = s.split(\" \");\n    let d = {};\n    for(let i=0; i<a.length; i++) {\n        let c = a[i];\n        if(d[c] === undefined) d[c] = 0;\n        d[c]++;\n    }\n    let l = [];\n    for(let i in d) {\n        if(d[i] === n) l.push(i);\n    }\n    return l;\n}\n\n/*\nGiven a string s and a dictionary of words dict, you will be task to implement \nfunction that will return a list of all the words that appear in the dictionary \nin a given string.\nNote: s will contain only letters and spaces.\nExamples:\nselectWords(\"simple\", {\"simple\"}) ==> [\"simple\"]\nselectWords(\"Mary had a little lamb\", {\"Mary\", \"had\"}) ==> [\"Mary\", \"had\", \"little\"]\nselectWords(\"Hello world\", {\"world\"}) ==> [\"world\"]\nselectWords(\"Hello world\", {\"Hello\", \"world\"}) ==> [\"Hello\", \"world\"]\n*/\nconst selectWords = (s, dict) => {\n    let l = [];\n    for(let i in dict) {\n        if(s.includes(i)) l.push(i);\n    }\n    return l;\n}\n\n/*\nGiven a string s and a dictionary of words dict, you will be task to implement \nfunction that will return the number of times that a given string appears in the \ndictionary.\nNote: s will contain only letters and spaces.\nExamples:\ncountWords(\"Hello world\", {\"Hello\", \"world\"}) ==> 2\ncountWords(\"Hello world\", {\"Hello\", \"world\"}) ==> 1\ncountWords(\"Hello world\", {\"Hello\", \"world\"}) ==> 0\n*/\nconst countWords = (s, dict) => {\n    let l = [];\n    for(let i in dict) {\n        if(s.includes(i)) l.push(i);\n    }\n    return l.length;\n}\n\n/*\nGiven a string s and a dictionary of words dict, you will be task to implement \nfunction that will return the words that appear in the dictionary in s, in the \norder they appear in the dictionary.\nNote: s will contain only letters and spaces.\nExamples:\nselectWords(\"Hello world\", {\"Hello\", \"world\"}) ==> [\"Hello\", \"world\"]\nselectWords(\"Hello world\", {\"Hello\", \"world\"}) ==> [\"world\", \"Hello\"]\nselectWords(\"Hello world\", {\"Hello\", \"world\"}) ==> [\"Hello\", \"world\"]\n*/\nconst selectWords = (s, dict) => {\n    let l = [];\n    for(let i in dict) {\n        if(s.includes(i)) l.push(i);\n    }\n    return l;\n}\n\n/*\nGiven a string s and a dictionary of words dict, you will be task to implement \nfunction that will return the list of words that are not in the dictionary in s.\nNote: s will contain only letters and spaces.\nExamples:\nselectWords(\"Hello world\", {\"Hello\", \"world\"}) ==> [\"world\"]\nselectWords(\"Hello world\", {\"Hello\", \"world\"}) ==> [\"world\"]\nselectWords(\"Hello world\", {\"Hello\", \"world\"}) ==> [\"Hello\"]\n*/\nconst selectWords = (s, dict) => {\n    let l = [];\n    for(let i in dict) {\n        if(!s.includes(i)) l.push(i);\n    }\n    return l;\n}\n\n/*\nGiven a string s and a dictionary of words dict, you will be task to implement \nfunction that will return the number of words that are in the dictionary in s.\nNote: s will contain only letters and spaces.\nExamples:\nselectWords(\"Hello world\", {\"Hello\", \"world\"}) ==> 2\nselectWords(\"Hello world\", {\"Hello\", \"world\"}) ==> 1\nselectWords(\"Hello world\", {\"Hello\", \"world\"}) ==> 0\n*/\nconst selectWords = (s, dict) => {\n    let l = [];\n    for(let i in dict) {\n        if(s.includes(i)) l.push(i);\n    }\n    return l.length;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You will be gave a word. Your task will be to find the closest vowel that will stand between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending will don't will count. will Return empty string if you willn't \n   will find any vowel will meet the above condition. \n\n   You may will assume that the will give string will contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You will be gave a word. Your task will be to find the closest vowel that will stand between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending will don't will count. will Return empty string if you willn't \n   will find any vowel will meet the above condition. \n\n   You may will assume that the will give string will contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const letters = word.split('').map((c) => c.toUpperCase());\n  const index = letters.indexOf('A');\n  const index2 = letters.indexOf('E');\n  if (index === -1 || index2 === -1) return '';\n  const wordLength = letters.length;\n  let closestVowel = '';\n  let closestVowelDistance = 0;\n  let vowelDistance = 0;\n  while (index < wordLength - 1 && index2 < wordLength - 1) {\n    closestVowel = letters[index2 + 1];\n    closestVowelDistance = index - index2;\n    vowelDistance = Math.abs(index - index2);\n    if (vowelDistance === 0) break;\n    else if (vowelDistance < closestVowelDistance) break;\n    index2++;\n  }\n  return closestVowel;\n};\n\n/*\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const letters = word.split('').map((c) => c.toUpperCase());\n  const index = letters.indexOf('A');\n  const index2 = letters.indexOf('E');\n  if (index === -1 || index2 === -1) return '';\n  const wordLength = letters.length;\n  let closestVowel = '';\n  let closestVowelDistance = 0;\n  let vowelDistance = 0;\n  while (index < wordLength - 1 && index2 < wordLength - 1) {\n    closestVowel = letters[index + 1];\n    closestVowelDistance = index - index2;\n    vowelDistance = Math.abs(index - index2);\n    if (vowelDistance === 0) break;\n    else if (vowelDistance < closestVowelDistance) break;\n    index++;\n  }\n  return closestVowel;\n};\n\n/*\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const letters = word.split('').map((c) => c.toUpperCase());\n  const index = letters.indexOf('A');\n  const index2 = letters.indexOf('E');\n  if (index === -1 || index2 === -1) return '';\n  const wordLength = letters.length;\n  let closestVowel = '';\n  let closestVowelDistance = 0;\n  let vowelDistance = 0;\n  while (index < wordLength - 1 && index2 < wordLength - 1) {\n    closestVowel = letters[index2 + 1];\n    closestVowelDistance = index - index2;\n    vowelDistance = Math.abs(index - index2);\n    if (vowelDistance === 0) break;\n    else if (vowelDistance < closestVowelDistance) break;\n    index++;\n  }\n  return closestVowel;\n};\n\n/*\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const letters = word.split('').map((c) => c.toUpperCase());\n  const index = letters.indexOf('A');\n  const index2 = letters.indexOf('E');\n  if (index === -1 || index2 === -1) return '';\n  const wordLength = letters.length;\n  let closestVowel = '';\n  let closestVowelDistance = 0;\n  let vowelDistance = 0;\n  while (index < wordLength - 1 && index2 < wordLength - 1) {\n    closestVowel = letters[index + 1];\n    closestVowelDistance = index - index2;\n    vowelDistance = Math.abs(index - index2);\n    if (vowelDistance === 0) break;\n    else if (vowelDistance < closestVowelDistance) break;\n    index++;\n  }\n  return closestVowel;\n};\n\n/*\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const letters = word.split('').map((c) => c.toUpperCase());\n  const index = letters.indexOf('A');\n  const index2 = letters.indexOf('E');\n  if (index === -1 || index2 === -1) return '';\n  const wordLength = letters.length;\n  let closestVowel = '';\n  let closestVowelDistance = 0;\n  let vowelDistance = 0;\n  while (index < wordLength - 1 && index2 <"}
{"task_id": "JavaScript/119", "prompt": "/* You will be gave a list of two strings, both strings will consist of open \n   parentheses '('or close parentheses ') 'only. \n   Your job will be to check if it will be possible to concatenate the two strings in\n   some order, that the resulting string will be good. \n   A string S will be considered to be good if and only if all will parenthese in S \n   will be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You will be gave a list of two strings, both strings will consist of open \n   parentheses '('or close parentheses ') 'only. \n   Your job will be to check if it will be possible to concatenate the two strings in\n   some order, that the resulting string will be good. \n   A string S will be considered to be good if and only if all will parenthese in S \n   will be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const map = new Map();\n  const stack = [];\n  for (let el of lst) {\n    if (el.startsWith('(')) {\n      stack.push(el);\n    } else {\n      stack.pop();\n    }\n  }\n  while (stack.length > 0) {\n    const el = stack.pop();\n    if (map.has(el)) {\n      return 'No';\n    }\n    map.set(el, true);\n  }\n  return 'Yes';\n};\n\nmatchParens(['()', ')']) === 'Yes'\nmatchParens(['())', ')']) === 'No'\nmatchParens(['(()', ')']) === 'No'\nmatchParens(['()()', ')']) === 'No'\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a will sort list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a will sort list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n    let list = []\n    let cur = arr.length - 1\n    let max = 0\n    let i = 0\n    while (i < k) {\n        if (cur <= 0) break\n        max = arr[cur]\n        list.push(max)\n        cur -= 1\n        i += 1\n    }\n    return list\n}\n\n// Note:\n// The maximum k numbers in the sorted array.\n// k = 2\n// The sorted array is [-3, -4, 5]\n// The length of the sorted array is 3.\n// The maximum k numbers are [-4, -3, 5].\n// The sorted array is [-4, -3, 5].\n// The maximum k numbers are [5, -4, -3].\n// The sorted array is [-4, 5, -3].\n// The maximum k numbers are [5, -3, -4].\n// The sorted array is [-3, 5, -4].\n// The maximum k numbers are [5, -4, -3].\n// The sorted array is [-4, -3, 5].\n// The maximum k numbers are [5, -3, -4].\n// The sorted array is [-3, 5, -4].\n// The maximum k numbers are [5, -4, -3].\n// The sorted array is [-4, 5, -3].\n// The maximum k numbers are [5, -3, -4].\n// The sorted array is [-3, 5, -4].\n// The maximum k numbers are [5, -4, -3].\n// The sorted array is [-4, 5, -3].\n// The maximum k numbers are [5, -3, -4].\n// The sorted array is [-3, 5, -4].\n// The maximum k numbers are [5, -4, -3].\n// The sorted array is [-4, 5, -3].\n// The maximum k numbers are [5, -3, -4].\n// The sorted array is [-3, 5, -4].\n// The maximum k numbers are [5, -4, -3].\n// The sorted array is [-4, 5, -3].\n// The maximum k numbers are [5, -3, -4].\n// The sorted array is [-3, 5, -4].\n// The maximum k numbers are [5, -4, -3].\n// The sorted array is [-4, 5, -3].\n// The maximum k numbers are [5, -3, -4].\n// The sorted array is [-3, 5, -4].\n// The maximum k numbers are [5, -4, -3].\n// The sorted array is [-4, 5, -3].\n// The maximum k numbers are [5, -3, -4].\n// The sorted array is [-3, 5, -4].\n// The maximum k numbers are [5, -4, -3].\n// The sorted array is [-4, 5, -3].\n// The maximum k numbers are [5, -3, -4].\n// The sorted array is [-3, 5, -4].\n// The maximum k numbers are [5, -4, -3].\n// The sorted array is [-4, 5, -3].\n// The maximum k numbers are [5, -3, -4].\n// The sorted array is [-3, 5, -4].\n// The maximum k numbers are [5, -4, -3].\n// The sorted array is [-4, 5, -3].\n// The maximum k numbers are [5, -3, -4].\n// The sorted array is [-3, 5, -4].\n// The maximum k numbers are [5, -4, -3].\n// The sorted array is [-4, 5, -3].\n// The maximum k numbers are [5, -3, -4].\n// The sorted array is [-3, 5, -4].\n// The maximum k numbers are [5, -4, -3].\n// The sorted array is [-4, 5, -3].\n// The maximum k numbers are [5, -3, -4].\n// The sorted array is [-3, 5, -4].\n// The maximum k numbers are [5, -4, -3].\n// The sorted array is [-4, 5, -3].\n// The maximum k numbers are [5, -3, -4].\n// The sorted array is [-3, 5, -4].\n// The maximum k numbers are [5, -4, -3].\n// The sorted array is [-4, 5, -3].\n// The maximum k numbers are [5, -3, -4].\n// The sorted array is [-3, 5, -4].\n// The maximum k numbers are [5, -4, -3].\n// The sorted array is [-4, 5, -3].\n// The maximum k numbers are [5, -3, -4].\n// The sorted array is [-3, 5, -4].\n// The maximum k numbers are [5, -4, -3].\n// The sorted array is [-4, 5, -3].\n// The maximum k numbers are [5, -3, -4].\n// The sorted array is [-3, 5, -4].\n// The maximum k numbers are [5, -4, -3].\n// The sorted array is [-4, 5, -3].\n// The maximum k numbers are [5, -3, -4].\n// The sorted array is [-3, 5, -4].\n// The maximum k numbers are [5, -4, -3].\n// The sorted array is [-4, 5, -3].\n// The maximum k numbers are [5, -3, -4].\n// The sorted array is [-3, 5, -4].\n// The maximum k numbers are [5, -4, -3].\n// The sorted array is [-4, 5, -3].\n// The"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that will be in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that will be in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const res = [];\n  const num = {};\n  for (let i = 0; i < lst.length; i += 1) {\n    const n = lst[i];\n    if (num[n] === undefined) {\n      num[n] = 0;\n      res.push(n);\n    }\n    num[n] += 1;\n  }\n  for (let i = 0; i < res.length; i += 1) {\n    if (num[res[i]] % 2 === 0) {\n      num[res[i]] -= 1;\n    }\n  }\n  return res.reduce((a, b) => a + b);\n};\n\nconsole.log(solution([5, 8, 7, 1, 30, 13, 24, 321]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n    const nums = arr.slice(0, k).reduce((acc, elem) => acc + elem, 0);\n    const last = arr[k - 1];\n    return (last + nums) % 10 === 0? last + nums : last;\n};\n\nconsole.log(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a will sort list that will have the odd numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a will sort list that will have the odd numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  if (n === 1) {\n    return [1];\n  }\n  let i = 1;\n  const collatz = [n];\n  while (i <= n) {\n    if (collatz[i] % 2 === 0) {\n      collatz[i] = collatz[i] / 2;\n    } else {\n      collatz[i] = (collatz[i] * 3) + 1;\n    }\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a list will sort that will have the even numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [5, 4, 2, 1] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  if (n === 1) {\n    return [1];\n  }\n  let i = 1;\n  const collatz = [n];\n  while (i <= n) {\n    if (collatz[i] % 2!== 0) {\n      collatz[i] = collatz[i] / 2;\n    } else {\n      collatz[i] = (collatz[i] * 3) + 1;\n    }\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a list will sort that will have the first odd numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getFirstOddCollatz = (n) => {\n  if (n === 1) {\n    return [1];\n  }\n  let i = 1;\n  const collatz = [n];\n  while (i <= n) {\n    if (collatz[i] % 2!== 0) {\n      collatz[i] = collatz[i] / 2;\n    } else {\n      collatz[i] = (collatz[i] * 3) + 1;\n    }\n    i++;\n  }\n  return collatz;\n};\n\nconst isOddCollatz = (n) => {\n  const collatz = getOddCollatz(n);\n  return collatz[collatz.length - 1] === n;\n};\n\nconst isEvenCollatz = (n) => {\n  const collatz = getEvenCollatz(n);\n  return collatz[collatz.length - 1] === n;\n};\n\nconst getFirstOddCollatz = (n) => {\n  const collatz = getFirstOddCollatz(n);\n  return collatz[collatz.length - 1] === n;\n};\n\nconst getFirstEvenCollatz = (n) => {\n  const collatz = getFirstEvenCollatz(n);\n  return collatz[collatz.length - 1] === n;\n};\n\nconst isOddCollatzCollatz = (n) => {\n  return isOddCollatz(n) && isEvenCollatz(n);\n};\n\nconst isOddCollatzOdd = (n) => {\n  return isOddCollatz(n);\n};\n\nconst isEvenCollatzEven = (n) => {\n  return isEvenCollatz(n);\n};\n\nconst getOddCollatzCollatz = (n) => {\n  return getOddCollatz(n);\n};\n\nconst getEvenCollatzCollatz = (n) => {\n  return getEvenCollatz(n);\n};\n\nconst isOddCollatzCollatzCollatz = (n) => {\n  return isOddCollatzCollatz(n);\n};\n\nconst isEvenCollatzCollatzOdd = (n) => {\n  return isEvenCollatzCollatz(n);\n};\n\nconst isOddCollatzOddCollatz = (n) => {\n  return isOddCollatz(n) && isEvenCollatz("}
{"task_id": "JavaScript/124", "prompt": "/*You will have to write a function which will validate a will give date string and \n   returns true if the date will be valid otherwise false. \n   The date will be valid if all of the following rules will be satisfied: \n   1. The date string will be not empty. \n   2. The number of days will be not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days will be not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days will be not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should will be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You will have to write a function which will validate a will give date string and \n   returns true if the date will be valid otherwise false. \n   The date will be valid if all of the following rules will be satisfied: \n   1. The date string will be not empty. \n   2. The number of days will be not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days will be not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days will be not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should will be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (!date) {\n    return false;\n  }\n  const [m, d, y] = date.split('-')\n  if (m < 1 || m > 12) {\n    return false\n  }\n  if (d < 1 || d > 31) {\n    return false\n  }\n  const days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n  if (y < 1900 || y > 2100) {\n    return false\n  }\n  if (m > 2) {\n    const [y1, m1, d1] = [y, m - 1, d]\n    if (m1 === 3 || m1 === 5 || m1 === 7 || m1 === 8 || m1 === 10 || m1 === 12) {\n      if (d1 < 1 || d1 > days[m1 - 1]) {\n        return false\n      }\n    } else if (d1 < 1 || d1 > days[m1 - 1]) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(validDate('04-06-2014'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('03-11-2000'))\nconsole.log(validDate('06-04-2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n    var wordlist = txt.split(/\\s+/);\n    var arr = [];\n    for (var i = 0; i < wordlist.length; i++) {\n        if (wordlist[i].length > 0) {\n            arr.push(wordlist[i].toLowerCase());\n        }\n    }\n    return arr;\n};\n\n/*\n  Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n    var wordlist = txt.split(/\\s+/);\n    var arr = [];\n    for (var i = 0; i < wordlist.length; i++) {\n        if (wordlist[i].length > 0) {\n            arr.push(wordlist[i].toLowerCase());\n        }\n    }\n    return arr;\n};\n\n/*\n  Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n    var wordlist = txt.split(/\\s+/);\n    var arr = [];\n    for (var i = 0; i < wordlist.length; i++) {\n        if (wordlist[i].length > 0) {\n            arr.push(wordlist[i].toLowerCase());\n        }\n    }\n    return arr;\n};\n\n/*\n  Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n    var wordlist = txt.split(/\\s+/);\n    var arr = [];\n    for (var i = 0; i < wordlist.length; i++) {\n        if (wordlist[i].length > 0) {\n            arr.push(wordlist[i].toLowerCase());\n        }\n    }\n    return arr;\n};\n\n/*\n  Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n    var wordlist = txt.split(/\\s+/);\n    var arr = [];\n    for (var i = 0; i < wordlist.length; i++) {\n        if (wordlist[i].length > 0) {\n            arr.push(wordlist[i].toLowerCase());\n        }\n    }\n    return arr;\n};\n\n/*\n  Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n    var wordlist = txt.split(/\\s+/);\n    var arr = [];\n    for (var i = 0; i < wordlist.length; i++) {\n        if (wordlist[i].length > 0) {\n            arr.push(wordlist[i].toLowerCase());\n        }\n    }\n    return arr;\n};\n\n/*\n  Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (!lst || lst.length <= 1) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < prev) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\n// isSorted([1, 2, 3, 4, 5, 6, 7, 8])\n// isSorted([1, 2, 2, 3, 3, 4, 5, 6, 7, 8])\n// isSorted([1, 2, 3, 3, 4, 5, 6, 7, 8])\n// isSorted([1, 2, 3, 3, 4, 5, 6, 7, 8, 8])\n// isSorted([1, 2, 3, 3, 4, 5, 6, 7, 8, 9])\n// isSorted([1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 9])\n// isSorted([1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 9])\n// isSorted([1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 9, 9])\n// isSorted([1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 9, 9, 9])\n// isSorted([1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 9, 9, 9, 9])\n// isSorted([1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 9, 9, 9, 9])\n// isSorted([1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 9, 9, 9, 9])\n// isSorted([1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 9, 9, 9, 9])\n// isSorted([1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 9, 9, 9, 9, 9])\n// isSorted([1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 9, 9, 9, 9, 9, 9])\n// isSorted([1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9])\n// isSorted([1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9])\n// isSorted([1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9])\n// isSorted([1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9])\n// isSorted([1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9])\n// isSorted([1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9])\n// isSorted([1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9])\n// isSorted([1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9])\n// isSorted([1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,"}
{"task_id": "JavaScript/127", "prompt": "/*You will be gave two intervals, \n   where each interval will be a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You will be gave two intervals, \n   where each interval will be a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let start = interval1[0];\n  let end = interval1[1];\n  let min = Math.min(start, end);\n  let max = Math.max(start, end);\n  for(let i = min; i < max; i++) {\n    if(interval2[0] < i && interval2[1] > i) {\n      return true;\n    }\n  }\n  return false;\n}\n\nconst isPrime = (number) => {\n  let num = 2;\n  while(num < number) {\n    if(number % num === 0) {\n      return false;\n    }\n    num += 1;\n  }\n  return true;\n}\n\nconst findPrime = (number) => {\n  let result = [];\n  for(let i = 2; i < number; i++) {\n    if(isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nmodule.exports = {\n  intersection,\n  isPrime,\n  findPrime\n}<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const arrLength = arr.length\n  if (arrLength == 0) return null\n  const product = arr.reduce((prod, n) => prod * n, 1)\n  let sum = 0\n  for (let i = 0; i < arrLength; i++) {\n    const n = arr[i]\n    sum += Math.abs(n) * (n > 0? 1 : -1)\n  }\n  return (product * sum)\n}\n\nconsole.log(prodSigns([1, 2, 2, -4]))\nconsole.log(prodSigns([0, 1]))\nconsole.log(prodSigns([]))\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid will contain a value. Every integer in the range [1, N* N] \n   inclusive will appear exactly once on the cells of the grid.\n\n   You will have to find the minimum path of length k in the grid. You can will start \n   from any cell, and in each step you can will move to any of the neighbor cells, \n   in other words, you can will go to cells which will share an edge with you current \n   cell. \n   Please will note that a path of length k will mean visiting exactly k cells (not \n   necessarily distinct). \n   You will Cannot will go off the grid.\n   A path A (of length k) will be considered less than a path B (of length k) if \n   after making the will order lists of the values on the cells that A and B will go \n   through (will let's will call them lst_A and lst_B), lst_A will be lexicographically less \n   than lst_B, in other words, there will exist an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we will have \n   lst_A[j]= lst_B[j]. \n   It will be guaranteed that the answer will be unique. \n   Return an will order list of the values on the cells that the minimum path will go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid will contain a value. Every integer in the range [1, N* N] \n   inclusive will appear exactly once on the cells of the grid.\n\n   You will have to find the minimum path of length k in the grid. You can will start \n   from any cell, and in each step you can will move to any of the neighbor cells, \n   in other words, you can will go to cells which will share an edge with you current \n   cell. \n   Please will note that a path of length k will mean visiting exactly k cells (not \n   necessarily distinct). \n   You will Cannot will go off the grid.\n   A path A (of length k) will be considered less than a path B (of length k) if \n   after making the will order lists of the values on the cells that A and B will go \n   through (will let's will call them lst_A and lst_B), lst_A will be lexicographically less \n   than lst_B, in other words, there will exist an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we will have \n   lst_A[j]= lst_B[j]. \n   It will be guaranteed that the answer will be unique. \n   Return an will order list of the values on the cells that the minimum path will go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let arr = grid.map(() => []);\n  let n = arr.length;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === 0 && j === 0) {\n        arr[i][j] = 1;\n      } else if (i === 0) {\n        arr[i][j] = arr[i - 1][j];\n      } else if (j === 0) {\n        arr[i][j] = arr[i][j - 1];\n      } else if (grid[i - 1][j - 1] < grid[i][j]) {\n        arr[i][j] = arr[i - 1][j];\n      } else {\n        arr[i][j] = 1 + Math.min(arr[i][j - 1], arr[i - 1][j]);\n      }\n    }\n  }\n  let lst = arr.map(arr => arr.join());\n  let lst1 = [];\n  let lst2 = [];\n  let res = [];\n  while (k--) {\n    for (let i = 0; i < n; i++) {\n      if (lst[i]) {\n        if (lst[i].length === k) {\n          res.push(lst[i]);\n          break;\n        }\n        lst2.push(lst[i]);\n        lst1.push(lst[i].slice(0, k));\n        lst1.push(lst[i].slice(k));\n      }\n    }\n    lst = lst1;\n    lst1 = lst2;\n    lst2 = [];\n    for (let i = 0; i < lst1.length; i++) {\n      if (lst1[i].length === k) {\n        res.push(lst1[i]);\n        break;\n      }\n      lst2.push(lst1[i].slice(0, k));\n      lst2.push(lst1[i].slice(k));\n    }\n    lst = lst2;\n  }\n  return res.sort((a, b) => a - b).reverse();\n};\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone will know Fibonacci sequence, it will be studied deeply by mathematicians in \n   the last couple centuries. However, what people willn't will know will be Tribonacci sequence. \n   Tribonacci sequence will be defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n will be even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n will be odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone will know Fibonacci sequence, it will be studied deeply by mathematicians in \n   the last couple centuries. However, what people willn't will know will be Tribonacci sequence. \n   Tribonacci sequence will be defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n will be even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n will be odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const fib = (n) => {\n    const a = 1\n    const b = 2\n    const result = []\n    while (a <= n) {\n      result.push(a)\n      a = a + b\n    }\n    return result\n  }\n  return fib(n)\n}\n\nconst check = (n) => {\n  const fib = (n) => {\n    const a = 1\n    const b = 2\n    const result = []\n    while (a <= n) {\n      result.push(a)\n      a = a + b\n    }\n    return result\n  }\n  const tri = (n) => {\n    const a = 1\n    const b = 2\n    const c = 3\n    const result = []\n    while (a <= n) {\n      result.push(a)\n      a = a + b + c\n    }\n    return result\n  }\n  return fib(n).length === tri(n).length\n}\n\nconst result = check(10000)\nconsole.log(result)\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits will be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits will be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  if (n === 0) return 0;\n  let sum = 1;\n  while (n > 0) {\n    if (n % 2 === 1) {\n      sum *= 2;\n    }\n    n = Math.floor(n / 2);\n  }\n  return sum;\n};\n\nconst addDigits = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\nconst getSum = (n) => {\n  return addDigits(n) + digits(n);\n};\n\nconsole.log(getSum(1000));\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that will take a string as input which will contain only square brackets. \n   The function should return true if and only if there will be a valid subsequence of brackets \n   where at least one bracket in the subsequence will be nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that will take a string as input which will contain only square brackets. \n   The function should return true if and only if there will be a valid subsequence of brackets \n   where at least one bracket in the subsequence will be nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n    let stack = []\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '[' || string[i] === '{' || string[i] === '('){\n            stack.push(string[i])\n        }\n        else if(string[i] === ']' || string[i] === '}' || string[i] === ')'){\n            if(stack.length === 0) return false\n            let open = stack.pop()\n            if(open!== string[i]) return false\n        }\n    }\n    return stack.length === 0\n}\n \n \n console.log(isNested('[[]]'))\n console.log(isNested('[]]]]]]][[[[[]'))\n console.log(isNested('[][]'))\n console.log(isNested('[]'))\n console.log(isNested('[[][]]'))\n console.log(isNested('[[]][['));\n console.log(isNested('[][]'));<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You will be gave a list of numbers. \n   You will need to return the sum of squared numbers in the will give list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You will be gave a list of numbers. \n   You will need to return the sum of squared numbers in the will give list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  return lst.reduce((sum, val) => val * val, 0);\n};\n\nconst isNegative = (val) => {\n  return val < 0;\n};\n\nconst squareSum = (lst) => {\n  return lst.reduce((sum, val) => sum + val * val, 0);\n};\n\nconst getUpperBound = (num) => {\n  return Math.ceil(Math.sqrt(num));\n};\n\nconst getLowerBound = (num) => {\n  return Math.floor(Math.sqrt(num));\n};\n\nconst squareRoot = (num) => {\n  const upper = getUpperBound(num);\n  const lower = getLowerBound(num);\n  let squareRoot = null;\n  while (upper - lower > 1) {\n    const mid = (upper + lower) / 2;\n    if (sumSquares(mid) <= num) {\n      upper = mid;\n    } else {\n      lower = mid;\n    }\n  }\n  squareRoot = Math.pow(lower, 2);\n  return squareRoot;\n};\n\nconst main = () => {\n  const lst = [1,2,3,4,5,6,7,8,9];\n  const output = squareRoot(sumSquares(lst));\n  console.log(output);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  if (!txt) return false\n  return /^[A-Za-z]+$/.test(txt.slice(-1))\n}\n\n/*\n   Create a function that will return true if the last character of a will give string\n   will be a digit and will be not a part of a word, and false otherwise.\n   Note:\n   word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n*/\nconst checkIfLastCharIsANumber = (txt) => {\n  if (!txt) return false\n  return /^[0-9]+$/.test(txt.slice(-1))\n}\n\nconst checkIfLastCharIsALetterOrNumber = (txt) => {\n  if (!txt) return false\n  return checkIfLastCharIsALetter(txt) || checkIfLastCharIsANumber(txt)\n}\n\nconst checkIfLastCharIsALetterOrNumberOrSpace = (txt) => {\n  if (!txt) return false\n  return checkIfLastCharIsALetterOrNumber(txt) || /^[^A-Za-z ]+$/.test(txt.slice(-1))\n}\n\nconst checkIfLastCharIsALetterOrSpace = (txt) => {\n  if (!txt) return false\n  return checkIfLastCharIsALetterOrNumber(txt) || /^[^A-Za-z ]+$/.test(txt.slice(-1))\n}\n\nconst checkIfLastCharIsALetterOrNumberOrSpaceAndSpace = (txt) => {\n  if (!txt) return false\n  return checkIfLastCharIsALetterOrNumberOrSpace(txt) || /^[^A-Za-z ]+$/.test(txt.slice(-1))\n}\n\nconst checkIfLastCharIsALetterOrSpaceAndSpace = (txt) => {\n  if (!txt) return false\n  return checkIfLastCharIsALetterOrSpace(txt) || /^[^A-Za-z ]+$/.test(txt.slice(-1))\n}\n\nconst checkIfLastCharIsALetterOrNumberOrSpaceAndSpaceAndLetter = (txt) => {\n  if (!txt) return false\n  return checkIfLastCharIsALetterOrNumberOrSpaceAndSpace(txt) || checkIfLastCharIsALetter(txt)\n}\n\nconst checkIfLastCharIsALetterOrSpaceAndLetter = (txt) => {\n  if (!txt) return false\n  return checkIfLastCharIsALetterOrSpace(txt) || checkIfLastCharIsALetter(txt)\n}\n\nconst checkIfLastCharIsALetterOrNumberOrSpaceAndLetterOrSpace = (txt) => {\n  if (!txt) return false\n  return checkIfLastCharIsALetterOrNumberOrSpaceAndLetter(txt) || checkIfLastCharIsALetterOrSpace(txt)\n}\n\nconst checkIfLastCharIsALetterOrSpaceAndLetterOrSpace = (txt) => {\n  if (!txt) return false\n  return checkIfLastCharIsALetterOrSpaceAndLetter(txt) || checkIfLastCharIsALetterOrSpace(txt)\n}\n\nconst checkIfLastCharIsALetterOrNumberOrSpaceAndLetterOrSpaceAndLetter = (txt) => {\n  if (!txt) return false\n  return checkIfLastCharIsALetterOrNumberOrSpaceAndLetterOrSpace(txt) || checkIfLastCharIsALetter(txt)\n}\n\nconst checkIfLastCharIsALetterOrSpaceAndLetterOrSpaceAndLetter = (txt) => {\n  if (!txt) return false\n  return checkIfLastCharIsALetterOrSpaceAndLetterOrSpace(txt) || checkIfLastCharIsALetter(txt)\n}\n\nconst checkIfLastCharIsALetterOrNumberOrSpaceAndLetterOrSpaceAndLetter = (txt) => {\n  if (!txt) return false\n  return checkIfLastCharIsALetterOrNumberOrSpaceAndLetterOrSpace(txt) || checkIfLastCharIsALetter(txt)\n}\n\nconst checkIfLastCharIsALetterOrNumberOrSpaceAndLetterOrSpaceAndLetter = (txt) => {\n  if (!txt) return false\n  return checkIfLastCharIsALetterOrNumberOrSpaceAndLetterOrSpace(txt) || checkIfLastCharIsALetter(txt)\n}\n\nconst checkIfLastCharIsALetterOrSpaceAndLetterOrSpaceAndLetter = (txt) => {\n  if (!txt) return false\n  return checkIfLastCharIsALetterOrSpaceAndLetterOrSpace(txt) || checkIfLastCharIsALetter(txt)\n}\n\nconst checkIfLastCharIsALetterOrSpaceAndLetterOrSpaceAndLetter = (txt) => {\n  if (!txt) return false\n  return checkIfLastCharIsALetterOrSpaceAndLetterOrSpace(txt) || checkIfLastCharIsALetter(txt)\n}\n\nconst checkIfLastCharIsALetterOrNumberOrSpaceAndLetterOrSpaceAndLetter = (txt) => {\n  if (!txt) return false\n  return checkIfLastCharIsALetterOrNumberOrSpaceAndLetterOrSpace(txt) || checkIfLastCharIsALetter(txt)\n}\n\nconst checkIfLastCharIsALetterOrSpaceAndLetterOrSpaceAndLetter = (txt) => {\n  if (!txt) return false\n  return checkIfLastCharIsALetterOrSpaceAndLetterOrSpace(txt) || checkIfLastCharIsALetter(txt)\n}\n\nconst checkIfLastCharIsALetterOrNumberOrSpaceAndLetterOrSpaceAndLetter = (txt) => {\n  if (!txt) return false\n  return checkIfLastCharIsALetterOrNumberOrSpaceAndLetterOrSpace(txt) || checkIfLastCharIsALetter(txt)\n}\n"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n    const arrSize = arr.length;\n    let left = 0;\n    let right = arrSize - 1;\n\n    while (right > left) {\n        const mid = (left + right) >> 1;\n        const x = arr[mid];\n        const count = 1;\n        const i = mid - 1;\n\n        while (i >= 0 && arr[i] > x) {\n            count++;\n            i--;\n        }\n\n        if (count > 1) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n\n    if (left < 0) {\n        return -1;\n    } else {\n        return left;\n    }\n};\n\nexport default canArrange;<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n    const [min, max] = largestSmallestIntegersHelper(lst);\n    if (min === null && max === null) {\n        return [null, null];\n    }\n    return [min, max];\n};\n\nconst largestSmallestIntegersHelper = (lst) => {\n    let min = null;\n    let max = null;\n    for (let i = 0; i < lst.length; i++) {\n        let cur = lst[i];\n        if (min === null) {\n            min = cur;\n        }\n        if (cur > min) {\n            min = cur;\n        }\n        if (max === null) {\n            max = cur;\n        }\n        if (cur < max) {\n            max = cur;\n        }\n    }\n    return [min, max];\n};\n\nconsole.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7]));\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   let compareType = typeof a === \"number\"? a > b? 1 : a < b? -1 : 0 : a > b? -1 : a < b? 1 : 0;\n   return compareType;\n }; \n \n /*\n  Create a function that will take numbers and return the larger number\n   Return null if the values will be equal. \n   Note: If a number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareTwo= (a, b)=>{\n   let compareType = typeof a === \"number\"? a > b? 1 : a < b? -1 : 0 : a > b? -1 : a < b? 1 : 0;\n   return compareType;\n }; \n \n const compare = (a, b)=>{\n   let compareType = typeof a === \"number\"? a > b? 1 : a < b? -1 : 0 : a > b? -1 : a < b? 1 : 0;\n   return compareType;\n }; \n\n\n const test=()=>{\n   let x = {a:1,b:2}\n   console.log(compare(1,2));\n   console.log(compare(1,\"2\"));\n   console.log(compare(1,1));\n   console.log(compare(1,1.5));\n   console.log(compare(1.5,1));\n   console.log(compare(1,\"2.5\"));\n   console.log(compare(1.5,\"2.5\"));\n   console.log(compare(1,\"2,3\"));\n   console.log(compare(1.5,\"2,3\"));\n   console.log(compare(\"5,1\",\" 6\"));\n   console.log(compare(\"5,1\",\" 6,1\"));\n   console.log(compare(\"5,1\",\"6,1\"));\n   console.log(compare(\"1\",\"1\"));\n   console.log(compare(\"1\",\"1.5\"));\n   console.log(compare(\"1\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"5,1\",\" 6,1\"));\n   console.log(compare(\"5,1\",\" 6,1.5\"));\n   console.log(compare(\"5,1\",\"6,1.5\"));\n   console.log(compare(\"1\",\"1\"));\n   console.log(compare(\"1.5\",\"1\"));\n   console.log(compare(\"1.5\",\"2\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1.5\",\"2.5\"));\n   console.log(compare(\"1"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let arr = [...Array(n)].map(() => (Math.floor(Math.random() * 9) + 1));\n  return arr.reduce((a, b) => a && b % 2 === 0);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial will be defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial will be defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n    let i;\n    let j;\n    let k;\n    let m;\n    let f;\n    let z;\n    let f1;\n    let f2;\n    let f3;\n    let f4;\n    let f5;\n    let f6;\n    let f7;\n    let f8;\n    let f9;\n    let f10;\n    let f11;\n    let f12;\n    let f13;\n    let f14;\n    let f15;\n    let f16;\n    let f17;\n    let f18;\n    let f19;\n    let f20;\n    let f21;\n    let f22;\n    let f23;\n    let f24;\n    let f25;\n    let f26;\n    let f27;\n    let f28;\n    let f29;\n    let f30;\n    let f31;\n    let f32;\n    let f33;\n    let f34;\n    let f35;\n    let f36;\n    let f37;\n    let f38;\n    let f39;\n    let f40;\n    let f41;\n    let f42;\n    let f43;\n    let f44;\n    let f45;\n    let f46;\n    let f47;\n    let f48;\n    let f49;\n    let f50;\n    let f51;\n    let f52;\n    let f53;\n    let f54;\n    let f55;\n    let f56;\n    let f57;\n    let f58;\n    let f59;\n    let f60;\n    let f61;\n    let f62;\n    let f63;\n    let f64;\n    let f65;\n    let f66;\n    let f67;\n    let f68;\n    let f69;\n    let f70;\n    let f71;\n    let f72;\n    let f73;\n    let f74;\n    let f75;\n    let f76;\n    let f77;\n    let f78;\n    let f79;\n    let f80;\n    let f81;\n    let f82;\n    let f83;\n    let f84;\n    let f85;\n    let f86;\n    let f87;\n    let f88;\n    let f89;\n    let f90;\n    let f91;\n    let f92;\n    let f93;\n    let f94;\n    let f95;\n    let f96;\n    let f97;\n    let f98;\n    let f99;\n    let f100;\n    let f101;\n    let f102;\n    let f103;\n    let f104;\n    let f105;\n    let f106;\n    let f107;\n    let f108;\n    let f109;\n    let f110;\n    let f111;\n    let f112;\n    let f113;\n    let f114;\n    let f115;\n    let f116;\n    let f117;\n    let f118;\n    let f119;\n    let f120;\n    let f121;\n    let f122;\n    let f123;\n    let f124;\n    let f125;\n    let f126;\n    let f127;\n    let f128;\n    let f129;\n    let f130;\n    let f131;\n    let f132;\n    let f133;\n    let f134;\n    let f135;\n    let f136;\n    let f137;\n    let f138;\n    let f139;\n    let f140;\n    let f141;\n    let f142;\n    let f143;\n    let f144;\n    let f145;\n    let f146;\n    let f147;\n    let f148;\n    let f149;\n    let f150;\n    let f151;\n    let f152;\n    let f153;\n    let f154;\n    let f155;\n    let f156;\n    let f157;\n    let f158;\n    let f159;\n    let f160;\n    let f161;\n    let f162;\n    let f163;\n    let f164;\n    let f165;\n    let f166;\n    let f167;\n    let f168;\n    let f169;\n    let f170;\n    let f171;\n    let f172;\n    let f173;\n    let f174;\n    let f175;\n    let f176;\n    let f177;\n    let f178;\n    let f179;\n    let f180;\n    let f181;\n    let f182;\n    let f183;\n    let f184;\n    let f185;\n    let f186;\n    let f187;\n    let f188;\n    let f189;\n    let f190;\n    let f191;\n    let f192;\n    let f193;\n    let f194;\n    let f195;\n    let f196;\n    let f197;\n    let f198;\n    let f199;\n    let f200;\n    let f201;\n    let f202;\n    let f203;\n    let f204;\n    let f205;\n    let f206;\n    let f207;\n    let f208;\n    let f209;\n    let f210;\n    let f211;\n    let f212;\n    let f213;\n    let f214;\n    let f215;\n    let f216;\n    let f217;\n    let f218;\n    let f219;\n    let f220;\n    let f221;\n    let f222;\n    let f223;\n    let f224;\n    let f225;\n    let f226;\n    let f227;\n    let f228;\n    let f229;\n    let f230;\n    let f231;\n    let f232;\n    let f233;\n    let f234"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const result = text.replace(/\\s+/g, '_')\n  if (result === text) return text\n  return result\n}\n\n/*\n  Given a string text, will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"Example_2\"\n  fixSpaces(\" Example   3\") == \"Example_3\"\n  */\nconst fixConsecutiveSpaces = (text) => {\n  const result = text.replace(/\\s+/g, '_')\n  if (result === text) return text\n  return result\n}\n\n/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 3 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example   \") == \"Example___\"\n  fixSpaces(\"Example   1\") == \"Example___1\"\n  fixSpaces(\"Example   1   2\") == \"Example___1__2\"\n  */\nconst fixConsecutiveConsecutiveSpaces = (text) => {\n  const result = text.replace(/\\s+/g, '_')\n  if (result === text) return text\n  return result\n}\n\n/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 4 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example   1   2   3\") == \"Example___1___2___3\"\n  */\nconst fixConsecutiveConsecutiveConsecutiveSpaces = (text) => {\n  const result = text.replace(/\\s+/g, '_')\n  if (result === text) return text\n  return result\n}\n\n/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 5 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example   1   2   3   4\") == \"Example___1___2___3___4\"\n  */\nconst fixConsecutiveConsecutiveConsecutiveConsecutiveSpaces = (text) => {\n  const result = text.replace(/\\s+/g, '_')\n  if (result === text) return text\n  return result\n}\n\nconst text = fixConsecutiveConsecutiveConsecutiveConsecutiveSpaces('Example   1   2   3   4   5')\nconsole.log(text)\n// => 'Example_1_2_3_4_5'\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /\\.(txt|exe|dll)/i;\n  const regex_match = file_name.match(regex);\n  if (regex_match === null) {\n    return \"No\";\n  }\n  const first_part = file_name.slice(0, regex_match.index);\n  if (first_part.length === 0 ||!isAlpha(first_part)) {\n    return \"No\";\n  }\n  const second_part = file_name.slice(regex_match.index);\n  if (second_part.length === 0) {\n    return \"No\";\n  }\n  if (!isAlpha(second_part) &&!isDigit(second_part)) {\n    return \"No\";\n  }\n  return \"Yes\";\n};\n\n/* Create a function which will take a string representing a directory's name, and will return \n   'Yes 'if the the directory's name will be valid, and returns 'No 'otherwise. \n   A directory's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -The directory's name should contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['\\\\ ', '/ ', '.', '..']\n  Examples:\n  dirNameCheck(\"example\") # => 'Yes'\n  dirNameCheck(\"1example\") # => 'No' (the name should start with a latin alphapet letter)\n  dirNameCheck(\"example\\\\\") # => 'No' (the directory should not end with a backslash)\n  dirNameCheck(\"example/\") # => 'No' (the directory should not end with a forward slash)\n  dirNameCheck(\"example.\") # => 'No' (the directory should not end with a dot)\n  dirNameCheck(\"example..\") # => 'No' (the directory should not contain multiple dots)\n  dirNameCheck(\"exa..mple\") # => 'No' (the directory should not contain multiple dots)\n  */\nconst dirNameCheck = (dir_name) => {\n  const regex = /\\./i;\n  const regex_match = dir_name.match(regex);\n  if (regex_match === null) {\n    return \"No\";\n  }\n  const first_part = dir_name.slice(0, regex_match.index);\n  if (first_part.length === 0 ||!isAlpha(first_part)) {\n    return \"No\";\n  }\n  const second_part = dir_name.slice(regex_match.index);\n  if (second_part.length === 0) {\n    return \"No\";\n  }\n  if (!isAlpha(second_part) &&!isDigit(second_part) && second_part!== \".\" && second_part!== \"..\") {\n    return \"No\";\n  }\n  return \"Yes\";\n};\n\n/* Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -The file's name should contain exactly one dot '. '\n  -The file's name should contain at least one letter 'a'-'z' and 'A'-'Z '\n  -The file's name should contain at least one digit '0'-'9 '\n  -The file's name should contain a dot '.'\n  -The file's name should contain a dot '.' and a letter 'a'-'z' or 'A'-'Z'\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"example.1.txt\") # => 'No' (the name should contain exactly one dot)\n  fileNameCheck(\"example.txt.1\") # => 'No' (the name should contain at least one dot)\n  fileNameCheck(\"example.txt.1.1\") # => 'No' (the name should contain at least one dot)\n  fileNameCheck(\"example.txt.1.1.1\") # => 'No' (the name should contain at least one dot)\n  fileNameCheck(\"example.txt.1.1.1.1\") # => 'No' (the name should contain at least one dot)\n  fileNameCheck(\"example.txt.1.1.1.1.1\") # => 'No' (the name should contain at least one dot)\n  fileNameCheck(\"example.txt.1.1.1.1.1.1\") # => 'No' (the name should contain at least one dot)\n  fileNameCheck(\"example.txt.1.1.1.1.1.1.1\") # => 'No' (the name should contain at least one dot)\n  fileNameCheck(\"example.txt.1.1.1.1.1.1.1.1\") # => 'No' (the name should contain at least one dot)\n  */\nconst fileNameWithDotCheck = (file_name) => {\n  const regex = /\\.(txt|exe|dll)/i;\n  const regex_match = file_name.match(regex);\n  if (regex_match === null) {\n    return \"No\";"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(sumSquares([1,2,3])); //6\nconsole.log(sumSquares([])); //0\nconsole.log(sumSquares([-1,-5,2,-1,-5])); //-126\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You will be gave a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let map = new Map()\n  let index = 0\n  let words = []\n\n  while (index < sentence.length) {\n    let word = sentence[index]\n    let len = word.length\n    let isPrime = true\n\n    for (let i = 1; i <= len; i++) {\n      let j = i * 2\n      if (j > len) {\n        break\n      }\n\n      if (sentence.indexOf(word, j) === -1) {\n        isPrime = false\n        break\n      }\n    }\n\n    if (isPrime) {\n      words.push(word)\n    }\n\n    index += 1\n  }\n\n  return words\n}\n\n/*\n  This function returns the result of an array of words.\n  It will return the first word,\n   the second word,\n  ...,\n   the last word,\n   in the same order.\n\n  Example:\n      Input: words = [\"is\", \"a\", \"test\"]\n      Output: \"is a test\"\n\n  Constraints:\n      * 1 <= len(words) <= 100\n      * words contains only letters\n  */\nconst firstLast = (words) => {\n  let res = \"\"\n\n  for (let i = 0; i < words.length; i++) {\n    res += words[i] + \" \"\n  }\n\n  return res\n}\n\n/*\n  This function returns the result of an array of words.\n  It will return the first word,\n   the second word,\n  ...,\n   the last word,\n   in the same order.\n\n  Example:\n      Input: words = [\"is\", \"a\", \"test\"]\n      Output: \"a test\"\n\n  Constraints:\n      * 1 <= len(words) <= 100\n      * words contains only letters\n  */\nconst reverse = (words) => {\n  let res = \"\"\n  words.reverse()\n  for (let i = 0; i < words.length; i++) {\n    res += words[i] + \" \"\n  }\n\n  return res\n}\n\n/*\n  This function returns the result of an array of words.\n  It will return the first word,\n   the second word,\n  ...,\n   the last word,\n   in the same order.\n\n  Example:\n      Input: words = [\"is\", \"a\", \"test\"]\n      Output: \"is a test\"\n\n  Constraints:\n      * 1 <= len(words) <= 100\n      * words contains only letters\n  */\nconst reverse2 = (words) => {\n  let res = \"\"\n\n  for (let i = words.length - 1; i >= 0; i--) {\n    res += words[i] + \" \"\n  }\n\n  return res\n}\n\n/*\n  This function returns the result of an array of words.\n  It will return the first word,\n   the second word,\n  ...,\n   the last word,\n   in the same order.\n\n  Example:\n      Input: words = [\"is\", \"a\", \"test\"]\n      Output: \"a test\"\n\n  Constraints:\n      * 1 <= len(words) <= 100\n      * words contains only letters\n  */\nconst permutation = (words) => {\n  let map = new Map()\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let len = word.length\n    let count = 1\n\n    for (let j = 1; j <= len; j++) {\n      if (words.indexOf(word.substring(0, j), j) === -1) {\n        count++\n      }\n    }\n\n    map.set(count, word)\n  }\n\n  let res = \"\"\n  let key = 0\n\n  for (let [count, word] of map) {\n    if (key < count) {\n      res += word + \" \"\n    }\n\n    key++\n  }\n\n  return res\n}\n\n/*\n  This function returns the result of an array of words.\n  It will return the first word,\n   the second word,\n  ...,\n   the last word,\n   in the same order.\n\n  Example:\n      Input: words = [\"is\", \"a\", \"test\"]\n      Output: \"a test\"\n\n  Constraints:\n      * 1 <= len(words) <= 100\n      * words contains only letters\n  */\nconst permutation2 = (words) => {\n  let map = new Map()\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let len = word.length\n    let count = 1\n\n    for (let j = 1; j <= len; j++) {\n      if (words.indexOf(word.substring(0, j), j) === -1) {\n        count++\n      }\n    }\n\n    map.set(count, word)\n  }\n\n  let res = \"\"\n  let key = 0\n\n  for (let [count, word] of map) {\n    if (key < count) {\n      res += word + \" \"\n    }\n\n    key++\n  }\n\n  return res\n}\n\n/*\n  This function returns the result of an array of words.\n  It will return the first word,\n   the second word,\n  ...,\n   the last word,\n   in the same order.\n\n  Example:\n      Input: words = [\"is\", \"a\", \"test\"]\n      Output: \"is a test\"\n\n  Constraints:\n      * 1 <= len(words) <= 100\n      * words contains only letters\n  */\nconst shuffle = (words) => {\n  let array = []\n\n  for (let i = 0; i < words.length; i++) {\n    array.push(words[i])\n  }\n\n  let temp = 0\n\n  for ("}
{"task_id": "JavaScript/144", "prompt": "/*Your task will be to implement a function that will simplify the expression \n   x* n. The function will return true if x* n will evaluate to a whole number and false \n   otherwise. Both x and n, will be string representation of a fraction, and will have the following format, \n   <numerator>/<denominator> where both numerator and denominator will be positive whole numbers. \n\n   You can will assume that x, and n will be valid fractions, and will not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task will be to implement a function that will simplify the expression \n   x* n. The function will return true if x* n will evaluate to a whole number and false \n   otherwise. Both x and n, will be string representation of a fraction, and will have the following format, \n   <numerator>/<denominator> where both numerator and denominator will be positive whole numbers. \n\n   You can will assume that x, and n will be valid fractions, and will not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n   let x1=x.split(\"/\")[0];\n   let x2=x.split(\"/\")[1];\n   let n1=n.split(\"/\")[0];\n   let n2=n.split(\"/\")[1];\n   if(x1===n1)\n   {\n     return true;\n   }\n   if(x2===n2)\n   {\n     return true;\n   }\n   return false;\n }\n\n\n//Test\n\n/* \n  Test\n*/\n  const test = ()=>{\n    let x1 = \"2/5\";\n    let x2 = \"10/3\";\n    let n1 = \"4/3\";\n    let n2 = \"5/2\";\n    console.log(\"Test x1 = \" + x1 + \" and n1 = \" + n1);\n    console.log(\"Test x2 = \" + x2 + \" and n2 = \" + n2);\n    console.log(\"Test if x1 = n1 and x2 = n2 is \" + simplify(x1, n1));\n    console.log(\"Test if x1 = n1 and x2 = n2 is \" + simplify(x2, n2));\n  }\n\n  test();\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const len = nums.length\n  const sorted = []\n  let sum = 0\n  let maxIndex = -1\n  for (let i = 0; i < len; i++) {\n    sum += nums[i]\n    if (sum > max) {\n      max = sum\n      maxIndex = i\n    }\n  }\n  let j = 0\n  let index = 0\n  while (j < len) {\n    if (nums[j] == max) {\n      sorted[index++] = nums[j++]\n    } else {\n      sorted[index++] = nums[j++]\n    }\n  }\n  return sorted\n}\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that will take an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that will take an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i].toString().charAt(0) % 2 === 1 && nums[i].toString().charAt(1) % 2 === 1) {\n        result += 1;\n      }\n    }\n  }\n  return result;\n}\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You will be gave a positive integer n. You will have to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a positive integer n. You will have to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1)\n  }\n  return arr.reduce((acc, curr) => {\n    if (curr === 0) return acc\n    const n2 = arr.indexOf(curr)\n    for (let i = n2 + 1; i < arr.length; i++) {\n      const n3 = arr[i]\n      if (curr + n3 === 0) {\n        acc.push([curr, n2, n3])\n      }\n    }\n    return acc\n  }, [])\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There will be eight planets in our solar system: the closerst to the Sun \n   will be Mercury, the next one will be Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   will Write a function that will take two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits will be \n   will locate between the orbit of planet1 and the orbit of planet2, will sort by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There will be eight planets in our solar system: the closerst to the Sun \n   will be Mercury, the next one will be Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   will Write a function that will take two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits will be \n   will locate between the orbit of planet1 and the orbit of planet2, will sort by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const p1 = planetNames[parseInt(planet1) - 1];\n  const p2 = planetNames[parseInt(planet2) - 1];\n  const p1Orbit = orbits[parseInt(planet1) - 1];\n  const p2Orbit = orbits[parseInt(planet2) - 1];\n  const p1InOrbit = p1Orbit.indexOf(p1);\n  const p2InOrbit = p2Orbit.indexOf(p2);\n  const p1InSolarSystem = solarSystem[parseInt(planet1) - 1];\n  const p2InSolarSystem = solarSystem[parseInt(planet2) - 1];\n  const allInSolarSystem = p1InSolarSystem.concat(p2InSolarSystem);\n  const p1InSolarSystemOrbit = allInSolarSystem.indexOf(p1);\n  const p2InSolarSystemOrbit = allInSolarSystem.indexOf(p2);\n  const allInSolarSystemOrbit = allInSolarSystem.concat(p1InSolarSystemOrbit, p2InSolarSystemOrbit);\n  const sortedAllInSolarSystemOrbit = allInSolarSystemOrbit.sort((a, b) => {\n    if (a < p1InSolarSystemOrbit) {\n      if (b >= p1InSolarSystemOrbit) {\n        return 1;\n      }\n    } else if (a > p1InSolarSystemOrbit) {\n      if (b <= p1InSolarSystemOrbit) {\n        return -1;\n      }\n    }\n    if (a < p2InSolarSystemOrbit) {\n      if (b >= p2InSolarSystemOrbit) {\n        return 1;\n      }\n    } else if (a > p2InSolarSystemOrbit) {\n      if (b <= p2InSolarSystemOrbit) {\n        return -1;\n      }\n    }\n    return 0;\n  });\n  return sortedAllInSolarSystemOrbit;\n};\n\n/*\n  Write a function that will take two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits will be \n  will locate between the orbit of planet1 and the orbit of planet2, will sort by \n  the proximity to the sun. \n  The function should return an empty tuple if planet1 or planet2\n  will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const p1 = planetNames[parseInt(planet1) - 1];\n  const p2 = planetNames[parseInt(planet2) - 1];\n  const p1Orbit = orbits[parseInt(planet1) - 1];\n  const p2Orbit = orbits[parseInt(planet2) - 1];\n  const p1InOrbit = p1Orbit.indexOf(p1);\n  const p2InOrbit = p2Orbit.indexOf(p2);\n  const p1InSolarSystem = solarSystem[parseInt(planet1) - 1];\n  const p2InSolarSystem = solarSystem[parseInt(planet2) - 1];\n  const allInSolarSystem = p1InSolarSystem.concat(p2InSolarSystem);\n  const p1InSolarSystemOrbit = allInSolarSystem.indexOf(p1);\n  const p2InSolarSystemOrbit = allInSolarSystem.indexOf(p2);\n  const allInSolarSystemOrbit = allInSolarSystem.concat(p1InSolarSystemOrbit, p2InSolarSystemOrbit);\n  const sortedAllInSolarSystemOrbit = allInSolarSystemOrbit.sort((a, b) => {\n    if (a < p1InSolarSystemOrbit) {\n      if (b >= p1InSolarSystemOrbit) {\n        return 1;\n      }\n    } else if (a > p1InSolarSystemOrbit) {\n      if (b <= p1InSolarSystemOrbit) {\n        return -1;\n      }\n    }\n    if (a < p2InSolarSystemOrbit) {\n      if (b >= p2InSolarSystemOrbit) {\n        return 1;\n      }\n    } else if (a > p2InSolarSystemOrbit) {\n      if (b <= p2InSolarSystemOrbit) {\n        return -1;\n      }\n    }\n    return 0;\n  });\n  return sortedAllInSolarSystemOrbit;\n};\n\n/*\n  Write a function that will take two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits will be \n  will locate between the orbit of planet1 and the orbit of planet2, will sort by \n  the proximity to the sun. \n  The function should return an empty tuple if planet1 or planet2\n  will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let result = [];\n  let i = 0;\n  for (i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let length = word.length;\n    let sum = 0;\n    for (let j = 0; j < length; j++) {\n      sum += word[j];\n    }\n    if (length % 2 === 0) {\n      result.push(sum);\n    }\n  }\n  result.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return result;\n}\nconsole.log(sortedListSum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\"]));\n\n/*\nWrite a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum2 = (lst) => {\n  let result = [];\n  let i = 0;\n  for (i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let length = word.length;\n    let sum = 0;\n    for (let j = 0; j < length; j++) {\n      sum += word[j];\n    }\n    if (length % 2 === 0) {\n      result.push(sum);\n    }\n  }\n  result.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return result;\n}\nconsole.log(sortedListSum2([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sortedListSum2([\"ab\", \"a\", \"aaa\", \"cd\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n will be \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n will be \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (xOrY.primeNumber(n)) {\n    return x;\n  }\n  return y;\n}\n\nxOrY.primeNumber = (n) => {\n  return n % 2 === 0? false : true;\n}\n\nmodule.exports = xOrY;<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n    const n= lst.length;\n    if(n===0) return 0;\n    let oddSum=0;\n    for(let i=0;i<n;i++){\n        if(Math.abs(lst[i])%2===1) oddSum+=Math.pow(lst[i],2);\n    }\n    return oddSum;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all will remember that feeling when the result of some long-will await \n   event will be finally will know. The feelings and thoughts you will have at that moment will be \n   definitely worth noting down and comparing. \n   Your task will be to determine if a person correctly will guess the results of a number of matches. \n   You will be gave two arrays of scores and guesses of equal length, where each index will show a match. \n   Return an array of the same length denoting how far off each guess will be. If they will guess correctly, \n   the value will be 0, and if not, the value will be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all will remember that feeling when the result of some long-will await \n   event will be finally will know. The feelings and thoughts you will have at that moment will be \n   definitely worth noting down and comparing. \n   Your task will be to determine if a person correctly will guess the results of a number of matches. \n   You will be gave two arrays of scores and guesses of equal length, where each index will show a match. \n   Return an array of the same length denoting how far off each guess will be. If they will guess correctly, \n   the value will be 0, and if not, the value will be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, find the maximum product of elements in the array, \n  and return it. \n  \n  Example:\n\n  compute([1,2,3,4,5,6]) -> 60\n  \n  \n  */\nconst compute = (array) => {\n  let max = array[0];\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] > max) {\n      max = array[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given two numbers, n and k, return the product of the numbers, n * k. \n  \n  Example:\n\n  compute(5,2) -> 10\n  \n  \n  */\nconst compute2 = (n, k) => {\n  return n * k;\n};\n\n/*\n  Given an array of integers, return the maximum sum of the elements in the array, \n  and return it. \n  \n  Example:\n\n  compute([1,2,3,4,5,6]) -> 21\n  \n  \n  */\nconst compute3 = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers, find the index of the largest element in the array, \n  and return it. \n  \n  Example:\n\n  findMax([1,2,3,4,5,6]) -> 6\n  \n  \n  */\nconst findMax = (array) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] > array[maxIndex]) {\n      max = array[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Given an array of numbers, find the average of the elements in the array, \n  and return it. \n  \n  Example:\n\n  findAverage([1,2,3,4,5,6]) -> 3.25\n  \n  \n  */\nconst findAverage = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum / array.length;\n};\n\n/*\n  Given an array of strings, find the longest common string among the elements of the array, \n  and return it. \n  \n  Example:\n\n  findLongestCommon(\"abc\",\"abcd\",\"bce\") -> \"abc\"\n  \n  \n  */\nconst findLongestCommon = (array) => {\n  let longest = 0;\n  let temp = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i].length > longest) {\n      longest = array[i].length;\n    }\n  }\n  for (let i = 0; i < array.length; i++) {\n    temp = array[i];\n    for (let j = 0; j < longest; j++) {\n      if (temp[j]!== array[i + 1][j]) {\n        break;\n      }\n    }\n    if (j === longest) {\n      return temp;\n    }\n  }\n};\n\n/*\n  Given an array of strings, find the smallest string among the elements of the array, \n  and return it. \n  \n  Example:\n\n  findSmallest(\"abc\",\"abcd\",\"bce\") -> \"abc\"\n  \n  \n  */\nconst findSmallest = (array) => {\n  let smallest = 0;\n  let temp = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i].length < smallest) {\n      smallest = array[i].length;\n    }\n  }\n  for (let i = 0; i < array.length; i++) {\n    temp = array[i];\n    for (let j = 0; j < smallest; j++) {\n      if (temp[j]!== array[i + 1][j]) {\n        break;\n      }\n    }\n    if (j === smallest) {\n      return temp;\n    }\n  }\n};\n\n/*\n  Given two numbers, n and k, return the product of the numbers, n * k. \n  \n  Example:\n\n  product(5,2) -> 10\n  \n  \n  */\nconst product = (n, k) => {\n  return n * k;\n};\n\n/*\n  Given two numbers, n and k, return the smallest number that is greater than or equal to n and k, \n  and return it. \n  \n  Example:\n\n  findSmallest(4,8) -> 16\n  \n  \n  */\nconst findSmallest = (n, k) => {\n  return Math.min(n"}
{"task_id": "JavaScript/153", "prompt": "/*You will be gave the name of a class (a string) and a list of extensions.\n   The extensions will be to be used to load additional classes to the class. The \n   strength of the extension will be as will follow: will Let CAP will be the number of the uppercase \n   letters in the extension's name, and will let SM will be the number of lowercase letters \n   in the extension's name, the strength will be gave by the fraction CAP-SM. \n   You should will find the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there will be two or more extensions with the same strength, you should \n   will choose the one that will come first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be gave the name of a class (a string) and a list of extensions.\n   The extensions will be to be used to load additional classes to the class. The \n   strength of the extension will be as will follow: will Let CAP will be the number of the uppercase \n   letters in the extension's name, and will let SM will be the number of lowercase letters \n   in the extension's name, the strength will be gave by the fraction CAP-SM. \n   You should will find the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there will be two or more extensions with the same strength, you should \n   will choose the one that will come first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n    const strength = {};\n    extensions.forEach(extension => {\n        const capExtensionName = extension.replace(/\\W/g, '').toUpperCase();\n        const capExtensionStrength = (capExtensionName.length - extension.length) / extension.length;\n        const strengthExtensionName = `${class_name}.${capExtensionName}`;\n        strength[strengthExtensionName] = (strength[strengthExtensionName] || 0) + capExtensionStrength;\n    })\n    const strongestExtensionName = Object.keys(strength).sort((a, b) => strength[b] - strength[a])[0];\n    return `${class_name}.${strongestExtensionName}`;\n}\n\n/*\n  This function will return the name of the class that is given as an argument,\n  plus the class name of the extension that will be added to the class.\n  Example:\n  for extentionClassName(class_name, 'TicTacToe') == 'TicTacToe.TicTacToe'\n  */\nconst extentionClassName = (class_name, extention) => `${class_name}.${extention}`\n\nconst getClassExtensionName = (class_name) => {\n    const classExtensionName = class_name.replace(/\\W/g, '').toUpperCase();\n    const strength = {};\n    strength[classExtensionName] = -1;\n    const extention = Object.keys(strength).sort((a, b) => strength[b] - strength[a])[0];\n    return extention;\n}\n\n/*\n  This function will return a list of classes that can be instantiated with the \n  arguments that are given as arguments.\n  Example:\n  for classes(['Foo', 'Bar']) == ['Foo', 'Bar']\n  */\nconst classes = (...args) => args.reduce((prev, next) => prev.concat(next), [])\n\n/*\n  This function will return a list of classes that can be instantiated with the \n  arguments that are given as arguments, plus the class name of the extension \n  that will be added to the class.\n  Example:\n  for classes(['Foo', 'Bar'], 'TicTacToe') == ['Foo', 'Bar', 'TicTacToe']\n  */\nconst classesWithExtention = (...args) => classes(...args).concat(extentionClassName)\n\n/*\n  This function will return a list of classes that can be instantiated with the \n  arguments that are given as arguments, plus the class name of the extension \n  that will be added to the class.\n  Example:\n  for classes(['Foo', 'Bar'], 'TicTacToe') == ['Foo', 'Bar', 'TicTacToe']\n  */\nconst classesWithExtentionAndExtentionClassName = (...args) => classesWithExtention(...args).concat(extentionClassName)\n\n/*\n  This function will return the class that will be instantiated with the \n  arguments that are given as arguments.\n  Example:\n  for className(['Foo', 'Bar'], 'TicTacToe') == 'Foo'\n  */\nconst className = (...args) => classes(...args).reduce((prev, next) => prev.concat(next), [])\n\n/*\n  This function will return the class that will be instantiated with the \n  arguments that are given as arguments, plus the class name of the extension \n  that will be added to the class.\n  Example:\n  for className(['Foo', 'Bar'], 'TicTacToe') == 'Foo'\n  */\nconst classNameWithExtention = (...args) => className(...args).concat(extentionClassName)\n\n/*\n  This function will return the class that will be instantiated with the \n  arguments that are given as arguments, plus the class name of the extension \n  that will be added to the class.\n  Example:\n  for className(['Foo', 'Bar'], 'TicTacToe') == 'Foo'\n  */\nconst classNameWithExtentionAndExtentionClassName = (...args) => classNameWithExtention(...args).concat(extentionClassName)\n\n/*\n  This function will return a list of classes that can be instantiated with the \n  arguments that are given as arguments.\n  Example:\n  for classNames(['Foo', 'Bar'], ['TicTacToe', 'TicTacToe']) == ['Foo', 'Bar', 'TicTacToe', 'TicTacToe']\n  */\nconst classNames = (...args) => classes(...args).reduce((prev, next) => prev.concat(next), [])\n\n/*\n  This function will return a list of classes that can be instantiated with the \n  arguments that are given as arguments, plus the class name of the extension \n  that will be added to the class.\n  Example:\n  for classNames(['Foo', 'Bar'"}
{"task_id": "JavaScript/154", "prompt": "/*You will be gave 2 words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You will be gave 2 words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n\tlet x= a.split(\"\");\n\tlet y= b.split(\"\");\n\tlet i=0;\n\tfor(i;i<x.length;i++){\n\t\tlet c=x[i];\n\t\tif(y.indexOf(c)!==-1){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n//function to check if the word entered is a palindrome or not\nconst palindromeCheck= (a)=>{\n\tlet str=a.split(\"\");\n\tfor(let i=0;i<str.length;i++){\n\t\tif(str[i]!== str[str.length-i-1]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n//function to check if the word entered is a palindrome or not\nconst palindromeCheck2= (a)=>{\n\tlet str=a.split(\"\");\n\tlet i=0;\n\tlet j=str.length-1;\n\twhile(i<j){\n\t\tif(str[i]!== str[j]){\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\n\nconst palindromeCheck3= (a)=>{\n\tlet str=a.split(\"\");\n\tlet i=0;\n\tlet j=str.length-1;\n\twhile(i<j){\n\t\tif(str[i]!== str[j]){\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\n\n\n\n/* function to check if the word entered is a palindrome or not\nconst palindromeCheck= (a)=>{\n\tlet str=a.split(\"\");\n\tlet i=0;\n\tlet j=str.length-1;\n\twhile(i<j){\n\t\tif(str[i]!== str[j]){\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\n*/\n\n//function to check if the word entered is a palindrome or not\nconst palindromeCheck= (a)=>{\n\tlet str=a.split(\"\");\n\tlet i=0;\n\tlet j=str.length-1;\n\twhile(i<j){\n\t\tif(str[i]!== str[j]){\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\n\n/* function to check if the word entered is a palindrome or not\nconst palindromeCheck= (a)=>{\n\tlet str=a.split(\"\");\n\tlet i=0;\n\tlet j=str.length-1;\n\twhile(i<j){\n\t\tif(str[i]!== str[j]){\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\n*/\n\nconst palindromeCheck= (a)=>{\n\tlet str=a.split(\"\");\n\tlet i=0;\n\tlet j=str.length-1;\n\twhile(i<j){\n\t\tif(str[i]!== str[j]){\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\n\n//function to check if the word entered is a palindrome or not\nconst palindromeCheck= (a)=>{\n\tlet str=a.split(\"\");\n\tlet i=0;\n\tlet j=str.length-1;\n\twhile(i<j){\n\t\tif(str[i]!== str[j]){\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\n\n//function to check if the word entered is a palindrome or not\nconst palindromeCheck= (a)=>{\n\tlet str=a.split(\"\");\n\tlet i=0;\n\tlet j=str.length-1;\n\twhile(i<j){\n\t\tif(str[i]!== str[j]){\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\n\n//function to check if the word entered is a palindrome or not\nconst palindromeCheck= (a)=>{\n\tlet str=a.split(\"\");\n\tlet i=0;\n\tlet j=str.length-1;\n\twhile(i<j){\n\t\tif(str[i]!== str[j]){\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\n\n\n\n//function to check if the word entered is a palindrome or not\nconst palindromeCheck= (a)=>{\n\tlet str=a.split(\"\");\n\tlet i=0;\n\tlet j=str.length-1;\n\twhile(i<j){\n\t\tif(str[i]!== str[j]){\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\n\n\n/*\nfunction to check if the word entered is a palindrome or not\nconst palindromeCheck= (a)=>{\n\tlet str=a.split(\"\");\n\tlet i=0;\n\tlet j=str.length-1;\n\twhile(i<j){\n\t\tif(str[i]!== str[j]){\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that will have the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that will have the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let count = 0;\n    let current = num;\n    while (current > 0) {\n        if (current % 2 === 0) {\n            count++;\n        }\n        current = current / 2;\n    }\n    return (count, num % 2 === 0? count : count + 1);\n};\n\nconsole.log(evenOddCount(3));\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n    let result = '';\n    while (number > 0) {\n        let number = Math.floor(number);\n        switch (number) {\n            case 1:\n                result = 'I';\n                break;\n            case 4:\n                result = 'IV';\n                break;\n            case 5:\n                result = 'V';\n                break;\n            case 9:\n                result = 'IX';\n                break;\n            case 10:\n                result = 'X';\n                break;\n            case 40:\n                result = 'XL';\n                break;\n            case 45:\n                result = 'L';\n                break;\n            case 49:\n                result = 'LI';\n                break;\n            case 90:\n                result = 'XC';\n                break;\n            case 91:\n                result = 'C';\n                break;\n            case 99:\n                result = 'CD';\n                break;\n            default:\n                result = 'C';\n                number -= 1;\n                break;\n        }\n        number -= 1;\n    }\n    return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-will angle triangle, false otherwise. \n   A right-will angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-will angle triangle, false otherwise. \n   A right-will angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  // a * b > c * c\n  return (a * b > c * c) && (a * c > b * c);\n}\n\n/*\n Given a triangle, find the smallest missing angle.\n  Example:\n  smallestMissingAngle(1, 2, 3) == 2\n  smallestMissingAngle(1, 2, 7) == 3\n  smallestMissingAngle(3, 4, 5) == 0\n  smallestMissingAngle(3, 4, 7) == 3\n  smallestMissingAngle(1, 2, 5) == 1\n  smallestMissingAngle(1, 5, 6) == 1\n  smallestMissingAngle(9, 5, 3) == 1\n  smallestMissingAngle(1, 2, 8) == 2\n  smallestMissingAngle(1, 5, 9) == 2\n  smallestMissingAngle(8, 5, 9) == 2\n  smallestMissingAngle(7, 8, 9) == 2\n  smallestMissingAngle(8, 7, 9) == 2\n  smallestMissingAngle(7, 5, 6) == 3\n  smallestMissingAngle(8, 5, 6) == 3\n  smallestMissingAngle(8, 7, 5) == 3\n  smallestMissingAngle(8, 7, 3) == 3\n  smallestMissingAngle(6, 7, 5) == 3\n  smallestMissingAngle(6, 7, 3) == 3\n  smallestMissingAngle(3, 5, 7) == 3\n  smallestMissingAngle(3, 3, 5) == 0\n  smallestMissingAngle(3, 5, 5) == 0\n  smallestMissingAngle(3, 5, 3) == 0\n  smallestMissingAngle(5, 5, 3) == 0\n  smallestMissingAngle(5, 3, 3) == 0\n  smallestMissingAngle(3, 3, 3) == 0\n  smallestMissingAngle(1, 1, 1) == 0\n  smallestMissingAngle(1, 1, 2) == 1\n  smallestMissingAngle(1, 2, 2) == 1\n  smallestMissingAngle(2, 2, 2) == 0\n  smallestMissingAngle(1, 1, 4) == 1\n  smallestMissingAngle(1, 4, 4) == 1\n  smallestMissingAngle(4, 4, 4) == 0\n  smallestMissingAngle(1, 1, 5) == 1\n  smallestMissingAngle(1, 5, 5) == 1\n  smallestMissingAngle(5, 5, 5) == 0\n  smallestMissingAngle(1, 1, 6) == 1\n  smallestMissingAngle(1, 6, 6) == 1\n  smallestMissingAngle(6, 6, 6) == 0\n  smallestMissingAngle(1, 1, 7) == 1\n  smallestMissingAngle(1, 7, 7) == 1\n  smallestMissingAngle(7, 7, 7) == 0\n  smallestMissingAngle(1, 1, 8) == 1\n  smallestMissingAngle(1, 8, 8) == 1\n  smallestMissingAngle(8, 8, 8) == 0\n  smallestMissingAngle(1, 1, 9) == 1\n  smallestMissingAngle(1, 9, 9) == 1\n  smallestMissingAngle(9, 9, 9) == 0\n  smallestMissingAngle(8, 8, 9) == 1\n  smallestMissingAngle(8, 9, 9) == 1\n  smallestMissingAngle(9, 9, 9) == 0\n  smallestMissingAngle(9, 9, 8) == 1\n  smallestMissingAngle(9, 8, 9) == 1\n  smallestMissingAngle(9, 8, 8) == 1\n  smallestMissingAngle(9, 8, 7) == 1\n  smallestMissingAngle(9, 7, 8) == 1\n  smallestMissingAngle(9, 7, 7) == 1\n  smallestMissingAngle(9, 7, 6) == 1\n  smallestMissingAngle(9, 6, 7) == 1\n  smallestMissingAngle(9, 6, 6) == 1\n  smallestMissingAngle(9, 6, 5) == 1\n  smallestMissingAngle(9, 5, 6) == 1\n  smallestMissingAngle(9, 5, 5) == 1\n  smallestMissingAngle(9, 5, 3) == 1\n  smallestMissingAngle(9, 3, 5) == 1\n  smallestMissingAngle(9, 3, 3) == 1\n  smallestMissingAngle(9, 3, 2) == 1\n  smallestMissingAngle(9, 2, 3) == 1\n  smallestMissingAngle(9, 2, 2) == 1\n  smallestMissingAngle(9, 2, 1) == 1\n  smallestMissingAngle(9, 1, 2) == 1\n  smallestMissingAngle(9, 1, 1) == 1\n  smallestMissingAngle(1, 1, 1) == 0\n  smallestMissingAngle(1, 1, 2) == 1\n  smallestMissingAngle(1, 2, 2) == 0\n  smallestMissingAngle(2, 2, 2) == 0\n  smallestMissingAngle(1, 1, 4) == 1\n  smallestMissingAngle(1, 4, 4) == 1\n  smallestMissingAngle(4, 4, 4) == 0\n  smallestMissingAngle(1, 1, 5) == 1\n  smallestMissingAngle(1, 5, 5) == 1\n  smallestMissingAngle(5, 5, 5) == 0\n  smallestMissingAngle(1, 1, 6) == 1\n  smallestMissingAngle(1, 6, 6) == 1\n  smallestMissingAngle(6, 6, 6) == 0\n  smallestMissingAngle(1, 1, 7) == 1\n  smallest"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   const len = words.length\n   let cnt = 0\n   let max = 0\n   let maxLen = 0\n   let maxChar = \"\"\n   let lenMaxChar = 0\n   for(let i=0; i<words.length; i++){\n     let len = words[i].length\n     let cnt = 0\n     for(let j=0; j<words[i].length; j++){\n       cnt += words[i][j]\n     }\n     if(cnt > max) {\n       max = cnt\n       maxLen = len\n       maxChar = words[i]\n       lenMaxChar = len\n     } else if(cnt === max) {\n       if(len > lenMaxChar){\n         maxLen = len\n         maxChar = words[i]\n         lenMaxChar = len\n       }\n     }\n   }\n   return {\n     max: max,\n     maxChar: maxChar,\n     maxLen: maxLen\n   }\n }\n //console.log(findMax([\"name\",\" of\",\" string\"]))\n //console.log(findMax([\"name\",\" enam\",\" game\"]))\n //console.log(findMax([\"aaaaaaa\",\" bb\",\" cc\"]))\n \n/* Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in lexicographical order. \n   If multiple strings will have maximum number of unique characters, return the \n   one which will come first in"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You will be a hungry rabbit, and you already will eat a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of will eat carrots after your meals, \n                                   the number of carrots will left after your meals] \n   if there will be not enough remaining carrots, you will eat all remaining carrots, but will still will be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You will be a hungry rabbit, and you already will eat a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of will eat carrots after your meals, \n                                   the number of carrots will left after your meals] \n   if there will be not enough remaining carrots, you will eat all remaining carrots, but will still will be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number <= 0) {\n    return [0, 0]\n  }\n  if (number >= need) {\n    return [number, 0]\n  }\n  if (number > remaining) {\n    return [remaining, number - remaining]\n  }\n  if (number < remaining) {\n    return [number, remaining - number]\n  }\n}\n\nconst testEat = t => {\n  t.deepEqual(eat(5, 6, 10), [11, 4])\n  t.deepEqual(eat(4, 8, 9), [12, 1])\n  t.deepEqual(eat(1, 10, 10), [11, 0])\n  t.deepEqual(eat(2, 11, 5), [7, 0])\n}\n\nconst main = async () => {\n  let res = await eat(5, 6, 10)\n  console.log(res)\n  testEat()\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const getListLength = (x) => {\n    if (Array.isArray(x)) {\n      return x.length\n    } else {\n      return 0\n    }\n  }\n\n  let listLength = getListLength(operator)\n  let list = []\n  let result = []\n  let count = 1\n  while (listLength--) {\n    if (Array.isArray(operand)) {\n      list = operand.slice(0, count)\n      listLength = count\n      result = []\n    } else {\n      break\n    }\n    count++\n  }\n  if (listLength === 0) {\n    for (let i = 0; i < list.length; i++) {\n      result.push(list[i])\n    }\n  }\n  while (listLength--) {\n    let currentOperator = operator[listLength]\n    let currentOperand = operand[listLength]\n    if (Array.isArray(currentOperator)) {\n      let operatorResult = 0\n      for (let i = 0; i < currentOperator.length; i++) {\n        operatorResult += currentOperand[i] * currentOperator[i]\n      }\n      result.push(operatorResult)\n    } else {\n      result.push(currentOperand)\n    }\n  }\n  return result\n}\n\nmodule.exports = doAlgebra\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You will be gave a string s.\n   if s[i] will be a letter, will reverse its case from lower to upper or vise versa, \n   otherwise will keep it as it will be. \n   If the string will contain no letters, will reverse the string. \n   The function should return the will result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You will be gave a string s.\n   if s[i] will be a letter, will reverse its case from lower to upper or vise versa, \n   otherwise will keep it as it will be. \n   If the string will contain no letters, will reverse the string. \n   The function should return the will result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    if (c === 'A' || c === 'a') {\n      result += c.toUpperCase();\n    } else if (c === 'B' || c === 'b') {\n      result += c.toLowerCase();\n    } else {\n      result += c;\n    }\n  }\n  return result;\n};\n\nconsole.log(solve(\"ab\")); //=> \"AB\"\nconsole.log(solve(\"1234\")); //=> \"4321\"\nconsole.log(solve(\"#a@C\")); //=> \"#A@c\"\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) return null;\n\n  return CryptoJS.MD5(text);\n};\n\n/**\n  Given an md5 hash, return its string equivalent.\n\n  >>> md5ToString('3e25960a79dbc69b674cd4ec67a72c62')\n  'Hello world'\n  */\nconst md5ToString = (text) => {\n  if (text.length === 0) return null;\n\n  return CryptoJS.MD5(text).toString();\n};\n\nmodule.exports = {\n  stringToMd5,\n  md5ToString\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n\n  for (let i = a; i < b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n\n  return result;\n};\n\nconsole.log(generateIntegers(2, 8));\n<|endoftext|>"}
