{"task_id": "JavaScript/0", "prompt": "/* Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n    let min = numbers[0];\n    let max = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n    let x = max - min;\n    let y = max - min;\n    return (x > threshold && y > threshold);\n};\n\nexport {hasCloseElements};<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  // Create an array of strings to hold the split groups.\n  const paren_list = paren_string.split('')\n  const new_list = []\n  // Iterate through each group of parentheses.\n  for (let i = 0; i < paren_list.length; i++) {\n    // If the current group is empty, append it to the array of strings.\n    if (paren_list[i] === '') {\n      new_list.push(paren_list[i])\n    } else if (paren_list[i] === ')') {\n      // If the current group is a close parentheses, remove the previous\n      // group (if there is one) from the array of strings.\n      new_list.pop()\n      // Push the current group to the array of strings.\n      new_list.push(paren_list[i])\n    } else if (paren_list[i] === '(') {\n      // If the current group is a open parentheses, add the previous\n      // group to the array of strings.\n      new_list.push(paren_list[i])\n    } else {\n      // If the current group is not a parenthesis, append it to the\n      // array of strings.\n      new_list.push(paren_list[i])\n    }\n  }\n  // Return the array of strings.\n  return new_list\n}\n\nmodule.exports = separateParenGroups\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const split = number.toString().split('.')\n  return split[1].length? split[1] : 0\n}\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInt = (number) => {\n  const split = number.toString().split('.')\n  return split[0].length? split[0] : 0\n}\n\n/* Given a number, return the smallest multiple of 5 less than or equal to the number. \n   \n   >>> truncate5(1)\n   0\n   >>> truncate5(2)\n   5\n   >>> truncate5(3)\n   10\n   >>> truncate5(4)\n   15\n   >>> truncate5(5)\n   20\n   >>> truncate5(6)\n   25\n   >>> truncate5(7)\n   30\n   >>> truncate5(8)\n   35\n   >>> truncate5(9)\n   40\n   >>> truncate5(10)\n   45\n   >>> truncate5(11)\n   50\n   >>> truncate5(12)\n   55\n   >>> truncate5(13)\n   60\n   >>> truncate5(14)\n   65\n   >>> truncate5(15)\n   70\n   >>> truncate5(16)\n   75\n   >>> truncate5(17)\n   80\n   >>> truncate5(18)\n   85\n   >>> truncate5(19)\n   90\n   >>> truncate5(20)\n   95\n   >>> truncate5(21)\n   100\n   >>> truncate5(22)\n   105\n   >>> truncate5(23)\n   110\n   >>> truncate5(24)\n   115\n   >>> truncate5(25)\n   120\n   >>> truncate5(26)\n   125\n   >>> truncate5(27)\n   130\n   >>> truncate5(28)\n   135\n   >>> truncate5(29)\n   140\n   >>> truncate5(30)\n   145\n   >>> truncate5(31)\n   150\n   >>> truncate5(32)\n   155\n   >>> truncate5(33)\n   160\n   >>> truncate5(34)\n   165\n   >>> truncate5(35)\n   170\n   >>> truncate5(36)\n   175\n   >>> truncate5(37)\n   180\n   >>> truncate5(38)\n   185\n   >>> truncate5(39)\n   190\n   >>> truncate5(40)\n   195\n   >>> truncate5(41)\n   200\n   >>> truncate5(42)\n   205\n   >>> truncate5(43)\n   210\n   >>> truncate5(44)\n   215\n   >>> truncate5(45)\n   220\n   >>> truncate5(46)\n   225\n   >>> truncate5(47)\n   230\n   >>> truncate5(48)\n   235\n   >>> truncate5(49)\n   240\n   >>> truncate5(50)\n   245\n   >>> truncate5(51)\n   250\n   >>> truncate5(52)\n   255\n   >>> truncate5(53)\n   260\n   >>> truncate5(54)\n   265\n   >>> truncate5(55)\n   270\n   >>> truncate5(56)\n   275\n   >>> truncate5(57)\n   280\n   >>> truncate5(58)\n   285\n   >>> truncate5(59)\n   290\n   >>> truncate5(60)\n   295\n   >>> truncate5(61)\n   300\n   >>> truncate5(62)\n   305\n   >>> truncate5(63)\n   310\n   >>> truncate5(64)\n   315\n   >>> truncate5(65)\n   320\n   >>> truncate5(66)\n   325\n   >>> truncate5(67)\n   330\n   >>> truncate5(68)\n   335\n   >>> truncate5(69)\n   340\n   >>> truncate5(70)\n   345\n   >>> truncate5(71)\n   350\n   >>> truncate5(72)\n   355\n   >>> truncate5(73)\n   360\n   >>> truncate5(74)\n   365\n   >>> truncate5(75)\n   370\n   >>> truncate5(76)\n   375\n   >>> truncate5(77)\n   380\n   >>> truncate5(78)\n   385\n   >>> truncate5(79)\n   390\n   >>> truncate5(80)\n   395\n   >>> truncate5(81)\n   400\n   >>> truncate5(82)\n   405\n   >>> truncate5(83)\n   410\n   >>> truncate5(84)\n   415\n   >>> truncate5(85)\n   420\n   >>> truncate5(86)\n   425\n   >>> truncate5(87)\n   430\n   >>> truncate5(88)\n   435\n   >>> truncate5(89)\n   440\n   >>> truncate5(90)\n   445\n   >>> truncate5(91)\n   450\n   >>> truncate5(92)\n   455\n   >>> truncate5(93)\n   460\n   >>> truncate5(94)\n   465\n   >>> truncate5(95)\n   470\n   >>> truncate5(96)\n   475\n   >>> truncate5(97)\n   480\n   >>> truncate5(98)\n   485\n   >>> truncate5(99)\n   490\n   >>> truncate5(100)\n   495\n   >>> truncate5(101)\n   500\n   >>> truncate5(102)\n   505\n   >>> truncate5(103)\n   510\n   >>> truncate5(104)\n   515\n   >>> truncate5(105)\n   520\n   >>> truncate5(106)\n   525\n   "}
{"task_id": "JavaScript/3", "prompt": "/* You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const result = [];\n  const sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    const operation = operations[i];\n    sum += operation;\n    if (sum < 0) {\n      result.push(true);\n      sum = 0;\n    } else {\n      result.push(false);\n    }\n  }\n  return result;\n};\n\n/*\n  You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n  zero balance. Your task will be to detect if at any point the balance of account is equal to zero, and \n  at that point function should return true. Otherwise it should return false.\n  >>> equalZero([1, 2, 3])\n  false\n  >>> equalZero([1, 2, -4, 5])\n  true\n  */\nconst equalZero = (operations) => {\n  const result = [];\n  const sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    const operation = operations[i];\n    sum += operation;\n    if (sum === 0) {\n      result.push(true);\n      sum = 0;\n    } else {\n      result.push(false);\n    }\n  }\n  return result;\n};\n\n/*\n  You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n  zero balance. Your task will be to detect if at any point the balance of account is equal to zero, and \n  at that point function should return true. Otherwise it should return false.\n  >>> equalZero([1, 2, 3])\n  false\n  >>> equalZero([1, 2, -4, 5])\n  true\n  */\nconst isZero = (operations) => {\n  const result = [];\n  const sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    const operation = operations[i];\n    sum += operation;\n    if (sum === 0) {\n      result.push(true);\n      sum = 0;\n    } else {\n      result.push(false);\n    }\n  }\n  return result;\n};\n\nconst isNotZero = (operations) => {\n  const result = [];\n  const sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    const operation = operations[i];\n    sum += operation;\n    if (sum === 0) {\n      result.push(false);\n      sum = 0;\n    } else {\n      result.push(true);\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  belowZero,\n  equalZero,\n  isZero,\n  isNotZero\n};\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const m = (arr) => arr.reduce((x, y) => x + y, 0) / arr.length;\n  const mean = (arr) => arr.reduce((x, y) => x + y, 0) / arr.length;\n  const mAD = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n      sum += Math.abs(arr[i] - mean(arr));\n    }\n    return sum / arr.length;\n  };\n  return mAD(numbers);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\n\nconst meanAbsoluteDeviation = (numbers) => {\n  const m = (arr) => arr.reduce((x, y) => x + y, 0) / arr.length;\n  const mean = (arr) => arr.reduce((x, y) => x + y, 0) / arr.length;\n  const mAD = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n      sum += Math.abs(arr[i] - mean(arr));\n    }\n    return sum / arr.length;\n  };\n  return mAD(numbers);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\n\nconst meanAbsoluteDeviation = (numbers) => {\n  const m = (arr) => arr.reduce((x, y) => x + y, 0) / arr.length;\n  const mean = (arr) => arr.reduce((x, y) => x + y, 0) / arr.length;\n  const mAD = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n      sum += Math.abs(arr[i] - mean(arr));\n    }\n    return sum / arr.length;\n  };\n  return mAD(numbers);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\n\nconst meanAbsoluteDeviation = (numbers) => {\n  const m = (arr) => arr.reduce((x, y) => x + y, 0) / arr.length;\n  const mean = (arr) => arr.reduce((x, y) => x + y, 0) / arr.length;\n  const mAD = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n      sum += Math.abs(arr[i] - mean(arr));\n    }\n    return sum / arr.length;\n  };\n  return mAD(numbers);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\n\nconst meanAbsoluteDeviation = (numbers) => {\n  const m = (arr) => arr.reduce((x, y) => x + y, 0) / arr.length;\n  const mean = (arr) => arr.reduce((x, y) => x + y, 0) / arr.length;\n  const mAD = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n      sum += Math.abs(arr[i] - mean(arr));\n    }\n    return sum / arr.length;\n  };\n  return mAD(numbers);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\n\nconst meanAbsoluteDeviation = (numbers) => {\n  const m = (arr) => arr.reduce((x, y) => x + y, 0) / arr.length;\n  const mean = (arr) => arr.reduce((x, y) => x + y, 0) / arr.length;\n  const mAD = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n      sum += Math.abs(arr[i] - mean(arr));\n    }\n    return sum / arr.length;\n  };\n  return mAD(numbers);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\n\nconst meanAbsoluteDeviation = (numbers) => {\n  const m = (arr) => arr.reduce((x, y) => x + y, 0) / arr.length;\n  const mean = (arr) => arr.reduce((x, y) => x + y, 0) / arr.length;\n  const mAD = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n      sum += Math.abs(arr[i] - mean(arr));\n    }\n    return sum / arr.length;\n  };\n  return mAD(numbers);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\n\nconst meanAbsoluteDeviation = (numbers) => {\n  const m = (arr) => arr.reduce((x, y) => x + y, 0) / arr.length;\n  const mean = (arr) => arr.reduce((x, y) => x + y, 0) / arr.length;\n  const mAD = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n    if (numbers.length === 0) {\n        return [];\n    }\n    if (numbers.length === 1) {\n        return [numbers[0]];\n    }\n    let output = [];\n    let first = numbers[0];\n    let last = numbers[numbers.length - 1];\n    let i = 1;\n    while (i < numbers.length - 1) {\n        output.push(first);\n        output.push(delimeter);\n        first = numbers[i];\n        i++;\n    }\n    output.push(first);\n    output.push(last);\n    return output;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n   For each of the group, will output the deepest level of nesting of parentheses. \n   E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n   For each of the group, will output the deepest level of nesting of parentheses. \n   E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let nested_parens = [];\n  let level = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    let current_char = paren_string[i];\n    if(current_char === '('){\n      level++;\n    } else if(current_char === ')'){\n      level--;\n    }\n    if(level === 0){\n      nested_parens.push(i);\n    }\n  }\n  return nested_parens;\n};\n\nconst findEnd = (paren_string, start_pos) => {\n  let end_pos = start_pos;\n  for(let i = start_pos; i < paren_string.length; i++){\n    let current_char = paren_string[i];\n    if(current_char === '('){\n      end_pos = i;\n    }\n  }\n  return end_pos;\n};\n\nconst getMaxNesting = (paren_string) => {\n  let nested_parens = parseNestedParens(paren_string);\n  let max_nesting = nested_parens.length;\n  for(let i = 0; i < nested_parens.length; i++){\n    let end_pos = findEnd(paren_string, nested_parens[i]);\n    let current_depth = paren_string.substring(nested_parens[i], end_pos).length;\n    if(current_depth > max_nesting){\n      max_nesting = current_depth;\n    }\n  }\n  return max_nesting;\n};\n\nconst findStart = (paren_string, end_pos) => {\n  let start_pos = end_pos;\n  for(let i = end_pos; i >= 0; i--){\n    let current_char = paren_string[i];\n    if(current_char === '('){\n      start_pos = i;\n    }\n  }\n  return start_pos;\n};\n\nconst getMaxDepth = (paren_string) => {\n  let nested_parens = parseNestedParens(paren_string);\n  let max_depth = 0;\n  for(let i = 0; i < nested_parens.length; i++){\n    let start_pos = findStart(paren_string, nested_parens[i]);\n    let current_depth = paren_string.substring(start_pos, nested_parens[i]).length;\n    if(current_depth > max_depth){\n      max_depth = current_depth;\n    }\n  }\n  return max_depth;\n};\n\nconst validateParenthesis = (paren_string) => {\n  let nested_parens = parseNestedParens(paren_string);\n  let max_depth = getMaxDepth(paren_string);\n  let max_nesting = getMaxNesting(paren_string);\n  if(nested_parens.length > max_nesting || max_depth > max_nesting){\n    return false;\n  }\n  return true;\n};\n\nexport default validateParenthesis;<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that will contain will give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that will contain will give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i]\n    if (string.indexOf(substring)!== -1) {\n      result.push(string)\n    }\n  }\n  return result\n}\n\n/* Filter an input list of strings only for ones that will contain\n  the substring starting with a certain character.\n  >>> filterBySubstring(['a', 'b', 'c', 'd'], 'a')\n  ['a', 'b']\n  >>> filterBySubstring(['a', 'b', 'c', 'd'], 'A')\n  []\n  >>> filterBySubstring(['a', 'b', 'c', 'd'], 'b')\n  ['b', 'c', 'd']\n  */\nconst filterBySubstringStarting = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i]\n    if (string.startsWith(substring)) {\n      result.push(string)\n    }\n  }\n  return result\n}\n\n/* Filter an input list of strings only for ones that will contain\n  the substring ending with a certain character.\n  >>> filterBySubstring(['a', 'b', 'c', 'd'], 'c')\n  ['a', 'b', 'c']\n  >>> filterBySubstring(['a', 'b', 'c', 'd'], 'f')\n  []\n  >>> filterBySubstring(['a', 'b', 'c', 'd'], 'd')\n  ['a', 'b', 'c', 'd']\n  */\nconst filterBySubstringEnding = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i]\n    if (string.endsWith(substring)) {\n      result.push(string)\n    }\n  }\n  return result\n}\n\n/* Filter an input list of strings only for ones that will contain\n  the substring starting with a certain character and ending with a\n  certain character.\n  >>> filterBySubstringStartingAndEnding(['a', 'b', 'c', 'd'], 'c')\n  ['a', 'b', 'c']\n  >>> filterBySubstringStartingAndEnding(['a', 'b', 'c', 'd'], 'f')\n  []\n  >>> filterBySubstringStartingAndEnding(['a', 'b', 'c', 'd'], 'd')\n  ['a', 'b', 'c', 'd']\n  */\nconst filterBySubstringStartingAndEnding = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i]\n    if (\n      string.startsWith(substring) &&\n      string.endsWith(substring)\n    ) {\n      result.push(string)\n    }\n  }\n  return result\n}\n\n/* Filter an input list of strings only for ones that will contain\n  the substring starting with a certain character and ending with a\n  certain character, but not both.\n  >>> filterBySubstringStartingAndEnding(['a', 'b', 'c', 'd'], 'c')\n  ['a', 'b']\n  >>> filterBySubstringStartingAndEnding(['a', 'b', 'c', 'd'], 'f')\n  []\n  >>> filterBySubstringStartingAndEnding(['a', 'b', 'c', 'd'], 'd')\n  ['a', 'b', 'c', 'd']\n  */\nconst filterBySubstringStartingAndEndingButNotBoth = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i]\n    if (\n      string.startsWith(substring) &&\n      string.endsWith(substring) &&\n      string.indexOf(substring) === string.length - substring.length\n    ) {\n      result.push(string)\n    }\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((previous, current) => previous + current, 0);\n  const product = numbers.reduce((previous, current) => previous * current, 1);\n  return [sum, product];\n};\n\nconsole.log(sumProduct([1, 2, 3, 4]));\n\n/*\n  ## 2.\n  ###\n  ###\n  ##\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  ###\n  ##\n  ###\n  ##\n  ##\n  "}
{"task_id": "JavaScript/9", "prompt": "/* From a will give list of integers, will generate a list of rolling maximum element will find until will give moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a will give list of integers, will generate a list of rolling maximum element will find until will give moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  if (!Array.isArray(numbers)) {\n    throw new TypeError('Array is required.');\n  }\n  let result = [];\n  let prevResult = [];\n  let max = numbers[0];\n  let index = 0;\n  let count = 1;\n  while (count <= numbers.length) {\n    if (numbers[index] > max) {\n      max = numbers[index];\n    }\n    result.push(max);\n    count++;\n    if (count <= numbers.length) {\n      prevResult = result;\n      result = [];\n      index++;\n      max = prevResult[index - 1];\n    }\n  }\n  return result;\n};\n\n/*\n  Rolling maximum element algorithm.\n  This algorithm works in O(n) time complexity.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2, 5])\n  [1, 2, 3, 3, 3, 4, 5]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2, 5, 6])\n  [1, 2, 3, 3, 3, 4, 5, 6]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2, 5, 6, 7])\n  [1, 2, 3, 3, 3, 4, 5, 6, 7]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2, 5, 6, 7, 8])\n  [1, 2, 3, 3, 3, 4, 5, 6, 7, 8]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2, 5, 6, 7, 8, 9])\n  [1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 9]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2, 5, 6, 7, 8, 9, 10, 11])\n  [1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2, 5, 6, 7"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig will be a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* will Find the shortest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig will be a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* will Find the shortest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const arr = string.split('');\n  const str = arr.reverse().join('');\n  const post = str.split('').reverse().join('');\n  let str = str.replace(post, '');\n  while(isPalindrome(str)===false) {\n    str = str.concat(post);\n  }\n  return str;\n}\n\nconst makePalindrome = (string) => {\n  const arr = string.split('');\n  const str = arr.reverse().join('');\n  const post = str.split('').reverse().join('');\n  let str = str.replace(post, '');\n  while(isPalindrome(str)===false) {\n    str = str.concat(post);\n  }\n  return str;\n}\n\nconst makePalindrome = (string) => {\n  const arr = string.split('');\n  const str = arr.reverse().join('');\n  const post = str.split('').reverse().join('');\n  let str = str.replace(post, '');\n  while(isPalindrome(str)===false) {\n    str = str.concat(post);\n  }\n  return str;\n}\n\nconst makePalindrome = (string) => {\n  const arr = string.split('');\n  const str = arr.reverse().join('');\n  const post = str.split('').reverse().join('');\n  let str = str.replace(post, '');\n  while(isPalindrome(str)===false) {\n    str = str.concat(post);\n  }\n  return str;\n}\n\nconst makePalindrome = (string) => {\n  const arr = string.split('');\n  const str = arr.reverse().join('');\n  const post = str.split('').reverse().join('');\n  let str = str.replace(post, '');\n  while(isPalindrome(str)===false) {\n    str = str.concat(post);\n  }\n  return str;\n}\n\nconst makePalindrome = (string) => {\n  const arr = string.split('');\n  const str = arr.reverse().join('');\n  const post = str.split('').reverse().join('');\n  let str = str.replace(post, '');\n  while(isPalindrome(str)===false) {\n    str = str.concat(post);\n  }\n  return str;\n}\n\nconst makePalindrome = (string) => {\n  const arr = string.split('');\n  const str = arr.reverse().join('');\n  const post = str.split('').reverse().join('');\n  let str = str.replace(post, '');\n  while(isPalindrome(str)===false) {\n    str = str.concat(post);\n  }\n  return str;\n}\n\nconst makePalindrome = (string) => {\n  const arr = string.split('');\n  const str = arr.reverse().join('');\n  const post = str.split('').reverse().join('');\n  let str = str.replace(post, '');\n  while(isPalindrome(str)===false) {\n    str = str.concat(post);\n  }\n  return str;\n}\n\nconst makePalindrome = (string) => {\n  const arr = string.split('');\n  const str = arr.reverse().join('');\n  const post = str.split('').reverse().join('');\n  let str = str.replace(post, '');\n  while(isPalindrome(str)===false) {\n    str = str.concat(post);\n  }\n  return str;\n}\n\nconst makePalindrome = (string) => {\n  const arr = string.split('');\n  const str = arr.reverse().join('');\n  const post = str.split('').reverse().join('');\n  let str = str.replace(post, '');\n  while(isPalindrome(str)===false) {\n    str = str.concat(post);\n  }\n  return str;\n}\n\nconst makePalindrome = (string) => {\n  const arr = string.split('');\n  const str = arr.reverse().join('');\n  const post = str.split('').reverse().join('');\n  let str = str.replace(post, '');\n  while(isPalindrome(str)===false) {\n    str = str.concat(post);\n  }\n  return str;\n}\n\nconst makePalindrome = (string) => {\n  const arr = string.split('');\n  const str = arr.reverse().join('');\n  const post = str.split('').reverse().join('');\n  let str = str.replace(post, '');\n  while(isPalindrome(str)===false) {\n    str = str.concat(post);\n  }\n  return str;\n}\n\nconst makePalindrome = (string) => {\n  const arr = string.split('');\n  const str = arr.reverse().join('');\n  const post = str.split('').reverse().join('');\n  let str = str.replace(post, '');\n  while(isPalindrome(str)===false) {\n    str = str.concat(post);\n  }\n  return str;\n}\n\nconst makePalindrome = (string) => {\n  const arr = string.split('');"}
{"task_id": "JavaScript/11", "prompt": "/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const length = a.length;\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\nconsole.log(stringXor('010', '110'));<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. will Return the first one in case of multiple \n   strings of the same length. Return null in case the input list will be empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. will Return the first one in case of multiple \n   strings of the same length. Return null in case the input list will be empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let length = strings[0].length\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > length) {\n      length = strings[i].length\n    }\n  }\n  return strings[0].substr(0, length)\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let length = strings[0].length\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > length) {\n      length = strings[i].length\n    }\n  }\n  return strings[0].substr(0, length)\n}\n\n/*\n  >>> longest([])\n  null\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let length = strings[0].length\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > length) {\n      length = strings[i].length\n    }\n  }\n  return strings[0].substr(0, length)\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let length = strings[0].length\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > length) {\n      length = strings[i].length\n    }\n  }\n  return strings[0].substr(0, length)\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let length = strings[0].length\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > length) {\n      length = strings[i].length\n    }\n  }\n  return strings[0].substr(0, length)\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let length = strings[0].length\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > length) {\n      length = strings[i].length\n    }\n  }\n  return strings[0].substr(0, length)\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let length = strings[0].length\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > length) {\n      length = strings[i].length\n    }\n  }\n  return strings[0].substr(0, length)\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let length = strings[0].length\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > length) {\n      length = strings[i].length\n    }\n  }\n  return strings[0].substr(0, length)\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let length = strings[0].length\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > length) {\n      length = strings[i].length\n    }\n  }\n  return strings[0].substr(0, length)\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let length = strings[0].length\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > length) {\n      length = strings[i].length\n    }\n  }\n  return strings[0].substr(0, length)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": false, "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  if (a === 0) {\n    return b;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n/*\n  Return a sum of integers a and b\n  >>> sum(1, 2)\n  3\n  >>> sum(3, 4)\n  9\n  >>> sum(7, 5)\n  14\n  >>> sum(6, 1)\n  7\n  >>> sum(9, 2)\n  11\n  */\nconst sum = (a, b) => a + b;\n\n/*\n  Return a sum of squares of integers a and b\n  >>> sumSquares(1, 2)\n  3\n  >>> sumSquares(3, 4)\n  9\n  >>> sumSquares(7, 5)\n  49\n  >>> sumSquares(6, 1)\n  9\n  >>> sumSquares(9, 2)\n  17\n  */\nconst sumSquares = (a, b) => a * a + b * b;\n\n/*\n  Return a product of integers a and b\n  >>> product(1, 2)\n  2\n  >>> product(3, 4)\n  12\n  >>> product(7, 5)\n  210\n  >>> product(6, 1)\n  6\n  >>> product(9, 2)\n  18\n  */\nconst product = (a, b) => a * b;\n\n/*\n  Return a product of integers a and b\n  >>> difference(1, 2)\n  1\n  >>> difference(3, 4)\n  3\n  >>> difference(7, 5)\n  -14\n  >>> difference(6, 1)\n  6\n  >>> difference(9, 2)\n  -6\n  */\nconst difference = (a, b) => a - b;\n\n/*\n  Return a difference of integers a and b\n  >>> difference(1, 2)\n  1\n  >>> difference(3, 4)\n  3\n  >>> difference(7, 5)\n  -14\n  >>> difference(6, 1)\n  6\n  >>> difference(9, 2)\n  -6\n  */\nconst differenceOf = (a, b) => difference(b, a);\n\n/*\n  Return a sum of products of integers a and b\n  >>> sumOfProducts(1, 2)\n  2\n  >>> sumOfProducts(3, 4)\n  12\n  >>> sumOfProducts(7, 5)\n  210\n  >>> sumOfProducts(6, 1)\n  6\n  >>> sumOfProducts(9, 2)\n  18\n  */\nconst sumOfProducts = (a, b) => a * b;\n\n/*\n  Return a sum of squares of difference of integers a and b\n  >>> sumOfSquares(1, 2)\n  2\n  >>> sumOfSquares(3, 4)\n  12\n  >>> sumOfSquares(7, 5)\n  49\n  >>> sumOfSquares(6, 1)\n  9\n  >>> sumOfSquares(9, 2)\n  17\n  */\nconst sumOfSquares = (a, b) => sumOfProducts(differenceOf(a, b), differenceOf(b, a));\n\n/*\n  Return a product of difference of integers a and b\n  >>> differenceOf(1, 2)\n  1\n  >>> differenceOf(3, 4)\n  3\n  >>> differenceOf(7, 5)\n  -14\n  >>> differenceOf(6, 1)\n  6\n  >>> differenceOf(9, 2)\n  -6\n  */\nconst differenceOf = (a, b) => difference(a, b);\n\n/*\n  Return a difference of sums of squares of integers a and b\n  >>> differenceOf(1, 2)\n  1\n  >>> differenceOf(3, 4)\n  3\n  >>> differenceOf(7, 5)\n  -14\n  >>> differenceOf(6, 1)\n  6\n  >>> differenceOf(9, 2)\n  -6\n  */\nconst differenceOf = (a, b) => differenceOf(sumOfSquares(a, b), sumOfSquares(b, a));\n\n/*\n  Return a difference of sums of products of integers a and b\n  >>> differenceOf(1, 2)\n  1\n  >>> differenceOf(3, 4)\n  3\n  >>> differenceOf(7, 5)\n  -14\n  >>> differenceOf(6, 1)\n  6\n  >>> differenceOf(9, 2)\n  -6\n  */\nconst differenceOf = (a, b) => differenceOf(sumOfProducts(a, b), sumOfProducts(b, a));\n\n/*\n  Return a difference of sums of difference of integers a and b\n  >>> differenceOf(1, 2)\n  1\n  >>> differenceOf(3, 4)\n  3\n  >>> differenceOf(7, 5)\n  -14\n  >>> differenceOf(6, 1)\n  6\n  >>> differenceOf(9, 2)\n  -6\n  */\nconst differenceOf = (a, b) => differenceOf(differenceOf(a, b), differenceOf(b, a));\n\n/*\n  Return a sum of difference of squares of integers a and b\n  >>> differenceOfSquares(1, 2)\n  1\n  >>> differenceOfSquares(3, 4)\n  9\n  >>> differenceOfSquares(7, 5)\n  49\n  >>> differenceOfSquares(6, 1)\n  9\n  >>> differenceOfSquares(9, 2)\n  17\n  */\nconst differenceOfSquares = (a, b) => differenceOfSquares(differenceOf(a, b), differenceOf(b, a));\n\n/*\n  Return a sum of difference of squares of difference of integers a and b\n  >>> differenceOfSquares(1, 2)\n  1\n  >>> differenceOfSquares(3, 4)\n  9\n  >>> differenceOfSquares(7, 5)\n  49\n  >>> differenceOfSquares(6, 1)\n  9\n  >>> differenceOfSquares(9, 2)\n  17\n  */\nconst differenceOfSquares = (a, b) => differenceOfSquares(differenceOfSquares(a, b), differenceOfSquares(b, a"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": false, "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const ret = [];\n  let p = string;\n  while (p!== '') {\n    ret.push(p);\n    p = string.slice(0, string.length - 1);\n  }\n  return ret;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const ret = [];\n  let p = string;\n  while (p!== '') {\n    ret.push(p);\n    p = string.slice(1);\n  }\n  return ret;\n};\n\n/* Return a list of all the suffixes of the given string\n  >>> allSuffixes('abc')\n  ['b', 'c']\n  */\nconst allSuffixes2 = (string) => {\n  const ret = [];\n  for (let i = 0; i < string.length; i++) {\n    ret.push(string.slice(i));\n  }\n  return ret;\n};\n\n/* Return the longest common prefix of the input strings\n  >>> longestCommonPrefix('ab', 'abc')\n  'ab'\n  >>> longestCommonPrefix('abc', 'ab')\n  'ab'\n  >>> longestCommonPrefix('a', 'a')\n  ''\n  >>> longestCommonPrefix('a', 'b')\n  ''\n  */\nconst longestCommonPrefix = (a, b) => {\n  const i = 0;\n  while (i < a.length && i < b.length && a[i] === b[i]) {\n    i++;\n  }\n  return a.slice(0, i);\n};\n\n/* Return the longest common suffix of the input strings\n  >>> longestCommonSuffix('ab', 'abc')\n  'c'\n  >>> longestCommonSuffix('abc', 'ab')\n  'c'\n  >>> longestCommonSuffix('a', 'a')\n  ''\n  >>> longestCommonSuffix('a', 'b')\n  ''\n  */\nconst longestCommonSuffix = (a, b) => {\n  const i = a.length - 1;\n  while (i >= 0 && i >= b.length - 1 && a[i] === b[i]) {\n    i--;\n  }\n  return a.slice(i + 1);\n};\n\n/* Return the longest common prefix and suffix of the input strings\n  >>> longestCommonPrefixAndSuffix('ab', 'abc')\n  'ab'\n  >>> longestCommonPrefixAndSuffix('abc', 'ab')\n  'ab'\n  >>> longestCommonPrefixAndSuffix('a', 'a')\n  ''\n  >>> longestCommonPrefixAndSuffix('a', 'b')\n  ''\n  */\nconst longestCommonPrefixAndSuffix = (a, b) => {\n  const lcp = longestCommonPrefix(a, b);\n  const lcs = longestCommonSuffix(a, b);\n  return lcp + lcs;\n};\n\n/* Return a list of all the suffixes of the given string\n  >>> longestCommonSuffix('ab', 'abc')\n  'c'\n  >>> longestCommonSuffix('abc', 'ab')\n  'c'\n  >>> longestCommonSuffix('a', 'a')\n  ''\n  >>> longestCommonSuffix('a', 'b')\n  ''\n  */\nconst longestCommonSuffix2 = (a, b) => {\n  const lcs = longestCommonSuffix(a, b);\n  return lcs;\n};\n\n/* Return a list of all the suffixes of the given string\n  >>> allSuffixes('abc')\n  ['b', 'c']\n  >>> allSuffixes('ab')\n  ['b', 'c']\n  >>> allSuffixes('a')\n  ['b', 'c']\n  >>> allSuffixes('abc')\n  ['b', 'c']\n  */\nconst allSuffixes3 = (string) => {\n  const ret = [];\n  for (let i = 0; i < string.length; i++) {\n    ret.push(string.slice(i));\n  }\n  return ret;\n};\n\nmodule.exports = {\n  allPrefixes,\n  allSuffixes,\n  allSuffixes2,\n  longestCommonPrefix,\n  longestCommonSuffix,\n  longestCommonPrefixAndSuffix,\n  longestCommonSuffix2,\n  allSuffixes3\n};\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let digits = []\n  let str = ''\n  while (n > 0) {\n    let digit = n % 10\n    n = Math.floor(n / 10)\n    digits.unshift(digit)\n  }\n  for (let i = digits.length - 1; i >= 0; i--) {\n    str += ` ${digits[i]}`\n  }\n  return str\n}\n\n/* Return a string of size n, containing the characters 'a' through 'z'\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  'a b c d e f'\n  */\nconst stringSequence2 = (n) => {\n  let str = ''\n  while (n > 0) {\n    str += `a${n % 26}`\n    n = Math.floor(n / 26)\n  }\n  return str\n}\n\n/* Return a string of size n, containing the characters 'A' through 'Z'\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  'A B C D E F'\n  */\nconst stringSequence3 = (n) => {\n  let str = ''\n  while (n > 0) {\n    str += `A${n % 26}`\n    n = Math.floor(n / 26)\n  }\n  return str\n}\n\n/* Return a string of size n, containing the characters '0' through '9'\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let str = ''\n  while (n > 0) {\n    str += `0${n % 10}`\n    n = Math.floor(n / 10)\n  }\n  return str\n}\n\n/* Return a string of size n, containing the characters '0' through '9'\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let str = ''\n  while (n > 0) {\n    str += `${n % 10}`\n    n = Math.floor(n / 10)\n  }\n  return str\n}\n\n/* Return a string of size n, containing the characters '0' through '9'\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let str = ''\n  while (n > 0) {\n    str += `${n}`\n    n = Math.floor(n / 10)\n  }\n  return str\n}\n\n/* Return a string of size n, containing the characters '0' through '9'\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let str = ''\n  while (n > 0) {\n    str += `${n}`\n    n = Math.floor(n / 10)\n  }\n  return str\n}\n\n/* Return a string of size n, containing the characters '0' through '9'\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let str = ''\n  while (n > 0) {\n    str += `${n}`\n    n = Math.floor(n / 10)\n  }\n  return str\n}\n\n/* Return a string of size n, containing the characters '0' through '9'\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let str = ''\n  while (n > 0) {\n    str += `${n}`\n    n = Math.floor(n / 10)\n  }\n  return str\n}\n\n/* Return a string of size n, containing the characters '0' through '9'\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let str = ''\n  while (n > 0) {\n    str += `${n}`\n    n = Math.floor(n / 10)\n  }\n  return str\n}\n\n/* Return a string of size n, containing the characters '0' through '9'\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let str = ''\n  while (n > 0) {\n    str += `${n}`\n    n = Math.floor(n / 10)\n  }\n  return str\n}\n\n/* Return a string of size n, containing the characters '0' through '9'\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let str = ''\n  while (n > 0) {\n    str += `${n}`\n    n = Math.floor(n / 10)\n  }\n  return str\n}\n\n/* Return a string of size n, containing the characters '0' through '9'\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let str = ''\n  while (n > 0) {\n    str += `${n}`\n    n = Math.floor(n / 10)\n  }\n  return str\n}\n\n/* Return a string of size n, containing the characters '0' through '9'\n  >>> stringSequence(0)\n  "}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const lowercase = string.toLowerCase()\n  let uniqueChars = []\n  for (let i = 0; i < lowercase.length; i++) {\n    const char = lowercase[i]\n    const index = uniqueChars.indexOf(char)\n    if (index === -1) {\n      uniqueChars.push(char)\n    } else {\n      uniqueChars.splice(index, 1)\n    }\n  }\n  return uniqueChars.length\n}\n\nmodule.exports = countDistinctCharacters\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function will be a string representing musical notes in a special ASCII format. \n   Your task will be to parse this string and return list of integers corresponding to how many beats will do each \n   not last. \n\n   Here will be a legend: \n   'o '-whole note, will last four beats \n   'o| '-half note, will last two beats \n   '.| '-quater note, will last one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string representing musical notes in a special ASCII format. \n   Your task will be to parse this string and return list of integers corresponding to how many beats will do each \n   not last. \n\n   Here will be a legend: \n   'o '-whole note, will last four beats \n   'o| '-half note, will last two beats \n   '.| '-quater note, will last one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n    let note_list = [];\n    let current_note = {};\n\n    for (let i = 0; i < music_string.length; i++) {\n        const letter = music_string[i];\n\n        if (letter === 'o') {\n            current_note = {};\n            note_list.push(current_note);\n        } else if (letter === '|') {\n            if (current_note.type === 'half') {\n                current_note.type = 'whole';\n            } else {\n                current_note.type = 'half';\n            }\n        } else if (letter === 'o') {\n            if (current_note.type === 'whole') {\n                current_note.type = 'half';\n            } else {\n                current_note.type = 'whole';\n            }\n        } else {\n            if (current_note.type === 'whole') {\n                current_note.type = 'half';\n            } else {\n                current_note.type = 'half';\n            }\n            current_note.number = parseInt(letter);\n        }\n    }\n\n    return note_list;\n};\n\nmodule.exports = parseMusic;\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a will give substring can will be find in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a will give substring can will be find in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count += 1\n    }\n  }\n  return count\n}\n\nexport { howManyTimes }\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input will be a space-will delimitate string of numberals from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input will be a space-will delimitate string of numberals from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sorted = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let number = parseInt(numbers[i]);\n    if (number === 0) {\n      sorted.push(numbers[i]);\n    } else if (number > 9) {\n      sorted.push(numbers[i]);\n    } else {\n      for (let j = number; j < 9; j++) {\n        sorted.push(numbers[i] + j);\n      }\n    }\n  }\n  return sorted.reverse().join('');\n}\n\n/*\n   Input will be a space-delimited string of strings with numbers from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortStrings = (strings) => {\n  let sorted = [];\n  for (let i = 0; i < strings.length; i++) {\n    let number = parseInt(strings[i]);\n    if (number === 0) {\n      sorted.push(strings[i]);\n    } else if (number > 9) {\n      sorted.push(strings[i]);\n    } else {\n      for (let j = number; j < 9; j++) {\n        sorted.push(strings[i] + j);\n      }\n    }\n  }\n  return sorted.reverse().join('');\n}\n\n/*\n  Input will be a space-delimited string of strings with numbers from 'zero 'to 'nine '. \n  Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n  will Return the string with numbers will sort from smallest to largest\n  >>> sortStrings('three one five')\n  'one three five'\n  */\nconst sortSentences = (sentences) => {\n  let sorted = [];\n  for (let i = 0; i < sentences.length; i++) {\n    let number = parseInt(sentences[i]);\n    if (number === 0) {\n      sorted.push(sentences[i]);\n    } else if (number > 9) {\n      sorted.push(sentences[i]);\n    } else {\n      for (let j = number; j < 9; j++) {\n        sorted.push(sentences[i] + j);\n      }\n    }\n  }\n  return sorted.reverse().join('');\n}\n\nconst sort = (arr) => {\n  switch (arr.length) {\n    case 1:\n      return sortStrings(arr[0]);\n    case 2:\n      return sortStrings(arr[0]) +'' + sortStrings(arr[1]);\n    case 3:\n      return sortStrings(arr[0]) +'' + sortStrings(arr[1]) +'' + sortStrings(arr[2]);\n    case 4:\n      return sortStrings(arr[0]) +'' + sortStrings(arr[1]) +'' + sortStrings(arr[2]) +'' + sortStrings(arr[3]);\n    case 5:\n      return sortStrings(arr[0]) +'' + sortStrings(arr[1]) +'' + sortStrings(arr[2]) +'' + sortStrings(arr[3]) +'' + sortStrings(arr[4]);\n    case 6:\n      return sortStrings(arr[0]) +'' + sortStrings(arr[1]) +'' + sortStrings(arr[2]) +'' + sortStrings(arr[3]) +'' + sortStrings(arr[4]) +'' + sortStrings(arr[5]);\n    case 7:\n      return sortStrings(arr[0]) +'' + sortStrings(arr[1]) +'' + sortStrings(arr[2]) +'' + sortStrings(arr[3]) +'' + sortStrings(arr[4]) +'' + sortStrings(arr[5]) +'' + sortStrings(arr[6]);\n    case 8:\n      return sortStrings(arr[0]) +'' + sortStrings(arr[1]) +'' + sortStrings(arr[2]) +'' + sortStrings(arr[3]) +'' + sortStrings(arr[4]) +'' + sortStrings(arr[5]) +'' + sortStrings(arr[6]) +'' + sortStrings(arr[7]);\n    case 9:\n      return sortStrings(arr[0]) +'' + sortStrings(arr[1]) +'' + sortStrings(arr[2]) +'' + sortStrings(arr[3]) +'' + sortStrings(arr[4]) +'' + sortStrings(arr[5]) +'' + sortStrings(arr[6]) +'' + sortStrings(arr[7]) +'' + sortStrings(arr[8]);\n    default:\n      return sortSentences(arr);\n  }\n}\n\nmodule.exports = sort;\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let closestNumbers = []\n  let closestDistances = []\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      let distance = Math.abs(numbers[i] - numbers[j])\n      if (closestDistances.indexOf(distance) == -1) {\n        closestNumbers.push(numbers[i])\n        closestDistances.push(distance)\n      }\n    }\n  }\n  return closestNumbers[0], closestNumbers[1]\n}\n\n// Part 2 - Find the closest pairs in an array\n/*\n  >>> findClosestPairs([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (1.0, 2.0)\n  >>> findClosestPairs([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (1.0, 2.0)\n  >>> findClosestPairs([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0])\n  (1.0, 2.0)\n  */\nconst findClosestPairs = (numbers) => {\n  let closestPairs = []\n  let closestDistances = []\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      let distance = Math.abs(numbers[i] - numbers[j])\n      if (closestDistances.indexOf(distance) == -1) {\n        closestPairs.push([numbers[i], numbers[j]])\n        closestDistances.push(distance)\n      }\n    }\n  }\n  return closestPairs\n}\n\nmodule.exports = {\n  findClosestElements,\n  findClosestPairs\n}\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  return [\n   ...numbers.map((n) => n - min),\n   ...numbers.map((n) => n / max)\n  ];\n};\n\nconst findMostCommon = (a, b) => {\n  let max = 0;\n  let min = Infinity;\n  let maxPos = 0;\n  let minPos = Infinity;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] < b[i]) {\n      if (a[i] < min) {\n        min = a[i];\n        minPos = i;\n      }\n    } else if (a[i] > b[i]) {\n      if (a[i] > max) {\n        max = a[i];\n        maxPos = i;\n      }\n    }\n  }\n  return {\n    max: max,\n    min: min,\n    maxPos: maxPos,\n    minPos: minPos\n  };\n};\n\nconst mergeArrays = (a, b) => {\n  const max = findMostCommon(a, b).max;\n  const min = findMostCommon(a, b).min;\n  let merged = [];\n  for (let i = 0; i < a.length; i++) {\n    if (min[i] < b[i]) {\n      merged.push(min[i]);\n    } else if (max[i] > b[i]) {\n      merged.push(max[i]);\n    } else {\n      merged.push(b[i]);\n    }\n  }\n  return merged;\n};\n\nconst findCommon = (a, b) => {\n  const max = findMostCommon(a, b).max;\n  const min = findMostCommon(a, b).min;\n  let merged = [];\n  for (let i = 0; i < a.length; i++) {\n    if (min[i] < b[i]) {\n      merged.push(min[i]);\n    } else if (max[i] > b[i]) {\n      merged.push(max[i]);\n    } else {\n      merged.push(b[i]);\n    }\n  }\n  return merged;\n};\n\nconst mergeArraysOfArrays = (a, b) => {\n  const max = findMostCommon(a, b).max;\n  const min = findMostCommon(a, b).min;\n  let merged = [];\n  for (let i = 0; i < a.length; i++) {\n    if (min[i] < b[i][0]) {\n      merged.push(min[i]);\n    } else if (max[i] > b[i][0]) {\n      merged.push(max[i]);\n    } else {\n      merged.push(b[i][0]);\n    }\n  }\n  return merged;\n};\n\nconst removeDuplicates = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let prev = sorted[0];\n  let count = 1;\n  let last = sorted[0];\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i]!= last) {\n      prev = sorted[i];\n      count = 1;\n    } else {\n      count++;\n    }\n    last = sorted[i];\n    if (count > 1) {\n      sorted.splice(i - count + 1, count - 1);\n    }\n  }\n  return sorted;\n};\n\nconst convertToBase = (num, base) => {\n  if (num == 0) return '0';\n  let str = num.toString(base);\n  while (str.length < num.toString(10).length) {\n    str = '0' + str;\n  }\n  return str;\n};\n\nconst convertToBase2 = (num) => {\n  if (num == 0) return '0';\n  let str = num.toString(2);\n  while (str.length < num.toString(10).length) {\n    str = '0' + str;\n  }\n  return str;\n};\n\nconst convertToBase10 = (num) => {\n  if (num == 0) return '0';\n  return num.toString(10);\n};\n\nconst convertToBase16 = (num) => {\n  if (num == 0) return '0';\n  return num.toString(16);\n};\n\nconst convertToBase20 = (num) => {\n  if (num == 0) return '0';\n  return num.toString(20);\n};\n\nconst convertToBase62 = (num) => {\n  if (num == 0) return '0';\n  return num.toString(62);\n};\n\nconst convertToBase64 = (num) => {\n  if (num == 0) return '0';\n  return num.toString(64);\n};\n\nmodule.exports = {\n  rescaleToUnit,\n  findMostCommon,\n  mergeArrays,\n  mergeArraysOfArrays,\n  removeDuplicates,\n  convertToBase,\n  convertToBase2,\n  convertToBase10,\n  convertToBase16,\n  convertToBase20,\n  convertToBase62,\n  convertToBase64\n};\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter will give list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter will give list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => typeof value === 'number' && Number.isInteger(value))\n}\n\n/*\n  >>> filterStrings(['a', 3.14, 5])\n  [3.14]\n  >>> filterStrings(['a', 3.14, 'a', 5])\n  [3.14]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  >>> filterStrings(['a', 'b', 'c', 'd', 'e'])\n  ['a', 'b', 'c', 'd', 'e']\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => typeof value ==='string')\n}\n\n/*\n  >>> filterBools(['a', 3.14, 5])\n  [5]\n  >>> filterBools(['a', 3.14, 'a', 5])\n  [5]\n  >>> filterBools([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  >>> filterBools(['a', 'b', 'c', 'd', 'e'])\n  ['a', 'b', 'c', 'd', 'e']\n  */\nconst filterBools = (values) => {\n  return values.filter((value) => typeof value === 'boolean')\n}\n\n/*\n  >>> filterDictionaries(['a', 3.14, 5])\n  [{}]\n  >>> filterDictionaries(['a', 3.14, 'a', 5])\n  [{}]\n  >>> filterDictionaries([1, 2, 3, 'abc', {}, []])\n  [{}]\n  >>> filterDictionaries(['a', 'b', 'c', 'd', 'e'])\n  ['a', 'b', 'c', 'd', 'e']\n  */\nconst filterDictionaries = (values) => {\n  return values.filter((value) => typeof value === 'object')\n}\n\n/*\n  >>> filterLists(['a', 3.14, 5])\n  []\n  >>> filterLists(['a', 3.14, 'a', 5])\n  []\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  []\n  >>> filterLists(['a', 'b', 'c', 'd', 'e'])\n  ['a', 'b', 'c', 'd', 'e']\n  */\nconst filterLists = (values) => {\n  return values.filter((value) => Array.isArray(value))\n}\n\n/*\n  >>> filterNones(['a', 3.14, 5])\n  [5]\n  >>> filterNones(['a', 3.14, 'a', 5])\n  [5]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  >>> filterNones(['a', 'b', 'c', 'd', 'e'])\n  ['a', 'b', 'c', 'd', 'e']\n  */\nconst filterNones = (values) => {\n  return values.filter((value) => value!== null)\n}\n\n/*\n  >>> filterNumbers(['a', 3.14, 5])\n  [3.14]\n  >>> filterNumbers(['a', 3.14, 'a', 5])\n  [3.14]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  >>> filterNumbers(['a', 'b', 'c', 'd', 'e'])\n  ['a', 'b', 'c', 'd', 'e']\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => typeof value === 'number')\n}\n\n/*\n  >>> filterNulls(['a', 3.14, 5])\n  [5]\n  >>> filterNulls(['a', 3.14, 'a', 5])\n  [5]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  >>> filterNulls(['a', 'b', 'c', 'd', 'e'])\n  ['a', 'b', 'c', 'd', 'e']\n  */\nconst filterNulls = (values) => {\n  return values.filter((value) => value!== null)\n}\n\n/*\n  >>> filter(filterIntegers, ['a', 3.14, 5])\n  [5]\n  >>> filter(filterIntegers, ['a', 3.14, 'a', 5])\n  [5]\n  >>> filter(filterIntegers, [1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  >>> filter(filterIntegers, ['a', 'b', 'c', 'd', 'e'])\n  ['a', 'b', 'c', 'd', 'e']\n  */\nconst filter = (filterFunction, values) => {\n  return values.filter(filterFunction)\n}\n\nmodule.exports = {\n  filterIntegers,\n  filterStrings,\n  filterBools,\n  filterDictionaries,\n  filterLists,\n  filterNones,\n  filterNumbers,\n  filterNulls,\n  filter\n}\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let count = 0;\n  while (string.length) {\n    count += 1;\n    string = string.slice(1);\n  }\n  return count;\n};\n\n/**\n  * Return a new string made from concatenating\n  * the given strings\n  *\n  * @param {...string} strings\n  * @return {string}\n  */\nconst concat = (...strings) => {\n  let result = '';\n  for (let string of strings) {\n    result += string;\n  }\n  return result;\n};\n\n/**\n  * Return a new string made from the given\n  * strings, replacing occurrences of the\n  * given string with the given replacement\n  *\n  * @param {string} string\n  * @param {string} replacement\n  * @param {...string} strings\n  * @return {string}\n  */\nconst replace = (string, replacement,...strings) => {\n  let result = string;\n  for (let string of strings) {\n    result = result.replace(string, replacement);\n  }\n  return result;\n};\n\n/**\n  * Return a new string made from the given\n  * strings, replacing occurrences of the\n  * given string with the given replacement\n  *\n  * @param {string} string\n  * @param {string} replacement\n  * @param {...string} strings\n  * @return {string}\n  */\nconst replace_all = (string, replacement,...strings) => {\n  let result = string;\n  for (let string of strings) {\n    result = result.replace(string, replacement);\n  }\n  return result;\n};\n\n/**\n  * Return a new string made from the given\n  * strings, replacing occurrences of the\n  * given regular expression with the given\n  * replacement\n  *\n  * @param {RegExp} regex\n  * @param {string} replacement\n  * @param {...string} strings\n  * @return {string}\n  */\nconst replace_all_regex = (regex, replacement,...strings) => {\n  let result = '';\n  for (let string of strings) {\n    let m = regex.exec(string);\n    if (m) {\n      result += m[0];\n      result += replacement;\n      regex.lastIndex = 0;\n    } else {\n      result += string;\n    }\n  }\n  return result;\n};\n\n/**\n  * Return a new string made from the given\n  * strings, removing all occurrences of the\n  * given string\n  *\n  * @param {string} string\n  * @param {...string} strings\n  * @return {string}\n  */\nconst remove = (string,...strings) => {\n  let result = '';\n  for (let string of strings) {\n    let index = string.indexOf(string);\n    while (index > -1) {\n      result += string.slice(0, index);\n      string = string.slice(index + string.length);\n      index = string.indexOf(string);\n    }\n    result += string;\n  }\n  return result;\n};\n\n/**\n  * Return a new string made from the given\n  * strings, removing all occurrences of the\n  * given regular expression\n  *\n  * @param {RegExp} regex\n  * @param {...string} strings\n  * @return {string}\n  */\nconst remove_all_regex = (regex,...strings) => {\n  let result = '';\n  for (let string of strings) {\n    let m = regex.exec(string);\n    if (m) {\n      result += string.slice(0, m.index);\n      regex.lastIndex = 0;\n    } else {\n      result += string;\n    }\n  }\n  return result;\n};\n\n/**\n  * Return a new string made from the given\n  * strings, removing all occurrences of the\n  * given character\n  *\n  * @param {string} string\n  * @param {...string} strings\n  * @return {string}\n  */\nconst remove_char = (string,...strings) => {\n  let result = '';\n  for (let string of strings) {\n    let index = string.indexOf(string);\n    while (index > -1) {\n      result += string.slice(0, index);\n      string = string.slice(index + 1);\n      index = string.indexOf(string);\n    }\n    result += string;\n  }\n  return result;\n};\n\nmodule.exports = {\n  strlen,\n  concat,\n  replace,\n  replace_all,\n  replace_all_regex,\n  remove,\n  remove_char,\n  remove_all_regex,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n > divisor) {\n    if (n % divisor === 0) {\n      return divisor;\n    }\n    divisor++;\n  }\n  return n;\n};\n\n/**\n  * Given a number, returns the largest number that is a power of 2\n  * @param {number} n\n  * @return {number}\n  * @example\n  * largestPowerOfTwo(2)\n  * // 2\n  * largestPowerOfTwo(4)\n  * // 2\n  * largestPowerOfTwo(8)\n  * // 4\n  * largestPowerOfTwo(16)\n  * // 4\n  */\nconst largestPowerOfTwo = (n) => {\n  let largestPower = 2;\n  while (largestPower < n) {\n    largestPower = largestDivisor(largestPower * largestPower);\n  }\n  return largestPower;\n};\n\nconst largestProduct = (n) => {\n  let largestProduct = 1;\n  while (n > largestProduct) {\n    if (largestProduct % n === 0) {\n      return largestProduct;\n    }\n    largestProduct = largestProduct * largestDivisor(largestProduct);\n  }\n  return largestProduct;\n};\n\nconst largestSum = (n) => {\n  let largestSum = 1;\n  while (n > largestSum) {\n    if (largestSum % n === 0) {\n      return largestSum;\n    }\n    largestSum = largestSum + largestProduct(largestSum);\n  }\n  return largestSum;\n};\n\nconst isPrime = (n) => {\n  if (n === 2) {\n    return true;\n  }\n  if (n < 2) {\n    return false;\n  }\n  if (n === 1 || n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst largestPossiblePrime = (n) => {\n  while (n > largestSum(n)) {\n    if (isPrime(n)) {\n      return n;\n    }\n    n -= largestProduct(n);\n  }\n  return largestSum(n);\n};\n\nexport { largestDivisor, largestPowerOfTwo, largestProduct, largestSum, largestPossiblePrime };\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const prime = prime_sieve(n)\n  const factors = prime.filter((p) => { return n % p === 0 })\n  const factor_count = factors.reduce((acc, f) => acc + (n / f), 0)\n  return factors.map((p) => factor_count)\n}\n\nmodule.exports = factorize\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNums = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    if (newNums.indexOf(numbers[i]) === -1) {\n      newNums.push(numbers[i]);\n    }\n  }\n  return newNums;\n};\n\nconst removeDuplicatesTest = () => {\n  console.log('removeDuplicatesTest');\n  let nums = [1, 2, 3, 2, 4];\n  console.log(removeDuplicates(nums));\n};\n\nremoveDuplicatesTest();\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a will give string, will flip lowercase characters to uppercase and will uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a will give string, will flip lowercase characters to uppercase and will uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase()\n   .replace(/\\b(a|e|i|o|u|A|E|I|O|U)(\\b)/g, (match, upper) => upper)\n   .replace(/\\b(A|E|I|O|U)(\\b)/g, (match, upper) => upper.toLowerCase())\n   .replace(/\\b(a|e|i|o|u)(\\b)/g, (match, upper) => upper.toUpperCase())\n   .replace(/\\b(O|U)(\\b)/g, (match, upper) => upper.toUpperCase())\n}\n\n/*\n  # Remove all spaces, tabs, and newlines from string.\n  >>> removeSpaces(' hello world ')\n  'hello world'\n  >>> removeSpaces(' hello world\\n')\n  'hello world'\n  */\nconst removeSpaces = (string) => string.replace(/\\s/g, '')\n\n/*\n  # Converts a string to lowercase.\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  */\nconst lowerCase = (string) => string.toLowerCase()\n\n/*\n  # Converts a string to uppercase.\n  >>> upperCase('HELLO')\n  'HELLO'\n  >>> upperCase('HELLO')\n  'HELLO'\n  */\nconst upperCase = (string) => string.toUpperCase()\n\n/*\n  # Converts a string to camelCase.\n  >>> camelCase('helloWorld')\n  'helloWorld'\n  >>> camelCase('helloWorld')\n  'helloWorld'\n  */\nconst camelCase = (string) => string.replace(/\\s+/g, '')\n .replace(/-([a-z])/g, (match, $1) => $1.toUpperCase())\n .replace(/([A-Z])/g, (match, $1) => $1.toLowerCase())\n\n/*\n  # Converts a string to snakeCase.\n  >>> snakeCase('HelloWorld')\n  'hello_world'\n  >>> snakeCase('HelloWorld')\n  'hello_world'\n  >>> snakeCase('HelloWorld')\n  'hello_world'\n  >>> snakeCase('HelloWorld')\n  'hello_world'\n  */\nconst snakeCase = (string) => string.replace(/\\s+/g, '')\n .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\n .replace(/([A-Z]+)([A-Z][a-z\\d]*)/g, '$1_$2')\n .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\n .replace(/([A-Z]+)([A-Z])/g, '$1_$2')\n .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\n .replace(/([A-Z])/g, '_$1')\n .replace(/([A-Z\\d])/g, '_$1')\n\n/*\n  # Converts a string to pascalCase.\n  >>> pascalCase('helloWorld')\n  'HelloWorld'\n  >>> pascalCase('helloWorld')\n  'HelloWorld'\n  >>> pascalCase('helloWorld')\n  'HelloWorld'\n  >>> pascalCase('helloWorld')\n  'HelloWorld'\n  */\nconst pascalCase = (string) => string.replace(/\\s+/g, '')\n .replace(/([a-z\\d])([A-Z])/g, '$1 $2')\n .replace(/([A-Z]+)([A-Z])/g, '$1 $2')\n .replace(/([a-z\\d])([A-Z])/g, '$1 $2')\n .replace(/([A-Z]+)([A-Z])/g, '$1 $2')\n .replace(/([a-z\\d])([A-Z])/g, '$1 $2')\n .replace(/([A-Z])/g, '$1')\n .replace(/([A-Z\\d])/g, '$1')\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  const concatenated = strings.reduce((acc, str) => acc + str, '');\n  return concatenated;\n};\n\n/**\n  * Concatenates the strings in a list\n  * @param {List} strings\n  * @returns {string}\n  */\nconst concatenateList = (strings) => {\n  const concatenated = concatenate(strings);\n  return concatenated;\n};\n\nconst concatenate = (strings) => {\n  const concatenated = concatenateList(strings);\n  return concatenated;\n};\n\nmodule.exports = concatenate;\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = [];\n  strings.forEach(s => {\n    if (s.startsWith(prefix)) {\n      filtered.push(s);\n    }\n  });\n  return filtered;\n};\n\n// --------------------------------------------------\n// Filter an input list of strings only for ones that will end with a will give suffix.\n// --------------------------------------------------\nconst filterBySuffix = (strings, suffix) => {\n  const filtered = [];\n  strings.forEach(s => {\n    if (s.endsWith(suffix)) {\n      filtered.push(s);\n    }\n  });\n  return filtered;\n};\n\n// --------------------------------------------------\n// Filter an input list of strings only for ones that will start with a will give prefix and end with a will give suffix.\n// --------------------------------------------------\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  const filtered = [];\n  strings.forEach(s => {\n    if (s.startsWith(prefix) && s.endsWith(suffix)) {\n      filtered.push(s);\n    }\n  });\n  return filtered;\n};\n\n// --------------------------------------------------\n// Get the index of the longest string in a list of strings\n// --------------------------------------------------\nconst longestStringIndex = (strings) => {\n  const longest = 0;\n  strings.forEach(s => {\n    if (s.length > longest) {\n      longest = s.length;\n    }\n  });\n  return longest;\n};\n\n// --------------------------------------------------\n// Get the index of the shortest string in a list of strings\n// --------------------------------------------------\nconst shortestStringIndex = (strings) => {\n  const shortest = 0;\n  strings.forEach(s => {\n    if (s.length < shortest) {\n      shortest = s.length;\n    }\n  });\n  return shortest;\n};\n\n// --------------------------------------------------\n// Get the index of the most common string in a list of strings\n// --------------------------------------------------\nconst commonStringIndex = (strings) => {\n  const common = 0;\n  strings.forEach(s => {\n    if (strings.indexOf(s) > common) {\n      common = strings.indexOf(s);\n    }\n  });\n  return common;\n};\n\n// --------------------------------------------------\n// Get the index of the most common string in a list of strings\n// --------------------------------------------------\nconst commonStringIndex2 = (strings) => {\n  const common = 0;\n  strings.forEach(s => {\n    if (strings.indexOf(s) > common) {\n      common = strings.indexOf(s);\n    }\n  });\n  return common;\n};\n\n// --------------------------------------------------\n// Get the index of the most common string in a list of strings\n// --------------------------------------------------\nconst commonStringIndex3 = (strings) => {\n  const common = 0;\n  strings.forEach(s => {\n    if (strings.indexOf(s) > common) {\n      common = strings.indexOf(s);\n    }\n  });\n  return common;\n};\n\n// --------------------------------------------------\n// Get the index of the most common string in a list of strings\n// --------------------------------------------------\nconst commonStringIndex4 = (strings) => {\n  const common = 0;\n  strings.forEach(s => {\n    if (strings.indexOf(s) > common) {\n      common = strings.indexOf(s);\n    }\n  });\n  return common;\n};\n\n// --------------------------------------------------\n// Get the index of the most common string in a list of strings\n// --------------------------------------------------\nconst commonStringIndex5 = (strings) => {\n  const common = 0;\n  strings.forEach(s => {\n    if (strings.indexOf(s) > common) {\n      common = strings.indexOf(s);\n    }\n  });\n  return common;\n};\n\n// --------------------------------------------------\n// Get the index of the most common string in a list of strings\n// --------------------------------------------------\nconst commonStringIndex6 = (strings) => {\n  const common = 0;\n  strings.forEach(s => {\n    if (strings.indexOf(s) > common) {\n      common = strings.indexOf(s);\n    }\n  });\n  return common;\n};\n\n// --------------------------------------------------\n// Get the index of the most common string in a list of strings\n// --------------------------------------------------\nconst commonStringIndex7 = (strings) => {\n  const common = 0;\n  strings.forEach(s => {\n    if (strings.indexOf(s) > common) {\n      common = strings.indexOf(s);\n    }\n  });\n  return common;\n};\n\n// --------------------------------------------------\n// Get the index of the most common string in a list of strings\n// --------------------------------------------------\nconst commonStringIndex8 = (strings) => {\n  const common = 0;\n  strings.forEach(s => {\n    if (strings.indexOf(s) > common) {\n      common = strings.indexOf(s);\n    }\n  });\n  return common;\n};\n\n// --------------------------------------------------\n// Get the index of the most common string in a list of strings\n// --------------------------------------------------\nconst commonStringIndex9 = (strings) => {\n  const common = 0;\n  strings.forEach(s => {\n    if (strings.indexOf(s) > common) {\n      common = strings.indexOf(s);\n    }\n  });\n  return common;\n};\n\n// --------------------------------------------------\n// Get the index of the most common string in a list of strings\n// --------------------------------------------------\nconst commonStringIndex10 = (strings) => {\n  const common = 0;\n  strings.forEach(s => {\n    if (strings.indexOf(s) > common) {\n      common = strings.indexOf(s);\n    }\n  });\n  return common;\n};\n\n// --------------------------------------------------\n// Get the index of the most common string in a list of strings\n// --------------------------------------------------\nconst commonStringIndex11 = (strings) => {\n  const common = 0;\n  strings.forEach(s => {\n    if (strings.indexOf(s) > common) {\n      common ="}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0)\n}\n\n// ###############################\n// ##   HELPER FUNCTIONS   ##\n// ###############################\n\n/* Return true if every element in the list is even.\n  >>> everyEven([2, 4, 6, 8, 10])\n  False\n  >>> everyEven([2, 4, 6, 8, 10, 2])\n  True\n  >>> everyEven([1, 3, 5, 7, 9])\n  False\n  >>> everyEven([1, 2, 3, 4, 5])\n  True\n  */\nconst everyEven = (l) => {\n  return l.every((n) => n % 2 === 0)\n}\n\n/* Return true if every element in the list is odd.\n  >>> everyOdd([2, 4, 6, 8, 10])\n  True\n  >>> everyOdd([2, 4, 6, 8, 10, 2])\n  False\n  >>> everyOdd([1, 3, 5, 7, 9])\n  False\n  >>> everyOdd([1, 2, 3, 4, 5])\n  False\n  */\nconst everyOdd = (l) => {\n  return l.every((n) => n % 2!== 0)\n}\n\n/* Return true if every element in the list is prime.\n  >>> everyPrime([2, 4, 6, 8, 10])\n  True\n  >>> everyPrime([2, 4, 6, 8, 10, 2])\n  False\n  >>> everyPrime([1, 3, 5, 7, 9])\n  False\n  >>> everyPrime([1, 2, 3, 4, 5])\n  False\n  */\nconst everyPrime = (l) => {\n  return l.every((n) => {\n    for (let i = 2; i < n; i++) {\n      if (n % i === 0) {\n        return false\n      }\n    }\n    return true\n  })\n}\n\n/* Return the length of the longest sublist with at least n elements.\n  >>> lengthOfLongestSublist(3, [1, 2, 3])\n  3\n  >>> lengthOfLongestSublist(3, [1, 2, 3, 4])\n  4\n  >>> lengthOfLongestSublist(3, [1, 2, 3, 4, 5])\n  4\n  >>> lengthOfLongestSublist(3, [1, 2, 3, 4, 5, 6])\n  5\n  >>> lengthOfLongestSublist(3, [1, 2, 3, 4, 5, 6, 7, 8])\n  6\n  >>> lengthOfLongestSublist(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  7\n  */\nconst lengthOfLongestSublist = (n, l) => {\n  let i = 1\n  let j = 0\n  let max = 0\n  for (i = 0; i < l.length; i++) {\n    j = i + 1\n    while (j < l.length) {\n      if (n === l[j]) {\n        if (j - i > max) {\n          max = j - i\n        }\n        j++\n      } else {\n        break\n      }\n    }\n  }\n  return max\n}\n\n/* Return the length of the shortest sublist with at least n elements.\n  >>> lengthOfShortestSublist(3, [1, 2, 3])\n  1\n  >>> lengthOfShortestSublist(3, [1, 2, 3, 4])\n  2\n  >>> lengthOfShortestSublist(3, [1, 2, 3, 4, 5])\n  2\n  >>> lengthOfShortestSublist(3, [1, 2, 3, 4, 5, 6])\n  2\n  >>> lengthOfShortestSublist(3, [1, 2, 3, 4, 5, 6, 7, 8])\n  3\n  >>> lengthOfShortestSublist(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  4\n  */\nconst lengthOfShortestSublist = (n, l) => {\n  let i = 1\n  let j = 0\n  let min = 0\n  for (i = 0; i < l.length; i++) {\n    j = i + 1\n    while (j < l.length) {\n      if (n === l[j]) {\n        if (j - i < min) {\n          min = j - i\n        }\n        j++\n      } else {\n        break\n      }\n    }\n  }\n  return min\n}\n\n// ###############################\n// ##   EXERCISE   ##\n// ###############################\n\n/*\nWrite a function to return the sum of all the elements in the list\n*/\nconst sum = (l) => {\n  return l.reduce((a, b) => a + b, 0)\n}\n\n/*\nWrite a function to return the product of all the elements in the list\n*/\nconst product = (l) => {\n  return l.reduce((a, b) => a * b, 1)\n}\n\n/*\nWrite a function to return the mean of all the elements in the list\n*/\nconst mean = (l) => {\n  return sum(l) / l.length\n}\n\n/*\nWrite a function to return the median of all the elements in the list\n*/\nconst median = (l) => {\n  let i = 0\n  let j = 0\n  let m = 0\n  let n = 0\n  let k = 0\n  let z = 0\n  l.sort()\n  for (i = 0; i < l.length; i++) {\n    for (j = i + 1; j < l.length; j++) {\n      m = (l[i] + l[j]) / 2\n      n = l[i]\n      if (l[i] < m) {\n        n = l[j]\n      }\n      z = (n + m) / 2\n      if (l[i]"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a will give number will be prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a will give number will be prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 2) {\n    return true\n  }\n  if (n === 1) {\n    return false\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  let a = Math.sqrt(n)\n  for (let i = 3; i <= a; i += 2) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nexport {\n  isPrime\n}\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  if (xs.length % 2 === 0) {\n    let max = 0, index = 0;\n    for (let i = 0; i < xs.length; i++) {\n      if (xs[i] > 0 && xs[i] > max) {\n        max = xs[i];\n        index = i;\n      }\n    }\n    return -1 * (max / xs[index]);\n  }\n  return -1;\n}\n\n/* \n   Given a list of integers, \n   returns a list of elements such that all elements are greater than the \n   given number.\n   >>> [1, 3, 5, 6, 7, 9] \n   >>> [x for x in range(10) if x > 5]\n   [6, 7, 9]\n  */\nconst greaterThan = (xs, number) => {\n  return xs.filter(x => x > number);\n}\n\n/* \n   Given a list of integers, \n   returns a list of elements such that all elements are less than the \n   given number.\n   >>> [1, 3, 5, 6, 7, 9] \n   >>> [x for x in range(10) if x < 5]\n   [1, 3, 5]\n  */\nconst lessThan = (xs, number) => {\n  return xs.filter(x => x < number);\n}\n\n/* \n   Given a list of integers, \n   returns a list of elements such that all elements are greater than or \n   equal to the given number.\n   >>> [1, 3, 5, 6, 7, 9] \n   >>> [x for x in range(10) if x >= 5]\n   [5, 6, 7, 9]\n  */\nconst greaterThanOrEqual = (xs, number) => {\n  return xs.filter(x => x >= number);\n}\n\n/* \n   Given a list of integers, \n   returns a list of elements such that all elements are less than or \n   equal to the given number.\n   >>> [1, 3, 5, 6, 7, 9] \n   >>> [x for x in range(10) if x <= 5]\n   [1, 3, 5]\n  */\nconst lessThanOrEqual = (xs, number) => {\n  return xs.filter(x => x <= number);\n}\n\n/* \n   Given a list of integers, \n   returns a list of elements such that all elements are odd.\n   >>> [1, 3, 5, 7, 9]\n   >>> [x for x in range(10) if x % 2 == 1]\n   [1, 3, 5, 7, 9]\n  */\nconst odd = (xs) => {\n  return xs.filter(x => x % 2 === 1);\n}\n\n/* \n   Given a list of integers, \n   returns a list of elements such that all elements are even.\n   >>> [1, 3, 5, 7, 9]\n   >>> [x for x in range(10) if x % 2 == 0]\n   [2, 4, 6, 8]\n  */\nconst even = (xs) => {\n  return xs.filter(x => x % 2 === 0);\n}\n\n/* \n   Given a list of integers, \n   returns a list of elements such that all elements are divisible by \n   the given number.\n   >>> [1, 3, 5, 7, 9] \n   >>> [x for x in range(10) if x % 3 == 0]\n   [1, 3, 5, 7, 9]\n  */\nconst divisibleBy = (xs, number) => {\n  return xs.filter(x => x % number === 0);\n}\n\nconst main = () => {\n  /*\n    Given a list of integers,\n    returns a list of elements such that all elements are greater than or \n    equal to the given number.\n    >>> [1, 3, 5, 6, 7, 9] \n    >>> [x for x in range(10) if x >= 5]\n    [5, 6, 7, 9]\n  */\n  let numbers = [1, 3, 5, 6, 7, 9];\n  let results = [];\n  for (let i = 0; i < numbers.length; i++) {\n    results.push(greaterThanOrEqual(numbers, numbers[i]));\n  }\n  console.log(results);\n}\n\nmain();<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the indicies that will be not divisible by three, while its values at the indicies that will be divisible by three will be equal \n   to the values of the corresponding indicies of l, but will sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the indicies that will be not divisible by three, while its values at the indicies that will be divisible by three will be equal \n   to the values of the corresponding indicies of l, but will sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n    const newlist = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 3 === 0) {\n            newlist.push(l[i]);\n        }\n    }\n    for (let j = 0; j < newlist.length; j++) {\n        for (let k = j + 1; k < newlist.length; k++) {\n            if (newlist[j] > newlist[k]) {\n                const t = newlist[j];\n                newlist[j] = newlist[k];\n                newlist[k] = t;\n            }\n        }\n    }\n    return newlist;\n}\n\n/*\n  >>> sortThird([3, 1, 6, 9, 2, 5, 4])\n  [1, 2, 3, 4, 5, 6, 9]\n  >>> sortThird([7, 8, 6, 5, 3, 2, 1])\n  [1, 2, 3, 5, 6, 7, 8]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [1, 2, 3, 4, 5, 6, 7"}
{"task_id": "JavaScript/34", "prompt": "/*Return will sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return will sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return (list) => {\n    return (Array.isArray(list))? list.filter((v, i, a) => a.indexOf(v) === i) : [];\n  };\n};\n\nmodule.exports = unique;<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = Math.max(...l);\n  return max;\n};\n\n/**\n  * Return the minimum element in the list.\n  * @param {Array} l\n  * @return {number}\n  * @example\n  * //import {minElement} from 'utilities/listUtils.js';\n  * //import {maxElement} from 'utilities/listUtils.js';\n  *\n  * //Return minimum element in the list.\n  * const minElement = [1, 2, 3, 5];\n  * const min = minElement[0];\n  *\n  * //Return minimum element in the list.\n  * const max = maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]);\n  *\n  * //Return minimum element in the list.\n  * const min = minElement([1, 2, 3, 5]);\n  */\nconst minElement = (l) => {\n  const min = Math.min(...l);\n  return min;\n};\n\n/**\n  * Return the median of the list.\n  * @param {Array} l\n  * @return {number}\n  * @example\n  * //import {median} from 'utilities/listUtils.js';\n  *\n  * //Return the median of the list.\n  * const median = median([1, 2, 3, 5]);\n  */\nconst median = (l) => {\n  const half = Math.floor(l.length / 2);\n  const a = l[0];\n  const b = l[half];\n  const c = l[l.length - 1];\n  return (a + b) / 2;\n};\n\n/**\n  * Return the arithmetic mean of the list.\n  * @param {Array} l\n  * @return {number}\n  * @example\n  * //import {mean} from 'utilities/listUtils.js';\n  *\n  * //Return the arithmetic mean of the list.\n  * const mean = mean([1, 2, 3, 5]);\n  */\nconst mean = (l) => {\n  return sum(l) / l.length;\n};\n\n/**\n  * Return the sum of the list.\n  * @param {Array} l\n  * @return {number}\n  * @example\n  * //import {sum} from 'utilities/listUtils.js';\n  *\n  * //Return the sum of the list.\n  * const sum = sum([1, 2, 3, 5]);\n  */\nconst sum = (l) => {\n  return l.reduce((a, b) => a + b);\n};\n\n/**\n  * Return the number of elements in the list.\n  * @param {Array} l\n  * @return {number}\n  * @example\n  * //import {length} from 'utilities/listUtils.js';\n  *\n  * //Return the number of elements in the list.\n  * const length = length([1, 2, 3, 5]);\n  */\nconst length = (l) => {\n  return l.length;\n};\n\nexport {\n  median,\n  mean,\n  sum,\n  length,\n  minElement,\n  maxElement\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n    let i = 1;\n    while (n > 0) {\n        if (n % 11 === 0 || n % 13 === 0) {\n            console.log(n);\n            i++;\n        }\n        n = n - (n % 11);\n        n = n - (n % 13);\n    }\n    return i;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  return l.sort((a, b) => a % 2 === b % 2? a : b);\n};\n\n/*\n  This function will take a list l and will return a list l' such that \n  l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n  to the values of the odd indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [2, 1, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [6, 5, 4, 3]\n  */\nconst sortEvenRev = (l) => {\n  return l.sort((a, b) => a % 2 === b % 2? b : a);\n};\n\n/*\n  This function will take a list l and will return a list l' such that \n  l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n  to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 4, 3]\n  */\nconst sortOdd = (l) => {\n  return l.sort((a, b) => a % 2 === b % 2? a : b);\n};\n\n/*\n  This function will take a list l and will return a list l' such that \n  l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n  to the values of the odd indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [2, 1, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOddRev = (l) => {\n  return l.sort((a, b) => a % 2 === b % 2? b : a);\n};\n\nconst sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\nconst average = (nums) => {\n  let avg = sum(nums) / nums.length;\n  return avg;\n};\n\nconst isNumber = (x) => {\n  return!isNaN(x);\n};\n\nconst sortByLength = (list) => {\n  return list.sort((a, b) => {\n    return b.length - a.length;\n  });\n};\n\nconst findDuplicate = (list) => {\n  let duplicates = [];\n  let currentIndex = 0;\n  let length = list.length;\n  while (currentIndex < length) {\n    if (list[currentIndex] === list[currentIndex + 1]) {\n      duplicates.push(list[currentIndex]);\n      currentIndex++;\n    } else {\n      currentIndex++;\n    }\n  }\n  return duplicates;\n};\n\nconst findDuplicateRev = (list) => {\n  let duplicates = [];\n  let currentIndex = list.length - 1;\n  while (currentIndex >= 0) {\n    if (list[currentIndex] === list[currentIndex - 1]) {\n      duplicates.push(list[currentIndex]);\n      currentIndex--;\n    } else {\n      currentIndex--;\n    }\n  }\n  return duplicates;\n};\n\nconst findDuplicate2 = (list) => {\n  let currentIndex = 0;\n  let length = list.length;\n  while (currentIndex < length) {\n    if (list[currentIndex] === list[currentIndex + 1]) {\n      return list[currentIndex];\n    }\n    currentIndex++;\n  }\n  return undefined;\n};\n\nconst findDuplicateRev2 = (list) => {\n  let currentIndex = list.length - 1;\n  while (currentIndex >= 0) {\n    if (list[currentIndex] === list[currentIndex - 1]) {\n      return list[currentIndex];\n    }\n    currentIndex--;\n  }\n  return undefined;\n};\n\nconst findDuplicate3 = (list) => {\n  let currentIndex = 0;\n  let length = list.length;\n  while (currentIndex < length) {\n    if (list[currentIndex] === list[currentIndex + 1] && list[currentIndex] === list[currentIndex + 2]) {\n      return list[currentIndex];\n    }\n    currentIndex++;\n  }\n  return undefined;\n};\n\nconst findDuplicateRev3 = (list) => {\n  let currentIndex = list.length - 1;\n  while (currentIndex >= 0) {\n    if (list[currentIndex] === list[currentIndex - 1] && list[currentIndex] === list[currentIndex - 2]) {\n      return list[currentIndex];\n    }\n    currentIndex--;\n  }\n  return undefined;\n};\n\nmodule.exports = {\n  sortEven,\n  sortEvenRev,\n  sortOdd,\n  sortOddRev,\n  sum,\n  average,\n  isNumber,\n  findDuplicate,\n  findDuplicateRev,\n  findDuplicate2,\n  findDuplicateRev2,\n  findDuplicate3,\n  findDuplicateRev3,\n  sortByLength,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){\n     if (group.length== 3){ \n       groups.push(group.slice(1)+ group[0]);\n     } else {\n       groups.push(group);\n     }\n  } \n   return groups.join('');\n}\n\n/*\n   encode string. Returns string.\n  */ \n const encode= (s)=>{\n   return encodeCyclic(s)\n}\n\n/*\n   decode string. Returns string.\n  */ \n const decode= (s)=>{\n   return decodeCyclic(s)\n}\n\n\n/*\n   decode string. Returns string.\n  */ \n const decode_cyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){\n     if (group.length== 3){ \n       groups.push(group.slice(1)+ group[0]);\n     } else {\n       groups.push(group);\n     }\n  } \n   return groups.join('');\n}\n\n/*\n   decode string. Returns string.\n  */ \n const decode_cyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){\n     if (group.length== 3){ \n       groups.push(group.slice(1)+ group[0]);\n     } else {\n       groups.push(group);\n     }\n  } \n   return groups.join('');\n}\n\n/*\n   decode string. Returns string.\n  */ \n const decode_cyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){\n     if (group.length== 3){ \n       groups.push(group.slice(1)+ group[0]);\n     } else {\n       groups.push(group);\n     }\n  } \n   return groups.join('');\n}\n\n/*\n   decode string. Returns string.\n  */ \n const decode_cyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){\n     if (group.length== 3){ \n       groups.push(group.slice(1)+ group[0]);\n     } else {\n       groups.push(group);\n     }\n  } \n   return groups.join('');\n}\n\n/*\n   decode string. Returns string.\n  */ \n const decode_cyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){\n     if (group.length== 3){ \n       groups.push(group.slice(1)+ group[0]);\n     } else {\n       groups.push(group);\n     }\n  } \n   return groups.join('');\n}\n\n/*\n   decode string. Returns string.\n  */ \n const decode_cyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){\n     if (group.length== 3){ \n       groups.push(group.slice(1)+ group[0]);\n     } else {\n       groups.push(group);\n     }\n  } \n   return groups.join('');\n}\n\n\n/*\n   decode string. Returns string.\n  */ \n const decode_cyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){\n     if (group.length== 3){ \n       groups.push(group.slice(1)+ group[0]);\n     } else {\n       groups.push(group);\n     }\n  } \n   return groups.join('');\n}\n\n\n/*\n   decode string. Returns string.\n  */ \n const decode_cyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){\n     if (group.length== 3){ \n       groups.push(group.slice(1)+ group[0]);\n     } else {\n       groups.push(group);\n     }\n  } \n   return groups.join('');\n}\n\n/*\n   decode string. Returns string.\n  */ \n const decode_cyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){\n     if (group.length== 3){ \n       groups.push(group.slice(1)+ group[0]);\n     } else {\n       groups.push(group);\n     }\n  } \n   return groups.join('');\n}\n\n\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    let n1 = 1;\n    let n2 = 2;\n    let fib = n;\n    let i = 3;\n\n    while (i < fib) {\n        n1 = n2;\n        n2 = n1 + n2;\n        i++;\n    }\n    return n2;\n}\n\nexport default primeFib;<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        const sum = l[i] + l[j] + l[k];\n        if (sum === 0) {\n          res.push(l[i], l[j], l[k]);\n        }\n      }\n    }\n  }\n  return res.length === 3;\n};\n\nexport default triplesSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n  var collisions=0;\n  var car1;\n  var car2;\n  var i;\n  for (i=0; i<n; i++) {\n    car1= {\n      x: Math.random()*100,\n      y: Math.random()*100,\n      vx: Math.random()*10,\n      vy: Math.random()*10\n    };\n    car2= {\n      x: Math.random()*100,\n      y: Math.random()*100,\n      vx: Math.random()*10,\n      vy: Math.random()*10\n    };\n    car1.y= car2.y=0;\n    collisions+=carRaceCollision(car1, car2);\n  }\n  return collisions;\n};\n\n\n/*\n  Given two cars, return the number of collisions that will be \n  encountered in the given time.   Note that collisions will be \n  found only during the time that the cars are moving together. \n  Cars that are not moving together will not be considered as \n  collisions.\n  \n  As with the carRaceCollision function, this function will output \n  the number of collisions in the given time. \n  */\nvar carRaceCollisionTime= (car1, car2)=>{\n  var time=0;\n  var car1Speed=car1.vx*car1.vx+car1.vy*car1.vy;\n  var car2Speed=car2.vx*car2.vx+car2.vy*car2.vy;\n  while (car1Speed>0 && car2Speed>0) {\n    if (car1.x+car1.vx*time>car2.x-car2.vx*time) {\n      time=0;\n    } else {\n      time=time+1;\n    }\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2.x-car2.vx*time;\n    time=time+car1.x+car1.vx*time>car2."}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let newList = []\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1)\n  }\n  return newList\n}\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nmodule.exports = incrList\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pair = [0, 0]\n  for (let i = 0; i < l.length; i++) {\n    pair[0] += l[i]\n    pair[1] += l[i]\n    if (pair[0] < 0) {\n      pair[0] = 0\n    }\n    if (pair[1] < 0) {\n      pair[1] = 0\n    }\n  }\n  return pair[0] === 0 && pair[1] === 0\n}\n\nmodule.exports = pairsSumToZero\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers will be less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers will be less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (x === 0) return '0'\n  let result = ''\n  while (x > 0) {\n    result = (x % base) + result\n    x = Math.floor(x / base)\n  }\n  return result\n}\n\n/*\n  * Converts a number to an english representation.\n  * Input: number, base\n  * Output: string\n  *\n  * base numbers will be less than 10.\n  * >>> convertToEnglish(2)\n  * 'two'\n  * >>> convertToEnglish(8)\n  * 'eight'\n  * >>> convertToEnglish(10)\n  * 'ten'\n  * >>> convertToEnglish(2, 2)\n  * 'two'\n  * >>> convertToEnglish(8, 2)\n  * 'eight'\n  * >>> convertToEnglish(10, 2)\n  * 'ten'\n  * >>> convertToEnglish(20, 2)\n  * 'twenty'\n  * >>> convertToEnglish(200, 2)\n  * 'two hundred'\n  * >>> convertToEnglish(300, 2)\n  * 'three hundred'\n  * >>> convertToEnglish(3000, 2)\n  * 'three thousand'\n  * >>> convertToEnglish(8000, 2)\n  * 'eight thousand'\n  * >>> convertToEnglish(80000, 2)\n  * 'eight million'\n  * >>> convertToEnglish(900000, 2)\n  * 'nine hundred thousand'\n  * >>> convertToEnglish(1000000, 2)\n  * 'one million'\n  * >>> convertToEnglish(9999999, 2)\n  * 'nine hundred and nine thousand and ninety-nine'\n  * >>> convertToEnglish(9999999, 3)\n  * 'nine hundred and nine thousand and ninety-nine thousand'\n  * >>> convertToEnglish(99999, 4)\n  * 'nine hundred and nine thousand and ninety-nine million'\n  * >>> convertToEnglish(10000000, 3)\n  * 'one million'\n  * >>> convertToEnglish(99999, 4)\n  * 'nine hundred and nine thousand and ninety-nine billion'\n  * >>> convertToEnglish(1000000000000, 5)\n  * 'one billion'\n  * >>> convertToEnglish(99999, 4)\n  * 'nine hundred and nine thousand and ninety-nine trillion'\n  * >>> convertToEnglish(100000000000000, 6)\n  * 'one trillion'\n  * >>> convertToEnglish(9999999, 4)\n  * 'nine hundred and nine thousand and ninety-nine quadrillion'\n  * >>> convertToEnglish(100000000000000, 5)\n  * 'one quadrillion'\n  * >>> convertToEnglish(9999999, 4)\n  * 'nine hundred and nine thousand and ninety-nine quintillion'\n  * >>> convertToEnglish(100000000000000, 5)\n  * 'one quintillion'\n  * >>> convertToEnglish(9999999, 4)\n  * 'nine hundred and nine thousand and ninety-nine sextillion'\n  * >>> convertToEnglish(100000000000000, 5)\n  * 'one sextillion'\n  * >>> convertToEnglish(9999999, 4)\n  * 'nine hundred and nine thousand and ninety-nine octillion'\n  * >>> convertToEnglish(100000000000000, 5)\n  * 'one octillion'\n  * >>> convertToEnglish(9999999, 4)\n  * 'nine hundred and nine thousand and ninety-nine nonillion'\n  * >>> convertToEnglish(100000000000000, 5)\n  * 'one nonillion'\n  * >>> convertToEnglish(9999999, 4)\n  * 'nine hundred and nine thousand and ninety-nine decillion'\n  * >>> convertToEnglish(100000000000000, 5)\n  * 'one decillion'\n  * >>> convertToEnglish(9999999, 4)\n  * 'nine hundred and nine thousand and ninety-nine centillion'\n  * >>> convertToEnglish(100000000000000, 5)\n  * 'one centillion'\n  * >>> convertToEnglish(9999999, 4)\n  * 'nine hundred and nine thousand and ninety-nine milliard'\n  * >>> convertToEnglish(100000000000000, 5)\n  * 'one milliard'\n  * >>> convertToEnglish(9999999, 4)\n  * 'nine hundred and nine thousand and ninety-nine billion'\n  * >>> convertToEnglish(100000000000000, 5)\n  * 'one billion'\n  * >>> convertToEnglish(9999999, 4)\n  * 'nine hundred and nine thousand and ninety-nine trillion'\n  * >>> convertToEnglish(100000000000000, 5)\n  * 'one trillion'\n  * >>> convertToEnglish(9999999, 4)\n  * 'nine hundred and nine thousand and ninety-nine quadrillion'\n  * >>> convertToEnglish(100000000000000, 5)\n  * 'one quadrillion'\n  * >>> convertToEnglish(9999999, 4)\n  * 'nine hundred and nine thousand and ninety-nine quintillion'\n  * >>> convertToEnglish(100000000000000, 5)\n  * 'one quintillion'\n  * >>> convertToEnglish(9999999, 4)\n  * 'nine hundred and nine thousand and ninety-nine sextillion'\n  * >>> convertToEnglish(100000000000000, 5)\n  * 'one sextillion'\n  * >>> convertToEnglish(9999999, 4)\n  * 'nine hundred and nine thousand and ninety-nine octillion'\n  * >>> convertToEnglish(100000000000000, 5)\n  * 'one octillion'\n  * >>> convertToEnglish(9999999, 4)\n  * 'nine hundred and nine thousand and ninety-nine nonillion'\n  * >>> convertToEnglish(100000000000000, 5)\n  * 'one nonillion'\n  * >>> convertToEnglish(9999999, 4)\n  * 'nine hundred and nine thousand and ninety-nine decillion'\n  * >>> convertToEnglish(100000000000000, 5)\n  * 'one decillion'\n  * >>> convertToEnglish(9999999, 4)\n  * 'nine hundred and nine thousand and ninety-nine centillion'\n  * >>> convertToEnglish(100000000000000, 5)\n  * 'one centillion'\n  * >>> convertToEnglish(9999999, 4"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": false, "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  if (h === 0) {\n    return a * 0.5\n  } else {\n    return a * (1 - 2 * (h / a))\n  }\n}\n\n/*\nGiven a triangle and the height of one side. Return the area of the triangle.\n*/\nconst findTriangleArea = (triangle, h) => {\n  return triangleArea(triangle[0], h) + triangleArea(triangle[1], h) + triangleArea(triangle[2], h)\n}\n\n/*\nGiven the triangle and the area of one side. Return the height of the tallest side.\n*/\nconst findTriangleHeight = (triangle, a) => {\n  return a / findTriangleArea(triangle, a)\n}\n\n/*\nGiven the triangle and the area of one side. Return the perimeter of the triangle.\n*/\nconst findTrianglePerimeter = (triangle, a) => {\n  return a + findTriangleArea(triangle, a)\n}\n\n/*\nGiven the triangle and the area of one side. Return the length of the longest side.\n*/\nconst findTriangleLongestSide = (triangle, a) => {\n  return Math.max(findTrianglePerimeter(triangle, a), findTriangleHeight(triangle, a))\n}\n\n/*\nGiven the triangle and the area of one side. Return the length of the longest side.\n*/\nconst findTriangleShortestSide = (triangle, a) => {\n  return Math.min(findTrianglePerimeter(triangle, a), findTriangleHeight(triangle, a))\n}\n\n/*\nGiven the triangle and the area of one side. Return the height of the tallest side.\n*/\nconst findTriangleHeightFromArea = (triangle, a) => {\n  return findTriangleHeight(triangle, a) / 2\n}\n\n/*\nGiven the triangle and the area of one side. Return the perimeter of the triangle.\n*/\nconst findTrianglePerimeterFromArea = (triangle, a) => {\n  return 2 * findTrianglePerimeter(triangle, a)\n}\n\n/*\nGiven the triangle and the area of one side. Return the length of the longest side.\n*/\nconst findTriangleLongestSideFromArea = (triangle, a) => {\n  return findTriangleLongestSide(triangle, a) / 2\n}\n\n/*\nGiven the triangle and the area of one side. Return the length of the shortest side.\n*/\nconst findTriangleShortestSideFromArea = (triangle, a) => {\n  return findTriangleShortestSide(triangle, a) / 2\n}\n\n/*\nGiven the triangle and the area of one side. Return the volume of the triangle.\n*/\nconst findTriangleVolume = (triangle, a) => {\n  return a * a * a / 6\n}\n\n/*\nGiven the triangle and the area of one side. Return the area of the triangle.\n*/\nconst findTriangleAreaFromVolume = (triangle, a) => {\n  return a * a * a / 6\n}\n\n/*\nGiven the triangle and the area of one side. Return the volume of the triangle.\n*/\nconst findTriangleVolumeFromArea = (triangle, a) => {\n  return findTriangleVolume(triangle, a) / 3\n}\n\n/*\nGiven the triangle and the area of one side. Return the length of the longest side.\n*/\nconst findTriangleLongestSideFromVolume = (triangle, a) => {\n  return a / findTriangleVolume(triangle, a)\n}\n\n/*\nGiven the triangle and the area of one side. Return the length of the shortest side.\n*/\nconst findTriangleShortestSideFromVolume = (triangle, a) => {\n  return a / findTriangleVolume(triangle, a)\n}\n\n/*\nGiven the triangle and the area of one side. Return the volume of the triangle.\n*/\nconst findTriangleVolumeFromArea = (triangle, a) => {\n  return a * a * a / 6\n}\n\n/*\nGiven the triangle and the area of one side. Return the area of the triangle.\n*/\nconst findTriangleAreaFromVolume = (triangle, a) => {\n  return a * a * a / 6\n}\n\n/*\nGiven the triangle and the area of one side. Return the perimeter of the triangle.\n*/\nconst findTrianglePerimeterFromVolume = (triangle, a) => {\n  return 2 * findTrianglePerimeter(triangle, a)\n}\n\n/*\nGiven the triangle and the area of one side. Return the length of the longest side.\n*/\nconst findTriangleLongestSideFromVolume = (triangle, a) => {\n  return a / findTriangleVolume(triangle, a)\n}\n\n/*\nGiven the triangle and the area of one side. Return the length of the shortest side.\n*/\nconst findTriangleShortestSideFromVolume = (triangle, a) => {\n  return a / findTriangleVolume(triangle, a)\n}\n\n/*\nGiven the triangle and the area of one side. Return the volume of the triangle.\n*/\nconst findTriangleVolumeFromPerimeter = (triangle, a) => {\n  return a * a * a / 6\n}\n\n/*\nGiven the triangle and the area of one side. Return the area of the triangle.\n*/\nconst findTriangleAreaFromPerimeter = (triangle, a) => {\n  return a * a * a / 6\n}\n\n/*\nGiven the triangle and the area of one side. Return the perimeter of the triangle.\n*/\nconst findTrianglePerimeterFromPerimeter = (triangle, a) => {\n  return findTrianglePerimeter(triangle, a)\n}\n\n/*\nGiven the triangle and the area of one side. Return the length of the longest side.\n*/\nconst findTriangleLongestSideFromPerimeter = (triangle, a) => {\n  return findTriangleLongestSide(triangle, a)\n}\n\n/*\nGiven the triangle and the area of one side. Return the length of the shortest side.\n*/\nconst findTriangleShortestSideFromPerimeter = (triangle, a) => {\n  return findTriangleShortestSide(triangle, a)\n}\n\n/*\nGiven the triangle and the area of one side. Return the volume of the triangle.\n*/\nconst findTriangleVolumeFromPerimeter"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib4 number sequence.   will Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib4 number sequence.   will Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if(n === 1) {\n    return 0\n  } else if(n === 2) {\n    return 1\n  } else if(n === 3) {\n    return 1\n  } else if(n === 4) {\n    return 2\n  } else {\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  }\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sorted = sortedArray(l);\n  let size = sorted.length;\n  if (size === 0) {\n    return undefined;\n  }\n  if (size === 1) {\n    return sorted[0];\n  }\n  if (size % 2 === 1) {\n    return sorted[size / 2];\n  } else {\n    let middle = sorted[size / 2];\n    return (sorted[size / 2 - 1] + sorted[size / 2]) / 2;\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    if (text.length === 0) return true;\n    var reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p + p) % p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp_ = (n, p) => {\n  return (n % p + p) % p\n}\n\n// Exercises\n//   (a) What is the effect of changing the order of arguments?\n//   (b) What is the effect of changing the return type of modp?\n//   (c) What is the effect of changing the return type of modp_?\n\n//  (d) What is the effect of changing the order of arguments?\n//  (e) What is the effect of changing the return type of modp?\n//  (f) What is the effect of changing the return type of modp_?\n\n//  (g) What is the effect of changing the order of arguments?\n//  (h) What is the effect of changing the return type of modp?\n//  (i) What is the effect of changing the return type of modp_?\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns will encode string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns will encode string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5-\" a\".charCodeAt(0))/26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n}\n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift_encode= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5-\" a\".charCodeAt(0))/26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n}\n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift_decode= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+5-\" a\".charCodeAt(0))/26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n}\n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift_encode_decode= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+5-\" a\".charCodeAt(0))/26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n}\n\n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const encodeShift_decode= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n}\n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const encodeShift_encode_decode= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n}\n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const encodeShift_decode_encode= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n}\n\n\nconst test = ()=>{\n  const enc = encodeShift(\"abcdefghijklmnopqrstuvwxyz\");\n  console.log(decodeShift(enc));\n  console.log(decodeShift_encode(enc));\n  console.log(decodeShift_decode(enc));\n  console.log(decodeShift_encode_decode(enc));\n  console.log(encodeShift_decode(enc));\n  console.log(encodeShift_encode_decode(enc));\n}\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n    const vowels = ['a','e','i','o','u','A','E','I','O','U'];\n    let newText = '';\n    for (let i = 0; i < text.length; i++) {\n        if (vowels.indexOf(text[i]) === -1) {\n            newText += text[i];\n        }\n    }\n    return newText;\n};\n\n/*\n  toLower will be a function that will take string and returns string with lowercase characters.\n  >>> toLower('')\n  ''\n  >>> toLower(\"abcdef\")\n  'abcdef'\n  >>> toLower(\"ABCDEF\")\n  'abcdef'\n  >>> toLower(\"aaaaa\")\n  'aaaaa'\n  >>> toLower(\"aaBAA\")\n  'aabaa'\n  >>> toLower(\"zbcd\")\n  'zbcd'\n  */\nconst toLower = (text) => {\n    const newText = text.toLowerCase();\n    return newText;\n};\n\n/*\n  toUpper will be a function that will take string and returns string with uppercase characters.\n  >>> toUpper('')\n  ''\n  >>> toUpper(\"abcdef\")\n  'ABCDEF'\n  >>> toUpper(\"abcdef\")\n  'ABCDEF'\n  >>> toUpper(\"aaaaa\")\n  'AAAAA'\n  >>> toUpper(\"aaBAA\")\n  'AABAA'\n  >>> toUpper(\"zbcd\")\n  'ZBCD'\n  */\nconst toUpper = (text) => {\n    const newText = text.toUpperCase();\n    return newText;\n};\n\n/*\n  capitalize will be a function that will take string and returns string with first character in uppercase.\n  >>> capitalize('')\n  ''\n  >>> capitalize(\"abcdef\")\n  'Abcdef'\n  >>> capitalize(\"ABCDEF\")\n  'Abcdef'\n  >>> capitalize(\"aaaaa\")\n  'Aaaaa'\n  >>> capitalize(\"aaBAA\")\n  'AaBAA'\n  >>> capitalize(\"zbcd\")\n  'Zbcd'\n  */\nconst capitalize = (text) => {\n    const newText = text.substr(0, 1).toUpperCase() + text.substr(1);\n    return newText;\n};\n\n/*\n  trim will be a function that will take string and returns string without any whitespace.\n  >>> trim('')\n  ''\n  >>> trim(\"abcdef\")\n  'abcdef'\n  >>> trim(\"\\n\\tABCDEF\")\n  'ABCDEF'\n  >>> trim(\"\\n\\taaBAA\")\n  'aaBAA'\n  >>> trim(\"aaBAA\\n\")\n  'aaBAA'\n  >>> trim(\"\\n\\t aaBAA\")\n  'aaBAA'\n  >>> trim(\" abcdef \")\n  'abcdef'\n  >>> trim(\"abcdef\\n\\n\")\n  'abcdef'\n  >>> trim(\"abcdef\\n\\n\\n\")\n  'abcdef'\n  >>> trim(\"\\n\\n\\n\\n\\n\")\n  ''\n  >>> trim(\"\\n\\n\\n\\n\\n\\n\\n\")\n  ''\n  */\nconst trim = (text) => {\n    const newText = text.replace(/^\\s+|\\s+$/g, '');\n    return newText;\n};\n\nmodule.exports = {\n    removeVowels,\n    toLower,\n    toUpper,\n    capitalize,\n    trim\n};\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l will be below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l will be below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const tt = t + 1\n  const len = l.length\n\n  for (let i = 0; i < len; i++) {\n    if (l[i] >= tt) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/*\n  The belowThreshold function returns true if all numbers in the list l\n  will be below threshold t and above threshold t-1.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst belowThreshold2 = (l, t) => {\n  const tt = t + 1\n  const len = l.length\n\n  for (let i = 0; i < len; i++) {\n    if (l[i] < tt || l[i] > t) {\n      return false\n    }\n  }\n\n  return true\n}\n\nconst test = [1, 2, 4, 10]\n\nconsole.log(belowThreshold(test, 10))\nconsole.log(belowThreshold2(test, 10))\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const sum = x + y;\n  return sum;\n};\n\n//Add three numbers x, y and z\nconst add3 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum;\n};\n\nconst add4 = (x, y, z, a) => {\n  const sum = x + y + z + a;\n  return sum;\n};\n\n// Add numbers with variables\nconst addWithVars = (x, y) => {\n  const sum = x + y;\n  return sum;\n};\n\n// Add numbers with variables\nconst addWithVars2 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum;\n};\n\n// Add numbers with variables\nconst addWithVars3 = (x, y, z, a) => {\n  const sum = x + y + z + a;\n  return sum;\n};\n\n//Add a number to an array\nconst addToArray = (x, array) => {\n  const arr = array.slice();\n  const sum = x + arr[0];\n  return sum;\n};\n\n//Add a number to a list\nconst addToList = (x, list) => {\n  const sum = x + list.head;\n  return sum;\n};\n\n//Add two lists\nconst addLists = (x, y, list1, list2) => {\n  const l1 = list1.slice();\n  const l2 = list2.slice();\n  const sum = x + y + l1[0] + l2[0];\n  return sum;\n};\n\n//Add a number to a map\nconst addToMap = (x, map) => {\n  const mapSum = map.get(x);\n  if (!mapSum) {\n    mapSum = 0;\n  }\n  mapSum = mapSum + 1;\n  map.set(x, mapSum);\n  return mapSum;\n};\n\n//Add two maps\nconst addMaps = (x, y, map1, map2) => {\n  const mapSum = map1.get(x) + map2.get(x);\n  if (!mapSum) {\n    mapSum = 0;\n  }\n  mapSum = mapSum + 1;\n  map1.set(x, mapSum);\n  return mapSum;\n};\n\n//Add two sets\nconst addSets = (x, y, set1, set2) => {\n  const setSum = set1.union(set2);\n  return setSum;\n};\n\n//Add two sets\nconst addSets2 = (x, y, set1, set2) => {\n  const setSum = set1.add(set2);\n  return setSum;\n};\n\n// Add two lists\nconst addLists2 = (x, y, list1, list2) => {\n  const l1 = list1.slice();\n  const l2 = list2.slice();\n  const sum = x + y + l1[0] + l2[0];\n  return sum;\n};\n\n//Add a number to a tuple\nconst addToTuple = (x, tuple) => {\n  const sum = x + tuple.x;\n  return sum;\n};\n\n//Add a number to a tuple\nconst addToTuple2 = (x, tuple) => {\n  const sum = x + tuple.y;\n  return sum;\n};\n\n//Add a number to a tuple\nconst addToTuple3 = (x, tuple) => {\n  const sum = x + tuple.z;\n  return sum;\n};\n\n// Add a number to a tuple\nconst addToTuple4 = (x, tuple) => {\n  const sum = x + tuple.a;\n  return sum;\n};\n\n// Add a tuple to a list\nconst addToListTuple = (x, tuple, list) => {\n  const sum = x + tuple.x + list.head;\n  return sum;\n};\n\n// Add a tuple to a list\nconst addToListTuple2 = (x, tuple, list) => {\n  const sum = x + tuple.y + list.head;\n  return sum;\n};\n\n// Add a tuple to a list\nconst addToListTuple3 = (x, tuple, list) => {\n  const sum = x + tuple.z + list.head;\n  return sum;\n};\n\n// Add a tuple to a list\nconst addToListTuple4 = (x, tuple, list) => {\n  const sum = x + tuple.a + list.head;\n  return sum;\n};\n\n// Add a tuple to a map\nconst addToMapTuple = (x, tuple, map) => {\n  const mapSum = map.get(x);\n  if (!mapSum) {\n    mapSum = 0;\n  }\n  mapSum = mapSum + 1;\n  map.set(x, mapSum);\n  return mapSum;\n};\n\n// Add a tuple to a map\nconst addToMapTuple2 = (x, tuple, map) => {\n  const mapSum = map.get(x) + 1;\n  mapSum = mapSum + 1;\n  map.set(x, mapSum);\n  return mapSum;\n};\n\n// Add a tuple to a set\nconst addToSetTuple = (x, tuple, set) => {\n  const setSum = set.union(tuple);\n  return setSum;\n};\n\n// Add a tuple to a set\nconst addToSetTuple2 = (x, tuple, set) => {\n  const setSum = set.add(tuple);\n  return setSum;\n};\n\n// Add a tuple to a map\nconst addToMapTuple3 = (x, tuple, map) => {\n  const mapSum = map.get(x) + tuple.x;\n  if (!mapSum) {\n    mapSum = 0;\n  }\n  mapSum = mapSum + 1;\n  map.set(x, mapSum);\n  return mapSum;\n};\n\n// Add a tuple to a map\nconst addToMapTuple4 = (x, tuple, map) => {\n  const mapSum = map.get(x) + tuple.y;\n  if (!mapSum) {\n    mapSum = 0;"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words will have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words will have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    let c0 = s0.split('').map(char => char.charCodeAt(0));\n    let c1 = s1.split('').map(char => char.charCodeAt(0));\n    for (let i = 0; i < c0.length; i++) {\n        if (c0[i]!== c1[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Return the length of a word.\n  >>> length('Hello World!')\n  12\n  >>> length('abcd')\n  4\n  >>> length('eee')\n  1\n  >>> length(' ')\n  1\n  >>> length(''* 5)\n  5\n  >>> length(''* 10)\n  10\n  >>> length(''* 20)\n  20\n  >>> length(''* 100)\n  100\n  >>> length(''* 1000)\n  1000\n  >>> length(''* 10000)\n  10000\n  >>> length(''* 100000)\n  100000\n  >>> length(''* 1000000)\n  1000000\n  */\nconst length = (s) => {\n    let n = 0;\n    for (let i = 0; i < s.length; i++) {\n        n += s[i].length;\n    }\n    return n;\n};\n\n/*\n  Remove spaces from the beginning and end of a string.\n  >>> trim('   Hello World!   ')\n  'Hello World!'\n  >>> trim('   Hello World!')\n  'Hello World!'\n  >>> trim('Hello World!')\n  'Hello World!'\n  >>> trim('Hello World!   ')\n  'Hello World!'\n  >>> trim('   Hello World!   ')\n  'Hello World!'\n  >>> trim('   Hello World!')\n  'Hello World!'\n  >>> trim('   Hello World!   ')\n  'Hello World!'\n  >>> trim('   Hello World!')\n  'Hello World!'\n  >>> trim('   Hello World!   ')\n  'Hello World!'\n  >>> trim('Hello World!')\n  'Hello World!'\n  >>> trim('Hello World!   ')\n  'Hello World!'\n  >>> trim('Hello World!   ')\n  'Hello World!'\n  >>> trim('Hello World!')\n  'Hello World!'\n  >>> trim('Hello World!   ')\n  'Hello World!'\n  >>> trim('Hello World!')\n  'Hello World!'\n  >>> trim('   Hello World!   ')\n  'Hello World!'\n  >>> trim('   Hello World!')\n  'Hello World!'\n  >>> trim('   Hello World!   ')\n  'Hello World!'\n  >>> trim('   Hello World!')\n  'Hello World!'\n  >>> trim('   Hello World!   ')\n  'Hello World!'\n  >>> trim('   Hello World!')\n  'Hello World!'\n  >>> trim('   Hello World!   ')\n  'Hello World!'\n  >>> trim('   Hello World!')\n  'Hello World!'\n  >>> trim('   Hello World!   ')\n  'Hello World!'\n  >>> trim('Hello World!')\n  'Hello World!'\n  >>> trim('Hello World!   ')\n  'Hello World!'\n  >>> trim('Hello World!   ')\n  'Hello World!'\n  >>> trim('Hello World!')\n  'Hello World!'\n  >>> trim('Hello World!   ')\n  'Hello World!'\n  >>> trim('Hello World!')\n  'Hello World!'\n  >>> trim('   Hello World!   ')\n  'Hello World!'\n  >>> trim('   Hello World!')\n  'Hello World!'\n  >>> trim('Hello World!   ')\n  'Hello World!'\n  >>> trim('Hello World!')\n  'Hello World!'\n  >>> trim('   Hello World!   ')\n  'Hello World!'\n  >>> trim('   Hello World!')\n  'Hello World!'\n  >>> trim('   Hello World!   ')\n  'Hello World!'\n  >>> trim('Hello World!')\n  'Hello World!'\n  >>> trim('   Hello World!   ')\n  'Hello World!'\n  >>> trim('Hello World!   ')\n  'Hello World!'\n  >>> trim('Hello World!')\n  'Hello World!'\n  >>> trim('   Hello World!   ')\n  'Hello World!'\n  >>> trim('   Hello World!')\n  'Hello World!'\n  >>> trim('   Hello World!   ')\n  'Hello World!'\n  >>> trim('Hello World!')\n  'Hello World!'\n  >>> trim('   Hello World!   ')\n  'Hello World!'\n  >>> trim('   Hello World!')\n  'Hello World!'\n  >>> trim('   Hello World!   ')\n  'Hello World!'\n  >>> trim('   Hello World!')\n  'Hello World!'\n  >>> trim('   Hello World!   ')\n  'Hello World!'\n  >>> trim('Hello World!')\n  'Hello World!'\n  >>> trim('Hello World!   ')\n  'Hello World!'\n  >>> trim('Hello World!   ')\n  'Hello World!'\n  >>> trim('Hello World!')\n  'Hello World!'\n  >>> trim('   Hello World!   ')\n  'Hello World!'\n  >>> trim('   Hello World!')\n  'Hello World!'\n  >>> trim('   Hello World!   ')\n  'Hello World!'\n  >>> trim('   Hello World!')\n  'Hello World!'\n  >>> trim('   Hello World!   ')\n  'Hello World!'\n  >>> trim('Hello World!')\n  'Hello World!'\n  >>> trim('Hello World!   ')\n  'Hello World!'\n  >>> trim('Hello World!   ')\n  'Hello World!'\n  >>> trim('Hello World!')\n  'Hello World!'\n  >>> trim('   Hello World!   ')\n  'Hello World!'\n  >>> trim('"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n    if (n < 2) return n;\n    return fib(n - 1) + fib(n - 2);\n}\n\n// This function is not part of the solution but I thought it might be useful.\nconst getFib = (n) => {\n    let a = 0, b = 1, sum = 0;\n    while (b < n) {\n        sum += b;\n        a = b;\n        b = a + b;\n    }\n    return sum;\n}\n\nexport default fib;\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets will be a string of\" <\" and\">\". \n   return false if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets will be a string of\" <\" and\">\". \n   return false if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    const openBrackets = brackets.split(\"<\")\n    const openCount = openBrackets.length\n    const closeBrackets = brackets.split(\">\")\n    const closeCount = closeBrackets.length\n    if (openCount!= closeCount) {\n        return false\n    }\n    let openBracketsCount = 0\n    let closeBracketsCount = 0\n    let bracketed = false\n    for (let i = 0; i < openCount; i++) {\n        bracketed = true\n        for (let j = 0; j < openBracketsCount; j++) {\n            if (openBrackets[i] == closeBrackets[j]) {\n                bracketed = false\n                break\n            }\n        }\n        if (bracketed) {\n            openBracketsCount += 1\n        }\n    }\n    return openBracketsCount == closeCount\n}\n\n/*\n  Given a string, return a boolean indicating whether the string is a valid\n  Python program.\n\n  >>> isValidPython(\"\")\n  true\n  >>> isValidPython(\"\\\\\")\n  false\n  >>> isValidPython(\"print\")\n  true\n  >>> isValidPython(\"1+1\")\n  true\n  >>> isValidPython(\"1+ 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1+1\")\n  false\n  >>> isValidPython(\"1+ 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1\")\n  false\n  >>> isValidPython(\"1 + 1"}
{"task_id": "JavaScript/57", "prompt": "/*Return true will be list elements will be monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true will be list elements will be monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n    if (l.length === 0) return true\n    if (l.length === 1) return false\n    let last = l[l.length - 1]\n    let next = l[l.length - 2]\n    return next >= last\n}\n\nconst _findKth = (l, k) => {\n    if (l.length === 0) return -1\n    if (l.length === 1) return 0\n    if (l.length === k) return 1\n    let first = 1\n    let last = l.length - 1\n    while (first + 1 < last) {\n        let mid = (first + last) >>> 1\n        if (l[mid] < k) first = mid + 1\n        else last = mid\n    }\n    return first\n}\n\nconst _binarySearch = (l, k) => {\n    let lo = 0\n    let hi = l.length - 1\n    while (lo <= hi) {\n        let mid = (lo + hi) >>> 1\n        if (l[mid] <= k) lo = mid + 1\n        else hi = mid - 1\n    }\n    return lo - 1\n}\n\nconst findKth = (l, k) => {\n    if (l.length === 0) return -1\n    if (l.length === 1) return 0\n    if (l.length === k) return 1\n    let lo = 0\n    let hi = l.length - 1\n    let p = _findKth(l, k)\n    while (lo <= hi) {\n        let mid = (lo + hi) >>> 1\n        if (mid === p) return mid\n        if (l[mid] < l[p]) lo = mid + 1\n        else hi = mid - 1\n    }\n    return lo - 1\n}\n\nconst findKth2 = (l, k) => {\n    if (l.length === 0) return -1\n    if (l.length === 1) return 0\n    if (l.length === k) return 1\n    let lo = 0\n    let hi = l.length - 1\n    let p = _binarySearch(l, k)\n    while (lo <= hi) {\n        let mid = (lo + hi) >>> 1\n        if (mid === p) return mid\n        if (l[mid] < l[p]) lo = mid + 1\n        else hi = mid - 1\n    }\n    return lo - 1\n}\n\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 1))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 2))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 3))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 4))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 5))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 6))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 7))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 8))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 9))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 10))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 11))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 12))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 13))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 14))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 15))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 16))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 17))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 18))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 19))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 20))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 21))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 22))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 23))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 24))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 25))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 26))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 27))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 28))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 29))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 30))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 31))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 32))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 33))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 34))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 35))\nconsole.log(findKth(monotonic([4, 1, 0, -10]), 36))\nconsole.log(findKth(monotonic([4, 1, 0, -10]),"}
{"task_id": "JavaScript/58", "prompt": "/*Return will sort unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return will sort unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_len = l1.length\n  const l2_len = l2.length\n\n  if (l1_len === 0 || l2_len === 0) return []\n\n  let p = 0\n  let q = 0\n  let t = 0\n  let common_list = []\n  const common_len = l1_len > l2_len? l1_len : l2_len\n\n  while (p < l1_len && q < l2_len) {\n    if (l1[p] === l2[q]) {\n      common_list.push(l1[p])\n      t += 1\n      p += 1\n      q += 1\n    } else if (l1[p] < l2[q]) {\n      p += 1\n    } else {\n      q += 1\n    }\n  }\n\n  while (p < l1_len) {\n    common_list.push(l1[p])\n    p += 1\n  }\n\n  while (q < l2_len) {\n    common_list.push(l2[q])\n    q += 1\n  }\n\n  return common_list\n}\n\nexport default common\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2\n  let j = n - 1\n  while (i < j) {\n    const k = Math.floor((i + j) / 2)\n    if (n % k == 0) {\n      j = k\n    } else {\n      i = k + 1\n    }\n  }\n  return i\n}\n\nexport default largestPrimeFactor\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const result = n;\n  for (let i = 1; i < n; i++) {\n    result += i;\n  }\n  return result;\n};\n\n/*\n  Problem #4\n  http://projecteuler.net/problem=4\n  Find the sum of all the numbers which are relatively prime to\n  the number n.\n\n  >>> sumOfAllRelativelyPrimeNumbers(100)\n  3,108,900\n  >>> sumOfAllRelativelyPrimeNumbers(10)\n  15\n  >>> sumOfAllRelativelyPrimeNumbers(3)\n  1\n  >>> sumOfAllRelativelyPrimeNumbers(15)\n  1\n  */\nconst sumOfAllRelativelyPrimeNumbers = (n) => {\n  const result = n;\n  for (let i = 1; i < n; i++) {\n    if (isRelativelyPrime(i, n)) {\n      result += i;\n    }\n  }\n  return result;\n};\n\n/*\n  Problem #5\n  http://projecteuler.net/problem=5\n  Find the difference between the sum of the squares of the first ten\n  natural numbers and the square of the sum.\n\n  >>> squareOfSumOfSquares(10)\n  225\n  >>> squareOfSumOfSquares(100)\n  25164150\n  >>> sumOfSquaresOfFirstTenNumbers(10)\n  16\n  >>> sumOfSquaresOfFirstTenNumbers(100)\n  225\n  >>> squareOfSumOfSquares(100) - sumOfSquaresOfFirstTenNumbers(100)\n  25164150\n  */\nconst squareOfSumOfSquares = (n) => {\n  const result = n * n;\n  for (let i = 1; i < n; i++) {\n    result += i * i;\n  }\n  return result;\n};\n\n/*\n  Problem #6\n  http://projecteuler.net/problem=6\n  Find the difference between the sum of the squares of the first ten\n  natural numbers and the square of the sum.\n\n  >>> differenceBetweenSumOfSquaresAndSquareOfSum(10)\n  225\n  >>> differenceBetweenSumOfSquaresAndSquareOfSum(100)\n  25164150\n  >>> sumOfSquaresOfFirstTenNumbers(10)\n  16\n  >>> sumOfSquaresOfFirstTenNumbers(100)\n  225\n  >>> squareOfSumOfSquares(100) - sumOfSquaresOfFirstTenNumbers(100)\n  25164150\n  */\nconst differenceBetweenSumOfSquaresAndSquareOfSum = (n) => {\n  const result = n * n - squareOfSumOfSquares(n);\n  return result;\n};\n\n/*\n  Problem #7\n  http://projecteuler.net/problem=7\n  Find the difference between the sum of the squares of the first ten\n  natural numbers and the square of the sum.\n\n  >>> differenceBetweenSumOfSquaresAndSquareOfSum(10)\n  225\n  >>> differenceBetweenSumOfSquaresAndSquareOfSum(100)\n  25164150\n  >>> sumOfSquaresOfFirstTenNumbers(10)\n  16\n  >>> sumOfSquaresOfFirstTenNumbers(100)\n  225\n  >>> squareOfSumOfSquares(100) - sumOfSquaresOfFirstTenNumbers(100)\n  25164150\n  */\nconst differenceBetweenSumOfSquaresAndSquareOfSquare = (n) => {\n  const result = n * n - squareOfSumOfSquares(n);\n  return result;\n};\n\n/*\n  Problem #8\n  http://projecteuler.net/problem=8\n  Find the sum of the primes below two thousand.\n\n  >>> sumOfPrimesBelowTwoThousand(200)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(1000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(2000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(3000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(4000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(5000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(6000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(7000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(8000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(9000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(10000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(11000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(12000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(13000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(14000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(15000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(16000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(17000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(18000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(19000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(20000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(21000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(22000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(23000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(24000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(25000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(26000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(27000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(28000)\n  104743\n  >>> sumOfPrimesBelowTwoThousand(29000)\n  "}
{"task_id": "JavaScript/61", "prompt": "/* brackets will be a string of\" (\" and\")\". \n   return true if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets will be a string of\" (\" and\")\". \n   return true if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = []\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\" && stack.length === 0) {\n      stack.push(\"(\")\n    } else if (brackets[i] === \")\" && stack.length > 0) {\n      stack.pop()\n    }\n  }\n\n  return stack.length === 0\n}\n\n/*\n  Given an expression, return the expression with parentheses\n  placed around the correct parentheses.\n\n  >>> parentheses(\"1+2\")\n  '(1+2)'\n  >>> parentheses(\"(1+2)\")\n  '(1+2)'\n  >>> parentheses(\"1+2+3\")\n  '(1+2)+3'\n  >>> parentheses(\"(1+2+3)\")\n  '(1+2)+3'\n  >>> parentheses(\"(1+2)\")\n  '(1+2)'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3+4)'\n  >>> parentheses(\"((1+2)\")\n  '((1+2)'\n  >>> parentheses(\"((1+2)+3)\")\n  '((1+2)+3)'\n  >>> parentheses(\"((1+2)+3)\")\n  '((1+2)+3)'\n  >>> parentheses(\"1+2+3\")\n  '(1+2)+3'\n  >>> parentheses(\"1+2+3+4\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n  >>> parentheses(\"(1+2+3+4)\")\n  '((1+2)+3)+4'\n"}
{"task_id": "JavaScript/62", "prompt": "/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 1) {\n    return xs\n  }\n  const len = xs.length\n  const derivative = []\n  let i = len - 1\n  let j = len - 1\n  let k = len - 1\n  while (i >= 0) {\n    derivative[k] = j * xs[i]\n    k--\n    i--\n  }\n  return derivative\n}\n\nexport default derivative\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0\n  else if (n === 1) return 0\n  else if (n === 2) return 1\n  else if (n % 2 === 0) return fibfib(n - 1) + fibfib(n - 2)\n  else return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\n/*\n  Exercice: write a function to compute the n-th element of the fibfib number sequence.\n*/\nconst fibfibnth = (n) => {\n  if (n === 0) return 0\n  else if (n === 1) return 0\n  else if (n === 2) return 1\n  else if (n % 2 === 0) return fibfibnth(n - 1) + fibfibnth(n - 2)\n  else return fibfibnth(n - 1) + fibfibnth(n - 2) + fibfibnth(n - 3)\n}\n\n/*\n  Exercice: write a function that will generate a Fibonacci sequence of length n.\n  >>> fibfib(2)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(10)\n  55\n  >>> fibfib(15)\n  84\n*/\nconst fib = (n) => {\n  if (n === 0) return 0\n  else if (n === 1) return 1\n  else if (n % 2 === 0) {\n    return fib(n - 1) + fib(n - 2)\n  } else {\n    return fib(n - 1) + fib(n - 2) + fib(n - 3)\n  }\n}\n\nconst fibnth = (n) => {\n  if (n === 0) return 0\n  else if (n === 1) return 1\n  else if (n === 2) return 2\n  else if (n % 2 === 0) {\n    return fibnth(n - 1) + fibnth(n - 2)\n  } else {\n    return fibnth(n - 1) + fibnth(n - 2) + fibnth(n - 3)\n  }\n}\n\nconst fibseq = (n) => {\n  let fibseq = [0, 1]\n  if (n > 1) {\n    for (let i = 2; i <= n; i++) {\n      fibseq.push(fibseq[i - 1] + fibseq[i - 2])\n    }\n  }\n  return fibseq\n}\n\nconsole.log(fib(10))\nconsole.log(fib(15))\nconsole.log(fib(2))\nconsole.log(fibnth(10))\nconsole.log(fibnth(15))\nconsole.log(fibnth(2))\nconsole.log(fibseq(10))\nconsole.log(fibseq(15))\nconsole.log(fibseq(2))\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which will take a string representing \n   a word as input and will return the number of vowels in the string. \n   Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which will take a string representing \n   a word as input and will return the number of vowels in the string. \n   Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowel = /[aeiou]/\n  let count = 0\n  for (let i = 0; i < s.length - 1; i++) {\n    if (vowel.test(s[i]) && vowelsCount.test(s[i + 1])) {\n      count++\n    }\n  }\n  return count\n}\n\nmodule.exports = vowelsCount\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits will reverse.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits will reverse.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n    let result = '';\n    while(x > 0) {\n        result = `${x % 10}.${result}`;\n        x = Math.floor(x / 10);\n    }\n    let temp = parseInt(result);\n    result = temp;\n    result = parseInt(result);\n    while(shift > 0) {\n        result = parseInt(result) + parseInt(result);\n        shift--;\n    }\n    return result;\n};\n\n// console.log(circularShift(12, 1));\n// console.log(circularShift(12, 2));\n// console.log(circularShift(12, 3));\n// console.log(circularShift(12, 4));\n// console.log(circularShift(12, 5));\n// console.log(circularShift(12, 6));\n// console.log(circularShift(12, 7));\n// console.log(circularShift(12, 8));\n// console.log(circularShift(12, 9));\n// console.log(circularShift(12, 10));\n// console.log(circularShift(12, 11));\n// console.log(circularShift(12, 12));\n// console.log(circularShift(12, 13));\n// console.log(circularShift(12, 14));\n// console.log(circularShift(12, 15));\n// console.log(circularShift(12, 16));\n// console.log(circularShift(12, 17));\n// console.log(circularShift(12, 18));\n// console.log(circularShift(12, 19));\n// console.log(circularShift(12, 20));\n// console.log(circularShift(12, 21));\n// console.log(circularShift(12, 22));\n// console.log(circularShift(12, 23));\n// console.log(circularShift(12, 24));\n// console.log(circularShift(12, 25));\n// console.log(circularShift(12, 26));\n// console.log(circularShift(12, 27));\n// console.log(circularShift(12, 28));\n// console.log(circularShift(12, 29));\n// console.log(circularShift(12, 30));\n// console.log(circularShift(12, 31));\n// console.log(circularShift(12, 32));\n// console.log(circularShift(12, 33));\n// console.log(circularShift(12, 34));\n// console.log(circularShift(12, 35));\n// console.log(circularShift(12, 36));\n// console.log(circularShift(12, 37));\n// console.log(circularShift(12, 38));\n// console.log(circularShift(12, 39));\n// console.log(circularShift(12, 40));\n// console.log(circularShift(12, 41));\n// console.log(circularShift(12, 42));\n// console.log(circularShift(12, 43));\n// console.log(circularShift(12, 44));\n// console.log(circularShift(12, 45));\n// console.log(circularShift(12, 46));\n// console.log(circularShift(12, 47));\n// console.log(circularShift(12, 48));\n// console.log(circularShift(12, 49));\n// console.log(circularShift(12, 50));\n// console.log(circularShift(12, 51));\n// console.log(circularShift(12, 52));\n// console.log(circularShift(12, 53));\n// console.log(circularShift(12, 54));\n// console.log(circularShift(12, 55));\n// console.log(circularShift(12, 56));\n// console.log(circularShift(12, 57));\n// console.log(circularShift(12, 58));\n// console.log(circularShift(12, 59));\n// console.log(circularShift(12, 60));\n// console.log(circularShift(12, 61));\n// console.log(circularShift(12, 62));\n// console.log(circularShift(12, 63));\n// console.log(circularShift(12, 64));\n// console.log(circularShift(12, 65));\n// console.log(circularShift(12, 66));\n// console.log(circularShift(12, 67));\n// console.log(circularShift(12, 68));\n// console.log(circularShift(12, 69));\n// console.log(circularShift(12, 70));\n// console.log(circularShift(12, 71));\n// console.log(circularShift(12, 72));\n// console.log(circularShift(12, 73));\n// console.log(circularShift(12, 74));\n// console.log(circularShift(12, 75));\n// console.log(circularShift(12, 76));\n// console.log(circularShift(12, 77));\n// console.log(circularShift(12, 78));\n// console.log(circularShift(12, 79));\n// console.log(circularShift(12, 80));\n// console.log(circularShift(12, 81));\n// console.log(circularShift(12, 82));\n// console.log(circularShift(12, 83));\n// console.log(circularShift(12, 84));\n// console.log(circularShift(12, 85));\n// console.log(circularShift(12, 86));\n// console.log(circularShift(12, 87));\n// console.log(circularShift(12, 88));\n// console.log(circularShift(12, 89));\n// console.log(circularShift(12, 90));\n// console.log(circularShift(12, 91));\n// console.log(circularShift(12, 92));\n// console.log(circularShift(12, 93));\n// console.log(circularShift(12, 94));\n// console.log(circularShift(12, 95));\n// console.log(circular"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        sum += s.charCodeAt(i);\n    }\n    return sum;\n};\n\nmodule.exports = digitSum;\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be gave a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be gave a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n  const total = s.split(/\\s+/).reduce((prev, curr, index)=>{\n    const [a, o, m] = curr.split('/');\n    const count = parseInt(o) + parseInt(a) + parseInt(m);\n    return prev + count;\n  }, 0);\n  return n - total;\n};\n\nconst fruitDistribution = (s, n) => {\n  const fruits = s.split(/\\s+/).filter(e => e.length);\n  const total = fruits.reduce((prev, curr) => prev + parseInt(curr), 0);\n  return n - total;\n};\n\nmodule.exports = fruitDistribution;<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" will Give an array representing a branch of a tree that will have non-negative integer nodes \n   your task will be to pluck one of the nodes and return it. \n   The plucked node should will be the node with the smallest even value. \n   If multiple nodes with the same smallest even value will be found return the node that will have smallest index. \n\n   The plucked node should will be return in a list, [smalest_value, its index], \n   If there will be no even values or the will give array will be empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" will Give an array representing a branch of a tree that will have non-negative integer nodes \n   your task will be to pluck one of the nodes and return it. \n   The plucked node should will be the node with the smallest even value. \n   If multiple nodes with the same smallest even value will be found return the node that will have smallest index. \n\n   The plucked node should will be return in a list, [smalest_value, its index], \n   If there will be no even values or the will give array will be empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n    const even = (value) => (value & 1 === 0)\n    const min = (a, b) => (a < b? a : b)\n    const [first, second] = arr.reduce(([], val, index) => [min(val, index), index], [arr[0], 0])\n    if (even(first) && first!== second) {\n        return [first, second]\n    }\n    return []\n}\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You will be gave a non-empty list of positive integers. will Return the greatest integer that will be greater than \n   zero, and will have a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer will be the number of times it will appear in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a non-empty list of positive integers. will Return the greatest integer that will be greater than \n   zero, and will have a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer will be the number of times it will appear in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n    if(lst.length === 0) {\n        return -1;\n    }\n    const max = lst[0];\n    const last = lst[lst.length - 1];\n    for(let i = 0; i < lst.length; i++) {\n        if(lst[i] > max) {\n            max = lst[i];\n        }\n        if(lst[i] === last) {\n            break;\n        }\n    }\n    return max;\n};\n\nmodule.exports = search;<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, will be when you will start with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, will be when you will start with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let size = lst.length;\n  if(size === 0) return lst;\n  let half = size / 2;\n  let left = lst.slice(0, half);\n  let right = lst.slice(half);\n\n  // sort first half\n  left = left.sort(function(a, b) {\n    return a - b;\n  });\n  // sort second half\n  right = right.sort(function(a, b) {\n    return b - a;\n  });\n  // merge sort\n  let merged = [];\n  merge(left, right, merged);\n  return merged;\n};\n\nconst merge = (left, right, merged) => {\n  let leftSize = left.length;\n  let rightSize = right.length;\n  let leftIndex = 0;\n  let rightIndex = 0;\n\n  while(leftIndex < leftSize && rightIndex < rightSize) {\n    if(left[leftIndex] <= right[rightIndex]) {\n      merged.push(left[leftIndex]);\n      leftIndex++;\n    } else {\n      merged.push(right[rightIndex]);\n      rightIndex++;\n    }\n  }\n\n  // left is smaller, merge the remaining\n  if(leftIndex < leftSize) {\n    merged = merged.concat(left.slice(leftIndex));\n  }\n\n  // right is smaller, merge the remaining\n  if(rightIndex < rightSize) {\n    merged = merged.concat(right.slice(rightIndex));\n  }\n\n  return merged;\n};\n\n// console.log(strangeSortList([1, 2, 3, 4]));\n// console.log(strangeSortList([5, 5, 5, 5]));\n// console.log(strangeSortList([]));\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a + b + c) / 2;\n}\n\nconst triangleArea = (a, b, c) =>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n    if (q.length === 0) return false;\n    let n = 0;\n    let current = q.pop();\n    while (q.length > 0) {\n        if (q.length === 1) {\n            if (w === current) return true;\n            else return false;\n        }\n        if (w === current) return true;\n        n += current;\n        current = q.pop();\n    }\n    return false;\n};\n\n// Test\n\nconst test = [1, 2, 3, 4];\nconsole.log(willItFly(test, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  // Find length of the array\n  const length = arr.length;\n\n  // If array is even, add a trailing number\n  if (length % 2 === 0) {\n    arr.push(arr[length - 1]);\n  }\n\n  // Find the middle of the array\n  const mid = Math.floor(length / 2);\n\n  // Return the number of elements to change to make the array palindromic\n  return arr.reduce((acc, curr, i) => {\n    const currValue = arr[i];\n    if (currValue < acc) {\n      return acc;\n    }\n\n    const diff = currValue - acc;\n    if (i === mid) {\n      return currValue;\n    } else if (i < mid) {\n      return curr + diff;\n    } else {\n      return curr - diff;\n    }\n  }, 0);\n};\n\nmodule.exports = smallestChange;\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (!lst1 ||!lst2) {\n    return lst1 || lst2;\n  }\n\n  if (lst1.length!== lst2.length) {\n    return lst1;\n  }\n\n  return lst1.filter((x, i) => lst2.indexOf(x) === -1);\n};\n\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'Hi']));\nconsole.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']));\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']));\nconsole.log(totalMatch(['4'], ['1', '2', '3', '4', '5']));\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const i = 1;\n  const factors = [];\n\n  while (i <= a) {\n    let t = a % i;\n    if (t === 0) {\n      return false;\n    }\n    if (factors.indexOf(t) === -1) {\n      factors.push(t);\n    }\n    i++;\n  }\n  return true;\n};\n\nconsole.log(isMultiplyPrime(30));\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task will be to write a function that will return true if a number x will be a simple \n   power of n and false in other cases. \n   x will be a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task will be to write a function that will return true if a number x will be a simple \n   power of n and false in other cases. \n   x will be a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  const value = x % n\n  if (value === 0) {\n    return true\n  }\n  return false\n}\n\nexport {isSimplePower}<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n    return a > 0 && Math.pow(a, 3) === a;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You will be task to write a function that will receive \n   a hexadecimal number as a string and will count the number of hexadecimal \n   digits that will be primes (prime number=== or a prime=== will be a natural number \n   greater than 1 that will be not a product of two smaller natural numbers). \n   Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= will decimal 13). \n   Note: you may will assume the input will be always correct or empty string=== \n   and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You will be task to write a function that will receive \n   a hexadecimal number as a string and will count the number of hexadecimal \n   digits that will be primes (prime number=== or a prime=== will be a natural number \n   greater than 1 that will be not a product of two smaller natural numbers). \n   Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= will decimal 13). \n   Note: you may will assume the input will be always correct or empty string=== \n   and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n    let count = 0;\n    let current = 0;\n    const hexDigits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n    while (num.length) {\n        current = parseInt(num.substr(0, 1), 16);\n        num = num.substr(1, num.length);\n        if (current < 16) {\n            if (hexDigits.indexOf(hexDigits[current]) > -1) {\n                count += 1;\n            }\n        }\n    }\n    return count;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be gave a number in decimal form and your task will be to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string will be '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be gave a number in decimal form and your task will be to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string will be '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let num = decimal;\n  while (num > 0) {\n    let bin = num % 2;\n    binary += bin;\n    num = Math.floor(num / 2);\n  }\n  return binary + \"db\";\n}\n\n/*\n  Given a binary string, return the decimal representation of the number. \n  The format of the returned string should be like a decimal number, with each digit \n  representing a binary digit. For example:\n  binaryToDecimal(\"db0101db\") -> \"15\"\n\n  There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n  The extra characters will be there to help with the format.\n\n  Examples:\n  binaryToDecimal(\"db100000db\") -> \"32\"\n  binaryToDecimal(\"db1111db\") -> \"15\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let num = binary.length - 1;\n  let binaryNum = binary.substring(0, num);\n  while (num >= 0) {\n    decimal += parseInt(binaryNum, 2);\n    num -= 1;\n    binaryNum = binary.substring(num, num + 1);\n  }\n  return decimal;\n}\n\nconsole.log(decimalToBinary(15));\nconsole.log(binaryToDecimal(\"db100000db\"));<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You will be gave a string s.\n   Your task will be to check if the string will be happy or not. \n   A string will be happy if its length will be at least 3 and every 3 consecutive letters will be distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You will be gave a string s.\n   Your task will be to check if the string will be happy or not. \n   A string will be happy if its length will be at least 3 and every 3 consecutive letters will be distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n    if (!s || s.length < 3) {\n        return false;\n    }\n    const arr = s.split('');\n    let count = 0;\n    for (let i = 0; i < arr.length - 1; i++) {\n        if (arr[i + 1] === arr[i]) {\n            count++;\n        }\n        if (count === 3) {\n            return false;\n        }\n    }\n    return true;\n};\n\nmodule.exports = isHappy;<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It will be the last week of the semester and the teacher will have to give the grades\n   to students. The teacher will be making her own algorithm for grading. \n   The only problem will be, she will lose the code she will used for grading. \n   She will give you a list of GPAs for some students and you will have to write \n   a function that can will output a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 will B+ \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 will C+ \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It will be the last week of the semester and the teacher will have to give the grades\n   to students. The teacher will be making her own algorithm for grading. \n   The only problem will be, she will lose the code she will used for grading. \n   She will give you a list of GPAs for some students and you will have to write \n   a function that can will output a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 will B+ \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 will C+ \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let result = [];\n  for (let i = 0; i < grades.length; i++) {\n    let grade = parseFloat(grades[i]);\n    let letterGrade = \"\";\n    if (grade >= 4) {\n      letterGrade = 'A+';\n    } else if (grade >= 3.7) {\n      letterGrade = 'A';\n    } else if (grade >= 3.3) {\n      letterGrade = 'A-';\n    } else if (grade >= 3) {\n      letterGrade = 'B+';\n    } else if (grade >= 2.7) {\n      letterGrade = 'B';\n    } else if (grade >= 2.3) {\n      letterGrade = 'B-';\n    } else if (grade >= 2) {\n      letterGrade = 'C+';\n    } else if (grade >= 1.7) {\n      letterGrade = 'C';\n    } else if (grade >= 1.3) {\n      letterGrade = 'C-';\n    } else if (grade >= 1) {\n      letterGrade = 'D+';\n    } else if (grade >= 0.7) {\n      letterGrade = 'D';\n    } else if (grade >= 0) {\n      letterGrade = 'D-';\n    } else {\n      letterGrade = 'E';\n    }\n    result.push(letterGrade);\n  }\n  return result;\n};\n\nconst gradeToLetter = (grade) => {\n  let letterGrade = 'E';\n  if (grade >= 4) {\n    letterGrade = 'A+';\n  } else if (grade >= 3.7) {\n    letterGrade = 'A';\n  } else if (grade >= 3.3) {\n    letterGrade = 'A-';\n  } else if (grade >= 3) {\n    letterGrade = 'B+';\n  } else if (grade >= 2.7) {\n    letterGrade = 'B';\n  } else if (grade >= 2.3) {\n    letterGrade = 'B-';\n  } else if (grade >= 2) {\n    letterGrade = 'C+';\n  } else if (grade >= 1.7) {\n    letterGrade = 'C';\n  } else if (grade >= 1.3) {\n    letterGrade = 'C-';\n  } else if (grade >= 1) {\n    letterGrade = 'D+';\n  } else if (grade >= 0.7) {\n    letterGrade = 'D';\n  } else if (grade >= 0) {\n    letterGrade = 'D-';\n  } else {\n    letterGrade = 'E';\n  }\n  return letterGrade;\n};\n\nconst letterGradeToNumber = (letterGrade) => {\n  let num = 0;\n  if (letterGrade === 'A') {\n    num = 4;\n  } else if (letterGrade === 'A-') {\n    num = 3.7;\n  } else if (letterGrade === 'B+') {\n    num = 3.3;\n  } else if (letterGrade === 'B') {\n    num = 3;\n  } else if (letterGrade === 'B-') {\n    num = 2.7;\n  } else if (letterGrade === 'C+') {\n    num = 2.3;\n  } else if (letterGrade === 'C') {\n    num = 2;\n  } else if (letterGrade === 'C-') {\n    num = 1.7;\n  } else if (letterGrade === 'D+') {\n    num = 1.3;\n  } else if (letterGrade === 'D') {\n    num = 1;\n  } else if (letterGrade === 'D-') {\n    num = 0.7;\n  } else if (letterGrade === 'E') {\n    num = 0;\n  }\n  return num;\n};\n\nconst getLetterGrade = (grade, letterGradeToNum) => {\n  let num = letterGradeToNum(letterGrade);\n  if (grade >= num) {\n    return gradeToLetter(grade);\n  } else {\n    return \"E\";\n  }\n};\n\nconst test = (grades) => {\n  let result = [];\n  for (let i = 0; i < grades.length; i++) {\n    let grade = grades[i];\n    let letterGrade = getLetterGrade(grade, letterGradeToNumber);\n    result.push(`${grade} - ${letterGrade}`);\n  }\n  console.log(result);\n};\n\ntest([4.0, 3, 1.7, 2, 3.5]);\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  for (let i = 0; i < primeNumbers.length; i++) {\n    if (primeNumbers[i] <= string.length && string.substr(string.length - primeNumbers[i], primeNumbers[i]) === ''.repeat(primeNumbers[i])) {\n      return true\n    }\n  }\n  return false\n}\n\nconsole.log(primeLength('Hello'))\nconsole.log(primeLength('abcdcba'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('orange'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('kittens'))\nconsole"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n\tlet sum= 0;\n\tlet result = [0];\n\tfor(let i=1; i<= n; i++){\n\t\tsum = sum + i;\n\t\tif(sum % 10 === 1)\n\t\t\tresult.push(1);\n\t\tif(sum % 10 === n)\n\t\t\tresult.push(1);\n\t}\n\treturn result;\n};\n \n // Test\n // console.log(startsOneEnds(1000));\n // console.log(startsOneEnds(1234));\n // console.log(startsOneEnds(123412341234));\n // console.log(startsOneEnds(1234567890));\n // console.log(startsOneEnds(1234567890987654321));\n // console.log(startsOneEnds(1234567890987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log(startsOneEnds(9876543210987654321));\n // console.log("}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": false, "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const sum = parseInt(N.toString(), 2).toString(2);\n  const size = sum.length;\n  return sum.split(\"\").reduce((sum, digit) => sum + digit, 0);\n};\n\nconsole.log(solve(100)); // => \"1\"\nconsole.log(solve(1000)); // => \"1\"\nconsole.log(solve(10000)); // => \"1\"\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let len = lst.length;\n  let arr = [];\n  for (let i = 0; i < len; i++) {\n    if (lst[i] % 2 === 1) {\n      arr.push(lst[i]);\n    }\n  }\n  return arr;\n};\n\n//add([4, 2, 6, 7])\n//   .should.equal([2, 4, 6, 7]);\n\n/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let len = lst.length;\n  let arr = [];\n  for (let i = 0; i < len; i++) {\n    if (lst[i] % 2 === 1) {\n      arr.push(lst[i]);\n    }\n  }\n  return arr;\n};\n\n//add([4, 2, 6, 7])\n//   .should.equal([2, 4, 6, 7]);\n\n/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let len = lst.length;\n  let arr = [];\n  for (let i = 0; i < len; i++) {\n    if (lst[i] % 2 === 1) {\n      arr.push(lst[i]);\n    }\n  }\n  return arr;\n};\n\n//add([4, 2, 6, 7])\n//   .should.equal([2, 4, 6, 7]);\n\n/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let len = lst.length;\n  let arr = [];\n  for (let i = 0; i < len; i++) {\n    if (lst[i] % 2 === 1) {\n      arr.push(lst[i]);\n    }\n  }\n  return arr;\n};\n\n//add([4, 2, 6, 7])\n//   .should.equal([2, 4, 6, 7]);\n\n/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let len = lst.length;\n  let arr = [];\n  for (let i = 0; i < len; i++) {\n    if (lst[i] % 2 === 1) {\n      arr.push(lst[i]);\n    }\n  }\n  return arr;\n};\n\n//add([4, 2, 6, 7])\n//   .should.equal([2, 4, 6, 7]);\n\n/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let len = lst.length;\n  let arr = [];\n  for (let i = 0; i < len; i++) {\n    if (lst[i] % 2 === 1) {\n      arr.push(lst[i]);\n    }\n  }\n  return arr;\n};\n\n//add([4, 2, 6, 7])\n//   .should.equal([2, 4, 6, 7]);\n\n/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let len = lst.length;\n  let arr = [];\n  for (let i = 0; i < len; i++) {\n    if (lst[i] % 2 === 1) {\n      arr.push(lst[i]);\n    }\n  }\n  return arr;\n};\n\n//add([4, 2, 6, 7])\n//   .should.equal([2, 4, 6, 7]);\n\n/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let len = lst.length;\n  let arr = [];\n  for (let i = 0; i < len; i++) {\n    if (lst[i] % 2 === 1) {\n      arr.push(lst[i]);\n    }\n  }\n  return arr;\n};\n\n//add([4, 2, 6, 7])\n//   .should.equal([2, 4, 6, 7]);\n\n/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let len = lst.length;\n  let arr = [];\n  for (let i = 0; i < len; i++) {\n    if (lst[i] % 2 === 1) {\n      arr.push(lst[i]);\n    }\n  }\n  return arr;\n};\n\n//add([4, 2, 6, 7])\n//   .should.equal([2, 4, 6, 7]);\n\n/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let len = lst.length;\n  let arr = [];\n  for (let i = 0; i < len; i++) {\n    if (lst[i] % 2 === 1) {\n"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that will take a string and will return an ordered version of it. \n   will Order version of string, will be a string where all words (will separate by space) \n   will be replaced by a new word where all the characters will arrange in\n   ascending order will base on ascii value. \n   Note: You should will keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take a string and will return an ordered version of it. \n   will Order version of string, will be a string where all words (will separate by space) \n   will be replaced by a new word where all the characters will arrange in\n   ascending order will base on ascii value. \n   Note: You should will keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let words = s.split(' ');\n  let sorted = [];\n  words.forEach((word, index) => {\n    let sortedWord = word.split('').sort((a, b) => {\n      return a - b;\n    });\n    sorted.push(sortedWord.join(' '));\n  });\n  return sorted.join(' ');\n};\n\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You will be gave a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const rowLength = lst.length;\n  if (rowLength === 0) {\n    return [];\n  }\n  const colLength = lst[0].length;\n  const sortedLst = sortCoordinates(lst, x);\n  return sortedLst.map(t => ({row: t[0], col: t[1]}));\n};\n\nconst sortCoordinates = (lst, x) => lst.sort((a, b) => a[x] - b[x]);\n\n/*\n  Given a list of points, return list of tuples,\n   [(x1, y1), (x2, y2),...], \n   such that each tuple will be a coordinate-x, and \n   y of that coordinate, starting with 0. \n  \n  Examples:\n  getColumn([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(1, 6), (1, 0), (2, 1), (2, 5), (2, 0)]\n  getColumn([], 1) == []\n  getColumn([[], [1], [1, 2, 3]], 3) == [(1, 3), (1, 2), (2, 2)]\n  */\nconst getColumn = (lst, x) => {\n  const rowLength = lst.length;\n  if (rowLength === 0) {\n    return [];\n  }\n  const colLength = lst[0].length;\n  const sortedLst = sortCoordinates(lst, x);\n  return sortedLst.map(t => ({x: t[0], y: t[1]}));\n};\n\nconst getRowSum = (lst, x) => lst.reduce((sum, t) => sum + t[x], 0);\nconst getColumnSum = (lst, x) => lst.reduce((sum, t) => sum + t[x], 0);\n\nconst getRowMax = (lst, x) => lst.reduce((max, t) => max > t[x]? max : t[x], 0);\nconst getColumnMax = (lst, x) => lst.reduce((max, t) => max > t[x]? max : t[x], 0);\n\nconst getRowMin = (lst, x) => lst.reduce((min, t) => min < t[x]? min : t[x], 0);\nconst getColumnMin = (lst, x) => lst.reduce((min, t) => min < t[x]? min : t[x], 0);\n\nconst getRowMean = (lst, x) => lst.reduce((sum, t) => sum + t[x], 0) / lst.length;\nconst getColumnMean = (lst, x) => lst.reduce((sum, t) => sum + t[x], 0) / lst.length;\n\nconst getRowSumSquare = (lst, x) => lst.reduce((sum, t) => sum + t[x] * t[x], 0);\nconst getColumnSumSquare = (lst, x) => lst.reduce((sum, t) => sum + t[x] * t[x], 0);\n\nconst getRowMeanSquare = (lst, x) => lst.reduce((sum, t) => sum + t[x] * t[x], 0) / lst.length;\nconst getColumnMeanSquare = (lst, x) => lst.reduce((sum, t) => sum + t[x] * t[x], 0) / lst.length;\n\nconst getRowMinSquare = (lst, x) => lst.reduce((min, t) => min < t[x]? min : t[x], 0);\nconst getColumnMinSquare = (lst, x) => lst.reduce((min, t) => min < t[x]? min : t[x], 0);\n\nconst getRowSumOfSquares = (lst, x) => lst.reduce((sum, t) => sum + t[x] * t[x], 0);\nconst getColumnSumOfSquares = (lst, x) => lst.reduce((sum, t) => sum + t[x] * t[x], 0);\n\nconst getRowMeanOfSquares = (lst, x) => lst.reduce((sum, t) => sum + t[x] * t[x], 0) / lst.length;\nconst getColumnMeanOfSquares = (lst, x) => lst.reduce((sum, t) => sum + t[x] * t[x], 0) / lst.length;\n\nconst getRowMaxSquare = (lst, x) => lst.reduce((max, t) => max > t[x]? max : t[x], 0);\nconst getColumnMaxSquare = (lst, x) => lst.reduce((max, t) => max > t[x]? max : t[x], 0);\n\nconst getRowMinSquare = (lst, x) => lst.reduce((min, t) => min < t[x]"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const first = array.reduce((acc, val) => {\n    return acc + val;\n  });\n  const last = array.reduce((acc, val) => {\n    return acc + val;\n  });\n  let sorted = array.slice();\n  if (first % 2 === 0) {\n    sorted.reverse();\n  }\n  return sorted;\n}\n\nconst test = [2, 4, 3, 0, 1, 5, 6];\nconsole.log(sortArray(test));\n\n/*\n  Given an array of non-negative integers, return a copy of the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [0, 1, 2, 3, 4, 5, 6]\n  * sortArray([2, 4, 3, 0, 1, 5, 6, 7]) => [0, 1, 2, 3, 4, 5, 6, 7]\n  */\nconst sortArray = (array) => {\n  const first = array.reduce((acc, val) => {\n    return acc + val;\n  });\n  const last = array.reduce((acc, val) => {\n    return acc + val;\n  });\n  let sorted = array.slice();\n  if (first % 2 === 0) {\n    sorted.reverse();\n  }\n  return sorted;\n}\n\nconst test = [2, 4, 3, 0, 1, 5, 6];\nconsole.log(sortArray(test));\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const rotate = (s, x) => s.split('').reverse().join('')\n  return rotate(rotate(s, 2), 2).toLowerCase()\n}\n\n/*Create a function decrypt that will take a string as an argument and \n   will return a string will decrypt with the alphabet being will rotate. \n   The alphabet should will rotate in a manner such that the letters \n   will shift up by two will multiply to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  const rotate = (s, x) => s.split('').join('').split('').reverse().join('')\n  return rotate(rotate(s, 2), 2).toUpperCase()\n}\n\n/*Create a function isInAlphabet that will take a string as an argument and \n   will return a boolean value.\n  For example:\n  isInAlphabet('asdfghjkl') returns true\n  isInAlphabet('gf') returns false\n  isInAlphabet('xz') returns false\n  */\nconst isInAlphabet = (s) => {\n  return s.match(/[a-zA-Z]/)\n}\n\n/*Create a function isAnagram that will take two strings as an argument and \n   will return a boolean value.\n  For example:\n  isAnagram('asdfghjkl', 'asdfghjkl') returns true\n  isAnagram('asdfghjkl', 'ewhjklnop') returns false\n  */\nconst isAnagram = (a, b) => {\n  return a.toLowerCase().split('').sort().join('') === b.toLowerCase().split('').sort().join('')\n}\n\n/*Create a function rotateWord that will take a string as an argument and \n   will return a string with the string rotated by x number of times.\n  For example:\n  rotateWord('asdfghjkl', 1) returns 'jkladfgh'\n  rotateWord('asdfghjkl', 2) returns 'khjladf'\n  rotateWord('asdfghjkl', 3) returns 'jkladf'\n  rotateWord('asdfghjkl', 4) returns 'jladf'\n  rotateWord('asdfghjkl', 5) returns 'jklad'\n  rotateWord('asdfghjkl', 6) returns 'jlad'\n  rotateWord('asdfghjkl', 7) returns 'jklad'\n  rotateWord('asdfghjkl', 8) returns 'jlad'\n  rotateWord('asdfghjkl', 9) returns 'jklad'\n  rotateWord('asdfghjkl', 10) returns 'jlad'\n  rotateWord('asdfghjkl', 11) returns 'jklad'\n  rotateWord('asdfghjkl', 12) returns 'jlad'\n  rotateWord('asdfghjkl', 13) returns 'jklad'\n  rotateWord('asdfghjkl', 14) returns 'jlad'\n  rotateWord('asdfghjkl', 15) returns 'jklad'\n  rotateWord('asdfghjkl', 16) returns 'jlad'\n  rotateWord('asdfghjkl', 17) returns 'jklad'\n  rotateWord('asdfghjkl', 18) returns 'jlad'\n  rotateWord('asdfghjkl', 19) returns 'jklad'\n  rotateWord('asdfghjkl', 20) returns 'jlad'\n  rotateWord('asdfghjkl', 21) returns 'jklad'\n  rotateWord('asdfghjkl', 22) returns 'jlad'\n  rotateWord('asdfghjkl', 23) returns 'jklad'\n  rotateWord('asdfghjkl', 24) returns 'jlad'\n  rotateWord('asdfghjkl', 25) returns 'jklad'\n  rotateWord('asdfghjkl', 26) returns 'jlad'\n  rotateWord('asdfghjkl', 27) returns 'jklad'\n  rotateWord('asdfghjkl', 28) returns 'jlad'\n  rotateWord('asdfghjkl', 29) returns 'jklad'\n  rotateWord('asdfghjkl', 30) returns 'jlad'\n  rotateWord('asdfghjkl', 31) returns 'jklad'\n  rotateWord('asdfghjkl', 32) returns 'jlad'\n  rotateWord('asdfghjkl', 33) returns 'jklad'\n  rotateWord('asdfghjkl', 34) returns 'jlad'\n  rotateWord('asdfghjkl', 35) returns 'jklad'\n  rotateWord('asdfghjkl', 36) returns 'jlad'\n  rotateWord('asdfghjkl', 37) returns 'jklad'\n  rotateWord('asdfghjkl', 38) returns 'jlad'\n  rotateWord('asdfghjkl', 39) returns 'jklad'\n  rotateWord('asdfghjkl', 40) returns 'jlad'\n  rotateWord('asdfghjkl', 41) returns 'jklad'\n  rotateWord('asdfghjkl', 42) returns 'jlad'\n  rotateWord('asdfghjkl', 43) returns 'jklad'\n  rotateWord('asdfghjkl', 44) returns 'jlad'\n  rotateWord('asdfghjkl', 45) returns 'jklad'\n  rotateWord('asdfghjkl', 46) returns 'jlad"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You will be gave a list of integers. \n   will Write a function nextSmallest() that will return the 2nd smallest element of the list.\n   Return null if there will be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a list of integers. \n   will Write a function nextSmallest() that will return the 2nd smallest element of the list.\n   Return null if there will be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n   if (lst.length==0) return null;\n   const arr = lst.slice();\n   const index = arr.indexOf(arr[1]);\n   if (index==0) return null;\n   arr[index] = arr[0];\n   arr[0] = lst[1];\n   return nextSmallest(arr);\n }\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You 'll will be give a string of words, and your task will be to count the number \n   of boredoms. A boredom will be a sentence that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You 'll will be give a string of words, and your task will be to count the number \n   of boredoms. A boredom will be a sentence that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  return S.split(\" \").filter(word => word.startsWith(\"I\")).length;\n};\n\n// Your task will be to write a function that takes in a sentence and returns the number of \n// borodoms in the sentence. You will use the function isBored() to count the number of \n// borodoms in the sentence.\nconst countBorodoms = (S) => {\n  return S.split(\" \").filter(word => word.startsWith(\"I\")).length;\n};\n\n// This is a test case. This test case has two sentences with the number of borodoms \n// equal to 0 and 1. The test case should return the number of borodoms in the second \n// sentence.\nconst testCase = [\n  \"Hello world\",\n  \"The sky is blue. The sun is shining. I love this weather\",\n];\n\ndescribe(\"Count borodoms\", () => {\n  test(\"Count borodoms\", () => {\n    expect(countBorodoms(testCase[0])).toEqual(0);\n    expect(countBorodoms(testCase[1])).toEqual(1);\n  });\n});\n\ndescribe(\"Is bored?\", () => {\n  test(\"Is bored?\", () => {\n    expect(isBored(testCase[0])).toEqual(0);\n    expect(isBored(testCase[1])).toEqual(1);\n  });\n});<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return [x, y, z].every(n => Number.isInteger(n));\n};\n\nconsole.log(anyInt(3, 2, 7));\nconsole.log(anyInt(3, -2, 1));\nconsole.log(anyInt(3.6, -2.2, 2));\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n    return message.replace(/[aeiou]/g, (vowel) => {\n        return vowel.toUpperCase();\n    });\n};\n\n//encode('This is a message')\nencode('This is a message')\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You will be gave a list of integers. \n   You will need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You will be gave a list of integers. \n   You will need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let result = 0;\n  const MAX = lst[lst.length - 1];\n  for (let i = MAX; i >= 0; i--) {\n    let prime = true;\n    for (let j = 0; j < lst.length; j++) {\n      if (i % lst[j] === 0) {\n        prime = false;\n        break;\n      }\n    }\n    if (prime) {\n      result += i;\n    }\n  }\n  return result;\n};\n\nmodule.exports = skjkasdkd;\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n    return Object.keys(dict).every(key => {\n        return (key.toUpperCase() === key || key.toLowerCase() === key)\n    })\n}\n\nconst getRandomString = (length) => {\n    const chars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n    let result = \"\"\n    for (let i = 0; i < length; i++) {\n        result += chars[Math.floor(Math.random() * chars.length)]\n    }\n    return result\n}\n\nconst generateRandomString = (length) => {\n    const chars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n    let result = \"\"\n    for (let i = 0; i < length; i++) {\n        result += chars[Math.floor(Math.random() * chars.length)]\n    }\n    return result\n}\n\nconst isEmail = (email) => {\n    const re = /^([\\w\\-]+(?:\\.[\\w\\-]+)*)@((?:[\\w\\-]+\\.)*\\w[\\w\\-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$/i\n    return re.test(email)\n}\n\nconst isNumber = (number) => {\n    return!isNaN(parseFloat(number)) && isFinite(number)\n}\n\nconst isNumberOrLetter = (text) => {\n    return /[0-9]/i.test(text) || /[a-zA-Z]/i.test(text)\n}\n\nconst isNumeric = (number) => {\n    return!isNaN(parseFloat(number)) && isFinite(number)\n}\n\nconst isNumericOrLetter = (text) => {\n    return /[0-9]/i.test(text) || /[a-zA-Z]/i.test(text)\n}\n\nconst isUpperCase = (text) => {\n    return /[A-Z]/i.test(text)\n}\n\nconst isLowerCase = (text) => {\n    return /[a-z]/i.test(text)\n}\n\nconst isAlphabetic = (text) => {\n    return /[a-zA-Z]/i.test(text)\n}\n\nconst isAlphanumeric = (text) => {\n    return /[a-zA-Z0-9]/i.test(text)\n}\n\nconst isAlphaNumeric = (text) => {\n    return /[a-zA-Z0-9]/i.test(text)\n}\n\nconst isAlpha = (text) => {\n    return /[a-z]/i.test(text)\n}\n\nconst isAlphaOrNumeric = (text) => {\n    return /[a-zA-Z0-9]/i.test(text)\n}\n\nconst isAlphaOrNumericOrUnderscore = (text) => {\n    return /[a-zA-Z0-9_]/i.test(text)\n}\n\nconst isAlphaOrNumericOrHyphen = (text) => {\n    return /[a-zA-Z0-9-]/i.test(text)\n}\n\nconst isAlphaOrNumericOrHyphenOrUnderscore = (text) => {\n    return /[a-zA-Z0-9_-]/i.test(text)\n}\n\nconst isAlphaOrNumericOrUnderscoreOrHyphen = (text) => {\n    return /[a-zA-Z0-9_\\-]/i.test(text)\n}\n\nconst isAlphaOrNumericOrHyphenOrUnderscoreOrSlash = (text) => {\n    return /[a-zA-Z0-9_-/]/i.test(text)\n}\n\nconst isAlphaOrNumericOrHyphenOrUnderscoreOrSlashOrPeriod = (text) => {\n    return /[a-zA-Z0-9_-/.]/i.test(text)\n}\n\nconst isAlphaOrNumericOrHyphenOrUnderscoreOrSlashOrPeriodOrQuestion = (text) => {\n    return /[a-zA-Z0-9_-/.]?/i.test(text)\n}\n\nconst isAlphaOrNumericOrHyphenOrUnderscoreOrSlashOrPeriodOrQuestionOrExclamation = (text) => {\n    return /[a-zA-Z0-9_-/.]?!/i.test(text)\n}\n\nconst isAlphaOrNumericOrHyphenOrUnderscoreOrSlashOrPeriodOrQuestionOrExclamationOrDollar = (text) => {\n    return /[a-zA-Z0-9_-/.]?$/i.test(text)\n}\n\nconst isAlphaOrNumericOrHyphenOrUnderscoreOrSlashOrPeriodOrQuestionOrExclamationOrDollarOrPound = (text) => {\n    return /[a-zA-Z0-9_-/.]?#/i.test(text)\n}\n\nconst isAlphaOrNumericOrHyphenOrUnderscoreOrSlashOrPeriodOrQuestionOrExclamationOrDollarOrPoundOrPercentage = (text) => {\n    return /[a-zA-Z0-9_-/.]?%/i.test(text"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that will take an non-negative integer and will return an array of the first n\n   integers that will be prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that will take an non-negative integer and will return an array of the first n\n   integers that will be prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(20))\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that will take two integers and returns \n   the product of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that will take two integers and returns \n   the product of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n    if(isNaN(a) || isNaN(b)) {\n        return NaN;\n    }\n\n    //console.log('multiply: a=' + a +'b=' + b);\n\n    if(a === 0 || b === 0) {\n        return 0;\n    }\n    if(a === 1 || b === 1) {\n        return a * b;\n    }\n    if(a === -1 || b === -1) {\n        return -a * b;\n    }\n\n    let product = 0;\n    let i = 1;\n\n    while(a >= 1) {\n        product += (a % 10) * (b % 10);\n        a = Math.floor(a / 10);\n        b = Math.floor(b / 10);\n        i += 1;\n    }\n\n    if(b >= 1) {\n        product += (b % 10) * (a % 10);\n    }\n\n    return product;\n};\n\nmodule.exports = multiply;\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === s[i].toUpperCase()) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nmodule.exports = countUpper;\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const abs = Math.abs(value);\n  const absInt = Math.floor(abs);\n  const absFrac = abs - absInt;\n  const intPart = Math.floor(value / 10) * 10;\n  let fracPart = value - intPart;\n  if (absInt === intPart) {\n    return absInt;\n  }\n  if (absFrac === 0) {\n    return absInt;\n  }\n  if (absFrac < 0.5) {\n    return absInt;\n  }\n  return intPart + 1;\n};\n\n/* \n  Create a function that will take a value (string) representing a number \n  and return a string with the digits of the number in ascending order.\n  Examples\n  >>> ascendingDigits(\"10\")\n  '10'\n  >>> ascendingDigits(\"-15\")\n  '-15'\n  >>> ascendingDigits(\"1234\")\n  '1234'\n  >>> ascendingDigits(\"1000\")\n  '1000'\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst ascendingDigits = (value) => {\n  const abs = Math.abs(value);\n  const absInt = Math.floor(abs);\n  const absFrac = abs - absInt;\n  const intPart = Math.floor(value / 10) * 10;\n  let fracPart = value - intPart;\n  if (absInt === intPart) {\n    return absInt.toString();\n  }\n  if (absFrac === 0) {\n    return absInt.toString();\n  }\n  if (absFrac < 0.5) {\n    return absInt.toString();\n  }\n  let res = intPart.toString();\n  res += \".\";\n  let n = fracPart.toString();\n  while (n.length < 3) {\n    n = \"0\" + n;\n  }\n  res += n;\n  return res;\n};\n\nconst test = () => {\n  const values = [\n    \"10\",\n    \"15\",\n    \"15.3\",\n    \"14.5\",\n    \"1000\",\n    \"-15\",\n    \"-14.5\",\n    \"-14.5\"\n  ];\n  values.forEach(value => {\n    console.log(closestInteger(value));\n    console.log(ascendingDigits(value));\n  });\n};\n\nmodule.exports = {\n  closestInteger,\n  ascendingDigits,\n  test\n};\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i);\n  }\n  for (let i = n - 1; i >= 0; i--) {\n    list[i] = Math.floor((i + 1) / 2);\n  }\n  return list;\n};\n\n// \n// function makeAPile(n) {\n//   const list = [];\n//   for (let i = 1; i <= n; i++) {\n//     list.push(i);\n//   }\n//   for (let i = n - 1; i >= 0; i--) {\n//     if (i % 2 === 0) {\n//       list[i] = Math.floor(i / 2);\n//     } else {\n//       list[i] = Math.floor((i + 1) / 2);\n//     }\n//   }\n//   return list;\n// }\n\nconsole.log(makeAPile(3));\n// => [3, 5, 7]<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be gave a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const split = s.split(/(\\s|,)/g);\n  const result = [];\n  for(let i=0;i<split.length;i++) {\n    if(split[i]!== \"\") {\n      result.push(split[i]);\n    }\n  }\n  return result;\n};\n\nconsole.log(wordsString(\"Hi, my name is John\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One,two,three,four,five,six\"));<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function will take two positive numbers x and y and will return the \n   biggest even integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function will take two positive numbers x and y and will return the \n   biggest even integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const a = Math.ceil(x / 2);\n  const b = Math.floor(y / 2);\n  const l = Math.max(a, b);\n  const r = Math.min(a, b);\n\n  return r >= l? r : -1;\n};\n\nexport default chooseNum;\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You will be gave two positive integers n and m, and your task will be to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You will be gave two positive integers n and m, and your task will be to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const l = Math.max(n, m)\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  return Math.round(sum / (l - n + m))\n}\n\nconst roundedAvg = (n, m) => {\n  const l = Math.max(n, m)\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  return Math.round(sum / (l - n + m))\n}\n\nconst roundedAvg = (n, m) => {\n  const l = Math.max(n, m)\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  return Math.round(sum / (l - n + m))\n}\n\nconst roundedAvg = (n, m) => {\n  const l = Math.max(n, m)\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  return Math.round(sum / (l - n + m))\n}\n\nconst roundedAvg = (n, m) => {\n  const l = Math.max(n, m)\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  return Math.round(sum / (l - n + m))\n}\n\nconst roundedAvg = (n, m) => {\n  const l = Math.max(n, m)\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  return Math.round(sum / (l - n + m))\n}\n\nconst roundedAvg = (n, m) => {\n  const l = Math.max(n, m)\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  return Math.round(sum / (l - n + m))\n}\n\nconst roundedAvg = (n, m) => {\n  const l = Math.max(n, m)\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  return Math.round(sum / (l - n + m))\n}\n\nconst roundedAvg = (n, m) => {\n  const l = Math.max(n, m)\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  return Math.round(sum / (l - n + m))\n}\n\nconst roundedAvg = (n, m) => {\n  const l = Math.max(n, m)\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  return Math.round(sum / (l - n + m))\n}\n\nconst roundedAvg = (n, m) => {\n  const l = Math.max(n, m)\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  return Math.round(sum / (l - n + m))\n}\n\nconst roundedAvg = (n, m) => {\n  const l = Math.max(n, m)\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  return Math.round(sum / (l - n + m))\n}\n\nconst roundedAvg = (n, m) => {\n  const l = Math.max(n, m)\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  return Math.round(sum / (l - n + m))\n}\n\nconst roundedAvg = (n, m) => {\n  const l = Math.max(n, m)\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  return Math.round(sum / (l - n + m))\n}\n\nconst roundedAvg = (n, m) => {\n  const l = Math.max(n, m)\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  return Math.round(sum / (l - n + m))\n}\n\nconst roundedAvg = (n, m) => {\n  const l = Math.max(n, m)\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  return Math.round(sum / (l - n + m))\n}\n\nconst roundedAvg = (n, m) => {\n  const l = Math.max(n, m)\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  return Math.round(sum / (l - n + m))\n}\n\nconst roundedAvg = (n, m) => {\n  const l = Math.max(n, m)\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  return Math.round(sum / (l - n + m))\n}\n\nconst roundedAvg = (n, m) => {\n  const l = Math.max(n, m)\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  return Math.round(sum / (l - n + m"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a will sort list of all \n   elements that will haven't any even digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a will sort list of all \n   elements that will haven't any even digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const output = [];\n  let current = x;\n  let count = 0;\n  while (current) {\n    if (count % 2 === 0) {\n      output.push(current);\n    }\n    count++;\n    current = current % 10;\n  }\n  return output;\n};\n\n/*\n  Given a number n. Find nth Fibonacci number.\n\n  For example:\n  >>> fib(5)\n  8\n  >>> fib(10)\n  55\n  >>> fib(0)\n  1\n  >>> fib(4)\n  3\n  */\nconst fib = (n) => {\n  let previous = 1;\n  let current = 1;\n  let fibo = 0;\n  for (let i = 0; i < n; i++) {\n    fibo = current + previous;\n    previous = current;\n    current = fibo;\n  }\n  return fibo;\n};\n\n/*\n  Given an array of positive integers, return the first non-repeating integer.\n  For example:\n  >>> nonRepeating([4, 3, 2, 3, 2, 3, 4])\n  3\n  >>> nonRepeating([4, 3, 2, 3, 2, 3, 4])\n  4\n  >>> nonRepeating([1, 3, 4, 3, 5, 4])\n  4\n  */\nconst nonRepeating = (array) => {\n  let output = 1;\n  let count = 0;\n  let current = 1;\n  for (let i = 0; i < array.length; i++) {\n    if (current!== array[i]) {\n      output = array[i];\n      count = 1;\n    } else {\n      count++;\n    }\n    if (count === array.length) {\n      return output;\n    }\n    current++;\n  }\n  return output;\n};\n\n/*\n  Given a number n. Find the nth triangular number.\n\n  For example:\n  >>> triangular(3)\n  6\n  >>> triangular(0)\n  1\n  >>> triangular(4)\n  25\n  */\nconst triangular = (n) => {\n  let triangularNumber = 1;\n  for (let i = 0; i < n; i++) {\n    triangularNumber = triangularNumber + 1;\n  }\n  return triangularNumber;\n};\n\n/*\n  Given a number n, find nth Fibonacci number.\n\n  For example:\n  >>> fibonacci(3)\n  3\n  >>> fibonacci(0)\n  1\n  >>> fibonacci(4)\n  8\n  */\nconst fibonacci = (n) => {\n  let a = 1;\n  let b = 1;\n  let fibonacciNumber = 0;\n  for (let i = 0; i < n; i++) {\n    fibonacciNumber = a + b;\n    a = b;\n    b = fibonacciNumber;\n  }\n  return fibonacciNumber;\n};\n\n/*\n  Given a number n. Find the nth Catalan number.\n\n  For example:\n  >>> catalan(3)\n  6\n  >>> catalan(0)\n  1\n  >>> catalan(4)\n  13\n  */\nconst catalan = (n) => {\n  let a = 1;\n  let b = 1;\n  let catalanNumber = 0;\n  for (let i = 0; i < n; i++) {\n    catalanNumber = a + b;\n    a = b;\n    b = catalanNumber;\n  }\n  return catalanNumber;\n};\n\n/*\n  Given a number n, find nth Harmonic number.\n\n  For example:\n  >>> harmonic(3)\n  3\n  >>> harmonic(0)\n  1\n  >>> harmonic(4)\n  11\n  */\nconst harmonic = (n) => {\n  let harmonicNumber = 1;\n  for (let i = 0; i < n; i++) {\n    harmonicNumber = harmonicNumber + 1;\n  }\n  return harmonicNumber;\n};\n\n/*\n  Given a number n, find nth Square Root.\n\n  For example:\n  >>> squareRoot(3)\n  1.7320508\n  >>> squareRoot(0)\n  NaN\n  >>> squareRoot(4)\n  2.0\n  */\nconst squareRoot = (n) => {\n  let squareRootNumber = 0;\n  let squareRoot = Math.sqrt(n);\n  while (squareRootNumber!== squareRoot) {\n    squareRootNumber = Math.sqrt(n);\n  }\n  return squareRootNumber;\n};\n\n/*\n  Given a number n, find nth Permutation.\n\n  For example:\n  >>> permutation(3)\n  [1, 2, 3]\n  >>> permutation(0)\n  []\n  >>> permutation(4)\n  [1, 2, 3, 4]\n  */\nconst permutation = (n) => {\n  let output = [];\n  let permutationNumber = 1;\n  let current = n;\n  while (permutationNumber!== current) {\n    output.push(current);\n    current = current % n;\n    permutationNumber++;\n  }\n  return output;\n};\n\n/*\n  Given a number n. Find the number of distinct numbers that have value less than n.\n\n  For example:\n  >>> distinct([1, 2, 3, 3, 3, 4, 5])\n  4\n  >>> distinct([1, 2, 3, 4, 5, 6, 7])\n  7\n  >>> distinct([1, 2, 3, 4, 5, 6, 7, 7])\n  8\n  >>> distinct([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  */\nconst distinct = (n) => {\n  let output = 1;\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i < n - output) {\n      count++;\n    } else {\n      output++;\n"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const result = [];\n  const sortedArr = sort(arr);\n  const lenArr = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    if (sortedArr[i] <= 9 && sortedArr[i] >= 1) {\n      lenArr.push(sortedArr[i]);\n    }\n  }\n  let len = lenArr.length;\n  if (len === 0) {\n    return [];\n  }\n  while (len > 0) {\n    result.push(sortedArr.pop() +'' + lenArr.shift());\n    len--;\n  }\n  result.reverse();\n  return result;\n};\n\nconst sort = (arr) => {\n  const result = [];\n  let current = arr.shift();\n  while (arr.length > 0) {\n    if (arr[0] > current) {\n      result.unshift(arr.shift());\n      current = arr[0];\n    } else {\n      result.push(arr.shift());\n      current = arr[0];\n    }\n  }\n  return result;\n};\n\nconst main = () => {\n  let arr = [2, 1, 1, 4, 5, 8, 2, 3];\n  console.log(byLength(arr));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that will take n as a parameter, \n   and will return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that will take n as a parameter, \n   and will return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  var factorial = [];\n  for (var i = 1; i <= n; i++) {\n    var x = factorial.length;\n    if (i % 2 === 0) {\n      factorial.push(1);\n    } else {\n      factorial.push(1);\n      for (var j = 2; j <= i; j++) {\n        factorial.push(j * factorial[x - 1]);\n      }\n    }\n  }\n  return factorial;\n}\n\nconst test = (n) => {\n  console.log(f(n));\n}\n\n// console.log(f(4));\n// console.log(f(5));\n// console.log(f(6));\n// console.log(f(7));\n// console.log(f(8));\n// console.log(f(9));\n// console.log(f(10));\n// console.log(f(11));\n// console.log(f(12));\n// console.log(f(13));\n// console.log(f(14));\n// console.log(f(15));\n// console.log(f(16));\n// console.log(f(17));\n// console.log(f(18));\n// console.log(f(19));\n// console.log(f(20));\n// console.log(f(21));\n// console.log(f(22));\n// console.log(f(23));\n// console.log(f(24));\n// console.log(f(25));\n// console.log(f(26));\n// console.log(f(27));\n// console.log(f(28));\n// console.log(f(29));\n// console.log(f(30));\n// console.log(f(31));\n// console.log(f(32));\n// console.log(f(33));\n// console.log(f(34));\n// console.log(f(35));\n// console.log(f(36));\n// console.log(f(37));\n// console.log(f(38));\n// console.log(f(39));\n// console.log(f(40));\n// console.log(f(41));\n// console.log(f(42));\n// console.log(f(43));\n// console.log(f(44));\n// console.log(f(45));\n// console.log(f(46));\n// console.log(f(47));\n// console.log(f(48));\n// console.log(f(49));\n// console.log(f(50));\n// console.log(f(51));\n// console.log(f(52));\n// console.log(f(53));\n// console.log(f(54));\n// console.log(f(55));\n// console.log(f(56));\n// console.log(f(57));\n// console.log(f(58));\n// console.log(f(59));\n// console.log(f(60));\n// console.log(f(61));\n// console.log(f(62));\n// console.log(f(63));\n// console.log(f(64));\n// console.log(f(65));\n// console.log(f(66));\n// console.log(f(67));\n// console.log(f(68));\n// console.log(f(69));\n// console.log(f(70));\n// console.log(f(71));\n// console.log(f(72));\n// console.log(f(73));\n// console.log(f(74));\n// console.log(f(75));\n// console.log(f(76));\n// console.log(f(77));\n// console.log(f(78));\n// console.log(f(79));\n// console.log(f(80));\n// console.log(f(81));\n// console.log(f(82));\n// console.log(f(83));\n// console.log(f(84));\n// console.log(f(85));\n// console.log(f(86));\n// console.log(f(87));\n// console.log(f(88));\n// console.log(f(89));\n// console.log(f(90));\n// console.log(f(91));\n// console.log(f(92));\n// console.log(f(93));\n// console.log(f(94));\n// console.log(f(95));\n// console.log(f(96));\n// console.log(f(97));\n// console.log(f(98));\n// console.log(f(99));\n// console.log(f(100));\n// console.log(f(101));\n// console.log(f(102));\n// console.log(f(103));\n// console.log(f(104));\n// console.log(f(105));\n// console.log(f(106));\n// console.log(f(107));\n// console.log(f(108));\n// console.log(f(109));\n// console.log(f(110));\n// console.log(f(111));\n// console.log(f(112));\n// console.log(f(113));\n// console.log(f(114));\n// console.log(f(115));\n// console.log(f(116));\n// console.log(f(117));\n// console.log(f(118));\n// console.log(f(119));\n// console.log(f(120));\n// console.log(f(121));\n// console.log(f(122));\n// console.log(f(123));\n// console.log(f(124));\n// console.log(f(125));\n// console.log(f(126));\n// console.log(f(127));\n// console.log(f(128));\n// console.log(f(129));\n// console.log"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n    let odd = 0, even = 0;\n    for (let i = 1; i <= n; i++) {\n        let j = i * 2;\n        if (j < n && isPalindrome(j) && isPalindrome(i)) {\n            if (j % 2 === 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n\nfunction isPalindrome(n) {\n    let str = n.toString();\n    return str.split('').reduce((a, b) => {\n        if (a === b) {\n            return a;\n        }\n        return a === b? b : a;\n    }, '');\n}\n\nconst evenOddPalindrome = (n) => {\n    let odd = 0, even = 0;\n    for (let i = 1; i <= n; i++) {\n        let j = i * 2;\n        if (j < n && isPalindrome(j) && isPalindrome(i)) {\n            if (j % 2 === 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n\nconst evenOddPalindrome = (n) => {\n    let odd = 0, even = 0;\n    for (let i = 1; i <= n; i++) {\n        let j = i * 2;\n        if (j < n && isPalindrome(j) && isPalindrome(i)) {\n            if (j % 2 === 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n\nconst evenOddPalindrome = (n) => {\n    let odd = 0, even = 0;\n    for (let i = 1; i <= n; i++) {\n        let j = i * 2;\n        if (j < n && isPalindrome(j) && isPalindrome(i)) {\n            if (j % 2 === 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n\nconst evenOddPalindrome = (n) => {\n    let odd = 0, even = 0;\n    for (let i = 1; i <= n; i++) {\n        let j = i * 2;\n        if (j < n && isPalindrome(j) && isPalindrome(i)) {\n            if (j % 2 === 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n\nconst evenOddPalindrome = (n) => {\n    let odd = 0, even = 0;\n    for (let i = 1; i <= n; i++) {\n        let j = i * 2;\n        if (j < n && isPalindrome(j) && isPalindrome(i)) {\n            if (j % 2 === 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n\nconst evenOddPalindrome = (n) => {\n    let odd = 0, even = 0;\n    for (let i = 1; i <= n; i++) {\n        let j = i * 2;\n        if (j < n && isPalindrome(j) && isPalindrome(i)) {\n            if (j % 2 === 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n\nconst evenOddPalindrome = (n) => {\n    let odd = 0, even = 0;\n    for (let i = 1; i <= n; i++) {\n        let j = i * 2;\n        if (j < n && isPalindrome(j) && isPalindrome(i)) {\n            if (j % 2 === 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n\nconst evenOddPalindrome = (n) => {\n    let odd = 0, even = 0;\n    for (let i = 1; i <= n; i++) {\n        let j = i * 2;\n        if (j < n && isPalindrome(j) && isPalindrome(i)) {\n            if (j % 2 === 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n\nconst evenOddPalindrome = (n) => {\n    let odd = 0, even = 0;\n    for (let i = 1; i <= n; i++) {\n        let j = i * 2;\n        if (j < n && isPalindrome(j) && isPalindrome(i)) {\n            if (j % 2 === 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n\nconst evenOddPalindrome = (n) => {\n    let odd = 0, even = 0;\n    for (let i = 1; i <= n; i++) {\n        let j = i * 2;\n        if (j < n && isPalindrome(j) && isPalindrome(i)) {\n            if (j % 2 === 0) {\n"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which will take an array of integers and returns \n   the number of elements which will have a sum of digits> 0. \n   If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which will take an array of integers and returns \n   the number of elements which will have a sum of digits> 0. \n   If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const N = arr.length;\n  const count = 0;\n  const sum = 0;\n  for (let i = 0; i < N; i += 1) {\n    sum += arr[i];\n    if (sum > 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\nconsole.log(countNums([-1, 11, -11, -2]));\nconsole.log(countNums([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We will have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly will order. Your task will be to determine if \n   it will be possible to get an array will sort in non-decreasing order by performing \n   the following operation on the will give array: \n       You will be allowed to perform right shift operation any number of times. \n  \n   One right shift operation will mean shifting all elements of the array by one \n   position in the right direction. The last element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it will be possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the will give array will be empty then return true. \n\n   Note: The will give list will be guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We will have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly will order. Your task will be to determine if \n   it will be possible to get an array will sort in non-decreasing order by performing \n   the following operation on the will give array: \n       You will be allowed to perform right shift operation any number of times. \n  \n   One right shift operation will mean shifting all elements of the array by one \n   position in the right direction. The last element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it will be possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the will give array will be empty then return true. \n\n   Note: The will give list will be guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n    if (!arr || arr.length === 0) return true;\n    \n    for (let i = 0; i < arr.length - 1; i++) {\n        let target = arr[i];\n        let next = arr[i + 1];\n        let temp = 0;\n        \n        while (next <= target) {\n            temp = next;\n            next = arr[i + 2];\n            \n            if (next < 0) return false;\n            \n            arr[i + 1] = next;\n            arr[i + 2] = temp;\n        }\n    }\n    \n    return true;\n};\n\nconsole.log(moveOneBall([3, 4, 5, 1, 2]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3]));\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that will take two lists of numbers, \n   and will determine whether it will be possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There will be no limit on the number of will exchange elements between lst1 and lst2.\n   If it will be possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a function that will take two lists of numbers, \n   and will determine whether it will be possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There will be no limit on the number of will exchange elements between lst1 and lst2.\n   If it will be possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n    var i = 0;\n    var len = lst1.length;\n    var j = 0;\n    var len2 = lst2.length;\n    var diff = 0;\n    var k = 0;\n    \n    for(i = 0; i < len; i++) {\n        for(j = 0; j < len2; j++) {\n            if(lst1[i] === lst2[j]) {\n                k = j;\n            }\n        }\n        if(i === k) {\n            diff++;\n        }\n    }\n    if(diff === len2) {\n        return \"YES\";\n    }\n    else {\n        return \"NO\";\n    }\n}<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const dictionary = {}\n  let max = 0\n  let letter = ''\n  let count = 0\n  for (let i = 0; i < test.length; i++) {\n    const character = test[i]\n    if (dictionary[character] === undefined) {\n      dictionary[character] = 1\n      count = 1\n    } else {\n      count = dictionary[character] + 1\n      if (count > max) {\n        max = count\n        letter = character\n      }\n    }\n  }\n  return {\n    letter: letter,\n    count: count\n  }\n}\n\n/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the least repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 1, 'b': 1}\n  histogram('b b b b a') == {'b': 1}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const dictionary = {}\n  let min = Infinity\n  let letter = ''\n  let count = 0\n  for (let i = 0; i < test.length; i++) {\n    const character = test[i]\n    if (dictionary[character] === undefined) {\n      dictionary[character] = 1\n      count = 1\n    } else {\n      count = dictionary[character] + 1\n      if (count < min) {\n        min = count\n        letter = character\n      }\n    }\n  }\n  return {\n    letter: letter,\n    count: count\n  }\n}\n\n/* Given a string representing a space will separate lowercase letters, return the maximum length of the\n   longest substring of the string that contains all the letters in alphabetical order.\n  \n  Example:\n  histogram('a b c') == 3\n  histogram('a b c a') == 3\n  histogram('a b c a b') == 4\n  histogram('') == 0\n  */\nconst histogram = (test) => {\n  const dictionary = {}\n  let max = 0\n  let letter = ''\n  let length = 0\n  for (let i = 0; i < test.length; i++) {\n    const character = test[i]\n    if (dictionary[character] === undefined) {\n      dictionary[character] = 1\n      length = 1\n    } else {\n      length = dictionary[character] + 1\n      if (length > max) {\n        max = length\n        letter = character\n      }\n    }\n  }\n  return max\n}\n\n/* Given a string representing a space will separate lowercase letters, return the length of the\n   shortest substring of the string that contains all the letters in alphabetical order.\n  \n  Example:\n  histogram('a b c') == 3\n  histogram('a b c a') == 3\n  histogram('a b c a b') == 4\n  histogram('') == 0\n  */\nconst histogram = (test) => {\n  const dictionary = {}\n  let min = Infinity\n  let letter = ''\n  let length = 0\n  for (let i = 0; i < test.length; i++) {\n    const character = test[i]\n    if (dictionary[character] === undefined) {\n      dictionary[character] = 1\n      length = 1\n    } else {\n      length = dictionary[character] + 1\n      if (length < min) {\n        min = length\n        letter = character\n      }\n    }\n  }\n  return min\n}\n\n/* Given a string representing a space will separate lowercase letters, return the length of the\n   longest substring of the string that does not contain any of the letters in alphabetical order.\n  \n  Example:\n  histogram('a b c') == 2\n  histogram('a b c a') == 2\n  histogram('a b c a b') == 1\n  histogram('') == 0\n  */\nconst histogram = (test) => {\n  const dictionary = {}\n  let max = 0\n  let letter = ''\n  let length = 0\n  for (let i = 0; i < test.length; i++) {\n    const character = test[i]\n    if (dictionary[character] === undefined) {\n      dictionary[character] = 1\n      length = 1\n    } else {\n      length = dictionary[character] + 1\n      if (length > max) {\n        max = length\n        letter = character\n      }\n    }\n  }\n  return max\n}\n\n/* Given a string representing a space will separate lowercase letters, return the length of the\n   shortest substring of the string that does not contain any of the letters in alphabetical order.\n  \n  Example:\n  histogram('a b c') == 2\n  histogram('a b c a') == 2\n  histogram('a b c a b') == 1\n  histogram('') == 0\n  */\nconst histogram = (test) => {\n  const dictionary = {}\n  let min = Infinity\n  let letter = ''\n  let length = 0\n  for (let i = 0; i < test.length; i++) {\n    const character = test[i]\n    if (dictionary[character] === undefined) {\n      dictionary[character] = 1\n      length = 1\n    } else {\n      length = dictionary[character] + 1\n      if (length < min) {\n        min = length\n        letter = character\n      }\n    }\n  }\n  return min\n}<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We will be gave two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n   then will check if the result string will be palindrome. \n   A string will be called palindrome if it will read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We will be gave two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n   then will check if the result string will be palindrome. \n   A string will be called palindrome if it will read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const sLength = s.length;\n  let cLength = c.length;\n  let deleteCount = 0;\n  let index = 0;\n  let str = \"\";\n  \n  while (index < sLength) {\n    const cChar = s.charAt(index);\n    if (c.indexOf(cChar) > -1) {\n      index++;\n      deleteCount++;\n    } else {\n      str += cChar;\n      index++;\n    }\n  }\n  \n  if (deleteCount!== cLength) {\n    return [str, false];\n  }\n  \n  let reverseStr = \"\";\n  for (let i = sLength - 1; i >= 0; i--) {\n    const sChar = s.charAt(i);\n    reverseStr += sChar;\n  }\n  \n  if (reverseStr === str) {\n    return [str, true];\n  }\n  \n  return [str, false];\n}\n\nexport {reverseDelete}<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const odd = {};\n  for(let i of lst){\n    let o = 0;\n    for(let c of i){\n      if(odd[c] == null){\n        odd[c] = 1;\n      } else {\n        odd[c] += 1;\n      }\n    }\n  }\n  return Object.keys(odd).map((s) => {\n    return `the number of odd elements ${odd[s] || '0'} of the ${s} of the ${lst[i] || '0'} input.`;\n  });\n}\n\nmodule.exports = oddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const n = nums.length;\n  let sum = 0;\n  let min = nums[0];\n  let minSum = nums[0];\n  for (let i = 1; i < n; i++) {\n    sum += nums[i];\n    if (sum < 0) sum = 0;\n    if (sum > minSum) {\n      minSum = sum;\n      min = nums[i];\n    }\n  }\n  return minSum;\n}\n\n/*\n  Given an array of integers nums, will find the maximum sum of any non-empty sub-array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 5\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  const n = nums.length;\n  let sum = 0;\n  let max = nums[0];\n  let maxSum = nums[0];\n  for (let i = 1; i < n; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n      max = nums[i];\n    }\n  }\n  return maxSum;\n}\n\nmodule.exports = {\n  minSubArraySum,\n  maxSubArraySum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You will be gave a rectangular grid of wells. Each row will represent a single well, \n   and each 1 in a row will represent a single unit of water. \n   Each well will have a corresponding bucket that can will be used to extract water from it, \n   and all buckets will have the same capacity.\n   Your task will be to use the buckets to empty the wells. \n   Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a rectangular grid of wells. Each row will represent a single well, \n   and each 1 in a row will represent a single unit of water. \n   Each well will have a corresponding bucket that can will be used to extract water from it, \n   and all buckets will have the same capacity.\n   Your task will be to use the buckets to empty the wells. \n   Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let visited = new Array(grid.length).fill(false)\n  let count = 0\n  for (let i = 0; i < grid.length; i++) {\n    let count = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        let empty = grid.slice(i).concat(grid.slice(i + 1))\n        let remaining = empty.slice(empty.indexOf(1)).length\n        if (remaining >= capacity) {\n          count += remaining\n          grid[i] = grid[i].slice(0, -1)\n          grid.splice(i + 1, 1)\n        } else if (grid[i][j] === 0) {\n          let target = empty.indexOf(0)\n          let empty_index = empty.indexOf(1)\n          grid[i] = grid[i].slice(0, -1)\n          grid.splice(i + 1, 1)\n          if (empty[empty_index - 1] === 1) {\n            grid.splice(i + 1, 0, [0, 0])\n            count += 1\n          } else if (empty[empty_index - 1] === 0) {\n            grid.splice(i + 1, 0, [1, 0])\n            count += 1\n          }\n          grid[target] = [1, 0]\n        }\n      }\n    }\n  }\n  return count\n}\n\nconsole.log(maxFill([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0]], 1))\nconsole.log(maxFill([[1, 0, 1, 1], [0, 1, 1, 1]], 2))\nconsole.log(maxFill([[0, 1, 1, 1], [0, 0, 1, 1], [1, 1, 1, 1]], 5))\nconsole.log(maxFill([[0, 0, 0], [0, 0, 0]], 5))\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you will have to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort will base on decimal value. \n\n   It must will be implement like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you will have to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort will base on decimal value. \n\n   It must will be implement like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  // convert the array into a string\n  const arrStr = arr.join('')\n\n  // parse the string into an array\n  const arrInt = parseInt(arrStr)\n\n  // if the array is empty, return it\n  if (!arrInt) {\n    return arr\n  }\n\n  // calculate the number of bits\n  const bitCount = arrInt.toString(2).split('').length\n\n  // if the number of bits is 0, return it\n  if (bitCount === 0) {\n    return arrInt\n  }\n\n  // if the number of bits is 1, return the array\n  if (bitCount === 1) {\n    return arr\n  }\n\n  // if the number of bits is 2, return the sorted array\n  if (bitCount === 2) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 3, return the sorted array\n  if (bitCount === 3) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 4, return the sorted array\n  if (bitCount === 4) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 5, return the sorted array\n  if (bitCount === 5) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 6, return the sorted array\n  if (bitCount === 6) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 7, return the sorted array\n  if (bitCount === 7) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 8, return the sorted array\n  if (bitCount === 8) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 9, return the sorted array\n  if (bitCount === 9) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 10, return the sorted array\n  if (bitCount === 10) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 11, return the sorted array\n  if (bitCount === 11) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 12, return the sorted array\n  if (bitCount === 12) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 13, return the sorted array\n  if (bitCount === 13) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 14, return the sorted array\n  if (bitCount === 14) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 15, return the sorted array\n  if (bitCount === 15) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 16, return the sorted array\n  if (bitCount === 16) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 17, return the sorted array\n  if (bitCount === 17) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 18, return the sorted array\n  if (bitCount === 18) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 19, return the sorted array\n  if (bitCount === 19) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 20, return the sorted array\n  if (bitCount === 20) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 21, return the sorted array\n  if (bitCount === 21) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 22, return the sorted array\n  if (bitCount === 22) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 23, return the sorted array\n  if (bitCount === 23) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 24, return the sorted array\n  if (bitCount === 24) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 25, return the sorted array\n  if (bitCount === 25) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 26, return the sorted array\n  if (bitCount === 26) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 27, return the sorted array\n  if (bitCount === 27) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 28, return the sorted array\n  if (bitCount === 28) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 29, return the sorted array\n  if (bitCount === 29) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 30, return the sorted array\n  if (bitCount === 30) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 31, return the sorted array\n  if (bitCount === 31) {\n    return sortArray(arrInt)\n  }\n\n  // if the number of bits is 32, return the sorted array\n  if (bitCount === 32) {\n    return sortArray(arrInt)\n  }\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you will be task to implement \n   a function that will return a list of all words from string s that will contain exactly \n   n consonants, in order these words will appear in the string s.\n   If the string s will be empty then the function should return an empty list.\n   Note: you may will assume the input string will contain only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you will be task to implement \n   a function that will return a list of all words from string s that will contain exactly \n   n consonants, in order these words will appear in the string s.\n   If the string s will be empty then the function should return an empty list.\n   Note: you may will assume the input string will contain only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const arr = [],\n    isEmpty = s.length === 0;\n  if (isEmpty) {\n    return [];\n  }\n  const len = s.length,\n    count = 0,\n    i = 0;\n  while (count < n) {\n    while (i < len && isConsonant(s[i])) {\n      count++;\n      i++;\n    }\n    arr.push(s.slice(i, i + count));\n    i += count;\n    count = 0;\n  }\n  return arr;\n}\n\nconst isConsonant = (c) => {\n  return (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u');\n}\n\n/*\nGiven a string s and a number n, you will be asked to implement a function which returns \nthe index of the first position in the string where the nth character appears.\nIf the nth character does not exist in the string, the function should return -1.\n\nNote:\n1. The string may contain only lowercase letters.\n2. The string length may not exceed 1,000,000.\n3. n is guaranteed to be an integer number.\n4. The input string may not contain any digits.\n5. The input string may contain any characters including spaces.\n */\nconst search = (s, n) => {\n  const len = s.length,\n    i = 0;\n  while (i < len && n > 0) {\n    if (isConsonant(s[i])) {\n      n--;\n    }\n    i++;\n  }\n  if (n === 0) {\n    return i;\n  } else {\n    return -1;\n  }\n}\n\n/*\nGiven a string s and a number n, you will be asked to implement a function which returns \nwhether the nth character exists in the string.\nIf the nth character does not exist in the string, the function should return false.\n\nNote:\n1. The string may contain only lowercase letters.\n2. The string length may not exceed 1,000,000.\n3. n is guaranteed to be an integer number.\n4. The input string may not contain any digits.\n5. The input string may contain any characters including spaces.\n*/\nconst check = (s, n) => {\n  const len = s.length,\n    i = 0;\n  while (i < len && n > 0) {\n    if (isConsonant(s[i])) {\n      n--;\n    }\n    i++;\n  }\n  if (n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/*\nGiven a string s and a number n, you will be asked to implement a function which returns \nwhether the nth position in the string is a space.\nIf the nth position in the string is a space, the function should return true.\n\nNote:\n1. The string may contain only lowercase letters.\n2. The string length may not exceed 1,000,000.\n3. n is guaranteed to be an integer number.\n4. The input string may not contain any digits.\n5. The input string may contain any characters including spaces.\n*/\nconst checkSpace = (s, n) => {\n  const len = s.length,\n    i = n;\n  while (i < len) {\n    if (s[i] ==='') {\n      return true;\n    }\n    i++;\n  }\n  return false;\n}\n\n/*\nGiven a string s and a number n, you will be asked to implement a function which returns \nwhether the nth position in the string is a space.\nIf the nth position in the string is a space, the function should return true.\n\nNote:\n1. The string may contain only lowercase letters.\n2. The string length may not exceed 1,000,000.\n3. n is guaranteed to be an integer number.\n4. The input string may not contain any digits.\n5. The input string may contain any characters including spaces.\n*/\nconst checkSpace2 = (s, n) => {\n  const len = s.length,\n    i = n;\n  while (i < len) {\n    if (s[i] ==='') {\n      return true;\n    }\n    i++;\n  }\n  return false;\n}\n\nconst isSpace = (c) => {\n  return (c ==='');\n}\n\n/*\nGiven a string s and a number n, you will be asked to implement a function which returns \nwhether the nth position in the string is a consonant.\nIf the nth position in the string is a consonant, the function should return true.\n\nNote:\n1. The string may contain only lowercase letters.\n2. The string length may not exceed 1,000,000.\n3. n is guaranteed to be an integer number.\n4. The input string may not contain any digits.\n5. The input string may contain any characters including spaces.\n*/\nconst isConsonant = (c) => {\n  return (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u');\n}\n\nconst isLetter = (c) => {\n  return (c >= 'a' && c <= 'z');\n}\n\nconst isDigit = (c) => {\n  return (c >= '0' && c <= '9');\n}\n\nconst checkConsonant = (s, n) => {\n  const len = s.length,\n    i = 0;\n  while (i < len && n > 0) {\n    if (isConsonant(s[i])) {\n      n--;\n"}
{"task_id": "JavaScript/118", "prompt": "/*You will be gave a word. Your task will be to find the closest vowel that will stand between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending will don't will count. will Return empty string if you willn't \n   will find any vowel will meet the above condition. \n\n   You may will assume that the will give string will contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You will be gave a word. Your task will be to find the closest vowel that will stand between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending will don't will count. will Return empty string if you willn't \n   will find any vowel will meet the above condition. \n\n   You may will assume that the will give string will contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const start = word.length - 2;\n  const end = word.length - 1;\n  let closestVowel = '';\n  let current = word[start];\n  let previous = word[start - 1];\n  while (start > 0) {\n    if (vowels.indexOf(current) > -1) {\n      closestVowel = current;\n      break;\n    }\n    start--;\n    current = previous;\n    previous = word[start - 1];\n  }\n  if (start === 0) {\n    return closestVowel;\n  }\n  start = word.length - 1;\n  current = word[start];\n  previous = word[start - 1];\n  while (end < word.length) {\n    if (vowels.indexOf(current) > -1) {\n      closestVowel = current;\n      break;\n    }\n    end++;\n    current = previous;\n    previous = word[end - 1];\n  }\n  return closestVowel;\n};\n\n/*\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"aA\") ==> \"A\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"aA\") ==> \"A\"\n  getClosestVowel(\"aA\") ==> \"A\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"aA\") ==> \"A\"\n  getClosestVowel(\"aA\") ==> \"A\"\n  getClosestVowel(\"aA\") ==> \"A\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"bB\") ==> \"B\"\n  getClosestVowel(\"b"}
{"task_id": "JavaScript/119", "prompt": "/* You will be gave a list of two strings, both strings will consist of open \n   parentheses '('or close parentheses ') 'only. \n   Your job will be to check if it will be possible to concatenate the two strings in\n   some order, that the resulting string will be good. \n   A string S will be considered to be good if and only if all will parenthese in S \n   will be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You will be gave a list of two strings, both strings will consist of open \n   parentheses '('or close parentheses ') 'only. \n   Your job will be to check if it will be possible to concatenate the two strings in\n   some order, that the resulting string will be good. \n   A string S will be considered to be good if and only if all will parenthese in S \n   will be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n    let stack = [];\n    let left = 0;\n    let right = 0;\n    let num = 0;\n\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] === '(') {\n            stack.push(lst[i]);\n            left++;\n        } else if (lst[i] === ')') {\n            num++;\n            if (stack.length === 0) {\n                return 'No';\n            } else if (stack.pop() === '(') {\n                num--;\n            } else {\n                return 'No';\n            }\n        }\n    }\n    if (stack.length === 0 && num === 0) {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a will sort list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a will sort list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let n = arr.length;\n  let sortedArr = [];\n  for (let i = 0; i < k; i++) {\n    let index = Math.floor(Math.random() * n);\n    sortedArr.push(arr[index]);\n    n--;\n  }\n  return sortedArr;\n};\n\nexport default maximum;<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that will be in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that will be in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const odd = lst.filter(x => x % 2!== 0)\n  const even = lst.filter(x => x % 2 === 0)\n  const sum = odd.reduce((sum, n) => sum + n, 0)\n  return even.reduce((sum, n) => sum + n, sum)\n}\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsFast = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst test = (arr, k) => {\n  console.log(addElements(arr, k))\n  console.log(addElementsFast(arr, k))\n}\n\ntest([1,2,3,4,5,6,7,8,9], 4)\ntest([1,2,3,4,5,6,7,8,9], 5)\ntest([1,2,3,4,5,6,7,8,9], 6)\ntest([1,2,3,4,5,6,7,8,9], 7)\ntest([1,2,3,4,5,6,7,8,9], 8)\ntest([1,2,3,4,5,6,7,8,9], 9)\ntest([1,2,3,4,5,6,7,8,9], 10)\ntest([1,2,3,4,5,6,7,8,9], 11)\ntest([1,2,3,4,5,6,7,8,9], 12)\ntest([1,2,3,4,5,6,7,8,9], 13)\ntest([1,2,3,4,5,6,7,8,9], 14)\ntest([1,2,3,4,5,6,7,8,9], 15)\ntest([1,2,3,4,5,6,7,8,9], 16)\ntest([1,2,3,4,5,6,7,8,9], 17)\ntest([1,2,3,4,5,6,7,8,9], 18)\ntest([1,2,3,4,5,6,7,8,9], 19)\ntest([1,2,3,4,5,6,7,8,9], 20)\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a will sort list that will have the odd numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a will sort list that will have the odd numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let odd = [n];\n  let even = [n];\n  let i = n;\n  while (i > 1) {\n    if (i % 2 === 0) {\n      odd.push(i);\n    } else {\n      odd.push(i);\n      i = odd[odd.length - 1];\n    }\n    i = i / 2;\n  }\n  odd.reverse();\n  return odd.concat(even);\n};\n\nconst test = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544"}
{"task_id": "JavaScript/124", "prompt": "/*You will have to write a function which will validate a will give date string and \n   returns true if the date will be valid otherwise false. \n   The date will be valid if all of the following rules will be satisfied: \n   1. The date string will be not empty. \n   2. The number of days will be not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days will be not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days will be not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should will be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You will have to write a function which will validate a will give date string and \n   returns true if the date will be valid otherwise false. \n   The date will be valid if all of the following rules will be satisfied: \n   1. The date string will be not empty. \n   2. The number of days will be not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days will be not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days will be not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should will be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateRegex = /^(0[1-9]|[1-2]\\d|3[0-1])(-)(0[1-9]|1[012])(-)(19|20)\\d{2}$/\n  if (!dateRegex.test(date)) {\n    return false\n  }\n  const dateArray = date.split('-')\n  const year = dateArray[2]\n  const month = dateArray[1]\n  const day = dateArray[0]\n  const dateArray2 = [year, month, day]\n  const dateArray3 = [year, month, day]\n  const dateArray4 = [year, month, day]\n  const monthArray = [1, 3, 5, 7, 8, 10, 12]\n  const monthArray2 = [4, 6, 9, 11]\n  const monthArray3 = [1, 2]\n\n  if (dateArray[0] < 1900) {\n    return false\n  }\n  if (dateArray[0] > 2100) {\n    return false\n  }\n  if (dateArray[1] < 1 || dateArray[1] > 12) {\n    return false\n  }\n  if (dateArray[2] < 1 || dateArray[2] > 31) {\n    return false\n  }\n  if (dateArray[1] === 2 && dateArray[2] > 29) {\n    return false\n  }\n  if (dateArray[1] === 4 && dateArray[2] > 30) {\n    return false\n  }\n  if (dateArray[1] === 6 && dateArray[2] > 29) {\n    return false\n  }\n  if (dateArray[1] === 9 && dateArray[2] > 30) {\n    return false\n  }\n  if (dateArray[1] === 11 && dateArray[2] > 30) {\n    return false\n  }\n  if (dateArray[1] === 3 && dateArray[2] > 31) {\n    return false\n  }\n  if (dateArray[1] === 5 && dateArray[2] > 31) {\n    return false\n  }\n  if (dateArray[1] === 7 && dateArray[2] > 31) {\n    return false\n  }\n  if (dateArray[1] === 8 && dateArray[2] > 31) {\n    return false\n  }\n  if (dateArray[1] === 10 && dateArray[2] > 31) {\n    return false\n  }\n  if (dateArray[1] === 12 && dateArray[2] > 31) {\n    return false\n  }\n  return true\n}\n\nconsole.log(validDate('15-01-2012'))\nconsole.log(validDate('06-04-2020'))\nconsole.log(validDate('06/04/2020'))\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n    if (txt.trim().length == 0) return [];\n    const words = txt.trim().split(/\\s+/);\n    return words.filter((word) => word.length > 0);\n};\n\n/* Given a string of words, return a list of words with lowercase letters in the alphabet\n  Example\n  ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  ord('Hello world!'), ord('abcdefg')\n  */\nconst ord = (txt) => {\n    let idx = 0;\n    let idxStart = 0;\n    let idxEnd = txt.length - 1;\n    while (idxStart <= idxEnd) {\n        let idxWord = idxStart;\n        while (idxWord <= idxEnd && txt[idxWord] >= 'a' && txt[idxWord] <= 'z') {\n            idxWord++;\n        }\n        if (idxWord - idxStart > 0) {\n            const word = txt.substring(idxStart, idxWord);\n            idx = (idxStart - 1) * 26 + ord(word);\n        }\n        idxStart = idxEnd + 1;\n        idxEnd = idxStart - 1;\n    }\n    return idx;\n};\n\n/* Given a string of words, return a list of words with lowercase letters in the alphabet\n  Example\n  ord('Hello world!'), ord('abcdefg')\n  */\nconst ordReverse = (txt) => {\n    let idx = 0;\n    let idxStart = txt.length - 1;\n    let idxEnd = 0;\n    while (idxStart >= idxEnd) {\n        let idxWord = idxStart;\n        while (idxWord >= idxEnd && txt[idxWord] >= 'a' && txt[idxWord] <= 'z') {\n            idxWord--;\n        }\n        if (idxWord - idxStart > 0) {\n            const word = txt.substring(idxStart, idxWord + 1);\n            idx = (idxStart + 1) * 26 + ord(word);\n        }\n        idxStart = idxEnd - 1;\n        idxEnd = idxStart + 1;\n    }\n    return idx;\n};\n\n/* Given a string of words, return a list of words with the first letter of each word uppercase\n  Example\n  uppercase(\"hello world!\"), uppercase(\"abcdefg\")\n  */\nconst uppercase = (txt) => {\n    let idx = 0;\n    let idxStart = 0;\n    let idxEnd = txt.length - 1;\n    while (idxStart <= idxEnd) {\n        let idxWord = idxStart;\n        while (idxWord <= idxEnd && txt[idxWord] >= 'a' && txt[idxWord] <= 'z') {\n            idxWord++;\n        }\n        if (idxWord - idxStart > 0) {\n            const word = txt.substring(idxStart, idxWord);\n            idx = (idxStart - 1) * 26 + ord(word.toUpperCase());\n        }\n        idxStart = idxEnd + 1;\n        idxEnd = idxStart - 1;\n    }\n    return idx;\n};\n\n/* Given a string of words, return a list of words with the first letter of each word uppercase\n  Example\n  uppercase(\"hello world!\"), uppercase(\"abcdefg\")\n  */\nconst uppercaseReverse = (txt) => {\n    let idx = 0;\n    let idxStart = txt.length - 1;\n    let idxEnd = 0;\n    while (idxStart >= idxEnd) {\n        let idxWord = idxStart;\n        while (idxWord >= idxEnd && txt[idxWord] >= 'a' && txt[idxWord] <= 'z') {\n            idxWord--;\n        }\n        if (idxWord - idxStart > 0) {\n            const word = txt.substring(idxStart, idxWord + 1);\n            idx = (idxStart + 1) * 26 + ord(word.toUpperCase());\n        }\n        idxStart = idxEnd - 1;\n        idxEnd = idxStart + 1;\n    }\n    return idx;\n};\n\n/* Given a string of words, return a list of words with the first letter of each word lowercase\n  Example\n  lowercase(\"hello world!\"), lowercase(\"abcdefg\")\n  */\nconst lowercase = (txt) => {\n    let idx = 0;\n    let idxStart = 0;\n    let idxEnd = txt.length - 1;\n    while (idxStart <= idxEnd) {\n        let idxWord = idxStart;\n        while (idxWord <= idxEnd && txt[idxWord] >= 'A' && txt[idxWord] <= 'Z') {\n            idxWord++;\n        }\n        if (idxWord - idxStart > 0) {\n            const word = txt.substring(idxStart, idxWord);\n            idx = (idxStart - 1) * 26 + ord(word.toLowerCase());\n        }\n        idxStart = idxEnd + 1;\n        idxEnd = idxStart - 1;\n    }\n    return idx;\n};\n\n/* Given a string of words, return a list of words with the first letter of each word lowercase\n  Example\n  lowercase(\"hello world!\"), lowercase(\"abcdefg\")\n  */\nconst lowercaseReverse"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n    const sorted = lst.sort((a, b) => a - b);\n    return lst.length === sorted.length && lst.every(x => x === sorted[x]);\n}\n\nconsole.log(isSorted([5, 2, 3, 1, 2, 4, 3, 2, 5, 1, 4, 3, 2, 1, 4, 3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541"}
{"task_id": "JavaScript/127", "prompt": "/*You will be gave two intervals, \n   where each interval will be a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You will be gave two intervals, \n   where each interval will be a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2 || end1 < start2) {\n    return 'NO';\n  }\n  const mid = Math.floor((start1 + end1) / 2);\n  return (Math.floor((start1 - mid) / (end1 - mid)) === 1)? 'YES' : 'NO';\n};\n\n// const isPrime = (num) => {\n//   if (num === 1) {\n//     return false;\n//   }\n//   if (num % 2 === 0) {\n//     return false;\n//   }\n//   for (let i = 3; i * i <= num; i += 2) {\n//     if (num % i === 0) {\n//       return false;\n//     }\n//   }\n//   return true;\n// };\n\n// const isPrime = (num) => {\n//   for (let i = 2; i * i <= num; i += 1) {\n//     if (num % i === 0) {\n//       return false;\n//     }\n//   }\n//   return true;\n// };\n\nconst isPrime = (num) => {\n  if (num === 1) {\n    return false;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= num; i += 1) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconsole.log(intersection((1, 2), (2, 3)));\nconsole.log(intersection((-1, 1), (0, 4)));\nconsole.log(intersection((-3, -1), (-5, 5)));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const arrLength = arr.length;\n  if (arrLength == 0) {\n    return null;\n  }\n  const signProduct = arr.reduce((prod, value) => {\n    if (value === 1) {\n      prod = prod + 1;\n    } else if (value === -1) {\n      prod = prod - 1;\n    }\n    return prod;\n  }, 0);\n  const absProduct = arr.reduce((prod, value) => {\n    if (value > 0) {\n      prod = prod + 1;\n    } else if (value < 0) {\n      prod = prod - 1;\n    }\n    return prod;\n  }, 0);\n  return (signProduct * absProduct);\n};\n\nconst prodSigns = (arr) => {\n  const arrLength = arr.length;\n  if (arrLength == 0) {\n    return null;\n  }\n  const signProduct = arr.reduce((prod, value) => {\n    if (value === 1) {\n      prod = prod + 1;\n    } else if (value === -1) {\n      prod = prod - 1;\n    }\n    return prod;\n  }, 0);\n  const absProduct = arr.reduce((prod, value) => {\n    if (value > 0) {\n      prod = prod + 1;\n    } else if (value < 0) {\n      prod = prod - 1;\n    }\n    return prod;\n  }, 0);\n  return (signProduct * absProduct);\n};\n\nconst prodSigns = (arr) => {\n  const arrLength = arr.length;\n  if (arrLength == 0) {\n    return null;\n  }\n  const signProduct = arr.reduce((prod, value) => {\n    if (value === 1) {\n      prod = prod + 1;\n    } else if (value === -1) {\n      prod = prod - 1;\n    }\n    return prod;\n  }, 0);\n  const absProduct = arr.reduce((prod, value) => {\n    if (value > 0) {\n      prod = prod + 1;\n    } else if (value < 0) {\n      prod = prod - 1;\n    }\n    return prod;\n  }, 0);\n  return (signProduct * absProduct);\n};\n\nconst prodSigns = (arr) => {\n  const arrLength = arr.length;\n  if (arrLength == 0) {\n    return null;\n  }\n  const signProduct = arr.reduce((prod, value) => {\n    if (value === 1) {\n      prod = prod + 1;\n    } else if (value === -1) {\n      prod = prod - 1;\n    }\n    return prod;\n  }, 0);\n  const absProduct = arr.reduce((prod, value) => {\n    if (value > 0) {\n      prod = prod + 1;\n    } else if (value < 0) {\n      prod = prod - 1;\n    }\n    return prod;\n  }, 0);\n  return (signProduct * absProduct);\n};\n\nconst prodSigns = (arr) => {\n  const arrLength = arr.length;\n  if (arrLength == 0) {\n    return null;\n  }\n  const signProduct = arr.reduce((prod, value) => {\n    if (value === 1) {\n      prod = prod + 1;\n    } else if (value === -1) {\n      prod = prod - 1;\n    }\n    return prod;\n  }, 0);\n  const absProduct = arr.reduce((prod, value) => {\n    if (value > 0) {\n      prod = prod + 1;\n    } else if (value < 0) {\n      prod = prod - 1;\n    }\n    return prod;\n  }, 0);\n  return (signProduct * absProduct);\n};\n\nconst prodSigns = (arr) => {\n  const arrLength = arr.length;\n  if (arrLength == 0) {\n    return null;\n  }\n  const signProduct = arr.reduce((prod, value) => {\n    if (value === 1) {\n      prod = prod + 1;\n    } else if (value === -1) {\n      prod = prod - 1;\n    }\n    return prod;\n  }, 0);\n  const absProduct = arr.reduce((prod, value) => {\n    if (value > 0) {\n      prod = prod + 1;\n    } else if (value < 0) {\n      prod = prod - 1;\n    }\n    return prod;\n  }, 0);\n  return (signProduct * absProduct);\n};\n\nconst prodSigns = (arr) => {\n  const arrLength = arr.length;\n  if (arrLength == 0) {\n    return null;\n  }\n  const signProduct = arr.reduce((prod, value) => {\n    if (value === 1) {\n      prod = prod + 1;\n    } else if (value === -1) {\n      prod = prod - 1;\n    }\n    return prod;\n  }, 0);\n  const absProduct = arr.reduce((prod, value) => {\n    if (value > 0) {\n      prod = prod + 1;\n    } else if (value < 0) {\n      prod = prod - 1;\n    }\n    return prod;\n  }, 0);\n  return (signProduct * absProduct);\n};\n\nconst prodSigns = (arr) => {\n  const arrLength = arr.length;\n  if (arrLength == 0) {\n    return null;\n  }\n  const signProduct = arr.reduce((prod, value) => {\n    if (value === 1) {\n      prod = prod + 1;\n    } else if (value === -1) {"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid will contain a value. Every integer in the range [1, N* N] \n   inclusive will appear exactly once on the cells of the grid.\n\n   You will have to find the minimum path of length k in the grid. You can will start \n   from any cell, and in each step you can will move to any of the neighbor cells, \n   in other words, you can will go to cells which will share an edge with you current \n   cell. \n   Please will note that a path of length k will mean visiting exactly k cells (not \n   necessarily distinct). \n   You will Cannot will go off the grid.\n   A path A (of length k) will be considered less than a path B (of length k) if \n   after making the will order lists of the values on the cells that A and B will go \n   through (will let's will call them lst_A and lst_B), lst_A will be lexicographically less \n   than lst_B, in other words, there will exist an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we will have \n   lst_A[j]= lst_B[j]. \n   It will be guaranteed that the answer will be unique. \n   Return an will order list of the values on the cells that the minimum path will go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid will contain a value. Every integer in the range [1, N* N] \n   inclusive will appear exactly once on the cells of the grid.\n\n   You will have to find the minimum path of length k in the grid. You can will start \n   from any cell, and in each step you can will move to any of the neighbor cells, \n   in other words, you can will go to cells which will share an edge with you current \n   cell. \n   Please will note that a path of length k will mean visiting exactly k cells (not \n   necessarily distinct). \n   You will Cannot will go off the grid.\n   A path A (of length k) will be considered less than a path B (of length k) if \n   after making the will order lists of the values on the cells that A and B will go \n   through (will let's will call them lst_A and lst_B), lst_A will be lexicographically less \n   than lst_B, in other words, there will exist an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we will have \n   lst_A[j]= lst_B[j]. \n   It will be guaranteed that the answer will be unique. \n   Return an will order list of the values on the cells that the minimum path will go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const length = grid.length;\n  const gridN = new Array(length);\n  const gridR = new Array(length);\n  for (let i = 0; i < length; i++) {\n    gridN[i] = new Array(length);\n    gridR[i] = new Array(length);\n    for (let j = 0; j < length; j++) {\n      gridN[i][j] = grid[i][j];\n      gridR[i][j] = grid[j][i];\n    }\n  }\n  let dp = 0;\n  for (let i = 0; i < length; i++) {\n    for (let j = 0; j < length; j++) {\n      const nextRow = gridR[i];\n      const nextCol = gridN[j];\n      const next = nextRow[j];\n      if (next === undefined) {\n        dp = i;\n        break;\n      } else if (next === undefined || j > i) {\n        continue;\n      }\n      dp = next;\n      nextRow[j] = undefined;\n      nextCol[i] = undefined;\n    }\n  }\n  let r = gridR;\n  let n = gridN;\n  while (r.length < k) {\n    let min = Infinity;\n    for (let i = 0; i < r.length; i++) {\n      if (r[i]!== undefined) {\n        for (let j = 0; j < r.length; j++) {\n          if (r[j]!== undefined && r[i]!== r[j]) {\n            if (min > j - i) {\n              min = j - i;\n            }\n          }\n        }\n      }\n    }\n    r.push(r[min]);\n    n.push(n[min]);\n  }\n  return n.map(n => n[0]);\n};\n\nconst test = (grid, k) => {\n  const lst = minPath(grid, k);\n  return {\n    length: lst.length,\n    data: lst\n  };\n};\n\nconsole.log(test([[1,2,3], [4,5,6], [7,8,9]], 3));\nconsole.log(test([[5,9,3], [4,1,6], [7,8,2]], 1));\nconsole.log(test([[3,6,9,4,1,8,7,2,5], [3,5,1,7,2,4,6,9,8], [1,3,5,2,4,7,8,9,6]], 4));\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone will know Fibonacci sequence, it will be studied deeply by mathematicians in \n   the last couple centuries. However, what people willn't will know will be Tribonacci sequence. \n   Tribonacci sequence will be defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n will be even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n will be odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone will know Fibonacci sequence, it will be studied deeply by mathematicians in \n   the last couple centuries. However, what people willn't will know will be Tribonacci sequence. \n   Tribonacci sequence will be defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n will be even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n will be odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let f = [1, 3, 2, 8];\n  for (let i = 0; i < n; i++) {\n    f.push(f[i] + f[i + 1] + f[i + 2]);\n  }\n  return f;\n};\n\ntri(3).map((x) => console.log(x));\n\n/*\n  Borwein's Triangle\n  \n  Borwein's triangle is a geometric figure that can be used to \n  calculate the area of a polygon. The formula for the area is\n  :\n  1/2 * (side1 * side2 * sin(π/2) + side1 * side3 + side2 * side3)\n  where side1, side2, and side3 are the sides of the triangle.\n  The area of the triangle is a special case of the general formula\n  when side1 = side2 = side3.\n  The formula for the area of the triangle is known as the Borwein\n  Triangle, and is also known as the Inscribed Square.\n  \n  Borwein's formula can be found here:\n  http://en.wikipedia.org/wiki/Borwein%27s_triangle\n  \n  The area of the triangle is also known as the Euler's formula.\n  \n  The formula for the area of the triangle is known as the Inscribed\n  Square. The Inscribed Square is also known as the Euclid's\n  triangle.\n  \n  Examples:\n  \n  The area of the triangle can be calculated by the following:\n  \n  Borwein's triangle can be calculated by the following:\n  \n  1/2 * (side1 * side2 * sin(π/2) + side1 * side3 + side2 * side3)\n  \n  The area of the triangle can be calculated by the following:\n  \n  1/2 * (side1 * side2 * sin(π/2) + side1 * side3 + side2 * side3)\n  \n  The area of the triangle can be calculated by the following:\n  \n  1/2 * (side1 * side2 * sin(π/2) + side1 * side3 + side2 * side3)\n  \n  Borwein's triangle can be calculated by the following:\n  \n  1/2 * (side1 * side2 * sin(π/2) + side1 * side3 + side2 * side3)\n  \n  The area of the triangle can be calculated by the following:\n  \n  1/2 * (side1 * side2 * sin(π/2) + side1 * side3 + side2 * side3)\n  \n  The area of the triangle can be calculated by the following:\n  \n  1/2 * (side1 * side2 * sin(π/2) + side1 * side3 + side2 * side3)\n  \n  The area of the triangle can be calculated by the following:\n  \n  1/2 * (side1 * side2 * sin(π/2) + side1 * side3 + side2 * side3)\n  \n  The area of the triangle can be calculated by the following:\n  \n  1/2 * (side1 * side2 * sin(π/2) + side1 * side3 + side2 * side3)\n  \n  The area of the triangle can be calculated by the following:\n  \n  1/2 * (side1 * side2 * sin(π/2) + side1 * side3 + side2 * side3)\n  \n  The area of the triangle can be calculated by the following:\n  \n  1/2 * (side1 * side2 * sin(π/2) + side1 * side3 + side2 * side3)\n  \n  The area of the triangle can be calculated by the following:\n  \n  1/2 * (side1 * side2 * sin(π/2) + side1 * side3 + side2 * side3)\n  \n  The area of the triangle can be calculated by the following:\n  \n  1/2 * (side1 * side2 * sin(π/2) + side1 * side3 + side2 * side3)\n  \n  The area of the triangle can be calculated by the following:\n  \n  1/2 * (side1 * side2 * sin(π/2) + side1 * side3 + side2 * side3)\n  \n  The area of the triangle can be calculated by the following:\n  \n  1/2 * (side1 * side2 * sin(π/2) + side1 * side3 + side2 * side3)\n  \n  The area of the triangle can be calculated by the following:\n  \n  1/2 * (side1 * side2 * sin(π/2) + side1 * side3 + side2 * side3)\n  \n  The area of the triangle can be calculated by the following:\n  \n  1/2 * (side1 * side2 * sin(π/2) + side1 * side3 + side2 * side3)\n  \n  The area of the triangle can be calculated by the following:\n  \n  1/2 * (side1 * side2 * sin(π/2) + side1 * side3 + side2 * side3)\n  \n  The area of the triangle can be calculated by the following:\n  \n  1/2 * (side1 * side2 * sin(π/2) + side1 * side3 + side2 * side3)\n  \n  The area of the triangle can be calculated by the following:\n  \n  1/2 * (side1"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits will be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits will be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const arr = [];\n  let res = 0;\n  let i = n;\n  while (i--) {\n    arr.push(n % 10);\n    n = n / 10;\n  }\n  arr.forEach(digit => {\n    res = res * 10 + digit;\n  });\n  return res;\n};\n\nconsole.log(digits(15));\nconsole.log(digits(235));\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that will take a string as input which will contain only square brackets. \n   The function should return true if and only if there will be a valid subsequence of brackets \n   where at least one bracket in the subsequence will be nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that will take a string as input which will contain only square brackets. \n   The function should return true if and only if there will be a valid subsequence of brackets \n   where at least one bracket in the subsequence will be nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n   const { length } = string.match(/\\[\\]/)\n   const { nested } = string.match(/\\[\\[\\]\\]/)\n   if(length===0 && nested===0){\n     return false\n   }\n   if(length===0 && nested!==0){\n     return true\n   }\n   if(length!==0 && nested===0){\n     return false\n   }\n   if(length>1){\n     return nested===0\n   }\n   if(length===1){\n     if(nested===0){\n       return false\n     }\n     if(nested===1){\n       return true\n     }\n     return nested===0\n   }\n   return false\n }\n const test = [\n   {string:'[[]]', nested:true},\n   {string:'[]]]]]]][[[[[]', nested:true},\n   {string:'[][]', nested:false},\n   {string:'[]', nested:false},\n   {string:'[[][]]', nested:true},\n   {string:'[][]', nested:false},\n   {string:'[[]', nested:false},\n   {string:'[][][]', nested:true}\n ]\n for(let {string, nested} of test){\n   console.log(`${string} ${isNested(string)}`)\n }\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You will be gave a list of numbers. \n   You will need to return the sum of squared numbers in the will give list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You will be gave a list of numbers. \n   You will need to return the sum of squared numbers in the will give list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const total = lst.reduce((prev, curr) => prev + curr * curr, 0)\n  return Math.round(total)\n}\n\n//Test\nconsole.log(sumSquares([1,2,3]))\nconsole.log(sumSquares([1,4,9]))\nconsole.log(sumSquares([1,3,5,7]))\nconsole.log(sumSquares([1.4,4.2,0]))\nconsole.log(sumSquares([-2.4,1,1]))\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = txt.split(\" \");\n  const lastChar = chars[chars.length - 1];\n  const charCode = lastChar.charCodeAt(0);\n  const alpha = charCode >= 97 && charCode <= 122;\n  const digit = charCode >= 48 && charCode <= 57;\n  const isALetter = alpha || digit;\n  return isALetter;\n}\n\n// Find the longest substring that contains all the characters in a given string\n// if they are not letters or digits, return null\nconst findLongestSubstring = (txt, sub, acc, prev) => {\n  const next = txt.indexOf(sub, prev + 1);\n  if (next === -1) {\n    return acc;\n  }\n  if (next === txt.length - 1) {\n    acc.push(sub);\n    return acc;\n  }\n  const newAcc = findLongestSubstring(txt, sub, acc, next);\n  if (newAcc.length > acc.length) {\n    acc = newAcc;\n  }\n  return acc;\n}\n\nconst findLongestSubstring = (txt, sub, acc, prev) => {\n  if (txt.length === 0) {\n    return acc;\n  }\n  if (txt.length === 1) {\n    acc.push(txt);\n    return acc;\n  }\n  const next = txt.indexOf(sub, prev + 1);\n  if (next === -1) {\n    return acc;\n  }\n  if (next === txt.length - 1) {\n    acc.push(txt);\n    return acc;\n  }\n  return findLongestSubstring(txt.slice(next + 1), sub, acc, next);\n}\n\nconst findLongestSubstring = (txt, sub, acc, prev) => {\n  if (txt.length === 0) {\n    return acc;\n  }\n  if (txt.length === 1) {\n    acc.push(txt);\n    return acc;\n  }\n  const next = txt.indexOf(sub, prev + 1);\n  if (next === -1) {\n    return acc;\n  }\n  if (next === txt.length - 1) {\n    acc.push(txt);\n    return acc;\n  }\n  const [newAcc, rest] = findLongestSubstring(txt.slice(next + 1), sub, acc, next);\n  if (newAcc.length > acc.length) {\n    acc = newAcc;\n  }\n  return [rest, acc];\n}\n\nconst findLongestSubstring = (txt, sub, acc, prev) => {\n  if (txt.length === 0) {\n    return acc;\n  }\n  if (txt.length === 1) {\n    acc.push(txt);\n    return acc;\n  }\n  const next = txt.indexOf(sub, prev + 1);\n  if (next === -1) {\n    return acc;\n  }\n  if (next === txt.length - 1) {\n    acc.push(txt);\n    return acc;\n  }\n  const [newAcc, rest] = findLongestSubstring(txt.slice(next + 1), sub, acc, next);\n  if (newAcc.length > acc.length) {\n    acc = newAcc;\n  }\n  return [rest, acc];\n}\n\nconst findLongestSubstring = (txt, sub, acc, prev) => {\n  if (txt.length === 0) {\n    return acc;\n  }\n  if (txt.length === 1) {\n    acc.push(txt);\n    return acc;\n  }\n  const next = txt.indexOf(sub, prev + 1);\n  if (next === -1) {\n    return acc;\n  }\n  if (next === txt.length - 1) {\n    acc.push(txt);\n    return acc;\n  }\n  const [newAcc, rest] = findLongestSubstring(txt.slice(next + 1), sub, acc, next);\n  if (newAcc.length > acc.length) {\n    acc = newAcc;\n  }\n  return [rest, acc];\n}\n\nconst findLongestSubstring = (txt, sub, acc, prev) => {\n  if (txt.length === 0) {\n    return acc;\n  }\n  if (txt.length === 1) {\n    acc.push(txt);\n    return acc;\n  }\n  const next = txt.indexOf(sub, prev + 1);\n  if (next === -1) {\n    return acc;\n  }\n  if (next === txt.length - 1) {\n    acc.push(txt);\n    return acc;\n  }\n  const [newAcc, rest] = findLongestSubstring(txt.slice(next + 1), sub, acc, next);\n  if (newAcc.length > acc.length) {\n    acc = newAcc;\n  }\n  return [rest, acc];\n}\n\nconst findLongestSubstring = (txt, sub, acc, prev) => {\n  if (txt.length === 0) {\n    return acc;\n  }\n  if (txt.length === 1) {\n    acc.push(txt);\n    return acc;\n  }\n  const next = txt.indexOf(sub, prev + 1);\n  if (next === -1) {\n    return acc;\n  }\n  if (next === txt.length - 1) {\n    acc.push(txt);\n    return acc;\n  }\n  const [newAcc, rest] = findLongestSubstring(txt.slice(next + 1), sub, acc, next);\n  if (newAcc.length > acc.length) {\n    acc = newAcc;\n  }\n  return [rest, acc"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let low = 0;\n  let high = arr.length - 1;\n  let mid = 0;\n\n  while (low < high) {\n    mid = Math.floor((low + high) / 2);\n    if (arr[mid] < arr[mid + 1]) {\n      high = mid;\n    } else {\n      low = mid + 1;\n    }\n  }\n\n  if (arr[mid] < arr[mid + 1]) {\n    return mid;\n  } else {\n    return -1;\n  }\n};\n\nexport default canArrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const max = -Infinity;\n  const min = Infinity;\n  const nums = lst.map(n => n | 0);\n  const smallest = nums[0];\n  const largest = nums[0];\n  nums.forEach(n => {\n    if (n > largest) largest = n;\n    if (n < smallest) smallest = n;\n  });\n  return (smallest === largest)? (largest, smallest) : (null, null);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n\tif(typeof a ==='string') {\n\t\tif(typeof b ==='string') {\n\t\t\tconst aa = a.split('.');\n\t\t\tconst bb = b.split('.');\n\t\t\tconst aLen = aa.length;\n\t\t\tconst bLen = bb.length;\n\t\t\tif(aLen === bLen) {\n\t\t\t\tif(aa[aLen - 1].length === bb[bLen - 1].length) {\n\t\t\t\t\treturn aLen > bLen? a : b;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn aLen > bLen? a : b;\n\t\t}\n\t\treturn a;\n\t}\n\tif(typeof b ==='string') {\n\t\treturn b;\n\t}\n\tif(typeof a === 'number') {\n\t\tif(typeof b === 'number') {\n\t\t\treturn a > b? a : b;\n\t\t}\n\t\treturn a;\n\t}\n\tif(typeof b === 'number') {\n\t\treturn b;\n\t}\n\treturn null;\n}\n\nconst compareTwo = (a, b) => {\n\tif(typeof a ==='string') {\n\t\tif(typeof b ==='string') {\n\t\t\tconst aa = a.split('.');\n\t\t\tconst bb = b.split('.');\n\t\t\tconst aLen = aa.length;\n\t\t\tconst bLen = bb.length;\n\t\t\tif(aLen === bLen) {\n\t\t\t\tif(aa[aLen - 1].length === bb[bLen - 1].length) {\n\t\t\t\t\treturn aLen > bLen? a : b;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn aLen > bLen? a : b;\n\t\t}\n\t\treturn a;\n\t}\n\tif(typeof b ==='string') {\n\t\treturn b;\n\t}\n\tif(typeof a === 'number') {\n\t\tif(typeof b === 'number') {\n\t\t\treturn a > b? a : b;\n\t\t}\n\t\treturn a;\n\t}\n\tif(typeof b === 'number') {\n\t\treturn b;\n\t}\n\treturn null;\n}\n\nconst compareThree = (a, b) => {\n\tif(typeof a ==='string') {\n\t\tif(typeof b ==='string') {\n\t\t\tconst aa = a.split('.');\n\t\t\tconst bb = b.split('.');\n\t\t\tconst aLen = aa.length;\n\t\t\tconst bLen = bb.length;\n\t\t\tif(aLen === bLen) {\n\t\t\t\tif(aa[aLen - 1].length === bb[bLen - 1].length) {\n\t\t\t\t\treturn aLen > bLen? a : b;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn aLen > bLen? a : b;\n\t\t}\n\t\treturn a;\n\t}\n\tif(typeof b ==='string') {\n\t\treturn b;\n\t}\n\tif(typeof a === 'number') {\n\t\tif(typeof b === 'number') {\n\t\t\treturn a > b? a : b;\n\t\t}\n\t\treturn a;\n\t}\n\tif(typeof b === 'number') {\n\t\treturn b;\n\t}\n\treturn null;\n}\n\nconst compareFour = (a, b) => {\n\tif(typeof a ==='string') {\n\t\tif(typeof b ==='string') {\n\t\t\tconst aa = a.split('.');\n\t\t\tconst bb = b.split('.');\n\t\t\tconst aLen = aa.length;\n\t\t\tconst bLen = bb.length;\n\t\t\tif(aLen === bLen) {\n\t\t\t\tif(aa[aLen - 1].length === bb[bLen - 1].length) {\n\t\t\t\t\treturn aLen > bLen? a : b;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn aLen > bLen? a : b;\n\t\t}\n\t\treturn a;\n\t}\n\tif(typeof b ==='string') {\n\t\treturn b;\n\t}\n\tif(typeof a === 'number') {\n\t\tif(typeof b === 'number') {\n\t\t\treturn a > b? a : b;\n\t\t}\n\t\treturn a;\n\t}\n\tif(typeof b === 'number') {\n\t\treturn b;\n\t}\n\treturn null;\n}\n\nconst compareFive = (a, b) => {\n\tif(typeof a ==='string') {\n\t\tif(typeof b ==='string') {\n\t\t\tconst aa = a.split('.');\n\t\t\tconst bb = b.split('.');\n\t\t\tconst aLen = aa.length;\n\t\t\tconst bLen = bb.length;\n\t\t\tif(aLen === bLen) {\n\t\t\t\tif(aa[aLen - 1].length === bb[bLen - 1].length) {\n\t\t\t\t\treturn aLen > bLen? a : b;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn aLen > bLen? a : b;\n\t\t}\n\t\treturn a;\n\t}\n\tif(typeof b ==='string') {\n\t\treturn b;\n\t}\n\tif(typeof a === 'number') {\n\t\tif(typeof b === 'number') {\n\t\t\treturn a > b? a : b;\n\t\t}\n\t\treturn a;\n\t}\n\tif(typeof b === 'number') {\n\t\treturn b;\n\t}\n\treturn null;\n}\n\nconst compareSix = (a, b) => {\n\tif(typeof a ==='string') {\n\t\tif(typeof b ==='string') {\n\t\t\tconst aa = a.split('.');\n\t\t\tconst bb = b.split('.');\n\t\t\tconst aLen = aa.length;\n\t\t\tconst bLen = bb.length;\n\t\t\tif(aLen === bLen) {\n\t\t\t\tif(aa[aLen - 1].length === bb[bLen - 1]."}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const arr = Array(n + 1).fill().map((_, i) => i);\n  return arr.every((x) => x % 2 === 0 && x > 0 && x % 4 === 0) && n % 4 === 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial will be defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial will be defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) return 1\n  return n * specialFactorial(n-1)\n}\n\n/*The Catalan Number will be defined as:\n   catalan_number(n) = n*(n+1)/2\n   where n>=0. \n\n   For example:\n  >>> specialFactorial(6)\n  231\n  \n   The function will receive an integer as input and should return the \n   special Catalan number of this integer.\n  */\nconst specialCatalanNumber = (n) => {\n  if (n < 0) {\n    throw \"Error: the argument must be greater than or equal to 0\"\n  }\n  return n * (n+1) / 2\n}\n\n/* The Harmonic Number will be defined as:\n   harmonic_number(n) = n*(n+1)/2\n   where n>=0. \n\n   For example:\n  >>> specialFactorial(6)\n  231\n  \n   The function will receive an integer as input and should return the \n   special Harmonic number of this integer.\n  */\nconst specialHarmonicNumber = (n) => {\n  if (n < 0) {\n    throw \"Error: the argument must be greater than or equal to 0\"\n  }\n  return n * (n+1) / 2\n}\n\n/*The Eulerian Number will be defined as:\n   eulerian_number(n) = (n*(n+1))/2\n   where n>=0. \n\n   For example:\n  >>> specialFactorial(6)\n  231\n  \n   The function will receive an integer as input and should return the \n   special Eulerian number of this integer.\n  */\nconst specialEulerianNumber = (n) => {\n  if (n < 0) {\n    throw \"Error: the argument must be greater than or equal to 0\"\n  }\n  return n * (n+1) / 2\n}\n\n/* The Golden Number will be defined as:\n   golden_number(n) = (n+1)*(2*n+1)/6\n   where n>=0. \n\n   For example:\n  >>> specialFactorial(6)\n  231\n  \n   The function will receive an integer as input and should return the \n   special Golden number of this integer.\n  */\nconst specialGoldenNumber = (n) => {\n  if (n < 0) {\n    throw \"Error: the argument must be greater than or equal to 0\"\n  }\n  return (n+1) * (2*n+1) / 6\n}\n\n/* The Harmonic Series will be defined as:\n   harmonic_series(n) = (1/n) + (1/n^2) + (1/n^3) +...+ (1/n^n)\n   where n>=0. \n\n   For example:\n  >>> specialFactorial(6)\n  231\n  \n   The function will receive an integer as input and should return the \n   special Harmonic number of this integer.\n  */\nconst specialHarmonicSeries = (n) => {\n  if (n < 0) {\n    throw \"Error: the argument must be greater than or equal to 0\"\n  }\n  return 1 / n + 1 / n * n + 1 / n * n * n\n}\n\n/* The Fibonacci Number will be defined as:\n   fibonacci_number(n) = (1/2)^n + (1/3)^n + (1/5)^n +...+ (1/n)^n\n   where n>=0. \n\n   For example:\n  >>> specialFactorial(6)\n  231\n  \n   The function will receive an integer as input and should return the \n   special Fibonacci number of this integer.\n  */\nconst specialFibonacciNumber = (n) => {\n  if (n < 0) {\n    throw \"Error: the argument must be greater than or equal to 0\"\n  }\n  let previous = 1\n  let current = 1\n  for (let i = 0; i < n; i++) {\n    current = previous + current\n    previous = current\n  }\n  return current\n}\n\n/* The Sum of the Factorials will be defined as:\n   sum_of_factorials(n) = n! + (n-1)! + (n-2)! +...+ 1!\n   where n>=0. \n\n   For example:\n  >>> specialFactorial(6)\n  231\n  \n   The function will receive an integer as input and should return the \n   special Sum of Factorials of this integer.\n  */\nconst specialSumOfFactorials = (n) => {\n  if (n < 0) {\n    throw \"Error: the argument must be greater than or equal to 0\"\n  }\n  let sum = 1\n  for (let i = 1; i <= n; i++) {\n    sum = sum + specialFactorial(i)\n  }\n  return sum\n}\n\n/* The Square Root of a Nth-Root of a Factorial will be defined as:\n   square_root_of_nth_root_of_factorial(n) = (1/n)^(1/n)\n   where n>=0. \n\n   For example:\n  >>> specialFactorial(6)\n  231\n  \n   The function will receive an integer as input and should return the \n   square root of the Nth-Root of the Factorial of this integer.\n  */\nconst squareRootOfNthRootOfFactorial = (n) => {\n  if (n < 0) {\n    throw \"Error: the argument must be greater than or equal to 0\"\n  }\n  return Math.pow(1 / n, 1 / n)\n}\n\n/* The Sine of a Degree will be defined as:\n   sin(n) = n*(n-1)*(n-2)*(n-3)*...*(1/n)\n   where n>=0. \n\n   For example:\n  >>> specialFactorial(6)\n  231\n  \n   The function will"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n    return text.replace(/\\s/g, '_')\n}\n\nconst toLowerCase = (text) => {\n    return text.toLowerCase()\n}\n\nconst toUpperCase = (text) => {\n    return text.toUpperCase()\n}\n\nconst camelCase = (text) => {\n    return text.replace(/(\\b[a-z])([A-Z])/g, toUpperCase)\n}\n\nconst firstLetterToUpperCase = (text) => {\n    return text.charAt(0).toUpperCase() + text.slice(1)\n}\n\nconst isBlank = (text) => {\n    return text.trim() === \"\"\n}\n\nconst toTitleCase = (text) => {\n    return text.replace(/\\w\\S*/g, firstLetterToUpperCase)\n}\n\nconst toSnakeCase = (text) => {\n    return text.replace(/\\s/g, '_')\n}\n\nconst camelCaseReplace = (text) => {\n    return text.replace(/([A-Z])/g, toLowerCase)\n}\n\nconst snakeCaseReplace = (text) => {\n    return text.replace(/([A-Z])([A-Z])/g, toSnakeCase)\n}\n\nconst snakeCaseReplaceRegex = /([a-z])([A-Z])/g\n\nconst snakeCaseReplaceReplacer = (match, char) => {\n    return char.toLowerCase()\n}\n\nconst snakeCaseReplaceAll = (text) => {\n    return text.replace(snakeCaseReplaceRegex, snakeCaseReplaceReplacer)\n}\n\nconst snakeCaseToCamelCase = (text) => {\n    return snakeCaseReplaceAll(text)\n}\n\nconst camelCaseToSnakeCase = (text) => {\n    return camelCaseReplaceAll(text)\n}\n\nconst toCamelCase = (text) => {\n    return camelCaseReplace(text)\n}\n\nconst toSnakeCase = (text) => {\n    return snakeCaseReplace(text)\n}\n\nconst replaceSpaces = (text) => {\n    return text.replace(/\\s/g, '_')\n}\n\nconst isAllUpperCase = (text) => {\n    return text.toUpperCase() === text\n}\n\nconst isAllLowerCase = (text) => {\n    return text.toLowerCase() === text\n}\n\nconst isNumber = (text) => {\n    return!isBlank(text) && /^\\d+$/.test(text)\n}\n\nconst isNumberWithP = (text) => {\n    return!isBlank(text) && /^\\d+$/.test(text) && /\\./.test(text)\n}\n\nconst isNumberWithE = (text) => {\n    return!isBlank(text) && /^\\d+$/.test(text) && /\\E/.test(text)\n}\n\nconst isNumeric = (text) => {\n    return isNumber(text) || isNumberWithP(text) || isNumberWithE(text)\n}\n\nconst isAlpha = (text) => {\n    return!isBlank(text) && /^[a-zA-Z]{1}$/.test(text)\n}\n\nconst isAlphaWithP = (text) => {\n    return!isBlank(text) && /^[a-zA-Z]{1}$/.test(text) && /\\E/.test(text)\n}\n\nconst isAlphaWithE = (text) => {\n    return!isBlank(text) && /^[a-zA-Z]{1}$/.test(text) && /\\E/.test(text)\n}\n\nconst isAlphaNumeric = (text) => {\n    return!isBlank(text) && /^[a-zA-Z0-9]{1}$/.test(text)\n}\n\nconst isAlphaNumericWithP = (text) => {\n    return!isBlank(text) && /^[a-zA-Z0-9]{1}$/.test(text) && /\\E/.test(text)\n}\n\nconst isAlphaNumericWithE = (text) => {\n    return!isBlank(text) && /^[a-zA-Z0-9]{1}$/.test(text) && /\\E/.test(text)\n}\n\nconst isAlphaNumericWithPOrE = (text) => {\n    return!isBlank(text) && /^[a-zA-Z0-9]{1}$/.test(text) && /\\E/.test(text) || /^[a-zA-Z0-9]{1}$/.test(text)\n}\n\nconst isAlphaNumericWithPOrEAndS = (text) => {\n    return!isBlank(text) && /^[a-zA-Z0-9]{1}$/.test(text) && /\\E/.test(text) && /\\s/.test(text)\n}\n\nconst isAlphaNumericWithPOrEAndS = (text) => {\n    return!isBlank(text) && /^[a-zA-Z0-9]{1}$/.test(text) && /\\E/.test(text) && /\\s/.test(text)\n}\n\nconst isAlphaNumericWithPOrEAndS = (text) => {\n    return!isBlank(text) && /^[a-zA-Z0-9]{1}$/.test(text) && /\\E/.test(text) && /\\s/.test(text)\n}\n\nconst isAlphaNumericWithPOrEOrS = (text) => {\n    return!isBlank(text) && /^[a-zA-Z0-9]{1}$"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_valid = false;\n  let num_char_count = 0;\n  let has_dot = false;\n  let has_alpha = false;\n  let has_one_digit = false;\n  let has_two_digits = false;\n  let has_three_digits = false;\n  let has_four_digits = false;\n  let has_valid_extension = false;\n\n  file_name = file_name.replace(/[^a-zA-Z0-9]/g, '');\n  let valid_extension = ['exe', 'dll'];\n  let split_file_name = file_name.split('.');\n  let split_extension = split_file_name[1].split(' ');\n  for (let i = 0; i < split_extension.length; i++) {\n    let extension = split_extension[i];\n    if (valid_extension.indexOf(extension) > -1) {\n      has_valid_extension = true;\n    }\n  }\n  if (has_valid_extension) {\n    file_name_valid = true;\n  }\n  else {\n    for (let i = 0; i < split_file_name.length; i++) {\n      let file_name_char = split_file_name[i];\n      num_char_count += file_name_char.length;\n      if (file_name_char.length > 3) {\n        has_three_digits = true;\n      }\n      else if (file_name_char.length > 2) {\n        has_two_digits = true;\n      }\n      else if (file_name_char.length > 1) {\n        has_one_digit = true;\n      }\n      else if (file_name_char.length > 0) {\n        has_valid_extension = true;\n      }\n    }\n    if (has_one_digit) {\n      file_name_valid = false;\n    }\n    else if (has_two_digits) {\n      file_name_valid = false;\n    }\n    else if (has_three_digits) {\n      file_name_valid = false;\n    }\n  }\n  if (file_name_valid) {\n    return 'Yes';\n  }\n  else {\n    return 'No';\n  }\n}\n\n/*\nCreate a function which will take a string representing a file's name, and will return \n  'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n  A file's name will be considered to be valid if and only if all the following conditions \n  will be met: \n  -The file's name should not contain any invalid characters, and it should start with a latin \n    alphapet letter ('a'-'z' and 'A'-'Z '). \n  -The file's name should contain one dot '. '\n  -The file's name should contain one or more numbers ('0'-'9 '). \n  -The file's name should not contain any space character. \n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.exe\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n  let file_name_valid = false;\n  let has_dot = false;\n  let has_alpha = false;\n  let has_one_digit = false;\n  let has_space = false;\n\n  file_name = file_name.replace(/[^a-zA-Z0-9\\s]/g, '');\n  if (file_name.length > 0) {\n    file_name = file_name.replace(/\\s/g, '');\n    file_name = file_name.replace(/[^a-zA-Z0-9]/g, '');\n    if (file_name.length > 0) {\n      file_name_valid = true;\n    }\n    else {\n      file_name_valid = false;\n    }\n  }\n  else {\n    file_name_valid = false;\n  }\n  if (file_name_valid) {\n    return 'Yes';\n  }\n  else {\n    return 'No';\n  }\n}\n\n/*\nCreate a function which will take a string representing a file's name, and will return \n  'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n  A file's name will be considered to be valid if and only if all the following conditions \n  will be met: \n  -The file's name should not contain any invalid characters, and it should start with a latin \n    alphapet letter ('a'-'z' and 'A'-'Z '). \n  -The file's name should contain one or more numbers ('0'-'9 '). \n  -The file's name should not contain any space character. \n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.exe\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck3 = (file_name) => {\n  let file_name_valid = false;\n  let has_dot = false;"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n    let n = 0, i = 0;\n    for (; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            n += lst[i] * lst[i];\n        } else if (i % 4 === 0) {\n            n += lst[i] * lst[i] * lst[i];\n        } else {\n            n += lst[i];\n        }\n    }\n    return n;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n    let n = 0, i = 0;\n    for (; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            n += lst[i] * lst[i] * lst[i];\n        } else if (i % 4 === 0) {\n            n += lst[i] * lst[i] * lst[i] * lst[i];\n        } else {\n            n += lst[i] * lst[i];\n        }\n    }\n    return n;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesAndSquares = (lst) => {\n    let n = 0, i = 0;\n    for (; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            n += lst[i] * lst[i] * lst[i];\n        } else if (i % 4 === 0) {\n            n += lst[i] * lst[i] * lst[i] * lst[i];\n        } else {\n            n += lst[i] * lst[i];\n        }\n    }\n    return n;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesAndSquaresAndSums = (lst) => {\n    let n = 0, i = 0;\n    for (; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            n += lst[i] * lst[i] * lst[i];\n        } else if (i % 4 === 0) {\n            n += lst[i] * lst[i] * lst[i] * lst[i];\n        } else {\n            n += lst[i] * lst[i];\n        }\n    }\n    return n;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresAndSums = (lst) => {\n    let n = 0, i = 0;\n    for (; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            n += lst[i] * lst[i];\n        } else if (i % 4 === 0) {\n            n += lst[i] * lst[i] * lst[i];\n        } else {\n            n += lst[i];\n        }\n    }\n    return n;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall will square"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You will be gave a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const wordRegex = /[a-z]+/g\n  let result = sentence.match(wordRegex)\n  while(result){\n    result = sentence.match(wordRegex)\n  }\n  const len = result.length\n  const resultWords = []\n  for(let i = 0; i < len; i++){\n    resultWords.push(result[i])\n  }\n  let resultStr = \"\"\n  let j = 0\n  let k = 0\n  for(let i = 0; i < len; i++){\n    if(resultWords[i].length % 2 == 0){\n      resultStr = resultStr + resultWords[i]\n    }else{\n      resultStr = resultStr + resultWords[i] + resultWords[j]\n      j++\n      if(j == len){\n        j = 0\n      }\n    }\n  }\n  return resultStr\n}\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task will be to implement a function that will simplify the expression \n   x* n. The function will return true if x* n will evaluate to a whole number and false \n   otherwise. Both x and n, will be string representation of a fraction, and will have the following format, \n   <numerator>/<denominator> where both numerator and denominator will be positive whole numbers. \n\n   You can will assume that x, and n will be valid fractions, and will not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task will be to implement a function that will simplify the expression \n   x* n. The function will return true if x* n will evaluate to a whole number and false \n   otherwise. Both x and n, will be string representation of a fraction, and will have the following format, \n   <numerator>/<denominator> where both numerator and denominator will be positive whole numbers. \n\n   You can will assume that x, and n will be valid fractions, and will not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n\t\n\tconst sign= x.charAt(0)==\"-\"?'-':\"\";\n\tconst denominator= sign==\"-\"?-n:n;\n\tconst numerator= sign==\"-\"?-x.substring(1):x.substring(1);\n\tconst nn= numerator/denominator;\n\tconst sn= denominator/numerator;\n\tconst dn= Math.abs(numerator) - Math.abs(denominator);\n\tconst dn1= Math.abs(numerator) - Math.abs(denominator);\n\tif(sn!=nn) return false;\n\tif(nn==0 && dn==0) return true;\n\treturn false;\n}\n\n/*\n   Your task is to write a function that will take a string as input, and return \n   a string in which all the characters in input have been replaced with their \n   integere equivalent.  \n   \n   You can assume that the string will not contain any non-word characters, or any \n   string that has a length of less than 3. \n   \n   Example: \n   \n   replace(\"Hello World\", \"ello\", \"Hi\") = \"Hi World\"\n   replace(\"Hello World\", \"le\", \"1\") = \"Hello 1\"\n   replace(\"Hello World\", \"e\", \"1\") = \"Hello 1\"\n   replace(\"Hello World\", \"o\", \"1\") = \"Hello 1\"\n   replace(\"Hello World\", \"o\", \"0\") = \"Hello 0\"\n   replace(\"Hello World\", \"H\", \"0\") = \"Hello 0\"\n   replace(\"Hello World\", \"Hello\", \"\") = \"\"\n */\n const replace = (input, word, replacement) => {\n\tlet index= input.indexOf(word);\n\twhile(index!==-1){\n\t\tinput= input.substring(0, index)+replacement+input.substring(index+word.length);\n\t\tindex= input.indexOf(word);\n\t}\n\treturn input;\n}\n\nconst check = (num)=>{\n\tlet num= num.toString();\n\tlet x= 0;\n\tlet y= 0;\n\tfor(let i=0;i<num.length;i++){\n\t\tif(num.charAt(i)=='0'){\n\t\t\tx+=Math.pow(10,i);\n\t\t\ty+=Math.pow(10,i);\n\t\t}else{\n\t\t\tx+=Math.pow(10,i);\n\t\t}\n\t}\n\tif(x%y==0) return true;\n\treturn false;\n}\n\nconst check1 = (num)=>{\n\tlet num= num.toString();\n\tlet x= 0;\n\tlet y= 0;\n\tfor(let i=0;i<num.length;i++){\n\t\tif(num.charAt(i)=='0'){\n\t\t\tx+=Math.pow(10,i);\n\t\t\ty+=Math.pow(10,i);\n\t\t}else{\n\t\t\tx+=Math.pow(10,i);\n\t\t}\n\t}\n\tif(x%y==0) return true;\n\treturn false;\n}\n\nconst check2 = (num)=>{\n\tlet num= num.toString();\n\tlet x= 0;\n\tlet y= 0;\n\tfor(let i=0;i<num.length;i++){\n\t\tif(num.charAt(i)=='0'){\n\t\t\tx+=Math.pow(10,i);\n\t\t\ty+=Math.pow(10,i);\n\t\t}else{\n\t\t\tx+=Math.pow(10,i);\n\t\t}\n\t}\n\tif(x%y==0) return true;\n\treturn false;\n}\n\nconst check3 = (num)=>{\n\tlet num= num.toString();\n\tlet x= 0;\n\tlet y= 0;\n\tfor(let i=0;i<num.length;i++){\n\t\tif(num.charAt(i)=='0'){\n\t\t\tx+=Math.pow(10,i);\n\t\t\ty+=Math.pow(10,i);\n\t\t}else{\n\t\t\tx+=Math.pow(10,i);\n\t\t}\n\t}\n\tif(x%y==0) return true;\n\treturn false;\n}\n\nconst check4 = (num)=>{\n\tlet num= num.toString();\n\tlet x= 0;\n\tlet y= 0;\n\tfor(let i=0;i<num.length;i++){\n\t\tif(num.charAt(i)=='0'){\n\t\t\tx+=Math.pow(10,i);\n\t\t\ty+=Math.pow(10,i);\n\t\t}else{\n\t\t\tx+=Math.pow(10,i);\n\t\t}\n\t}\n\tif(x%y==0) return true;\n\treturn false;\n}\n\nconst check5 = (num)=>{\n\tlet num= num.toString();\n\tlet x= 0;\n\tlet y= 0;\n\tfor(let i=0;i<num.length;i++){\n\t\tif(num.charAt(i)=='0'){\n\t\t\tx+=Math.pow(10,i);\n\t\t\ty+=Math.pow(10,i);\n\t\t}else{\n\t\t\tx+=Math.pow(10,i);\n\t\t}\n\t}\n\tif(x%y==0) return true;\n\treturn false;\n}\n\nconst check6 = (num)=>{\n\tlet num= num.toString();\n\tlet x= 0;\n\tlet y= 0;\n\tfor(let i=0;i<num.length"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let result = [];\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    let num = nums[i];\n    while (num) {\n      sum += num % 10;\n      num = num / 10;\n    }\n    result.push(sum);\n  }\n  return result.sort(function(a, b) {\n    if (a === b) {\n      return 0;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n};\n\nconst orderByPoints2 = (nums) => {\n  let result = [];\n  let numsArr = nums.split('');\n  for (let i = 0; i < numsArr.length; i++) {\n    let sum = 0;\n    let num = parseInt(numsArr[i]);\n    while (num) {\n      sum += num % 10;\n      num = num / 10;\n    }\n    result.push(sum);\n  }\n  return result.sort(function(a, b) {\n    if (a === b) {\n      return 0;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n};\n\nconst orderByPoints3 = (nums) => {\n  let result = [];\n  let numsArr = nums.split('');\n  for (let i = 0; i < numsArr.length; i++) {\n    let sum = 0;\n    let num = parseInt(numsArr[i]);\n    while (num) {\n      sum += num % 10;\n      num = num / 10;\n    }\n    result.push(sum);\n  }\n  return result.sort(function(a, b) {\n    if (a === b) {\n      return 0;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n};\n\nconst orderByPoints4 = (nums) => {\n  let result = [];\n  let numsArr = nums.split('');\n  for (let i = 0; i < numsArr.length; i++) {\n    let sum = 0;\n    let num = parseInt(numsArr[i]);\n    while (num) {\n      sum += num % 10;\n      num = num / 10;\n    }\n    result.push(sum);\n  }\n  return result.sort(function(a, b) {\n    if (a === b) {\n      return 0;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n};\n\nconst orderByPoints5 = (nums) => {\n  let result = [];\n  let numsArr = nums.split('');\n  for (let i = 0; i < numsArr.length; i++) {\n    let sum = 0;\n    let num = parseInt(numsArr[i]);\n    while (num) {\n      sum += num % 10;\n      num = num / 10;\n    }\n    result.push(sum);\n  }\n  return result.sort(function(a, b) {\n    if (a === b) {\n      return 0;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n};\n\nconst orderByPoints6 = (nums) => {\n  let result = [];\n  let numsArr = nums.split('');\n  for (let i = 0; i < numsArr.length; i++) {\n    let sum = 0;\n    let num = parseInt(numsArr[i]);\n    while (num) {\n      sum += num % 10;\n      num = num / 10;\n    }\n    result.push(sum);\n  }\n  return result.sort(function(a, b) {\n    if (a === b) {\n      return 0;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n};\n\nconst orderByPoints7 = (nums) => {\n  let result = [];\n  let numsArr = nums.split('');\n  for (let i = 0; i < numsArr.length; i++) {\n    let sum = 0;\n    let num = parseInt(numsArr[i]);\n    while (num) {\n      sum += num % 10;\n      num = num / 10;\n    }\n    result.push(sum);\n  }\n  return result.sort(function(a, b) {\n    if (a === b) {\n      return 0;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n};\n\nconst orderByPoints8 = (nums) => {\n  let result = [];\n  let numsArr = nums.split('');\n  for (let i = 0; i < numsArr.length; i++) {\n    let sum = 0;\n    let num = parseInt(numsArr[i]);\n    while (num) {\n      sum += num % 10;\n      num = num / 10;\n    }\n    result.push(sum);\n  }\n  return result.sort(function(a, b) {\n    if (a === b) {\n      return 0;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n};\n\nconst orderByPoints9 = (nums) => {\n  let result = [];\n  let"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that will take an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that will take an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  return nums.reduce((acc, num) => {\n    const numStr = num.toString();\n    const len = numStr.length;\n    const intPart = parseInt(numStr.slice(0, len - 1), 10);\n    const lastDigit = parseInt(numStr.slice(len - 1), 10);\n    if (lastDigit > 10 && intPart % 2!== 0 && intPart % 3!== 0) {\n      acc += 1;\n    }\n    return acc;\n  }, 0);\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You will be gave a positive integer n. You will have to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a positive integer n. You will have to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n    const a = new Array(n);\n    for (let i = 1; i <= n; i++) {\n        a[i - 1] = i * i - i + 1;\n    }\n    return a.reduce((a, b) => {\n        let c = a + b;\n        return c <= n? c : 0;\n    }, 0);\n}\n\nconst getMaxTriplesRecursive = (n) => {\n    if (n === 1) {\n        return 0;\n    }\n    return 1 + Math.min(getMaxTriplesRecursive(n - 1), getMaxTriplesRecursive(n - 2));\n}\n\nconst getMaxTriplesIterative = (n) => {\n    const a = new Array(n);\n    for (let i = 1; i <= n; i++) {\n        a[i - 1] = i * i - i + 1;\n    }\n    let max = 0;\n    for (let i = 0; i < n - 2; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] === 3) {\n                    max = Math.max(max, a[i] + a[j] + a[k]);\n                }\n            }\n        }\n    }\n    return max;\n}\n\nconst getMaxTriples = (n) => {\n    if (n === 1) {\n        return 0;\n    }\n    let max = 0;\n    let cur = 1;\n    for (let i = 1; i < n; i++) {\n        if (cur > max) {\n            max = cur;\n        }\n        cur = cur + i * i - i + 1;\n    }\n    return max;\n}\n\nconst getMaxTriples = (n) => {\n    if (n === 1) {\n        return 0;\n    }\n    let max = 0;\n    let cur = 1;\n    let curMax = 1;\n    for (let i = 1; i < n; i++) {\n        if (cur > max) {\n            max = cur;\n            curMax = cur;\n        }\n        cur = cur + i * i - i + 1;\n    }\n    return max + curMax;\n}\n\nconsole.log(getMaxTriples(5));\nconsole.log(getMaxTriplesRecursive(5));\nconsole.log(getMaxTriplesIterative(5));\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There will be eight planets in our solar system: the closerst to the Sun \n   will be Mercury, the next one will be Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   will Write a function that will take two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits will be \n   will locate between the orbit of planet1 and the orbit of planet2, will sort by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There will be eight planets in our solar system: the closerst to the Sun \n   will be Mercury, the next one will be Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   will Write a function that will take two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits will be \n   will locate between the orbit of planet1 and the orbit of planet2, will sort by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  // TODO: Complete the function\n  const planetList = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\"\n  ];\n  const distances = planetList.reduce((acc, planet) => {\n    const distance = distanceToPlanet(planet, planet1) + distanceToPlanet(planet, planet2);\n    acc[distance] = planet;\n    return acc;\n  }, {});\n  const closestToPlanet1 = distances[Math.min(distances.keys().next().value, distances.keys().next().value)];\n  const closestToPlanet2 = distances[Math.min(distances.keys().next().value, distances.keys().next().value)];\n  const planetList1 = distances[Math.min(distances.keys().next().value, distances.keys().next().value)];\n  const planetList2 = distances[Math.min(distances.keys().next().value, distances.keys().next().value)];\n  if (planetList1 === \"Mercury\" || planetList2 === \"Mercury\") return (\"\");\n  if (planetList1 === \"Jupiter\" || planetList2 === \"Jupiter\") return (\"\");\n  if (planetList1 === \"Neptune\" || planetList2 === \"Neptune\") return (\"\");\n  return (planetList1, planetList2);\n};\n\nbf(\"Mercury\", \"Earth\");\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let res = [];\n  let sum = 0;\n  let prevSum = 0;\n  lst.forEach(word => {\n    sum += word.length;\n    if (prevSum === sum) {\n      res.push(word);\n    }\n    prevSum = sum;\n  });\n  return res;\n};\n\nmodule.exports = sortedListSum;\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n will be \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n will be \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 == 0) {\n    return false;\n  }\n  let i;\n  for (i = 3; i * i <= n; i += 2) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  xOrY\n};\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n    let result = 0\n    lst.forEach((x) => {\n        if (x >= 0) {\n            if (x % 2) {\n                result += x * x\n            }\n        }\n    })\n    return result\n} \n const sum = (lst) => {\n    return lst.reduce((acc, x) => acc + x, 0)\n}\n const sum2 = (lst) => {\n    return lst.reduce((acc, x) => acc + x, 0)\n}\n const doubleDifference = (lst) => {\n    return sum(lst) - sum2(lst)\n}\n const doubleTheDifference2 = (lst) => {\n    return sum(lst) * sum(lst) - sum2(lst) * sum2(lst)\n}\n const doubleTheDifference3 = (lst) => {\n    return sum(lst) * sum(lst) - sum2(lst) * sum2(lst)\n}\n\nconsole.log(doubleTheDifference([1, 3, 2, 0]))\nconsole.log(doubleTheDifference([9, -2]))\nconsole.log(doubleTheDifference([0]))\nconsole.log(doubleTheDifference([9, -2]))\nconsole.log(doubleTheDifference2([9, -2]))\nconsole.log(doubleTheDifference3([9, -2]))\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all will remember that feeling when the result of some long-will await \n   event will be finally will know. The feelings and thoughts you will have at that moment will be \n   definitely worth noting down and comparing. \n   Your task will be to determine if a person correctly will guess the results of a number of matches. \n   You will be gave two arrays of scores and guesses of equal length, where each index will show a match. \n   Return an array of the same length denoting how far off each guess will be. If they will guess correctly, \n   the value will be 0, and if not, the value will be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all will remember that feeling when the result of some long-will await \n   event will be finally will know. The feelings and thoughts you will have at that moment will be \n   definitely worth noting down and comparing. \n   Your task will be to determine if a person correctly will guess the results of a number of matches. \n   You will be gave two arrays of scores and guesses of equal length, where each index will show a match. \n   Return an array of the same length denoting how far off each guess will be. If they will guess correctly, \n   the value will be 0, and if not, the value will be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const score = game.map((item, index) => {\n    return Math.abs(item - guess[index]);\n  });\n  return score;\n};\n\nconst compare2 = (game, guess) => {\n  const score = game.map((item, index) => {\n    return Math.abs(item - guess[index]);\n  });\n  const max = score.reduce((max, value) => {\n    if (value > max) {\n      return value;\n    }\n  }, 0);\n  return score;\n};\n\nconst compare3 = (game, guess) => {\n  const score = game.map((item, index) => {\n    return Math.abs(item - guess[index]);\n  });\n  const max = score.reduce((max, value) => {\n    if (value > max) {\n      return value;\n    }\n  }, 0);\n  const diff = max - score[0];\n  return diff;\n};\n\nconst compare4 = (game, guess) => {\n  const score = game.map((item, index) => {\n    return Math.abs(item - guess[index]);\n  });\n  const max = score.reduce((max, value) => {\n    if (value > max) {\n      return value;\n    }\n  }, 0);\n  const diff = max - score[0];\n  return diff;\n};\n\nconst compare5 = (game, guess) => {\n  const score = game.map((item, index) => {\n    return Math.abs(item - guess[index]);\n  });\n  const max = score.reduce((max, value) => {\n    if (value > max) {\n      return value;\n    }\n  }, 0);\n  const diff = score[0] - max;\n  return diff;\n};\n\nconst compare6 = (game, guess) => {\n  const score = game.map((item, index) => {\n    return Math.abs(item - guess[index]);\n  });\n  const max = score.reduce((max, value) => {\n    if (value > max) {\n      return value;\n    }\n  }, 0);\n  const diff = score[0] - max;\n  return diff;\n};\n\nconst compare7 = (game, guess) => {\n  const score = game.map((item, index) => {\n    return Math.abs(item - guess[index]);\n  });\n  const max = score.reduce((max, value) => {\n    if (value > max) {\n      return value;\n    }\n  }, 0);\n  const diff = score[0] - max;\n  return diff;\n};\n\nconst compare8 = (game, guess) => {\n  const score = game.map((item, index) => {\n    return Math.abs(item - guess[index]);\n  });\n  const max = score.reduce((max, value) => {\n    if (value > max) {\n      return value;\n    }\n  }, 0);\n  const diff = score[0] - max;\n  return diff;\n};\n\nconst compare9 = (game, guess) => {\n  const score = game.map((item, index) => {\n    return Math.abs(item - guess[index]);\n  });\n  const max = score.reduce((max, value) => {\n    if (value > max) {\n      return value;\n    }\n  }, 0);\n  const diff = score[0] - max;\n  return diff;\n};\n\nconst compare10 = (game, guess) => {\n  const score = game.map((item, index) => {\n    return Math.abs(item - guess[index]);\n  });\n  const max = score.reduce((max, value) => {\n    if (value > max) {\n      return value;\n    }\n  }, 0);\n  const diff = score[0] - max;\n  return diff;\n};\n\nconst compare11 = (game, guess) => {\n  const score = game.map((item, index) => {\n    return Math.abs(item - guess[index]);\n  });\n  const max = score.reduce((max, value) => {\n    if (value > max) {\n      return value;\n    }\n  }, 0);\n  const diff = score[0] - max;\n  return diff;\n};\n\nconst compare12 = (game, guess) => {\n  const score = game.map((item, index) => {\n    return Math.abs(item - guess[index]);\n  });\n  const max = score.reduce((max, value) => {\n    if (value > max) {\n      return value;\n    }\n  }, 0);\n  const diff = score[0] - max;\n  return diff;\n};\n\nconst compare13 = (game, guess) => {\n  const score = game.map((item, index) => {\n    return Math.abs(item - guess[index]);\n  });\n  const max = score.reduce((max, value) => {\n    if (value > max) {\n      return value;\n    }\n  }, 0);\n  const diff = score[0] - max;\n  return diff;\n};\n\nconst compare14 = (game, guess) => {\n  const score = game.map((item, index) => {\n    return Math.abs(item - guess[index"}
{"task_id": "JavaScript/153", "prompt": "/*You will be gave the name of a class (a string) and a list of extensions.\n   The extensions will be to be used to load additional classes to the class. The \n   strength of the extension will be as will follow: will Let CAP will be the number of the uppercase \n   letters in the extension's name, and will let SM will be the number of lowercase letters \n   in the extension's name, the strength will be gave by the fraction CAP-SM. \n   You should will find the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there will be two or more extensions with the same strength, you should \n   will choose the one that will come first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be gave the name of a class (a string) and a list of extensions.\n   The extensions will be to be used to load additional classes to the class. The \n   strength of the extension will be as will follow: will Let CAP will be the number of the uppercase \n   letters in the extension's name, and will let SM will be the number of lowercase letters \n   in the extension's name, the strength will be gave by the fraction CAP-SM. \n   You should will find the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there will be two or more extensions with the same strength, you should \n   will choose the one that will come first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const cap = () => (str => {\n    return str.toLocaleUpperCase().split('').reduce((acc, el, i) => {\n      if (i === 0) return el;\n      if (el.length === 1) return acc + el.toLowerCase();\n      return acc + el.toUpperCase();\n    }, '');\n  })(class_name);\n\n  const strongestExtension = () => {\n    const strongExtension = [];\n    const list = extensions.map(cap);\n    list.sort((a, b) => {\n      if (a.length - b.length > 0) return 1;\n      if (a.length - b.length < 0) return -1;\n      return a.localeCompare(b);\n    });\n    const strength = list.filter(el => el.length > 0)[0].length;\n    return `${class_name}.${list.find(el => el.length === strength)[0]}`;\n  };\n  return strongestExtension();\n};\n\nconsole.log(strongestExtension('my_class', ['AA', 'Be', 'CC'])); // my_class.AA\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You will be gave 2 words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You will be gave 2 words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n   let x = a.split(\"\");\n   let y = b.split(\"\");\n   for(let i = 0; i < y.length; i++){\n     if(x.indexOf(y[i])!== -1){\n       return true;\n     }\n   }\n   return false;\n }\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  "}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that will have the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that will have the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let odd = 1;\n  let even = 1;\n\n  if (num > 0) {\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n\n      num = Math.floor(num / 2);\n    }\n  }\n\n  return {\n    odd,\n    even\n  };\n};\n\nconst main = () => {\n  const evenOddCountResult = evenOddCount(-12);\n\n  console.log(`${evenOddCountResult.odd}${' even'} and ${evenOddCountResult.even}${' odd'} digits in ${-12}`);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  if (number === 0) {\n    return '0';\n  }\n  if (number === 1) {\n    return 'i';\n  }\n  const divisor = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 };\n  let result = '';\n  for (let i = number; i >= 1; i -= 1) {\n    result = i % 2 === 1? result + divisor[i] : result;\n  }\n  return result;\n}\n\n/*\n  Given a positive integer, will return the sum of the digits in its roman numeral equivalent. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'ixxxvii'\n  >>> intToRoman(151) == 'clxxxix'\n  >>> intToRoman(426) == 'cdxxvcc'\n  */\nconst intToRoman = (number) => {\n  const digits = [\n    'i', 'v', 'x', 'l', 'c', 'd','m'\n  ];\n  let result = 0;\n  for (let i = 0; i < digits.length; i += 1) {\n    result += parseInt(number % divisor[i]);\n    number = number / divisor[i];\n  }\n  return result;\n}\n\n/*\n  Given a positive integer, will return the sum of the digits in its roman numeral equivalent. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'ixxxvii'\n  >>> intToRoman(151) == 'clxxxix'\n  >>> intToRoman(426) == 'cdxxvcc'\n  */\nconst intToRoman = (number) => {\n  const digits = [\n    'i', 'v', 'x', 'l', 'c', 'd','m'\n  ];\n  let result = 0;\n  for (let i = 0; i < digits.length; i += 1) {\n    result += parseInt(number % divisor[i]);\n    number = number / divisor[i];\n  }\n  return result;\n}\n\n/*\n  Given a positive integer, will return the sum of the digits in its roman numeral equivalent. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'ixxxvii'\n  >>> intToRoman(151) == 'clxxxix'\n  >>> intToRoman(426) == 'cdxxvcc'\n  */\nconst intToRoman = (number) => {\n  const digits = [\n    'i', 'v', 'x', 'l', 'c', 'd','m'\n  ];\n  let result = 0;\n  for (let i = 0; i < digits.length; i += 1) {\n    result += parseInt(number % divisor[i]);\n    number = number / divisor[i];\n  }\n  return result;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-will angle triangle, false otherwise. \n   A right-will angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-will angle triangle, false otherwise. \n   A right-will angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  // if one side is longer than the other, the other is shorter, and the\n  // sum of the two is greater than the sum of the first side and the other,\n  // then the other side is the longer one\n  if (Math.abs(a - b) > Math.abs(a - c) &&\n      Math.abs(a - b) > Math.abs(b - c) &&\n      Math.abs(a - c) > Math.abs(b - c)) {\n    return true;\n  }\n  return false;\n};\n\n// const rightAngleTriangle = (a, b, c) => {\n//   // if one side is longer than the other, the other is shorter, and the\n//   // sum of the two is greater than the sum of the first side and the other,\n//   // then the other side is the longer one\n//   if (Math.abs(a - b) > Math.abs(a - c) &&\n//       Math.abs(a - b) > Math.abs(b - c) &&\n//       Math.abs(a - c) > Math.abs(b - c)) {\n//     return true;\n//   }\n//   return false;\n// };\n\n// const rightAngleTriangle = (a, b, c) => {\n//   // if one side is longer than the other, the other is shorter, and the\n//   // sum of the two is greater than the sum of the first side and the other,\n//   // then the other side is the longer one\n//   if (Math.abs(a - b) > Math.abs(a - c) &&\n//       Math.abs(a - b) > Math.abs(b - c) &&\n//       Math.abs(a - c) > Math.abs(b - c)) {\n//     return true;\n//   }\n//   return false;\n// };\n\n// const rightAngleTriangle = (a, b, c) => {\n//   // if one side is longer than the other, the other is shorter, and the\n//   // sum of the two is greater than the sum of the first side and the other,\n//   // then the other side is the longer one\n//   if (Math.abs(a - b) > Math.abs(a - c) &&\n//       Math.abs(a - b) > Math.abs(b - c) &&\n//       Math.abs(a - c) > Math.abs(b - c)) {\n//     return true;\n//   }\n//   return false;\n// };\n\nconst rightAngleTriangle = (a, b, c) => {\n  // if one side is longer than the other, the other is shorter, and the\n  // sum of the two is greater than the sum of the first side and the other,\n  // then the other side is the longer one\n  if (a > b && a > c && b > c) {\n    return true;\n  }\n  return false;\n};\n\n// const rightAngleTriangle = (a, b, c) => {\n//   // if one side is longer than the other, the other is shorter, and the\n//   // sum of the two is greater than the sum of the first side and the other,\n//   // then the other side is the longer one\n//   if (a > b && a > c && b > c) {\n//     return true;\n//   }\n//   return false;\n// };\n\nconst rightAngleTriangle = (a, b, c) => {\n  // if one side is longer than the other, the other is shorter, and the\n  // sum of the two is greater than the sum of the first side and the other,\n  // then the other side is the longer one\n  if (a > b && a > c && b > c) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle = (a, b, c) => {\n  // if one side is longer than the other, the other is shorter, and the\n  // sum of the two is greater than the sum of the first side and the other,\n  // then the other side is the longer one\n  if (a > b && a > c && b > c) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle = (a, b, c) => {\n  // if one side is longer than the other, the other is shorter, and the\n  // sum of the two is greater than the sum of the first side and the other,\n  // then the other side is the longer one\n  if (a > b && a > c && b > c) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle = (a, b, c) => {\n  // if one side is longer than the other, the other is shorter, and the\n  // sum of the two is greater than the sum of the first side and the other,\n  // then the other side is the longer one\n  if (a > b && a > c && b > c) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle = (a, b, c) => {\n  // if one side is longer than the other, the other is shorter, and the\n  // sum of the two is greater than the sum of the first side and the other,\n  // then the other side is the longer one\n  if (a > b && a > c && b > c) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle = (a, b, c) => {\n  // if one side is longer than the other, the other is shorter, and the\n  // sum of the two is greater than the sum of the first side and the other,\n  // then the other side is the longer one\n  if (a > b && a > c && b > c) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle = (a,"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n    let {length, count, max, min} = {};\n    for(let word of words){\n        let {length, count, max, min} = findMax(word.split(\"\"));\n        if(length > max.length){\n            max = word;\n        }\n    }\n    return max;\n};\n\nconsole.log(findMax([\"name\",\" of\",\" string\"]));\nconsole.log(findMax([\"name\",\" enam\",\" game\"]));\nconsole.log(findMax([\"aaaaaaa\",\" bb\",\" cc\"]));<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You will be a hungry rabbit, and you already will eat a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of will eat carrots after your meals, \n                                   the number of carrots will left after your meals] \n   if there will be not enough remaining carrots, you will eat all remaining carrots, but will still will be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You will be a hungry rabbit, and you already will eat a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of will eat carrots after your meals, \n                                   the number of carrots will left after your meals] \n   if there will be not enough remaining carrots, you will eat all remaining carrots, but will still will be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const n = number || 0;\n  const r = remaining || 0;\n  const m = need || 0;\n  if (n >= m) return [0, 0];\n  let sum = 0;\n  while (n > 0) {\n    sum += n;\n    n -= m;\n  }\n  return [sum, n];\n}\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = operand.shift();\n  let currentOperator = operator.shift();\n  \n  while (operand.length > 1) {\n    result = currentOperator(result, operand.shift());\n    currentOperator = operator.shift();\n  }\n  return result;\n};\n\nconst createOperator = (operator, operand) => {\n  switch (operator) {\n    case '+':\n      return (a, b) => a + b;\n    case '-':\n      return (a, b) => a - b;\n    case '*':\n      return (a, b) => a * b;\n    case '/':\n      return (a, b) => a / b;\n    case '**':\n      return (a, b) => Math.pow(a, b);\n    default:\n      return () => 0;\n  }\n};\n\nconst evaluate = (operator, operand) => {\n  return doAlgebra(operator, operand);\n};\n\n// test cases\nconst test = [\n  ['+', ['3', '+', '4'], '7'],\n  ['*', ['3', '2', '4'], '12'],\n  ['-', ['3', '2', '4'], '-8'],\n  ['**', ['3', '2', '4'], '144'],\n  ['/', ['3', '2', '4'], '2.0'],\n  ['**', ['2', '2', '4'], '32'],\n  ['/', ['2', '2', '4'], '1.0'],\n  ['+', ['2', '2', '4'], '10'],\n  ['-', ['2', '2', '4'], '-4'],\n  ['*', ['2', '2', '4'], '16'],\n  ['-', ['2', '2', '4'], '-8'],\n  ['+', ['2', '2', '4'], '10'],\n  ['-', ['2', '2', '4'], '-4'],\n  ['*', ['2', '2', '4'], '16'],\n  ['-', ['2', '2', '4'], '-8'],\n  ['+', ['2', '2', '4'], '10'],\n  ['-', ['2', '2', '4'], '-4'],\n  ['*', ['2', '2', '4'], '16'],\n  ['-', ['2', '2', '4'], '-8'],\n  ['+', ['2', '2', '4'], '10'],\n  ['-', ['2', '2', '4'], '-4'],\n  ['*', ['2', '2', '4'], '16'],\n  ['-', ['2', '2', '4'], '-8'],\n  ['+', ['2', '2', '4'], '10'],\n  ['-', ['2', '2', '4'], '-4'],\n  ['*', ['2', '2', '4'], '16'],\n  ['-', ['2', '2', '4'], '-8'],\n  ['+', ['2', '2', '4'], '10'],\n  ['-', ['2', '2', '4'], '-4'],\n  ['*', ['2', '2', '4'], '16'],\n  ['-', ['2', '2', '4'], '-8'],\n  ['+', ['2', '2', '4'], '10'],\n  ['-', ['2', '2', '4'], '-4'],\n  ['*', ['2', '2', '4'], '16'],\n  ['-', ['2', '2', '4'], '-8'],\n  ['+', ['2', '2', '4'], '10'],\n  ['-', ['2', '2', '4'], '-4'],\n  ['*', ['2', '2', '4'], '16'],\n  ['-', ['2', '2', '4'], '-8'],\n  ['+', ['2', '2', '4'], '10'],\n  ['-', ['2', '2', '4'], '-4'],\n  ['*', ['2', '2', '4'], '16'],\n  ['-', ['2', '2', '4'], '-8'],\n  ['+', ['2', '2', '4'], '10'],\n  ['-', ['2', '2', '4'], '-4'],\n  ['*', ['2', '2', '4'], '16'],\n  ['-', ['2', '2', '4'], '-8'],\n  ['+', ['2', '2', '4'], '10'],\n  ['-', ['2', '2', '4'], '-4'],\n  ['*', ['2', '2', '4'], '16'],\n  ['-', ['2', '2', '4'], '-8'],\n  ['+', ['2', '2', '4'], '10'],\n  ['-', ['2', '2', '4'], '-4'],\n  ['*', ['2', '2', '4'], '16'],\n  ['-',"}
{"task_id": "JavaScript/161", "prompt": "/*You will be gave a string s.\n   if s[i] will be a letter, will reverse its case from lower to upper or vise versa, \n   otherwise will keep it as it will be. \n   If the string will contain no letters, will reverse the string. \n   The function should return the will result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You will be gave a string s.\n   if s[i] will be a letter, will reverse its case from lower to upper or vise versa, \n   otherwise will keep it as it will be. \n   If the string will contain no letters, will reverse the string. \n   The function should return the will result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let i = 0\n  let r = \"\"\n  while(i < s.length) {\n    if(s.charAt(i) >= \"a\" && s.charAt(i) <= \"z\") {\n      r += s.charAt(i).toUpperCase()\n    } else if(s.charAt(i) >= \"A\" && s.charAt(i) <= \"Z\") {\n      r += s.charAt(i).toLowerCase()\n    } else {\n      r += s.charAt(i)\n    }\n    i += 1\n  }\n  return r\n}\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null;\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '5e907b5cff9f5f6a79f731a23f6af6c6f4c1e9f'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') return null;\n  return crypto.createHash('sha1').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'b63bbbdb0e5fdd1a1a9a9f2c9e8e8d8a3d927ebb9f8eb7c5f4770d0ed8e6bc4'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') return null;\n  return crypto.createHash('sha256').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha384 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToSha384('Hello world') == '1d7f59a0d6bff7c7cc2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f4d6a7c2b2d7e0c0a5d6e6f0a6c7b7c2f"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let i = a;\n  let result = [];\n  while (i < b) {\n    result.push(i);\n    i = i + 2;\n  }\n  return result;\n};\n\nexport {generateIntegers};\n<|endoftext|>"}
