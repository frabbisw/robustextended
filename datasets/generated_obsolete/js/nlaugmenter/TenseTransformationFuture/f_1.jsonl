{"task_id": "JavaScript/0", "prompt": "/* Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let result = false\n  let i = 0\n  while(i < numbers.length) {\n    let j = i + 1\n    while(j < numbers.length) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        result = true\n        break\n      }\n      j++\n    }\n    i++\n  }\n  return result\n}\n\n/* Check if given array of numbers is all even or all odd.\n  >>> allEven([2, 4, 6, 8])\n  true\n  >>> allEven([1, 3, 5])\n  false\n  */\nconst allEven = (numbers) => {\n  let result = true\n  for(let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 2 === 1) {\n      result = false\n      break\n    }\n  }\n  return result\n}\n\n/* Check if given array of numbers is all odd or all even.\n  >>> allOdd([2, 4, 6, 8])\n  false\n  >>> allOdd([1, 3, 5])\n  true\n  */\nconst allOdd = (numbers) => {\n  let result = false\n  for(let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 2 === 0) {\n      result = true\n      break\n    }\n  }\n  return result\n}\n\n/* Check if given array of numbers is sorted.\n  >>> sorted([2, 4, 6, 8])\n  true\n  >>> sorted([2, 5, 8, 6])\n  false\n  */\nconst sorted = (numbers) => {\n  let i = 0\n  let j = 0\n  while(i < numbers.length && j < numbers.length) {\n    if (numbers[i] < numbers[j]) {\n      return false\n    }\n    i++\n    j++\n  }\n  return true\n}\n\n/* Check if given array of numbers is sorted in reverse order.\n  >>> reverseSorted([2, 4, 6, 8])\n  true\n  >>> reverseSorted([2, 5, 8, 6])\n  false\n  */\nconst reverseSorted = (numbers) => {\n  let i = 0\n  let j = 0\n  while(i < numbers.length && j < numbers.length) {\n    if (numbers[i] > numbers[j]) {\n      return false\n    }\n    i++\n    j++\n  }\n  return true\n}\n\n/* Check if given array of numbers is a palindrome.\n  >>> isPalindrome([1, 2, 3, 4, 5, 6])\n  true\n  >>> isPalindrome([9, 8, 7, 6, 5, 4, 3, 2, 1])\n  true\n  >>> isPalindrome([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])\n  false\n  */\nconst isPalindrome = (numbers) => {\n  let result = true\n  let i = 0\n  let j = numbers.length - 1\n  while(i < j) {\n    if (numbers[i]!== numbers[j]) {\n      result = false\n      break\n    }\n    i++\n    j--\n  }\n  return result\n}\n\n/* Check if given array of numbers is a cycle.\n  >>> cycle([1, 2, 3])\n  false\n  >>> cycle([1, 2, 3, 1])\n  false\n  >>> cycle([1, 2, 3, 4, 1])\n  true\n  */\nconst cycle = (numbers) => {\n  let result = false\n  let i = 0\n  let j = 0\n  while(i < numbers.length && j < numbers.length) {\n    if (numbers[i]!== numbers[j]) {\n      break\n    }\n    i++\n    j++\n  }\n  if (i < numbers.length && j < numbers.length) {\n    return true\n  }\n  return false\n}\n\n/* Check if given array of numbers is a permutation.\n  >>> permutation([1, 2, 3])\n  false\n  >>> permutation([1, 2, 3, 1])\n  false\n  >>> permutation([1, 2, 3, 4, 1])\n  true\n  */\nconst permutation = (numbers) => {\n  let result = true\n  let i = 0\n  let j = 0\n  while(i < numbers.length && j < numbers.length) {\n    if (numbers[i]!== numbers[j]) {\n      result = false\n      break\n    }\n    i++\n    j++\n  }\n  if (i < numbers.length && j < numbers.length) {\n    return false\n  }\n  return result\n}\n\n/* Check if given array of numbers is a rotation.\n  >>> rotation([1, 2, 3])\n  false\n  >>> rotation([1, 2, 3, 1])\n  false\n  >>> rotation([1, 2, 3, 4, 1])\n  true\n  */\nconst rotation = (numbers) => {\n  let result = true\n  let i = 0\n  let j = 0\n  while(i < numbers.length && j < numbers.length) {\n    if (numbers[i]!== numbers[j]) {\n      result = false\n      break\n    }\n    i++\n    j++\n  }\n  if (i < numbers.length && j < numbers.length) {\n    return false\n  }\n  return result\n}\n\n/* Check if given array of numbers is a mirror.\n  >>> mirror([1, 2, 3])\n  false\n  >>> mirror([1, 2, 3, 1])\n  false\n  >>> mirror([1, 2, 3, 4, 1])\n  true\n  */\nconst mirror = (numbers) => {\n  let result = true\n  let i = 0\n  let j = 0\n  while(i < numbers.length && j < numbers."}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const stack = []\n  const result = []\n  const stack_length = stack.length\n\n  paren_string.split(' ').forEach((item) => {\n    if (item.startsWith('(') && stack_length > 0 && stack[stack_length - 1].startsWith('(')) {\n      stack.push(item)\n    } else if (item.endsWith(')') && stack_length > 0 && stack[stack_length - 1].endsWith(')')) {\n      const tmp = stack.pop()\n      const nested = stack.pop()\n      stack.push(tmp + '(' + nested + ')')\n    } else {\n      stack.push(item)\n    }\n  })\n  return result.concat(stack)\n}\n\n// test code\nseparateParenGroups('((()()()))')\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    let digits = [];\n    while (number > 0) {\n        digits.unshift(number % 10);\n        number = number / 10;\n    }\n    return digits.reverse().join(\"\");\n};\n\n// console.log(truncateNumber(3.5));\n// console.log(truncateNumber(2.5));\n// console.log(truncateNumber(1.5));\n// console.log(truncateNumber(0.5));\n// console.log(truncateNumber(0.4));\n// console.log(truncateNumber(0.3));\n// console.log(truncateNumber(0.2));\n// console.log(truncateNumber(0.1));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n// console.log(truncateNumber(0.0));\n//"}
{"task_id": "JavaScript/3", "prompt": "/* You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n    if (operations.length === 0) {\n        return false;\n    }\n    let curr = 0;\n    for (let i = 0; i < operations.length; i++) {\n        curr += operations[i];\n        if (curr < 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconsole.log(belowZero([1, 2, 3]));\nconsole.log(belowZero([1, 2, -4, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n    const len = numbers.length;\n    const mean = numbers.reduce((acc, x) => acc + x, 0) / len;\n    const result = [];\n    for (let i = 0; i < len; i++) {\n        result.push((Math.abs(numbers[i] - mean)));\n    }\n    return result.reduce((acc, x) => acc + x, 0) / len;\n};\n\n// -----------------------------------------------------------\n// \n// -----------------------------------------------------------\n// \n// -----------------------------------------------------------\n\nconst main = () => {\n    const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  return numbers.slice(0, -1).concat(delimeter, numbers.slice(1))\n}\n\n/**\n  * Given a list of numbers, return a list of all permutations of those numbers.\n  *\n  * @param numbers\n  * @returns {Array}\n  *\n  * @example\n  * const numbers = [1, 2, 3]\n  * const perms = permute(numbers)\n  * // [1, 2, 3, 1, 3, 2, 1, 2, 3]\n  *\n  * @todo Improve performance.\n  *\n  * @author J. L. Johnston\n  * @date 27/05/2017\n  */\nconst permute = (numbers) => {\n  const size = numbers.length\n  const result = []\n  let current = []\n  let permutation = 1\n\n  for (let i = 0; i < size; i++) {\n    current.push(numbers[i])\n  }\n\n  do {\n    result.push(current.slice())\n    permutation++\n    for (let i = 0; i < size; i++) {\n      const index = current.indexOf(numbers[i])\n      if (index > -1) {\n        const number = current[index]\n        const index = i\n        const number = numbers[i]\n        current.splice(index, 1)\n        current.splice(i, 0, number)\n      }\n    }\n  } while (permutation <= size)\n\n  return result\n}\n\nmodule.exports = {\n  intersperse,\n  permute\n}\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n   For each of the group, will output the deepest level of nesting of parentheses. \n   E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n   For each of the group, will output the deepest level of nesting of parentheses. \n   E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const stack = []\n  const output = []\n  let paren_index = 0\n\n  for (paren_index = 0; paren_index < paren_string.length; paren_index++) {\n    if (paren_string[paren_index] === '(') {\n      stack.push(paren_index)\n    } else if (paren_string[paren_index] === ')') {\n      if (stack.length > 0) {\n        stack.pop()\n      }\n    }\n  }\n  return output\n}\n\n/*\n  Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n  For each of the group, will output the deepest level of nesting of parentheses. \n  E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n  \n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParensWithBrackets = (paren_string) => {\n  const stack = []\n  const output = []\n  let paren_index = 0\n  \n  for (paren_index = 0; paren_index < paren_string.length; paren_index++) {\n    if (paren_string[paren_index] === '(') {\n      stack.push(paren_index)\n    } else if (paren_string[paren_index] === ')') {\n      if (stack.length > 0) {\n        stack.pop()\n      }\n    } else if (paren_string[paren_index] === '[' && stack.length > 0) {\n      stack.pop()\n      stack.push(paren_index)\n    } else if (paren_string[paren_index] === ']') {\n      if (stack.length > 0) {\n        stack.pop()\n      }\n    }\n  }\n  return output\n}\n\n/*\n  Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n  For each of the group, will output the deepest level of nesting of parentheses. \n  E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n  \n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParensWithBracketsWithParens = (paren_string) => {\n  const stack = []\n  const output = []\n  let paren_index = 0\n  \n  for (paren_index = 0; paren_index < paren_string.length; paren_index++) {\n    if (paren_string[paren_index] === '(') {\n      stack.push(paren_index)\n    } else if (paren_string[paren_index] === ')') {\n      if (stack.length > 0) {\n        stack.pop()\n      }\n    } else if (paren_string[paren_index] === '(') {\n      stack.push(paren_index)\n    } else if (paren_string[paren_index] === ')') {\n      if (stack.length > 0) {\n        stack.pop()\n      }\n    } else if (paren_string[paren_index] === '[' && stack.length > 0) {\n      stack.pop()\n      stack.push(paren_index)\n    } else if (paren_string[paren_index] === ']') {\n      if (stack.length > 0) {\n        stack.pop()\n      }\n    }\n  }\n  return output\n}\n\nconst parseNestedParensWithBrackets = (paren_string) => parseNestedParensWithBracketsWithParens(paren_string)\n\nconst parseNestedParensWithBracketsWithParens = (paren_string) => parseNestedParensWithBracketsWithParens(paren_string)\n\nconst parseNestedParensWithBracketsWithParens = (paren_string) => parseNestedParensWithBracketsWithParens(paren_string)\n\nconst parseNestedParensWithBrackets = (paren_string) => parseNestedParensWithBracketsWithParens(paren_string)\n\nconst parseNestedParensWithBrackets = (paren_string) => parseNestedParensWithBracketsWithParens(paren_string)\n\nconst parseNestedParensWithBrackets = (paren_string) => parseNestedParensWithBracketsWithParens(paren_string)\n\nconst parseNestedParens = (paren_string) => parseNestedParensWithBracketsWithParens(paren_string)\n\nconst parseNestedParens = (paren_string) => parseNestedParensWithBracketsWithParens(paren_string)\n\nconst parseNestedParens = (paren_string) => parseNestedParensWithBracketsWithParens(paren_string)\n\nconst parseNestedParens = (paren_string) => parseNestedParensWithBracketsWithParens(paren_string)\n\nconst parseNestedParens = (paren_string) => parseNestedParensWithBracketsWithParens(paren_string)\n\nconst parseNestedParens = (paren_string) => parseNestedParensWithBracketsWithParens(paren_string)\n\nconst parseNestedParens = (paren_string) => parseNestedParensWithBracketsWithParens(paren_string)\n\nconst parseNestedParens = (paren_string) => parseNestedParensWithBracketsWithParens(paren_string)\n\nconst parseNestedParens = (paren_string) => parseNestedParensWithBracketsWithParens(paren_string)\n\nconst parseNestedParens = (paren_string) => parse"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that will contain will give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that will contain will give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const stringsToCheck = strings.map(s => s.toLowerCase());\n  return stringsToCheck.filter(s => s.includes(substring.toLowerCase()));\n};\n\nmodule.exports = filterBySubstring;\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n    let sum = 0;\n    let product = 1;\n\n    numbers.forEach(i => {\n        sum += i;\n        product *= i;\n    });\n\n    return [sum, product];\n};\n\nmodule.exports = sumProduct;\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a will give list of integers, will generate a list of rolling maximum element will find until will give moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a will give list of integers, will generate a list of rolling maximum element will find until will give moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n    let result = [numbers[0]];\n    for (let i = 1; i < numbers.length; i++) {\n        result.push(Math.max(result[i - 1], numbers[i]));\n    }\n    return result;\n};\n\n/*\n  * Return the sum of all the integers in the list\n  */\nconst sum = (numbers) => {\n    let sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    return sum;\n};\n\n/*\n  * Return the sum of all the even integers in the list\n  */\nconst sumEven = (numbers) => {\n    let sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] % 2 === 0) {\n            sum += numbers[i];\n        }\n    }\n    return sum;\n};\n\n/*\n  * Return the sum of all the odd integers in the list\n  */\nconst sumOdd = (numbers) => {\n    let sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] % 2!== 0) {\n            sum += numbers[i];\n        }\n    }\n    return sum;\n};\n\n/*\n  * Return the sum of all the integers in the list\n  */\nconst sumOfSquares = (numbers) => {\n    let sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        sum += Math.pow(numbers[i], 2);\n    }\n    return sum;\n};\n\n/*\n  * Return the sum of all the integers in the list\n  */\nconst sumOfSquaresEven = (numbers) => {\n    let sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] % 2 === 0) {\n            sum += Math.pow(numbers[i], 2);\n        }\n    }\n    return sum;\n};\n\n/*\n  * Return the sum of all the integers in the list\n  */\nconst sumOfSquaresOdd = (numbers) => {\n    let sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] % 2!== 0) {\n            sum += Math.pow(numbers[i], 2);\n        }\n    }\n    return sum;\n};\n\n/*\n  * Return the sum of all the integers in the list\n  */\nconst sumOfSquaresSquare = (numbers) => {\n    let sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        sum += Math.pow(numbers[i], 2);\n    }\n    return sum;\n};\n\n/*\n  * Return the sum of all the integers in the list\n  */\nconst sumOfSquaresSquareEven = (numbers) => {\n    let sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] % 2 === 0) {\n            sum += Math.pow(numbers[i], 2);\n        }\n    }\n    return sum;\n};\n\n/*\n  * Return the sum of all the integers in the list\n  */\nconst sumOfSquaresSquareOdd = (numbers) => {\n    let sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] % 2!== 0) {\n            sum += Math.pow(numbers[i], 2);\n        }\n    }\n    return sum;\n};\n\n/*\n  * Return the sum of all the integers in the list\n  */\nconst sumOfSquaresSquareSquare = (numbers) => {\n    let sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        sum += Math.pow(numbers[i], 2);\n    }\n    return sum;\n};\n\n/*\n  * Return the sum of all the integers in the list\n  */\nconst sumOfSquaresSquareSquareEven = (numbers) => {\n    let sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] % 2 === 0) {\n            sum += Math.pow(numbers[i], 2);\n        }\n    }\n    return sum;\n};\n\n/*\n  * Return the sum of all the integers in the list\n  */\nconst sumOfSquaresSquareSquareOdd = (numbers) => {\n    let sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] % 2!== 0) {\n            sum += Math.pow(numbers[i], 2);\n        }\n    }\n    return sum;\n};\n\n/*\n  * Return the sum of all the integers in the list\n  */\nconst sumOfSquaresSquareSquareSquare = (numbers) => {\n    let sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        sum += Math.pow(numbers[i], 2);\n    }\n    return sum;\n};\n\n/*\n  * Return the sum of all the integers in the list\n  */\nconst sumOfSquaresSquareSquareSquareEven = (numbers) => {\n    let sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] % 2 === 0) {\n            sum += Math.pow(numbers[i], 2);\n        }\n    }\n    return sum;\n};\n\n/*\n  * Return the sum of all the integers in the list\n  */\nconst sumOfSquaresSquareSquareSquareOdd = (numbers) => {\n    let sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers["}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig will be a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* will Find the shortest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig will be a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* will Find the shortest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const palindrome = '';\n  const suffix = string.split('').reverse().join('');\n  let longestPalindrome = '';\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i; j < string.length; j++) {\n      if (isPalindrome(string.slice(i, j + 1)) && j - i > longestPalindrome.length) {\n        longestPalindrome = string.slice(i, j + 1);\n      }\n    }\n  }\n  return suffix + longestPalindrome;\n}\n\n/* Test if a given string is a palindrome*/\n const isPalindrome = (string)=>{\n   return string == string.split('').reverse().join('');\n}\n\n/* will find the longest palindrome that can be built from two given strings\n   given will supply first string and second string*/\nconst longestPalindrome = (string1, string2) => {\n  let longestPalindrome = '';\n  let prefix = '';\n  for (let i = 0; i < string1.length; i++) {\n    for (let j = 0; j < string2.length; j++) {\n      if (isPalindrome(string1.slice(i, j + 1)) && j - i > longestPalindrome.length) {\n        longestPalindrome = string1.slice(i, j + 1);\n        prefix = string1.slice(0, i + 1);\n      }\n    }\n  }\n  return prefix + longestPalindrome;\n}\n\n/* Test if given string is a palindrome*/\n const isPalindrome = (string)=>{\n   return string == string.split('').reverse().join('');\n}\n\n/* will find the longest palindrome that can be built from given string\n   given will supply string*/\nconst longestPalindrome = (string) => {\n  let longestPalindrome = '';\n  let prefix = '';\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i; j < string.length; j++) {\n      if (isPalindrome(string.slice(i, j + 1)) && j - i > longestPalindrome.length) {\n        longestPalindrome = string.slice(i, j + 1);\n        prefix = string.slice(0, i + 1);\n      }\n    }\n  }\n  return prefix + longestPalindrome;\n}\n\n/* Test if given string is a palindrome*/\n const isPalindrome = (string)=>{\n   return string == string.split('').reverse().join('');\n}\n\n/* will find the longest palindrome that can be built from given string\n   given will supply string*/\nconst longestPalindrome = (string) => {\n  let longestPalindrome = '';\n  let prefix = '';\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i; j < string.length; j++) {\n      if (isPalindrome(string.slice(i, j + 1)) && j - i > longestPalindrome.length) {\n        longestPalindrome = string.slice(i, j + 1);\n        prefix = string.slice(0, i + 1);\n      }\n    }\n  }\n  return prefix + longestPalindrome;\n}\n\n/* Test if given string is a palindrome*/\n const isPalindrome = (string)=>{\n   return string == string.split('').reverse().join('');\n}\n\n/* will find the longest palindrome that can be built from given string\n   given will supply string*/\nconst longestPalindrome = (string) => {\n  let longestPalindrome = '';\n  let prefix = '';\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i; j < string.length; j++) {\n      if (isPalindrome(string.slice(i, j + 1)) && j - i > longestPalindrome.length) {\n        longestPalindrome = string.slice(i, j + 1);\n        prefix = string.slice(0, i + 1);\n      }\n    }\n  }\n  return prefix + longestPalindrome;\n}\n\n/* Test if given string is a palindrome*/\n const isPalindrome = (string)=>{\n   return string == string.split('').reverse().join('');\n}\n\n/* will find the longest palindrome that can be built from given string\n   given will supply string*/\nconst longestPalindrome = (string) => {\n  let longestPalindrome = '';\n  let prefix = '';\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i; j < string.length; j++) {\n      if (isPalindrome(string.slice(i, j + 1)) && j - i > longestPalindrome.length) {\n        longestPalindrome = string.slice(i, j + 1);\n        prefix = string.slice(0, i + 1);\n      }\n    }\n  }\n  return prefix + longestPalindrome;\n}\n\n\n\n/* Test if given string is a palindrome*/\n const isPalindrome = (string)=>{\n   return string == string.split('').reverse().join('');\n}\n\n/* will find the longest palindrome that can be built from given string\n   given will supply string*/\nconst longestPalindrome = (string) => {\n  let longestPalindrome = '';\n  let prefix = '';\n  for ("}
{"task_id": "JavaScript/11", "prompt": "/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n    a = a.split('');\n    b = b.split('');\n    let result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += a[i] + b[i];\n    }\n    return result;\n}\n\nconst stringXorTwoStrings = (a, b) => {\n    a = a.split('');\n    b = b.split('');\n    let result = '';\n    for (let i = 0; i < a.length; i++) {\n        let iA = a[i] == '1';\n        let iB = b[i] == '1';\n        if (iA && iB) {\n            result += '1';\n        } else if (!iA &&!iB) {\n            result += '0';\n        } else {\n            result += '0';\n        }\n    }\n    return result;\n}\n\nmodule.exports = {\n    stringXor,\n    stringXorTwoStrings\n}<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. will Return the first one in case of multiple \n   strings of the same length. Return null in case the input list will be empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. will Return the first one in case of multiple \n   strings of the same length. Return null in case the input list will be empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null\n  let length = 0\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > length) {\n      length = s.length\n      longest = s\n    }\n  })\n  return longest\n}\n\n// Another approach to longest common prefix\nconst longest = (strings) => {\n  if (!strings) return null\n  if (strings.length === 1) return strings[0]\n  let prefix = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < prefix.length) return prefix\n    for (let j = 0; j < prefix.length; j++) {\n      if (strings[i][j]!== prefix[j]) return prefix\n    }\n    prefix = strings[i]\n  }\n  return prefix\n}\n\nmodule.exports = longest\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": false, "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n    if (a === 0) return b;\n    if (b === 0) return a;\n\n    if (a > b) return greatestCommonDivisor(a % b, b);\n    return greatestCommonDivisor(b % a, a);\n};\n\n/**\n  * Return a least common multiple of two integers a and b\n  * NOTE: this function is not optimized for speed.\n  *\n  * @param {number} a\n  * @param {number} b\n  * @return {number}\n  */\nconst leastCommonMultiple = (a, b) => {\n    const gcd = greatestCommonDivisor(a, b);\n    return (a / gcd) * (b / gcd);\n};\n\n/**\n  * Return a number which is the sum of two integers.\n  *\n  * @param {number} a\n  * @param {number} b\n  * @return {number}\n  */\nconst sum = (a, b) => a + b;\n\n/**\n  * Return a number which is the product of two integers.\n  *\n  * @param {number} a\n  * @param {number} b\n  * @return {number}\n  */\nconst product = (a, b) => a * b;\n\n/**\n  * Return a number which is the difference between two integers.\n  *\n  * @param {number} a\n  * @param {number} b\n  * @return {number}\n  */\nconst difference = (a, b) => a - b;\n\n/**\n  * Return a number which is the quotient of two integers.\n  *\n  * @param {number} a\n  * @param {number} b\n  * @return {number}\n  */\nconst quotient = (a, b) => a / b;\n\n/**\n  * Return a number which is the remainder of two integers.\n  *\n  * @param {number} a\n  * @param {number} b\n  * @return {number}\n  */\nconst remainder = (a, b) => a % b;\n\nexport {\n    greatestCommonDivisor,\n    leastCommonMultiple,\n    sum,\n    product,\n    difference,\n    quotient,\n    remainder,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": false, "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n  const prefixes = [string];\n  for (let i = 1; i < string.length; i++) {\n    const prefix = string.slice(0, i);\n    prefixes.push(prefix);\n  }\n  return prefixes;\n};\n\n// Return list of all suffixes from shortest to longest of the input string\n// TODO: Should this be named allSuffixes instead of allSuffixes?\nconst allSuffixes = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n  const suffixes = [string];\n  for (let i = 1; i < string.length; i++) {\n    const suffix = string.slice(i);\n    suffixes.push(suffix);\n  }\n  return suffixes;\n};\n\n// Returns true if the first argument is a prefix of the second\n// TODO: Is this really the same as startsWith?\nconst isPrefixOf = (string, prefix) => {\n  return string.startsWith(prefix);\n};\n\n// Returns true if the first argument is a suffix of the second\nconst isSuffixOf = (string, suffix) => {\n  return string.endsWith(suffix);\n};\n\n// Returns true if the first argument is a prefix or suffix of the second\nconst isIn = (string, prefix, suffix) => {\n  return isPrefixOf(string, prefix) || isSuffixOf(string, suffix);\n};\n\n// Returns true if the first argument is a prefix or suffix of the second\nconst isInOr = (string, prefix, suffix) => {\n  return isIn(string, prefix, suffix) || isIn(string, suffix, prefix);\n};\n\n// Returns true if the first argument is a prefix of the second\nconst isPrefix = (string, prefix) => {\n  return string.startsWith(prefix);\n};\n\n// Returns true if the first argument is a suffix of the second\nconst isSuffix = (string, suffix) => {\n  return string.endsWith(suffix);\n};\n\n// Returns true if the first argument is a prefix or suffix of the second\nconst isInOrPrefix = (string, prefix) => {\n  return isIn(string, prefix) || isPrefix(string, prefix);\n};\n\n// Returns true if the first argument is a prefix or suffix of the second\nconst isInOrSuffix = (string, suffix) => {\n  return isIn(string, suffix) || isSuffix(string, suffix);\n};\n\n// Returns true if the first argument is a prefix or suffix of the second\nconst isInOrIn = (string, prefix, suffix) => {\n  return isIn(string, prefix, suffix) || isIn(string, suffix, prefix);\n};\n\n// Returns true if the first argument is a prefix or suffix of the second\nconst isInOrNotIn = (string, prefix, suffix) => {\n  return isInOrIn(string, prefix, suffix) || isInOrNotIn(string, prefix, suffix);\n};\n\n// Returns true if the first argument is a prefix or suffix of the second\nconst isInOrBetween = (string, prefix, suffix) => {\n  return isIn(string, prefix) || isIn(string, suffix) || isIn(string, prefix, suffix);\n};\n\n// Returns true if the first argument is a prefix or suffix of the second\nconst isInOrBetweenOrNotIn = (string, prefix, suffix) => {\n  return isInOrIn(string, prefix, suffix) || isInOrBetweenOrNotIn(string, prefix, suffix);\n};\n\n// Returns true if the first argument is a prefix or suffix of the second\nconst isInOrBetweenOrIn = (string, prefix, suffix) => {\n  return isInOrIn(string, prefix, suffix) || isInOrBetween(string, prefix, suffix);\n};\n\n// Returns true if the first argument is a prefix or suffix of the second\nconst isInOrBetweenOrBetween = (string, prefix, suffix) => {\n  return isInOrIn(string, prefix, suffix) || isInOrBetween(string, prefix, suffix);\n};\n\n// Returns true if the first argument is a prefix or suffix of the second\nconst isInOrBetweenOrBetweenOrNotIn = (string, prefix, suffix) => {\n  return isInOrIn(string, prefix, suffix) || isInOrBetween(string, prefix, suffix) || isInOrBetweenOrNotIn(string, prefix, suffix);\n};\n\n// Returns true if the first argument is a prefix or suffix of the second\nconst isInOrBetweenOrBetweenOrIn = (string, prefix, suffix) => {\n  return isInOrIn(string, prefix, suffix) || isInOrBetween(string, prefix, suffix) || isInOrBetween(string, suffix, prefix);\n};\n\n// Returns true if the first argument is a prefix or suffix of the second\nconst isInOrBetweenOrBetweenOrBetween = (string, prefix, suffix) => {\n  return isInOrIn(string, prefix, suffix) || isInOrBetween(string, prefix, suffix) || isInOrBetween(string, suffix, prefix);\n};\n\n// Returns true if the first argument is a prefix or suffix of the second\nconst isInOrBetweenOrBetweenOrBetweenOrNotIn = (string, prefix, suffix) => {\n  return isInOrIn(string, prefix, suffix) || isInOrBetween(string, prefix, suffix) || isInOrBetween(string, suffix, prefix) || isInOrBetweenOrNotIn(string, prefix, suffix);\n};\n\n// Returns true if the first argument is a prefix or suffix of the second\nconst isInOrBetweenOrBetweenOrBetweenOrIn = (string, prefix, suffix) => {\n  return isInOrIn(string, prefix, suffix) || isInOrBetween(string, prefix, suffix) || isInOrBetween(string, suffix, prefix) || isInOrBetweenOrIn(string, prefix, suffix);\n};\n\n// Returns true if the first argument is a prefix or suffix of the second\nconst isInOrBetweenOrBetweenOrBetweenOrBetween = (string, prefix, suffix) => {\n  return isInOrIn(string, prefix, suffix) || isInOrBetween(string, prefix, suffix) || isInOrBetween(string, suffix, prefix"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  while (n > 0) {\n    result +='';\n    result += n;\n    n--;\n  }\n  return result;\n};\n\nmodule.exports = stringSequence;\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const str = string.toLowerCase();\n  const distinct = [];\n\n  for (let i = 0; i < str.length; i++) {\n    if (distinct.indexOf(str[i]) === -1) {\n      distinct.push(str[i]);\n    }\n  }\n\n  return distinct.length;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function will be a string representing musical notes in a special ASCII format. \n   Your task will be to parse this string and return list of integers corresponding to how many beats will do each \n   not last. \n\n   Here will be a legend: \n   'o '-whole note, will last four beats \n   'o| '-half note, will last two beats \n   '.| '-quater note, will last one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string representing musical notes in a special ASCII format. \n   Your task will be to parse this string and return list of integers corresponding to how many beats will do each \n   not last. \n\n   Here will be a legend: \n   'o '-whole note, will last four beats \n   'o| '-half note, will last two beats \n   '.| '-quater note, will last one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const parsed = [];\n  let note = '';\n  for (let i = 0; i < music_string.length; i++) {\n    if (music_string[i] ==='') {\n      parsed.push(note);\n      note = '';\n      continue;\n    }\n    if (music_string[i] === 'o') {\n      note += 'o';\n    } else {\n      note += 'o|';\n    }\n  }\n  parsed.push(note);\n  return parsed;\n}\n\n/* \n   You will need to return a list of strings representing the original string passed to the function. \n   The strings should be in the same format as they were passed in to parseMusic.\n   \n   Here will be a legend: \n   'o '-whole note, will last four beats \n   'o| '-half note, will last two beats \n   '.| '-quater note, will last one beat\n   \n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  ['o o|.| o| o|.|.|.|.| o o', 'o o|.| o| o|.|.|.|.| o o']\n  */\nconst parseMusic2 = (music_string) => {\n  const parsed = [];\n  let note = '';\n  for (let i = 0; i < music_string.length; i++) {\n    if (music_string[i] ==='') {\n      parsed.push(note);\n      note = '';\n      continue;\n    }\n    if (music_string[i] === 'o') {\n      note += 'o';\n    } else {\n      note += 'o|';\n    }\n  }\n  parsed.push(note);\n  return parsed;\n}\n\n/* \n  This is a simple test function. It uses parseMusic to parse the input and prints out the results.\n  It will print the output in the same format as we printed it out in parseMusic.\n  \n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst test = (music_string) => {\n  console.log(parseMusic(music_string));\n}\n\n/* \n  This is a simple test function. It uses parseMusic2 to parse the input and prints out the results.\n  It will print the output in the same format as we printed it out in parseMusic.\n  \n  >>> parseMusic2('o o|.| o| o|.|.|.|.| o o')\n  [ 'o o|.| o| o|.|.|.|.| o o', 'o o|.| o| o|.|.|.|.| o o']\n  */\nconst test2 = (music_string) => {\n  console.log(parseMusic2(music_string));\n}\n\n/* \n  This is a simple test function. It uses parseMusic to parse the input and prints out the results.\n  It will print the output in the same format as we printed it out in parseMusic.\n  \n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst test3 = (music_string) => {\n  const parsed = parseMusic(music_string);\n  const output = [];\n  for (let i = 0; i < parsed.length; i++) {\n    output.push(parsed[i]);\n  }\n  console.log(output);\n}\n\n/* \n  This is a simple test function. It uses parseMusic2 to parse the input and prints out the results.\n  It will print the output in the same format as we printed it out in parseMusic.\n  \n  >>> parseMusic2('o o|.| o| o|.|.|.|.| o o')\n  [ 'o o|.| o| o|.|.|.|.| o o', 'o o|.| o| o|.|.|.|.| o o']\n  */\nconst test4 = (music_string) => {\n  const parsed = parseMusic2(music_string);\n  const output = [];\n  for (let i = 0; i < parsed.length; i++) {\n    output.push(parsed[i]);\n  }\n  console.log(output);\n}\n\n/* \n  This is a simple test function. It uses parseMusic to parse the input and prints out the results.\n  It will print the output in the same format as we printed it out in parseMusic.\n  \n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst test5 = (music_string) => {\n  const parsed = parseMusic(music_string);\n  const output = [];\n  for (let i = 0; i < parsed.length; i++) {\n    output.push(parsed[i]);\n  }\n  console.log(output);\n}\n\n/* \n  This is a simple test function. It uses parseMusic2 to parse the input and prints out the results.\n  It will print the output in the same format as we printed it out in parseMusic.\n  \n  >>> parseMusic2('o o|.| o| o|.|.|.|.| o o')\n  [ 'o o|.| o| o|"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a will give substring can will be find in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a will give substring can will be find in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n    let count = 0;\n    let pos = 0;\n    while (true) {\n        pos = string.indexOf(substring, pos);\n        if (pos === -1) {\n            break;\n        }\n        count++;\n        pos += substring.length;\n    }\n    return count;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input will be a space-will delimitate string of numberals from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input will be a space-will delimitate string of numberals from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArr = numbers.split(' ');\n  const numbersArrSorted = numbersArr.sort((a,b) => {\n    const numA = parseInt(a.replace(/\\D/g,''));\n    const numB = parseInt(b.replace(/\\D/g,''));\n    if (numA > numB) return 1;\n    else if (numA < numB) return -1;\n    else return 0;\n  });\n  const numbersSorted = numbersArrSorted.join(' ');\n  return numbersSorted;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let largest = Math.max(numbers);\n  let smallest = Math.min(numbers);\n  let closestElements = [];\n  let closestDistance = Infinity;\n  let closestIndex = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < largest && numbers[i] > smallest) {\n      let distance = Math.abs(numbers[i] - largest);\n      if (distance < closestDistance) {\n        closestElements = [largest, numbers[i]];\n        closestIndex = i;\n        closestDistance = distance;\n      }\n    }\n  }\n\n  return [numbers[closestIndex], numbers[closestIndex + 1]];\n}\n\n// This is a good example of how to use the `findClosestElements` function.\nconst findClosestElementsExample = findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]);\n\n// This is a good example of how to use the `findClosestElements` function.\nconst findClosestElementsExample2 = findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]);\n\n// This is a good example of how to use the `findClosestElements` function.\nconst findClosestElementsExample3 = findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]);\n\n// This is a good example of how to use the `findClosestElements` function.\nconst findClosestElementsExample4 = findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]);\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const steps = max - min;\n  return numbers.map((number) => (number - min) / steps);\n};\n\nexport default rescaleToUnit;\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter will give list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter will give list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(x => isInteger(x));\n}\n\n/**\n  * Filter will give list of any python values only for floats\n  * NOTE: Will give an empty list if there are no floats\n  *       If there are some float values, but none of them are integers,\n  *       it will still return an empty list\n  * @param {List} values\n  * @returns {List}\n  */\nconst filterFloats = (values) => {\n  return values.filter(x => isFloat(x));\n}\n\n/**\n  * Filter will give list of any python values only for floats\n  * NOTE: Will give an empty list if there are no floats\n  *       If there are some float values, but none of them are integers,\n  *       it will still return an empty list\n  * @param {List} values\n  * @returns {List}\n  */\nconst filterStrings = (values) => {\n  return values.filter(x => isString(x));\n}\n\n/**\n  * Filter will give list of any python values only for lists\n  * NOTE: Will give an empty list if there are no lists\n  *       If there are some list values, but none of them are strings,\n  *       it will still return an empty list\n  * @param {List} values\n  * @returns {List}\n  */\nconst filterLists = (values) => {\n  return values.filter(x => isList(x));\n}\n\n/**\n  * Filter will give list of any python values only for dictionaries\n  * NOTE: Will give an empty list if there are no dictionaries\n  *       If there are some dictionary values, but none of them are lists,\n  *       it will still return an empty list\n  * @param {List} values\n  * @returns {List}\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(x => isDictionary(x));\n}\n\n/**\n  * Filter will give list of any python values only for objects\n  * NOTE: Will give an empty list if there are no objects\n  *       If there are some objects values, but none of them are dictionaries,\n  *       it will still return an empty list\n  * @param {List} values\n  * @returns {List}\n  */\nconst filterObjects = (values) => {\n  return values.filter(x => isObject(x));\n}\n\n/**\n  * Filter will give list of any python values only for booleans\n  * NOTE: Will give an empty list if there are no booleans\n  *       If there are some booleans values, but none of them are strings,\n  *       it will still return an empty list\n  * @param {List} values\n  * @returns {List}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(x => isBoolean(x));\n}\n\n/**\n  * Filter will give list of any python values only for nulls\n  * NOTE: Will give an empty list if there are no nulls\n  *       If there are some null values, but none of them are booleans,\n  *       it will still return an empty list\n  * @param {List} values\n  * @returns {List}\n  */\nconst filterNulls = (values) => {\n  return values.filter(x => x === null);\n}\n\n/**\n  * Filter will give list of any python values only for lists of strings\n  * NOTE: Will give an empty list if there are no lists of strings\n  *       If there are some lists of strings values, but none of them are booleans,\n  *       it will still return an empty list\n  * @param {List} values\n  * @returns {List}\n  */\nconst filterListsOfStrings = (values) => {\n  return values.filter(x => isListOfStrings(x));\n}\n\n/**\n  * Filter will give list of any python values only for lists of booleans\n  * NOTE: Will give an empty list if there are no lists of booleans\n  *       If there are some lists of booleans values, but none of them are lists,\n  *       it will still return an empty list\n  * @param {List} values\n  * @returns {List}\n  */\nconst filterListsOfBooleans = (values) => {\n  return values.filter(x => isListOfBooleans(x));\n}\n\n/**\n  * Filter will give list of any python values only for lists of integers\n  * NOTE: Will give an empty list if there are no lists of integers\n  *       If there are some lists of integers values, but none of them are lists,\n  *       it will still return an empty list\n  * @param {List} values\n  * @returns {List}\n  */\nconst filterListsOfIntegers = (values) => {\n  return values.filter(x => isListOfIntegers(x));\n}\n\n/**\n  * Filter will give list of any python values only for lists of floats\n  * NOTE: Will give an empty list if there are no lists of floats\n  *       If there are some lists of floats values, but none of them are lists,\n  *       it will still return an empty list\n  * @param {List} values\n  * @returns {List}\n  */\nconst filterListsOfFloats = (values) => {\n  return values.filter(x => isListOfFloats(x));\n}\n\n/**\n  * Filter will give list of any python values only for lists of strings\n  * NOTE: Will give an empty list if there are no lists of strings\n  *       If there are some lists of strings values, but none of them are lists,\n  *       it will still return an empty list\n  * @param {List} values\n  * @returns {List}\n  */\nconst filterListsOfStrings = (values) => {\n  return values.filter(x => isListOfStrings(x));\n}\n\n/**\n  * Filter will give list of any python values only for dictionaries of strings\n  * NOTE: Will give an empty list if there are no dictionaries of strings\n  *       If there are some dictionaries of strings values,"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const length = 0\n  let index = 0\n\n  while (index < string.length) {\n    index += 1\n    length += 1\n  }\n\n  return length\n}\n\n/* Return first character of string\n  >>> first('abc')\n  'a'\n  >>> first('')\n  ''\n  */\nconst first = (string) => {\n  return string.charAt(0)\n}\n\n/* Return last character of string\n  >>> last('abc')\n  'c'\n  >>> last('')\n  ''\n  */\nconst last = (string) => {\n  return string.charAt(string.length - 1)\n}\n\n/* Return substring of string\n  >>> substr('abc', 0, 1)\n  'a'\n  >>> substr('abc', 0, 2)\n  'ab'\n  >>> substr('abc', 0, 3)\n  'abc'\n  >>> substr('abc', 1, 2)\n  'bc'\n  >>> substr('abc', 1, 3)\n  'b'\n  >>> substr('abc', 3, 2)\n  ''\n  >>> substr('abc', -1, 1)\n  ''\n  >>> substr('abc', -1, 3)\n  'c'\n  >>> substr('abc', -2, 2)\n  ''\n  >>> substr('abc', -3, 1)\n  ''\n  >>> substr('abc', 0, 0)\n  ''\n  */\nconst substr = (string, start, end) => {\n  const length = strlen(string)\n  let index = start\n\n  if (index < 0) {\n    index = length + index\n  }\n\n  if (index > length) {\n    return ''\n  }\n\n  if (end < 0) {\n    end = length + end\n  }\n\n  if (end > length) {\n    end = length\n  }\n\n  if (end < index) {\n    return ''\n  }\n\n  return string.substring(index, end)\n}\n\n/* Return upper case string\n  >>> upper('abc')\n  'ABC'\n  >>> upper('XYZ')\n  'XYZ'\n  >>> upper('xyz')\n  'XYZ'\n  >>> upper('ABC', 1)\n  'BC'\n  */\nconst upper = (string, index = 0) => {\n  const length = strlen(string)\n  let index = 0\n  let result = ''\n\n  if (index < 0) {\n    index = length + index\n  }\n\n  if (index > length) {\n    return ''\n  }\n\n  while (index < length) {\n    const c = string.charCodeAt(index)\n\n    if (c >= 97 && c <= 122) {\n      result += string[index]\n    }\n\n    index += 1\n  }\n\n  return result\n}\n\n/* Return lower case string\n  >>> lower('ABC')\n  'abc'\n  >>> lower('XYZ')\n  'xyz'\n  >>> lower('xyz')\n  'xyz'\n  >>> lower('ABC', 1)\n  'bc'\n  */\nconst lower = (string, index = 0) => {\n  const length = strlen(string)\n  let index = 0\n  let result = ''\n\n  if (index < 0) {\n    index = length + index\n  }\n\n  if (index > length) {\n    return ''\n  }\n\n  while (index < length) {\n    const c = string.charCodeAt(index)\n\n    if (c >= 97 && c <= 122) {\n      result += string[index]\n    }\n\n    index += 1\n  }\n\n  return result\n}\n\n/* Return string with capitalized first character\n  >>> capFirst('abc')\n  'Abc'\n  >>> capFirst('ABC')\n  'ABC'\n  >>> capFirst('XYZ')\n  'XYZ'\n  >>> capFirst('XYZ', 1)\n  'YZ'\n  >>> capFirst('XYZ', 3)\n  'Xyz'\n  */\nconst capFirst = (string, index = 0) => {\n  const length = strlen(string)\n  let index = 0\n  let result = ''\n\n  if (index < 0) {\n    index = length + index\n  }\n\n  if (index > length) {\n    return ''\n  }\n\n  while (index < length) {\n    const c = string.charCodeAt(index)\n\n    if (c >= 97 && c <= 122) {\n      result += string[index]\n    }\n\n    index += 1\n  }\n\n  return result.charAt(0).toUpperCase() + result.substr(1)\n}\n\n/* Return string with all lower case characters\n  >>> lower('ABC')\n  'abc'\n  >>> lower('XYZ')\n  'xyz'\n  >>> lower('XYZ', 1)\n  'yZ'\n  >>> lower('XYZ', 3)\n  'xYz'\n  */\nconst lowerAll = (string, index = 0) => {\n  const length = strlen(string)\n  let index = 0\n  let result = ''\n\n  if (index < 0) {\n    index = length + index\n  }\n\n  if (index > length) {\n    return ''\n  }\n\n  while (index < length) {\n    const c = string.charCodeAt(index)\n\n    if (c >= 97 && c <= 122) {\n      result += string[index]\n    }\n\n    index += 1\n  }\n\n  return result\n}\n\n/* Return string with all upper case characters\n  >>> upper('ABC')\n  'ABC'\n  >>> upper('XYZ')\n  'XYZ'\n  >>> upper('XYZ', 1)\n  'YZ'\n  >>> upper('XYZ', 3)\n  'Xyz'\n  */\nconst upperAll = (string, index = 0) => {\n  const length = strlen(string)\n  let index = 0\n  let result = ''\n\n  if (index < 0) {\n    index = length + index\n  }\n\n  if (index > length) {\n    return ''\n  }\n\n  while (index < length) {\n    const c = string.charCodeAt(index)\n\n    if (c >= 97 && c <= 122) {\n      result += string[index]\n    }\n\n    index += 1\n  }\n\n  return"}
{"task_id": "JavaScript/24", "prompt": "/* For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  return Math.floor(n / 2)\n}\n\n/*\n  For a number n, will find the largest number that can be divided evenly into n, bigger than n\n  >>> largestEvenDivisor(15)\n  7\n  */\nconst largestEvenDivisor = (n) => {\n  return Math.ceil(n / 2)\n}\n\n/*\n  For a number n, will find the largest number that can be divided evenly into n, bigger than n and smaller than n\n  >>> largestTriangularNumber(15)\n  5\n  */\nconst largestTriangularNumber = (n) => {\n  return largestDivisor(n) * largestDivisor(n)\n}\n\n/*\n  For a number n, will find the largest number that can be divided evenly into n, smaller than n and bigger than n\n  >>> largestBinaryNumber(15)\n  5\n  */\nconst largestBinaryNumber = (n) => {\n  return largestEvenDivisor(n) * largestTriangularNumber(n)\n}\n\n/*\n  For a number n, will find the largest number that can be divided evenly into n, smaller than n and bigger than n\n  >>> largestPrimeNumber(15)\n  5\n  */\nconst largestPrimeNumber = (n) => {\n  return largestBinaryNumber(n) + largestBinaryNumber(n)\n}\n\n/*\n  For a number n, will find the largest number that can be divided evenly into n, smaller than n and bigger than n\n  >>> largestMultiple(15)\n  15\n  */\nconst largestMultiple = (n) => {\n  return largestPrimeNumber(n) * largestPrimeNumber(n)\n}\n\n/*\n  For a number n, will find the largest number that can be divided evenly into n, smaller than n and bigger than n\n  >>> largestPower(15)\n  15\n  */\nconst largestPower = (n) => {\n  return largestMultiple(n)\n}\n\n/*\n  For a number n, will find the largest number that can be divided evenly into n, smaller than n and bigger than n\n  >>> largestPerfectNumber(15)\n  15\n  */\nconst largestPerfectNumber = (n) => {\n  return largestMultiple(n) * largestMultiple(n)\n}\n\n/*\n  For a number n, will find the largest number that can be divided evenly into n, smaller than n and bigger than n\n  >>> largestAbundantNumber(15)\n  15\n  */\nconst largestAbundantNumber = (n) => {\n  return largestPower(n) * largestPower(n)\n}\n\n/*\n  For a number n, will find the largest number that can be divided evenly into n, smaller than n and bigger than n\n  >>> largestTriangularNumber(15)\n  15\n  */\nconst largestTriangularNumber = (n) => {\n  return largestAbundantNumber(n) * largestMultiple(n)\n}\n\n/*\n  For a number n, will find the largest number that can be divided evenly into n, smaller than n and bigger than n\n  >>> largestBinaryNumber(15)\n  15\n  */\nconst largestBinaryNumber = (n) => {\n  return largestTriangularNumber(n) * largestMultiple(n)\n}\n\n/*\n  For a number n, will find the largest number that can be divided evenly into n, smaller than n and bigger than n\n  >>> largestPrimeNumber(15)\n  15\n  */\nconst largestPrimeNumber = (n) => {\n  return largestBinaryNumber(n) * largestMultiple(n)\n}\n\n/*\n  For a number n, will find the largest number that can be divided evenly into n, smaller than n and bigger than n\n  >>> largestMultiple(15)\n  15\n  */\nconst largestMultiple = (n) => {\n  return largestPrimeNumber(n) * largestPrimeNumber(n)\n}\n\n/*\n  For a number n, will find the largest number that can be divided evenly into n, smaller than n and bigger than n\n  >>> largestPower(15)\n  15\n  */\nconst largestPower = (n) => {\n  return largestMultiple(n)\n}\n\n/*\n  For a number n, will find the largest number that can be divided evenly into n, smaller than n and bigger than n\n  >>> largestPerfectNumber(15)\n  15\n  */\nconst largestPerfectNumber = (n) => {\n  return largestMultiple(n) * largestMultiple(n)\n}\n\n/*\n  For a number n, will find the largest number that can be divided evenly into n, smaller than n and bigger than n\n  >>> largestAbundantNumber(15)\n  15\n  */\nconst largestAbundantNumber = (n) => {\n  return largestPower(n) * largestMultiple(n)\n}\n\n/*\n  For a number n, will find the largest number that can be divided evenly into n, smaller than n and bigger than n\n  >>> largestTriangularNumber(15)\n  15\n  */\nconst largestTriangularNumber = (n) => {\n  return largestAbundantNumber(n) * largestMultiple(n)\n}\n\n/*\n  For a number n, will find the largest number that can be divided evenly into n, smaller than n and bigger than n\n  >>> largestBinaryNumber(15)\n  15\n  */\nconst largestBinaryNumber = (n) => {\n  return largestTriangularNumber(n) * largestMultiple(n)\n}\n\n/*\n  For a number n, will find the largest number that can be divided evenly into n, smaller than n and bigger than n\n  >>> largestPrimeNumber(15)\n  15\n  */\nconst largestPrimeNumber = (n) => {\n  return largestBinaryNumber(n) * largestMultiple(n)\n}\n\nmodule.exports = {\n  largestAbundantNumber,\n  largestDivisor,\n  largestEvenDivisor,\n  largestMultiple,\n  largestPower,\n  largestPerfectNumber,\n  largestTriangularNumber,\n  largestBinaryNumber,\n  largestPrimeNumber\n}\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      const count = (n / i);\n      factors.push([i, count]);\n    }\n  }\n  return factors;\n}\n\nmodule.exports = {\n  factorize,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  var seen = new Set();\n  return numbers.filter((n) => {\n    if (seen.has(n)) return false;\n    else seen.add(n);\n    return true;\n  });\n};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a will give string, will flip lowercase characters to uppercase and will uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a will give string, will flip lowercase characters to uppercase and will uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let newString = string.toLowerCase()\n  newString = newString.replace(/\\s/g, '')\n  newString = newString.replace(/[A-Z]/g, function(match) {\n    return match.toUpperCase()\n  })\n  newString = newString.replace(/[a-z]/g, function(match) {\n    return match.toLowerCase()\n  })\n  return newString\n}\n\n/* For a will give string, will return the length of the string.\n  >>> len('Hello')\n  5\n  */\nconst len = (string) => {\n  return string.length\n}\n\n/* For a will give a string, will return the string as an array of strings.\n  >>> split('Hello')\n  ['Hello']\n  */\nconst split = (string) => {\n  let array = string.split('')\n  return array\n}\n\n/* For a will give a string, will return the string as a string with all the spaces removed.\n  >>> removeSpaces('Hello world')\n  'HelloWorld'\n  */\nconst removeSpaces = (string) => {\n  return string.replace(/\\s+/g, '')\n}\n\n/* For a will give a string, will return the string as a string with all the newlines removed.\n  >>> removeNewLines('Hello world\\n\\n\\n')\n  'HelloWorld'\n  */\nconst removeNewLines = (string) => {\n  return string.replace(/\\n/g, '')\n}\n\n/* For a will give a string, will return the string as a string with all the tab characters removed.\n  >>> removeTabs('Hello world\\t\\t\\t')\n  'HelloWorld'\n  */\nconst removeTabs = (string) => {\n  return string.replace(/\\t/g, '')\n}\n\n/* For a will give a string, will return the string as a string with all the newlines and tab characters removed.\n  >>> removeNewLinesAndTabs('Hello world\\n\\n\\t\\t')\n  'HelloWorld'\n  */\nconst removeNewLinesAndTabs = (string) => {\n  return removeNewLines(removeTabs(string))\n}\n\n/* For a will give a string, will return the string with the first word capitalized.\n  >>> capitalizeFirst('Hello')\n  'Hello'\n  */\nconst capitalizeFirst = (string) => {\n  return string.slice(0, 1).toUpperCase() + string.slice(1)\n}\n\n/* For a will give a string, will return the string with all the words capitalized.\n  >>> capitalizeAll('Hello world')\n  'Hello world'\n  */\nconst capitalizeAll = (string) => {\n  return string.toUpperCase()\n}\n\n/* For a will give a string, will return the string with the first word in lowercase.\n  >>> lowercaseFirst('Hello')\n  'hello'\n  */\nconst lowercaseFirst = (string) => {\n  return string.slice(0, 1).toLowerCase() + string.slice(1)\n}\n\n/* For a will give a string, will return the string with all the words in lowercase.\n  >>> lowercaseAll('Hello world')\n  'hello world'\n  */\nconst lowercaseAll = (string) => {\n  return string.toLowerCase()\n}\n\n/* For a will give a string, will return the string with the first word in uppercase.\n  >>> uppercaseFirst('Hello')\n  'Hello'\n  */\nconst uppercaseFirst = (string) => {\n  return string.slice(0, 1).toUpperCase() + string.slice(1)\n}\n\n/* For a will give a string, will return the string with all the words in uppercase.\n  >>> uppercaseAll('Hello world')\n  'Hello world'\n  */\nconst uppercaseAll = (string) => {\n  return string.toUpperCase()\n}\n\n/* For a will give a string, will return the string with all the words with the first word in lowercase and the others in uppercase.\n  >>> lowerAndUpperCase('Hello world')\n  'Hello world'\n  */\nconst lowerAndUpperCase = (string) => {\n  return string.toLowerCase().toUpperCase()\n}\n\n/* For a will give a string, will return the string with all the words in lowercase and all the others in uppercase.\n  >>> lowerAndUpperCase('Hello world')\n  'Hello world'\n  */\nconst lowerAndUpperCaseAll = (string) => {\n  return string.toLowerCase().toUpperCase()\n}\n\n/* For a will give a string, will return the string with all the words in uppercase and all the others in lowercase.\n  >>> lowerAndUpperCase('Hello world')\n  'Hello world'\n  */\nconst lowerAndUpperCaseAllAll = (string) => {\n  return string.toUpperCase().toLowerCase()\n}\n\n/* For a will give a string, will return the string with all the words with the first word in lowercase and the others in uppercase.\n  >>> lowerAndUpperCase('Hello world')\n  'Hello world'\n  */\nconst lowerAndUpperCaseFirst = (string) => {\n  return string.toLowerCase().toUpperCase()\n}\n\n/* For a will give a string, will return the string with all the words in uppercase and all the others in lowercase.\n  >>> lowerAndUpperCaseFirst('Hello world')\n  'Hello world'\n  */\nconst lowerAndUpperCaseFirstAll = (string) => {\n  return string.toUpperCase().toLowerCase()\n}\n\n/* For a will give a string, will return the string with all the words in lowercase and all the others in uppercase.\n  >>> lowerAndUpperCaseFirst('Hello world')\n  'Hello world'\n  */\nconst lowerAndUpperCaseFirstAllAll = (string) => {\n  return string.toLowerCase().toUpperCase()\n}\n\n/* For a will give a string, will return the string with all the words with the first word in uppercase and the others in lowercase.\n  >>> lower"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let concatenated = '';\n  strings.forEach((str) => concatenated += str);\n  return concatenated;\n};\n\n// ### Exports\n\nmodule.exports = {\n  concatenate,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter((s) => s.startsWith(prefix));\n};\n\n//**************************************************************************\n\n// Function that takes in a string and returns the string's length.\nconst length = (s) => s.length;\n\n// Function that takes in a string and returns the string's first character.\nconst firstChar = (s) => s.charAt(0);\n\n// Function that takes in a string and returns the string's last character.\nconst lastChar = (s) => s.charAt(s.length - 1);\n\n//**************************************************************************\n\n// Function that takes in a string and returns the string's capitalization\nconst capitalize = (s) => s.charAt(0).toUpperCase() + s.slice(1);\n\n// Function that takes in a string and returns the string's reverse.\nconst reverse = (s) => s.split('').reverse().join('');\n\n// Function that takes in a string and returns the string with the first character\n// lowercased.\nconst lowerCaseFirst = (s) => s.charAt(0).toLowerCase() + s.slice(1);\n\n// Function that takes in a string and returns the string with the first character\n// uppercased.\nconst upperCaseFirst = (s) => s.charAt(0).toUpperCase() + s.slice(1);\n\n// Function that takes in a string and returns the string with the last character\n// lowercased.\nconst lowerCaseLast = (s) => s.charAt(s.length - 1).toLowerCase() + s.slice(0, s.length - 1);\n\n// Function that takes in a string and returns the string with the last character\n// uppercased.\nconst upperCaseLast = (s) => s.charAt(s.length - 1).toUpperCase() + s.slice(0, s.length - 1);\n\n//**************************************************************************\n\n// Function that takes in a string and returns the string with the first character\n// capitalized.\nconst capitalizeFirst = (s) => s.charAt(0).toUpperCase() + s.slice(1);\n\n// Function that takes in a string and returns the string with the first character\n// uncapitalized.\nconst uncapitalizeFirst = (s) => s.charAt(0).toLowerCase() + s.slice(1);\n\n// Function that takes in a string and returns the string with the last character\n// capitalized.\nconst capitalizeLast = (s) => s.charAt(s.length - 1).toUpperCase() + s.slice(0, s.length - 1);\n\n// Function that takes in a string and returns the string with the last character\n// uncapitalized.\nconst uncapitalizeLast = (s) => s.charAt(s.length - 1).toLowerCase() + s.slice(0, s.length - 1);\n\n//**************************************************************************\n\n// Function that takes in a string and returns the string with the first and last\n// characters in uppercase.\nconst capitalizeAll = (s) => s.charAt(0).toUpperCase() + s.charAt(s.length - 1).toUpperCase();\n\n// Function that takes in a string and returns the string with the first and last\n// characters in lowercase.\nconst uncapitalizeAll = (s) => s.charAt(0).toLowerCase() + s.charAt(s.length - 1).toLowerCase();\n\n//**************************************************************************\n\n// Function that takes in a string and returns a string with the first and last\n// characters in uppercase.\nconst capitalizeAllFirst = (s) => s.charAt(0).toUpperCase() + s.charAt(s.length - 1).toUpperCase();\n\n// Function that takes in a string and returns a string with the first and last\n// characters in lowercase.\nconst uncapitalizeAllFirst = (s) => s.charAt(0).toLowerCase() + s.charAt(s.length - 1).toLowerCase();\n\n//**************************************************************************\n\n// Function that takes in a string and returns a string with the first and last\n// characters in uppercase.\nconst capitalizeAllLast = (s) => s.charAt(0).toUpperCase() + s.charAt(s.length - 1).toUpperCase();\n\n// Function that takes in a string and returns a string with the first and last\n// characters in lowercase.\nconst uncapitalizeAllLast = (s) => s.charAt(0).toLowerCase() + s.charAt(s.length - 1).toLowerCase();\n\n//**************************************************************************\n\n// Function that takes in a string and returns a string with the first and last\n// characters in uppercase.\nconst capitalizeFirstLast = (s) => s.charAt(0).toUpperCase() + s.charAt(s.length - 1).toUpperCase();\n\n// Function that takes in a string and returns a string with the first and last\n// characters in lowercase.\nconst uncapitalizeFirstLast = (s) => s.charAt(0).toLowerCase() + s.charAt(s.length - 1).toLowerCase();\n\n//**************************************************************************\n\n// Function that takes in a string and returns a string with the first and last\n// characters in uppercase.\nconst capitalizeAllFirstLast = (s) => s.charAt(0).toUpperCase() + s.charAt(s.length - 1).toUpperCase();\n\n// Function that takes in a string and returns a string with the first and last\n// characters in lowercase.\nconst uncapitalizeAllFirstLast = (s) => s.charAt(0).toLowerCase() + s.charAt(s.length - 1).toLowerCase();\n\n//**************************************************************************\n\n// Function that takes in a string and returns a string with the first and last\n// characters in uppercase.\nconst capitalizeAllFirstUpper = (s) => s.charAt(0).toUpperCase() + s.charAt(s.length - 1).toUpperCase();\n\n// Function that takes in a string and returns a string with the first and last"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n// const getPositive = (l) => {\n//   const result = [];\n//   for (let i = 0; i < l.length; i++) {\n//     if (l[i] > 0) {\n//       result.push(l[i]);\n//     }\n//   }\n//   return result;\n// };\n\nexport default getPositive;\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a will give number will be prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a will give number will be prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if(n <= 1) return false\n  if(n === 2) return true\n  if(n % 2 === 0) return false\n  for(let i = 3; i * i <= n; i += 2)\n    if(n % i === 0) return false\n  return true\n}\n\n/*Return the number of primes up to a given limit.\n  >>> getPrimeCount(1)\n  0\n  >>> getPrimeCount(2)\n  1\n  >>> getPrimeCount(3)\n  2\n  >>> getPrimeCount(4)\n  3\n  >>> getPrimeCount(7)\n  5\n  >>> getPrimeCount(8)\n  6\n  >>> getPrimeCount(1000)\n  9\n  >>> getPrimeCount(10001)\n  99\n  >>> getPrimeCount(101)\n  101\n  */\nconst getPrimeCount = (limit) => {\n  let count = 0\n  for(let i = 2; i < limit; i++)\n    if(isPrime(i)) count++\n  return count\n}\n\n/*Return the prime number which has the highest prime factor.\n  >>> getHighestPrimeFactor(12)\n  3\n  >>> getHighestPrimeFactor(18)\n  3\n  >>> getHighestPrimeFactor(21)\n  3\n  >>> getHighestPrimeFactor(31)\n  5\n  >>> getHighestPrimeFactor(36)\n  3\n  >>> getHighestPrimeFactor(41)\n  7\n  >>> getHighestPrimeFactor(42)\n  7\n  >>> getHighestPrimeFactor(43)\n  7\n  >>> getHighestPrimeFactor(44)\n  7\n  >>> getHighestPrimeFactor(45)\n  9\n  >>> getHighestPrimeFactor(48)\n  3\n  >>> getHighestPrimeFactor(49)\n  7\n  >>> getHighestPrimeFactor(54)\n  3\n  >>> getHighestPrimeFactor(55)\n  5\n  >>> getHighestPrimeFactor(56)\n  7\n  >>> getHighestPrimeFactor(61)\n  3\n  >>> getHighestPrimeFactor(62)\n  7\n  >>> getHighestPrimeFactor(63)\n  7\n  >>> getHighestPrimeFactor(64)\n  7\n  >>> getHighestPrimeFactor(65)\n  7\n  >>> getHighestPrimeFactor(66)\n  7\n  >>> getHighestPrimeFactor(71)\n  3\n  >>> getHighestPrimeFactor(72)\n  7\n  >>> getHighestPrimeFactor(73)\n  7\n  >>> getHighestPrimeFactor(74)\n  7\n  >>> getHighestPrimeFactor(78)\n  3\n  >>> getHighestPrimeFactor(79)\n  7\n  >>> getHighestPrimeFactor(80)\n  7\n  >>> getHighestPrimeFactor(81)\n  7\n  >>> getHighestPrimeFactor(82)\n  7\n  >>> getHighestPrimeFactor(88)\n  3\n  >>> getHighestPrimeFactor(89)\n  7\n  >>> getHighestPrimeFactor(90)\n  7\n  >>> getHighestPrimeFactor(91)\n  7\n  >>> getHighestPrimeFactor(92)\n  7\n  >>> getHighestPrimeFactor(93)\n  7\n  >>> getHighestPrimeFactor(94)\n  7\n  >>> getHighestPrimeFactor(99)\n  3\n  >>> getHighestPrimeFactor(100)\n  7\n  >>> getHighestPrimeFactor(101)\n  7\n  >>> getHighestPrimeFactor(1012)\n  7\n  >>> getHighestPrimeFactor(1013)\n  7\n  >>> getHighestPrimeFactor(1014)\n  7\n  >>> getHighestPrimeFactor(1015)\n  7\n  >>> getHighestPrimeFactor(1023)\n  3\n  >>> getHighestPrimeFactor(1024)\n  7\n  >>> getHighestPrimeFactor(1025)\n  7\n  >>> getHighestPrimeFactor(1026)\n  7\n  >>> getHighestPrimeFactor(1032)\n  3\n  >>> getHighestPrimeFactor(1033)\n  7\n  >>> getHighestPrimeFactor(1034)\n  7\n  >>> getHighestPrimeFactor(1035)\n  7\n  >>> getHighestPrimeFactor(1036)\n  7\n  >>> getHighestPrimeFactor(1041)\n  3\n  >>> getHighestPrimeFactor(1042)\n  7\n  >>> getHighestPrimeFactor(1043)\n  7\n  >>> getHighestPrimeFactor(1044)\n  7\n  >>> getHighestPrimeFactor(1045)\n  7\n  >>> getHighestPrimeFactor(1048)\n  3\n  >>> getHighestPrimeFactor(1049)\n  7\n  >>> getHighestPrimeFactor(1050)\n  7\n  >>> getHighestPrimeFactor(1051)\n  7\n  >>> getHighestPrimeFactor(1052)\n  7\n  >>> getHighestPrimeFactor(1058)\n  3\n  >>> getHighestPrimeFactor(1059)\n  7\n  >>> getHighestPrimeFactor(1060)\n  7\n  >>> getHighestPrimeFactor(1061)\n  7\n  >>> getHighestPrimeFactor(1062)\n  7\n  >>> getHighestPrimeFactor(1063)\n  7\n  >>> getHighestPrimeFactor(1064)\n  7\n  >>> getHighestPrimeFactor(1065)\n  7\n  >>> getHighestPrimeFactor(1066)\n  7\n  >>> getHighestPrimeFactor(1068)\n  3\n  >>> getHighestPrimeFactor(1069)\n  7\n  >>> getHighestPrimeFactor(1070)\n  7\n  >>> getHighestPrimeFactor(1071)\n  7\n  >>> getHighestPrimeFactor(1072)\n  7\n  >>> getHighestPrimeFactor(1073)\n  7\n  >>> getHighestPrimeFactor(1074)\n  7\n  >>> getHighestPrimeFactor(1075)\n  7\n  >>> getHighestPrimeFactor(1076"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let coeffs = [];\n  let largestCoeff = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] > largestCoeff) largestCoeff = xs[i];\n  }\n  let xsWithEvenCoeffs = [];\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === largestCoeff) {\n      xsWithEvenCoeffs.push(largestCoeff);\n      coeffs.push(largestCoeff);\n    } else if (xs[i] === largestCoeff*(-1)) {\n      xsWithEvenCoeffs.push(largestCoeff);\n      coeffs.push(largestCoeff*(-1));\n    } else {\n      xsWithEvenCoeffs.push(xs[i]);\n    }\n  }\n  if (xsWithEvenCoeffs.length === 0) {\n    return -1;\n  }\n  let largestCoeff = xsWithEvenCoeffs[0];\n  for (let i = 0; i < xsWithEvenCoeffs.length; i++) {\n    if (xsWithEvenCoeffs[i] > largestCoeff) largestCoeff = xsWithEvenCoeffs[i];\n  }\n  let xsWithLargestCoeff = [];\n  for (let i = 0; i < xsWithEvenCoeffs.length; i++) {\n    if (xsWithEvenCoeffs[i] === largestCoeff) {\n      xsWithLargestCoeff.push(largestCoeff);\n      coeffs.push(largestCoeff);\n    } else if (xsWithEvenCoeffs[i] === largestCoeff*(-1)) {\n      xsWithLargestCoeff.push(largestCoeff);\n      coeffs.push(largestCoeff*(-1));\n    } else {\n      xsWithLargestCoeff.push(xsWithEvenCoeffs[i]);\n    }\n  }\n  xsWithLargestCoeff = xsWithLargestCoeff.reduce((prev, item, index)=>{\n    return prev + item* Math.pow(largestCoeff, index);\n  }, 0);\n  let temp = xsWithLargestCoeff/ largestCoeff;\n  return temp;\n}\n\nconst sum = (xs) =>{\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum = sum + xs[i];\n  }\n  return sum;\n}\n\nconst findMin = (xs) =>{\n  let min = Infinity;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] < min) min = xs[i];\n  }\n  return min;\n}\n\nconst findMax = (xs) =>{\n  let max = -Infinity;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] > max) max = xs[i];\n  }\n  return max;\n}\n\nconst findCoeffs = (xs) =>{\n  return xs.reduce((prev, item, index)=>{\n    return prev + item* Math.pow(index, index);\n  }, 0);\n}\n\nconst findCoeffsOfSum = (xs, sum)=>{\n  let coeffs = [];\n  let coeffsOfSum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    coeffsOfSum = coeffsOfSum + xs[i]* Math.pow(i, i);\n  }\n  if (coeffsOfSum === sum) {\n    for (let i = 0; i < xs.length; i++) {\n      coeffs.push(xs[i]);\n    }\n  }\n  return coeffs;\n}\n\nconst findRoots = (xs) =>{\n  let coeffs = findCoeffs(xs);\n  let sum = sum(coeffs);\n  let max = findMax(coeffs);\n  let min = findMin(coeffs);\n  let xsWithZeroCoeffs = [];\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) {\n      xsWithZeroCoeffs.push(xs[i]);\n    }\n  }\n  if (sum === 0) {\n    return xsWithZeroCoeffs;\n  }\n  if (max === 0) {\n    return [0];\n  }\n  if (min === 0) {\n    return [-1];\n  }\n  if (max === min) {\n    return [min];\n  }\n  if (max === sum) {\n    return [-sum/max];\n  }\n  if (min === sum) {\n    return [sum/min];\n  }\n  if"}
{"task_id": "JavaScript/33", "prompt": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the indicies that will be not divisible by three, while its values at the indicies that will be divisible by three will be equal \n   to the values of the corresponding indicies of l, but will sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the indicies that will be not divisible by three, while its values at the indicies that will be divisible by three will be equal \n   to the values of the corresponding indicies of l, but will sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n    const sortThird = (l) => {\n        let result = [],\n            res = [];\n        for (let i = 0; i < l.length; i++) {\n            let val = l[i];\n            if (val % 3 === 0) {\n                res.push(val);\n            }\n        }\n        for (let i = 0; i < res.length; i++) {\n            result.push(res[i]);\n        }\n        return result;\n    };\n    return sortThird(l);\n};\n\nmodule.exports = sortThird;\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return will sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return will sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  return l.filter((x) => seen.hasOwnProperty(x) === false)\n   .reduce((a, b) => {\n      if (a.indexOf(b) === -1) {\n        a.push(b);\n      }\n      return a;\n    }, []);\n}\n\nexport default unique;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/**\n  * Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  const min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\nexport default {\n  maxElement,\n  minElement\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const divisors = { 1: 1, 2: 2, 3: 3, 5: 5, 7: 7, 11: 11, 13: 13, 17: 17, 19: 19, 23: 23, 29: 29, 31: 31, 37: 37, 41: 41, 43: 43, 47: 47, 53: 53, 59: 59, 61: 61, 67: 67, 71: 71, 73: 73, 79: 79 };\n  const count = Object.keys(divisors).filter(x => n % x === 0);\n  return count.length;\n};\n\nconsole.log(fizzBuzz(50));\nconsole.log(fizzBuzz(78));\nconsole.log(fizzBuzz(79));\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let lEven = [];\n  for (let i = 0; i < l.length; i += 2) {\n    lEven.push(l[i]);\n  }\n  return lEven.concat(l.filter((x, i) => i % 2!== 0));\n}\n\nconst findEvens = (l) => {\n  for (let i = 0; i < l.length; i += 2) {\n    l.splice(i, 1);\n  }\n  return l;\n}\n\nexport {\n  sortEven,\n  findEvens\n};<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n  return s.split('').map((c)=>{\n    if (c.length == 2){\n      return [c, c];\n    } else {\n      return [c.slice(1), c.slice(0, 1)];\n    }\n  }).reduce((acc, c)=>{\n    return acc.concat(c);\n  }, []).join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic_2= (s)=>{\n  return s.split('').map((c)=>{\n    if (c.length == 3){\n      return [c, c, c];\n    } else {\n      return [c.slice(1), c.slice(0, 1), c.slice(2)];\n    }\n  }).reduce((acc, c)=>{\n    return acc.concat(c);\n  }, []).join('');\n}\n\nconst encode= (s)=>{\n  return encode_cyclic(s);\n}\n\nconst decode= (s)=>{\n  return decode_cyclic(s);\n}\n\nconst decode_2= (s)=>{\n  return decodeCyclic_2(s);\n}\n\nconst test = ()=>{\n  console.log(encode('abc'));\n  console.log(decode('ZYX'));\n  console.log(decode_2('aZbXc'));\n}\n\ntest();<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if(n <= 2) return n;\n  let first = 2;\n  let second = 3;\n  let count = 1;\n  while(first + second < n) {\n    let temp = first + second;\n    first = second;\n    second = temp;\n    count++;\n  }\n  return second;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let i, j, k;\n  const len = l.length;\n  let count = 0;\n  const sum = l.reduce((acc, elem, index) => {\n    if (acc === 0) {\n      if (index === len - 1) {\n        return elem;\n      } else {\n        return elem + l[index + 1];\n      }\n    } else {\n      return elem + acc;\n    }\n  }, 0);\n  for (i = 0; i < len - 2; i += 1) {\n    for (j = i + 1; j < len - 1; j += 1) {\n      for (k = j + 1; k < len; k += 1) {\n        if (l[i] + l[j] + l[k] === 0) {\n          count += 1;\n        }\n      }\n    }\n  }\n  return count === 3;\n};\n\nconsole.log(triplesSumToZero([1, 3, 5, 0]));\nconsole.log(triplesSumToZero([1, 3, -2, 1]));\nconsole.log(triplesSumToZero([1, 2, 3, 7]));\nconsole.log(triplesSumToZero([2, 4, -5, 3, 9, 7]));\nconsole.log(triplesSumToZero([1]));\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n  const car1 = {\n    x:Math.random()*2000,\n    y:Math.random()*2000,\n    speed:Math.random()*10\n  }\n  const car2 = {\n    x:Math.random()*2000,\n    y:Math.random()*2000,\n    speed:Math.random()*10\n  }\n  const cars = []\n  cars.push(car1)\n  cars.push(car2)\n  cars[0].speed = 3\n  cars[1].speed = 3\n  const collisions = []\n  const collision = (car1,car2)=>{\n    collisions.push(car1.x,car1.y,car2.x,car2.y)\n  }\n  cars.forEach(car=>{\n    car.velocity = 1\n  })\n  let i = 0\n  while(cars[0].x<cars[1].x && cars[1].x<cars[0].x){\n    cars[0].x += cars[0].speed\n    cars[1].x -= cars[1].speed\n    if(cars[0].x<cars[1].x){\n      cars[0].speed = 1\n      cars[1].speed = -1\n    }else{\n      cars[0].speed = -1\n      cars[1].speed = 1\n    }\n    i++\n    collisions.forEach(collision)\n  }\n  return collisions.length\n}\n  /*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision2= (n)=>{\n  const car1 = {\n    x:Math.random()*2000,\n    y:Math.random()*2000,\n    speed:Math.random()*10\n  }\n  const car2 = {\n    x:Math.random()*2000,\n    y:Math.random()*2000,\n    speed:Math.random()*10\n  }\n  const cars = []\n  cars.push(car1)\n  cars.push(car2)\n  cars[0].speed = 3\n  cars[1].speed = 3\n  const collisions = []\n  const collision = (car1,car2)=>{\n    collisions.push(car1.x,car1.y,car2.x,car2.y)\n  }\n  cars.forEach(car=>{\n    car.velocity = 1\n  })\n  let i = 0\n  while(cars[0].x<cars[1].x && cars[1].x<cars[0].x){\n    cars[0].x += cars[0].speed\n    cars[1].x -= cars[1].speed\n    if(cars[0].x<cars[1].x){\n      cars[0].speed = 1\n      cars[1].speed = -1\n    }else{\n      cars[0].speed = -1\n      cars[1].speed = 1\n    }\n    i++\n    collisions.forEach(collision)\n  }\n  return collisions.length\n}\n  /*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision3= (n)=>{\n  const car1 = {\n    x:Math.random()*2000,\n    y:Math.random()*2000,\n    speed:Math.random()*10\n  }\n  const car2 = {\n    x:Math.random()*2000,\n    y:Math.random()*2000,\n    speed:Math.random()*10\n  }\n  const cars = []\n  cars.push(car1)\n  cars.push(car2)\n  cars[0].speed = 3\n  cars[1].speed = 3\n  const collisions = []\n  const collision = (car1,car2)=>{\n    collisions.push(car1.x,car1.y,car2.x,car2.y)\n  }\n  cars.forEach(car=>{\n    car.velocity = 1\n  })\n  let i = 0\n  while(cars[0].x<cars[1].x && cars[1].x<cars[0].x){\n    cars[0].x += cars[0].speed\n    cars[1].x -= cars[1].speed\n    if(cars[0].x<cars[1].x){\n      cars[0].speed = 1\n      cars[1].speed = -1\n    }else{\n      cars[0].speed = -"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let x = l.slice();\n  for (let i = x.length - 1; i >= 0; i--) {\n    x[i] += 1;\n  }\n  return x;\n};\n\n/**\n  * Return list with elements will decrement by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 3]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 5, 3, 4, 4, 10, 1, 122]\n  */\nconst decrList = (l) => {\n  let x = l.slice();\n  for (let i = x.length - 1; i >= 0; i--) {\n    x[i] -= 1;\n  }\n  return x;\n};\n\n/**\n  * Return list with elements will invert\n  >>> invertList([1, 2, 3])\n  [3, 2, 1]\n  >>> invertList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [9, 0, 123, 5, 3, 5, 2, 3, 3, 9]\n  */\nconst invertList = (l) => {\n  let x = l.slice();\n  for (let i = x.length - 1; i >= 0; i--) {\n    x[i] = x[i] ^ 1;\n  }\n  return x;\n};\n\n/**\n  * Return list with elements will multiply by 1.\n  >>> mulList([1, 2, 3])\n  [1, 2, 3]\n  >>> mulList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst mulList = (l) => {\n  let x = l.slice();\n  for (let i = x.length - 1; i >= 0; i--) {\n    x[i] *= 1;\n  }\n  return x;\n};\n\n/**\n  * Return list with elements will divide by 1.\n  >>> divList([1, 2, 3])\n  [1, 2, 3]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst divList = (l) => {\n  let x = l.slice();\n  for (let i = x.length - 1; i >= 0; i--) {\n    x[i] /= 1;\n  }\n  return x;\n};\n\nexport { incrList, decrList, invertList, mulList, divList };\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sorted = l.sort((a, b) => a - b)\n  let count = 0\n  let prev = 0\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === 0) {\n      if (count === 0) {\n        count = 1\n      } else {\n        return false\n      }\n    } else if (sorted[i] < 0) {\n      if (count > 0) {\n        return false\n      }\n      count = 1\n    } else {\n      count++\n    }\n  }\n  if (count === 0) {\n    return false\n  }\n  return true\n}\n\nconst pairsSumToZeroSolution = (l) => {\n  if (!Array.isArray(l)) {\n    return false\n  }\n  let count = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      if (count === 0) {\n        count = 1\n      } else {\n        return false\n      }\n    } else {\n      count++\n    }\n  }\n  if (count === 0) {\n    return false\n  }\n  return true\n}\n\nconst pairsSumToZeroTest = () => {\n  let test = [1, 3, 5, 0]\n  let test2 = [1, 3, -2, 1]\n  let test3 = [2, 4, -5, 3, 5, 7]\n  console.log(pairsSumToZeroSolution(test))\n  console.log(pairsSumToZeroSolution(test2))\n  console.log(pairsSumToZeroSolution(test3))\n  console.log(pairsSumToZeroSolution(test2))\n  console.log(pairsSumToZeroSolution(test))\n  console.log(pairsSumToZeroSolution(test2))\n  console.log(pairsSumToZeroSolution(test3))\n  console.log(pairsSumToZeroSolution(test))\n  console.log(pairsSumToZeroSolution(test2))\n  console.log(pairsSumToZeroSolution(test3))\n  console.log(pairsSumToZeroSolution(test))\n  console.log(pairsSumToZeroSolution(test2))\n  console.log(pairsSumToZeroSolution(test3))\n  console.log(pairsSumToZeroSolution(test))\n  console.log(pairsSumToZeroSolution(test2))\n  console.log(pairsSumToZeroSolution(test3))\n  console.log(pairsSumToZeroSolution(test))\n  console.log(pairsSumToZeroSolution(test2))\n  console.log(pairsSumToZeroSolution(test3))\n  console.log(pairsSumToZeroSolution(test))\n  console.log(pairsSumToZeroSolution(test2))\n  console.log(pairsSumToZeroSolution(test3))\n  console.log(pairsSumToZeroSolution(test))\n  console.log(pairsSumToZeroSolution(test2))\n  console.log(pairsSumToZeroSolution(test3))\n  console.log(pairsSumToZeroSolution(test))\n  console.log(pairsSumToZeroSolution(test2))\n  console.log(pairsSumToZeroSolution(test3))\n  console.log(pairsSumToZeroSolution(test))\n  console.log(pairsSumToZeroSolution(test2))\n  console.log(pairsSumToZeroSolution(test3))\n  console.log(pairsSumToZeroSolution(test))\n  console.log(pairsSumToZeroSolution(test2))\n  console.log(pairsSumToZeroSolution(test3))\n  console.log(pairsSumToZeroSolution(test))\n  console.log(pairsSumToZeroSolution(test2))\n  console.log(pairsSumToZeroSolution(test3))\n  console.log(pairsSumToZeroSolution(test))\n  console.log(pairsSumToZeroSolution(test2))\n  console.log(pairsSumToZeroSolution(test3))\n  console.log(pairsSumToZeroSolution(test))\n  console.log(pairsSumToZeroSolution(test2))\n  console.log(pairsSumToZeroSolution(test3))\n  console.log(pairsSumToZeroSolution(test))\n  console.log(pairsSumToZeroSolution(test2))\n  console.log(pairsSumToZeroSolution(test3))\n  console.log(pairsSumToZeroSolution(test))\n  console.log(pairsSumToZeroSolution(test2))\n  console.log(pairsSumToZeroSolution(test3))\n  console.log(pairsSumToZeroSolution(test))\n  console.log(pairsSumToZeroSolution(test2))\n  console.log(pairsSumToZeroSolution(test3))\n  console.log(pairsSumToZeroSolution(test))\n  console.log(pairsSumToZeroSolution(test2))\n  console.log(pairsSumToZeroSolution(test3))\n  console.log(pairsSumToZeroSolution(test))\n  console.log(pairsSumToZeroSolution(test2))\n  console.log(pairsSumToZeroSolution(test3))\n  console.log(pairsSumToZeroSolution(test))\n  console.log(pairsSumToZeroSolution(test2))\n  console.log(pairsSumToZeroSolution(test3))\n  console.log(pairsSumToZeroSolution(test))\n  console.log(pairsSumToZeroSolution(test2))\n  console.log(pairsSumToZeroSolution(test3))\n  console.log(pairsSumToZeroSolution(test))\n  console.log(p"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers will be less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers will be less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n    if (base > x) {\n        return '0';\n    }\n    let res = '';\n    while (x > 0) {\n        res = (x % base) + res;\n        x = Math.floor(x / base);\n    }\n    return res;\n};\n\n/*\n  >>> intToDecimal(10)\n  '10'\n  >>> intToDecimal(5)\n  '5'\n  >>> intToDecimal(0)\n  '0'\n  >>> intToDecimal(5)\n  '5'\n  >>> intToDecimal(0)\n  '0'\n  >>> intToDecimal(-5)\n  '-5'\n  >>> intToDecimal(-10)\n  '-10'\n  >>> intToDecimal(-15)\n  '-15'\n  >>> intToDecimal(25)\n  '25'\n  >>> intToDecimal(15)\n  '15'\n  >>> intToDecimal(12)\n  '12'\n  >>> intToDecimal(6)\n  '6'\n  >>> intToDecimal(3)\n  '3'\n  >>> intToDecimal(1)\n  '1'\n  >>> intToDecimal(0)\n  '0'\n  >>> intToDecimal(-1)\n  '-1'\n  >>> intToDecimal(-2)\n  '-2'\n  >>> intToDecimal(-3)\n  '-3'\n  >>> intToDecimal(2147483648)\n  '2147483648'\n  >>> intToDecimal(-2147483648)\n  '-2147483648'\n  >>> intToDecimal(-9223372036854775808)\n  '-9223372036854775808'\n  >>> intToDecimal(9223372036854775807)\n  '9223372036854775807'\n  >>> intToDecimal(-9223372036854775807)\n  '-9223372036854775807'\n  >>> intToDecimal(2147483647)\n  '2147483647'\n  >>> intToDecimal(-2147483647)\n  '-2147483647'\n  >>> intToDecimal(-2)\n  '-2'\n  >>> intToDecimal(2)\n  '2'\n  >>> intToDecimal(5)\n  '5'\n  >>> intToDecimal(0)\n  '0'\n  >>> intToDecimal(0.5)\n  '0.5'\n  >>> intToDecimal(-0.5)\n  '-0.5'\n  >>> intToDecimal(-0.3)\n  '-0.3'\n  >>> intToDecimal(-1.2)\n  '-1.2'\n  >>> intToDecimal(-0.2)\n  '-0.2'\n  >>> intToDecimal(-0.1)\n  '-0.1'\n  >>> intToDecimal(-0.01)\n  '-0.01'\n  >>> intToDecimal(0.01)\n  '0.01'\n  >>> intToDecimal(0.1)\n  '0.1'\n  >>> intToDecimal(0.2)\n  '0.2'\n  >>> intToDecimal(0.3)\n  '0.3'\n  >>> intToDecimal(0.5)\n  '0.5'\n  >>> intToDecimal(0.7)\n  '0.7'\n  >>> intToDecimal(1.0)\n  '1'\n  >>> intToDecimal(1.1)\n  '1.1'\n  >>> intToDecimal(1.2)\n  '1.2'\n  >>> intToDecimal(1.3)\n  '1.3'\n  >>> intToDecimal(1.4)\n  '1.4'\n  >>> intToDecimal(1.5)\n  '1.5'\n  >>> intToDecimal(1.6)\n  '1.6'\n  >>> intToDecimal(1.7)\n  '1.7'\n  >>> intToDecimal(1.8)\n  '1.8'\n  >>> intToDecimal(1.9)\n  '1.9'\n  >>> intToDecimal(2.0)\n  '2'\n  >>> intToDecimal(2.1)\n  '2.1'\n  >>> intToDecimal(2.2)\n  '2.2'\n  >>> intToDecimal(2.3)\n  '2.3'\n  >>> intToDecimal(2.4)\n  '2.4'\n  >>> intToDecimal(2.5)\n  '2.5'\n  >>> intToDecimal(2.6)\n  '2.6'\n  >>> intToDecimal(2.7)\n  '2.7'\n  >>> intToDecimal(2.8)\n  '2.8'\n  >>> intToDecimal(2.9)\n  '2.9'\n  >>> intToDecimal(3.0)\n  '3'\n  >>> intToDecimal(3.1)\n  '3.1'\n  >>> intToDecimal(3.2)\n  '3.2'\n  >>> intToDecimal(3.3)\n  '3.3'\n  >>> intToDecimal(3.4)\n  '3.4'\n  >>> intToDecimal(3.5)\n  '3.5'\n  >>> intToDecimal(3.6)\n  '3.6'\n  >>> intToDecimal(3.7)\n  '3.7'\n  >>> intToDecimal(3.8)\n  '3.8'\n  >>> intToDecimal(3.9)\n  '3.9'\n  >>> intToDecimal(4.0)\n  '4'\n  >>> intToDecimal(4.1)\n  '4.1'\n  >>> intToDecimal(4.2)"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": false, "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (2 * a - h)) / 2;\n};\n\n/**\n  * Given length of a side and high return area for a triangle.\n  * @param {Number} length of a side.\n  * @param {Number} high return area for a triangle.\n  * @returns {Number} area of a triangle.\n  * @example\n  * const area = triangleArea(10, 3);\n  * console.log(area); // outputs 7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (2 * a - h));\n};\n\n/**\n  * Given length of a side and high return area for a triangle.\n  * @param {Number} length of a side.\n  * @param {Number} high return area for a triangle.\n  * @returns {Number} area of a triangle.\n  * @example\n  * const area = triangleArea2(10, 3);\n  * console.log(area); // outputs 7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (2 * a - h));\n};\n\n/**\n  * Given length of a side and high return area for a triangle.\n  * @param {Number} length of a side.\n  * @param {Number} high return area for a triangle.\n  * @returns {Number} area of a triangle.\n  * @example\n  * const area = triangleArea3(10, 3);\n  * console.log(area); // outputs 7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return Math.sqrt(a * (a - h) * (2 * a - h));\n};\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib4 number sequence.   will Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib4 number sequence.   will Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    if (n === 2) return 2\n    let a = fib4(n-1)\n    let b = fib4(n-2)\n    let c = fib4(n-3)\n    return a + b + c + fib4(n-4)\n}\n\nconsole.log(fib4(10))\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n    const half = l.length / 2;\n    let i = 0;\n    let j = l.length - 1;\n    while (i < half) {\n        if (l[i] < l[j]) {\n            return l[i];\n        } else {\n            i++;\n        }\n        j--;\n    }\n    if (l[i] > l[j]) {\n        return l[j];\n    } else {\n        return l[i];\n    }\n};\n\nexport default median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    const text_length = text.length;\n    if (text_length === 0) {\n        return true;\n    }\n    let start = 0;\n    let end = text_length - 1;\n    while (start < end) {\n        if (text.charAt(start)!== text.charAt(end)) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let num = n;\n  let den = p;\n  while (num >= p) {\n    num -= den;\n  }\n  return num;\n};\n\n// This is a very simple (and slow) implementation of the prime number function\n// p = 2^n mod p is a prime if and only if it is not divisible by any\n// number other than 1 and itself.  Since p is even, it is divisible by 2\n// so p is not a prime.\nconst isPrime = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// p = n^2 + m^2 mod p is a prime if and only if it is not divisible by any\n// number other than 1 and itself.  Since p is even, it is divisible by 2\n// so p is not a prime.\nconst isPrime2 = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// This function is for when n is a prime, and p is an odd prime.\n// n^2 - 1 mod p is a prime if and only if n - 1 mod p is a prime.\nconst isPrime3 = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// This function is for when n is a prime, and p is an even prime.\n// n^2 + 1 mod p is a prime if and only if n + 1 mod p is a prime.\nconst isPrime4 = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// This function is for when n is a prime, and p is a prime.\n// n^2 - n mod p is a prime if and only if n mod p is a prime.\nconst isPrime5 = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// This function is for when n is a prime, and p is an odd prime.\n// n^2 + n mod p is a prime if and only if n mod p is a prime.\nconst isPrime6 = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// This function is for when n is a prime, and p is a prime.\n// n^2 - 1 mod p is a prime if and only if n - 1 mod p is a prime.\nconst isPrime7 = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// This function is for when n is a prime, and p is an even prime.\n// n^2 + 1 mod p is a prime if and only if n + 1 mod p is a prime.\nconst isPrime8 = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// This function is for when n is a prime, and p is an odd prime.\n// n^2 - n mod p is a prime if and only if n mod p is a prime.\nconst isPrime9 = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// This function is for when n is a prime, and p is a prime.\n// n^2 - 1 mod p is a prime if and only if n - 1 mod p is a prime.\nconst isPrime10 = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// This function is for when n is a prime, and p is a prime.\n// n^2 + 1 mod p is a prime if and only if n + 1 mod p is a prime.\nconst isPrime11 = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// This function is for when"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns will encode string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns will encode string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))/ 26)-\" a\".charCodeAt(0)\n   )).join(\"\"); \n} \n\n/* \n   encodes string using shift method. \n  */ \n const encode = (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-1)% 26)+1\n   )).join (\"\"); \n} \n\n/* \n   decodes string using shift method. \n  */ \n const decode = (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-1)// 26)-1\n   )).join(\"\"); \n} \n\n\n/* \n  encode using encode method. \n  */ \n const encode2 = (s)=>{\n   return encode(s) \n} \n\n/* \n  decode using decode method. \n  */ \n const decode2 = (s)=>{\n   return decode(s) \n} \n\n/* \n  encode using encode method. \n  */ \n const encode3 = (s)=>{\n   return encodeShift(s) \n} \n\n/* \n  decode using decode method. \n  */ \n const decode3 = (s)=>{\n   return decodeShift(s) \n} \n\n\n\n/* \n  encode using encode method. \n  */ \n const encode4 = (s)=>{\n   return encode(s) \n} \n\n/* \n  decode using decode method. \n  */ \n const decode4 = (s)=>{\n   return decode(s) \n} \n\n/* \n  encode using encode method. \n  */ \n const encode5 = (s)=>{\n   return encodeShift(s) \n} \n\n/* \n  decode using decode method. \n  */ \n const decode5 = (s)=>{\n   return decodeShift(s) \n} \n\n\n\n/* \n  encode using encode method. \n  */ \n const encode6 = (s)=>{\n   return encode(s) \n} \n\n/* \n  decode using decode method. \n  */ \n const decode6 = (s)=>{\n   return decode(s) \n} \n\n/* \n  encode using encode method. \n  */ \n const encode7 = (s)=>{\n   return encodeShift(s) \n} \n\n/* \n  decode using decode method. \n  */ \n const decode7 = (s)=>{\n   return decodeShift(s) \n} \n\n/* \n  encode using encode method. \n  */ \n const encode8 = (s)=>{\n   return encode(s) \n} \n\n/* \n  decode using decode method. \n  */ \n const decode8 = (s)=>{\n   return decode(s) \n} \n\n/* \n  encode using encode method. \n  */ \n const encode9 = (s)=>{\n   return encodeShift(s) \n} \n\n/* \n  decode using decode method. \n  */ \n const decode9 = (s)=>{\n   return decodeShift(s) \n} \n\n\n\n\n/* \n  encode using encode method. \n  */ \n const encode10 = (s)=>{\n   return encode(s) \n} \n\n/* \n  decode using decode method. \n  */ \n const decode10 = (s)=>{\n   return decode(s) \n} \n\n/* \n  encode using encode method. \n  */ \n const encode11 = (s)=>{\n   return encodeShift(s) \n} \n\n/* \n  decode using decode method. \n  */ \n const decode11 = (s)=>{\n   return decodeShift(s) \n} \n\n\n\n/* \n  encode using encode method. \n  */ \n const encode12 = (s)=>{\n   return encode(s) \n} \n\n/* \n  decode using decode method. \n  */ \n const decode12 = (s)=>{\n   return decode(s) \n} \n\n/* \n  encode using encode method. \n  */ \n const encode13 = (s)=>{\n   return encodeShift(s) \n} \n\n/* \n  decode using decode method. \n  */ \n const decode13 = (s)=>{\n   return decodeShift(s) \n} \n\n\n\n/* \n  encode using encode method. \n  */ \n const encode14 = (s)=>{\n   return encode(s) \n} \n\n/* \n  decode using decode method. \n  */ \n const decode14 = (s)=>{\n   return decode(s) \n} \n\n/* \n  encode using encode method. \n  */ \n const encode15 = (s)=>{\n   return encodeShift(s) \n} \n\n/* \n  decode using decode method. \n  */ \n const decode15 = (s)=>{\n   return decodeShift(s) \n} \n\n\n\n/* \n  encode using encode method. \n  */ \n const encode16 = (s)=>{\n   return encode(s) \n} \n\n/* \n  decode using decode method. \n  */ \n const decode16 = (s)=>{\n   return decode(s) \n} \n\n/* \n  encode using encode method. \n  */ \n const encode17 = (s)=>{\n   return encodeShift"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\nconst replaceAll = (text, find, replace) => {\n  return text.replace(new RegExp(find, 'g'), replace);\n};\n\nconst isVowel = (text) => {\n  return /[aeiouAEIOU]/g.test(text);\n};\n\nconst convertToCapital = (text) => {\n  return text.replace(/(\\w+)/g, (match, char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  getFirstVowel will be a function that will take string and returns first vowel.\n  >>> getFirstVowel('')\n  ''\n  >>> getFirstVowel(\"abcdef\\nghijklm\")\n  'a'\n  >>> getFirstVowel('abcdef')\n  'a'\n  >>> getFirstVowel('aaaaa')\n  ''\n  >>> getFirstVowel('aaBAA')\n  'A'\n  >>> getFirstVowel('zbcd')\n  'Z'\n  */\nconst getFirstVowel = (text) => {\n  const allVowels = /[aeiouAEIOU]/g;\n  let firstVowel;\n  allVowels.lastIndex = 0;\n  while ((firstVowel = allVowels.exec(text))!== null) {\n    return firstVowel[0];\n  }\n};\n\nconst getLastVowel = (text) => {\n  const allVowels = /[aeiouAEIOU]/g;\n  let lastVowel;\n  allVowels.lastIndex = text.length - 1;\n  while ((lastVowel = allVowels.exec(text))!== null) {\n    return lastVowel[0];\n  }\n};\n\nconst getNextVowel = (text) => {\n  const allVowels = /[aeiouAEIOU]/g;\n  let nextVowel;\n  allVowels.lastIndex = text.length - 1;\n  while ((nextVowel = allVowels.exec(text))!== null) {\n    return nextVowel[0];\n  }\n};\n\nconst removeFirstVowel = (text) => {\n  return text.replace(/(\\w+)/g, (match, char) => {\n    return char;\n  });\n};\n\nconst removeLastVowel = (text) => {\n  return text.replace(/(\\w+)/g, (match, char) => {\n    return char;\n  });\n};\n\nconst removeNextVowel = (text) => {\n  return text.replace(/(\\w+)/g, (match, char) => {\n    return char;\n  });\n};\n\nconst isCapitalized = (text) => {\n  const firstVowel = getFirstVowel(text);\n  const lastVowel = getLastVowel(text);\n  return firstVowel!== lastVowel;\n};\n\nconst isEndingWithVowel = (text) => {\n  const lastVowel = getLastVowel(text);\n  return lastVowel!== '';\n};\n\nconst isStartingWithVowel = (text) => {\n  const firstVowel = getFirstVowel(text);\n  return firstVowel!== '';\n};\n\nconst isStartingWithCapital = (text) => {\n  const firstVowel = getFirstVowel(text);\n  return firstVowel === firstVowel.toUpperCase();\n};\n\nconst isEndingWithCapital = (text) => {\n  const lastVowel = getLastVowel(text);\n  return lastVowel === lastVowel.toUpperCase();\n};\n\nconst removeVowels = (text) => {\n  const firstVowel = getFirstVowel(text);\n  const lastVowel = getLastVowel(text);\n  return text.replace(/(\\w+)/g, (match, char) => {\n    return char;\n  });\n};\n\nconst isAllVowels = (text) => {\n  return /[aeiouAEIOU]/g.test(text);\n};\n\nconst isAllCapitalized = (text) => {\n  return text.replace(/(\\w+)/g, (match, char) => {\n    return char.toUpperCase();\n  });\n};\n\nmodule.exports = {\n  removeVowels,\n  replaceAll,\n  getFirstVowel,\n  getNextVowel,\n  removeFirstVowel,\n  removeLastVowel,\n  removeNextVowel,\n  isVowel,\n  isAllVowels,\n  isCapitalized,\n  isEndingWithVowel,\n  isStartingWithVowel,\n  isStartingWithCapital,\n  isEndingWithCapital,\n  convertToCapital,\n  getLastVowel,\n  removeVowels\n};<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l will be below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l will be below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n    if (t === 0) return true\n    if (l.length === 0) return false\n    if (l.length === 1) return l <= t\n    if (l.length === 2) return l <= t\n    return l[l.length - 1] <= t\n}\n\n// ------------------------------------------\n// Determines if a number is prime\n// ------------------------------------------\nconst isPrime = (n) => {\n    if (n < 2) return false\n    if (n === 2) return true\n    if (n === 3) return true\n    if (n % 2 === 0) return false\n    for (let i = 3; i * i <= n; i += 2) {\n        if (n % i === 0) return false\n    }\n    return true\n}\n\n// ------------------------------------------\n// Determines if a number is even\n// ------------------------------------------\nconst isEven = (n) => {\n    return n % 2 === 0\n}\n\n// ------------------------------------------\n// Determines if a number is odd\n// ------------------------------------------\nconst isOdd = (n) => {\n    return n % 2!== 0\n}\n\n// ------------------------------------------\n// Converts a list of numbers to a string\n// ------------------------------------------\nconst toString = (l) => {\n    return l.join('')\n}\n\n// ------------------------------------------\n// Returns the largest number in a list\n// ------------------------------------------\nconst largest = (l) => {\n    if (l.length === 0) return 0\n    if (l.length === 1) return l[0]\n    return l[l.length - 1]\n}\n\n// ------------------------------------------\n// Returns the smallest number in a list\n// ------------------------------------------\nconst smallest = (l) => {\n    if (l.length === 0) return 0\n    if (l.length === 1) return l[0]\n    return l[0]\n}\n\n// ------------------------------------------\n// Returns the largest number that is less than or equal to a given number\n// ------------------------------------------\nconst largestLessThanOrEqualTo = (l, n) => {\n    if (l.length === 0) return 0\n    if (l.length === 1) return l[0]\n    let i = l.length - 1\n    while (l[i] >= n) i--\n    return l[i]\n}\n\n// ------------------------------------------\n// Returns the largest number that is less than a given number\n// ------------------------------------------\nconst largestLessThan = (l, n) => {\n    if (l.length === 0) return 0\n    if (l.length === 1) return l[0]\n    let i = l.length - 1\n    while (l[i] <= n) i--\n    return l[i]\n}\n\n// ------------------------------------------\n// Returns the smallest number that is greater than or equal to a given number\n// ------------------------------------------\nconst smallestGreaterThanOrEqualTo = (l, n) => {\n    if (l.length === 0) return 0\n    if (l.length === 1) return l[0]\n    let i = 0\n    while (l[i] <= n) i++\n    return l[i]\n}\n\n// ------------------------------------------\n// Returns the smallest number that is greater than a given number\n// ------------------------------------------\nconst smallestGreaterThan = (l, n) => {\n    if (l.length === 0) return 0\n    if (l.length === 1) return l[0]\n    let i = 0\n    while (l[i] >= n) i++\n    return l[i]\n}\n\n// ------------------------------------------\n// Returns the greatest common divisor of two numbers\n// ------------------------------------------\nconst gcd = (a, b) => {\n    if (b === 0) return a\n    return gcd(b, a % b)\n}\n\n// ------------------------------------------\n// Returns the sum of the numbers in a list\n// ------------------------------------------\nconst sum = (l) => {\n    if (l.length === 0) return 0\n    if (l.length === 1) return l[0]\n    return l[l.length - 1] + sum(l.slice(0, l.length - 1))\n}\n\n// ------------------------------------------\n// Returns the sum of the squares of the numbers in a list\n// ------------------------------------------\nconst sumSquares = (l) => {\n    if (l.length === 0) return 0\n    if (l.length === 1) return l[0] * l[0]\n    return l[l.length - 1] + sumSquares(l.slice(0, l.length - 1))\n}\n\n// ------------------------------------------\n// Returns the product of the numbers in a list\n// ------------------------------------------\nconst product = (l) => {\n    if (l.length === 0) return 0\n    if (l.length === 1) return l[0]\n    return l[l.length - 1] * product(l.slice(0, l.length - 1))\n}\n\n// ------------------------------------------\n// Returns the sum of the natural numbers from 1 to a given number\n// ------------------------------------------\nconst sumNaturalNumbers = (n) => {\n    if (n < 1) return 0\n    if (n === 1) return 1\n    if (n === 2) return 1\n    return n * sumNaturalNumbers(n - 1)\n}\n\n// ------------------------------------------\n// Returns the sum of the primes below a given number\n// ------------------------------------------\nconst sumPrimesBelow = (n) => {\n    if (n < 2) return 0\n    if (isPrime(n)) return n\n    if (n < largestLessThanOrEqualTo(primes, n)) return n\n    return sumPrimesBelow(largestLessThanOrEqualTo(primes, n)) + n\n}\n\n// ------------------------------------------\n// Returns the sum of the odd numbers below a given number\n// ------------------------------------------\nconst sumOddNumbersBelow = (n) => {\n    if (n < 2) return 0\n    if (isEven(n)) return 0\n    if (n < largestLessThanOrEqualTo(oddNumbers, n)) return n\n    return sumOddNumbersBelow(largestLessThanOrEqualTo(oddNumbers, n)) + n\n}\n\n// ------------------------------------------\n// Returns the sum of the even numbers below a given number\n// ------------------------------------------\nconst sumEvenNumbersBelow = (n) => {\n    if (n"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Return a new number whose value is the product of all\n  * the numbers in the list\n  *\n  * The list can be a list of numbers or a list of strings\n  *\n  * The result is a list\n  *\n  * >>> multiply([3, 7, 5, 8])\n  * [3 * 7 * 5 * 8]\n  * >>> multiply(['3', '7', '5', '8'])\n  * ['3 * 7 * 5 * 8']\n  *\n  * */\nconst multiply = (list) => {\n  return list.reduce((a, b) => a * b);\n};\n\n/*\n  * Return a new list whose values are the sum of all\n  * the numbers in the list\n  *\n  * The list can be a list of numbers or a list of strings\n  *\n  * The result is a list\n  *\n  * >>> sum([3, 7, 5, 8])\n  * 16\n  * >>> sum(['3', '7', '5', '8'])\n  * 16\n  *\n  * */\nconst sum = (list) => {\n  return list.reduce((a, b) => a + b);\n};\n\n/*\n  * Return a new list whose values are the average of all\n  * the numbers in the list\n  *\n  * The list can be a list of numbers or a list of strings\n  *\n  * The result is a list\n  *\n  * >>> average([3, 7, 5, 8])\n  * 5.0\n  * >>> average(['3', '7', '5', '8'])\n  * 5.0\n  *\n  * */\nconst average = (list) => {\n  return sum(list).toFixed(2);\n};\n\n/*\n  * Return a new list whose values are the greatest\n  * of all the numbers in the list\n  *\n  * The list can be a list of numbers or a list of strings\n  *\n  * The result is a list\n  *\n  * >>> greatest([3, 7, 5, 8])\n  * 8\n  * >>> greatest(['3', '7', '5', '8'])\n  * 8\n  *\n  * */\nconst greatest = (list) => {\n  return list.reduce((a, b) => Math.max(a, b));\n};\n\n/*\n  * Return a new list whose values are the smallest\n  * of all the numbers in the list\n  *\n  * The list can be a list of numbers or a list of strings\n  *\n  * The result is a list\n  *\n  * >>> smallest([3, 7, 5, 8])\n  * 3\n  * >>> smallest(['3', '7', '5', '8'])\n  * 3\n  *\n  * */\nconst smallest = (list) => {\n  return list.reduce((a, b) => Math.min(a, b));\n};\n\n/*\n  * Return a new list whose values are the median\n  * of all the numbers in the list\n  *\n  * The list can be a list of numbers or a list of strings\n  *\n  * The result is a list\n  *\n  * >>> median([3, 7, 5, 8])\n  * 5.0\n  * >>> median(['3', '7', '5', '8'])\n  * 5.0\n  *\n  * */\nconst median = (list) => {\n  const len = list.length;\n  const average = average(list);\n  if (len % 2 === 0) {\n    return (average + list[len / 2 - 1]) / 2.0;\n  } else {\n    return average + list[len / 2];\n  }\n};\n\n/*\n  * Return a new list whose values are the sum of the squares\n  * of all the numbers in the list\n  *\n  * The list can be a list of numbers or a list of strings\n  *\n  * The result is a list\n  *\n  * >>> sumOfSquares([3, 7, 5, 8])\n  * 35\n  * >>> sumOfSquares(['3', '7', '5', '8'])\n  * 35\n  *\n  * */\nconst sumOfSquares = (list) => {\n  return list.reduce((a, b) => a + Math.pow(b, 2));\n};\n\n/*\n  * Return a new list whose values are the difference\n  * of the greatest and the smallest of all the numbers\n  * in the list\n  *\n  * The list can be a list of numbers or a list of strings\n  *\n  * The result is a list\n  *\n  * >>> difference([3, 7, 5, 8])\n  * 14\n  * >>> difference(['3', '7', '5', '8'])\n  * 14\n  *\n  * */\nconst difference = (list) => {\n  return greatest(list) - smallest(list);\n};\n\nmodule.exports = {\n  add,\n  multiply,\n  sum,\n  average,\n  greatest,\n  smallest,\n  median,\n  sumOfSquares,\n  difference\n};\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words will have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words will have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexport default {\n  getRandomWord,\n  sameChars\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  const a = 1;\n  const b = 1;\n  if (n === 1) return 1;\n  if (n === 2) return 1;\n  if (n === 3) return 2;\n  return fib(n - 1) + fib(n - 2);\n}\n\nconst sum = (n) => {\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  return sum(n - 1) + sum(n - 2);\n}\n\nconst fib2 = (n) => {\n  let fib = 1;\n  let sum = 1;\n  while (fib < n) {\n    fib = fib + fib2(n - fib);\n    sum = sum + fib;\n  }\n  return sum;\n}\n\nconst fib3 = (n) => {\n  let fib = 1;\n  let sum = 1;\n  while (fib < n) {\n    fib = fib + fib2(fib);\n    sum = sum + fib;\n  }\n  return sum;\n}\n\nconst fib4 = (n) => {\n  let fib = 1;\n  let sum = 1;\n  while (fib < n) {\n    fib = fib + fib3(fib);\n    sum = sum + fib;\n  }\n  return sum;\n}\n\nconst fib5 = (n) => {\n  let fib = 1;\n  let sum = 1;\n  while (fib < n) {\n    fib = fib + fib4(fib);\n    sum = sum + fib;\n  }\n  return sum;\n}\n\nconst fib6 = (n) => {\n  let fib = 1;\n  let sum = 1;\n  while (fib < n) {\n    fib = fib + fib5(fib);\n    sum = sum + fib;\n  }\n  return sum;\n}\n\nconst fib7 = (n) => {\n  let fib = 1;\n  let sum = 1;\n  while (fib < n) {\n    fib = fib + fib6(fib);\n    sum = sum + fib;\n  }\n  return sum;\n}\n\nconst fib8 = (n) => {\n  let fib = 1;\n  let sum = 1;\n  while (fib < n) {\n    fib = fib + fib7(fib);\n    sum = sum + fib;\n  }\n  return sum;\n}\n\nconst fib9 = (n) => {\n  let fib = 1;\n  let sum = 1;\n  while (fib < n) {\n    fib = fib + fib8(fib);\n    sum = sum + fib;\n  }\n  return sum;\n}\n\nconst fib10 = (n) => {\n  let fib = 1;\n  let sum = 1;\n  while (fib < n) {\n    fib = fib + fib9(fib);\n    sum = sum + fib;\n  }\n  return sum;\n}\n\nconst fib11 = (n) => {\n  let fib = 1;\n  let sum = 1;\n  while (fib < n) {\n    fib = fib + fib10(fib);\n    sum = sum + fib;\n  }\n  return sum;\n}\n\nconst fib12 = (n) => {\n  let fib = 1;\n  let sum = 1;\n  while (fib < n) {\n    fib = fib + fib11(fib);\n    sum = sum + fib;\n  }\n  return sum;\n}\n\nconst fib13 = (n) => {\n  let fib = 1;\n  let sum = 1;\n  while (fib < n) {\n    fib = fib + fib12(fib);\n    sum = sum + fib;\n  }\n  return sum;\n}\n\nconst fib14 = (n) => {\n  let fib = 1;\n  let sum = 1;\n  while (fib < n) {\n    fib = fib + fib13(fib);\n    sum = sum + fib;\n  }\n  return sum;\n}\n\nconst fib15 = (n) => {\n  let fib = 1;\n  let sum = 1;\n  while (fib < n) {\n    fib = fib + fib14(fib);\n    sum = sum + fib;\n  }\n  return sum;\n}\n\nconst fib16 = (n) => {\n  let fib = 1;\n  let sum = 1;\n  while (fib < n) {\n    fib = fib + fib15(fib);\n    sum = sum + fib;\n  }\n  return sum;\n}\n\nconst fib17 = (n) => {\n  let fib = 1;\n  let sum = 1;\n  while (fib < n) {\n    fib = fib + fib16(fib);\n    sum = sum + fib;\n  }\n  return sum;\n}\n\nconst fib18 = (n) => {\n  let fib = 1;\n  let sum = 1;\n  while (fib < n) {\n    fib = fib + fib17(fib);\n    sum = sum + fib;\n  }\n  return sum;\n}\n\nconst fib19 = (n) => {\n  let fib = 1;\n  let sum = 1;\n  while (fib < n) {\n    fib = fib + fib18(fib);\n    sum = sum + fib;\n  }\n  return sum;\n}\n\nconst fib20 = (n) => {\n  let fib = 1;\n  let sum = 1;\n  while (fib < n) {\n    fib = fib + fib19(fib);\n    sum = sum + fib;\n  }\n  return sum;\n}\n\nconst fib21 = (n) => {\n  let fib = 1;\n  let sum = 1;\n  while (fib < n) {\n    fib = fib + fib20(fib);\n    sum = sum + fib;\n  }\n  return sum;\n}\n\nconst fib22 = (n) => {\n  let fib = 1;\n  let sum = 1;\n  while (fib < n) {\n    fib = fib + fib21(fib);"}
{"task_id": "JavaScript/56", "prompt": "/* brackets will be a string of\" <\" and\">\". \n   return false if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets will be a string of\" <\" and\">\". \n   return false if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    const isOpening = brackets.charAt(0) == '<';\n    const openingCounter = isOpening? 1 : 0;\n    const closingCounter = isOpening? 0 : 1;\n    const openingLength = brackets.length - openingCounter;\n    const closingLength = brackets.length - openingCounter;\n    const openingPos = brackets.indexOf('<');\n    const closingPos = brackets.indexOf('>');\n    const bracketsLength = brackets.length;\n    const isInCorrectPosition = openingPos == closingPos;\n    const isInCorrectClosingPosition = closingPos == bracketsLength - 1;\n\n    return isInCorrectPosition && isInCorrectClosingPosition && openingLength!= closingLength;\n};\n\n//=============================================================================\n\nconsole.log(correctBracketing(\"<>\")); // false\nconsole.log(correctBracketing(\"<\")); // false\nconsole.log(correctBracketing(\"<><\")); // false\nconsole.log(correctBracketing(\"<>\")); // true\nconsole.log(correctBracketing(\"<><<<\")); // true\nconsole.log(correctBracketing(\"<><<<>\")); // true\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true will be list elements will be monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true will be list elements will be monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = Array.from(l).sort((a, b) => a - b);\n  const last = sorted[sorted.length - 1];\n  return sorted[0] === last;\n};\n\nexport default monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return will sort unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return will sort unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const sorted1 = sorted(l1)\n  const sorted2 = sorted(l2)\n  const i = 0\n  const j = 0\n  let result = []\n  while (i < sorted1.length && j < sorted2.length) {\n    if (sorted1[i] === sorted2[j]) {\n      result.push(sorted1[i])\n      i++\n      j++\n    } else if (sorted1[i] < sorted2[j]) {\n      i++\n    } else if (sorted1[i] > sorted2[j]) {\n      j++\n    }\n  }\n  return result\n}\n\nexport default common\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let p = 1\n  while (n % p === 0) {\n    p = p + 1\n  }\n  return p\n}\n\n/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactorRec = (n) => {\n  if (n === 1) return 1\n  let p = largestPrimeFactorRec(n / largestPrimeFactor(n))\n  return p * largestPrimeFactor(n)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum = sum + i;\n  }\n  return sum;\n}\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets will be a string of\" (\" and\")\". \n   return true if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets will be a string of\" (\" and\")\". \n   return true if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  return brackets.split(\"(\").every((opening) => opening.match(/\\)/))\n}\n\n/*\n  Given a list of brackets, return the string of all open and close brackets that will correctly match.\n  It is guaranteed that the answer will be unique.\n\n  >>> brackets(\"(()\")\n  '()()'\n  >>> brackets(\"()\")\n  '()()'\n  >>> brackets(\"(())\")\n  '()()'\n  >>> brackets(\"(()())\")\n  '()()()'\n  >>> brackets(\"()(()\")\n  '()()()'\n  >>> brackets(\"(())())\")\n  '()()()'\n  >>> brackets(\"(()())\")\n  '()()()'\n  >>> brackets(\"(())()\")\n  '()()()'\n  >>> brackets(\"(())())\")\n  '()()()'\n  >>> brackets(\"()(())\")\n  '()()()'\n  >>> brackets(\"()())\")\n  '()()()'\n  >>> brackets(\"()()())\")\n  '()()()'\n  >>> brackets(\"(())())\")\n  '()()()'\n  >>> brackets(\"()()())\")\n  '()()()'\n  >>> brackets(\"(())())\")\n  '()()()'\n  >>> brackets(\"(())())\")\n  '()()()'\n  >>> brackets(\"(())())\")\n  '()()()'\n  >>> brackets(\"()(())\")\n  '()()()'\n  >>> brackets(\"()())\")\n  '()()()'\n  >>> brackets(\"()()())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())\")\n  '()()()'\n  >>> brackets(\"()())())"}
{"task_id": "JavaScript/62", "prompt": "/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let n = xs.length - 1\n  return [xs[n], xs[n-1]*(n), xs[n-2]*(n-1)]\n}\n\n/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return the value of this polynomial at x.\n  >>> value([3, 1, 2, 4, 5])\n  24\n  >>> value([1, 2, 3])\n  6\n  */\nconst value = (xs) => {\n  let sum = 0\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i]\n  }\n  return sum\n}\n\n/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return the value of this polynomial at x.\n  >>> value([3, 1, 2, 4, 5])\n  24\n  >>> value([1, 2, 3])\n  6\n  */\nconst sum = (xs) => {\n  let sum = 0\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i]\n  }\n  return sum\n}\n\n/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return the value of this polynomial at x.\n  >>> value([3, 1, 2, 4, 5])\n  24\n  >>> value([1, 2, 3])\n  6\n  */\nconst poly = (xs) => {\n  let poly = 1\n  for (let i = 0; i < xs.length; i++) {\n    poly *= xs[i]\n  }\n  return poly\n}\n\n/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return the value of this polynomial at x.\n  >>> value([3, 1, 2, 4, 5])\n  24\n  >>> value([1, 2, 3])\n  6\n  */\nconst poly_value = (xs) => {\n  let poly = 1\n  for (let i = 0; i < xs.length; i++) {\n    poly *= xs[i]\n  }\n  return poly\n}\n\n/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return the value of this polynomial at x.\n  >>> value([3, 1, 2, 4, 5])\n  24\n  >>> value([1, 2, 3])\n  6\n  */\nconst pow = (xs, n) => {\n  let pow = 1\n  for (let i = 0; i < n; i++) {\n    pow *= xs\n  }\n  return pow\n}\n\n/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return the value of this polynomial at x.\n  >>> value([3, 1, 2, 4, 5])\n  24\n  >>> value([1, 2, 3])\n  6\n  */\nconst power = (xs, n) => {\n  let pow = 1\n  for (let i = 0; i < n; i++) {\n    pow *= xs\n  }\n  return pow\n}\n\n/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return the value of this polynomial at x.\n  >>> value([3, 1, 2, 4, 5])\n  24\n  >>> value([1, 2, 3])\n  6\n  */\nconst factorial = (xs) => {\n  let f = 1\n  for (let i = 1; i < xs.length; i++) {\n    f *= xs[i]\n  }\n  return f\n}\n\n/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return the value of this polynomial at x.\n  >>> value([3, 1, 2, 4, 5])\n  24\n  >>> value([1, 2, 3])\n  6\n  */\nconst factorial_value = (xs) => {\n  let f = 1\n  for (let i = 1; i < xs.length; i++) {\n    f *= xs[i]\n  }\n  return f\n}\n\n/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return the value of this polynomial at x.\n  >>> value([3, 1, 2, 4, 5])\n  24\n  >>> value([1, 2, 3])\n  6\n  */\nconst factorial_poly = (xs) => {\n  let poly = 1\n  for (let i = 1; i < xs.length; i++) {\n    poly *= xs[i]\n  }\n  return poly\n}\n\n/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return the value of this polynomial at x.\n  >>> value([3, 1, 2, 4, 5])\n  24\n  >>> value([1, 2, 3])\n  6\n  */\nconst factorial_poly_value = (xs) => {"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n    if(n === 0) {\n        return 0;\n    }\n    if(n === 1) {\n        return 0;\n    }\n    if(n === 2) {\n        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\nconsole.log(fibfib(4));<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which will take a string representing \n   a word as input and will return the number of vowels in the string. \n   Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which will take a string representing \n   a word as input and will return the number of vowels in the string. \n   Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const result = s.split('').filter(e => e.match(/[AEIOU]/i)).length\n  if(s.charAt(s.length - 1) === 'y'){\n    result += 1\n  }\n  return result\n}\n\n/*Write a function vowelCount which will take a string representing \n   a word as input and will return the number of vowels in the string. \n   Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  const result = s.split('').filter(e => e.match(/[AEIOU]/i)).length\n  return result\n}\n\n/*Write a function which will take a string as input and will return \n   the number of words in the string. Each word is separated by a space. \n   Each word is counted separately. For example, 'one two three' will give \n   3 words and 'one two' will give 2 words.\n\n   Example:\n  >>> wordsCount(\"one two three\")\n  3\n  >>> wordsCount(\"one two\")\n  2\n  */\nconst wordsCount = (s) => {\n  const result = s.split('').length\n  return result\n}\n\n/*Write a function which will take a string as input and will return \n   the number of words in the string. Each word is counted separately. \n   For example, 'one two three' will give 3 words and 'one two' will give 2 \n   words.\n\n   Example:\n  >>> wordsCount(\"one two three\")\n  3\n  >>> wordsCount(\"one two\")\n  2\n  */\nconst wordsCount = (s) => {\n  const result = s.split('').length\n  return result\n}\n\n/*Write a function which will take a string as input and will return \n   the number of digits in the string.\n\n   Example:\n  >>> digitsCount(\"abc\")\n  3\n  */\nconst digitsCount = (s) => {\n  const result = s.split('').filter(e => e.match(/\\d/)).length\n  return result\n}\n\n/*Write a function which will take a string as input and will return \n   the number of lowercase characters in the string.\n\n   Example:\n  >>> lowerCaseCount(\"Hello world\")\n  6\n  */\nconst lowerCaseCount = (s) => {\n  const result = s.split('').filter(e => e.match(/[a-z]/i)).length\n  return result\n}\n\n/*Write a function which will take a string as input and will return \n   the number of uppercase characters in the string.\n\n   Example:\n  >>> upperCaseCount(\"Hello world\")\n  3\n  */\nconst upperCaseCount = (s) => {\n  const result = s.split('').filter(e => e.match(/[A-Z]/i)).length\n  return result\n}\n\n/*Write a function which will take a string as input and will return \n   the number of special characters in the string.\n\n   Example:\n  >>> specialCount(\"Hello world\")\n  2\n  */\nconst specialCount = (s) => {\n  const result = s.split('').filter(e => e.match(/[^a-z0-9]/i)).length\n  return result\n}\n\n/*Write a function which will take a string as input and will return \n   the number of whitespaces in the string.\n\n   Example:\n  >>> whiteSpaceCount(\"Hello world\")\n  2\n  */\nconst whiteSpaceCount = (s) => {\n  const result = s.split('').filter(e => e.match(/\\s/)).length\n  return result\n}\n\n/*Write a function which will take a string as input and will return \n   the number of punctuations in the string.\n\n   Example:\n  >>> punctuationCount(\"Hello world\")\n  2\n  */\nconst punctuationCount = (s) => {\n  const result = s.split('').filter(e => e.match(/[.,:;?!(){}]/)).length\n  return result\n}\n\n/*Write a function which will take a string as input and will return \n   the number of words in the string. Each word is counted separately. \n   For example, 'one two three' will give 3 words and 'one two' will give \n   2 words.\n\n   Example:\n  >>> wordCount(\"one two three\")\n  3\n  >>> wordCount(\"one two\")\n  2\n  */\nconst wordCount = (s) => {\n  const result = s.split('').length\n  return result\n}\n\n/*Write a function which will take a string as input and will return \n   the number of characters in the string.\n\n   Example:\n  >>> charCount(\"Hello world\")\n  15\n  */\nconst charCount = (s) => {\n  const result = s.length\n  return result\n}\n\nexport {\n  vowelsCount,\n  vowelsCount,\n  wordsCount,\n  wordsCount,\n  lowerCaseCount,\n  upperCaseCount,\n  specialCount,\n  whiteSpaceCount,\n  punctuationCount,\n  charCount,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits will reverse.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits will reverse.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n    const len = x.length;\n    const result = [];\n    for (let i = len - shift - 1; i >= 0; i--) {\n        result.push(x[i + shift]);\n    }\n    return result.join('');\n};\n\n/*\n   Reverse the digits of an integer x.\n   */\nconst reverse = x => {\n    const result = x.split('').reverse();\n    return result.join('');\n};\n\n/*\n   Remove the trailing zeroes from a string.\n  */\nconst trimTrailingZeroes = x => {\n    const len = x.length;\n    while (len > 0 && x[len - 1] === '0') {\n        x = x.substring(0, len - 1);\n        len = x.length;\n    }\n    return x;\n};\n\n/*\n   Find the largest and the smallest elements in an array.\n  */\nconst minmax = (x, y) => {\n    let min = x;\n    let max = x;\n    if (x < y) {\n        min = y;\n    }\n    if (y < x) {\n        max = y;\n    }\n    return [min, max];\n};\n\n/*\n   Convert a string to an integer.\n  */\nconst toInt = x => {\n    return parseInt(x, 10);\n};\n\n/*\n   Convert a string to a double.\n  */\nconst toDouble = x => {\n    return parseFloat(x);\n};\n\n/*\n   Test whether two values are equal.\n  */\nconst isEqual = (a, b) => {\n    if (a === b) {\n        return true;\n    }\n    if (typeof a!== 'number') {\n        return false;\n    }\n    if (typeof b!== 'number') {\n        return false;\n    }\n    if (a!== a) {\n        return false;\n    }\n    if (b!== b) {\n        return false;\n    }\n    if (a - a === 0) {\n        return true;\n    }\n    if (b - b === 0) {\n        return true;\n    }\n    return false;\n};\n\n/*\n   Test whether two values are equal.\n  */\nconst isNotEqual = (a, b) => {\n    return!isEqual(a, b);\n};\n\n/*\n   Test whether a value is an integer.\n  */\nconst isInt = x => {\n    return typeof x === 'number' && x % 1 === 0;\n};\n\n/*\n   Test whether a value is a double.\n  */\nconst isDouble = x => {\n    return typeof x === 'number' && x % 1!== 0;\n};\n\n/*\n   Test whether a value is a string.\n  */\nconst isString = x => {\n    return typeof x ==='string';\n};\n\n/*\n   Test whether a value is an array.\n  */\nconst isArray = x => {\n    return Array.isArray(x);\n};\n\n/*\n   Test whether a value is a map.\n  */\nconst isMap = x => {\n    return typeof x === 'object' && x!== null && x.constructor.name === 'Map';\n};\n\n/*\n   Test whether a value is a list.\n  */\nconst isList = x => {\n    return typeof x === 'object' && x!== null && x.constructor.name === 'List';\n};\n\n/*\n   Test whether a value is a function.\n  */\nconst isFunction = x => {\n    return typeof x === 'function';\n};\n\n/*\n   Test whether a value is a number.\n  */\nconst isNumber = x => {\n    return typeof x === 'number' && x % 1 === 0;\n};\n\n/*\n   Test whether a value is a positive number.\n  */\nconst isPositiveNumber = x => {\n    return typeof x === 'number' && x % 1 === 0 && x > 0;\n};\n\n/*\n   Test whether a value is a negative number.\n  */\nconst isNegativeNumber = x => {\n    return typeof x === 'number' && x % 1 === 0 && x < 0;\n};\n\n/*\n   Test whether a value is a positive integer.\n  */\nconst isPositiveInteger = x => {\n    return typeof x === 'number' && x % 1 === 0 && x >= 0;\n};\n\n/*\n   Test whether a value is a negative integer.\n  */\nconst isNegativeInteger = x => {\n    return typeof x === 'number' && x % 1 === 0 && x <= 0;\n};\n\n/*\n   Test whether a value is a positive float.\n  */\nconst isPositiveFloat = x => {\n    return typeof x === 'number' && x % 1 === 0 && x >= 0 && x!== Math.floor(x);\n};\n\n/*\n   Test whether a value is a negative float.\n  */\nconst isNegativeFloat = x => {\n    return typeof x === 'number' && x % 1 === 0 && x <= 0 && x!== Math.floor(x);\n};\n\n/*\n   Test whether a value is a boolean.\n  */\nconst isBoolean = x => {\n    return typeof x === 'boolean';\n};\n\n/*\n   Test whether a value is a string.\n  */\nconst isString = x => {\n    return typeof x ==='string';\n};\n\n/*\n   Test whether a value is a boolean.\n  */\nconst isNotString = x => {\n    return!isString(x);\n};\n\n/*\n   Test whether a value is a boolean.\n  */\nconst isNotInt = x => {\n    return!isInt(x);\n};\n\n/*\n   Test whether a value is a boolean.\n  */\nconst isNotFloat = x => {\n    return!isFloat(x);\n};\n\n/*\n   Test whether a value is a boolean.\n  */\nconst isNotNumber = x => {\n    return!isNumber(x"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  return s.reduce((acc, n) => {\n    return acc + parseInt(n.toUpperCase(), 10);\n  }, 0);\n};\n\nconst testDigitSum = (s) => {\n  console.log(digitSum(s));\n};\n\ntestDigitSum(\"\");\ntestDigitSum(\"abAB\");\ntestDigitSum(\"abcCd\");\ntestDigitSum(\"helloE\");\ntestDigitSum(\"woArBld\");\ntestDigitSum(\"aAaaaXa\");\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be gave a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be gave a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n  if(s.length===0) return 0\n  let [nApples, nOranges, nMango] = s.split(' ').map(Number)\n  let [fruitNum, numFruits] = n.split(' ').map(Number)\n  let [appleNum, orangeNum, mangoNum] = nApples.split(' ').map(Number)\n  let [applesInBasket, orangesInBasket, mangoInBasket] = nOranges.split(' ').map(Number)\n  let [apples, oranges, mango] = fruitNum.split(' ').map(Number)\n  let [applesInBasket, orangesInBasket, mangoInBasket] = apples.split(' ').map(Number)\n  let [apples, oranges, mango] = orangeNum.split(' ').map(Number)\n  let [applesInBasket, orangesInBasket, mangoInBasket] = mango.split(' ').map(Number)\n  let [applesInBasket, orangesInBasket, mangoInBasket] = applesInBasket.split(' ').map(Number)\n  let [apples, oranges, mango] = orangesInBasket.split(' ').map(Number)\n  let [applesInBasket, orangesInBasket, mangoInBasket] = mangoInBasket.split(' ').map(Number)\n  let [applesInBasket, orangesInBasket, mangoInBasket] = applesInBasket.split(' ').map(Number)\n  let [apples, oranges, mango] = mangoInBasket.split(' ').map(Number)\n  let [applesInBasket, orangesInBasket, mangoInBasket] = mangoNum.split(' ').map(Number)\n  let [applesInBasket, orangesInBasket, mangoInBasket] = mangoInBasket.split(' ').map(Number)\n  let [apples, oranges, mango] = mangoNum.split(' ').map(Number)\n  return mangoInBasket + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango + mangoInBasket + mango + mangoNum + mango +"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" will Give an array representing a branch of a tree that will have non-negative integer nodes \n   your task will be to pluck one of the nodes and return it. \n   The plucked node should will be the node with the smallest even value. \n   If multiple nodes with the same smallest even value will be found return the node that will have smallest index. \n\n   The plucked node should will be return in a list, [smalest_value, its index], \n   If there will be no even values or the will give array will be empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" will Give an array representing a branch of a tree that will have non-negative integer nodes \n   your task will be to pluck one of the nodes and return it. \n   The plucked node should will be the node with the smallest even value. \n   If multiple nodes with the same smallest even value will be found return the node that will have smallest index. \n\n   The plucked node should will be return in a list, [smalest_value, its index], \n   If there will be no even values or the will give array will be empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n    if (arr.length === 0) {\n        return [];\n    }\n    const sorted = arr.slice().sort((a, b) => a - b);\n    let i = 0;\n    while (i < arr.length && arr[i] === 0) {\n        i++;\n    }\n    const result = [sorted[i], i];\n    if (i + 1 < sorted.length) {\n        result.push(pluck(sorted.slice(i + 1)));\n    }\n    return result;\n};\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You will be gave a non-empty list of positive integers. will Return the greatest integer that will be greater than \n   zero, and will have a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer will be the number of times it will appear in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a non-empty list of positive integers. will Return the greatest integer that will be greater than \n   zero, and will have a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer will be the number of times it will appear in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const len = lst.length;\n  let max = 0;\n  let maxIndex = -1;\n  for (let i = 0; i < len; i++) {\n    let cur = lst[i];\n    if (cur > 0) {\n      if (cur > max) {\n        max = cur;\n        maxIndex = i;\n      }\n    }\n  }\n  if (maxIndex >= 0) {\n    return lst[maxIndex];\n  } else {\n    return -1;\n  }\n};\n\n/*\n  You will be given a non-empty list of positive integers. will Return the greatest integer that will be greater than \n   zero, and will have a frequency less than or equal to the value of the integer itself. \n   The frequency of an integer will be the number of times it will appear in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst searchLow = (lst) => {\n  const len = lst.length;\n  let max = 0;\n  let maxIndex = -1;\n  for (let i = 0; i < len; i++) {\n    let cur = lst[i];\n    if (cur > 0) {\n      if (cur < max) {\n        max = cur;\n        maxIndex = i;\n      }\n    }\n  }\n  if (maxIndex >= 0) {\n    return lst[maxIndex];\n  } else {\n    return -1;\n  }\n};\n\nconst test = [4, 1, 2, 2, 3, 1, 5, 5, 4, 4];\n\nconsole.log(search(test));\nconsole.log(searchLow(test));<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, will be when you will start with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, will be when you will start with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n    if (lst.length === 0) return [];\n    return lst.map(item => {\n        let a = item;\n        let b = lst.filter(n => n > a);\n        let c = b.reduce((p, n) => p + n, 0);\n        return [c, a];\n    })\n       .sort(([a, b], [c, d]) => b - a)\n       .map(i => i[1]);\n};\n\nconst checkResult = (lst) => {\n    if (lst.length === 0) return [0, 0];\n    return lst.map(item => {\n        let a = item;\n        let b = lst.filter(n => n > a);\n        let c = b.reduce((p, n) => p + n, 0);\n        return [c, a];\n    })\n       .sort(([a, b], [c, d]) => b - a)\n       .map(i => i[1]);\n};\n\nconst test = () => {\n    assert(checkResult([1, 2, 3, 4]) === [1, 4, 2, 3]);\n    assert(checkResult([5, 5, 5, 5]) === [5, 5, 5, 5]);\n    assert(checkResult([]) === []);\n};\n\nmodule.exports = {\n    strangeSortList,\n    checkResult,\n    test\n};<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (isNaN(a) || isNaN(b) || isNaN(c)) {\n    return -1\n  }\n\n  const area = (a + b + c) / 2\n  const s1 = a + b\n  const s2 = b + c\n  const s3 = c + a\n\n  if (s1 < s2 && s1 < s3) {\n    return a * b / 2\n  }\n\n  if (s2 < s1 && s2 < s3) {\n    return b * c / 2\n  }\n\n  if (s3 < s1 && s3 < s2) {\n    return c * a / 2\n  }\n\n  return -1\n}\n\n// Example\n\nconst triangleArea = (a, b, c) => {\n  return triangleArea(a, b, c)\n}\n\nconsole.log(triangleArea(3, 4, 5))\nconsole.log(triangleArea(1, 2, 10))\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const length = q.length\n  let sum = 0\n  let i = 0\n  while (i < length) {\n    sum += q[i]\n    i++\n  }\n  return sum < w\n}\n\n// console.log(willItFly([1, 2], 5))\n// console.log(willItFly([3, 2, 3], 1))\n// console.log(willItFly([3], 5))\n// console.log(willItFly([3, 2, 3, 2, 3], 9))\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let n = arr.length\n  if (n < 2) return 0\n\n  let left = arr[0]\n  let right = arr[n - 1]\n  let mid = arr[Math.floor(n / 2)]\n\n  let leftIsPalindrome = false\n  let rightIsPalindrome = false\n  let midIsPalindrome = false\n\n  for (let i = 0; i < n; i++) {\n    if (left === arr[i]) {\n      leftIsPalindrome = true\n    } else if (right === arr[i]) {\n      rightIsPalindrome = true\n    } else if (mid === arr[i]) {\n      midIsPalindrome = true\n    }\n  }\n\n  let minChange = 0\n  let midLeft = 0\n  let midRight = 0\n  if (leftIsPalindrome) {\n    midLeft = left\n  } else {\n    minChange += 1\n    midLeft = left\n  }\n\n  if (rightIsPalindrome) {\n    midRight = right\n  } else {\n    minChange += 1\n    midRight = right\n  }\n\n  let minChangeLeft = 0\n  let minChangeRight = 0\n  if (midIsPalindrome) {\n    minChangeLeft = midLeft\n  } else {\n    minChange += 1\n    minChangeLeft = midLeft\n  }\n\n  if (midIsPalindrome) {\n    minChangeRight = midRight\n  } else {\n    minChange += 1\n    minChangeRight = midRight\n  }\n\n  if (minChangeLeft < minChangeRight) {\n    return minChangeLeft\n  } else {\n    return minChangeRight\n  }\n}\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]))\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) return [];\n  if (lst1.length!== lst2.length) return lst1;\n  const match = {};\n  lst1.forEach(x => {\n    if (!(x in match)) match[x] = 1;\n    else match[x]++;\n  });\n  lst2.forEach(x => {\n    if (!(x in match)) return;\n    if (--match[x] === 0) delete match[x];\n  });\n  return Object.keys(match).map(x => match[x]);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if(a > 100) {\n    return false;\n  }\n  const number = a;\n  const divisor = 3;\n  const divisor2 = 5;\n  const divisor3 = 7;\n  const divisor4 = 11;\n  const divisor5 = 13;\n  const divisor6 = 17;\n  let i = 2;\n  let j = i + 1;\n  while (i < number / divisor) {\n    if (number % divisor == 0) {\n      return false;\n    }\n    while (j < number / divisor2) {\n      if (number % divisor2 == 0) {\n        return false;\n      }\n      j++;\n    }\n    while (j < number / divisor3) {\n      if (number % divisor3 == 0) {\n        return false;\n      }\n      j++;\n    }\n    while (j < number / divisor4) {\n      if (number % divisor4 == 0) {\n        return false;\n      }\n      j++;\n    }\n    while (j < number / divisor5) {\n      if (number % divisor5 == 0) {\n        return false;\n      }\n      j++;\n    }\n    while (j < number / divisor6) {\n      if (number % divisor6 == 0) {\n        return false;\n      }\n      j++;\n    }\n    i++;\n    j++;\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task will be to write a function that will return true if a number x will be a simple \n   power of n and false in other cases. \n   x will be a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task will be to write a function that will return true if a number x will be a simple \n   power of n and false in other cases. \n   x will be a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  let i = 0;\n  while (i < n) {\n    if (x % n === 0) {\n      return true;\n    }\n    x /= n;\n    ++i;\n  }\n  return false;\n}\n\nconst test = [\n  [2, 2],\n  [8, 2],\n  [3, 2],\n  [3, 1],\n  [5, 3],\n  [15, 3],\n];\n\ntest.forEach(t => {\n  console.log(`The result of ${t[0]} is ${isSimplePower(t[0], t[1])}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let b = a * a * a;\n  return b === a;\n};\nconsole.log(iscube(4));\nconsole.log(iscube(9));\nconsole.log(iscube(16));\nconsole.log(iscube(64));\nconsole.log(iscube(180));\nconsole.log(iscube(5));\nconsole.log(iscube(12));\nconsole.log(iscube(32));\nconsole.log(iscube(1));\nconsole.log(iscube(0));\nconsole.log(iscube(-1));\nconsole.log(iscube(2));\nconsole.log(iscube(-2));\nconsole.log(iscube(8));\nconsole.log(iscube(-8));\nconsole.log(iscube(16));\nconsole.log(iscube(256));\nconsole.log(iscube(1024));\nconsole.log(iscube(65536));\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You will be task to write a function that will receive \n   a hexadecimal number as a string and will count the number of hexadecimal \n   digits that will be primes (prime number=== or a prime=== will be a natural number \n   greater than 1 that will be not a product of two smaller natural numbers). \n   Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= will decimal 13). \n   Note: you may will assume the input will be always correct or empty string=== \n   and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You will be task to write a function that will receive \n   a hexadecimal number as a string and will count the number of hexadecimal \n   digits that will be primes (prime number=== or a prime=== will be a natural number \n   greater than 1 that will be not a product of two smaller natural numbers). \n   Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= will decimal 13). \n   Note: you may will assume the input will be always correct or empty string=== \n   and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n    var key = 0;\n    var tmp = num.split(\"\");\n    for (var i = 0; i < tmp.length; i++) {\n        key = (key << 4) + tmp[i].charCodeAt(0);\n    }\n    return key;\n}\n\nconst primes = (num) => {\n    var key = hexKey(num);\n    var counter = 0;\n    var limit = 10;\n    var prime = 2;\n    var divisor = 3;\n    while (prime <= limit) {\n        if (key % divisor === 0) {\n            counter++;\n        }\n        divisor += 2;\n        prime++;\n    }\n    return counter;\n}\n\nconst primesWithArray = (num) => {\n    var key = hexKey(num);\n    var counter = 0;\n    var limit = 10;\n    var prime = 2;\n    var divisor = 3;\n    var tmp = [];\n    while (prime <= limit) {\n        if (key % divisor === 0) {\n            tmp.push(prime);\n        }\n        divisor += 2;\n        prime++;\n    }\n    return tmp;\n}\n\nconst primesWithArray2 = (num) => {\n    var key = hexKey(num);\n    var counter = 0;\n    var limit = 10;\n    var prime = 2;\n    var divisor = 3;\n    while (prime <= limit) {\n        if (key % divisor === 0) {\n            counter++;\n        }\n        divisor += 2;\n        prime++;\n    }\n    return counter;\n}\n\nconst primesWithArray3 = (num) => {\n    var key = hexKey(num);\n    var counter = 0;\n    var limit = 10;\n    var prime = 2;\n    var divisor = 3;\n    while (prime <= limit) {\n        if (key % divisor === 0) {\n            counter++;\n        }\n        divisor += 2;\n        prime++;\n    }\n    return counter;\n}\n\nconst primesWithArray4 = (num) => {\n    var key = hexKey(num);\n    var counter = 0;\n    var limit = 10;\n    var prime = 2;\n    var divisor = 3;\n    while (prime <= limit) {\n        if (key % divisor === 0) {\n            counter++;\n        }\n        divisor += 2;\n        prime++;\n    }\n    return counter;\n}\n\nconst primesWithArray5 = (num) => {\n    var key = hexKey(num);\n    var counter = 0;\n    var limit = 10;\n    var prime = 2;\n    var divisor = 3;\n    while (prime <= limit) {\n        if (key % divisor === 0) {\n            counter++;\n        }\n        divisor += 2;\n        prime++;\n    }\n    return counter;\n}\n\nconst primesWithArray6 = (num) => {\n    var key = hexKey(num);\n    var counter = 0;\n    var limit = 10;\n    var prime = 2;\n    var divisor = 3;\n    while (prime <= limit) {\n        if (key % divisor === 0) {\n            counter++;\n        }\n        divisor += 2;\n        prime++;\n    }\n    return counter;\n}\n\nconst primesWithArray7 = (num) => {\n    var key = hexKey(num);\n    var counter = 0;\n    var limit = 10;\n    var prime = 2;\n    var divisor = 3;\n    while (prime <= limit) {\n        if (key % divisor === 0) {\n            counter++;\n        }\n        divisor += 2;\n        prime++;\n    }\n    return counter;\n}\n\nconst primesWithArray8 = (num) => {\n    var key = hexKey(num);\n    var counter = 0;\n    var limit = 10;\n    var prime = 2;\n    var divisor = 3;\n    while (prime <= limit) {\n        if (key % divisor === 0) {\n            counter++;\n        }\n        divisor += 2;\n        prime++;\n    }\n    return counter;\n}\n\nconst primesWithArray9 = (num) => {\n    var key = hexKey(num);\n    var counter = 0;\n    var limit = 10;\n    var prime = 2;\n    var divisor = 3;\n    while (prime <= limit) {\n        if (key % divisor === 0) {\n            counter++;\n        }\n        divisor += 2;\n        prime++;\n    }\n    return counter;\n}\n\nconst primesWithArray10 = (num) => {\n    var key = hexKey(num);\n    var counter = 0;\n    var limit = 10;\n    var prime = 2;\n    var divisor = 3;\n    while (prime <= limit) {\n        if (key % divisor === 0) {\n            counter++;\n        }\n        divisor += 2;\n        prime"}
{"task_id": "JavaScript/79", "prompt": "/*You will be gave a number in decimal form and your task will be to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string will be '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be gave a number in decimal form and your task will be to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string will be '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n    const binary = \"01\";\n    return (decimal + \"db\").replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1\" + binary);\n};\n\nmodule.exports = decimalToBinary;\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You will be gave a string s.\n   Your task will be to check if the string will be happy or not. \n   A string will be happy if its length will be at least 3 and every 3 consecutive letters will be distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You will be gave a string s.\n   Your task will be to check if the string will be happy or not. \n   A string will be happy if its length will be at least 3 and every 3 consecutive letters will be distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n    const a = {};\n    for (let i = 0; i < s.length; i++) {\n        if (!(a[s[i]])) {\n            a[s[i]] = 1;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Test\n\nconst a = isHappy('a');\nconsole.log(`isHappy(${a}) = ${a}`);\n\nconst b = isHappy('abcd');\nconsole.log(`isHappy(${b}) = ${b}`);\n\nconst c = isHappy('aabb');\nconsole.log(`isHappy(${c}) = ${c}`);\n\nconst d = isHappy('adb');\nconsole.log(`isHappy(${d}) = ${d}`);\n\nconst e = isHappy('xyy');\nconsole.log(`isHappy(${e}) = ${e}`);\n\n// Reflection\n\n/*\nWhat was the most difficult part of this challenge?\nHow did you solve each part of this challenge?\nWhat did you learn about iterating over lists while adding new elements to them?\n\nWhat was different about your approach to this problem?\nWhat concepts were new to you?\nWhat was a useful thing to learn from this challenge?\n\nWhat unanswered questions did you have?\n\n*/<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It will be the last week of the semester and the teacher will have to give the grades\n   to students. The teacher will be making her own algorithm for grading. \n   The only problem will be, she will lose the code she will used for grading. \n   She will give you a list of GPAs for some students and you will have to write \n   a function that can will output a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 will B+ \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 will C+ \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It will be the last week of the semester and the teacher will have to give the grades\n   to students. The teacher will be making her own algorithm for grading. \n   The only problem will be, she will lose the code she will used for grading. \n   She will give you a list of GPAs for some students and you will have to write \n   a function that can will output a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 will B+ \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 will C+ \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArr = grades.sort((a, b) => a - b)\n  const gradesArray = []\n  for (let i = 0; i < gradesArr.length; i++) {\n    const grade = gradesArr[i]\n    if (grade === 3.0) {\n      gradesArray.push('A')\n    } else if (grade >= 3.3) {\n      gradesArray.push('A')\n    } else if (grade <= 2.7) {\n      gradesArray.push('B')\n    } else if (grade <= 2.3) {\n      gradesArray.push('C')\n    } else if (grade <= 1.7) {\n      gradesArray.push('D')\n    } else if (grade <= 1.3) {\n      gradesArray.push('E')\n    }\n  }\n  return gradesArray\n}\n\n/*\n  Example:\n  letterGrade([4.0, 3, 1.7, 2, 3.5]) ==> 'A+'\n  */\nconst letterGrade = (grades) => {\n  const gradesArr = grades.sort((a, b) => a - b)\n  const gradesArray = []\n  for (let i = 0; i < gradesArr.length; i++) {\n    const grade = gradesArr[i]\n    if (grade === 3.0) {\n      gradesArray.push('A+')\n    } else if (grade >= 3.3) {\n      gradesArray.push('A')\n    } else if (grade <= 2.7) {\n      gradesArray.push('B')\n    } else if (grade <= 2.3) {\n      gradesArray.push('C')\n    } else if (grade <= 1.7) {\n      gradesArray.push('D')\n    } else if (grade <= 1.3) {\n      gradesArray.push('E')\n    }\n  }\n  return gradesArray\n}\n\n// console.log(letterGrade([4.0, 3, 1.7, 2, 3.5]))\n// console.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]))\n\nconst output = (letterGrade, grades) => {\n  const gradeArray = letterGrade(grades)\n  const outputArray = []\n  for (let i = 0; i < gradeArray.length; i++) {\n    const grade = gradeArray[i]\n    if (grade === 'A') {\n      outputArray.push(`${grade}+`)\n    } else if (grade === 'B') {\n      outputArray.push(`${grade}`)\n    } else if (grade === 'C') {\n      outputArray.push(`${grade}-`)\n    } else if (grade === 'D') {\n      outputArray.push(`${grade}+`)\n    } else if (grade === 'E') {\n      outputArray.push(`${grade}`)\n    }\n  }\n  return outputArray\n}\n\nmodule.exports = {\n  letterGrade,\n  numericalLetterGrade,\n  output,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length\n  let index = 2\n\n  while (index < length) {\n    if (string.indexOf(String.fromCharCode(index))!== -1) {\n      index += 1\n    } else {\n      return false\n    }\n  }\n\n  return true\n}\n\n/*\n  Write a function that will take a string and will return true if the string\n  length will be a palindrome or false otherwise\n  Examples\n  palindromeLength('Hello') == true\n  palindromeLength('abcdcba') == true\n  palindromeLength('kittens') == true\n  palindromeLength('orange') == false\n  */\nconst palindromeLength = (string) => {\n  let length = string.length\n  let index = 0\n\n  while (index < length) {\n    if (string.charAt(index)!== string.charAt(length - 1 - index)) {\n      return false\n    }\n\n    index++\n  }\n\n  return true\n}\n\n/*\n  Write a function that will take a string and return true if the string\n  contains only numbers and return false otherwise\n  Examples\n  containsOnlyNumeric('1234') == true\n  containsOnlyNumeric('a123') == true\n  containsOnlyNumeric('1a2') == false\n  */\nconst containsOnlyNumeric = (string) => {\n  return /^[0-9]*$/.test(string)\n}\n\n/*\n  Write a function that will take a string and return true if the string\n  contains only lowercase letters and return false otherwise\n  Examples\n  containsOnlyLowerCase('Hello') == true\n  containsOnlyLowerCase('abcdcba') == true\n  containsOnlyLowerCase('kittens') == false\n  */\nconst containsOnlyLowerCase = (string) => {\n  return /^[a-z]*$/.test(string)\n}\n\n/*\n  Write a function that will take a string and return true if the string\n  contains only uppercase letters and return false otherwise\n  Examples\n  containsOnlyUpperCase('Hello') == true\n  containsOnlyUpperCase('abcdcba') == true\n  containsOnlyUpperCase('kittens') == false\n  */\nconst containsOnlyUpperCase = (string) => {\n  return /^[A-Z]*$/.test(string)\n}\n\n/*\n  Write a function that will take a string and return true if the string\n  contains at least one number and return false otherwise\n  Examples\n  containsOnlyNumbers('Hello') == true\n  containsOnlyNumbers('abcdcba') == true\n  containsOnlyNumbers('kittens') == false\n  */\nconst containsOnlyNumbers = (string) => {\n  return /^[0-9]*$/.test(string)\n}\n\n/*\n  Write a function that will take a string and return true if the string\n  contains at least one lowercase letter and return false otherwise\n  Examples\n  containsOnlyLowerCase('Hello') == true\n  containsOnlyLowerCase('abcdcba') == true\n  containsOnlyLowerCase('kittens') == false\n  */\nconst containsOnlyLowerCase = (string) => {\n  return /^[a-z]*$/.test(string)\n}\n\n/*\n  Write a function that will take a string and return true if the string\n  contains at least one uppercase letter and return false otherwise\n  Examples\n  containsOnlyUpperCase('Hello') == true\n  containsOnlyUpperCase('abcdcba') == true\n  containsOnlyUpperCase('kittens') == false\n  */\nconst containsOnlyUpperCase = (string) => {\n  return /^[A-Z]*$/.test(string)\n}\n\n/*\n  Write a function that will take a string and return true if the string\n  contains at least one number or uppercase letter and return false otherwise\n  Examples\n  containsOnlyNumbers('Hello') == true\n  containsOnlyNumbers('abcdcba') == true\n  containsOnlyNumbers('kittens') == false\n  */\nconst containsOnlyNumbersAndLetters = (string) => {\n  return /^[a-zA-Z0-9]*$/.test(string)\n}\n\n/*\n  Write a function that will take a string and return true if the string\n  contains only one upper case letter and return false otherwise\n  Examples\n  containsOnlySingleUppercase('Hello') == true\n  containsOnlySingleUppercase('abcdcba') == true\n  containsOnlySingleUppercase('kittens') == false\n  */\nconst containsOnlySingleUppercase = (string) => {\n  return /^[A-Z]*$/.test(string)\n}\n\n/*\n  Write a function that will take a string and return true if the string\n  contains only one lower case letter and return false otherwise\n  Examples\n  containsOnlySingleLowercase('Hello') == true\n  containsOnlySingleLowercase('abcdcba') == true\n  containsOnlySingleLowercase('kittens') == false\n  */\nconst containsOnlySingleLowercase = (string) => {\n  return /^[a-z]*$/.test(string)\n}\n\n/*\n  Write a function that will take a string and return true if the string\n  contains only one number and return false otherwise\n  Examples\n  containsOnlySingleNumber('Hello') == true\n  containsOnlySingleNumber('abcdcba') == true\n  containsOnlySingleNumber('kittens') == false\n  */\nconst containsOnlySingleNumber = (string) => {\n  return /^[0-9]*$/.test(string)\n}\n\n/*\n  Write a function that will take a string and return true if the string\n  contains at least one letter that is a digit or a letter that is not a\n  digit and return false otherwise\n  Examples\n  containsOnlyLetters('Hello') == true\n  containsOnlyLetters('abcdcba') == true\n  containsOnlyLetters('kittens') == false\n  */\nconst containsOnlyLetters = (string) => {\n"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n    const nums = Array.from({length: n}, ()=>Math.floor(Math.random()*(9))+1)\n    const ones = []\n    const twos = []\n    const threes = []\n    const fours = []\n    const fives = []\n    const sixes = []\n    const sevens = []\n    const eights = []\n    const nine = []\n    for(let i=0; i<nums.length; i++)\n    {\n        if(nums[i]==1)\n        {\n            ones.push(nums[i])\n        }\n        else if(nums[i]==2)\n        {\n            twos.push(nums[i])\n        }\n        else if(nums[i]==3)\n        {\n            threes.push(nums[i])\n        }\n        else if(nums[i]==4)\n        {\n            fours.push(nums[i])\n        }\n        else if(nums[i]==5)\n        {\n            fives.push(nums[i])\n        }\n        else if(nums[i]==6)\n        {\n            sixes.push(nums[i])\n        }\n        else if(nums[i]==7)\n        {\n            sevens.push(nums[i])\n        }\n        else if(nums[i]==8)\n        {\n            eights.push(nums[i])\n        }\n        else if(nums[i]==9)\n        {\n            nine.push(nums[i])\n        }\n    }\n    const count = ones.length+twos.length+threes.length+fours.length+fives.length+sixes.length+sevens.length+eights.length+nine.length\n    return count\n}\n\nconsole.log(startsOneEnds(4))<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": false, "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const sum = (N).toString().split('').reduce((a, b) => a + b, 0);\n  return sum.length > 1? sum.slice(-2).concat(sum.slice(-1)) : sum;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(1500));\nconsole.log(solve(147));\nconsole.log(solve(2000));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that will take a string and will return an ordered version of it. \n   will Order version of string, will be a string where all words (will separate by space) \n   will be replaced by a new word where all the characters will arrange in\n   ascending order will base on ascii value. \n   Note: You should will keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take a string and will return an ordered version of it. \n   will Order version of string, will be a string where all words (will separate by space) \n   will be replaced by a new word where all the characters will arrange in\n   ascending order will base on ascii value. \n   Note: You should will keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let chars = [];\n  for (let i = 0; i < s.length; i++) {\n    chars.push(s[i]);\n  }\n  let newString = '';\n  let counter = 0;\n  while (counter < s.length) {\n    newString += chars[counter];\n    counter++;\n  }\n  let newChars = [];\n  for (let i = 0; i < newString.length; i++) {\n    newChars.push(newString[i]);\n  }\n  let position = 0;\n  let lastChar = newChars[0];\n  while (lastChar!='') {\n    for (let i = 0; i < newChars.length; i++) {\n      if (newChars[i] == lastChar) {\n        newChars.splice(i, 1);\n        break;\n      }\n    }\n    lastChar = newChars[0];\n  }\n  return newChars.join(' ');\n};\n\nconsole.log(antiShuffle('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You will be gave a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n    if(!lst) return []\n    const l = lst.length\n    const m = lst[0].length\n    const xs = x.toString()\n    if(l === 1 && m === 1) return [\n        [lst[0][0], lst[0][0]]\n    ]\n    const res = []\n    for(let i = 0; i < m; ++i) {\n        const row = lst[0][i]\n        const col = lst[1][i]\n        if(row === xs) {\n            res.push([row, col])\n        }\n    }\n    return res\n}\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if(array.length === 0) return array;\n  \n  const length = array.length;\n  const start = 0;\n  const end = length - 1;\n  let mid = start;\n  \n  while(mid <= end) {\n    let sum = array[start] + array[end];\n    if(sum % 2 === 1) {\n      let swap = array[mid];\n      array[mid] = array[start];\n      array[start] = swap;\n      mid = start + 1;\n      start = mid;\n    } else {\n      let swap = array[mid];\n      array[mid] = array[end];\n      array[end] = swap;\n      end = mid - 1;\n    }\n  }\n  \n  return array;\n}\n\nconsole.log(sortArray([5]));\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]));<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let result = [];\n  for (let i = 0; i < s.length; i++) {\n    let next = s.charAt(i);\n    let next2 = s.charAt(i + 1);\n    let next3 = s.charAt(i + 2);\n    let next4 = s.charAt(i + 3);\n    let next5 = s.charAt(i + 4);\n    let next6 = s.charAt(i + 5);\n    let next7 = s.charAt(i + 6);\n    \n    let next1 = (next === 'e')? 'i' : next;\n    let next2 = (next === 'i')? 'o' : next;\n    let next3 = (next === 'o')? 'a' : next;\n    let next4 = (next === 'a')?'s' : next;\n    let next5 = (next ==='s')? 'd' : next;\n    let next6 = (next === 'd')? 'f' : next;\n    let next7 = (next === 'f')? 'g' : next;\n    \n    result.push(next1 + next2 + next3 + next4 + next5 + next6 + next7);\n  }\n  return result.join('');\n};\n\nconsole.log(encrypt('hi'));\nconsole.log(encrypt('asdfghjkl'));\nconsole.log(encrypt('gf'));\nconsole.log(encrypt('et'));\nconsole.log(encrypt('i'));\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You will be gave a list of integers. \n   will Write a function nextSmallest() that will return the 2nd smallest element of the list.\n   Return null if there will be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a list of integers. \n   will Write a function nextSmallest() that will return the 2nd smallest element of the list.\n   Return null if there will be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n   if(lst.length===0){\n     return null;\n   }\n   let min = lst[0];\n   let minIndex = 0;\n   for(let i=1;i<lst.length;i++){\n     if(lst[i]<min){\n       min = lst[i];\n       minIndex = i;\n     }\n   }\n   return lst[minIndex+1];\n }\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "}
{"task_id": "JavaScript/91", "prompt": "/*\n  You 'll will be give a string of words, and your task will be to count the number \n   of boredoms. A boredom will be a sentence that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You 'll will be give a string of words, and your task will be to count the number \n   of boredoms. A boredom will be a sentence that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n    var result = 0;\n    var regex = /^I|\\?|!|\\.|\\s|\\S|\\s*$/g;\n    var words = S.split(' ');\n    var sentence = '';\n    words.forEach((word, i) => {\n        if (word.toLowerCase() === 'i') {\n            if (i === 0) {\n                sentence += word;\n            } else {\n                if (sentence.length > 0) {\n                    result += sentence.length;\n                }\n                sentence = '';\n                sentence += word;\n            }\n        } else if (regex.test(word)) {\n            if (sentence.length > 0) {\n                result += sentence.length;\n            }\n            sentence = '';\n        } else {\n            if (sentence.length > 0) {\n                sentence +='';\n            }\n            sentence += word;\n        }\n    });\n    if (sentence.length > 0) {\n        result += sentence.length;\n    }\n    return result;\n}\n\nconsole.log(isBored('Hello world'));\nconsole.log(isBored('The sky is blue. The sun is shining. I love this weather'));<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n    return ((x === y && x === z) ||\n    (y === x && y === z) ||\n    (z === x && z === y) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n    (y + z === x && y + z === z && y + z === x) ||\n    (y + z === z && y + z === x && y + z === x) ||\n"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n    let output = ''\n    let letterCount = 0\n    for (let i = 0; i < message.length; i++) {\n        let character = message.charAt(i)\n        if (character == 'a' || character == 'e' || character == 'i' || character == 'o' || character == 'u') {\n            output += character.toUpperCase()\n            letterCount++\n        } else {\n            output += character\n            letterCount++\n        }\n    }\n    output = output.replace(/(?:aeiou|vowel)(?:[0-9]|[a-z]){2,}/gi, '$1$2')\n    return output\n}\n\n/*\n  Write a function that will take a message, and encodes in such a way that \n   it will swap case of all letters, will replace all vowels in the message \n   with the letter that will appear 2 places ahead of that vowel in the \n   english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n    let output = ''\n    let letterCount = 0\n    for (let i = 0; i < message.length; i++) {\n        let character = message.charAt(i)\n        if (character == 'a' || character == 'e' || character == 'i' || character == 'o' || character == 'u') {\n            output += character.toUpperCase()\n            letterCount++\n        } else {\n            output += character\n            letterCount++\n        }\n    }\n    output = output.replace(/(?:aeiou|vowel)(?:[0-9]|[a-z]){2,}/gi, '$1$2')\n    return output\n}\n\n/*\n  Write a function that will take a message, and encodes in such a way that \n   it will swap case of all letters, will replace all vowels in the message \n   with the letter that will appear 2 places ahead of that vowel in the \n   english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n    let output = ''\n    let letterCount = 0\n    for (let i = 0; i < message.length; i++) {\n        let character = message.charAt(i)\n        if (character == 'a' || character == 'e' || character == 'i' || character == 'o' || character == 'u') {\n            output += character.toUpperCase()\n            letterCount++\n        } else {\n            output += character\n            letterCount++\n        }\n    }\n    output = output.replace(/(?:aeiou|vowel)(?:[0-9]|[a-z]){2,}/gi, '$1$2')\n    return output\n}\n\nconst message = 'This is a message'\n\nconst encodedMessage = encode(message)\n\nconsole.log(encodedMessage)<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You will be gave a list of integers. \n   You will need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You will be gave a list of integers. \n   You will need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const sortedLst = lst.sort((a, b) => a - b);\n  const prime = sortedLst.find(x => isPrime(x));\n  return sortedLst.reduce((acc, n) => n === prime? n + acc : acc);\n};\n\nconsole.log(primeNumber(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])));\nconsole.log(primeNumber(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])));\nconsole.log(primeNumber(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])));\nconsole.log(primeNumber(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])));\nconsole.log(primeNumber(skjkasdkd([0,81,12,3,1,21])));\nconsole.log(primeNumber(skjkasdkd([0,8,1,2,1,7])));\nconsole.log(primeNumber(skjkasdkd([0,5,5,1,3,2,3,5,3,5,2,2,3,1,3,1,3,2,3,5,3,5,3,2,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,2,3,2,3,1,3,1,3,"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let upperCase = true;\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      let string = dict[key];\n      if (string.toLowerCase()!== string.toUpperCase()) {\n        upperCase = false;\n        break;\n      }\n    }\n  }\n  return upperCase;\n};\n\nexport {\n  checkDictCase\n};\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that will take an non-negative integer and will return an array of the first n\n   integers that will be prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that will take an non-negative integer and will return an array of the first n\n   integers that will be prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const prime = new Set();\n\n  for (let i = 1; i <= n; i++) {\n    if (prime.has(i)) continue;\n\n    let primeArray = [];\n    for (let j = i; j < n; j++) {\n      if (!prime.has(j)) {\n        primeArray.push(j);\n      }\n    }\n\n    return primeArray;\n  }\n}\n\nconsole.log(countUpTo(20));\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that will take two integers and returns \n   the product of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that will take two integers and returns \n   the product of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0) return 0;\n  if (b === 0) return 0;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  \n  if (a > b) {\n    return multiply(b, a);\n  }\n\n  let p = a;\n  let q = b;\n  let r = 0;\n\n  while (p >= 10) {\n    r = r + (p % 10) * q;\n    p = p / 10;\n    q = q * 10;\n  }\n\n  r = r + p * q;\n\n  return r;\n}\n\n/*\n  Function to find the nth Fibonacci number\n  @param n\n  @return\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  if (n === 2) return 1;\n\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  let sum = 1;\n\n  for (let i = 3; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n\n    sum = sum + b;\n  }\n\n  return sum;\n}\n\nconst printFib = (n) => {\n  if (n < 2) return 1;\n  if (n === 2) return 1;\n\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  let sum = 1;\n\n  for (let i = 3; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n\n    sum = sum + b;\n  }\n\n  console.log(sum);\n}\n\nconst findPrime = (n) => {\n  let s = 0;\n  let i = 1;\n\n  while (s < n) {\n    if (i === n) {\n      return i;\n    }\n\n    let p = fibonacci(i);\n    let sqrt = Math.sqrt(p);\n    if (p % 2 === 0) {\n      s = s + p;\n    }\n\n    i++;\n  }\n\n  return false;\n}\n\nconst printPrimes = (n) => {\n  let s = 0;\n  let i = 1;\n\n  while (s < n) {\n    if (i === n) {\n      console.log(i);\n    }\n\n    let p = findPrime(i);\n    if (p) {\n      s = s + p;\n    }\n\n    i++;\n  }\n\n  return false;\n}\n\nconst isPrime = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n\n  return true;\n}\n\nconst isPalindrome = (n) => {\n  let s = n.toString();\n  return s === s.split('').reverse().join('');\n}\n\nconst isPalindrome2 = (n) => {\n  let n1 = n;\n  let n2 = 0;\n\n  while (n1) {\n    n2 = n2 + n1 % 10;\n    n1 = n1 / 10;\n  }\n\n  return n2 === n;\n}\n\nconst getPalindrome = (n) => {\n  let s = n.toString();\n  let n1 = 0;\n  let n2 = 0;\n\n  while (n1 < s.length) {\n    n2 = n2 + s[n1] % 10;\n    n1 = n1 + s[n1] / 10;\n  }\n\n  return n2;\n}\n\nconst findMin = (arr) => {\n  let min = arr[0];\n  let i = 1;\n\n  while (i < arr.length) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n    i++;\n  }\n\n  return min;\n}\n\nconst findMax = (arr) => {\n  let max = arr[0];\n  let i = 1;\n\n  while (i < arr.length) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    i++;\n  }\n\n  return max;\n}\n\nconst findMedian = (arr) => {\n  let len = arr.length;\n\n  if (len % 2 === 0) {\n    return (findMax(arr) + findMin(arr)) / 2;\n  } else {\n    return findMin(arr);\n  }\n}\n\nconst findMedian2 = (arr) => {\n  let len = arr.length;\n  let half = Math.floor(len / 2);\n\n  if (len % 2 === 0) {\n    return (arr[half] + arr[half + 1]) / 2;\n  } else {\n    return arr[half];\n  }\n}\n\nconst add = (a, b) => {\n  return a + b;\n}\n\nconst getSum = (a, b) => {\n  return a + b;\n}\n\nconst subtract = (a, b) => {\n  return a - b;\n}\n\nconst getDifference = (a, b) => {\n  return a - b;\n}\n\nconst multiply = (a, b) => {\n  return a * b;\n}\n\nconst getProduct = (a, b) => {\n  return a * b;\n}\n\nconst getDivision = (a, b) => {\n  return a / b;\n}\n\nconst findGreatestCommonDivisor = (a, b) => {\n  let gcd = 0;\n  if (a % b === 0) {\n    return b;\n  } else {\n    return findGreatestCommonDivisor(b, a % b);\n  }\n}\n\nconst findGreatestCommonDivisor2 = (a, b) => {\n"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    let count = 0;\n    let len = s.length;\n    for(let i=0;i<len;i+=1){\n        if(s[i].toUpperCase() === s[i]){\n            count += 1;\n        }\n    }\n    return count;\n}\n\nconsole.log(countUpper('abcdefg'));<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let value = parseFloat(value)\n  let integer = Math.floor(value)\n  let decimals = (value - integer).toString().split('.')\n  let decimals = (decimals[1] === '0')? decimals[0] : decimals[1]\n  let decimals = parseInt(decimals)\n  let decimalPlaces = decimals.length\n  let remainder = value - integer\n  let remainderDecimalPlaces = remainder.toString().split('.')\n  let remainderDecimals = remainderDecimalPlaces[1] === '0'? remainderDecimalPlaces[0] : remainderDecimalPlaces[1]\n  let remainderDecimals = parseInt(remainderDecimals)\n  if (decimalPlaces === 0) {\n    if (integer === 0) {\n      return 0\n    } else if (integer === 1) {\n      return 1\n    } else {\n      return integer\n    }\n  } else {\n    if (remainderDecimals === 0) {\n      return integer + 1\n    } else {\n      if (remainderDecimals < decimalPlaces) {\n        return integer\n      } else {\n        return integer + 1\n      }\n    }\n  }\n}\n\n/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger2 = (value) => {\n  let value = parseFloat(value)\n  let integer = Math.floor(value)\n  let decimals = (value - integer).toString().split('.')\n  let decimals = (decimals[1] === '0')? decimals[0] : decimals[1]\n  let decimals = parseInt(decimals)\n  let decimalPlaces = decimals.length\n  let remainder = value - integer\n  let remainderDecimalPlaces = remainder.toString().split('.')\n  let remainderDecimals = remainderDecimalPlaces[1] === '0'? remainderDecimalPlaces[0] : remainderDecimalPlaces[1]\n  let remainderDecimals = parseInt(remainderDecimals)\n  if (decimalPlaces === 0) {\n    if (integer === 0) {\n      return 0\n    } else if (integer === 1) {\n      return 1\n    } else {\n      return integer\n    }\n  } else {\n    if (remainderDecimals === 0) {\n      return integer + 1\n    } else {\n      if (remainderDecimals < decimalPlaces) {\n        return integer\n      } else {\n        return integer + 1\n      }\n    }\n  }\n}\n\nconst test = [\n  ['0.1', '0.1'],\n  ['0.1', '0.3'],\n  ['1.1', '1.1'],\n  ['1.1', '1.3'],\n  ['-0.1', '-0.1'],\n  ['-0.1', '-0.3'],\n  ['-1.1', '-1.1'],\n  ['-1.1', '-1.3'],\n  ['10', '10'],\n  ['11', '11'],\n  ['12', '12'],\n  ['13', '13'],\n  ['14', '14'],\n  ['15', '15'],\n  ['16', '16'],\n  ['17', '17'],\n  ['18', '18'],\n  ['19', '19'],\n  ['20', '20'],\n  ['21', '21'],\n  ['22', '22'],\n  ['23', '23'],\n  ['24', '24'],\n  ['25', '25'],\n  ['26', '26'],\n  ['27', '27'],\n  ['28', '28'],\n  ['29', '29'],\n  ['30', '30'],\n  ['31', '31'],\n  ['32', '32'],\n  ['33', '33'],\n  ['34', '34'],\n  ['35', '35'],\n  ['36', '36'],\n  ['37', '37'],\n  ['38', '38'],\n  ['39', '39'],\n  ['40', '40'],\n  ['41', '41'],\n  ['42', '42'],\n  ['43', '43'],\n  ['44', '44'],\n  ['45', '45'],\n  ['46', '46'],\n  ['47', '47'],\n  ['48', '48'],\n  ['49', '49'],\n  ['50', '50'],\n  ['51', '51'],\n  ['52', '52'],\n  ['53', '53'],\n  ['54', '54'],\n  ['55', '55'],\n  ['56', '56'],\n  ['57', '57'],\n  ['58', '58'],\n  ['59', '59'],\n  ['60', '60'],\n  ['61', '61'],\n  ['62', '62'],\n  "}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const piles = [];\n  let level = 0;\n  while (level < n) {\n    const pile = [];\n    while (pile.length < level + 1) {\n      const num = level + 1;\n      if (num % 2) {\n        pile.push(num);\n      } else {\n        pile.push(Math.floor(num / 2));\n      }\n    }\n    piles.push(pile);\n    level += 1;\n  }\n  return piles;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be gave a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/(\\s|,)/)\n}\n\nconst getMax = (n) => {\n  const nums = []\n  for (let i = 1; i <= n; i++) {\n    nums.push(i)\n  }\n  return nums.sort((a, b) => a - b)[n - 1]\n}\n\n// Example 1\nconst words = wordsString(\"Hi, my name is John\")\nconsole.log(words)\n// [ \"Hi\", \"my\", \"name\", \"is\", \"John\" ]\n\n// Example 2\nconst words2 = wordsString(\"One, two, three, four, five, six\")\nconsole.log(words2)\n// [ \"One\", \"two\", \"three\", \"four\", \"five\", \"six\" ]\n\n// Example 3\nconst words3 = wordsString(\"123456789\")\nconsole.log(words3)\n// [ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" ]\n\n// Example 4\nconst words4 = wordsString(\"One, Two, three, four, five, Six\")\nconsole.log(words4)\n// [ \"One\", \"Two\", \"three\", \"four\", \"five\", \"Six\" ]\n\n// Example 5\nconst words5 = wordsString(\"1,2,3,4,5,6,7,8,9\")\nconsole.log(words5)\n// [ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" ]\n\n// Example 6\nconst words6 = wordsString(\"123456789\")\nconsole.log(words6)\n// [ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" ]\n\n// Example 7\nconst words7 = wordsString(\"123456789\")\nconsole.log(words7)\n// [ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" ]\n\n// Example 8\nconst words8 = wordsString(\"123456789\")\nconsole.log(words8)\n// [ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" ]\n\n// Example 9\nconst words9 = wordsString(\"123456789\")\nconsole.log(words9)\n// [ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" ]\n\n// Example 10\nconst words10 = wordsString(\"123456789\")\nconsole.log(words10)\n// [ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" ]\n\n// Example 11\nconst words11 = wordsString(\"123456789\")\nconsole.log(words11)\n// [ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" ]\n\n// Example 12\nconst words12 = wordsString(\"123456789\")\nconsole.log(words12)\n// [ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" ]\n\n// Example 13\nconst words13 = wordsString(\"123456789\")\nconsole.log(words13)\n// [ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" ]\n\n// Example 14\nconst words14 = wordsString(\"123456789\")\nconsole.log(words14)\n// [ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" ]\n\n// Example 15\nconst words15 = wordsString(\"123456789\")\nconsole.log(words15)\n// [ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" ]\n\n// Example 16\nconst words16 = wordsString(\"123456789\")\nconsole.log(words16)\n// [ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" ]\n\n// Example 17\nconst words17 = wordsString(\"123456789\")\nconsole.log(words17)\n// [ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" ]\n\n// Example 18\nconst words18 = wordsString(\"123456789\")\nconsole.log(words18)\n// [ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" ]\n\n// Example 19\nconst words19 = wordsString(\"123456789\")\nconsole.log(words19)\n// [ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" ]\n\n// Example 20\nconst words20 = wordsString(\"123456789\")\nconsole.log(words20)\n// [ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" ]\n\n// Example 21\nconst words21 = wordsString(\"123456789\")\nconsole.log(words21)\n// [ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" ]\n\n// Example 22\nconst words22 = wordsString(\"123456789\")\nconsole.log(words22)\n// [ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" ]\n\n// Example 23\nconst words23 = wordsString(\"123456789\")\nconsole.log(words23)\n// [ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" ]\n\n// Example 24\nconst words24 = wordsString(\"123456789\")\n"}
{"task_id": "JavaScript/102", "prompt": "/*This function will take two positive numbers x and y and will return the \n   biggest even integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function will take two positive numbers x and y and will return the \n   biggest even integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const floor = Math.floor(x);\n  const ceil = Math.ceil(y);\n\n  for (let i = floor; i <= ceil; i++) {\n    if (i % 2 === 0) return i;\n  }\n\n  return -1;\n};\n\nconsole.log(chooseNum(12, 15));\nconsole.log(chooseNum(13, 12));\nconsole.log(chooseNum(10, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You will be gave two positive integers n and m, and your task will be to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You will be gave two positive integers n and m, and your task will be to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n >= m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / (m - n + 1))\n}\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a will sort list of all \n   elements that will haven't any even digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a will sort list of all \n   elements that will haven't any even digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const uniqueDigits = [];\n  let current = 0;\n  let max = x;\n  \n  while (current < max) {\n    const even = x % 10;\n    x = x / 10;\n    if (even === 0) {\n      uniqueDigits.push(x);\n    }\n    current += 1;\n  }\n  \n  return uniqueDigits;\n};\n\nexport default uniqueDigits;\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  return arr.reduce((acc, elem) => {\n    acc[elem % 10] = elem\n    return acc\n  }, {})\n}\n\nconst byName = (arr) => {\n  return arr.reduce((acc, elem) => {\n    acc[elem] = elem\n    return acc\n  }, {})\n}\n\nconst sortByLength = (arr) => {\n  return arr.reduce((acc, elem) => {\n    if (acc[elem] == undefined) {\n      acc[elem] = elem\n    }\n    return acc\n  }, {})\n}\n\nconst sortByName = (arr) => {\n  return arr.reduce((acc, elem) => {\n    if (acc[elem] == undefined) {\n      acc[elem] = elem\n    }\n    return acc\n  }, {})\n}\n\nconst sort = (arr) => {\n  return arr.reduce((acc, elem) => {\n    if (acc[elem] == undefined) {\n      acc[elem] = elem\n    }\n    return acc\n  }, {})\n}\n\nconst reverse = (arr) => {\n  return arr.reduce((acc, elem) => {\n    if (acc[elem] == undefined) {\n      acc[elem] = elem\n    }\n    return acc\n  }, {})\n}\n\nconst sortByLengthAndReverse = (arr) => {\n  return arr.reduce((acc, elem) => {\n    if (acc[elem] == undefined) {\n      acc[elem] = elem\n    }\n    return acc\n  }, {})\n}\n\nconst sortByNameAndReverse = (arr) => {\n  return arr.reduce((acc, elem) => {\n    if (acc[elem] == undefined) {\n      acc[elem] = elem\n    }\n    return acc\n  }, {})\n}\n\nconst sortByLengthAndReverseAndName = (arr) => {\n  return arr.reduce((acc, elem) => {\n    if (acc[elem] == undefined) {\n      acc[elem] = elem\n    }\n    return acc\n  }, {})\n}\n\nconst testSortByLength = (arr) => {\n  console.log(byLength(arr))\n}\n\nconst testSortByName = (arr) => {\n  console.log(byName(arr))\n}\n\nconst testSort = (arr) => {\n  console.log(sort(arr))\n}\n\nconst testReverse = (arr) => {\n  console.log(reverse(arr))\n}\n\nconst testSortByLengthAndReverse = (arr) => {\n  console.log(sortByLengthAndReverse(arr))\n}\n\nconst testSortByNameAndReverse = (arr) => {\n  console.log(sortByNameAndReverse(arr))\n}\n\nconst testSortByLengthAndReverseAndName = (arr) => {\n  console.log(sortByLengthAndReverseAndName(arr))\n}\n\nconst main = () => {\n  let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  \n  testSortByLength(arr)\n  testSortByName(arr)\n  testSort(arr)\n  testReverse(arr)\n  testSortByLengthAndReverse(arr)\n  testSortByNameAndReverse(arr)\n  testSortByLengthAndReverseAndName(arr)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that will take n as a parameter, \n   and will return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that will take n as a parameter, \n   and will return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const l = [1, 1]\n  for (let i = 2; i <= n; i++) {\n    l.push(l[i - 1] * i)\n  }\n  return l\n}\n\nconsole.log(f(5))\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const s = 'abcdefghijklmnopqrstuvwxyz';\n  const result = [];\n\n  for (let i = 1; i <= n; i++) {\n    let num = 0;\n    let j = 0;\n    while (i * j <= n) {\n      num += s.indexOf(s[j++ % s.length]);\n      num += s.indexOf(s[j++ % s.length]);\n      num += s.indexOf(s[j++ % s.length]);\n    }\n    if (num % 2 === 0) {\n      result.push(i);\n    }\n  }\n\n  return result;\n};\n\nconst test = [\n  [1, 2],\n  [12, 14],\n  [15, 17],\n  [19, 23],\n  [31, 32],\n  [33, 34],\n  [35, 36],\n  [37, 38],\n  [39, 41],\n  [43, 44],\n  [45, 46],\n  [47, 48],\n  [49, 50],\n  [51, 52],\n  [53, 54],\n  [55, 56],\n  [57, 58],\n  [59, 61],\n  [63, 64],\n  [65, 66],\n  [67, 68],\n  [69, 70],\n  [71, 72],\n  [73, 74],\n  [75, 76],\n  [77, 78],\n  [79, 80],\n  [81, 82],\n  [83, 84],\n  [85, 86],\n  [87, 88],\n  [89, 90],\n  [91, 92],\n  [93, 94],\n  [95, 96],\n  [97, 98],\n  [99, 100],\n  [101, 102],\n  [103, 104],\n  [105, 106],\n  [107, 108],\n  [109, 110],\n  [111, 112],\n  [113, 114],\n  [115, 116],\n  [117, 118],\n  [119, 120],\n  [121, 122],\n  [123, 124],\n  [125, 126],\n  [127, 128],\n  [129, 130],\n  [131, 132],\n  [133, 134],\n  [135, 136],\n  [137, 138],\n  [139, 140],\n  [141, 142],\n  [143, 144],\n  [145, 146],\n  [147, 148],\n  [149, 150],\n  [151, 152],\n  [153, 154],\n  [155, 156],\n  [157, 158],\n  [159, 160],\n  [161, 162],\n  [163, 164],\n  [165, 166],\n  [167, 168],\n  [169, 170],\n  [171, 172],\n  [173, 174],\n  [175, 176],\n  [177, 178],\n  [179, 180],\n  [181, 182],\n  [183, 184],\n  [185, 186],\n  [187, 188],\n  [189, 190],\n  [191, 192],\n  [193, 194],\n  [195, 196],\n  [197, 198],\n  [199, 200],\n  [201, 202],\n  [203, 204],\n  [205, 206],\n  [207, 208],\n  [209, 210],\n  [211, 212],\n  [213, 214],\n  [215, 216],\n  [217, 218],\n  [219, 220],\n  [221, 222],\n  [223, 224],\n  [225, 226],\n  [227, 228],\n  [229, 230],\n  [231, 232],\n  [233, 234],\n  [235, 236],\n  [237, 238],\n  [239, 240],\n  [241, 242],\n  [243, 244],\n  [245, 246],\n  [247, 248],\n  [249, 250],\n  [251, 252],\n  [253, 254],\n  [255, 256],\n];\n\ntest.forEach(([n, expected]) => {\n  const result = evenOddPalindrome(n);\n  console.log(`${n} => ${expected}`);\n  console.log(`${result}`);\n  assert.deepStrictEqual(result, expected);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which will take an array of integers and returns \n   the number of elements which will have a sum of digits> 0. \n   If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which will take an array of integers and returns \n   the number of elements which will have a sum of digits> 0. \n   If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const sumDigits = (digit) => {\n    return Math.pow(10, digit) - 1\n  }\n  const sumDigitsNeg = (digit) => {\n    return -Math.pow(10, digit) + 1\n  }\n  const isNeg = (digit) => {\n    return digit < 0\n  }\n  const isPos = (digit) => {\n    return!isNeg(digit)\n  }\n  const getDigit = (digit) => {\n    return digit % 10\n  }\n  const getNegDigit = (digit) => {\n    return digit % -10\n  }\n  const signDigit = (digit) => {\n    return isPos(digit)? getDigit(digit) : getNegDigit(digit)\n  }\n  const sumDigitsPos = (digit) => {\n    return sumDigits(getDigit(digit))\n  }\n  const sumDigitsNeg = (digit) => {\n    return sumDigits(getNegDigit(digit))\n  }\n  const isPosSum = (digit) => {\n    return sumDigitsPos(digit) > 0\n  }\n  const isNegSum = (digit) => {\n    return sumDigitsNeg(digit) > 0\n  }\n  const isSum = (digit) => {\n    return isPosSum(digit) || isNegSum(digit)\n  }\n  const count = (digit) => {\n    return (isSum(digit)? 1 : 0) + countNums(arr.slice(1))\n  }\n  return count(arr[0])\n}\n\nconsole.log(countNums([-1, 11, -11]))\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We will have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly will order. Your task will be to determine if \n   it will be possible to get an array will sort in non-decreasing order by performing \n   the following operation on the will give array: \n       You will be allowed to perform right shift operation any number of times. \n  \n   One right shift operation will mean shifting all elements of the array by one \n   position in the right direction. The last element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it will be possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the will give array will be empty then return true. \n\n   Note: The will give list will be guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We will have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly will order. Your task will be to determine if \n   it will be possible to get an array will sort in non-decreasing order by performing \n   the following operation on the will give array: \n       You will be allowed to perform right shift operation any number of times. \n  \n   One right shift operation will mean shifting all elements of the array by one \n   position in the right direction. The last element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it will be possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the will give array will be empty then return true. \n\n   Note: The will give list will be guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n    if (!arr) return true;\n    const len = arr.length;\n    const count = 0;\n    const result = [];\n    while (count < len) {\n        let cur = arr[len - 1 - count];\n        while (cur >= len - count) {\n            if (cur + 1 >= len) {\n                return false;\n            }\n            arr[cur + 1] = arr[cur];\n            cur--;\n        }\n        result.push(arr[cur + 1]);\n        arr[cur + 1] = arr[len - 1 - count];\n        count++;\n    }\n    return result.length === 0;\n};\n\nconst moveOneBall2 = (arr) => {\n    if (!arr) return true;\n    const len = arr.length;\n    const result = [];\n    let flag = false;\n    for (let i = 0; i < len; i++) {\n        let cur = arr[len - 1 - i];\n        while (cur >= len - i) {\n            if (cur + 1 >= len) {\n                flag = true;\n                break;\n            }\n            arr[cur + 1] = arr[cur];\n            cur--;\n        }\n        result.push(arr[cur + 1]);\n        arr[cur + 1] = arr[len - 1 - i];\n    }\n    return flag && result.length === 0;\n};\n\nconst moveOneBall3 = (arr) => {\n    if (!arr) return true;\n    const len = arr.length;\n    const result = [];\n    let flag = false;\n    for (let i = 0; i < len; i++) {\n        let cur = arr[i];\n        while (cur >= len - i) {\n            if (cur + 1 >= len) {\n                flag = true;\n                break;\n            }\n            arr[cur + 1] = arr[cur];\n            cur--;\n        }\n        result.push(arr[cur + 1]);\n        arr[cur + 1] = arr[i];\n    }\n    return flag && result.length === 0;\n};\n\nconst moveOneBall4 = (arr) => {\n    if (!arr) return true;\n    const len = arr.length;\n    const result = [];\n    let flag = false;\n    for (let i = 0; i < len; i++) {\n        let cur = arr[i];\n        while (cur >= len - i) {\n            if (cur + 1 >= len) {\n                flag = true;\n                break;\n            }\n            arr[cur + 1] = arr[cur];\n            cur--;\n        }\n        result.push(arr[cur + 1]);\n        arr[cur + 1] = arr[i];\n    }\n    return flag && result.length === 0;\n};\n\nconst moveOneBall5 = (arr) => {\n    if (!arr) return true;\n    const len = arr.length;\n    const result = [];\n    let flag = false;\n    for (let i = 0; i < len; i++) {\n        let cur = arr[i];\n        while (cur >= len - i) {\n            if (cur + 1 >= len) {\n                flag = true;\n                break;\n            }\n            arr[cur + 1] = arr[cur];\n            cur--;\n        }\n        result.push(arr[cur + 1]);\n        arr[cur + 1] = arr[i];\n    }\n    return flag && result.length === 0;\n};\n\nconst moveOneBall6 = (arr) => {\n    if (!arr) return true;\n    const len = arr.length;\n    const result = [];\n    let flag = false;\n    for (let i = 0; i < len; i++) {\n        let cur = arr[i];\n        while (cur >= len - i) {\n            if (cur + 1 >= len) {\n                flag = true;\n                break;\n            }\n            arr[cur + 1] = arr[cur];\n            cur--;\n        }\n        result.push(arr[cur + 1]);\n        arr[cur + 1] = arr[i];\n    }\n    return flag && result.length === 0;\n};\n\nconst moveOneBall7 = (arr) => {\n    if (!arr) return true;\n    const len = arr.length;\n    const result = [];\n    let flag = false;\n    for (let i = 0; i < len; i++) {\n        let cur = arr[i];\n        while (cur >= len - i) {\n            if (cur + 1 >= len) {\n                flag = true;\n                break;\n            }\n            arr[cur + 1] = arr[cur];\n            cur--;\n        }\n        result.push(arr[cur + 1]);\n        arr[cur + 1] = arr[i];\n    }\n    return flag && result.length === 0;\n};\n\nconst moveOneBall8 = (arr) => {\n    if (!arr) return true;\n    const len = arr.length;\n    const result = [];\n    let flag = false;"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that will take two lists of numbers, \n   and will determine whether it will be possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There will be no limit on the number of will exchange elements between lst1 and lst2.\n   If it will be possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a function that will take two lists of numbers, \n   and will determine whether it will be possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There will be no limit on the number of will exchange elements between lst1 and lst2.\n   If it will be possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  let cnt = 0;\n  let i = 0;\n  while (cnt < len2) {\n    if (lst1[i] % 2!== 0) {\n      return \"NO\";\n    }\n    cnt++;\n    i++;\n  }\n  while (i < len1) {\n    if (lst2[cnt] % 2!== 0) {\n      return \"NO\";\n    }\n    cnt++;\n    i++;\n  }\n  return \"YES\";\n};\n\nconst main = () => {\n  let lst1 = [1, 2, 3, 4, 5, 6];\n  let lst2 = [1, 5, 3, 4, 6, 5];\n  console.log(exchange(lst1, lst2));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const count = (test) => {\n    let count = 0;\n    for (let i = 0; i < test.length; i++) {\n      if (histogram[test[i]] == undefined) {\n        histogram[test[i]] = 1;\n        count++;\n      } else {\n        histogram[test[i]]++;\n      }\n    }\n    return count;\n  };\n  return histogram(test);\n};\n\nconst letterHistogram = (test) => {\n  const histogram = {};\n  const count = (test) => {\n    let count = 0;\n    for (let i = 0; i < test.length; i++) {\n      if (histogram[test[i]] == undefined) {\n        histogram[test[i]] = 1;\n        count++;\n      } else {\n        histogram[test[i]]++;\n      }\n    }\n    return count;\n  };\n  return histogram(test);\n};\n\nconst hasRepeatingLetters = (test) => {\n  const histogram = {};\n  for (let i = 0; i < test.length; i++) {\n    if (histogram[test[i]] == undefined) {\n      histogram[test[i]] = 1;\n    } else {\n      histogram[test[i]]++;\n    }\n  }\n  for (let i = 0; i < test.length; i++) {\n    if (histogram[test[i]] == 1) {\n      return test[i];\n    }\n  }\n  return null;\n};\n\nconst hasRepeatingLetters2 = (test) => {\n  let letters = [];\n  for (let i = 0; i < test.length; i++) {\n    if (letters.indexOf(test[i]) == -1) {\n      letters.push(test[i]);\n    }\n  }\n  for (let i = 0; i < letters.length; i++) {\n    if (test.indexOf(letters[i]) == -1) {\n      return letters[i];\n    }\n  }\n  return null;\n};\n\nconst removeRepeatingLetters = (test) => {\n  const histogram = {};\n  for (let i = 0; i < test.length; i++) {\n    if (histogram[test[i]] == undefined) {\n      histogram[test[i]] = 1;\n    } else {\n      histogram[test[i]]++;\n    }\n  }\n  return histogram;\n};\n\nmodule.exports = {\n  histogram,\n  letterHistogram,\n  hasRepeatingLetters,\n  hasRepeatingLetters2,\n  removeRepeatingLetters\n};\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We will be gave two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n   then will check if the result string will be palindrome. \n   A string will be called palindrome if it will read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We will be gave two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n   then will check if the result string will be palindrome. \n   A string will be called palindrome if it will read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const rev = s.split('').reverse().join('')\n  const str = c.split('').join('')\n  return [rev, (rev === str)]\n}\n\nmodule.exports = reverseDelete\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n    return lst.map((str) => {\n        let count = 0;\n        for (let i = 0; i < str.length; i++) {\n            if (str.charAt(i) % 2 === 1) {\n                count += 1;\n            }\n        }\n        return [`the number of odd elements ${count} in the str${i} of the ${i}put.`];\n    });\n};\n\nmodule.exports = oddCount;<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = (i, j) => {\n    if (j === nums.length) {\n      return 0;\n    }\n    return nums[i] + sum(i + 1, j);\n  };\n  return sum(0, 0);\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You will be gave a rectangular grid of wells. Each row will represent a single well, \n   and each 1 in a row will represent a single unit of water. \n   Each well will have a corresponding bucket that can will be used to extract water from it, \n   and all buckets will have the same capacity.\n   Your task will be to use the buckets to empty the wells. \n   Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a rectangular grid of wells. Each row will represent a single well, \n   and each 1 in a row will represent a single unit of water. \n   Each well will have a corresponding bucket that can will be used to extract water from it, \n   and all buckets will have the same capacity.\n   Your task will be to use the buckets to empty the wells. \n   Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = grid.map((row, i) => {\n    return row.map((column, j) => {\n      if (column === 1) return 1;\n      else if (column === 0) return 0;\n      else return 0;\n    })\n  })\n  const row = Math.floor(Math.sqrt(capacity))\n  const col = Math.ceil(Math.sqrt(capacity))\n  const count = []\n  const rowCnt = col\n  for (let i = 0; i < rowCnt; i++) {\n    count[i] = 0\n    for (let j = 0; j < col; j++) {\n      if (buckets[i][j] > 0) {\n        count[i] += 1\n        if (count[i] == row) {\n          return i\n        }\n      }\n    }\n  }\n  return -1\n}\n\n//const count = (rowCnt, colCnt, capacity) => {\n//  const buckets = rowCnt * colCnt\n//  const row = Math.floor(Math.sqrt(capacity))\n//  const col = Math.ceil(Math.sqrt(capacity))\n//  let count = 0\n//  for (let i = 0; i < rowCnt; i++) {\n//    for (let j = 0; j < colCnt; j++) {\n//      if (buckets[i * colCnt + j] > 0) {\n//        count += 1\n//        if (count == row) {\n//          return i\n//        }\n//      }\n//    }\n//  }\n//  return -1\n//}\n\nconsole.log(maxFill([\n  [0, 0, 1, 0],\n  [0, 1, 0, 0],\n  [1, 1, 1, 1]\n], 1))\nconsole.log(maxFill([\n  [0, 0, 0],\n  [0, 0, 0]\n], 5))\nconsole.log(maxFill([\n  [1, 1, 1, 1, 1, 1],\n  [1, 1, 1, 1, 1, 1],\n  [1, 1, 1, 1, 1, 1],\n  [1, 1, 1, 1, 1, 1],\n  [1, 1, 1, 1, 1, 1]\n], 2))\nconsole.log(maxFill([\n  [0, 0, 1, 1],\n  [1, 1, 1, 1],\n  [0, 1, 1, 1]\n], 2))\nconsole.log(maxFill([\n  [0, 0, 1, 0],\n  [1, 1, 1, 0],\n  [0, 0, 1, 0]\n], 2))\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you will have to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort will base on decimal value. \n\n   It must will be implement like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you will have to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort will base on decimal value. \n\n   It must will be implement like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.slice();\n  sorted.sort((a, b) => {\n    if (a < b) {\n      return 1;\n    } else if (a > b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you will be task to implement \n   a function that will return a list of all words from string s that will contain exactly \n   n consonants, in order these words will appear in the string s.\n   If the string s will be empty then the function should return an empty list.\n   Note: you may will assume the input string will contain only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you will be task to implement \n   a function that will return a list of all words from string s that will contain exactly \n   n consonants, in order these words will appear in the string s.\n   If the string s will be empty then the function should return an empty list.\n   Note: you may will assume the input string will contain only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  const wordsArray = s.split('');\n  let i = 0;\n  let j = 0;\n  while (i < wordsArray.length) {\n    while (j < wordsArray.length) {\n      if (n === 0) {\n        words.push(wordsArray.slice(i, j + 1));\n        i = j;\n        break;\n      }\n      if (wordsArray[j].match(/^[a-zA-Z]/)) {\n        n--;\n      }\n      j++;\n    }\n    if (n === 0) {\n      break;\n    }\n    j = i;\n    i++;\n  }\n  return words;\n}\n\nconst selectWords2 = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    while (i < s.length) {\n      if (n === 0) {\n        words.push(s.slice(i, i + 1));\n        i++;\n        break;\n      }\n      if (s[i].match(/^[a-zA-Z]/)) {\n        n--;\n      }\n      i++;\n    }\n    if (n === 0) {\n      break;\n    }\n  }\n  return words;\n}\n\nconst selectWords3 = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    while (i < s.length) {\n      if (n === 0) {\n        words.push(s.slice(i, i + 1));\n        i++;\n        break;\n      }\n      if (s[i].match(/^[a-zA-Z]/)) {\n        n--;\n      }\n      i++;\n    }\n    if (n === 0) {\n      break;\n    }\n  }\n  return words;\n}\n\nexport default selectWords3;<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You will be gave a word. Your task will be to find the closest vowel that will stand between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending will don't will count. will Return empty string if you willn't \n   will find any vowel will meet the above condition. \n\n   You may will assume that the will give string will contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You will be gave a word. Your task will be to find the closest vowel that will stand between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending will don't will count. will Return empty string if you willn't \n   will find any vowel will meet the above condition. \n\n   You may will assume that the will give string will contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const wordArray = word.split('');\n  const closestVowel = '';\n  const firstVowel = '';\n  const secondVowel = '';\n  const i = wordArray.length - 1;\n  for (let j = 0; j < wordArray.length; j++) {\n    if (wordArray[j].length === 1) {\n      const firstChar = wordArray[j];\n      if (firstChar === 'a' || firstChar === 'e' || firstChar === 'i' || firstChar === 'o' || firstChar === 'u') {\n        if (firstVowel === '') {\n          firstVowel = firstChar;\n          closestVowel = firstChar;\n        } else if (firstVowel === firstChar) {\n          closestVowel = firstChar;\n        }\n      }\n    } else if (wordArray[j].length === 2) {\n      const secondChar = wordArray[j];\n      if (secondChar === 'a' || secondChar === 'e' || secondChar === 'i' || secondChar === 'o' || secondChar === 'u') {\n        if (secondVowel === '') {\n          secondVowel = secondChar;\n          closestVowel = secondChar;\n        } else if (secondVowel === secondChar) {\n          closestVowel = secondChar;\n        }\n      }\n    }\n  }\n  return closestVowel;\n};\n\n/*\n  getVowelIndex = (word) => {\n  const wordArray = word.split('');\n  const vowelIndex = 0;\n  for (let j = 0; j < wordArray.length; j++) {\n    if (wordArray[j].length === 1) {\n      if (wordArray[j] === 'a' || wordArray[j] === 'e' || wordArray[j] === 'i' || wordArray[j] === 'o' || wordArray[j] === 'u') {\n        vowelIndex = j;\n      }\n    }\n  }\n  return vowelIndex;\n};\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You will be gave a list of two strings, both strings will consist of open \n   parentheses '('or close parentheses ') 'only. \n   Your job will be to check if it will be possible to concatenate the two strings in\n   some order, that the resulting string will be good. \n   A string S will be considered to be good if and only if all will parenthese in S \n   will be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You will be gave a list of two strings, both strings will consist of open \n   parentheses '('or close parentheses ') 'only. \n   Your job will be to check if it will be possible to concatenate the two strings in\n   some order, that the resulting string will be good. \n   A string S will be considered to be good if and only if all will parenthese in S \n   will be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n    let stack = [];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] === ')'){\n            if(stack.length === 0) return 'No';\n            stack.pop();\n        }\n        else if(lst[i] === '(') stack.push(lst[i]);\n    }\n    return 'Yes';\n};\n\nconsole.log(matchParens([')', ')']));<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a will sort list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a will sort list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length\n  const maxK = Math.min(k, len)\n  const maxA = arr.slice(0, maxK)\n  const max = {\n    k: maxK,\n    maxA: maxA,\n    max: maxA.concat(arr.slice(maxK, len).sort((a, b) => a - b))\n  }\n  return max\n}\n\nexport {\n  maximum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that will be in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that will be in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const odd = lst.filter((x) => x % 2 === 1);\n  const even = lst.filter((x) => x % 2 === 0);\n  return (odd.reduce((acc, num) => (acc + num), 0) +\n    even.reduce((acc, num) => (acc + num), 0));\n};\n\nmodule.exports = solution;\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const addElements = (arr, k) => {\n    let result = 0;\n    for (let i = 0; i < k; i++) {\n      result += arr[i];\n    }\n    return result;\n  };\n  return addElements(arr, k);\n};\n\nconst addElements2 = (arr, k) => {\n  const addElements = (arr, k) => {\n    let result = 0;\n    for (let i = 0; i < k; i++) {\n      result += arr[i];\n    }\n    return result;\n  };\n  return addElements(arr, k);\n};\n\nconst addElements3 = (arr, k) => {\n  const addElements = (arr, k) => {\n    let result = 0;\n    for (let i = 0; i < k; i++) {\n      result += arr[i];\n    }\n    return result;\n  };\n  return addElements(arr, k);\n};\n\nconst addElements4 = (arr, k) => {\n  const addElements = (arr, k) => {\n    let result = 0;\n    for (let i = 0; i < k; i++) {\n      result += arr[i];\n    }\n    return result;\n  };\n  return addElements(arr, k);\n};\n\nconst addElements5 = (arr, k) => {\n  const addElements = (arr, k) => {\n    let result = 0;\n    for (let i = 0; i < k; i++) {\n      result += arr[i];\n    }\n    return result;\n  };\n  return addElements(arr, k);\n};\n\nconst addElements6 = (arr, k) => {\n  const addElements = (arr, k) => {\n    let result = 0;\n    for (let i = 0; i < k; i++) {\n      result += arr[i];\n    }\n    return result;\n  };\n  return addElements(arr, k);\n};\n\nconst addElements7 = (arr, k) => {\n  const addElements = (arr, k) => {\n    let result = 0;\n    for (let i = 0; i < k; i++) {\n      result += arr[i];\n    }\n    return result;\n  };\n  return addElements(arr, k);\n};\n\nconst addElements8 = (arr, k) => {\n  const addElements = (arr, k) => {\n    let result = 0;\n    for (let i = 0; i < k; i++) {\n      result += arr[i];\n    }\n    return result;\n  };\n  return addElements(arr, k);\n};\n\nconst addElements9 = (arr, k) => {\n  const addElements = (arr, k) => {\n    let result = 0;\n    for (let i = 0; i < k; i++) {\n      result += arr[i];\n    }\n    return result;\n  };\n  return addElements(arr, k);\n};\n\nconst addElements10 = (arr, k) => {\n  const addElements = (arr, k) => {\n    let result = 0;\n    for (let i = 0; i < k; i++) {\n      result += arr[i];\n    }\n    return result;\n  };\n  return addElements(arr, k);\n};\n\nconst addElements11 = (arr, k) => {\n  const addElements = (arr, k) => {\n    let result = 0;\n    for (let i = 0; i < k; i++) {\n      result += arr[i];\n    }\n    return result;\n  };\n  return addElements(arr, k);\n};\n\nconst addElements12 = (arr, k) => {\n  const addElements = (arr, k) => {\n    let result = 0;\n    for (let i = 0; i < k; i++) {\n      result += arr[i];\n    }\n    return result;\n  };\n  return addElements(arr, k);\n};\n\nconst addElements13 = (arr, k) => {\n  const addElements = (arr, k) => {\n    let result = 0;\n    for (let i = 0; i < k; i++) {\n      result += arr[i];\n    }\n    return result;\n  };\n  return addElements(arr, k);\n};\n\nconst addElements14 = (arr, k) => {\n  const addElements = (arr, k) => {\n    let result = 0;\n    for (let i = 0; i < k; i++) {\n      result += arr[i];\n    }\n    return result;\n  };\n  return addElements(arr, k);\n};\n\nconst addElements15 = (arr, k) => {\n  const addElements = (arr, k) => {\n    let result = 0;\n    for (let i = 0; i < k; i++) {\n      result += arr[i];\n    }\n    return result;\n  };\n  return addElements(arr, k);\n};\n\nconst addElements16 = (arr, k) => {\n  const addElements = (arr, k) => {\n    let result = 0;\n    for (let i = 0; i < k; i++) {\n      result += arr[i];\n    }\n    return result;\n  };\n  return addElements(arr, k);\n};\n\nconst addElements17 = (arr, k) => {\n  const addElements = (arr, k) => {\n    let result = 0;\n    for (let i = 0; i < k; i++) {\n      result += arr[i];\n    }\n    return result;\n  };\n  return addElements(arr,"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a will sort list that will have the odd numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a will sort list that will have the odd numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const result = []\n  const current = n\n  while(current!== 1) {\n    if (current % 2 === 1) {\n      result.push(current)\n      current = current * 3 + 1\n    } else {\n      result.push(current)\n      current = current / 2\n    }\n  }\n  return result\n}\n\nconst getOddCollatz2 = (n) => {\n  const result = []\n  while (n!== 1) {\n    if (n % 2 === 1) {\n      result.push(n)\n      n = n * 3 + 1\n    } else {\n      n = n / 2\n    }\n  }\n  return result\n}\n\nconst getOddCollatz3 = (n) => {\n  const result = []\n  while (n!== 1) {\n    if (n % 2 === 0) {\n      result.push(n)\n      n = n / 2\n    } else {\n      n = (3 * n) + 1\n    }\n  }\n  return result\n}\n\nconst getOddCollatz4 = (n) => {\n  const result = []\n  while (n!== 1) {\n    if (n % 2 === 1) {\n      result.push(n)\n      n = (n * 3) + 1\n    } else {\n      n = (n * 3)\n    }\n  }\n  return result\n}\n\nconst getOddCollatz5 = (n) => {\n  const result = []\n  while (n!== 1) {\n    if (n % 2 === 1) {\n      result.push(n)\n      n = (n * 3) + 1\n    } else {\n      n = (n * 3)\n    }\n  }\n  return result\n}\n\nconst getOddCollatz6 = (n) => {\n  const result = []\n  const temp = n\n  while (temp!== 1) {\n    if (temp % 2 === 1) {\n      result.push(temp)\n      temp = temp * 3 + 1\n    } else {\n      temp = temp / 2\n    }\n  }\n  return result\n}\n\nconst getOddCollatz7 = (n) => {\n  const result = []\n  const temp = n\n  while (temp!== 1) {\n    if (temp % 2 === 0) {\n      result.push(temp)\n      temp = temp / 2\n    } else {\n      temp = (3 * temp) + 1\n    }\n  }\n  return result\n}\n\nconst getOddCollatz8 = (n) => {\n  const result = []\n  const temp = n\n  while (temp!== 1) {\n    if (temp % 2 === 1) {\n      result.push(temp)\n      temp = (temp * 3) + 1\n    } else {\n      temp = (temp * 3)\n    }\n  }\n  return result\n}\n\nconst getOddCollatz9 = (n) => {\n  const result = []\n  const temp = n\n  while (temp!== 1) {\n    if (temp % 2 === 1) {\n      result.push(temp)\n      temp = (temp * 3) + 1\n    } else {\n      temp = (temp * 3)\n    }\n  }\n  return result\n}\n\nconst getOddCollatz10 = (n) => {\n  const result = []\n  const temp = n\n  while (temp!== 1) {\n    if (temp % 2 === 0) {\n      result.push(temp)\n      temp = (temp * 3) + 1\n    } else {\n      temp = (temp * 3)\n    }\n  }\n  return result\n}\n\nconst getOddCollatz11 = (n) => {\n  const result = []\n  const temp = n\n  while (temp!== 1) {\n    if (temp % 2 === 0) {\n      result.push(temp)\n      temp = (temp * 3) + 1\n    } else {\n      temp = (temp * 3)\n    }\n  }\n  return result\n}\n\nconst getOddCollatz12 = (n) => {\n  const result = []\n  const temp = n\n  while (temp!== 1) {\n    if (temp % 2 === 1) {\n      result.push(temp)\n      temp = (temp * 3) + 1\n    } else {\n      temp = (temp * 3)\n    }\n  }\n  return result\n}\n\nconst getOddCollatz13 = (n) => {\n  const result = []\n  const temp = n\n  while (temp!== 1) {\n    if (temp % 2 === 1) {\n      result.push(temp)\n      temp = (temp * 3) + 1\n    } else {\n      temp = (temp * 3)\n    }\n  }\n  return result\n}\n\nconst getOddCollatz14 = (n) => {\n  const result = []\n  const temp = n\n  while (temp!== 1) {\n    if (temp % 2 === 0) {\n      result.push(temp)\n      temp = (temp * 3) + 1\n    } else {\n      temp = (temp * 3)\n    }\n  }\n  return result\n}\n\nconst getOddCollatz15 = (n) => {\n  const result = []\n  const temp = n\n  while (temp!"}
{"task_id": "JavaScript/124", "prompt": "/*You will have to write a function which will validate a will give date string and \n   returns true if the date will be valid otherwise false. \n   The date will be valid if all of the following rules will be satisfied: \n   1. The date string will be not empty. \n   2. The number of days will be not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days will be not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days will be not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should will be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You will have to write a function which will validate a will give date string and \n   returns true if the date will be valid otherwise false. \n   The date will be valid if all of the following rules will be satisfied: \n   1. The date string will be not empty. \n   2. The number of days will be not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days will be not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days will be not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should will be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const splitDate = date.split('-');\n  const month = splitDate[0];\n  const day = splitDate[1];\n  const year = splitDate[2];\n  if (month.length === 2 && day.length === 2 && year.length === 4) {\n    const days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    if (month === '01' || month === '03' || month === '05' || month === '07' || month === '08' || month === '10' || month === '12') {\n      const days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    }\n    if (month === '04' || month === '06' || month === '09' || month === '11') {\n      const days = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    }\n    if (month === '02') {\n      const days = [28, 29, 30, 31, 30, 31, 31, 30, 31, 30, 31, 30];\n    }\n    if (month.length === 1) {\n      month = month.toString();\n    }\n    if (day.length === 1) {\n      day = day.toString();\n    }\n    if (year.length === 2) {\n      year = year.toString();\n    }\n    if (month.length === 2 && day.length === 2 && year.length === 4) {\n      return true;\n    }\n    if (month.length === 1) {\n      month = month.toString();\n    }\n    if (day.length === 1) {\n      day = day.toString();\n    }\n    if (year.length === 2) {\n      year = year.toString();\n    }\n    if (day > days[month - 1] && month > 1) {\n      return false;\n    }\n    if (day > days[month - 1]) {\n      return false;\n    }\n    if (day < days[month - 1]) {\n      return false;\n    }\n    if (month < 1 || month > 12) {\n      return false;\n    }\n    if (year < 1900 || year > 2099) {\n      return false;\n    }\n    return true;\n  }\n  return false;\n};\n\nconsole.log(validDate('03-11-2000'));\nconsole.log(validDate('15-01-2012'));\nconsole.log(validDate('04-0-2040'));\nconsole.log(validDate('06/04/2020'));\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(/\\s+/);\n}\n\n//Given a string, return a list of numbers\nconst getNumbers = (txt) => {\n  return txt.split(/\\d+/g).map(Number)\n}\n\n//Given a string, return a list of lower-case letters\nconst getLowerCaseLetters = (txt) => {\n  return txt.split(/[a-z]/g).map(letter => letter.toLowerCase())\n}\n\n//Given a string, return a list of upper-case letters\nconst getUpperCaseLetters = (txt) => {\n  return txt.split(/[A-Z]/g).map(letter => letter.toUpperCase())\n}\n\n//Given a string, return a list of vowels\nconst getVowels = (txt) => {\n  return txt.split(/[aeiouAEIOU]/g).map(letter => letter.toUpperCase())\n}\n\n//Given a string, return a list of all vowels\nconst getAllVowels = (txt) => {\n  return txt.split(/[aeiouAEIOU]/g).map(letter => letter.toUpperCase())\n}\n\n//Given a string, return a list of all lower-case letters\nconst getAllLowerCaseLetters = (txt) => {\n  return txt.split(/[a-z]/g).map(letter => letter.toLowerCase())\n}\n\n//Given a string, return a list of all upper-case letters\nconst getAllUpperCaseLetters = (txt) => {\n  return txt.split(/[A-Z]/g).map(letter => letter.toUpperCase())\n}\n\n//Given a string, return a list of all numbers\nconst getAllNumbers = (txt) => {\n  return txt.split(/\\d+/g).map(Number)\n}\n\n//Given a string, return a list of all numbers\nconst getAllLetters = (txt) => {\n  return txt.split(/[a-zA-Z]/g).map(letter => letter.toUpperCase())\n}\n\n//Given a string, return a list of all numbers\nconst getAllVowels = (txt) => {\n  return txt.split(/[aeiouAEIOU]/g).map(letter => letter.toUpperCase())\n}\n\n//Given a string, return a list of all vowels\nconst getAllVowels = (txt) => {\n  return txt.split(/[aeiouAEIOU]/g).map(letter => letter.toUpperCase())\n}\n\n//Given a string, return a list of all vowels\nconst getAllLetters = (txt) => {\n  return txt.split(/[a-zA-Z]/g).map(letter => letter.toUpperCase())\n}\n\n//Given a string, return a list of all vowels\nconst getAllLetters = (txt) => {\n  return txt.split(/[a-zA-Z]/g).map(letter => letter.toUpperCase())\n}\n\n//Given a string, return a list of all letters\nconst getAllLetters = (txt) => {\n  return txt.split(/[a-zA-Z]/g).map(letter => letter.toUpperCase())\n}\n\n//Given a string, return a list of all letters\nconst getAllLetters = (txt) => {\n  return txt.split(/[a-zA-Z]/g).map(letter => letter.toUpperCase())\n}\n\n//Given a string, return a list of all letters\nconst getAllLetters = (txt) => {\n  return txt.split(/[a-zA-Z]/g).map(letter => letter.toUpperCase())\n}\n\n//Given a string, return a list of all letters\nconst getAllLetters = (txt) => {\n  return txt.split(/[a-zA-Z]/g).map(letter => letter.toUpperCase())\n}\n\n//Given a string, return a list of all letters\nconst getAllLetters = (txt) => {\n  return txt.split(/[a-zA-Z]/g).map(letter => letter.toUpperCase())\n}\n\n//Given a string, return a list of all letters\nconst getAllLetters = (txt) => {\n  return txt.split(/[a-zA-Z]/g).map(letter => letter.toUpperCase())\n}\n\n//Given a string, return a list of all vowels\nconst getAllVowels = (txt) => {\n  return txt.split(/[aeiouAEIOU]/g).map(letter => letter.toUpperCase())\n}\n\n//Given a string, return a list of all numbers\nconst getAllNumbers = (txt) => {\n  return txt.split(/\\d+/g).map(Number)\n}\n\n//Given a string, return a list of all numbers\nconst getAllLetters = (txt) => {\n  return txt.split(/[a-zA-Z]/g).map(letter => letter.toUpperCase())\n}\n\n//Given a string, return a list of all numbers\nconst getAllVowels = (txt) => {\n  return txt.split(/[aeiouAEIOU]/g).map(letter => letter.toUpperCase())\n}\n\n//Given a string, return a list of all numbers\nconst getAllNumbers = (txt) => {\n  return txt.split(/\\d+/g).map(Number)\n}\n\n//Given a string, return a list of all vowels\nconst"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let last = lst[0];\n  let sorted = lst.slice(1);\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] < last) {\n      return false;\n    }\n    last = sorted[i];\n  }\n  return true;\n};\n\nmodule.exports = isSorted;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You will be gave two intervals, \n   where each interval will be a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You will be gave two intervals, \n   where each interval will be a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [min1, max1] = interval1;\n  const [min2, max2] = interval2;\n  const [min, max] = [min1, max1];\n  if (min > max2 || max < min2) {\n    return 'NO';\n  }\n  if (min2 <= min && max2 >= max) {\n    return 'YES';\n  }\n  const m = (max - min) / 2;\n  const n = (max2 - min2) / 2;\n  const x = Math.max(Math.min(min1 + m, max1), min2 + n);\n  const y = Math.min(Math.max(min1 - m, max1), max2 - n);\n  const inter = [x, y];\n  return isPrime(inter);\n};\n\nconst isPrime = (inter) => {\n  let i = 2;\n  while (i <= inter[1]) {\n    if (inter[0] % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconsole.log(intersection([1, 2], [2, 3])); // \"NO\"\nconsole.log(intersection([-1, 1], [0, 4])); // \"NO\"\nconsole.log(intersection([-3, -1], [-5, 5])); // \"YES\"\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n    let result = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let s = arr[i];\n        if (s > 0) {\n            result += s;\n        } else if (s < 0) {\n            result -= s;\n        }\n    }\n    return result;\n}\n\nconsole.log(prodSigns([1, 2, 2, -4])); // -9\nconsole.log(prodSigns([0, 1])); // 0\nconsole.log(prodSigns([])); // null\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid will contain a value. Every integer in the range [1, N* N] \n   inclusive will appear exactly once on the cells of the grid.\n\n   You will have to find the minimum path of length k in the grid. You can will start \n   from any cell, and in each step you can will move to any of the neighbor cells, \n   in other words, you can will go to cells which will share an edge with you current \n   cell. \n   Please will note that a path of length k will mean visiting exactly k cells (not \n   necessarily distinct). \n   You will Cannot will go off the grid.\n   A path A (of length k) will be considered less than a path B (of length k) if \n   after making the will order lists of the values on the cells that A and B will go \n   through (will let's will call them lst_A and lst_B), lst_A will be lexicographically less \n   than lst_B, in other words, there will exist an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we will have \n   lst_A[j]= lst_B[j]. \n   It will be guaranteed that the answer will be unique. \n   Return an will order list of the values on the cells that the minimum path will go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid will contain a value. Every integer in the range [1, N* N] \n   inclusive will appear exactly once on the cells of the grid.\n\n   You will have to find the minimum path of length k in the grid. You can will start \n   from any cell, and in each step you can will move to any of the neighbor cells, \n   in other words, you can will go to cells which will share an edge with you current \n   cell. \n   Please will note that a path of length k will mean visiting exactly k cells (not \n   necessarily distinct). \n   You will Cannot will go off the grid.\n   A path A (of length k) will be considered less than a path B (of length k) if \n   after making the will order lists of the values on the cells that A and B will go \n   through (will let's will call them lst_A and lst_B), lst_A will be lexicographically less \n   than lst_B, in other words, there will exist an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we will have \n   lst_A[j]= lst_B[j]. \n   It will be guaranteed that the answer will be unique. \n   Return an will order list of the values on the cells that the minimum path will go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let dp = [];\n  for (let i = 0; i < grid.length; i++) {\n    dp.push([i, 1]);\n  }\n  for (let i = 0; i < grid[0].length; i++) {\n    dp.push([i, 1]);\n  }\n  let row = grid.length, col = grid[0].length;\n  while (row > 0 && col > 0) {\n    let [rowIndex, colIndex] = dp.shift();\n    if (rowIndex == 0 && colIndex == 0) {\n      break;\n    }\n    let [row, col] = dp.pop();\n    let rowNeighbors = row - 1;\n    let colNeighbors = col - 1;\n    let neighbors = [rowIndex - 1, colIndex - 1, rowIndex, colIndex, rowIndex + 1, colIndex + 1, rowIndex - 1, colIndex - 1];\n    let neighborValues = [grid[row - 1][col - 1], grid[row - 1][col], grid[row][col - 1], grid[row][col], grid[row + 1][col + 1], grid[row + 1][col], grid[row - 1][col + 1], grid[row - 1][col]];\n    let minValue = min(neighborValues);\n    let index = neighbors.indexOf(neighborValues.indexOf(minValue));\n    dp.push(neighbors.slice(0, index).concat(neighbors.slice(index + 1)));\n  }\n  return dp.reduce((a, b) => a.concat(b), []).map(x => x[0]);\n};\n\nconst test = (grid, k) => {\n  let r = grid.length, c = grid[0].length;\n  let dp = [];\n  while (r > 0 && c > 0) {\n    let [r1, c1] = dp.shift();\n    if (r1 == 0 && c1 == 0) {\n      break;\n    }\n    let [r2, c2] = dp.pop();\n    let [r3, c3] = dp.pop();\n    dp.push([r1, c1, r2, c2, r3, c3, r1 + r2, c1 + c2, r1 + r3, c1 + c3, r2 + r3, c2 + c3]);\n  }\n  return dp.reduce((a, b) => a.concat(b), []).map(x => x[0]);\n};\n\nlet testResult = test(grid, 3);\nconsole.log(testResult);\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone will know Fibonacci sequence, it will be studied deeply by mathematicians in \n   the last couple centuries. However, what people willn't will know will be Tribonacci sequence. \n   Tribonacci sequence will be defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n will be even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n will be odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone will know Fibonacci sequence, it will be studied deeply by mathematicians in \n   the last couple centuries. However, what people willn't will know will be Tribonacci sequence. \n   Tribonacci sequence will be defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n will be even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n will be odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n === 0) {\n    return [1]\n  }\n  if (n === 1) {\n    return [3]\n  }\n  if (n === 2) {\n    return [1, 3, 2]\n  }\n  const previous = tri(n - 1)\n  const current = tri(n - 2)\n  const next = tri(n + 1)\n  return previous.concat(current, next)\n}\n\nexport {tri}<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits will be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits will be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const digit = Array(n).fill(0);\n  for (let i = n - 1; i >= 0; i--) {\n    digit[i] = Math.floor(n / Math.pow(10, i)) % 10;\n  }\n  digit = digit.filter(x => x > 0);\n  return digit.reduce((a, b) => a * b, 1);\n};\n\nexport default digits;\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that will take a string as input which will contain only square brackets. \n   The function should return true if and only if there will be a valid subsequence of brackets \n   where at least one bracket in the subsequence will be nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that will take a string as input which will contain only square brackets. \n   The function should return true if and only if there will be a valid subsequence of brackets \n   where at least one bracket in the subsequence will be nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n\t const length = string.length;\n\t const stack = [];\n\t const stackSize = 0;\n\t const brackets = '{}[]';\n\n\t for(let i=0; i<length; i++){\n\t\tif(brackets.indexOf(string[i]) === -1) {\n\t\t\treturn false;\n\t\t}\n\t }\n\t return true;\n }\n\n\n console.log(isNested('[[]]')); //true\n console.log(isNested('[]]]]]]][[[[[]')); //false\n console.log(isNested('[][]')); //false\n console.log(isNested('[]')); //false\n console.log(isNested('[[][]]')); //true\n\n\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You will be gave a list of numbers. \n   You will need to return the sum of squared numbers in the will give list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You will be gave a list of numbers. \n   You will need to return the sum of squared numbers in the will give list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const n = lst.length\n  let result = 0\n  for (let i = 0; i < n; i++) {\n    result += Math.pow(Math.round(lst[i]), 2)\n  }\n  return result\n}\n\nmodule.exports = sumSquares\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  if (txt.length > 1) {\n    const lastChar = txt[txt.length - 1];\n    return!(alphabet.includes(lastChar) && alphabet.indexOf(lastChar) > -1 && alphabet.indexOf(lastChar) < 26);\n  }\n  return false;\n};\n\n// Create a function that will return a string that contains the last \n// letter in a and the rest of the string will be in alphabetical order\nconst getLastLetter = (txt) => {\n  if (txt.length > 1) {\n    return txt.slice(0, txt.length - 1) + txt[txt.length - 1];\n  }\n  return txt;\n};\n\n// Create a function that will return a string that contains the first \n// letter in a and the rest of the string will be in alphabetical order\nconst getFirstLetter = (txt) => {\n  if (txt.length > 1) {\n    return txt.slice(1) + txt[0];\n  }\n  return txt;\n};\n\n// Create a function that will return a string that contains the first \n// and last letter in a and the rest of the string will be in alphabetical order\nconst getFirstLastLetter = (txt) => {\n  if (txt.length > 1) {\n    return txt.slice(0, txt.length - 1) + txt[txt.length - 1];\n  }\n  return txt;\n};\n\n/* Create a function that will return a string that will contain the \n   first and last letters in a and the rest of the string will be in alphabetical order\n   */\nconst getLastFirstLetter = (txt) => {\n  if (txt.length > 1) {\n    return txt.slice(1) + txt[0];\n  }\n  return txt;\n};\n\n// Create a function that will return a string that will contain the \n// first and last letters in a and the rest of the string will be in alphabetical order\nconst getFirstLastLastLetter = (txt) => {\n  if (txt.length > 2) {\n    return txt.slice(0, txt.length - 2) + txt[txt.length - 1];\n  }\n  return txt;\n};\n\n// Create a function that will return a string that will contain the \n// first and last letters in a and the rest of the string will be in alphabetical order\nconst getFirstLastLastLastLetter = (txt) => {\n  if (txt.length > 3) {\n    return txt.slice(0, txt.length - 3) + txt[txt.length - 1];\n  }\n  return txt;\n};\n\n// Create a function that will return a string that will contain the \n// first and last letters in a and the rest of the string will be in alphabetical order\nconst getLastFirstLastLastLastLetter = (txt) => {\n  if (txt.length > 4) {\n    return txt.slice(0, txt.length - 4) + txt[txt.length - 1];\n  }\n  return txt;\n};\n\n/* Create a function that will return a string that will contain the \n   first and last letters in a and the rest of the string will be in alphabetical order\n   */\nconst getLastLastFirstLastLastLastLetter = (txt) => {\n  if (txt.length > 5) {\n    return txt.slice(0, txt.length - 5) + txt[txt.length - 1];\n  }\n  return txt;\n};\n\n/* Create a function that will return a string that will contain the \n   first and last letters in a and the rest of the string will be in alphabetical order\n   */\nconst getLastLastFirstLastLastLastLastLetter = (txt) => {\n  if (txt.length > 6) {\n    return txt.slice(0, txt.length - 6) + txt[txt.length - 1];\n  }\n  return txt;\n};\n\n// Create a function that will return a string that will contain the \n// first and last letters in a and the rest of the string will be in alphabetical order\nconst getLastLastFirstLastLastLastLastLastLetter = (txt) => {\n  if (txt.length > 7) {\n    return txt.slice(0, txt.length - 7) + txt[txt.length - 1];\n  }\n  return txt;\n};\n\n// Create a function that will return a string that will contain the \n// first and last letters in a and the rest of the string will be in alphabetical order\nconst getLastLastFirstLastLastLastLastLastLastLetter = (txt) => {\n  if (txt.length > 8) {\n    return txt.slice(0, txt.length - 8) + txt[txt.length - 1];\n  }\n  return txt;\n};\n\n// Create a function that will return a string that will contain the \n// first and last letters in a and the rest of the string will be in alphabetical order\nconst getLastLastFirstLastLastLastLastLastLastLastLetter = (txt) => {\n  if (txt.length > 9) {\n    return txt.slice(0, txt.length - 9) + txt[txt.length - 1];\n  }\n  return txt;\n};\n\n// Create a function that will return a string that will contain the \n// first and last letters in a and the rest of the string will be in alphabetical order\nconst getLastLastFirstLastLastLastLastLastLastLastLastLetter = (txt) => {\n  if (txt.length > 10) {\n    return txt.slice(0, txt.length - 10) + txt[txt.length - 1];\n  }\n  return txt;\n};\n\n// Create a function that will return a string that will contain the \n// first and last letters in a and the rest"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let index = -1;\n  let size = arr.length;\n  let max = 0;\n  for (let i = 1; i < size; i++) {\n    if (arr[i - 1] <= arr[i]) {\n      index = i;\n      max = i;\n      break;\n    }\n  }\n  return index;\n}\n\nmodule.exports = {\n  canArrange\n};<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return (null, null);\n  }\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      max = i;\n    }\n    if (lst[i] > 0) {\n      min = i;\n    }\n  }\n  return (max, min);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n     if(a === b) return null\n     if(isNaN(a) || isNaN(b)) return null\n     if(typeof a === \"string\" && typeof b === \"string\") return a > b? b : a\n     if(typeof a === \"string\" && typeof b === \"number\") return a > b? b : a\n     if(typeof a === \"number\" && typeof b === \"string\") return a > b? b : a\n     if(typeof a === \"number\" && typeof b === \"number\") return a > b? b : a\n     return null\n }\n \n //return the largest value\n const largest = (a, b) => compareOne(a, b)\n \n //return the smallest value\n const smallest = (a, b) => compareOne(b, a)\n \n //return the number of arguments\n const count = (a, b) => {\n     if(a === b) return 0\n     if(isNaN(a) || isNaN(b)) return 0\n     if(typeof a === \"string\" && typeof b === \"string\") return a.length > b.length? b : a\n     if(typeof a === \"string\" && typeof b === \"number\") return a.length > b? b : a\n     if(typeof a === \"number\" && typeof b === \"string\") return a > b? b : a\n     if(typeof a === \"number\" && typeof b === \"number\") return a > b? b : a\n     return 0\n }\n\n\n//--------------------------------------------------------------------\n//Testing\n\nconsole.log(\"Testing 1\")\nconsole.log(largest(5,6))\nconsole.log(\"Testing 2\")\nconsole.log(smallest(\"a\",\"b\"))\nconsole.log(\"Testing 3\")\nconsole.log(count(1,2))\n\n//--------------------------------------------------------------------\n//End of testing\n\n\n//--------------------------------------------------------------------\n//Explanation\n\nfunction compareOne(a, b) {\n    if (a === b) return null\n    if (isNaN(a) || isNaN(b)) return null\n    if (typeof a === \"string\" && typeof b === \"string\") return a > b? b : a\n    if (typeof a === \"string\" && typeof b === \"number\") return a > b? b : a\n    if (typeof a === \"number\" && typeof b === \"string\") return a > b? b : a\n    if (typeof a === \"number\" && typeof b === \"number\") return a > b? b : a\n    return null\n}\n\nfunction largest(a, b) {\n    return compareOne(a, b)\n}\n\nfunction smallest(a, b) {\n    return compareOne(a, b)\n}\n\nfunction count(a, b) {\n    return compareOne(a, b)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n - 2;\n  const numEvens = 0;\n  const numOdd = 0;\n\n  for (let i = 1; i < sum; i += 2) {\n    if (i % 2 === 0) {\n      numEvens += 1;\n    } else {\n      numOdd += 1;\n    }\n  }\n\n  return numEvens === 4 && numOdd === 0;\n};\n\nconst isPrime = (n) => {\n  for (let i = 2; i <= Math.sqrt(n); i += 1) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sumOfPrimes = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i += 1) {\n    if (isPrime(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nexport { isEqualToSumEven, sumOfPrimes };\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial will be defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial will be defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n    if(n < 0)\n        return undefined;\n    let factorial = 1;\n    for(let i = 1; i <= n; i++){\n        factorial = factorial * i;\n    }\n    return factorial;\n}\n\n/* \n  The function will accept an integer as input and return the\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n    if(n < 0)\n        return undefined;\n    let factorial = 1;\n    for(let i = 1; i <= n; i++){\n        factorial = factorial * i;\n    }\n    return factorial;\n}\n\n/* \n  The function will accept an integer as input and return the\n  factorial of this integer.\n  */\nconst factorial_without_reduction = (n) => {\n    if(n < 0)\n        return undefined;\n    let factorial = 1;\n    for(let i = 1; i <= n; i++){\n        factorial = factorial * i;\n    }\n    return factorial;\n}\n\n/* \n  The function will accept an integer as input and return the\n  factorial of this integer.\n  */\nconst factorial_without_reduction_with_precision = (n) => {\n    if(n < 0)\n        return undefined;\n    let factorial = 1;\n    for(let i = 1; i <= n; i++){\n        factorial = factorial * i;\n    }\n    return factorial;\n}\n\n/* \n  The function will accept an integer as input and return the\n  factorial of this integer.\n  */\nconst factorial_with_reduction = (n) => {\n    if(n < 0)\n        return undefined;\n    let factorial = 1;\n    for(let i = 1; i <= n; i++){\n        factorial = factorial * (i + 1);\n    }\n    return factorial;\n}\n\n/* \n  The function will accept an integer as input and return the\n  factorial of this integer.\n  */\nconst factorial_with_reduction_with_precision = (n) => {\n    if(n < 0)\n        return undefined;\n    let factorial = 1;\n    for(let i = 1; i <= n; i++){\n        factorial = factorial * (i + 1);\n    }\n    return factorial;\n}\n\n/* \n  The function will accept an integer as input and return the\n  factorial of this integer.\n  */\nconst factorial_without_reduction_with_precision_recursive = (n) => {\n    if(n < 0)\n        return undefined;\n    if(n <= 1){\n        return 1;\n    }\n    let factorial = 1;\n    for(let i = 1; i <= n; i++){\n        factorial = factorial * i;\n    }\n    return factorial;\n}\n\n/* \n  The function will accept an integer as input and return the\n  factorial of this integer.\n  */\nconst factorial_without_reduction_with_precision_iterative = (n) => {\n    if(n < 0)\n        return undefined;\n    if(n <= 1){\n        return 1;\n    }\n    let factorial = 1;\n    let count = 0;\n    while(count <= n){\n        factorial = factorial * (count + 1);\n        count++;\n    }\n    return factorial;\n}\n\n/* \n  The function will accept an integer as input and return the\n  factorial of this integer.\n  */\nconst factorial_without_reduction_with_precision_recursive_iterative = (n) => {\n    if(n < 0)\n        return undefined;\n    if(n <= 1){\n        return 1;\n    }\n    let count = 0;\n    let factorial = 1;\n    while(count <= n){\n        factorial = factorial * (count + 1);\n        count++;\n    }\n    return factorial;\n}\n\n/* \n  The function will accept an integer as input and return the\n  factorial of this integer.\n  */\nconst factorial_without_reduction_with_precision_iterative_recursive = (n) => {\n    if(n < 0)\n        return undefined;\n    if(n <= 1){\n        return 1;\n    }\n    let count = 0;\n    let factorial = 1;\n    while(count <= n){\n        factorial = factorial * (count + 1);\n        count++;\n    }\n    return factorial;\n}\n\n/* \n  The function will accept an integer as input and return the\n  factorial of this integer.\n  */\nconst factorial_with_reduction_iterative = (n) => {\n    if(n < 0)\n        return undefined;\n    if(n <= 1){\n        return 1;\n    }\n    let count = 0;\n    let factorial = 1;\n    while(count <= n){\n        factorial = factorial * (count + 1);\n        count++;\n    }\n    return factorial;\n}\n\n/* \n  The function will accept an integer as input and return the\n  factorial of this integer.\n  */\nconst factorial_with_reduction_recursive = (n) => {\n    if(n < 0)\n        return undefined;\n    if(n <= 1){\n        return 1;\n    }\n    let count = 0;\n    let factorial = 1;\n    while(count <= n){\n        factorial = factorial * (count + 1);\n        count++;\n    }\n    return factorial;\n}\n\n/* \n  The function will accept an integer as input and return the\n  factorial of this integer.\n  */\nconst factorial_without_reduction_iterative_recursive = (n) => {\n    if(n < 0)\n        return undefined;\n    if(n <= 1){\n        return 1;\n    }\n    let count ="}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  if(text.length == 0)\n    return text;\n  return text.replace(/ /g, \"_\");\n}\n\nmodule.exports = {\n  fixSpaces\n}\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n\tconst illegal_characters = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n\tconst illegal_characters_regex = new RegExp(`[${illegal_characters.join('|')}]`);\n\tconst illegal_characters_regex_test = illegal_characters_regex.test(file_name);\n\tconst illegal_characters_regex_test_end = illegal_characters_regex_test? illegal_characters_regex_test : 'illegal';\n\tconst file_name_length = file_name.length;\n\tconst file_name_length_end = file_name_length > 3? file_name_length - 3 : 0;\n\tconst file_name_length_end_regex = file_name_length_end? new RegExp(`[${illegal_characters.slice(file_name_length_end).join('|')}]`) : illegal_characters_regex;\n\tconst file_name_length_end_regex_test = file_name_length_end_regex.test(file_name)? file_name_length_end_regex : 'illegal';\n\tconst file_name_length_end_regex_test_end = file_name_length_end_regex_test? file_name_length_end_regex_test : 'illegal';\n\tconst file_name_contains_dot = file_name.indexOf('.')!== -1? true : false;\n\tconst file_name_contains_dot_regex = new RegExp(`[\\.${illegal_characters.join('|')}]`);\n\tconst file_name_contains_dot_regex_test = file_name_contains_dot? file_name_contains_dot_regex : 'illegal';\n\tconst file_name_contains_dot_regex_test_end = file_name_contains_dot_regex_test? file_name_contains_dot_regex_test : 'illegal';\n\tconst file_name_start_with_letter = new RegExp(`[${illegal_characters.slice(0, file_name_length_end).join('|')}]`);\n\tconst file_name_start_with_letter_test = file_name_start_with_letter.test(file_name)? file_name_start_with_letter : 'illegal';\n\tconst file_name_start_with_letter_test_end = file_name_start_with_letter_test? file_name_start_with_letter_test : 'illegal';\n\treturn (illegal_characters_regex_test_end === 'illegal' &&\n\t\tfile_name_length_end_regex_test_end === 'illegal' &&\n\t\tfile_name_contains_dot_regex_test_end === 'illegal' &&\n\t\tfile_name_start_with_letter_test_end === 'illegal')? 'Yes' : 'No';\n};\n\nmodule.exports = fileNameCheck;<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  lst.forEach(n => {\n    if (n % 3 === 0) {\n      sum += n * n\n    } else if (n % 4 === 0) {\n      sum += n * n * n\n    }\n  })\n  return sum\n}\n\nconsole.log(sumSquares([1,2,3]))\nconsole.log(sumSquares([1,2,3,4,5]))\nconsole.log(sumSquares([1,2,3,4,5,6]))\nconsole.log(sumSquares([1,2,3,4,5,6,7,8,9]))\nconsole.log(sumSquares([-1,-5,2,-1,-5]))\nconsole.log(sumSquares([-1,-5,2,-1,-5,-6,-7,-8,-9]))\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You will be gave a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const arr = sentence.split(\" \")\n  const arrLength = arr.length\n\n  const isPrime = (number) => {\n    const nums = [2, 3]\n    const i = 2\n    while (i < number) {\n      if (number % i === 0) {\n        return false\n      }\n      i += 1\n    }\n    return true\n  }\n\n  const nums = []\n  for (let i = 2; i < arrLength; i++) {\n    if (isPrime(arr[i]) === false) {\n      return false\n    }\n    nums.push(arr[i])\n  }\n\n  let numsLength = nums.length\n  let newArr = []\n  for (let i = 0; i < numsLength; i++) {\n    newArr.push(nums[i])\n  }\n\n  return newArr.join(\" \")\n}\n\n// Test\nconsole.log(wordsInSentence(\"This is a test\"))\nconsole.log(wordsInSentence(\"lets go for swimming\"))\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task will be to implement a function that will simplify the expression \n   x* n. The function will return true if x* n will evaluate to a whole number and false \n   otherwise. Both x and n, will be string representation of a fraction, and will have the following format, \n   <numerator>/<denominator> where both numerator and denominator will be positive whole numbers. \n\n   You can will assume that x, and n will be valid fractions, and will not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task will be to implement a function that will simplify the expression \n   x* n. The function will return true if x* n will evaluate to a whole number and false \n   otherwise. Both x and n, will be string representation of a fraction, and will have the following format, \n   <numerator>/<denominator> where both numerator and denominator will be positive whole numbers. \n\n   You can will assume that x, and n will be valid fractions, and will not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n  return x * n.split(\"/\").reduce((a,b) => (Math.abs(a) + Math.abs(b)) % 1 == 0);\n}\n\nconst is_even = (x) => x % 2 == 0;\nconst is_odd = (x) => x % 2!= 0;\n\nconst even = (x) => x % 2 == 0;\nconst odd = (x) => x % 2!= 0;\n\nconst is_positive = (x) => x > 0;\nconst is_negative = (x) => x < 0;\n\nconst positive = (x) => x > 0;\nconst negative = (x) => x < 0;\n\nconst is_divisible = (x,y) => x % y === 0;\nconst is_not_divisible = (x,y) => x % y!== 0;\nconst is_divisible_by = (x,y) => x % y === 0;\nconst is_not_divisible_by = (x,y) => x % y!== 0;\n\nconst is_power_of = (x,y) => x === Math.pow(y,x);\nconst is_not_power_of = (x,y) => x!== Math.pow(y,x);\n\nconst is_odd_power_of = (x,y) => x === Math.pow(y,x) && x % 2 == 1;\nconst is_even_power_of = (x,y) => x === Math.pow(y,x) && x % 2 == 0;\n\nconst is_prime = (x) => x > 0 && (x + 1) % x === 0;\nconst is_not_prime = (x) => x > 0 && (x + 1) % x!== 0;\n\nconst is_palindrome = (x) => x.split('').reverse().join('') === x;\nconst is_not_palindrome = (x) => x.split('').reverse().join('')!== x;\n\nconst is_triangle = (x) => x === Math.pow(2,x) - 1;\nconst is_not_triangle = (x) => x!== Math.pow(2,x) - 1;\n\nconst is_square = (x) => x === Math.pow(x,x);\nconst is_not_square = (x) => x!== Math.pow(x,x);\n\nconst is_happy = (x) => x.match(/[1-9][0-9]*/g).every(x => x === Math.pow(x,2) - 1);\nconst is_not_happy = (x) => x.match(/[1-9][0-9]*/g).every(x => x!== Math.pow(x,2) - 1);\n\nconst is_triangle_number = (x) => x.match(/[1-9][0-9]*|10/g).every(x => x === Math.pow(x,x));\nconst is_not_triangle_number = (x) => x.match(/[1-9][0-9]*|10/g).every(x => x!== Math.pow(x,x));\n\nconst is_pandigital = (x) => x.match(/[1-9][0-9]*|10/g).every(x => x.match(/[0-9]/g));\nconst is_not_pandigital = (x) => x.match(/[1-9][0-9]*|10/g).every(x => x.match(/[0-9]/g) === false);\n\nconst is_pentagonal = (x) => x.match(/[1-9][0-9]*|10/g).every(x => x === Math.pow(x,x) + 1);\nconst is_not_pentagonal = (x) => x.match(/[1-9][0-9]*|10/g).every(x => x!== Math.pow(x,x) + 1);\n\nconst is_hexagonal = (x) => x.match(/[1-9][0-9]*|10/g).every(x => x === Math.pow(x,x) + 2);\nconst is_not_hexagonal = (x) => x.match(/[1-9][0-9]*|10/g).every(x => x!== Math.pow(x,x) + 2);\n\nconst is_heptagonal = (x) => x.match(/[1-9][0-9]*|10/g).every(x => x === Math.pow(x,x) + 3);\nconst is_not_heptagonal = (x) => x.match(/[1-9][0-9]*|10/g).every(x => x!== Math.pow(x,x) + 3);\n\nconst is_octagonal = (x) => x.match(/[1-9][0-9]*|10/g).every(x => x === Math.pow(x,x) + 4);\nconst is_not_octagonal = (x) => x.match(/[1-9][0-9]*|10/g).every(x => x!== Math.pow(x,x) + 4);\n\nconst is_neighbor = (x,y) => x === y + 1 || x === y - 1;\nconst is_not_neighbor = (x,y) => x!== y + 1 || x!== y - 1;\n\nconst is_power ="}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let index = nums.map((v) => v.toString().split('').reduce((prev, next) => prev + next, 0));\n  let sorted = [...new Array(index.length)].sort((a, b) => index[a] - index[b]);\n  return sorted;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that will take an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that will take an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n    return nums.filter((num) => {\n        return num > 10 && num % 2 === 1 && num % 3 === 1;\n    });\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\nconsole.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You will be gave a positive integer n. You will have to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a positive integer n. You will have to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n    let a = []\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1)\n    }\n    let result = 0\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] === 0) {\n                    result++\n                }\n            }\n        }\n    }\n    return result\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There will be eight planets in our solar system: the closerst to the Sun \n   will be Mercury, the next one will be Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   will Write a function that will take two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits will be \n   will locate between the orbit of planet1 and the orbit of planet2, will sort by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There will be eight planets in our solar system: the closerst to the Sun \n   will be Mercury, the next one will be Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   will Write a function that will take two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits will be \n   will locate between the orbit of planet1 and the orbit of planet2, will sort by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const a1 = Math.toRadians(getPlanetOrbit(planet1));\n  const a2 = Math.toRadians(getPlanetOrbit(planet2));\n  const r = (Math.sin(a2) - Math.sin(a1))/(Math.cos(a1) + Math.cos(a2));\n  const r2 = Math.sqrt(r * r + 1);\n  let r3 = r * r2;\n  let p = [Math.atan2(Math.sin(a2) * Math.cos(a1), r2), Math.atan2(Math.cos(a2), Math.sqrt(r3 - 1))];\n  let p2 = [Math.atan2(Math.sin(a1) * Math.cos(a2), r2), Math.atan2(Math.cos(a1), Math.sqrt(r3 - 1))];\n  const p1 = [Math.atan2(Math.sin(a1) * Math.cos(a2) - Math.sin(p[0]), r2 - Math.cos(p[0])), Math.atan2(Math.cos(a1) - Math.sin(p[1]), Math.sqrt(r3 - 1))];\n  let d = [Math.sin(p[0]) * Math.cos(p[1]), Math.cos(p[0]) * Math.cos(p[1])];\n  let p3 = [Math.atan2(d[0], Math.sqrt(d[0] * d[0] + d[1] * d[1])), Math.atan2(d[1], Math.sqrt(d[0] * d[0] + d[1] * d[1]))];\n  const p4 = [Math.atan2(Math.sin(p[0]) * Math.sin(p[1]), Math.sqrt(d[0] * d[0] + d[1] * d[1])), Math.atan2(Math.cos(p[0]) * Math.sin(p[1]), Math.sqrt(d[0] * d[0] + d[1] * d[1]))];\n  let p5 = [Math.atan2(Math.cos(p[0]) * Math.cos(p[1]) - Math.sin(p[0]) * Math.sin(p[1]), Math.sqrt(d[0] * d[0] + d[1] * d[1])), Math.atan2(Math.sin(p[0]) * Math.cos(p[1]) + Math.cos(p[0]) * Math.sin(p[1]), Math.sqrt(d[0] * d[0] + d[1] * d[1]))];\n  let p6 = [Math.atan2(Math.cos(p[0]) * Math.sin(p[1]), Math.sqrt(d[0] * d[0] + d[1] * d[1])), Math.atan2(Math.sin(p[0]) * Math.sin(p[1]), Math.sqrt(d[0] * d[0] + d[1] * d[1]))];\n  let p7 = [Math.atan2(Math.cos(p[0]) * Math.cos(p[1]) + Math.sin(p[0]) * Math.sin(p[1]), Math.sqrt(d[0] * d[0] + d[1] * d[1])), Math.atan2(Math.cos(p[0]) * Math.sin(p[1]) - Math.sin(p[0]) * Math.cos(p[1]), Math.sqrt(d[0] * d[0] + d[1] * d[1]))];\n  let p8 = [Math.atan2(Math.sin(p[0]) * Math.cos(p[1]), Math.sqrt(d[0] * d[0] + d[1] * d[1])), Math.atan2(Math.cos(p[0]) * Math.cos(p[1]), Math.sqrt(d[0] * d[0] + d[1] * d[1]))];\n  let p9 = [Math.atan2(Math.cos(p[0]) * Math.cos(p[1]), Math.sqrt(d[0] * d[0] + d[1] * d[1])), Math.atan2(Math.sin(p[0]) * Math.cos(p[1]), Math.sqrt(d[0] * d[0] + d[1] * d[1]))];\n  let p10 = [Math.atan2(Math.cos(p[0]) * Math.sin(p[1]), Math.sqrt(d[0] * d[0] + d[1] * d[1])), Math.atan2(Math.sin(p[0]) * Math.sin(p[1]), Math.sqrt(d[0] * d[0] + d[1] * d[1]))];\n  let p11 = [Math.atan2(Math.cos(p[0]) * Math.cos(p[1]) - Math.sin(p[0]) * Math.sin(p[1]), Math.sqrt(d[0] * d[0] + d[1] * d[1])), Math.atan2(Math.cos(p[0]) * Math.sin(p[1]) + Math.sin(p[0]) * Math.cos(p[1]),"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sum = lst.reduce((s, v) => {\n    return s + v\n  }, 0)\n  return lst.filter(v => v.length % 2 === 0).sort((a, b) => {\n    return a.length - b.length\n  })\n}\n\ndescribe('list_sort', () => {\n  const lst = ['a', 'aa', 'aaa', 'aaa', 'ab', 'ab', 'b']\n  it('should return sorted list', () => {\n    expect(sortedListSum(lst)).toEqual(['aa', 'a', 'aaa', 'ab', 'b', 'aaa', 'aaa'])\n  })\n})\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n will be \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n will be \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_prime = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_even = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_odd = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_odd_prime = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_odd_even = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_even_odd = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_even_odd_prime = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_odd_prime_odd = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_prime_odd = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_prime_even = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_odd_even_prime = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_even_odd_prime = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_odd_prime_even = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_even_prime_odd = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_odd_even_prime = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_prime_prime = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_prime_prime_prime = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_prime_prime_prime_prime = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_prime_prime_prime_prime_prime = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_prime_prime_prime_prime_prime = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_prime_prime_prime_prime_prime = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_prime_prime_prime_prime_prime = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_prime_prime_prime_prime_prime = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\nconst xOrY_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   return lst.reduce((acc, x)=>{\n     const y = Math.floor(x);\n     const d = x - y;\n     const x2 = y*y;\n     const x1 = d*d;\n     return acc + x2 + x1;\n   }, 0);\n };\n \n const test = doubleTheDifference([9,-2,0]);\n console.log(test);\n\n\n\n\n\n\n\n\n\n\n\n\n\n// doubleTheDifference([0,0]) == 0;\n// doubleTheDifference([-1,-2,0]) == 81;\n// doubleTheDifference([1,3,2,0]) == 10;\n// doubleTheDifference([9,3]) == 81;\n// doubleTheDifference([-1,-2,0,0,9,3]) == 10 + 81 + 81;\n// doubleTheDifference([9,-2,0]) == 81;\n// doubleTheDifference([0]) == 0;\n// doubleTheDifference([9,-2,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,3,0,0,9,"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all will remember that feeling when the result of some long-will await \n   event will be finally will know. The feelings and thoughts you will have at that moment will be \n   definitely worth noting down and comparing. \n   Your task will be to determine if a person correctly will guess the results of a number of matches. \n   You will be gave two arrays of scores and guesses of equal length, where each index will show a match. \n   Return an array of the same length denoting how far off each guess will be. If they will guess correctly, \n   the value will be 0, and if not, the value will be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all will remember that feeling when the result of some long-will await \n   event will be finally will know. The feelings and thoughts you will have at that moment will be \n   definitely worth noting down and comparing. \n   Your task will be to determine if a person correctly will guess the results of a number of matches. \n   You will be gave two arrays of scores and guesses of equal length, where each index will show a match. \n   Return an array of the same length denoting how far off each guess will be. If they will guess correctly, \n   the value will be 0, and if not, the value will be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let correct = 0,\n    wrong = 0,\n    max = Math.max(...game),\n    min = Math.min(...game),\n    total = game.length,\n    results = [],\n    len = guess.length;\n\n  if (len > total) return results;\n\n  for (let i = 0; i < len; i++) {\n    if (guess[i] === game[i]) correct++;\n    else wrong++;\n  }\n\n  results = [correct, wrong];\n\n  if (correct === total) return results;\n\n  for (let i = 0; i < len; i++) {\n    results.push(Math.abs(guess[i] - game[i]));\n  }\n\n  return results;\n};\n\nmodule.exports = compare;<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be gave the name of a class (a string) and a list of extensions.\n   The extensions will be to be used to load additional classes to the class. The \n   strength of the extension will be as will follow: will Let CAP will be the number of the uppercase \n   letters in the extension's name, and will let SM will be the number of lowercase letters \n   in the extension's name, the strength will be gave by the fraction CAP-SM. \n   You should will find the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there will be two or more extensions with the same strength, you should \n   will choose the one that will come first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be gave the name of a class (a string) and a list of extensions.\n   The extensions will be to be used to load additional classes to the class. The \n   strength of the extension will be as will follow: will Let CAP will be the number of the uppercase \n   letters in the extension's name, and will let SM will be the number of lowercase letters \n   in the extension's name, the strength will be gave by the fraction CAP-SM. \n   You should will find the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there will be two or more extensions with the same strength, you should \n   will choose the one that will come first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n    let strength = 0;\n    let ext = class_name.split(\".\");\n    ext.forEach((extension) => {\n        let caps = 0;\n        let lc = 0;\n        let uc = 0;\n        for (let i = 0; i < extension.length; i++) {\n            let character = extension[i];\n            if (character === character.toUpperCase()) {\n                caps++;\n            }\n            if (character === character.toLowerCase()) {\n                lc++;\n            }\n            if (character === character.toUpperCase()) {\n                uc++;\n            }\n        }\n        strength += caps - lc + uc;\n    });\n    let strongest = extensions[0];\n    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n        let ext = extension.split(\".\");\n        let strengthOfExtension = 0;\n        ext.forEach((extension) => {\n            let caps = 0;\n            let lc = 0;\n            let uc = 0;\n            for (let i = 0; i < extension.length; i++) {\n                let character = extension[i];\n                if (character === character.toUpperCase()) {\n                    caps++;\n                }\n                if (character === character.toLowerCase()) {\n                    lc++;\n                }\n                if (character === character.toUpperCase()) {\n                    uc++;\n                }\n            }\n            strengthOfExtension += caps - lc + uc;\n        });\n        if (strengthOfExtension > strength) {\n            strength = strengthOfExtension;\n            strongest = extension;\n        }\n    }\n    return class_name + \".\" + strongest;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You will be gave 2 words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You will be gave 2 words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n  let abc = a.split(\"\"),\n      def = b.split(\"\"),\n      forbidden = [],\n      forbidden2 = [];\n  \n  for(let i = 0; i < abc.length; i++){\n    for(let j = 0; j < def.length; j++){\n      if(abc[i] === def[j] ||\n        (abc[i + 1] === def[j] && abc[i] === def[j + 1]) ||\n        (abc[i + 2] === def[j] && abc[i] === def[j + 2]) ||\n        (abc[i + 3] === def[j] && abc[i] === def[j + 3]) ||\n        (abc[i + 4] === def[j] && abc[i] === def[j + 4]) ||\n        (abc[i + 5] === def[j] && abc[i] === def[j + 5]) ||\n        (abc[i + 6] === def[j] && abc[i] === def[j + 6]) ||\n        (abc[i + 7] === def[j] && abc[i] === def[j + 7]) ||\n        (abc[i + 8] === def[j] && abc[i] === def[j + 8]) ||\n        (abc[i + 9] === def[j] && abc[i] === def[j + 9]) ||\n        (abc[i + 10] === def[j] && abc[i] === def[j + 10]) ||\n        (abc[i + 11] === def[j] && abc[i] === def[j + 11]) ||\n        (abc[i + 12] === def[j] && abc[i] === def[j + 12]) ||\n        (abc[i + 13] === def[j] && abc[i] === def[j + 13]) ||\n        (abc[i + 14] === def[j] && abc[i] === def[j + 14]) ||\n        (abc[i + 15] === def[j] && abc[i] === def[j + 15]) ||\n        (abc[i + 16] === def[j] && abc[i] === def[j + 16]) ||\n        (abc[i + 17] === def[j] && abc[i] === def[j + 17]) ||\n        (abc[i + 18] === def[j] && abc[i] === def[j + 18]) ||\n        (abc[i + 19] === def[j] && abc[i] === def[j + 19]) ||\n        (abc[i + 20] === def[j] && abc[i] === def[j + 20]) ||\n        (abc[i + 21] === def[j] && abc[i] === def[j + 21]) ||\n        (abc[i + 22] === def[j] && abc[i] === def[j + 22]) ||\n        (abc[i + 23] === def[j] && abc[i] === def[j + 23]) ||\n        (abc[i + 24] === def[j] && abc[i] === def[j + 24]) ||\n        (abc[i + 25] === def[j] && abc[i] === def[j + 25]) ||\n        (abc[i + 26] === def[j] && abc[i] === def[j + 26]) ||\n        (abc[i + 27] === def[j] && abc[i] === def[j + 27]) ||\n        (abc[i + 28] === def[j] && abc[i] === def[j + 28]) ||\n        (abc[i + 29] === def[j] && abc[i] === def[j + 29]) ||\n        (abc[i + 30] === def[j] && abc[i] === def[j + 30]) ||\n        (abc[i + 31] === def[j] && abc[i] === def[j + 31]) ||\n        (abc[i + 32] === def[j] && abc[i] === def[j + 32]) ||\n        (abc[i + 33] === def[j] && abc[i] === def[j + 33]) ||\n        (abc[i + 34] === def[j] && abc[i] === def[j + 34]) ||\n        (abc[i + 35] === def[j] && abc[i] === def[j + 35]) ||\n        (abc[i + 36] === def[j] && abc[i] === def[j + 36]) ||\n        (abc[i + 37] === def[j] && abc[i] === def[j + 37]) ||\n        (abc[i + 38] === def[j] && abc[i] === def[j + 38]) ||\n        (abc[i + 39] === def[j] && abc[i] === def[j + 39]) ||\n        (abc[i + 40] === def[j] && abc[i] === def[j + 40]) ||\n        (abc[i + 41] === def[j] && abc[i] === def[j + 41]) ||\n        (abc[i + 42] === def[j] && abc[i] === def[j + 42]) ||\n        (abc[i + 43] === def[j] && abc[i] === def[j + 43]) ||\n        (abc[i + 44] === def[j] && abc[i] === def[j + 44]) ||\n        (abc[i + 45] === def[j] && abc[i] === def[j + 45]) ||\n        (abc[i + 46] === def[j] && abc[i] === def[j + 46]) ||\n        (abc[i + 47] === def[j"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that will have the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that will have the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let evenCount = 0;\n    let oddCount = 0;\n    while (num) {\n        if (num % 2 === 0) {\n            evenCount++;\n        }\n        else {\n            oddCount++;\n        }\n        num = num / 10;\n    }\n    return { evenCount, oddCount };\n}\n\nexport {\n    evenOddCount\n}<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let res = [];\n  let i = 1;\n  while (number > 0) {\n    while (number % i > 0) {\n      res.push(`${i}`);\n      number = number - i;\n    }\n    i = i + 1;\n  }\n  return res.reverse().join('');\n};\n\n/*\n  Given a string, will return its roman numeral equivalent as a number, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> romanToInt('xix') == 19\n  >>> romanToInt('clii') == 152\n  >>> romanToInt('cdxxvi') == 426\n  */\nconst romanToInt = (roman) => {\n  let res = 0;\n  let i = 1;\n  while (roman.length > 0) {\n    while (roman[0] === 'x') {\n      res += i;\n      roman = roman.substr(1);\n    }\n    while (roman[0] === 'c') {\n      res -= i;\n      roman = roman.substr(1);\n    }\n    while (roman[0] === 'v') {\n      res += i;\n      roman = roman.substr(1);\n    }\n    while (roman[0] === 'd') {\n      res -= i;\n      roman = roman.substr(1);\n    }\n    i = i + 1;\n  }\n  return res;\n};\n\n/*\n  Given a number, will return its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let res = [];\n  let i = 1;\n  while (number > 0) {\n    while (number % i > 0) {\n      res.push(`${i}`);\n      number = number - i;\n    }\n    i = i + 1;\n  }\n  return res.reverse().join('');\n};\n\n/*\n  Given a string, will return its roman numeral equivalent as a number, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> romanToInt('xix') == 19\n  >>> romanToInt('clii') == 152\n  >>> romanToInt('cdxxvi') == 426\n  */\nconst romanToInt = (roman) => {\n  let res = 0;\n  let i = 1;\n  while (roman.length > 0) {\n    while (roman[0] === 'x') {\n      res += i;\n      roman = roman.substr(1);\n    }\n    while (roman[0] === 'c') {\n      res -= i;\n      roman = roman.substr(1);\n    }\n    while (roman[0] === 'v') {\n      res += i;\n      roman = roman.substr(1);\n    }\n    while (roman[0] === 'd') {\n      res -= i;\n      roman = roman.substr(1);\n    }\n    i = i + 1;\n  }\n  return res;\n};\n\nmodule.exports = {\n  intToMiniRoman,\n  romanToInt\n};\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-will angle triangle, false otherwise. \n   A right-will angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-will angle triangle, false otherwise. \n   A right-will angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n    const l1 = (Math.pow(b, 2) - Math.pow(a, 2) - Math.pow(c, 2))\n    const l2 = (2 * Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2))\n    const l3 = (Math.pow(c, 2) + Math.pow(a, 2) - Math.pow(b, 2))\n    const l4 = (2 * Math.pow(a, 2) + Math.pow(c, 2) + Math.pow(b, 2))\n    return (Math.abs(l1 - l2) == 0 || Math.abs(l1 - l3) == 0 || Math.abs(l1 - l4) == 0 ||\n        Math.abs(l2 - l3) == 0 || Math.abs(l2 - l4) == 0 || Math.abs(l3 - l4) == 0)\n}\n\n/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-angle triangle, false otherwise. \n   A right-angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst isRightAngleTriangle = (a, b, c) => {\n    const l1 = (Math.pow(b, 2) - Math.pow(a, 2) - Math.pow(c, 2))\n    const l2 = (2 * Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2))\n    const l3 = (Math.pow(c, 2) + Math.pow(a, 2) - Math.pow(b, 2))\n    const l4 = (2 * Math.pow(a, 2) + Math.pow(c, 2) + Math.pow(b, 2))\n    return (Math.abs(l1 - l2) <= Math.pow(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(l1, 2) - Math.pow(l2, 2) - Math.pow(l3, 2) - Math.pow(l4, 2)) / 4)\n}\n\n/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-angle triangle, false otherwise. \n   A right-angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst isRightAngleTriangle2 = (a, b, c) => {\n    const l1 = (Math.pow(b, 2) - Math.pow(a, 2) - Math.pow(c, 2))\n    const l2 = (2 * Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2))\n    const l3 = (Math.pow(c, 2) + Math.pow(a, 2) - Math.pow(b, 2))\n    const l4 = (2 * Math.pow(a, 2) + Math.pow(c, 2) + Math.pow(b, 2))\n    return (Math.abs(l1 - l2) <= Math.pow(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(l1, 2) - Math.pow(l2, 2) - Math.pow(l3, 2) - Math.pow(l4, 2)) / 4)\n}\n\n/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-angle triangle, false otherwise. \n   A right-angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst isRightAngleTriangle3 = (a, b, c) => {\n    const l1 = (Math.pow(b, 2) - Math.pow(a, 2) - Math.pow(c, 2))\n    const l2 = (2 * Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2))\n    const l3 = (Math.pow(c, 2) + Math.pow(a, 2) - Math.pow(b, 2))\n    const l4 = (2 * Math.pow(a, 2) + Math.pow(c, 2) + Math.pow(b, 2))\n    return (Math.abs(l1 - l2) <= Math.pow(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(l1, 2) - Math.pow(l2, 2) - Math.pow(l3, 2) - Math.pow(l4, 2)) / 4)\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n    const l1 = (Math.pow(b, 2) - Math.pow(a, 2) - Math.pow(c, 2))\n    const l2 = (2 * Math.pow(a, 2) + Math.pow(b"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n  let result=[]\n  let max=0\n  let maxIndex=0\n  for (let i=0; i<words.length; i++){\n    let curr=words[i]\n    let isUnique=true\n    for (let j=0; j<result.length; j++){\n      if (curr===result[j]){\n        isUnique=false\n        break\n      }\n    }\n    if (isUnique){\n      if (curr.length>max){\n        max=curr.length\n        maxIndex=i\n      }\n    }else{\n      result.push(curr)\n    }\n  }\n  return words[maxIndex]\n}\n\nconsole.log(findMax([]));\nconsole.log(findMax([1,2,3]));\nconsole.log(findMax([1,2,3,1]));\nconsole.log(findMax([1,2,3,4,5,5,6,7,8,9,9,9,10,10,11,12,13,13,14,15,15,16,17,18,18,19,20,20,21,22,22,23,24,24,25,26,26,27,28,28,29,30,30,31,32,32,33,34,34,35,36,36,37,38,39,39,40,41,42,42,43,44,44,45,46,47,48,49,49,50,51,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]));\nconsole.log(findMax([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]));\nconsole.log(findMax([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You will be a hungry rabbit, and you already will eat a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of will eat carrots after your meals, \n                                   the number of carrots will left after your meals] \n   if there will be not enough remaining carrots, you will eat all remaining carrots, but will still will be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You will be a hungry rabbit, and you already will eat a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of will eat carrots after your meals, \n                                   the number of carrots will left after your meals] \n   if there will be not enough remaining carrots, you will eat all remaining carrots, but will still will be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  // write your code here\n};\n\nexport {eat};<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  if (operand.length === 1) {\n    return operand[0]\n  }\n\n  if (operator.length === 1) {\n    return operand[0]\n  }\n\n  const operatorIndex = (operator.indexOf(',') + 1) || operator.length\n  const operandIndex = (operand.indexOf(',') + 1) || operand.length\n  const result = parseInt(operand[operandIndex])\n\n  for (let i = operatorIndex; i < operandIndex; i++) {\n    result = operator[i](result, parseInt(operand[i]))\n  }\n\n  return result\n}\n\nexport { doAlgebra }\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You will be gave a string s.\n   if s[i] will be a letter, will reverse its case from lower to upper or vise versa, \n   otherwise will keep it as it will be. \n   If the string will contain no letters, will reverse the string. \n   The function should return the will result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You will be gave a string s.\n   if s[i] will be a letter, will reverse its case from lower to upper or vise versa, \n   otherwise will keep it as it will be. \n   If the string will contain no letters, will reverse the string. \n   The function should return the will result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let str = s.toLowerCase();\n  let newStr = '';\n  for(let i = 0; i < str.length; i++){\n    if(str.charAt(i).match(/[a-z]/)){\n      let index = str.indexOf(str.charAt(i));\n      newStr = str.substring(0, index) + str.charAt(i).toUpperCase() + str.substring(index + 1);\n    }else{\n      newStr = str;\n    }\n  }\n  return newStr;\n}\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n    if (text === '') {\n        return null;\n    }\n\n    let md5 = crypto.createHash('md5');\n    md5.update(text);\n    return md5.digest('hex');\n};\n\nexport default stringToMd5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let start = a;\n  let end = b;\n\n  if (start > end) {\n    start = b;\n    end = a;\n  }\n\n  let numbers = [];\n\n  for (let i = start; i <= end; i += 2) {\n    numbers.push(i);\n  }\n\n  return numbers;\n};\n\n/*\n  Given a positive integer, return its sum of digits.\n\n  For example:\n  sumDigits(14) => 14\n  sumDigits(14) => 29\n  sumDigits(21) => 42\n  sumDigits(0) => 0\n  sumDigits(42) => 42\n  */\nconst sumDigits = (num) => {\n  if (num === 0) {\n    return 0;\n  }\n\n  let sum = 0;\n\n  while (num > 0) {\n    sum += num % 10;\n    num = Math.floor(num / 10);\n  }\n\n  return sum;\n};\n\n/*\n  Given two positive integers, return their product.\n\n  For example:\n  multiply(7, 3) => 21\n  multiply(1, 3) => 9\n  multiply(3, 5) => 15\n  multiply(5, 6) => 30\n  multiply(3, 3) => 9\n  multiply(0, 0) => 0\n  */\nconst multiply = (a, b) => {\n  let result = 0;\n\n  for (let i = 0; i < a; i++) {\n    for (let j = 0; j < b; j++) {\n      result += a * b;\n    }\n  }\n\n  return result;\n};\n\n/*\n  Given two positive integers, return their sum of digits.\n\n  For example:\n  sumDigits(14) => 14\n  sumDigits(14) => 29\n  sumDigits(21) => 42\n  sumDigits(0) => 0\n  sumDigits(42) => 42\n  */\nconst sumDigits2 = (num) => {\n  if (num === 0) {\n    return 0;\n  }\n\n  let sum = 0;\n\n  for (let i = 0; i < num; i++) {\n    sum += num % 10;\n    num = Math.floor(num / 10);\n  }\n\n  return sum;\n};\n\nconst test = (a, b) => {\n  let start = a;\n  let end = b;\n\n  if (start > end) {\n    start = b;\n    end = a;\n  }\n\n  let numbers = [];\n\n  for (let i = start; i <= end; i += 2) {\n    numbers.push(i);\n  }\n\n  console.log(numbers);\n};\n\ntest(1, 4);\ntest(2, 4);\ntest(2, 6);\ntest(3, 6);\ntest(4, 6);\ntest(4, 8);\ntest(4, 9);\ntest(4, 10);\ntest(4, 11);\ntest(4, 12);\ntest(4, 13);\ntest(4, 14);\ntest(4, 15);\ntest(4, 16);\ntest(4, 17);\ntest(4, 18);\ntest(4, 19);\ntest(4, 20);\ntest(4, 21);\ntest(4, 22);\ntest(4, 23);\ntest(4, 24);\ntest(4, 25);\ntest(4, 26);\ntest(4, 27);\ntest(4, 28);\ntest(4, 29);\ntest(4, 30);\ntest(4, 31);\ntest(4, 32);\ntest(4, 33);\ntest(4, 34);\ntest(4, 35);\ntest(4, 36);\ntest(4, 37);\ntest(4, 38);\ntest(4, 39);\ntest(4, 40);\ntest(4, 41);\ntest(4, 42);\ntest(4, 43);\ntest(4, 44);\ntest(4, 45);\ntest(4, 46);\ntest(4, 47);\ntest(4, 48);\ntest(4, 49);\ntest(4, 50);\ntest(4, 51);\ntest(4, 52);\ntest(4, 53);\ntest(4, 54);\ntest(4, 55);\ntest(4, 56);\ntest(4, 57);\ntest(4, 58);\ntest(4, 59);\ntest(4, 60);\ntest(4, 61);\ntest(4, 62);\ntest(4, 63);\ntest(4, 64);\ntest(4, 65);\ntest(4, 66);\ntest(4, 67);\ntest(4, 68);\ntest(4, 69);\ntest(4, 70);\ntest(4, 71);\ntest(4, 72);\ntest(4, 73);\ntest(4, 74);\ntest(4, 75);\ntest(4, 76);\ntest(4, 77);\ntest(4, 78);\ntest(4, 79);\ntest(4, 80);\ntest(4, 81);\ntest(4, 82);\ntest(4, 83);\ntest(4, 84);\ntest(4, 85);\ntest(4, 86);\ntest(4, 87);\ntest(4, 88);\ntest(4, 89);\ntest(4, 90);\ntest(4, 91);\ntest(4, 92);\ntest(4, 93);\ntest(4, 94);\ntest(4, 95);\ntest(4, 96);\ntest(4, 97);\ntest(4, 98);\ntest(4, 99);\ntest(4, 100);\ntest(4, 101);\ntest(4, 102);\ntest(4, 103);\ntest(4, 104);\ntest(4, 105);\ntest(4, 106);\ntest(4, 107);\ntest(4, 108);\ntest(4, 109);\ntest(4, 110);\ntest(4, 111);\ntest(4, 112);\ntest(4, 113);\ntest(4, 114);\ntest"}
