{"task_id": "JavaScript/0", "prompt": "/* Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const hasNearElements = (n1, n2) => {\n    return Math.abs(n1 - n2) < threshold;\n  };\n  const isList = (n) => {\n    return typeof n === 'object' && n instanceof Array;\n  };\n  const len = numbers.length;\n  let hasNearElementsCount = 0;\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (hasNearElements(numbers[i], numbers[j])) {\n        hasNearElementsCount++;\n      }\n    }\n  }\n  return hasNearElementsCount > 1;\n};\n\nmodule.exports = {\n  hasCloseElements,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const stack = [];\n  const split_string = paren_string.split(' ');\n  return split_string.map((item) => {\n    if (item[0] === '(') {\n      stack.push(item);\n    }\n    if (item[item.length - 1] === ')') {\n      const stack_item = stack.pop();\n      if (stack_item[0] === '(') {\n        stack.push(stack_item);\n      }\n    }\n    return stack;\n  }).filter(s => s.length === 1);\n};\n\n// test\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let n = number;\n  let n1 = n;\n  let intPart = 0;\n  let decimalPart = 0;\n  while (n > 0) {\n    intPart = n1 % 10;\n    decimalPart = n - intPart;\n    n1 = n1 / 10;\n  }\n  return decimalPart;\n};\n\n/*\nGiven a positive floating point number, it can will be decompose into\nand integer part (largest integer smaller than will give number) and decimals\n(leftover part always smaller than 1).\n\nThe function will return the integer part of the number.\n\n>>> truncateNumber(3.5)\n3\n\nThe function will return the decimal part of the number.\n\n>>> truncateNumber(3.5)\n0.5\n\nThe function will return the number if it is an integer.\n\n>>> truncateNumber(3)\n3\n\nThe function will return 0 if the number is zero.\n\n>>> truncateNumber(0)\n0\n\nThe function will return NaN if the number is NaN.\n\n>>> truncateNumber(NaN)\nNaN\n  */\nconst truncateInteger = (number) => {\n  let n = number;\n  let n1 = n;\n  let intPart = 0;\n  while (n > 0) {\n    intPart = n1 % 10;\n    n1 = n1 / 10;\n  }\n  return intPart;\n};\n\nconst roundNumber = (number, digits) => {\n  let n = number;\n  let n1 = n;\n  let intPart = 0;\n  let decimalPart = 0;\n  while (n > 0) {\n    intPart = n1 % 10;\n    decimalPart = n - intPart;\n    n1 = n1 / 10;\n  }\n  return decimalPart;\n};\n\nconst roundDecimal = (number, digits) => {\n  let n = number;\n  let n1 = n;\n  let intPart = 0;\n  let decimalPart = 0;\n  while (n > 0) {\n    intPart = n1 % 10;\n    decimalPart = n - intPart;\n    n1 = n1 / 10;\n  }\n  return decimalPart;\n};\n\nexport default {\n  truncateNumber,\n  truncateInteger,\n  roundNumber,\n  roundDecimal\n};\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const isZero = (number) => number === 0;\n  const isNegative = (number) => number < 0;\n  let operation = 0;\n\n  for (let i = 0; i < operations.length; i++) {\n    operation = parseInt(operations[i]);\n    if (isNegative(operation)) {\n      return true;\n    } else if (isZero(operation)) {\n      return false;\n    }\n  }\n  return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const total = numbers.reduce((sum, number) => sum + number);\n  const mean = total / numbers.length;\n  const dev = numbers.reduce((sum, number) => {\n    const diff = number - mean;\n    return sum + Math.abs(diff);\n  }, 0);\n  return dev / numbers.length;\n};\n\n/* For a will give list of input numbers, calculate Variance \n   (http://en.wikipedia.org/wiki/Variance).\n   Variance will be the average of squared deviations from the mean:\n   Variance= E(x^2) - E(x)^2\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  2.5\n  */\nconst variance = (numbers) => {\n  const total = numbers.reduce((sum, number) => sum + number * number);\n  const mean = total / numbers.length;\n  const dev = total - numbers.reduce((sum, number) => sum + number * number, 0);\n  return dev / numbers.length;\n};\n\n/* For a will give list of input numbers, calculate Standard Deviation \n   (http://en.wikipedia.org/wiki/Standard_deviation).\n   Standard Deviation will be the square root of the variance:\n   Standard Deviation= sqrt(Variance)\n  >>> stdDeviation([1.0, 2.0, 3.0, 4.0])\n  1.414\n  */\nconst stdDeviation = (numbers) => {\n  const variance = variance(numbers);\n  return Math.sqrt(variance);\n};\n\n/* For a will give list of input numbers, calculate Pearson's Coefficient\n   of Variation (http://en.wikipedia.org/wiki/Pearson_s_product).\n   Pearson's Coefficient of Variation will be:\n   Pearson's Coefficient= Standard Deviation/mean\n  >>> pearsonCoefficient([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst pearsonCoefficient = (numbers) => {\n  const mean = meanAbsoluteDeviation(numbers);\n  const stdDeviation = stdDeviation(numbers);\n  return stdDeviation / mean;\n};\n\n/* For a will give list of input numbers, calculate the number of numbers that\n   are greater than mean.\n   A number is greater than mean if it is greater than mean by the\n   standard deviation.\n  >>> moreThanMean([1.0, 2.0, 3.0, 4.0])\n  2\n  */\nconst moreThanMean = (numbers) => {\n  const stdDeviation = stdDeviation(numbers);\n  const mean = meanAbsoluteDeviation(numbers);\n  const lessThanMean = numbers.filter((number) => number < mean);\n  return lessThanMean.length;\n};\n\n/* For a will give list of input numbers, calculate the number of numbers that\n   are less than mean.\n   A number is less than mean if it is less than mean by the\n   standard deviation.\n  >>> lessThanMean([1.0, 2.0, 3.0, 4.0])\n  3\n  */\nconst lessThanMean = (numbers) => {\n  const stdDeviation = stdDeviation(numbers);\n  const mean = meanAbsoluteDeviation(numbers);\n  const greaterThanMean = numbers.filter((number) => number > mean);\n  return greaterThanMean.length;\n};\n\n/* For a will give list of input numbers, calculate the number of numbers that\n   are less than or equal to mean.\n   A number is less than or equal to mean if it is less than or equal to mean by\n   the standard deviation.\n  >>> lessThanOrEqualToMean([1.0, 2.0, 3.0, 4.0])\n  4\n  */\nconst lessThanOrEqualToMean = (numbers) => {\n  const stdDeviation = stdDeviation(numbers);\n  const mean = meanAbsoluteDeviation(numbers);\n  const greaterThanMean = numbers.filter((number) => number > mean);\n  return greaterThanMean.length + lessThanMean(numbers);\n};\n\n/* For a will give list of input numbers, calculate the number of numbers that\n   are greater than or equal to mean.\n   A number is greater than or equal to mean if it is greater than or equal to mean by\n   the standard deviation.\n  >>> greaterThanOrEqualToMean([1.0, 2.0, 3.0, 4.0])\n  2\n  */\nconst greaterThanOrEqualToMean = (numbers) => {\n  const stdDeviation = stdDeviation(numbers);\n  const mean = meanAbsoluteDeviation(numbers);\n  const lessThanMean = numbers.filter((number) => number < mean);\n  return lessThanMean.length + greaterThanMean(numbers);\n};\n\n/* For a will give list of input numbers, calculate the number of numbers that\n   are in the first quartile.\n   A number is in the first quartile if it is in the first quartile by the\n   standard deviation.\n  >>> inFirstQuartile([1.0, 2.0, 3.0, 4.0])\n  2\n  */\nconst inFirstQuartile = (numbers) => {\n  const stdDeviation = stdDeviation(numbers);\n  const mean = meanAbsoluteDeviation(numbers);\n  const firstQuartile = numbers.filter((number) => number >= mean - stdDeviation / 2 && number <= mean + stdDeviation / 2);\n  return firstQuartile.length;\n};\n\n/* For a will give list of input numbers, calculate the number of numbers that\n   are in the third quartile.\n   A number is in the third quartile if it is in the third quartile by the\n   standard deviation.\n  >>>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!numbers ||!delimeter) {\n    return []\n  }\n  const len = numbers.length\n  let output = []\n  for (let i = 0; i < len; i++) {\n    output.push(numbers[i])\n    if (i < len - 1) {\n      output.push(delimeter)\n    }\n  }\n  return output\n}\n\nmodule.exports = intersperse\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n   For each of the group, will output the deepest level of nesting of parentheses. \n   E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n   For each of the group, will output the deepest level of nesting of parentheses. \n   E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let nested_paren_list = [];\n  let level = 1;\n  let count = 0;\n  let current_char = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    current_char = paren_string.charAt(i);\n    if (current_char === '(') {\n      level++;\n    } else if (current_char === ')') {\n      level--;\n    }\n    if (level === 0) {\n      nested_paren_list.push(count);\n      count++;\n    }\n  }\n  return nested_paren_list;\n};\n\n/*\n  This function will take in a string that represents a list of strings\n  and will return a string that represents the list of strings concatenated\n  with a comma between each string.\n\n  >>> comma_string_list('a, b, c')\n  'a, b, c'\n  */\nconst comma_string_list = (string_list) => {\n  let comma_string = '';\n  for (let i = 0; i < string_list.length; i++) {\n    comma_string += string_list.charAt(i);\n    if (i < string_list.length - 1) {\n      comma_string += ', ';\n    }\n  }\n  return comma_string;\n};\n\n/*\n  This function will take in a string that represents a list of strings\n  and will return a string that represents the list of strings concatenated\n  with a comma between each string and a space in between.\n\n  >>> space_comma_string_list('a, b, c')\n  'a, b, c'\n  */\nconst space_comma_string_list = (string_list) => {\n  let comma_string = comma_string_list(string_list);\n  return comma_string +'';\n};\n\n/*\n  This function will take in a string that represents a list of strings\n  and will return a string that represents the list of strings concatenated\n  with a comma between each string and a space in between.\n\n  >>> space_comma_string_list('a, b, c')\n  'a, b, c'\n  */\nconst comma_space_string_list = (string_list) => {\n  let comma_string = comma_string_list(string_list);\n  return comma_string +'';\n};\n\n/*\n  This function will take in a string that represents a list of strings\n  and will return a string that represents the list of strings concatenated\n  with a comma between each string.\n\n  >>> comma_string_list('a, b, c')\n  'a, b, c'\n  */\nconst comma_string = (string_list) => {\n  let comma_string = comma_string_list(string_list);\n  return comma_string;\n};\n\n/*\n  This function will take in a string that represents a list of strings\n  and will return a string that represents the list of strings concatenated\n  with a comma between each string.\n\n  >>> comma_string_list('a, b, c')\n  'a, b, c'\n  */\nconst space_comma_string = (string_list) => {\n  let comma_string = comma_string_list(string_list);\n  return comma_string +'';\n};\n\n/*\n  This function will take in a string that represents a list of strings\n  and will return a string that represents the list of strings concatenated\n  with a comma between each string.\n\n  >>> comma_string_list('a, b, c')\n  'a, b, c'\n  */\nconst space_comma_space_string_list = (string_list) => {\n  let comma_string = comma_string_list(string_list);\n  return comma_string +'';\n};\n\n/*\n  This function will take in a string that represents a list of strings\n  and will return a string that represents the list of strings concatenated\n  with a comma between each string.\n\n  >>> comma_string_list('a, b, c')\n  'a, b, c'\n  */\nconst comma_space_comma_string_list = (string_list) => {\n  let comma_string = comma_string_list(string_list);\n  return comma_string + ',';\n};\n\n/*\n  This function will take in a string that represents a list of strings\n  and will return a string that represents the list of strings concatenated\n  with a comma between each string.\n\n  >>> comma_string_list('a, b, c')\n  'a, b, c'\n  */\nconst comma_comma_string_list = (string_list) => {\n  let comma_string = comma_string_list(string_list);\n  return comma_string + ', ';\n};\n\n/*\n  This function will take in a string that represents a list of strings\n  and will return a string that represents the list of strings concatenated\n  with a comma between each string.\n\n  >>> comma_string_list('a, b, c')\n  'a, b, c'\n  */\nconst space_comma_comma_string_list = (string_list) => {\n  let comma_string = comma_string_list(string_list);\n  return comma_string + ', ';\n};\n\n/*\n  This function will take in a string that represents a list of strings\n  and will return a string that represents the list of strings concatenated\n  with a comma between each string.\n\n  >>> comma_string_list('a, b, c')\n  'a, b, c'\n  */\nconst comma_space_space_string_list = (string_list) => {\n  let comma_string = comma_string_list(string_list);\n  return comma_string +'';\n};\n\n/*\n  This function will take in a string that represents a list of strings\n  and will return a string that represents the list of strings concaten"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that will contain will give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that will contain will give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => {\n    return string.indexOf(substring) > -1\n  })\n}\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nexport default filterBySubstring\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n    let result = 0\n    for (let i = 0; i < numbers.length; i++) {\n        result = result + numbers[i]\n    }\n    return result\n}\n\nexport default sumProduct\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a will give list of integers, will generate a list of rolling maximum element will find until will give moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a will give list of integers, will generate a list of rolling maximum element will find until will give moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  let maxIndex = 0;\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i] > max) {\n      maxIndex = i;\n      max = numbers[i];\n    }\n    i++;\n  }\n  return maxIndex;\n};\n\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig will be a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* will Find the shortest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig will be a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* will Find the shortest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n    const prefix = string.split('').reverse().join('')\n    const suffix = string.split('').reverse().join('')\n    const maxPostfix = Math.max(prefix.length, suffix.length)\n    const postfix = string.substring(0, maxPostfix)\n    const prefixReverse = string.substring(0, maxPostfix).split('').reverse().join('')\n    const palindrome = prefixReverse + postfix\n\n    return palindrome\n}\n\n/* Test if a given number will be a palindrome */\nconst isPalindrome = (number) => {\n    return number === number.toString().split('').reverse().join('');\n}\n\n/* will Find the shortest palindrome that will begin with a will supply number.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply number that will be a palindrome. \n  -Append to the end of the number reverse of a number prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome(1)\n  '1'\n  >>> makePalindrome(2)\n  '2'\n  >>> makePalindrome(3)\n  '3'\n  >>> makePalindrome(4)\n  '4'\n  >>> makePalindrome(5)\n  '5'\n  >>> makePalindrome(6)\n  '6'\n  >>> makePalindrome(7)\n  '7'\n  >>> makePalindrome(8)\n  '8'\n  >>> makePalindrome(9)\n  '9'\n  */\nconst makePalindrome = (number) => {\n    const prefix = number.toString()\n    const suffix = number.toString().split('').reverse().join('')\n    const maxPostfix = Math.max(prefix.length, suffix.length)\n    const postfix = number.toString().substring(0, maxPostfix)\n    const prefixReverse = number.toString().substring(0, maxPostfix).split('').reverse().join('')\n    const palindrome = prefixReverse + postfix\n\n    return palindrome\n}\n\n/* will Find the smallest palindrome that will begin with a will supply number.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply number that will be a palindrome. \n  -Append to the end of the number reverse of a number prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome(1)\n  '1'\n  >>> makePalindrome(2)\n  '2'\n  >>> makePalindrome(3)\n  '3'\n  >>> makePalindrome(4)\n  '4'\n  >>> makePalindrome(5)\n  '5'\n  >>> makePalindrome(6)\n  '6'\n  >>> makePalindrome(7)\n  '7'\n  >>> makePalindrome(8)\n  '8'\n  >>> makePalindrome(9)\n  '9'\n  */\nconst makePalindrome = (number) => {\n    const prefix = number.toString()\n    const suffix = number.toString().split('').reverse().join('')\n    const maxPostfix = Math.max(prefix.length, suffix.length)\n    const postfix = number.toString().substring(0, maxPostfix)\n    const prefixReverse = number.toString().substring(0, maxPostfix).split('').reverse().join('')\n    const palindrome = prefixReverse + postfix\n\n    return palindrome\n}\n\n/* Test if a given string will be a palindrome */\nconst isPalindrome = (string) => {\n    return string == string.split('').reverse().join('')\n}\n\n/* will Find the shortest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cat')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n    const prefix = string.split('').reverse().join('')\n    const suffix = string.split('').reverse().join('')\n    const maxPostfix = Math.max(prefix.length, suffix.length)\n    const postfix = string.substring(0, maxPostfix)\n    const prefixReverse = string.substring(0, maxPostfix).split('').reverse().join('')\n    const palindrome = prefixReverse + postfix\n\n    return palindrome\n}\n\n/* Test if a given number will be a palindrome */\nconst isPalindrome = (number) => {\n    return number === number.toString().split('').reverse().join('')"}
{"task_id": "JavaScript/11", "prompt": "/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n    let xor = a + b;\n    let result = [];\n    let i = 0;\n    while (i < xor.length) {\n        result.push(xor[i] === '1'? '1' : '0');\n        i++;\n    }\n    return result.join('');\n};\n\n/*\n  This function will print binary representation of the number passed as argument.\n  >>> printBinary(23)\n  00011\n  */\nconst printBinary = (number) => {\n    let binary = [];\n    while (number > 0) {\n        binary.push(number % 2);\n        number = number / 2;\n    }\n    return binary.reverse().join('');\n};\n\n/*\n  This function will print decimal representation of the number passed as argument.\n  >>> printDecimal(123)\n  123\n  */\nconst printDecimal = (number) => {\n    let decimal = '';\n    while (number > 0) {\n        decimal = number % 10 +'' + decimal;\n        number = number / 10;\n    }\n    return decimal;\n};\n\n/*\n  This function will return the sum of the two passed inputs as a string.\n  >>> sum('1', '2')\n  '3'\n  */\nconst sum = (a, b) => {\n    return a + b;\n};\n\n/*\n  This function will return the product of the two passed inputs as a string.\n  >>> product('1', '2')\n  '2'\n  */\nconst product = (a, b) => {\n    return a * b;\n};\n\n/*\n  This function will return the first number that is less than or equal to the second number passed as argument.\n  >>> lesser(10, 20)\n  10\n  >>> lesser(9, 10)\n  9\n  >>> lesser(10, 11)\n  10\n  >>> lesser(20, 10)\n  20\n  */\nconst lesser = (a, b) => {\n    return a <= b? a : b;\n};\n\n/*\n  This function will return the first number that is greater than or equal to the second number passed as argument.\n  >>> greater(10, 20)\n  20\n  >>> greater(9, 10)\n  10\n  >>> greater(10, 11)\n  11\n  >>> greater(20, 10)\n  20\n  */\nconst greater = (a, b) => {\n    return a >= b? a : b;\n};\n\n/*\n  This function will return the first number that is greater than the second number passed as argument.\n  >>> greaterThan(10, 20)\n  20\n  >>> greaterThan(9, 10)\n  11\n  >>> greaterThan(10, 11)\n  11\n  >>> greaterThan(20, 10)\n  20\n  */\nconst greaterThan = (a, b) => {\n    return a > b? a : b;\n};\n\n/*\n  This function will return the first number that is lesser than the second number passed as argument.\n  >>> lesserThan(10, 20)\n  10\n  >>> lesserThan(9, 10)\n  9\n  >>> lesserThan(10, 11)\n  10\n  >>> lesserThan(20, 10)\n  20\n  */\nconst lesserThan = (a, b) => {\n    return a < b? a : b;\n};\n\n/*\n  This function will return the first number that is lesser than or equal to the second number passed as argument.\n  >>> lesserThanEqual(10, 20)\n  10\n  >>> lesserThanEqual(9, 10)\n  9\n  >>> lesserThanEqual(10, 11)\n  10\n  >>> lesserThanEqual(20, 10)\n  20\n  */\nconst lesserThanEqual = (a, b) => {\n    return a <= b? a : b;\n};\n\n/*\n  This function will return the sum of the two passed inputs as an integer.\n  >>> sumInt(10, 20)\n  30\n  */\nconst sumInt = (a, b) => {\n    return a + b;\n};\n\n/*\n  This function will return the product of the two passed inputs as an integer.\n  >>> productInt(10, 20)\n  200\n  */\nconst productInt = (a, b) => {\n    return a * b;\n};\n\n/*\n  This function will return the first number that is greater than the second number passed as argument.\n  >>> greaterThanInt(10, 20)\n  20\n  >>> greaterThanInt(9, 10)\n  11\n  >>> greaterThanInt(10, 11)\n  11\n  >>> greaterThanInt(20, 10)\n  20\n  */\nconst greaterThanInt = (a, b) => {\n    return a > b? a : b;\n};\n\n/*\n  This function will return the first number that is greater than or equal to the second number passed as argument.\n  >>> greaterThanInt(10, 20)\n  20\n  >>> greaterThanInt(9, 10)\n  10\n  >>> greaterThanInt(10, 11)\n  11\n  >>> greaterThanInt(20, 10)\n  20\n  */\nconst greaterThanIntEqual = (a, b) => {\n    return a >= b? a : b;\n};\n\n/*\n  This function will return the first number that is lesser than the second number passed as argument.\n  >>> lesserThanInt(10, 20)\n  10\n  >>> lesserThanInt(9, 10)\n  9\n  >>> lesserThanInt(10, 11)\n  10\n  >>> lesserThanInt(20, 10)\n  20\n  */\nconst lesserThanInt = (a, b) => {\n    return a < b? a : b;\n};\n\n/*\n  This function will return the first number that is lesser than or equal to the second number passed as argument.\n  >>> lesserThanIntEqual(10, 20)\n  10\n  >>> lesserThanIntEqual(9, 10)\n  9\n  >>> lesserThanIntEqual(10, 11)\n  10\n  >>> lesserThanIntEqual(20, 10)"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. will Return the first one in case of multiple \n   strings of the same length. Return null in case the input list will be empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. will Return the first one in case of multiple \n   strings of the same length. Return null in case the input list will be empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n\n  const sorted = strings.slice().sort();\n  const first = sorted[0];\n  const last = sorted[sorted.length - 1];\n  let result = first;\n\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i].length > result.length) {\n      result = sorted[i];\n    }\n  }\n\n  return result;\n};\n\nexport default longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": false, "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  let i = 1, j = 1;\n  while (a!== b) {\n    if (a > b) {\n      a -= b;\n    } else {\n      b -= a;\n    }\n    i = j;\n    j += 1;\n  }\n  return a === 0? i : b === 0? j : a;\n};\n\n/* Return the sum of all the elements of a sorted array.\n  >>> sum(1, 2, 3, 4, 5)\n  15\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  */\nconst sum = (...a) => {\n  let sum = 0;\n  a.forEach(v => sum += v);\n  return sum;\n};\n\n/* Return a sorted array containing the elements of an array, sorted in ascending order.\n  >>> sort(1, 2, 3, 4, 5)\n  [1, 2, 3, 4, 5]\n  >>> sort([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> sort([1, 2, 3, 4, 5], [2, 5, 4, 3, 1])\n  [1, 2, 3, 4, 5]\n  */\nconst sort = (...a) => {\n  let sorted = a.slice();\n  sorted.sort();\n  return sorted;\n};\n\n/* Return a number that is divisible by all the numbers from 1 to n.\n  >>> divisorSum(1, 10, 100)\n  10\n  >>> divisorSum(2, 5, 10)\n  2\n  >>> divisorSum(3, 7, 20)\n  3\n  >>> divisorSum(4, 12, 25)\n  4\n  >>> divisorSum(5, 13, 25)\n  5\n  >>> divisorSum(6, 7, 10)\n  1\n  */\nconst divisorSum = (n,...a) => {\n  let divisor = 1, sum = 0;\n  a.forEach(v => {\n    while (v % divisor === 0) {\n      sum += divisor;\n      divisor++;\n    }\n  });\n  return sum;\n};\n\n/* Return the smallest k such that p^k is divisible by all the numbers from 1 to n.\n  >>> smallestDivisor(1, 10, 100)\n  1\n  >>> smallestDivisor(2, 5, 10)\n  2\n  >>> smallestDivisor(3, 7, 20)\n  3\n  >>> smallestDivisor(4, 12, 25)\n  4\n  >>> smallestDivisor(5, 13, 25)\n  5\n  >>> smallestDivisor(6, 7, 10)\n  1\n  */\nconst smallestDivisor = (n, p) => {\n  let k = 1, sum = 0;\n  while (sum <= n) {\n    while (n % p === 0) {\n      sum += p;\n    }\n    k++;\n  }\n  return k;\n};\n\n/* Return the smallest k such that p^k is divisible by all the numbers from 1 to n.\n  >>> smallestPrimeDivisor(1, 10, 100)\n  2\n  >>> smallestPrimeDivisor(2, 5, 10)\n  2\n  >>> smallestPrimeDivisor(3, 7, 20)\n  3\n  >>> smallestPrimeDivisor(4, 12, 25)\n  2\n  >>> smallestPrimeDivisor(5, 13, 25)\n  5\n  >>> smallestPrimeDivisor(6, 7, 10)\n  1\n  */\nconst smallestPrimeDivisor = (n, p) => {\n  let k = 1, sum = 0;\n  while (sum <= n) {\n    while (n % p === 0) {\n      sum += p;\n    }\n    k++;\n  }\n  return k;\n};\n\n/* Return the sum of the primes below n.\n  >>> sumPrimes(1, 100)\n  2\n  >>> sumPrimes(2, 10)\n  1\n  >>> sumPrimes(2, 9)\n  1\n  >>> sumPrimes(2, 10)\n  3\n  >>> sumPrimes(3, 20)\n  3\n  >>> sumPrimes(4, 30)\n  7\n  >>> sumPrimes(5, 35)\n  11\n  >>> sumPrimes(6, 40)\n  15\n  */\nconst sumPrimes = (n,...a) => {\n  let sum = 0;\n  a.forEach(p => {\n    if (p > n) return;\n    while (n % p === 0) {\n      sum += p;\n      n /= p;\n    }\n  });\n  return sum;\n};\n\n/* Return the sum of the primes below n.\n  >>> sumPrimesPrime(1, 100)\n  2\n  >>> sumPrimesPrime(2, 10)\n  1\n  >>> sumPrimesPrime(2, 9)\n  1\n  >>> sumPrimesPrime(2, 10)\n  3\n  >>> sumPrimesPrime(3, 20)\n  3\n  >>> sumPrimesPrime(4, 30)\n  7\n  >>> sumPrimesPrime(5, 35)\n  11\n  >>> sumPrimesPrime(6, 40)\n  15\n  */\nconst sumPrimesPrime = (n,...a) => {\n  let sum = 0;\n  a.forEach(p => {\n    if (p > n) return;\n    while (n % p === 0) {\n      sum += p;\n      n /= p;\n    }\n  });\n  return sum;\n};\n\n/* Return a number that is divisible by all the numbers from 1 to n and prime.\n  >>> divisorSumPrime(1, 10, 100)\n  3\n  >>> divisorSumPrime(2, 5, 10)\n  2\n  >>> divisorSumPrime(3, 7, 20)\n  3\n  >>> divisorSumPrime(4, 12, 25)\n  4\n  >>> divisorSumPrime(5, 13, 25)\n  5\n  >>> divisorSumPrime(6, 7"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": false, "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  if (string === null || string === undefined) {\n    throw new Error('Empty string supplied to `allPrefixes`');\n  }\n\n  let result = [];\n  for (let i = 0; i < string.length; i++) {\n    const prefix = string.slice(0, i + 1);\n    result.push(prefix);\n  }\n  return result;\n};\n\n/* Return list of all suffixes from longest to shortest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  if (string === null || string === undefined) {\n    throw new Error('Empty string supplied to `allSuffixes`');\n  }\n\n  let result = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const suffix = string.slice(i);\n    result.push(suffix);\n  }\n  return result;\n};\n\n/* Return list of all words in the string\n  >>> allWords('a')\n  ['a']\n  >>> allWords('abc')\n  ['a', 'ab', 'abc']\n  >>> allWords('ab cd')\n  ['a', 'ab', 'ab cd', 'abcd']\n  */\nconst allWords = (string) => {\n  if (string === null || string === undefined) {\n    throw new Error('Empty string supplied to `allWords`');\n  }\n\n  const result = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char!=='') {\n      result.push(char);\n    }\n  }\n  return result;\n};\n\n/* Return list of all words in the string\n  >>> allWords('a')\n  ['a']\n  >>> allWords('abc')\n  ['a', 'ab', 'abc']\n  >>> allWords('ab cd')\n  ['a', 'ab', 'ab cd', 'abcd']\n  */\nconst allWords2 = (string) => {\n  if (string === null || string === undefined) {\n    throw new Error('Empty string supplied to `allWords`');\n  }\n\n  const result = [];\n  const words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word!== '') {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/* Return true if the input string is all lowercase letters\n  >>> isLowercase('abc')\n  true\n  >>> isLowercase('ABC')\n  false\n  >>> isLowercase('ab')\n  false\n  */\nconst isLowercase = (string) => {\n  if (string === null || string === undefined) {\n    throw new Error('Empty string supplied to `isLowercase`');\n  }\n\n  if (string.length === 0) {\n    return false;\n  }\n  if (string.length === 1) {\n    return string.toLowerCase() === string;\n  }\n\n  for (let i = 0; i < string.length; i++) {\n    if (string[i].toLowerCase()!== string[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/* Return true if the input string is all uppercase letters\n  >>> isUppercase('abc')\n  false\n  >>> isUppercase('ABC')\n  true\n  >>> isUppercase('ab')\n  false\n  */\nconst isUppercase = (string) => {\n  if (string === null || string === undefined) {\n    throw new Error('Empty string supplied to `isUppercase`');\n  }\n\n  if (string.length === 0) {\n    return false;\n  }\n  if (string.length === 1) {\n    return string.toUpperCase() === string;\n  }\n\n  for (let i = 0; i < string.length; i++) {\n    if (string[i].toUpperCase()!== string[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/* Return true if the input string contains all of the input string\n  >>> containsAll('abc', 'a')\n  true\n  >>> containsAll('abc', 'a', 'b')\n  true\n  >>> containsAll('abc', 'a', 'c')\n  true\n  >>> containsAll('abc', 'b', 'c')\n  true\n  >>> containsAll('abc', 'b', 'd')\n  false\n  >>> containsAll('abc', 'b', 'e')\n  false\n  */\nconst containsAll = (string, characters) => {\n  if (string === null || string === undefined) {\n    throw new Error('Empty string supplied to `containsAll`');\n  }\n\n  if (string.length === 0) {\n    return false;\n  }\n\n  for (let i = 0; i < string.length; i++) {\n    if (characters.indexOf(string[i]) === -1) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nmodule.exports = {\n  allPrefixes,\n  allSuffixes,\n  allWords,\n  allWords2,\n  containsAll,\n  isLowercase,\n  isUppercase\n};\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let count = 0;\n  let result = '';\n  while (count < n) {\n    result += `${count} `;\n    count += 1;\n  }\n  return result;\n}\n\nconsole.log(stringSequence(5));\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  return string.toLowerCase().split('').reduce((prev, current) => {\n    const index = prev.indexOf(current);\n    if (index === -1) {\n      prev.push(current);\n    }\n    return prev;\n  }, []).length;\n};\n\nconsole.log(countDistinctCharacters('xyzXYZ'));\nconsole.log(countDistinctCharacters('Jerry'));\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function will be a string representing musical notes in a special ASCII format. \n   Your task will be to parse this string and return list of integers corresponding to how many beats will do each \n   not last. \n\n   Here will be a legend: \n   'o '-whole note, will last four beats \n   'o| '-half note, will last two beats \n   '.| '-quater note, will last one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string representing musical notes in a special ASCII format. \n   Your task will be to parse this string and return list of integers corresponding to how many beats will do each \n   not last. \n\n   Here will be a legend: \n   'o '-whole note, will last four beats \n   'o| '-half note, will last two beats \n   '.| '-quater note, will last one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = [];\n  const music_string_array = music_string.split('');\n  const current_beat = 0;\n\n  for (let i = 0; i < music_string_array.length; i++) {\n    if (music_string_array[i] === 'o') {\n      music_list.push(current_beat);\n      current_beat++;\n    } else if (music_string_array[i] === '|') {\n      music_list.push(current_beat);\n      current_beat++;\n    } else if (music_string_array[i] === '.') {\n      music_list.push(current_beat);\n      current_beat++;\n    }\n  }\n\n  music_list.push(current_beat);\n\n  return music_list;\n}\n\n/*\n  Given a list of integers, return a new list that represents the original list but shifted to the left by the \n  given number of beats.\n\n  >>> shiftBeatList([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4], 1)\n  [4, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1]\n  */\nconst shiftBeatList = (beat_list, shift) => {\n  const shifted_list = [];\n  for (let i = 0; i < beat_list.length; i++) {\n    shifted_list.push(beat_list[i] + shift);\n  }\n  return shifted_list;\n}\n\nconst shiftBeatListWithShifts = (beat_list) => {\n  const beat_list_shift = [];\n  for (let i = 0; i < beat_list.length; i++) {\n    beat_list_shift.push(beat_list[i] + i * 4);\n  }\n  return beat_list_shift;\n}\n\nconst shiftBeatListToBeats = (beat_list, beats) => {\n  const beat_list_shift = [];\n  for (let i = 0; i < beat_list.length; i++) {\n    beat_list_shift.push(beat_list[i] + beats);\n  }\n  return beat_list_shift;\n}\n\n/*\n  Given a list of integers, return a new list that represents the original list but shifted to the right by the \n  given number of beats.\n\n  >>> shiftBeatList([4, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1], 1)\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst shiftBeatListToBeats = (beat_list, beats) => {\n  const beat_list_shift = [];\n  for (let i = 0; i < beat_list.length; i++) {\n    beat_list_shift.push(beat_list[i] - beats);\n  }\n  return beat_list_shift;\n}\n\n/*\n  Given a list of integers, return a new list that represents the original list but shifted to the right by the \n  given number of beats.\n\n  >>> shiftBeatList([4, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1], 1)\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst shiftBeatListWithShifts = (beat_list) => {\n  const beat_list_shift = [];\n  for (let i = 0; i < beat_list.length; i++) {\n    beat_list_shift.push(beat_list[i] - i * 4);\n  }\n  return beat_list_shift;\n}\n\n/*\n  Given a list of integers, return a new list that represents the original list but shifted to the right by the \n  given number of beats.\n\n  >>> shiftBeatList([4, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1], 1)\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst shiftBeatListToBeats = (beat_list, beats) => {\n  const beat_list_shift = [];\n  for (let i = 0; i < beat_list.length; i++) {\n    beat_list_shift.push(beat_list[i] - beats);\n  }\n  return beat_list_shift;\n}\n\n/*\n  Given a list of integers, return a new list that represents the original list but shifted to the right by the \n  given number of beats.\n\n  >>> shiftBeatList([4, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1], 1)\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst shiftBeatListWithShifts = (beat_list) => {\n  const beat_list_shift = [];\n  for (let i = 0; i < beat_list.length; i++) {\n    beat_list_shift.push(beat_list[i] - i * 4);\n  }\n  return beat_list_shift;\n}\n\nconst beatListToArray = (beat_list) => {\n  const beat_list_array = [];\n  for (let i = 0; i < beat_list.length; i++) {\n    beat_list_array.push(beat_list[i]);\n  }\n  return beat_list_array;\n}\n\n/*\n  Given a list of integers, return a new list that represents the original list but shifted to the right by the \n  given number of beats.\n\n  >>> shiftBeatList([4, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1], 1)\n  [4"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a will give substring can will be find in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a will give substring can will be find in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const result = string.split(substring).length - 1;\n  const counter = string.split(substring);\n  const overlaps = [];\n  for (let i = 0; i < counter.length; i++) {\n    if (counter[i] === '') {\n      continue;\n    }\n    if (counter[i + 1] === '') {\n      overlaps.push(counter[i]);\n    } else if (counter[i] === counter[i + 1]) {\n      overlaps.push(counter[i]);\n      i += 1;\n    }\n  }\n  return overlaps.length + result;\n};\n\nconsole.log(howManyTimes('aa', 'a'));\nconsole.log(howManyTimes('aaa', 'aa'));\nconsole.log(howManyTimes('aaa', 'aaa'));\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input will be a space-will delimitate string of numberals from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input will be a space-will delimitate string of numberals from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n    const sorted = []\n    const nums = numbers.split(\" \")\n    nums.sort()\n    nums.forEach(number => {\n        sorted.push(number)\n    })\n    return sorted.join(\" \")\n}\n\n/* Input will be a string.\n   It will return the number of times the string occurs in the input\n  >>> countString('hail')\n  3\n  */\nconst countString = (string) => {\n    const count = 0\n    string.split('').forEach(character => {\n        count += (string.indexOf(character)!== -1)\n    })\n    return count\n}\n\n/* Input will be a string.\n   It will return the first word in the string\n  >>> firstWord('Hello world')\n  'Hello'\n  */\nconst firstWord = (string) => {\n    const splitString = string.split(' ')\n    return splitString[0]\n}\n\n/* Input will be a string.\n   It will return the last word in the string\n  >>> lastWord('Hello world')\n  'world'\n  */\nconst lastWord = (string) => {\n    const splitString = string.split(' ')\n    return splitString[splitString.length - 1]\n}\n\n/* Input will be a string.\n   It will return the number of times the word occurs in the input\n  >>> countWord('hello')\n  1\n  */\nconst countWord = (word) => {\n    const count = 0\n    word.split('').forEach(character => {\n        count += (word.indexOf(character)!== -1)\n    })\n    return count\n}\n\n/* Input will be a string.\n   It will return the capitalized string\n  >>> capitalize('hello')\n  'Hello'\n  */\nconst capitalize = (string) => {\n    return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Input will be a string.\n   It will return the number of words in the string\n  >>> countWords('hello world')\n  2\n  */\nconst countWords = (string) => {\n    const splitString = string.split(' ')\n    return splitString.length\n}\n\n/* Input will be a string.\n   It will return the sentence length of the string\n  >>> sentenceLength('Hello world')\n  12\n  */\nconst sentenceLength = (string) => {\n    const splitString = string.split(' ')\n    return splitString.length\n}\n\n/* Input will be a string.\n   It will return the number of lower case characters in the string\n  >>> lowerCaseCharacters('Hello world')\n  9\n  */\nconst lowerCaseCharacters = (string) => {\n    const lowerCaseCount = 0\n    string.split('').forEach(character => {\n        if (character.toLowerCase() === character) {\n            lowerCaseCount += 1\n        }\n    })\n    return lowerCaseCount\n}\n\n/* Input will be a string.\n   It will return the number of upper case characters in the string\n  >>> upperCaseCharacters('Hello world')\n  6\n  */\nconst upperCaseCharacters = (string) => {\n    const upperCaseCount = 0\n    string.split('').forEach(character => {\n        if (character.toUpperCase() === character) {\n            upperCaseCount += 1\n        }\n    })\n    return upperCaseCount\n}\n\n/* Input will be a string.\n   It will return the number of vowels in the string\n  >>> vowels('Hello world')\n  2\n  */\nconst vowels = (string) => {\n    const vowels = []\n    string.split('').forEach(character => {\n        if (character.match(/[AEIOU]/i)) {\n            vowels.push(character)\n        }\n    })\n    return vowels.length\n}\n\n/* Input will be a string.\n   It will return the number of consonants in the string\n  >>> consonants('Hello world')\n  6\n  */\nconst consonants = (string) => {\n    const consonants = []\n    string.split('').forEach(character => {\n        if (!character.match(/[AEIOU]/i)) {\n            consonants.push(character)\n        }\n    })\n    return consonants.length\n}\n\n/* Input will be a string.\n   It will return the number of consonants in the string\n  >>> consonants('Hello world')\n  6\n  */\nconst consonants2 = (string) => {\n    const consonants = []\n    string.split('').forEach(character => {\n        if (!character.match(/[AEIOU]/i)) {\n            consonants.push(character)\n        }\n    })\n    return consonants.length\n}\n\n/* Input will be a string.\n   It will return the number of vowel-consonant pairs in the string\n  >>> vowelConsonants('Hello world')\n  6\n  */\nconst vowelConsonants = (string) => {\n    const vowelConsonants = 0\n    string.split('').forEach(character => {\n        if (character.match(/[AEIOU]/i)) {\n            vowelConsonants += 1\n        }\n    })\n    return vowelConsonants\n}\n\n/* Input will be a string.\n   It will return the number of all vowels and consonants in the string\n  >>> allVowelsAndConsonants('Hello world')\n  9\n  */\nconst allVowelsAndConsonants = (string) => {\n    const allVowelsAndConsonants = 0\n    string.split('').forEach(character => {\n        if (character.match(/[AEIOU]/i)) {\n            allVowelsAndConsonants += 1\n        }\n    })\n    return allVowelsAndConsonants\n}\n\n/* Input will be a string.\n   It will return the number of consonant-vowel pairs in the string\n  >>> conson"}
{"task_id": "JavaScript/20", "prompt": "/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n    // Find the closest pair of numbers in the list.\n    const closestPair = findClosestPair(numbers);\n    // Find the closest pair of numbers in the list.\n    const closestTriplet = findClosestTriplet(numbers);\n    // Return the closest pair of numbers in the list.\n    return [closestPair[0], closestPair[1]];\n}\n\n/*\n  #. Find the closest pair of numbers in the list.\n  #. The numbers must be sorted in ascending order.\n  #. Return the pair of numbers that are closest together.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are equally close, return the one that comes first in the list.\n  #. If two numbers are"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  if (numbers.length === 1) {\n    return [numbers[0], 1.0];\n  }\n  const min = numbers[0],\n        max = numbers[numbers.length - 1],\n        range = max - min;\n\n  const unit = (x) => (x - min) / range;\n\n  return numbers.map(unit);\n};\n\n/*\n  Given a list of numbers, will apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1.\n  The number of elements in the list must be a power of two.\n  >>> rescaleToUnit([1, 2, 3, 4, 5, 6, 7, 8])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescaleToUnit([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [0.0, 0.0625, 0.125, 0.1875, 0.25, 0.3125, 0.375, 0.4375, 0.5, 0.5625, 0.625, 0.6875, 0.75, 0.8125, 0.875, 0.9375, 1.0]\n  */\nconst rescaleToUnitPow2 = (numbers) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  if (numbers.length === 1) {\n    return [numbers[0], 1.0];\n  }\n  const min = numbers[0],\n        max = numbers[numbers.length - 1],\n        range = max - min;\n\n  const unit = (x) => (x - min) / range;\n\n  const num = Math.pow(2, Math.ceil(Math.log(numbers.length) / Math.log(2)));\n  const res = new Array(num);\n  for (let i = 0; i < num; i++) {\n    res[i] = unit(i);\n  }\n  return res;\n};\n\nmodule.exports = {\n  rescaleToUnit,\n  rescaleToUnitPow2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter will give list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter will give list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const result = [];\n  values.forEach((val) => {\n    if (typeof val === 'number') {\n      result.push(val);\n    }\n  });\n  return result;\n};\n\nmodule.exports = filterIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (typeof string!=='string') {\n    throw new TypeError(`Parameter must be a string, not ${typeof string}`)\n  }\n  const len = string.length\n  if (len === 0) {\n    return 0\n  }\n  const idx = string.lastIndexOf('\\0')\n  if (idx === -1) {\n    return len\n  }\n  return idx + 1\n}\n\n/* Return first occurence of char in string\n  >>> strchr('abcd', 'b')\n  2\n  >>> strchr('abcd', 'z')\n  -1\n  >>> strchr('abcd', 'a')\n  0\n  >>> strchr('abcd', 'a', 1)\n  -1\n  >>> strchr('abcd', 'a', 2)\n  0\n  */\nconst strchr = (string, char, from = 0) => {\n  if (typeof char!=='string') {\n    throw new TypeError(`Parameter must be a string, not ${typeof char}`)\n  }\n  let idx = string.indexOf(char, from)\n  if (idx === -1) {\n    return -1\n  }\n  return idx\n}\n\n/* Return last occurence of char in string\n  >>> strrchr('abcd', 'd')\n  2\n  >>> strrchr('abcd', 'z')\n  -1\n  >>> strrchr('abcd', 'a')\n  4\n  >>> strrchr('abcd', 'a', 2)\n  -1\n  >>> strrchr('abcd', 'a', 4)\n  -1\n  */\nconst strrchr = (string, char, from = 0) => {\n  if (typeof char!=='string') {\n    throw new TypeError(`Parameter must be a string, not ${typeof char}`)\n  }\n  let idx = string.lastIndexOf(char, from)\n  if (idx === -1) {\n    return -1\n  }\n  return idx\n}\n\n/* Return last occurence of char in string starting at idx\n  >>> strrchr('abcd', 'd', 2)\n  2\n  >>> strrchr('abcd', 'z', 2)\n  -1\n  >>> strrchr('abcd', 'a', 2)\n  -1\n  >>> strrchr('abcd', 'a', 4)\n  -1\n  */\nconst strrchr = (string, char, from = 0) => {\n  if (typeof char!=='string') {\n    throw new TypeError(`Parameter must be a string, not ${typeof char}`)\n  }\n  let idx = string.lastIndexOf(char, from)\n  if (idx === -1) {\n    return -1\n  }\n  return idx\n}\n\n/* Return first occurence of string in string\n  >>> strstr('abcd', 'b')\n  2\n  >>> strstr('abcd', 'z')\n  -1\n  >>> strstr('abcd', 'a')\n  0\n  >>> strstr('abcd', 'a', 1)\n  -1\n  >>> strstr('abcd', 'a', 2)\n  0\n  */\nconst strstr = (string, string2, from = 0) => {\n  if (typeof string!=='string') {\n    throw new TypeError(`Parameter must be a string, not ${typeof string}`)\n  }\n  if (typeof string2!=='string') {\n    throw new TypeError(`Parameter must be a string, not ${typeof string2}`)\n  }\n  const idx = string.indexOf(string2, from)\n  if (idx === -1) {\n    return -1\n  }\n  return idx\n}\n\n/* Return last occurence of string in string\n  >>> strstrr('abcd', 'b')\n  2\n  >>> strstrr('abcd', 'z')\n  -1\n  >>> strstrr('abcd', 'a')\n  4\n  >>> strstrr('abcd', 'a', 2)\n  -1\n  >>> strstrr('abcd', 'a', 4)\n  -1\n  */\nconst strstrr = (string, string2, from = 0) => {\n  if (typeof string!=='string') {\n    throw new TypeError(`Parameter must be a string, not ${typeof string}`)\n  }\n  if (typeof string2!=='string') {\n    throw new TypeError(`Parameter must be a string, not ${typeof string2}`)\n  }\n  const idx = string.lastIndexOf(string2, from)\n  if (idx === -1) {\n    return -1\n  }\n  return idx\n}\n\n/* Return last occurence of string in string starting at idx\n  >>> strstrr('abcd', 'b', 2)\n  2\n  >>> strstrr('abcd', 'z', 2)\n  -1\n  >>> strstrr('abcd', 'a', 2)\n  -1\n  >>> strstrr('abcd', 'a', 4)\n  -1\n  */\nconst strstrr = (string, string2, from = 0) => {\n  if (typeof string!=='string') {\n    throw new TypeError(`Parameter must be a string, not ${typeof string}`)\n  }\n  if (typeof string2!=='string') {\n    throw new TypeError(`Parameter must be a string, not ${typeof string2}`)\n  }\n  const idx = string.lastIndexOf(string2, from)\n  if (idx === -1) {\n    return -1\n  }\n  return idx\n}\n\nmodule.exports = {\n  strlen,\n  strchr,\n  strrchr,\n  strstr,\n  strstrr\n}\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n    let d = 0\n    while (n % 2 === 0) {\n        n = n / 2\n        d += 1\n    }\n    return n;\n}\n\n/* For a will give number n, will find the smallest number that will divide n evenly, larger than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n    let d = 0\n    while (n % 2 === 0) {\n        n = n / 2\n        d += 1\n    }\n    return n;\n}\n\n/* For a will give number n, will find the largest number that will divide n evenly, larger than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestPow = (n) => {\n    let d = 1\n    while (n % 2 === 0) {\n        n = n / 2\n        d += 1\n    }\n    return n;\n}\n\n/* For a will give number n, will find the smallest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst smallestPow = (n) => {\n    let d = 1\n    while (n % 2 === 0) {\n        n = n / 2\n        d += 1\n    }\n    return n;\n}\n\n/* Given a, b, c, and d, return the greatest common divisor between them.\n  >>> gcd(12, 18)\n  6\n  >>> gcd(6, 9)\n  3\n  >>> gcd(15, 18)\n  3\n  >>> gcd(18, 18)\n  18\n  >>> gcd(10, 15)\n  5\n  >>> gcd(5, 7)\n  5\n  >>> gcd(1, 2)\n  1\n  >>> gcd(7, 8)\n  1\n  >>> gcd(9, 9)\n  9\n  >>> gcd(20, 23)\n  7\n  >>> gcd(9, 12)\n  3\n  >>> gcd(24, 24)\n  24\n  >>> gcd(9, 10)\n  3\n  >>> gcd(24, 30)\n  6\n  >>> gcd(7, 10)\n  7\n  >>> gcd(20, 30)\n  10\n  >>> gcd(9, 6)\n  3\n  >>> gcd(12, 5)\n  5\n  >>> gcd(21, 5)\n  5\n  >>> gcd(12, 7)\n  7\n  >>> gcd(5, 5)\n  5\n  >>> gcd(15, 20)\n  15\n  >>> gcd(6, 3)\n  3\n  >>> gcd(9, 10)\n  3\n  >>> gcd(1, 1)\n  1\n  >>> gcd(20, 10)\n  10\n  >>> gcd(10, 1)\n  10\n  >>> gcd(10, 10)\n  10\n  >>> gcd(1, 2)\n  1\n  >>> gcd(9, 9)\n  9\n  >>> gcd(20, 23)\n  7\n  >>> gcd(9, 12)\n  3\n  >>> gcd(24, 24)\n  24\n  >>> gcd(9, 10)\n  3\n  >>> gcd(24, 30)\n  6\n  >>> gcd(7, 10)\n  7\n  >>> gcd(20, 30)\n  10\n  >>> gcd(9, 6)\n  3\n  >>> gcd(12, 5)\n  5\n  >>> gcd(21, 5)\n  5\n  >>> gcd(12, 7)\n  7\n  >>> gcd(5, 5)\n  5\n  >>> gcd(15, 20)\n  15\n  >>> gcd(6, 3)\n  3\n  >>> gcd(9, 10)\n  3\n  >>> gcd(1, 1)\n  1\n  >>> gcd(20, 10)\n  10\n  >>> gcd(10, 1)\n  10\n  >>> gcd(10, 10)\n  10\n  >>> gcd(1, 2)\n  1\n  >>> gcd(9, 9)\n  9\n  >>> gcd(20, 23)\n  7\n  >>> gcd(9, 12)\n  3\n  >>> gcd(24, 24)\n  24\n  >>> gcd(9, 10)\n  3\n  >>> gcd(24, 30)\n  6\n  >>> gcd(7, 10)\n  7\n  >>> gcd(20, 30)\n  10\n  >>> gcd(9, 6)\n  3\n  >>> gcd(12, 5)\n  5\n  >>> gcd(21, 5)\n  5\n  >>> gcd(12, 7)\n  7\n  >>> gcd(5, 5)\n  5\n  >>> gcd(15, 20)\n  15\n  >>> gcd(6, 3)\n  3\n  >>> gcd(9, 10)\n  3\n  >>> gcd(1, 1)\n  1\n  >>> gcd(20, 10)\n  10\n  >>> gcd(10, 1)\n  10\n  >>> gcd(10, 10)\n  10\n  >>> gcd(1, 2)\n  1\n  >>> gcd(9, 9)\n  9\n  >>> gcd(20, 23)\n  7\n  >>> gcd(9, 12)\n  3\n  >>> gcd(24, 24)\n  24\n  >>> gcd(9, 10)\n  3\n  >>> gcd(24, 30)\n  6\n  >>> gcd(7, 10)\n  7\n  >>> gcd(20, 30)\n  10\n  >>> gcd(9, 6)\n  3\n  >>> gcd(12, 5)\n  5\n  >>> gcd(21, 5)\n  5\n  >>> gcd(12, 7)\n  7\n  >>> gcd(5, 5)\n  5\n  >>> gcd(15, 20)\n  15\n  >>> gcd(6, 3)\n  3\n  >>> gcd(9, 10)\n  3\n  >>> gcd(1, 1)\n  1\n  >>> gcd(20, 10"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [],\n    factorsLength = 0,\n    i = 0,\n    factor = 2,\n    isPrime = false,\n    num = n;\n  while (num > 1) {\n    isPrime = true;\n    for (i = 0; i < factorsLength; i += 1) {\n      if (factors[i] === num % factor) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      factors[factorsLength] = factor;\n      factorsLength += 1;\n    }\n    factor = factor * (num % factor);\n    num = Math.floor(num / factor);\n  }\n  return factors;\n};\n\nexport {factorize};\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    if (map.has(numbers[i])) {\n      map.delete(numbers[i]);\n    } else {\n      map.set(numbers[i], 1);\n    }\n  }\n  return map.keys().sort();\n};\n\n/*\n  From a list of strings, will remove all elements that will occur more than once.\n  will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates(['a', 'b', 'c', 'c', 'd'])\n  ['a', 'b', 'd']\n  */\nconst removeDuplicates2 = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    if (map.has(numbers[i])) {\n      map.delete(numbers[i]);\n    } else {\n      map.set(numbers[i], 1);\n    }\n  }\n  return map.keys().sort();\n};\n\nconst removeDuplicates3 = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    if (map.has(numbers[i])) {\n      map.delete(numbers[i]);\n    } else {\n      map.set(numbers[i], 1);\n    }\n  }\n  return map.keys().sort();\n};\n\nconst removeDuplicates4 = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    if (map.has(numbers[i])) {\n      map.delete(numbers[i]);\n    } else {\n      map.set(numbers[i], 1);\n    }\n  }\n  return map.keys().sort();\n};\n\nconst removeDuplicates5 = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    if (map.has(numbers[i])) {\n      map.delete(numbers[i]);\n    } else {\n      map.set(numbers[i], 1);\n    }\n  }\n  return map.keys().sort();\n};\n\nconst removeDuplicates6 = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    if (map.has(numbers[i])) {\n      map.delete(numbers[i]);\n    } else {\n      map.set(numbers[i], 1);\n    }\n  }\n  return map.keys().sort();\n};\n\nconst removeDuplicates7 = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    if (map.has(numbers[i])) {\n      map.delete(numbers[i]);\n    } else {\n      map.set(numbers[i], 1);\n    }\n  }\n  return map.keys().sort();\n};\n\nconst removeDuplicates8 = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    if (map.has(numbers[i])) {\n      map.delete(numbers[i]);\n    } else {\n      map.set(numbers[i], 1);\n    }\n  }\n  return map.keys().sort();\n};\n\nconst removeDuplicates9 = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    if (map.has(numbers[i])) {\n      map.delete(numbers[i]);\n    } else {\n      map.set(numbers[i], 1);\n    }\n  }\n  return map.keys().sort();\n};\n\nconst removeDuplicates10 = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    if (map.has(numbers[i])) {\n      map.delete(numbers[i]);\n    } else {\n      map.set(numbers[i], 1);\n    }\n  }\n  return map.keys().sort();\n};\n\nconst removeDuplicates11 = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    if (map.has(numbers[i])) {\n      map.delete(numbers[i]);\n    } else {\n      map.set(numbers[i], 1);\n    }\n  }\n  return map.keys().sort();\n};\n\nconst removeDuplicates12 = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    if (map.has(numbers[i])) {\n      map.delete(numbers[i]);\n    } else {\n      map.set(numbers[i], 1);\n    }\n  }\n  return map.keys().sort();\n};\n\nconst removeDuplicates13 = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    if (map.has(numbers[i])) {\n      map.delete(numbers[i]);\n    } else {\n      map.set(numbers[i], 1);\n    }\n  }\n  return map.keys().sort();\n};\n\nconst removeDuplicates14 = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    if (map.has(numbers[i])) {\n      map.delete(numbers[i]);\n    } else {"}
{"task_id": "JavaScript/27", "prompt": "/* For a will give string, will flip lowercase characters to uppercase and will uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a will give string, will flip lowercase characters to uppercase and will uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let lower = string.toLowerCase();\n  let upper = string.toUpperCase();\n  return upper.toLowerCase();\n};\n\nmodule.exports = {\n  flipCase,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let i, l = strings.length, s = '';\n  for (i = 0; i < l; i++) {\n    s += strings[i];\n  }\n  return s;\n};\n\n/* Concatenate list of integers into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([-3, -2, -1, 0, 1, 2, 3])\n  '-321'\n  */\nconst concatenate = (ints) => {\n  let i, l = ints.length, s = '';\n  for (i = 0; i < l; i++) {\n    s += ints[i];\n  }\n  return s;\n};\n\n/* Concatenate list of booleans into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate([True, False])\n  'TrueFalse'\n  */\nconst concatenate = (bools) => {\n  let i, l = bools.length, s = '';\n  for (i = 0; i < l; i++) {\n    s += bools[i]? 'True' : 'False';\n  }\n  return s;\n};\n\n/* Concatenate list of objects into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate([{}, {a: 'b'}, {c: 'd'}])\n  '{a: b, c: d}'\n  */\nconst concatenate = (objs) => {\n  let i, l = objs.length, s = '';\n  for (i = 0; i < l; i++) {\n    s += JSON.stringify(objs[i]);\n  }\n  return s;\n};\n\nexport {\n  concatenate,\n  concatenateInts,\n  concatenateStrings,\n  concatenateBools,\n  concatenateObjects,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * @function sortByKey\n  * @description Sort an input list by a field name, or an array of field names.\n  * @param {Array} strings\n  * @param {String} fieldName - the field name to sort by, or an array of field names.\n  * @returns {Array} sorted list\n  */\nconst sortByKey = (strings, fieldName) => {\n  const result = []\n  if (Array.isArray(fieldName)) {\n    fieldName.forEach(field => {\n      result = result.concat(sortByKey(strings, field))\n    })\n  } else {\n    const index = strings.map(string => string.split(/\\s+/).indexOf(fieldName))\n    index.sort((a, b) => a - b)\n    for (let i = 0; i < index.length; i++) {\n      result = result.concat(strings[index[i]])\n    }\n  }\n  return result\n}\n\n/**\n  * @function sortByKeyCaseInsensitive\n  * @description Sort an input list by a field name, or an array of field names.\n  * @param {Array} strings\n  * @param {String} fieldName - the field name to sort by, or an array of field names.\n  * @returns {Array} sorted list\n  */\nconst sortByKeyCaseInsensitive = (strings, fieldName) => {\n  const result = []\n  if (Array.isArray(fieldName)) {\n    fieldName.forEach(field => {\n      result = result.concat(sortByKeyCaseInsensitive(strings, field))\n    })\n  } else {\n    const index = strings.map(string => string.split(/\\s+/).indexOf(fieldName))\n    index.sort((a, b) => a.toLowerCase() - b.toLowerCase())\n    for (let i = 0; i < index.length; i++) {\n      result = result.concat(strings[index[i]])\n    }\n  }\n  return result\n}\n\nexport {\n  filterByPrefix,\n  sortByKey,\n  sortByKeyCaseInsensitive\n}\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let i, newList = [];\n\n  for (i = 0; i < l.length; i += 1) {\n    if (l[i] > 0) {\n      newList.push(l[i]);\n    }\n  }\n\n  return newList;\n};\n\nexport default getPositive;<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a will give number will be prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a will give number will be prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  else if (n === 2) return true\n  else if (n === 3) return true\n  else if (n % 2 === 0) return false\n  else return n >= 3 && isPrime(Math.floor(n / 3))\n}\n\n// console.log(isPrime(1))\n// console.log(isPrime(2))\n// console.log(isPrime(3))\n// console.log(isPrime(4))\n// console.log(isPrime(5))\n// console.log(isPrime(6))\n// console.log(isPrime(7))\n// console.log(isPrime(8))\n// console.log(isPrime(9))\n// console.log(isPrime(10))\n// console.log(isPrime(11))\n// console.log(isPrime(12))\n// console.log(isPrime(13))\n// console.log(isPrime(14))\n// console.log(isPrime(15))\n// console.log(isPrime(16))\n// console.log(isPrime(17))\n// console.log(isPrime(18))\n// console.log(isPrime(19))\n// console.log(isPrime(20))\n// console.log(isPrime(21))\n// console.log(isPrime(22))\n// console.log(isPrime(23))\n// console.log(isPrime(24))\n// console.log(isPrime(25))\n// console.log(isPrime(26))\n// console.log(isPrime(27))\n// console.log(isPrime(28))\n// console.log(isPrime(29))\n// console.log(isPrime(30))\n// console.log(isPrime(31))\n// console.log(isPrime(32))\n// console.log(isPrime(33))\n// console.log(isPrime(34))\n// console.log(isPrime(35))\n// console.log(isPrime(36))\n// console.log(isPrime(37))\n// console.log(isPrime(38))\n// console.log(isPrime(39))\n// console.log(isPrime(40))\n// console.log(isPrime(41))\n// console.log(isPrime(42))\n// console.log(isPrime(43))\n// console.log(isPrime(44))\n// console.log(isPrime(45))\n// console.log(isPrime(46))\n// console.log(isPrime(47))\n// console.log(isPrime(48))\n// console.log(isPrime(49))\n// console.log(isPrime(50))\n// console.log(isPrime(51))\n// console.log(isPrime(52))\n// console.log(isPrime(53))\n// console.log(isPrime(54))\n// console.log(isPrime(55))\n// console.log(isPrime(56))\n// console.log(isPrime(57))\n// console.log(isPrime(58))\n// console.log(isPrime(59))\n// console.log(isPrime(60))\n// console.log(isPrime(61))\n// console.log(isPrime(62))\n// console.log(isPrime(63))\n// console.log(isPrime(64))\n// console.log(isPrime(65))\n// console.log(isPrime(66))\n// console.log(isPrime(67))\n// console.log(isPrime(68))\n// console.log(isPrime(69))\n// console.log(isPrime(70))\n// console.log(isPrime(71))\n// console.log(isPrime(72))\n// console.log(isPrime(73))\n// console.log(isPrime(74))\n// console.log(isPrime(75))\n// console.log(isPrime(76))\n// console.log(isPrime(77))\n// console.log(isPrime(78))\n// console.log(isPrime(79))\n// console.log(isPrime(80))\n// console.log(isPrime(81))\n// console.log(isPrime(82))\n// console.log(isPrime(83))\n// console.log(isPrime(84))\n// console.log(isPrime(85))\n// console.log(isPrime(86))\n// console.log(isPrime(87))\n// console.log(isPrime(88))\n// console.log(isPrime(89))\n// console.log(isPrime(90))\n// console.log(isPrime(91))\n// console.log(isPrime(92))\n// console.log(isPrime(93))\n// console.log(isPrime(94))\n// console.log(isPrime(95))\n// console.log(isPrime(96))\n// console.log(isPrime(97))\n// console.log(isPrime(98))\n// console.log(isPrime(99))\n// console.log(isPrime(100))\n// console.log(isPrime(101))\n// console.log(isPrime(102))\n// console.log(isPrime(103))\n// console.log(isPrime(104))\n// console.log(isPrime(105))\n// console.log(isPrime(106))\n// console.log(isPrime(107))\n// console.log(isPrime(108))\n// console.log(isPrime(109))\n// console.log(isPrime(110))\n// console.log(isPrime(111))\n// console.log(isPrime(112))\n// console.log(isPrime(113))\n// console.log(isPrime(114))\n// console.log(isPrime(115))\n// console.log(isPrime(116))\n// console.log(isPrime(117))\n// console.log(isPrime(118))\n// console.log(isPrime(119))\n// console.log(isPrime(120))\n// console.log(isPrime(121))\n// console.log(isPrime(122))\n// console.log(isPrime(123))\n// console.log(isPrime("}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length;\n  const sign = xs[len - 1] < 0? -1 : 1;\n  const middle = (len - 2) / 2;\n  const result = xs.reduce((prev, item, index) => {\n    if (index === middle) return sign * (item + prev);\n    return prev + sign * item;\n  }, 0);\n  return (result * 1.0) / sign;\n}\n\n\n/*\n  Given xs will be coefficients of a polynomial.\n  Polynomial will be of length n and coefficients will be in sorted order.\n  findRoot will find x that satisfies polynomial(x) = 0. \n  findRoot returns only root, even if there will be many.\n  >>> round(findRoot([1, 2, -1]), 2) # f(x) = 1 + 2x - 1x^2 = 1x^2 - 2\n  0.5\n  >>> round(findRoot([1, 2, -1, 1]), 2) # f(x) = 1 + 2x - 1x^2 = 1x^2 - 2\n  0.5\n  >>> round(findRoot([1, 2, -1, 1, 1]), 2) # f(x) = 1 + 2x - 1x^2 = 1x^2 - 2\n  0.5\n  >>> round(findRoot([1, 2, -1, 1, 1, 1]), 2) # f(x) = 1 + 2x - 1x^2 = 1x^2 - 2\n  0.5\n  >>> round(findRoot([1, 2, -1, 1, 1, 1, 1]), 2) # f(x) = 1 + 2x - 1x^2 = 1x^2 - 2\n  0.5\n  >>> round(findRoot([1, 2, -1, 1, 1, 1, 1, 1]), 2) # f(x) = 1 + 2x - 1x^2 = 1x^2 - 2\n  0.5\n  >>> round(findRoot([1, 2, -1, 1, 1, 1, 1, 1, 1]), 2) # f(x) = 1 + 2x - 1x^2 = 1x^2 - 2\n  0.5\n  >>> round(findRoot([1, 2, -1, 1, 1, 1, 1, 1, 1, 1]), 2) # f(x) = 1 + 2x - 1x^2 = 1x^2 - 2\n  0.5\n  >>> round(findRoot([1, 2, -1, 1, 1, 1, 1, 1, 1, 1, 1]), 2) # f(x) = 1 + 2x - 1x^2 = 1x^2 - 2\n  0.5\n  >>> round(findRoot([1, 2, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), 2) # f(x) = 1 + 2x - 1x^2 = 1x^2 - 2\n  0.5\n  >>> round(findRoot([1, 2, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), 2) # f(x) = 1 + 2x - 1x^2 = 1x^2 - 2\n  0.5\n  >>> round(findRoot([1, 2, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), 2) # f(x) = 1 + 2x - 1x^2 = 1x^2 - 2\n  0.5\n  >>> round(findRoot([1, 2, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), 2) # f(x) = 1 + 2x - 1x^2 = 1x^2 - 2\n  0.5\n  >>> round(findRoot([1, 2, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), 2) # f(x) = 1 + 2x - 1x^2 = 1x^2 - 2\n  0.5\n  >>> round(findRoot([1, 2, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), 2) # f(x) = 1 + 2x - 1x^2 = 1x^2 - 2\n  0.5\n  >>> round(findRoot([1, 2, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), 2) # f(x) = 1 + 2x - 1x^2 = 1x^2 - 2\n  0.5\n  >>> round(findRoot([1, 2, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), 2) # f(x) = 1 + 2x - 1x^2 = 1x^2 - 2\n  0.5\n  >>> round(findRoot([1, 2, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"}
{"task_id": "JavaScript/33", "prompt": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the indicies that will be not divisible by three, while its values at the indicies that will be divisible by three will be equal \n   to the values of the corresponding indicies of l, but will sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the indicies that will be not divisible by three, while its values at the indicies that will be divisible by three will be equal \n   to the values of the corresponding indicies of l, but will sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const output = [];\n  const len = l.length;\n  const remainder = len % 3;\n  for (let i = 0; i < len - remainder; i += 3) {\n    output.push(l[i]);\n    output.push(l[i + 1]);\n    output.push(l[i + 2]);\n  }\n  if (remainder > 0) {\n    output.push(l[len - remainder]);\n    output.push(l[len - remainder + 1]);\n    output.push(l[len - remainder + 2]);\n  }\n  return output;\n};\n\nexport default sortThird;<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return will sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return will sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(x => seen.hasOwnProperty(x)? false : (seen[x] = true))\n}\n\nexport default unique\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const array = l.slice().sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n\n  return array[l.length - 1]\n}\n\n/*\n  Return the sum of all elements in the list.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5, 6, 7])\n  42\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8])\n  49\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  70\n  */\nconst sum = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*\n  Return the product of all elements in the list.\n  >>> product([1, 2, 3, 4, 5])\n  120\n  >>> product([1, 2, 3, 4, 5, 6, 7])\n  42240\n  >>> product([1, 2, 3, 4, 5, 6, 7, 8])\n  28800\n  >>> product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  142800\n  */\nconst product = (l) => {\n  return l.reduce((acc, val) => acc * val, 1)\n}\n\n/*\n  Return the median of the list.\n  >>> median([1, 2, 3, 4, 5, 6, 7])\n  4\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8])\n  5\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  6\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  7\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  8\n  */\nconst median = (l) => {\n  if (l.length === 1) {\n    return l[0]\n  } else if (l.length % 2 === 0) {\n    return (l[l.length / 2 - 1] + l[l.length / 2]) / 2\n  } else {\n    return l[l.length / 2]\n  }\n}\n\n/*\n  Return the mode of the list.\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  9\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  10\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  11\n  */\nconst mode = (l) => {\n  let maxCount = 0\n\n  for (let i = 0; i < l.length; i++) {\n    let count = 0\n\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++\n      }\n    }\n\n    if (count > maxCount) {\n      maxCount = count\n    }\n  }\n\n  return l[l.length - maxCount]\n}\n\n/*\n  Return the mean of the list.\n  >>> mean([1, 2, 3, 4, 5, 6, 7])\n  4.5\n  >>> mean([1, 2, 3, 4, 5, 6, 7, 8])\n  5.5\n  >>> mean([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  6.5\n  */\nconst mean = (l) => {\n  return sum(l) / l.length\n}\n\n/*\n  Return the list of the elements of the list, sorted in ascending order.\n  >>> sorted([1, 2, 3, 4, 5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> sorted([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  */\nconst sorted = (l) => {\n  return l.sort()\n}\n\n/*\n  Return the list of the elements of the list, sorted in descending order.\n  >>> sorted([1, 2, 3, 4, 5, 6, 7], reverse=True)\n  [7, 6, 5, 4, 3, 2, 1]\n  >>> sorted([1, 2, 3, 4, 5, 6, 7, 8], reverse=True)\n  [8, 7, 6, 5, 4, 3, 2, 1]\n  >>> sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], reverse=True)\n  [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n  */\nconst reverse = (l, reverse) => {\n  return l.sort((a, b) => (reverse? 1 : -1) * (a - b))\n}\n\n/*\n  Return the number of elements in the list.\n  >>> count([1, 2, 3, 4, 5, 6, 7])\n  7\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8])\n"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n    return ((n % 11 === 0) || (n % 13 === 0))? 'fizz' : ((n % 11 === 0)? 'buzz' : (n % 13 === 0)? 'fizz' : '');\n};\n\nconsole.log(fizzBuzz(78));\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  return l.sort((a, b) => {\n    if (a % 2 === b % 2) {\n      return a - b;\n    } else {\n      return a - b + 1;\n    }\n  });\n};\n\n/*\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEvenWithSort = (l) => {\n  return l.sort((a, b) => {\n    if (a % 2 === b % 2) {\n      return a - b;\n    } else {\n      return a - b + 1;\n    }\n  });\n};\n\nmodule.exports = {\n  sortEven,\n  sortEvenWithSort\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n  var groups= [], groups2= [];\n  for (const group of s.split(' ')){\n    groups.push(group.slice(1, 3)+ group[0]);\n  }\n  for (const group of groups){\n    if (group.length== 3) \n      groups2.push(group.slice(2, 4)+ group[1]+ group[0]);\n    else \n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n   returns will decode string by cycling groups of three characters. \n  */ \n const decodeCyclic= (s)=>{\n  var groups= [], groups2= [];\n  for (const group of s.split(' ')){\n    groups.push(group.slice(1, 3)+ group[0]);\n  }\n  for (const group of groups){\n    if (group.length== 3) \n      groups2.push(group.slice(2, 4)+ group[1]+ group[0]);\n    else \n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  encodes string by cycling groups of three characters. \n  */ \n const encode= (s)=>{\n  var groups= [], groups2= [];\n  for (let i= 0; i <s.length; i++){\n    if (i%3===0) \n      groups.push(s.slice(i, i+3));\n    else \n      groups.push(s.slice(i, i+3));\n  }\n  for (const group of groups){\n    if (group.length== 3) \n      groups2.push(group.slice(1)+ group[0]);\n    else \n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  decodes string by cycling groups of three characters. \n  */ \n const decode= (s)=>{\n  var groups= [], groups2= [];\n  for (const group of s.split(' ')){\n    groups.push(group.slice(1, 3)+ group[0]);\n  }\n  for (const group of groups){\n    if (group.length== 3) \n      groups2.push(group.slice(2, 4)+ group[1]+ group[0]);\n    else \n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst encodeCyclic2= (s)=>{\n  var groups= [], groups2= [];\n  for (let i= 0; i <s.length; i++){\n    if (i%3===0) \n      groups.push(s.slice(i, i+3));\n    else \n      groups.push(s.slice(i, i+3));\n  }\n  for (const group of groups){\n    if (group.length== 3) \n      groups2.push(group.slice(1)+ group[0]);\n    else \n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic2= (s)=>{\n  var groups= [], groups2= [];\n  for (const group of s.split(' ')){\n    groups.push(group.slice(1, 3)+ group[0]);\n  }\n  for (const group of groups){\n    if (group.length== 3) \n      groups2.push(group.slice(2, 4)+ group[1]+ group[0]);\n    else \n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst encode= (s)=>{\n  var groups= [], groups2= [];\n  for (let i= 0; i <s.length; i++){\n    if (i%3===0) \n      groups.push(s.slice(i, i+3));\n    else \n      groups.push(s.slice(i, i+3));\n  }\n  for (const group of groups){\n    if (group.length== 3) \n      groups2.push(group.slice(1)+ group[0]);\n    else \n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decode= (s)=>{\n  var groups= [], groups2= [];\n  for (const group of s.split(' ')){\n    groups.push(group.slice(1, 3)+ group[0]);\n  }\n  for (const group of groups){\n    if (group.length== 3) \n      groups2.push(group.slice(2, 4)+ group[1]+ group[0]);\n    else \n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst encodeCyclic2= (s)=>{\n  var groups= [], groups2= [];\n  for (let i= 0; i <s.length; i++){\n    if (i%3===0) \n      groups.push(s.slice(i, i+3));\n    else \n      groups.push(s.slice(i, i+3));\n  }\n  for (const group of groups){\n    if (group.length== 3) \n      groups2.push(group.slice(1)+ group[0]);\n    else \n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  return (n + Math.sqrt(2) + 1) / 2\n}\n\nexport default primeFib\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const l = list(l)\n  const l_length = l.length\n  if (l_length < 3) return false\n  const sum = sum(l)\n  if (sum === 0) return true\n  let i = 0\n  let j = l_length - 1\n  let k = l_length - 2\n  while (i <= j) {\n    if (l[i] === 0 && l[j] === 0 && l[k] === 0) return true\n    if (l[i] === 0 && l[j] === 0) {\n      j--\n      k--\n    } else if (l[j] === 0) {\n      j--\n    } else if (l[k] === 0) {\n      k--\n    } else if (l[i] + l[j] === sum) {\n      i++\n      j--\n    } else if (l[i] + l[j] + l[k] === sum) {\n      i++\n      j--\n      k--\n    } else if (l[i] + l[k] === sum) {\n      i++\n      k--\n    } else if (l[j] + l[k] === sum) {\n      j--\n      k--\n    }\n  }\n  return false\n}\n\nexport default triplesSumToZero\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n  const d = (n - 1) * 2\n  return d\n}\n\nconst carRaceCollision_2 = (n)=>{\n  const d = (n - 1) * 2\n  return d\n}\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map((x, i) => x + 1);\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incrList([0, 0, 0, 0, 0])\n  [1, 1, 1, 1, 1]\n  */\nconst incrList2 = (l) => {\n  return l.map((x, i) => x + 1);\n};\n\n/*\n  >>> incrList2([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incrList2([0, 0, 0, 0, 0])\n  [1, 1, 1, 1, 1]\n  */\nconst incrList3 = (l) => {\n  return l.map((x, i) => x + 1);\n};\n\n/*\n  >>> incrList3([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList3([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incrList3([0, 0, 0, 0, 0])\n  [1, 1, 1, 1, 1]\n  */\nconst incrList4 = (l) => {\n  return l.map((x, i) => x + 1);\n};\n\n/*\n  >>> incrList4([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList4([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incrList4([0, 0, 0, 0, 0])\n  [1, 1, 1, 1, 1]\n  */\nconst incrList5 = (l) => {\n  return l.map((x, i) => x + 1);\n};\n\n/*\n  >>> incrList5([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList5([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incrList5([0, 0, 0, 0, 0])\n  [1, 1, 1, 1, 1]\n  */\nconst incrList6 = (l) => {\n  return l.map((x, i) => x + 1);\n};\n\n/*\n  >>> incrList6([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList6([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incrList6([0, 0, 0, 0, 0])\n  [1, 1, 1, 1, 1]\n  */\nconst incrList7 = (l) => {\n  return l.map((x, i) => x + 1);\n};\n\n/*\n  >>> incrList7([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList7([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incrList7([0, 0, 0, 0, 0])\n  [1, 1, 1, 1, 1]\n  */\nconst incrList8 = (l) => {\n  return l.map((x, i) => x + 1);\n};\n\n/*\n  >>> incrList8([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList8([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incrList8([0, 0, 0, 0, 0])\n  [1, 1, 1, 1, 1]\n  */\nconst incrList9 = (l) => {\n  return l.map((x, i) => x + 1);\n};\n\n/*\n  >>> incrList9([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList9([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incrList9([0, 0, 0, 0, 0])\n  [1, 1, 1, 1, 1]\n  */\nconst incrList10 = (l) => {\n  return l.map((x, i) => x + 1);\n};\n\n/*\n  >>> incrList10([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList10([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incrList10([0, 0, 0, 0, 0])\n  [1, 1, 1, 1, 1]\n  */\nconst incrList11 = (l) => {\n  return l.map((x, i) => x + 1);\n};\n\n/*\n  >>> incrList11([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList11([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4,"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    const len = l.length;\n    const sums = [];\n    const sum = 0;\n    for(let i = 0; i < len; i++){\n        sum += l[i];\n        sums.push(sum);\n    }\n    for(let i = 0; i < sums.length; i++){\n        for(let j = i+1; j < sums.length; j++){\n            if(sums[i] + sums[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n};\n\nexport default pairsSumToZero;<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers will be less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers will be less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let output = '';\n  let current = x;\n  while(current > 0) {\n    let remainder = current % base;\n    current = Math.floor(current / base);\n    output = remainder + output;\n  }\n  return output;\n}\n\n/* \n  >>> base = [3, 2, 5, 7, 11]\n  >>> input = '1011'\n  >>> reverse(input, base)\n  '1110'\n  >>> base = [2, 4, 7, 13, 17, 19, 23, 29]\n  >>> input = '11223344556677'\n  >>> reverse(input, base)\n  '6745332211'\n  >>> base = [3, 2, 5, 7, 11]\n  >>> input = '1011'\n  >>> reverse(input, base)\n  '1011'\n  >>> base = [2, 4, 7, 13, 17, 19, 23, 29]\n  >>> input = '11223344556677'\n  >>> reverse(input, base)\n  '11223344556677'\n  >>> base = [2, 4, 7, 13, 17, 19, 23, 29]\n  >>> input = '1011'\n  >>> reverse(input, base)\n  '1011'\n  >>> base = [3, 2, 5, 7, 11]\n  >>> input = '11223344556677'\n  >>> reverse(input, base)\n  '11223344556677'\n  >>> base = [2, 4, 7, 13, 17, 19, 23, 29]\n  >>> input = '1011'\n  >>> reverse(input, base)\n  '1011'\n  >>> base = [3, 2, 5, 7, 11]\n  >>> input = '11223344556677'\n  >>> reverse(input, base)\n  '11223344556677'\n  >>> base = [2, 4, 7, 13, 17, 19, 23, 29]\n  >>> input = '1011'\n  >>> reverse(input, base)\n  '1011'\n  >>> base = [3, 2, 5, 7, 11]\n  >>> input = '11223344556677'\n  >>> reverse(input, base)\n  '11223344556677'\n  >>> base = [2, 4, 7, 13, 17, 19, 23, 29]\n  >>> input = '1011'\n  >>> reverse(input, base)\n  '1011'\n  >>> base = [3, 2, 5, 7, 11]\n  >>> input = '11223344556677'\n  >>> reverse(input, base)\n  '11223344556677'\n  >>> base = [2, 4, 7, 13, 17, 19, 23, 29]\n  >>> input = '1011'\n  >>> reverse(input, base)\n  '1011'\n  >>> base = [3, 2, 5, 7, 11]\n  >>> input = '11223344556677'\n  >>> reverse(input, base)\n  '11223344556677'\n  >>> base = [2, 4, 7, 13, 17, 19, 23, 29]\n  >>> input = '1011'\n  >>> reverse(input, base)\n  '1011'\n  >>> base = [3, 2, 5, 7, 11]\n  >>> input = '11223344556677'\n  >>> reverse(input, base)\n  '11223344556677'\n  >>> base = [2, 4, 7, 13, 17, 19, 23, 29]\n  >>> input = '1011'\n  >>> reverse(input, base)\n  '1011'\n  >>> base = [3, 2, 5, 7, 11]\n  >>> input = '11223344556677'\n  >>> reverse(input, base)\n  '11223344556677'\n  >>> base = [2, 4, 7, 13, 17, 19, 23, 29]\n  >>> input = '1011'\n  >>> reverse(input, base)\n  '1011'\n  >>> base = [3, 2, 5, 7, 11]\n  >>> input = '11223344556677'\n  >>> reverse(input, base)\n  '11223344556677'\n  >>> base = [2, 4, 7, 13, 17, 19, 23, 29]\n  >>> input = '1011'\n  >>> reverse(input, base)\n  '1011'\n  >>> base = [3, 2, 5, 7, 11]\n  >>> input = '11223344556677'\n  >>> reverse(input, base)\n  '11223344556677'\n  >>> base = [2, 4, 7, 13, 17, 19, 23, 29]\n  >>> input = '1011'\n  >>> reverse(input, base)\n  '1011'\n  >>> base = [3, 2, 5, 7, 11]\n  >>> input = '11223344556677'\n  >>> reverse(input, base)\n  '11223344556677'\n  >>> base = [2, 4, 7, 13, 17, 19, 23, 29]\n  >>> input = '1011'\n  >>> reverse(input, base)\n  '1011'\n  >>> base = [3, 2, 5, 7, 11]\n  >>> input = '11223344556677'\n  >>> reverse(input, base)\n  '11223344556677'\n  >>> base = [2, 4, 7, 13, 17, 19, 23, 29]\n  >>> input = '1011'\n  >>> reverse(input, base)\n  '1011'\n  >>> base = [3, 2, 5, 7, 11]\n  >>> input = '11223344556677'\n  >>> reverse(input, base)\n  '11223344556677'\n  >>> base = [2, 4, 7, 13, 17, 19, 23, 29]\n  >>> input = '1011'\n  >>> reverse(input, base)\n  '1011'\n  >>> base = [3, 2, 5, 7, 11]\n  "}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": false, "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.pow(h, 2) / 2 * a;\n}\n\n/*Given a rectangle and its height, return its area.\n  >>> rectangleArea(4, 3)\n  7.5\n  */\nconst rectangleArea = (width, height) => {\n  return width * height;\n}\n\n/*Given a triangle and its length, return its area.\n  >>> triangleArea(6, 9)\n  25.0\n  */\nconst triangleArea2 = (a, b) => {\n  return a * b / 2;\n}\n\n/*Given a triangle and its length, return its area.\n  >>> triangleArea(3, 4)\n  7.0\n  */\nconst triangleArea3 = (a, b, c) => {\n  return triangleArea2(a, b) + triangleArea2(b, c) + triangleArea2(c, a);\n}\n\n/*Given a triangle and its length, return its area.\n  >>> triangleArea(9, 3, 8, 1, 5, 4)\n  37.0\n  */\nconst triangleArea4 = (a, b, c, d, e, f) => {\n  return triangleArea2(a, b) + triangleArea2(b, c) + triangleArea2(c, d) + triangleArea2(d, e) + triangleArea2(e, f) + triangleArea2(f, a);\n}\n\n/*Given a triangle and its length, return its area.\n  >>> triangleArea(9, 3, 8, 1, 5, 4, 7, 2, 6, 3)\n  70.0\n  */\nconst triangleArea5 = (a, b, c, d, e, f, g, h, i, j) => {\n  return triangleArea2(a, b) + triangleArea2(b, c) + triangleArea2(c, d) + triangleArea2(d, e) + triangleArea2(e, f) + triangleArea2(f, g) + triangleArea2(g, h) + triangleArea2(h, i) + triangleArea2(i, j) + triangleArea2(j, a);\n}\n\n/*Given a triangle and its length, return its area.\n  >>> triangleArea(9, 3, 8, 1, 5, 4, 7, 2, 6, 3, 5, 1, 4, 3, 2, 7, 6, 8, 4, 5, 6)\n  89.0\n  */\nconst triangleArea6 = (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) => {\n  return triangleArea2(a, b) + triangleArea2(b, c) + triangleArea2(c, d) + triangleArea2(d, e) + triangleArea2(e, f) + triangleArea2(f, g) + triangleArea2(g, h) + triangleArea2(h, i) + triangleArea2(i, j) + triangleArea2(j, k) + triangleArea2(k, l) + triangleArea2(l, m) + triangleArea2(m, n) + triangleArea2(n, o) + triangleArea2(o, p) + triangleArea2(p, q) + triangleArea2(q, r) + triangleArea2(r, s) + triangleArea2(s, t) + triangleArea2(t, a);\n}\n\n/*Given a triangle and its length, return its area.\n  >>> triangleArea(9, 3, 8, 1, 5, 4, 7, 2, 6, 3, 5, 1, 4, 3, 2, 7, 6, 8, 4, 5, 6, 3, 7, 2, 8, 1, 5, 4, 3, 2, 7, 6, 8, 4, 5, 6, 3, 7, 2, 8, 1, 5, 4, 3, 2, 7, 6, 8, 4, 5, 6, 3, 7, 2, 8, 1, 5, 4, 3, 2, 7, 6, 8, 4, 5, 6)\n  144.0\n  */\nconst triangleArea7 = (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z) => {\n  return triangleArea2(a, b) + triangleArea2(b, c) + triangleArea2(c, d) + triangleArea2(d, e) + triangleArea2(e, f) + triangleArea2(f, g) + triangleArea2(g, h) + triangleArea2(h, i) + triangleArea2(i, j) + triangleArea2(j, k) + triangleArea2(k, l) + triangleArea2(l, m) + triangleArea2(m, n) + triangleArea2(n, o) + triangleArea2(o, p) + triangleArea2(p, q) + triangleArea2(q, r) + triangleArea2(r, s) + triangleArea2(s, t) + triangleArea2(t, u) + triangleArea2(u, v) + triangleArea2(v, w) + triangleArea2(w, x) + triangleArea2(x, y) + triangleArea2(y, z) + triangleArea2(z, a);\n}\n\nexport {\n  triangleArea,\n  rectangleArea,\n  triangleArea2,\n  triangleArea3,\n  triangleArea4,\n  triangleArea5,\n  triangleArea6,\n  triangleArea7\n}\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib4 number sequence.   will Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib4 number sequence.   will Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if(n < 1) return 0;\n  if(n === 1) return 1;\n  if(n === 2) return 2;\n  const fib1 = fib4(n-1);\n  const fib2 = fib4(n-2);\n  return fib1 + fib2 + fib3(n-3) + fib4(n-4);\n};\n\nconsole.log(fib4(10));<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error('List is empty')\n  }\n\n  if (l.length === 1) {\n    return l[0]\n  }\n\n  const sorted = l.sort()\n\n  if (l.length % 2) {\n    return sorted[Math.floor(l.length / 2)]\n  } else {\n    return (sorted[Math.floor(l.length / 2 - 1)] + sorted[Math.floor(l.length / 2)]) / 2\n  }\n}\n\nexport default median\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (!text) return false\n\n  const textLength = text.length\n  let reversed = text.split('').reverse()\n  let reversedStr = reversed.join('')\n\n  return text === reversedStr\n}\n\nexport default isPalindrome\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0) {\n    return modp(-n, p)\n  }\n  if (n === 0) {\n    return 1\n  }\n  if (n === 1) {\n    return 0\n  }\n  if (n === 2) {\n    return 1\n  }\n  return (n % p + p) % p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns will encode string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns will encode string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n}\n\n/* \n  encodes string using alphabet. \n  */ \nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\n/* \n  decodes string using alphabet. \n  */ \nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>{ \n   return decodeShift(s); \n}\n\nconst encode = (s)=>{ \n   return encodeShift(s); \n}\n\nconst decode = (s)=>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n    text = text.toLowerCase();\n    text = text.replace(/a/g, '');\n    text = text.replace(/e/g, '');\n    text = text.replace(/i/g, '');\n    text = text.replace(/o/g, '');\n    text = text.replace(/u/g, '');\n    text = text.replace(/á/g, '');\n    text = text.replace(/í/g, '');\n    text = text.replace(/ñ/g, '');\n    text = text.replace(/ñ/g, '');\n    text = text.replace(/á/g, '');\n    text = text.replace(/í/g, '');\n    text = text.replace(/ú/g, '');\n    text = text.replace(/ó/g, '');\n    text = text.replace(/í/g, '');\n    text = text.replace(/ú/g, '');\n    text = text.replace(/ó/g, '');\n    text = text.replace(/í/g, '');\n    text = text.replace(/ú/g, '');\n    text = text.replace(/ó/g, '');\n    text = text.replace(/á/g, '');\n    text = text.replace(/í/g, '');\n    text = text.replace(/ú/g, '');\n    text = text.replace(/ó/g, '');\n    text = text.replace(/á/g, '');\n    text = text.replace(/í/g, '');\n    text = text.replace(/ú/g, '');\n    text = text.replace(/ó/g, '');\n    text = text.replace(/á/g, '');\n    text = text.replace(/í/g, '');\n    text = text.replace(/ú/g, '');\n    text = text.replace(/ó/g, '');\n    text = text.replace(/á/g, '');\n    text = text.replace(/í/g, '');\n    text = text.replace(/ú/g, '');\n    text = text.replace(/ó/g, '');\n    text = text.replace(/á/g, '');\n    text = text.replace(/í/g, '');\n    text = text.replace(/ú/g, '');\n    text = text.replace(/ó/g, '');\n    text = text.replace(/á/g, '');\n    text = text.replace(/í/g, '');\n    text = text.replace(/ú/g, '');\n    text = text.replace(/ó/g, '');\n    text = text.replace(/á/g, '');\n    text = text.replace(/í/g, '');\n    text = text.replace(/ú/g, '');\n    text = text.replace(/ó/g, '');\n    text = text.replace(/á/g, '');\n    text = text.replace(/í/g, '');\n    text = text.replace(/ú/g, '');\n    text = text.replace(/ó/g, '');\n    text = text.replace(/á/g, '');\n    text = text.replace(/í/g, '');\n    text = text.replace(/ú/g, '');\n    text = text.replace(/ó/g, '');\n    text = text.replace(/á/g, '');\n    text = text.replace(/í/g, '');\n    text = text.replace(/ú/g, '');\n    text = text.replace(/ó/g, '');\n    text = text.replace(/á/g, '');\n    text = text.replace(/í/g, '');\n    text = text.replace(/ú/g, '');\n    text = text.replace(/ó/g, '');\n    text = text.replace(/á/g, '');\n    text = text.replace(/í/g, '');\n    text = text.replace(/ú/g, '');\n    text = text.replace(/ó/g, '');\n    text = text.replace(/á/g, '');\n    text = text.replace(/í/g, '');\n    text = text.replace(/ú/g, '');\n    text = text.replace(/ó/g, '');\n    text = text.replace(/á/g, '');\n    text = text.replace(/í/g, '');\n    text = text.replace(/ú/g, '');\n    text = text.replace(/ó/g, '');\n    text = text.replace(/á/g, '');\n    text = text.replace(/í/g, '');\n    text = text.replace(/ú/g, '');\n    text = text.replace(/ó/g, '');\n    text = text.replace(/á/g, '');\n    text = text.replace(/í/g, '');\n    text = text.replace(/ú/g, '');\n    text = text.replace(/ó/g, '');\n    text = text.replace(/á/g, '');\n    text = text.replace(/í/g, '');\n    text = text.replace(/ú/g, '');\n    text = text.replace(/ó/g, '');\n    text = text.replace(/á/g, '');\n    text = text.replace(/í/g, '');\n    text = text.replace(/ú/g, '');\n    text = text.replace(/ó/g, '');\n    text = text.replace(/á/g, '');\n    "}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l will be below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l will be below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\nexport default belowThreshold;\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  # Add two numbers\n  >>> add2(2, 3)\n  5\n  >>> add2(5, 7)\n  12\n  >>> add2(0, 0)\n  0\n  >>> add2(5, 5)\n  10\n  >>> add2(2, 2)\n  4\n  >>> add2(2, 0)\n  2\n  >>> add2(0, 2)\n  2\n  >>> add2(2, 1)\n  3\n  >>> add2(1, 2)\n  3\n  >>> add2(2, -1)\n  -1\n  >>> add2(-1, -2)\n  -3\n  >>> add2(-1, 1)\n  -2\n  >>> add2(-2, 1)\n  -2\n  >>> add2(2, 1)\n  3\n  >>> add2(2, -1)\n  -1\n  >>> add2(1, 2)\n  3\n  >>> add2(1, -2)\n  -1\n  >>> add2(2, 1)\n  3\n  >>> add2(2, -1)\n  -1\n  >>> add2(-1, -2)\n  -3\n  >>> add2(-1, 1)\n  -2\n  >>> add2(-2, 1)\n  -2\n  >>> add2(-2, -1)\n  -2\n  >>> add2(1, 2)\n  3\n  >>> add2(1, -2)\n  -1\n  >>> add2(2, 1)\n  3\n  >>> add2(2, -1)\n  -1\n  >>> add2(-1, -2)\n  -3\n  >>> add2(-1, 1)\n  -2\n  >>> add2(-2, 1)\n  -2\n  >>> add2(-2, -1)\n  -2\n  >>> add2(1, 2)\n  3\n  >>> add2(1, -2)\n  -1\n  >>> add2(2, 1)\n  3\n  >>> add2(2, -1)\n  -1\n  >>> add2(-1, -2)\n  -3\n  >>> add2(-1, 1)\n  -2\n  >>> add2(-2, 1)\n  -2\n  >>> add2(-2, -1)\n  -2\n  >>> add2(1, 2)\n  3\n  >>> add2(1, -2)\n  -1\n  >>> add2(2, 1)\n  3\n  >>> add2(2, -1)\n  -1\n  >>> add2(-1, -2)\n  -3\n  >>> add2(-1, 1)\n  -2\n  >>> add2(-2, 1)\n  -2\n  >>> add2(-2, -1)\n  -2\n  >>> add2(1, 2)\n  3\n  >>> add2(1, -2)\n  -1\n  >>> add2(2, 1)\n  3\n  >>> add2(2, -1)\n  -1\n  >>> add2(-1, -2)\n  -3\n  >>> add2(-1, 1)\n  -2\n  >>> add2(-2, 1)\n  -2\n  >>> add2(-2, -1)\n  -2\n  >>> add2(1, 2)\n  3\n  >>> add2(1, -2)\n  -1\n  >>> add2(2, 1)\n  3\n  >>> add2(2, -1)\n  -1\n  >>> add2(-1, -2)\n  -3\n  >>> add2(-1, 1)\n  -2\n  >>> add2(-2, 1)\n  -2\n  >>> add2(-2, -1)\n  -2\n  >>> add2(1, 2)\n  3\n  >>> add2(1, -2)\n  -1\n  >>> add2(2, 1)\n  3\n  >>> add2(2, -1)\n  -1\n  >>> add2(-1, -2)\n  -3\n  >>> add2(-1, 1)\n  -2\n  >>> add2(-2, 1)\n  -2\n  >>> add2(-2, -1)\n  -2\n  >>> add2(1, 2)\n  3\n  >>> add2(1, -2)\n  -1\n  >>> add2(2, 1)\n  3\n  >>> add2(2, -1)\n  -1\n  >>> add2(-1, -2)\n  -3\n  >>> add2(-1, 1)\n  -2\n  >>> add2(-2, 1)\n  -2\n  >>> add2(-2, -1)\n  -2\n  >>> add2(1, 2)\n  3\n  >>> add2(1, -2)\n  -1\n  >>> add2(2, 1)\n  3\n  >>> add2(2, -1)\n  -1\n  >>> add2(-1, -2)\n  -3\n  >>> add2(-1, 1)\n  -2\n  >>> add2(-2, 1)\n  -2\n  >>> add2(-2, -1)\n  -2\n  >>> add2(1, 2)\n  3\n  >>> add2(1, -2)\n  -1\n  >>> add2(2, 1)\n  3\n  >>> add2(2, -1)\n  -1\n  >>> add2(-1, -2)\n  -3\n  >>> add2(-1, 1)\n  -2\n  >>> add2(-2, 1)\n  -2\n  >>> add2(-2, -1)\n  -2\n  >>> add2(1, 2)\n  3\n  >>> add2(1, -2)\n  -1\n  >>> add2(2, 1)\n  3\n  >>> add2(2, -1)\n  -1\n  >>> add2(-1, -2)\n  -3\n  >>> add2(-1, 1)\n  -2\n  >>> add2(-2, 1)\n  -2\n  >>> add2(-2, -"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words will have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words will have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    let a0 = s0.split('');\n    let a1 = s1.split('');\n    for (let i = 0; i < a0.length; i++) {\n        if (a0[i]!= a1[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/*\n  Check if a word is a palindrome.\n  >>> palindrome('eabcd')\n  true\n  >>> palindrome('eabcdzzzz')\n  true\n  >>> palindrome('abcd')\n  true\n  >>> palindrome('abcdzzzz')\n  true\n  >>> palindrome('abcdzzz')\n  true\n  >>> palindrome('abcdzzzzzz')\n  true\n  >>> palindrome('abcdzzzzzzzz')\n  true\n  >>> palindrome('dddddddabce')\n  false\n  >>> palindrome('abcdefghij')\n  false\n  >>> palindrome('a')\n  false\n  */\nconst palindrome = (s) => {\n    let a = s.split('');\n    for (let i = 0; i < a.length; i++) {\n        if (a[i]!= a[a.length - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nmodule.exports = {\n    findLongestPalindrome,\n    sameChars,\n    palindrome\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  } else {\n    return fib(n-1) + fib(n-2);\n  }\n};\n\n/*\n  >>> fib(5)\n  13\n  >>> fib(20)\n  44\n  */\n\n//\n// @user: jacob\n// @repo: https://github.com/jacobhayes/puzzle-solver\n// @repoUrl: https://github.com/jacobhayes/puzzle-solver\n//\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets will be a string of\" <\" and\">\". \n   return false if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets will be a string of\" <\" and\">\". \n   return false if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.filter(opening => opening === \"<\");\n  const closingBrackets = brackets.filter(opening => opening === \">\");\n  const unmatchedClosingBrackets = brackets.filter(opening => opening === \">\");\n  return unmatchedClosingBrackets.length === 0 && openingBrackets.length == closingBrackets.length;\n};\n\nexport default correctBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true will be list elements will be monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true will be list elements will be monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1;\n  while (i < l.length) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/**\n  * @description Calculate the average value of an array.\n  * @param {Array} arr An array.\n  * @returns {Number} The average value.\n  * @example\n  * /*\n  * Given an array of integers, we can calculate the average value by using the\n  * `sum` function and `Math.floor` function.\n  *\n  * sum(arr) / sum(Math.floor(arr))\n  * @returns {Number} The average value of an array.\n  * */\nconst average = (arr) => {\n  const avg = sum(arr) / arr.length;\n  return Math.floor(avg);\n};\n\n/**\n  * @description Calculate the sum of an array.\n  * @param {Array} arr An array.\n  * @returns {Number} The sum of an array.\n  * @example\n  * /*\n  * Given an array of integers, we can calculate the sum by using the `sum`\n  * function.\n  *\n  * sum(arr)\n  * @returns {Number} The sum of an array.\n  * */\nconst sum = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/**\n  * @description Calculate the minimum value of an array.\n  * @param {Array} arr An array.\n  * @returns {Number} The minimum value of an array.\n  * @example\n  * /*\n  * Given an array of integers, we can calculate the minimum value by using the\n  * `min` function.\n  *\n  * min(arr)\n  * @returns {Number} The minimum value of an array.\n  * */\nconst min = (arr) => {\n  return Math.min.apply(Math, arr);\n};\n\n/**\n  * @description Calculate the maximum value of an array.\n  * @param {Array} arr An array.\n  * @returns {Number} The maximum value of an array.\n  * @example\n  * /*\n  * Given an array of integers, we can calculate the maximum value by using the\n  * `max` function.\n  *\n  * max(arr)\n  * @returns {Number} The maximum value of an array.\n  * */\nconst max = (arr) => {\n  return Math.max.apply(Math, arr);\n};\n\nexport {\n  average,\n  sum,\n  min,\n  max,\n  monotonic,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return will sort unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return will sort unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const sorted = sortUnique(l1)\n  const sorted2 = sortUnique(l2)\n  const length = sorted.length\n  const length2 = sorted2.length\n  const lengthCommon = Math.min(length, length2)\n  const ret = []\n\n  for (let i = 0; i < lengthCommon; i++) {\n    if (sorted[i] === sorted2[i]) {\n      ret.push(sorted[i])\n    }\n  }\n\n  return ret\n}\n\n/*\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let d = 2, p = 0;\n  while (d * d <= n) {\n    if (n % d === 0) {\n      p = d;\n      break;\n    }\n    d += 1;\n  }\n  return p;\n};\n\n/*Return a number that is the sum of a given number of n-fibonacci numbers.\n  >>> fibonacciSum(10)\n  55\n  >>> fibonacciSum(3)\n  9\n  >>> fibonacciSum(12)\n  90\n  >>> fibonacciSum(18)\n  44\n  >>> fibonacciSum(20)\n  88\n  */\nconst fibonacciSum = (n) => {\n  let i = 0, j = 1, sum = 0;\n  while (i <= n) {\n    sum = i + j;\n    i = j;\n    j = sum;\n  }\n  return sum;\n};\n\n/*Return a number that is the difference of a given number of n-fibonacci numbers.\n  >>> fibonacciDiff(10)\n  5\n  >>> fibonacciDiff(3)\n  1\n  >>> fibonacciDiff(12)\n  11\n  >>> fibonacciDiff(18)\n  6\n  >>> fibonacciDiff(20)\n  16\n  */\nconst fibonacciDiff = (n) => {\n  let i = 0, j = 1, diff = 0;\n  while (i <= n) {\n    diff = i - j;\n    i = j;\n    j = diff;\n  }\n  return diff;\n};\n\n/*Return the smallest prime factor of n. Assume n> 1.\n  >>> smallestPrimeFactor(1)\n  1\n  >>> smallestPrimeFactor(20)\n  2\n  >>> smallestPrimeFactor(13195)\n  29\n  */\nconst smallestPrimeFactor = (n) => {\n  let d = 2, p = 0;\n  while (d * d <= n) {\n    if (n % d === 0) {\n      p = d;\n      break;\n    }\n    d += 1;\n  }\n  return p;\n};\n\n/*Return the sum of the first n fibonacci numbers.\n  >>> fibonacciSum(1)\n  1\n  >>> fibonacciSum(3)\n  2\n  >>> fibonacciSum(10)\n  55\n  */\nconst fibonacciSum = (n) => {\n  let i = 0, sum = 0;\n  while (i <= n) {\n    sum = fibonacci(i);\n    i += 1;\n  }\n  return sum;\n};\n\n/*Return the difference of the first n fibonacci numbers.\n  >>> fibonacciDiff(1)\n  0\n  >>> fibonacciDiff(3)\n  1\n  >>> fibonacciDiff(10)\n  9\n  */\nconst fibonacciDiff = (n) => {\n  let i = 0, diff = 0;\n  while (i <= n) {\n    diff = fibonacci(i) - fibonacci(i + 1);\n    i += 1;\n  }\n  return diff;\n};\n\n/*Return the n-fibonacci number.\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(2)\n  1\n  >>> fibonacci(3)\n  2\n  >>> fibonacci(4)\n  3\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  */\nconst fibonacci = (n) => {\n  let a = 1, b = 1, i = 2;\n  while (i <= n) {\n    a = b;\n    b = a + b;\n    i += 1;\n  }\n  return b;\n};\n\nmodule.exports = {\n  largestPrimeFactor,\n  fibonacciSum,\n  fibonacciDiff,\n  smallestPrimeFactor\n};\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum += n\n    n -= 1\n  }\n  return sum\n}\n\n/*\n  >>> sumToN(15)\n  135\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nexport default sumToN\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets will be a string of\" (\" and\")\". \n   return true if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets will be a string of\" (\" and\")\". \n   return true if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    let count = 0;\n    for (let i = 0; i < brackets.length - 1; i++) {\n        if (brackets[i] === '(' && brackets[i + 1] === ')') {\n            count++;\n        }\n    }\n    return count === brackets.length - 1;\n};\n\n/*\n   Given an array of strings, return the length of the longest \n   substring without repeating characters.\n\n  >>> longestSubstring(\"abcabcbb\")\n  'abc'\n  >>> longestSubstring(\"bbbbb\")\n  'bbb'\n  >>> longestSubstring(\"pwwkew\")\n  'pwke'\n  >>> longestSubstring(\"cbbdee\")\n  'cbd'\n  >>> longestSubstring(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}
{"task_id": "JavaScript/62", "prompt": "/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n    let n = xs.length - 1;\n    let d = [];\n    for(let i = 0; i < n; i++) {\n        d[i] = xs[i+1];\n    }\n    d[n] = xs[0]*(n+1);\n    return d;\n};\n\n/*\n  The second derivative of a polynomial is a function of two inputs, x and x^2.\n  Return second derivative of this polynomial.\n  >>> derivative([3, 1, 2, 4, 5, 6])\n  [12, 48, 80]\n  >>> derivative([1, 2, 3])\n  [6]\n  >>> derivative([1, 2, 3, 4])\n  [2]\n  */\nconst second_derivative = (xs) => {\n    let n = xs.length - 2;\n    let d = [];\n    for(let i = 0; i < n; i++) {\n        d[i] = xs[i+1]*(i+2);\n    }\n    d[n] = xs[0]*(n+1)*(n+2);\n    d[n+1] = xs[1]*(n+2);\n    return d;\n};\n\n/*\n  Calculate the value of a polynomial at a given point\n  >>> derivative([3, 1, 2, 4, 5, 6])\n  [12, 48, 80]\n  >>> derivative([1, 2, 3])\n  [6]\n  >>> derivative([1, 2, 3, 4])\n  [2]\n  >>> derivative([1, 2, 3, 4, 5, 6])\n  [24, 72, 104]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [288, 600, 1056]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1536, 3072, 5040, 7680, 11440, 14400, 18048, 25120, 30240, 36288, 43200, 48600]\n  */\nconst poly = (xs) => {\n    let d = derivative(xs);\n    let dd = second_derivative(xs);\n    let n = xs.length - 1;\n    let f = d[0];\n    for(let i = 1; i < n; i++) {\n        f += d[i]*(xs[i] + xs[i+1]);\n    }\n    f += d[n]*(xs[n] + xs[n+1]);\n    for(let i = 0; i < n; i++) {\n        f += dd[i]*(xs[i+1]*xs[i+2]);\n    }\n    return f;\n};\n\nconst derivative = (xs) => {\n    let n = xs.length - 1;\n    let d = [];\n    for(let i = 0; i < n; i++) {\n        d[i] = xs[i+1];\n    }\n    d[n] = xs[0]*(n+1);\n    return d;\n};\n\nconst second_derivative = (xs) => {\n    let n = xs.length - 2;\n    let d = [];\n    for(let i = 0; i < n; i++) {\n        d[i] = xs[i+1]*(i+2);\n    }\n    d[n] = xs[0]*(n+1)*(n+2);\n    d[n+1] = xs[1]*(n+2);\n    return d;\n};\n\nconst poly = (xs) => {\n    let d = derivative(xs);\n    let dd = second_derivative(xs);\n    let n = xs.length - 1;\n    let f = d[0];\n    for(let i = 1; i < n; i++) {\n        f += d[i]*(xs[i] + xs[i+1]);\n    }\n    f += d[n]*(xs[n] + xs[n+1]);\n    for(let i = 0; i < n; i++) {\n        f += dd[i]*(xs[i+1]*xs[i+2]);\n    }\n    return f;\n};\n\n/*\n  Calculate the value of a polynomial at a given point\n  >>> derivative([3, 1, 2, 4, 5, 6])\n  [12, 48, 80]\n  >>> derivative([1, 2, 3])\n  [6]\n  >>> derivative([1, 2, 3, 4])\n  [2]\n  >>> derivative([1, 2, 3, 4, 5, 6])\n  [24, 72, 104]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [288, 600, 1056]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1536, 3072, 5040, 7680, 11440, 14400, 18048, 25120, 30240, 36288, 43200, 48600]\n  */\nconst poly = (xs) => {\n    let d = derivative(xs);\n    let dd = second_derivative(xs);\n    let n = xs.length - 1;\n    let f = d[0];\n    for(let i = 1; i < n; i++) {\n        f += d[i]*(xs[i] + xs[i+1]);\n    }\n    f += d[n]*(xs[n] + xs[n+1]);\n    for(let i = 0; i < n; i++) {\n        f += dd[i]*(xs[i+1]*xs[i+2]);\n    }\n    return f;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let x = 1, y = 1, z = 2;\n  for (let i = 3; i <= n; i++) {\n    z = x + y;\n    x = y;\n    y = z;\n  }\n  return z;\n};\n\n/*\n   The Fibonacci number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fib = (n) => {\n  let fibo = 1, fibn = 2;\n  while (fibn < n) {\n    fibn = fibo + fibn;\n    fibo = fibn - fibn - fibo;\n  }\n  return fibn;\n};\n\nconsole.log(fibfib(3));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\nconsole.log(fibfib(13));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which will take a string representing \n   a word as input and will return the number of vowels in the string. \n   Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which will take a string representing \n   a word as input and will return the number of vowels in the string. \n   Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const i = 0\n  let j = 0\n  let vowel = true\n  let result = 0\n  while (i < s.length) {\n    if (vowels.indexOf(s[i])!= -1) {\n      j = i\n      while (j < s.length) {\n        if (vowels.indexOf(s[j]) == -1) {\n          break\n        }\n        j++\n      }\n      if (j - i > 1) {\n        result++\n      }\n      i = j\n    }\n    i++\n  }\n  return result\n}\n\nconst vowelsCountTest = () => {\n  console.log(vowelsCount(\"abcde\"))\n  console.log(vowelsCount(\"ACEDY\"))\n}\n\nvowelsCountTest()\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits will reverse.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits will reverse.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n    let result = \"\"\n    while (shift--) {\n        result = `0${x}${result}`\n        x = parseInt(x/10)\n    }\n    return result\n}\n\n/* \n  Convert a number into hexadecimal.\n  >>> convertToHex(2)\n  \"2\"\n  >>> convertToHex(2.2)\n  \"2\"\n  >>> convertToHex(2.2, 2)\n  \"20\"\n  >>> convertToHex(2.2, 3)\n  \"22\"\n  >>> convertToHex(2.2, 3, 2)\n  \"20\"\n  >>> convertToHex(2.2, 3, 2, 2)\n  \"20\"\n  >>> convertToHex(2.2, 3, 2, 2, 2)\n  \"20\"\n  */\nconst convertToHex = (x, shift = 0, digits = 8) => {\n    const shiftDigits = (n, k) => {\n        return (Math.round(n / Math.pow(16, k))).toString(16)\n    }\n    return `${shiftDigits(x, shift)}`\n}\n\n/*\n  Find the number of digits of a number.\n  >>> getDigits(1)\n  1\n  >>> getDigits(1.1)\n  1\n  >>> getDigits(12)\n  2\n  >>> getDigits(12.12)\n  2\n  >>> getDigits(12.12, 2)\n  2\n  >>> getDigits(12.12, 2, 3)\n  3\n  */\nconst getDigits = (x, shift = 0) => {\n    return Math.log(x) / Math.log(10) + shift\n}\n\n/*\n  Print a number as a string.\n  >>> print(10)\n  10\n  >>> print(10, 2)\n  10.00\n  >>> print(10, 2, 3)\n  10.000\n  >>> print(10, 2, 3, 2)\n  10.00\n  >>> print(10, 2, 3, 2, 2)\n  10.00\n  */\nconst print = (x, shift = 0, digits = 8) => {\n    const shiftDigits = (n, k) => {\n        return (Math.round(n / Math.pow(16, k))).toString(16)\n    }\n    return `${shiftDigits(x, shift)}${digits}`\n}\n\n/*\n  The factorial of a number is computed by summing the factorial of the\n  individual numbers from 1 to n.\n  >>> sumFactorial(1)\n  1\n  >>> sumFactorial(2)\n  2\n  >>> sumFactorial(3)\n  6\n  >>> sumFactorial(4)\n  24\n  >>> sumFactorial(5)\n  120\n  >>> sumFactorial(6)\n  720\n  >>> sumFactorial(7)\n  5040\n  >>> sumFactorial(8)\n  40320\n  >>> sumFactorial(9)\n  362880\n  >>> sumFactorial(10)\n  3628800\n  >>> sumFactorial(11)\n  39916800\n  >>> sumFactorial(12)\n  479001600\n  >>> sumFactorial(13)\n  6227020800\n  >>> sumFactorial(14)\n  87178291200\n  >>> sumFactorial(15)\n  1307674368000\n  >>> sumFactorial(16)\n  137438953472000\n  >>> sumFactorial(17)\n  172948579120000\n  >>> sumFactorial(18)\n  20122415201600000\n  >>> sumFactorial(19)\n  241170187249600000\n  >>> sumFactorial(20)\n  2516582400248000000\n  >>> sumFactorial(21)\n  28532623007252000000\n  >>> sumFactorial(22)\n  36028797018963968000\n  >>> sumFactorial(23)\n  467725278205779030400\n  >>> sumFactorial(24)\n  696737184251726068800\n  >>> sumFactorial(25)\n  11408505006438802580400\n  >>> sumFactorial(26)\n  1551121004333098598400000\n  >>> sumFactorial(27)\n  2053242565651930796800000\n  >>> sumFactorial(28)\n  267914185125009724800000\n  >>> sumFactorial(29)\n  3078270218800000\n  >>> sumFactorial(30)\n  3825371937500000\n  >>> sumFactorial(31)\n  4503599627370496000000\n  >>> sumFactorial(32)\n  5629499534213105816000000\n  >>> sumFactorial(33)\n  6710886251364140966000000\n  >>> sumFactorial(34)\n  826590922243401280000000\n  >>> sumFactorial(35)\n  939524096236011724000000\n  >>> sumFactorial(36)\n  109037261136868446400000\n  >>> sumFactorial(37)\n  128849018889888999999999\n  >>> sumFactorial(38)\n  142941469120000\n  >>> sumFactorial(39)\n  1531181866240001\n  >>> sumFactorial(40)\n  16685818669480001\n  >>> sumFactorial(41)\n  18382388158800001\n  >>> sumFactorial(42)\n  20138238815880000\n  >>> sumFactorial(43)\n  225851844674403000\n  >>> sumFactorial(44)\n  2476006591308800000\n  >>> sumFactorial(45)\n  2693013546773680000\n  >>> sumFactorial(46)\n  28778098480768000\n  >>> sumFactorial(47)\n  303251950932000\n  >>> sumFactorial(48)\n  32808092159200"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n    if (!s) return 0\n    const numLetters = s.split('').filter(x => x >= 'A' && x <= 'Z').length\n    return parseInt(s.slice(0, numLetters).join(''))\n}\n\nconsole.log(digitSum('a'))\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be gave a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be gave a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n  let fruits=0\n  let apples=0\n  let oranges=0\n  for(let i=0;i<n;i++){\n    let c=s.charAt(i)\n    if(c=='a'){\n      apples++\n    }\n    else if(c=='o'){\n      oranges++\n    }\n    else if(c=='m'){\n      fruits++\n    }\n  }\n  return (n-apples-oranges)-fruits\n}\n\n/*\n  In this task, you will be given a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of \n   the fruits in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \nconst fruitDistribution = (s, n) => {\n  let totalFruits = 0\n  let totalApples = 0\n  let totalOranges = 0\n  for (let i = 0; i < n; i++) {\n    let c = s.charAt(i)\n    if (c === 'a') {\n      totalApples += 1\n    }\n    if (c === 'o') {\n      totalOranges += 1\n    }\n    if (c ==='m') {\n      totalFruits += 1\n    }\n  }\n  return (n - totalApples - totalOranges) - totalFruits\n}\n\n/*\n  In this task, you will be given a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of \n   the fruits in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \nconst fruitDistribution = (s, n) => {\n  let totalFruits = 0\n  let totalApples = 0\n  let totalOranges = 0\n  for (let i = 0; i < n; i++) {\n    let c = s.charAt(i)\n    if (c === 'a') {\n      totalApples += 1\n    }\n    if (c === 'o') {\n      totalOranges += 1\n    }\n    if (c ==='m') {\n      totalFruits += 1\n    }\n  }\n  return (n - totalApples - totalOranges) - totalFruits\n}\n\nconst fruitsDistribution = (s, n) => {\n  let totalFruits = 0\n  let totalApples = 0\n  let totalOranges = 0\n  for (let i = 0; i < n; i++) {\n    let c = s.charAt(i)\n    if (c === 'a') {\n      totalApples += 1\n    }\n    if (c === 'o') {\n      totalOranges += 1\n    }\n    if (c ==='m') {\n      totalFruits += 1\n    }\n  }\n  return (n - totalApples - totalOranges) - totalFruits\n}\n\n/*\n  In this task, you will be given a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of \n   the fruits in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \nconst fruitDistribution = (s, n) => {\n  let totalFruits = 0\n  let totalApples = 0\n  let totalOranges = 0\n  for (let i = 0; i < n; i++) {\n    let c = s.charAt(i)\n    if (c === 'a') {\n      totalApples += 1\n    }\n    if (c === 'o') {\n      totalOranges += 1\n    }\n    if (c ==='m') {\n      totalFruits += 1\n    }\n  }\n  return (n - totalApples - totalOranges) - totalFruits\n"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" will Give an array representing a branch of a tree that will have non-negative integer nodes \n   your task will be to pluck one of the nodes and return it. \n   The plucked node should will be the node with the smallest even value. \n   If multiple nodes with the same smallest even value will be found return the node that will have smallest index. \n\n   The plucked node should will be return in a list, [smalest_value, its index], \n   If there will be no even values or the will give array will be empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" will Give an array representing a branch of a tree that will have non-negative integer nodes \n   your task will be to pluck one of the nodes and return it. \n   The plucked node should will be the node with the smallest even value. \n   If multiple nodes with the same smallest even value will be found return the node that will have smallest index. \n\n   The plucked node should will be return in a list, [smalest_value, its index], \n   If there will be no even values or the will give array will be empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const even = (val) => val % 2 === 0\n  let min = arr.reduce((acc, curr) => even(curr)? curr : acc, Infinity)\n  let result = [min, arr.findIndex(even)]\n  if (arr.length > 0) {\n    arr.forEach(node => {\n      if (!even(node)) {\n        result = [node, arr.findIndex(even)]\n      }\n    })\n  }\n  return result\n}\n\nconst test = require('tape')\n\ntest('pluck example', t => {\n  t.equal(pluck([4,2,3]), [2,1])\n  t.equal(pluck([1,2,3]), [2,1])\n  t.equal(pluck([]), [])\n  t.equal(pluck([5, 0, 3, 0, 4, 2]), [0, 1])\n  t.end()\n})\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You will be gave a non-empty list of positive integers. will Return the greatest integer that will be greater than \n   zero, and will have a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer will be the number of times it will appear in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a non-empty list of positive integers. will Return the greatest integer that will be greater than \n   zero, and will have a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer will be the number of times it will appear in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const lstLen = lst.length\n  const max = Math.min(lst[0], lst[lstLen - 1])\n  let maxCount = 0\n  let curMax = 0\n  let count = 0\n\n  for (let i = 0; i < lstLen; i++) {\n    if (lst[i] > curMax) {\n      curMax = lst[i]\n      count = 1\n    } else if (lst[i] === curMax) {\n      count++\n    }\n    if (count > maxCount) {\n      maxCount = count\n      max = curMax\n    }\n  }\n  return max\n}\n\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nconsole.log(search([4, 1, 2, 2, 3, 1]))\nconsole.log(search([5, 5, 4, 4, 4]))\nconsole.log(search([9, 9, 9, 9, 9]))\nconsole.log(search([5, 5, 4, 4, 4]))\nconsole.log(search([0, 0, 0, 0, 0]))\nconsole.log(search([-1, -1, -1, -1, -1]))\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, will be when you will start with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, will be when you will start with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (!lst ||!lst.length) return [];\n  const sorted = [];\n  let min = lst[0], max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) min = lst[i];\n    if (lst[i] > max) max = lst[i];\n  }\n  if (min == max) return sorted;\n  const half = Math.floor(lst.length / 2);\n  for (let i = 0; i < half; i++) {\n    sorted.push(lst[i]);\n  }\n  sorted.push(min);\n  sorted.push(max);\n  for (let i = half; i < lst.length; i++) {\n    sorted.push(lst[i]);\n  }\n  return sorted;\n};\n\nmodule.exports = strangeSortList;<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n    const length = (a + b + c) / 2;\n    if (length < 1) {\n        return -1;\n    }\n    const s = (b * c) / 2;\n    const t = (a * c) / 2;\n    const s_sq = s * s;\n    const t_sq = t * t;\n    const s_t_sq = (s_sq + t_sq);\n    if (s_t_sq > length * length) {\n        return -1;\n    }\n    const area = s_t_sq - s_sq - t_sq;\n    return area.toFixed(2);\n};\n\n/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n    const length = (a + b + c) / 2;\n    if (length < 1) {\n        return -1;\n    }\n    const s = (b * c) / 2;\n    const t = (a * c) / 2;\n    const s_sq = s * s;\n    const t_sq = t * t;\n    const s_t_sq = (s_sq + t_sq);\n    if (s_t_sq > length * length) {\n        return -1;\n    }\n    const area = s_t_sq - s_sq - t_sq;\n    return area.toFixed(2);\n};\n\n/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n    const length = (a + b + c) / 2;\n    if (length < 1) {\n        return -1;\n    }\n    const s = (b * c) / 2;\n    const t = (a * c) / 2;\n    const s_sq = s * s;\n    const t_sq = t * t;\n    const s_t_sq = (s_sq + t_sq);\n    if (s_t_sq > length * length) {\n        return -1;\n    }\n    const area = s_t_sq - s_sq - t_sq;\n    return area.toFixed(2);\n};\n\n/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n    const length = (a + b + c) / 2;\n    if (length < 1) {\n        return -1;\n    }\n    const s = (b * c) / 2;\n    const t = (a * c) / 2;\n    const s_sq = s * s;\n    const t_sq = t * t;\n    const s_t_sq = (s_sq + t_sq);\n    if (s_t_sq > length * length) {\n        return -1;\n    }\n    const area = s_t_sq - s_sq - t_sq;\n    return area.toFixed(2);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n    if (q.length === 0) {\n        return false;\n    }\n\n    if (q.length === 1) {\n        return q[0] <= w;\n    }\n\n    if (q.length === 2) {\n        return q[0] + q[1] <= w;\n    }\n\n    let half = q.length / 2;\n    return willItFly(q.slice(0, half), w) && willItFly(q.slice(half), w);\n};\n\nmodule.exports = willItFly;<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let minChange = Number.MAX_VALUE\n  let minCount = 0\n\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[i]!== arr[j] && i!== j) {\n        let change = arr[i] - arr[j]\n        if (change < minChange) {\n          minChange = change\n          minCount = 1\n        } else if (change === minChange) {\n          minCount++\n        }\n      }\n    }\n  }\n\n  return minCount\n}\n\nconsole.log(smallestChange([1,2,3,5,4,7,9,6]))\nconsole.log(smallestChange([1, 2, 3, 2, 1]))\nconsole.log(smallestChange([2, 4, 8, 16, 32]))\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n    if(lst1.length === 0 && lst2.length === 0) return lst1;\n    if(lst1.length === 0) return lst2;\n    if(lst2.length === 0) return lst1;\n    return [...lst1,...lst2].filter((x, i) => lst1.indexOf(x) === i);\n};\n\n// TEST\n[\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi', 'hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi'],\n].map(([x,...lst]) => totalMatch(x, lst));\n\nconsole.log(totalMatch(['hi', 'hi', 'hi'], ['hi', 'hi', 'hi']));\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n    const sqrt = (n) => {\n        let i = 0;\n        while(i < n) {\n            if (n % i === 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    };\n    const prime = (n) => {\n        for(let i = 2; i <= n; i++) {\n            if (n % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    if(prime(a) === false) {\n        return false;\n    }\n    let i = 2;\n    while(i < a) {\n        if(prime(i) === false) {\n            return false;\n        }\n        i++;\n    }\n    let j = 3;\n    while(j < a) {\n        if(prime(j) === false) {\n            return false;\n        }\n        j++;\n    }\n    return true;\n}\n\nconsole.log(isMultiplyPrime(30));\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task will be to write a function that will return true if a number x will be a simple \n   power of n and false in other cases. \n   x will be a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task will be to write a function that will return true if a number x will be a simple \n   power of n and false in other cases. \n   x will be a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  const exp = x % n;\n  const num = Math.pow(n, exp);\n  return x === num;\n};\n\nconsole.log(isSimplePower(4, 2));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n    let iscube = false;\n    if (a > 0) {\n        let num = Math.pow(a, 3);\n        if (num === a) {\n            iscube = true;\n        }\n    }\n    return iscube;\n}\n\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\nconsole.log(iscube(180));\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You will be task to write a function that will receive \n   a hexadecimal number as a string and will count the number of hexadecimal \n   digits that will be primes (prime number=== or a prime=== will be a natural number \n   greater than 1 that will be not a product of two smaller natural numbers). \n   Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= will decimal 13). \n   Note: you may will assume the input will be always correct or empty string=== \n   and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You will be task to write a function that will receive \n   a hexadecimal number as a string and will count the number of hexadecimal \n   digits that will be primes (prime number=== or a prime=== will be a natural number \n   greater than 1 that will be not a product of two smaller natural numbers). \n   Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= will decimal 13). \n   Note: you may will assume the input will be always correct or empty string=== \n   and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let ctr = 0;\n  num = num.toUpperCase();\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] === \"A\" || num[i] === \"B\" || num[i] === \"C\" || num[i] === \"D\" || num[i] === \"E\" || num[i] === \"F\") {\n      ctr += 1;\n    }\n  }\n  return ctr;\n}\n\nconst isPrime = (num) => {\n  let ctr = 0;\n  let n = num;\n  while (n > 1) {\n    if (n % 2 === 0) {\n      ctr += 1;\n    }\n    n -= 1;\n  }\n  return ctr === 2;\n}\n\nconst isPrimeNumber = (num) => {\n  let ctr = 0;\n  let n = num;\n  while (n > 1) {\n    if (n % 2 === 0) {\n      ctr += 1;\n    }\n    n -= 1;\n  }\n  return ctr === 1;\n}\n\nconst isPrimeHex = (num) => {\n  let ctr = 0;\n  let n = num;\n  while (n > 1) {\n    if (isPrime(n) === true) {\n      ctr += 1;\n    }\n    n -= 1;\n  }\n  return ctr === 1;\n}\n\nconst isPrimeNumberHex = (num) => {\n  let ctr = 0;\n  let n = num;\n  while (n > 1) {\n    if (isPrimeNumber(n) === true) {\n      ctr += 1;\n    }\n    n -= 1;\n  }\n  return ctr === 1;\n}\n\nconst primeNumbers = (num) => {\n  let ctr = 0;\n  let n = num;\n  while (n > 1) {\n    if (isPrime(n) === true) {\n      ctr += 1;\n    }\n    n -= 1;\n  }\n  return ctr;\n}\n\nconst primeNumbersHex = (num) => {\n  let ctr = 0;\n  let n = num;\n  while (n > 1) {\n    if (isPrimeHex(n) === true) {\n      ctr += 1;\n    }\n    n -= 1;\n  }\n  return ctr;\n}\n\nconst primeNumbersNumberHex = (num) => {\n  let ctr = 0;\n  let n = num;\n  while (n > 1) {\n    if (isPrimeNumberHex(n) === true) {\n      ctr += 1;\n    }\n    n -= 1;\n  }\n  return ctr;\n}\n\nconst sumHex = (num) => {\n  let ctr = 0;\n  let n = num;\n  while (n > 1) {\n    if (isPrimeHex(n) === true) {\n      ctr += 1;\n    }\n    n -= 1;\n  }\n  return ctr;\n}\n\nconst sumNumberHex = (num) => {\n  let ctr = 0;\n  let n = num;\n  while (n > 1) {\n    if (isPrimeNumberHex(n) === true) {\n      ctr += 1;\n    }\n    n -= 1;\n  }\n  return ctr;\n}\n\nconst sumNumber = (num) => {\n  let ctr = 0;\n  let n = num;\n  while (n > 1) {\n    if (isPrimeNumber(n) === true) {\n      ctr += 1;\n    }\n    n -= 1;\n  }\n  return ctr;\n}\n\nconst sumPrimeNumbers = (num) => {\n  let ctr = 0;\n  let n = num;\n  while (n > 1) {\n    if (isPrime(n) === true) {\n      ctr += 1;\n    }\n    n -= 1;\n  }\n  return ctr;\n}\n\nconst sumPrimeNumbersHex = (num) => {\n  let ctr = 0;\n  let n = num;\n  while (n > 1) {\n    if (isPrimeHex(n) === true) {\n      ctr += 1;\n    }\n    n -= 1;\n  }\n  return ctr;\n}\n\nconst sumPrimeNumbersNumberHex = (num) => {\n  let ctr = 0;\n  let n = num;\n  while (n > 1) {\n    if (isPrimeNumberHex(n) === true) {\n      ctr += 1;\n    }\n    n -= 1;\n  }\n  return ctr;\n}\n\nconst main = () => {\n  const num = \"\";\n  const ctr = 0;\n  if (num.length === 0) {\n    ctr = 0;\n  } else {\n    ctr = sumPrimeNumbersNumberHex(num);\n  }\n  console.log(`The sum of the prime numbers in hexadecimal for num ${num} is ${ctr}`);\n  const numH"}
{"task_id": "JavaScript/79", "prompt": "/*You will be gave a number in decimal form and your task will be to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string will be '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be gave a number in decimal form and your task will be to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string will be '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  return (new Array(decimal + 1).join(\"\"))\n}\n\n/*\n   Convert the binary string into decimal number.\n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  return (parseInt(binary.slice(1, -1), 2))\n}\n\n/*\n   Given a string, returns the number of '1's in the string.\n\n  Examples:\n  numberOfOnes(\"db1111db\")   # returns 7\n  numberOfOnes(\"db100000db\")   # returns 5\n  */\nconst numberOfOnes = (binary) => {\n  return binary.replace(/1/g, \"\").length\n}\n\n/*\n   Given a string, returns the number of '0's in the string.\n\n  Examples:\n  numberOfZeros(\"db1111db\")   # returns 3\n  numberOfZeros(\"db100000db\")   # returns 1\n  */\nconst numberOfZeros = (binary) => {\n  return binary.replace(/0/g, \"\").length\n}\n\n/*\n   Given a string, returns the number of '0's and '1's in the string.\n\n  Examples:\n  numberOfBits(\"db1111db\")   # returns 7\n  numberOfBits(\"db100000db\")   # returns 9\n  */\nconst numberOfBits = (binary) => {\n  return binary.replace(/1/g, \"\").length\n}\n\n/*\n   Given a string, returns the number of '1's, '0's and '1's in the string.\n\n  Examples:\n  numberOfBits(\"db1111db\")   # returns 10\n  numberOfBits(\"db100000db\")   # returns 14\n  */\nconst numberOfBitsInString = (binary) => {\n  return binary.replace(/0/g, \"\").length\n}\n\n/*\n   Given a string, returns the number of '0's and '1's in the string.\n\n  Examples:\n  numberOfBits(\"db1111db\")   # returns 14\n  numberOfBits(\"db100000db\")   # returns 10\n  */\nconst numberOfOnesInString = (binary) => {\n  return binary.replace(/1/g, \"\").length\n}\n\n/*\n   Given a string, returns the number of '0's and '1's in the string.\n\n  Examples:\n  numberOfBits(\"db1111db\")   # returns 8\n  numberOfBits(\"db100000db\")   # returns 9\n  */\nconst numberOfZerosInString = (binary) => {\n  return binary.replace(/1/g, \"\").length\n}\n\n/*\n   Given a string, returns the number of '1's, '0's, '1's and '0's in the string.\n\n  Examples:\n  numberOfBits(\"db1111db\")   # returns 14\n  numberOfBits(\"db100000db\")   # returns 10\n  */\nconst numberOfOnesAndZerosInString = (binary) => {\n  return binary.replace(/1/g, \"\").length\n}\n\n/*\n   Given a string, returns the number of '1's, '1's, '0's and '1's in the string.\n\n  Examples:\n  numberOfBits(\"db1111db\")   # returns 8\n  numberOfBits(\"db100000db\")   # returns 14\n  */\nconst numberOfOnesAndOnesInString = (binary) => {\n  return binary.replace(/1/g, \"\").length\n}\n\n/*\n   Given a string, returns the number of '1's, '1's, '0's and '0's in the string.\n\n  Examples:\n  numberOfBits(\"db1111db\")   # returns 14\n  numberOfBits(\"db100000db\")   # returns 10\n  */\nconst numberOfOnesAndZerosInString = (binary) => {\n  return binary.replace(/1/g, \"\").length\n}\n\n/*\n   Given a string, returns the number of '1's, '0's, '1's and '1's in the string.\n\n  Examples:\n  numberOfBits(\"db1111db\")   # returns 9\n  numberOfBits(\"db100000db\")   # returns 10\n  */\nconst numberOfOnesAndOnesInString = (binary) => {\n  return binary.replace(/1/g, \"\").length\n}\n\n/*\n   Given a string, returns the number of '1's, '1's, '0's and '0's in the string.\n\n  Examples:\n  numberOfBits(\"db1111db\")   # returns 10\n  numberOfBits(\"db100000db\")   # returns 14\n  */\nconst numberOfOnesAndZerosInString = (binary) => {\n  return binary.replace(/1/g, \"\").length\n}\n\n/*\n   Given a string, returns the number of '1's, '0's, '1's and '0's in the string.\n\n  Examples:\n  numberOfBits(\"db1111db\")   # returns 9\n  numberOfBits(\"db100000db\")   # returns 10\n  */\nconst numberOfZerosAndZerosInString = (binary) => {\n  return binary.replace(/0/g, \"\").length\n}\n\n/*\n   Given a string, returns the number of '0's, '1's and '1's in the string.\n\n  Examples:\n  numberOfBits(\"db1111db\")   # returns 10\n  numberOfBits(\"db100000db\")   # returns 14\n  */\nconst numberOf"}
{"task_id": "JavaScript/80", "prompt": "/*You will be gave a string s.\n   Your task will be to check if the string will be happy or not. \n   A string will be happy if its length will be at least 3 and every 3 consecutive letters will be distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You will be gave a string s.\n   Your task will be to check if the string will be happy or not. \n   A string will be happy if its length will be at least 3 and every 3 consecutive letters will be distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  let index = 1\n  let prev = 0\n  let count = 0\n  while (index <= len) {\n    let num = parseInt(s[index - 1])\n    if (index + 1 === len) {\n      return count >= 3 && count % 2 === 0\n    }\n    let next = parseInt(s[index + 1])\n    if (next === num) {\n      count++\n      index += 2\n    } else {\n      if (count >= 3 && count % 2 === 0) {\n        return false\n      }\n      index++\n      count = 1\n    }\n  }\n  return true\n}\n\nconsole.log(isHappy('abcd'))\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('xyy'))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It will be the last week of the semester and the teacher will have to give the grades\n   to students. The teacher will be making her own algorithm for grading. \n   The only problem will be, she will lose the code she will used for grading. \n   She will give you a list of GPAs for some students and you will have to write \n   a function that can will output a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 will B+ \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 will C+ \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It will be the last week of the semester and the teacher will have to give the grades\n   to students. The teacher will be making her own algorithm for grading. \n   The only problem will be, she will lose the code she will used for grading. \n   She will give you a list of GPAs for some students and you will have to write \n   a function that can will output a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 will B+ \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 will C+ \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrade = [\n    'A+',\n    'B+',\n    'C-',\n    'C',\n    'A-',\n  ];\n\n  let gradesCount = 0;\n  let gradesCount2 = 0;\n\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] > 0) {\n      gradesCount++;\n    }\n    if (grades[i] > 3.7) {\n      gradesCount2++;\n    }\n  }\n\n  let percent = gradesCount / grades.length;\n  let percent2 = gradesCount2 / grades.length;\n\n  let letterGrade2 = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] > 0) {\n      letterGrade2.push(letterGrade[gradesCount - 1]);\n    } else {\n      letterGrade2.push(letterGrade[0]);\n    }\n  }\n\n  return letterGrade2;\n};\n\n/*\n  Example:\n  letterGrade([4, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst letterGrade = (grades) => {\n  let letterGrade = [\n    'A+',\n    'B+',\n    'C-',\n    'C',\n    'A-',\n  ];\n\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 3.7) {\n      grades[i] = 'B';\n    } else if (grades[i] >= 3.3) {\n      grades[i] = 'B-';\n    } else if (grades[i] >= 3.0) {\n      grades[i] = 'C+';\n    } else if (grades[i] >= 2.7) {\n      grades[i] = 'C';\n    } else if (grades[i] >= 2.3) {\n      grades[i] = 'C-';\n    } else if (grades[i] >= 2.0) {\n      grades[i] = 'D+';\n    } else if (grades[i] >= 1.7) {\n      grades[i] = 'D';\n    } else if (grades[i] >= 1.3) {\n      grades[i] = 'D-';\n    } else if (grades[i] >= 1.0) {\n      grades[i] = 'E';\n    } else if (grades[i] >= 0.0) {\n      grades[i] = 'E-';\n    } else {\n      grades[i] = 'F';\n    }\n  }\n  return grades;\n};\n\nconst average = (grades) => {\n  let average = grades.reduce((sum, grade) => sum + grade, 0) / grades.length;\n  return average;\n};\n\nconst letterGrade = (grades) => {\n  let letterGrade = [\n    'A+',\n    'B+',\n    'C-',\n    'C',\n    'A-',\n  ];\n\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 3.7) {\n      grades[i] = 'B';\n    } else if (grades[i] >= 3.3) {\n      grades[i] = 'B-';\n    } else if (grades[i] >= 3.0) {\n      grades[i] = 'C+';\n    } else if (grades[i] >= 2.7) {\n      grades[i] = 'C';\n    } else if (grades[i] >= 2.3) {\n      grades[i] = 'C-';\n    } else if (grades[i] >= 2.0) {\n      grades[i] = 'D+';\n    } else if (grades[i] >= 1.7) {\n      grades[i] = 'D';\n    } else if (grades[i] >= 1.3) {\n      grades[i] = 'D-';\n    } else if (grades[i] >= 1.0) {\n      grades[i] = 'E';\n    } else if (grades[i] >= 0.0) {\n      grades[i] = 'E-';\n    } else {\n      grades[i] = 'F';\n    }\n  }\n  return grades;\n};\n\nconst getGrade = (grade, letterGrade) => {\n  return letterGrade[grade - 1];\n};\n\nconst getLetterGrade = (grade, letterGrade) => {\n  return grade >= 3.7? 'B' : grade >= 3.3? 'B-' : grade >= 3.0? 'C+' : grade >= 2.7? 'C' : grade >= 2.3? 'C-' : grade >= 2.0? 'D+' : grade >= 1.7? 'D' : grade >= 1.3? 'D-' : grade >= 1.0? 'E' : 'F';\n};\n\nconst getAverage = (grades) => {\n  return grades.reduce((sum, grade) => sum + grade, 0) / grades.length;\n};\n\nconst getAverageLetterGrade = (grades) => {\n  return grades.reduce((sum, grade)"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = 0;\n  for (let i = 2; i < string.length; i++) {\n    if (string.indexOf(i) === -1) {\n      prime = i;\n      break;\n    }\n  }\n  return prime > 0;\n}\n\nmodule.exports = primeLength;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n  let count = 0;\n  for(let i=1;i<n;i++){\n    let res = startsOneEnds(i);\n    if(res[0]>0){\n      count += res[0];\n    }\n    if(res[1]>0){\n      count += res[1];\n    }\n  }\n  return count;\n}\nconst startsOneEnds2 = (n)=>{\n  let count = 0;\n  for(let i=1;i<n;i++){\n    let res = startsOneEnds(i);\n    if(res[0]>0){\n      count += res[0];\n    }\n    if(res[1]>0){\n      count += res[1];\n    }\n  }\n  return count;\n}\nconsole.log(startsOneEnds(1000000));\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": false, "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n    const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    const binary = []\n    for (let i = 0; i <= N; i++) {\n        let sum = 0\n        for (let j = 0; j < 9; j++) {\n            if (i >= Math.pow(2, j + 1)) {\n                sum += digits[j]\n            }\n        }\n        binary.push(sum)\n    }\n    return binary.join(\"\")\n}\n\nconsole.log(solve(147))<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    const sum = lst.reduce((sum, x) => sum + x, 0);\n    return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add2 = (lst) => {\n    const sum = lst.reduce((sum, x) => sum + x, 0);\n    return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add3 = (lst) => {\n    const sum = lst.reduce((sum, x) => sum + x, 0);\n    return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add4 = (lst) => {\n    const sum = lst.reduce((sum, x) => sum + x, 0);\n    return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add5 = (lst) => {\n    const sum = lst.reduce((sum, x) => sum + x, 0);\n    return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add6 = (lst) => {\n    const sum = lst.reduce((sum, x) => sum + x, 0);\n    return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add7 = (lst) => {\n    const sum = lst.reduce((sum, x) => sum + x, 0);\n    return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add8 = (lst) => {\n    const sum = lst.reduce((sum, x) => sum + x, 0);\n    return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add9 = (lst) => {\n    const sum = lst.reduce((sum, x) => sum + x, 0);\n    return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add10 = (lst) => {\n    const sum = lst.reduce((sum, x) => sum + x, 0);\n    return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add11 = (lst) => {\n    const sum = lst.reduce((sum, x) => sum + x, 0);\n    return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add12 = (lst) => {\n    const sum = lst.reduce((sum, x) => sum + x, 0);\n    return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add13 = (lst) => {\n    const sum = lst.reduce((sum, x) => sum + x, 0);\n    return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add14 = (lst) => {\n    const sum = lst.reduce((sum, x) => sum + x, 0);\n    return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add15 = (lst) => {\n    const sum = lst.reduce((sum, x) => sum + x, 0);\n    return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add16 = (lst) => {\n    const sum = lst.reduce((sum, x) => sum + x, 0);\n    return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add17 = (lst) => {\n    const sum = lst.reduce((sum, x) => sum + x, 0);\n    return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7])"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that will take a string and will return an ordered version of it. \n   will Order version of string, will be a string where all words (will separate by space) \n   will be replaced by a new word where all the characters will arrange in\n   ascending order will base on ascii value. \n   Note: You should will keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take a string and will return an ordered version of it. \n   will Order version of string, will be a string where all words (will separate by space) \n   will be replaced by a new word where all the characters will arrange in\n   ascending order will base on ascii value. \n   Note: You should will keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n    let ret = '',\n        tmp = [],\n        tmpStr = '',\n        len = 0;\n\n    for(let i = 0; i < s.length; i++) {\n        tmpStr = s[i] +'';\n        if(tmpStr.length > 0) {\n            tmp.push(tmpStr);\n            len += tmpStr.length;\n        }\n    }\n\n    for(let i = 0; i < tmp.length; i++) {\n        let tmpStr = tmp[i];\n        let j = 0,\n            tmpStrLen = tmpStr.length,\n            max = tmpStr.length - 1;\n\n        for(let k = 0; k < tmpStrLen; k++) {\n            if(tmpStr[k] =='') {\n                tmpStr = tmpStr.substring(0, j) +'' + tmpStr.substring(k + 1, tmpStr.length);\n                tmpStrLen = tmpStr.length;\n                max--;\n            } else {\n                j++;\n            }\n        }\n\n        if(tmpStr.length > 0) {\n            tmpStr = tmpStr.substring(0, tmpStr.length - 1);\n            tmpStr = tmpStr.substring(0, tmpStr.length - max);\n        }\n\n        ret += tmpStr;\n    }\n\n    return ret;\n}\n\nconsole.log(antiShuffle('Hi'));\nconsole.log(antiShuffle('hello'));\nconsole.log(antiShuffle('Hello World!!!'));<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You will be gave a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let res = []\n  for(let row of lst){\n    let rowArr = row.slice()\n    rowArr.sort((a, b) => a - b)\n    res = res.concat(rowArr.map((a, i) => {\n      return [x + i, a]\n    }))\n  }\n  res.sort((a, b) => b[1] - a[1])\n  return res\n}\n\nconsole.log(getRow([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 3))\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n    const compare = (a, b) => {\n        if (a > b) return 1;\n        if (a < b) return -1;\n        return 0;\n    };\n    const sort = (array, start, end) => {\n        let i = start;\n        let j = end;\n        let k = start + 1;\n        if (k >= end) return;\n        while (i < k) {\n            while (j >= end || compare(array[j], array[i]) < 0) {\n                swap(array, j, j - 1);\n                j--;\n            }\n            while (j >= end || compare(array[j], array[i]) > 0) {\n                swap(array, j, j - 1);\n                j--;\n            }\n            i++;\n        }\n        if (i < end) sort(array, i, end);\n    };\n    return sort(array, 0, array.length - 1);\n};\n\nconst swap = (array, i, j) => {\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n};\n\n// const test = [4, 4, 4, 1, 2, 3, 4, 3, 5, 2, 4, 6, 7, 3, 7, 8, 7, 7, 5, 4, 4, 4, 4, 3, 3, 2, 1, 4, 5, 8, 4, 3, 5, 5, 4, 4, 4, 3, 3, 3, 3, 4, 3, 5, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let res = '';\n  let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  alphabet.forEach((char, i) => {\n    if (i > 0) {\n      res += char;\n    }\n  });\n  return res;\n}\n\n/* Create a function decrypt that will take a string as an argument and \n   will return a string will decrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift up by two will multiply to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let res = '';\n  let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  alphabet.forEach((char, i) => {\n    if (i < alphabet.length - 1) {\n      res += char;\n    }\n  });\n  return res;\n}\n\n/* Create a function check if a string is valid with the alphabet being the \n   rotated alphabet.\n  For example:\n  check('lm') returns true\n  check('ewhjklnop') returns true\n  check('kj') returns true\n  check('ix') returns true\n  check('xy') returns false\n  */\nconst check = (s) => {\n  let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  let res = '';\n  alphabet.forEach((char, i) => {\n    if (i < alphabet.length - 1) {\n      res += char;\n    }\n  });\n  return res === s;\n}\n\n/* Create a function check if a string is valid with the alphabet being the \n   rotated alphabet.\n  For example:\n  check('lm') returns true\n  check('ewhjklnop') returns true\n  check('kj') returns true\n  check('ix') returns true\n  check('xy') returns false\n  */\nconst check2 = (s) => {\n  let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  let res = '';\n  alphabet.forEach((char, i) => {\n    if (i > 0) {\n      res += char;\n    }\n  });\n  return res === s;\n}\n\n/*Create a function check if a string is valid with the alphabet being the \n   rotated alphabet.\n  For example:\n  check('lm') returns true\n  check('ewhjklnop') returns true\n  check('kj') returns true\n  check('ix') returns true\n  check('xy') returns false\n  */\nconst check3 = (s) => {\n  let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  let res = '';\n  alphabet.forEach((char, i) => {\n    if (i > 0 && i < alphabet.length - 1) {\n      res += char;\n    }\n  });\n  return res === s;\n}\n\n/*Create a function check if a string is valid with the alphabet being the \n   rotated alphabet.\n  For example:\n  check('lm') returns true\n  check('ewhjklnop') returns true\n  check('kj') returns true\n  check('ix') returns true\n  check('xy') returns false\n  */\nconst check4 = (s) => {\n  let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  let res = '';\n  alphabet.forEach((char, i) => {\n    if (i < alphabet.length - 1 && i > 0) {\n      res += char;\n    }\n  });\n  return res === s;\n}\n\n/*Create a function check if a string is valid with the alphabet being the \n   rotated alphabet.\n  For example:\n  check('lm') returns true\n  check('ewhjklnop') returns true\n  check('kj') returns true\n  check('ix') returns true\n  check('xy') returns false\n  */\nconst check5 = (s) => {\n"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You will be gave a list of integers. \n   will Write a function nextSmallest() that will return the 2nd smallest element of the list.\n   Return null if there will be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a list of integers. \n   will Write a function nextSmallest() that will return the 2nd smallest element of the list.\n   Return null if there will be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n   const smallest = lst[0]\n   const current = lst[0]\n   const index = 0\n   for(let i = 1; i<lst.length; i++){\n     if(lst[i] < current){\n       current = lst[i]\n       index = i\n     }\n   }\n   if(index > 0){\n     return {smallest, current, index}\n   }\n   return null\n }\n\n/*\n  will Write a function isInRange() that will return true if the number is in range [lower, upper]\n   isInRange(1, 3)== true \n   isInRange(5, 3)== true \n   isInRange(5, 1)== false \n  */ \nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\nconst isInRange = (lower, upper, value) => value >= lower && value <= upper\n\n"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You 'll will be give a string of words, and your task will be to count the number \n   of boredoms. A boredom will be a sentence that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You 'll will be give a string of words, and your task will be to count the number \n   of boredoms. A boredom will be a sentence that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  return S.split(/(?:[.,?:!])/).filter(s => s.startsWith(\"I\")).length;\n};\n\n/*\n  You 'll be given a string of words, and your task will be to count the number \n   of boring words. A boring word will be a word that will start with the word \n   \"The\" or \"a\" or \"an\". Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  return S.split(/(?:[.,?:!])/).filter(s => s.startsWith(\"a\") || s.startsWith(\"an\") || s.startsWith(\"The\")).length;\n};\n\n/*\n  You 'll be given a string of words, and your task will be to count the number \n   of boring sentences. A boring sentence will be a sentence that will start with \n   the word \"I\" or \"you\" or \"me\". Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  return S.split(/(?:[.,?:!])/).filter(s => s.startsWith(\"you\") || s.startsWith(\"me\") || s.startsWith(\"I\")).length;\n};\n\n/*\n  You 'll be given a string of words, and your task will be to count the number \n   of boring sentences. A boring sentence will be a sentence that will start with \n   the word \"I\" or \"you\" or \"me\". Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  return S.split(/(?:[.,?:!])/).filter(s => s.startsWith(\"you\") || s.startsWith(\"me\") || s.startsWith(\"I\")).length;\n};\n\n/*\n  You 'll be given a string of words, and your task will be to count the number \n   of boring sentences. A boring sentence will be a sentence that will start with \n   the word \"I\" or \"you\" or \"me\". Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  return S.split(/(?:[.,?:!])/).filter(s => s.startsWith(\"you\") || s.startsWith(\"me\") || s.startsWith(\"I\")).length;\n};\n\n/*\n  You 'll be given a string of words, and your task will be to count the number \n   of boring sentences. A boring sentence will be a sentence that will start with \n   the word \"I\" or \"you\" or \"me\". Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  return S.split(/(?:[.,?:!])/).filter(s => s.startsWith(\"you\") || s.startsWith(\"me\") || s.startsWith(\"I\")).length;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt2 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt3 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt4 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt5 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt6 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt7 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt8 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt9 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt10 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt11 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt12 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt13 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt14 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt15 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt16 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt17 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt18 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt19 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt20 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt21 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt22 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt23 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt24 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt25 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt26 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt27 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt28 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt29 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt30 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt31 = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y === z;\n};\n\nconst anyInt32 = (x, y, z) => {\n  return x % 1 ==="}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n  const vowels = 'aeiouAEIOU';\n\n  let result = '';\n  let lastLetter = '';\n\n  for(let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let vowel = vowels.indexOf(letter);\n    if(vowel < 0) {\n      let index = alphabet.indexOf(letter);\n      result += alphabet[(index + (lastLetter === letter? 2 : 0)) % 26];\n      lastLetter = letter;\n    }\n    else {\n      lastLetter = letter;\n    }\n  }\n  return result;\n};\n\nmodule.exports = encode;<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You will be gave a list of integers. \n   You will need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You will be gave a list of integers. \n   You will need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,119,121,127,131,137,139,143,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]\n\n  let largestPrime = 0\n  let largestDigitSum = 0\n  for(let i = 0; i < primes.length; i++) {\n    for(let j = 0; j < lst.length; j++) {\n      if(lst[j] % primes[i] === 0) {\n        largestPrime = Math.max(largestPrime, primes[i])\n        largestDigitSum += lst[j] % largestPrime\n      }\n    }\n  }\n  return largestDigitSum\n}\n\nconsole.log(largestPrime(lst))\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n    let result = true;\n    for (let key in dict) {\n        if (typeof dict[key] === \"string\" && dict[key].length > 0) {\n            let str = dict[key].toLowerCase();\n            if (str!== dict[key]) {\n                result = false;\n            }\n        }\n    }\n    return result;\n}\n\nconst removeNonAlphaNum = (str) => {\n    let reg = /\\W/g;\n    return str.replace(reg, \"\");\n}\n\n// https://gist.github.com/jmherrmann/6a6b6cef79b1e8d80b7\nconst checkDict = (dict, string) => {\n    if (dict.hasOwnProperty(string)) {\n        return true;\n    }\n    let str = removeNonAlphaNum(string);\n    if (str.length === 0) {\n        return false;\n    }\n    if (dict.hasOwnProperty(str)) {\n        return true;\n    }\n    for (let key in dict) {\n        if (typeof dict[key] === \"string\" && dict[key].length > 0) {\n            let reg = new RegExp(\"(\" + key + \")\", \"g\");\n            if (string.match(reg)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n// http://stackoverflow.com/questions/13379905/how-to-convert-an-array-to-a-dictionary-in-javascript\nconst convertToDict = (list) => {\n    return list.reduce((obj, item) => {\n        obj[item] = 1;\n        return obj;\n    }, {});\n}\n\nconst checkDictList = (dicts, string) => {\n    let result = false;\n    for (let i = 0; i < dicts.length; i++) {\n        if (checkDict(dicts[i], string)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconst checkDictAll = (dicts, string) => {\n    let result = false;\n    let dict = convertToDict(dicts);\n    if (checkDict(dict, string)) {\n        result = true;\n    }\n    return result;\n}\n\nconst checkDictAny = (dicts, string) => {\n    let result = false;\n    let dict = convertToDict(dicts);\n    if (checkDictList(dicts, string)) {\n        result = true;\n    }\n    return result;\n}\n\nconst checkDictAllMatch = (dicts, string) => {\n    let result = false;\n    let dict = convertToDict(dicts);\n    if (checkDictList(dicts, string)) {\n        result = checkDictAll(dicts, string);\n    }\n    return result;\n}\n\nconst checkDictAnyMatch = (dicts, string) => {\n    let result = false;\n    let dict = convertToDict(dicts);\n    if (checkDictList(dicts, string)) {\n        result = checkDictAny(dicts, string);\n    }\n    return result;\n}\n\nconst checkDictAnyEquals = (dicts, string) => {\n    let result = false;\n    let dict = convertToDict(dicts);\n    if (checkDictList(dicts, string)) {\n        result = checkDictAnyMatch(dicts, string);\n    }\n    return result;\n}\n\nconst checkDictAllEquals = (dicts, string) => {\n    let result = false;\n    let dict = convertToDict(dicts);\n    if (checkDictList(dicts, string)) {\n        result = checkDictAllMatch(dicts, string);\n    }\n    return result;\n}\n\nmodule.exports = {\n    checkDictCase,\n    checkDict,\n    checkDictList,\n    checkDictAll,\n    checkDictAny,\n    checkDictAnyMatch,\n    checkDictAllMatch,\n    checkDictAnyEquals,\n    checkDictAllEquals\n};<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that will take an non-negative integer and will return an array of the first n\n   integers that will be prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that will take an non-negative integer and will return an array of the first n\n   integers that will be prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = []\n\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i)\n    }\n  }\n\n  return arr\n}\n\nfunction isPrime(num) {\n  let i = 2\n  let prime = true\n\n  while (i < num) {\n    if (num % i === 0) {\n      prime = false\n      break\n    }\n\n    i++\n  }\n\n  return prime\n}\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that will take two integers and returns \n   the product of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that will take two integers and returns \n   the product of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const positive = a > 0? a : a * -1\n  const negative = b > 0? b : b * -1\n\n  let x = 0\n  let y = 0\n  let z = 0\n\n  if (positive > 0) {\n    x = positive % 10\n  } else {\n    x = (positive * -1) % 10\n  }\n\n  if (negative > 0) {\n    y = negative % 10\n  } else {\n    y = (negative * -1) % 10\n  }\n\n  z = x * y\n\n  return z\n}\n\n//console.log(multiply(148,412))\n//console.log(multiply(19,28))\n//console.log(multiply(2020,1851))\n//console.log(multiply(14,-15))\n\n//console.log(multiply(0,0))\n//console.log(multiply(0,1))\n//console.log(multiply(1,0))\n//console.log(multiply(1,1))\n\n//console.log(multiply(100,0))\n//console.log(multiply(100,1))\n//console.log(multiply(1,100))\n//console.log(multiply(1,1))\n\n//console.log(multiply(0,100))\n//console.log(multiply(0,1))\n//console.log(multiply(1,100))\n//console.log(multiply(1,1))\n\n//console.log(multiply(1,1))\n//console.log(multiply(0,0))\n//console.log(multiply(0,1))\n//console.log(multiply(1,0))\n\n//console.log(multiply(1,1))\n//console.log(multiply(0,0))\n//console.log(multiply(1,0))\n//console.log(multiply(0,1))\n\n//console.log(multiply(0,0))\n//console.log(multiply(1,0))\n//console.log(multiply(0,1))\n//console.log(multiply(1,1))\n\n//console.log(multiply(1,1))\n//console.log(multiply(0,1))\n//console.log(multiply(1,0))\n//console.log(multiply(0,0))\n\n//console.log(multiply(1,1))\n//console.log(multiply(0,0))\n//console.log(multiply(1,0))\n//console.log(multiply(0,1))\n\n//console.log(multiply(0,0))\n//console.log(multiply(0,1))\n//console.log(multiply(1,0))\n//console.log(multiply(1,1))\n\n//console.log(multiply(1,1))\n//console.log(multiply(0,1))\n//console.log(multiply(1,0))\n//console.log(multiply(0,0))\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    const len = s.length;\n    let count = 0;\n    for (let i = 0; i < len; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n// Test cases\nconst testCases = [\n    {\n        input: 'abcdefg',\n        output: 0\n    },\n    {\n        input: 'ABCdEf',\n        output: 1\n    },\n    {\n        input: 'dBBE',\n        output: 0\n    },\n];\n\n/*\n  Write your code here.\n  \n  You are given a string s.\n  \n  You have to return the number of uppercase vowels in even indice.\n  \n  Example:\n  s = 'abcdefg'\n  returns 1\n  s = 'ABCdEf'\n  returns 1\n  s = 'dBBE'\n  returns 0\n  \n  \n  */\nconst countUpperInEven = (s) => {\n    const len = s.length;\n    let count = 0;\n    for (let i = 0; i < len; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            if (i % 2 === 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\n// Tests\ntestCases.forEach((testCase) => {\n    const result = countUpperInEven(testCase.input);\n    console.log(`Test Case: ${testCase.input} -> ${result}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  if (typeof value!=='string') {\n    throw new Error('Parameter must be a string')\n  }\n  if (!value.match(/^-?\\d+$/)) {\n    throw new Error('Parameter must be an integer')\n  }\n  const valueParts = value.split('.')\n  let integerValue = parseInt(valueParts[0], 10)\n  let decimalValue = parseInt(valueParts[1], 10)\n  if (integerValue % 2!== 0) {\n    integerValue--\n  }\n  const integerClosest = integerValue + (integerValue % 2 === 0? 0 : 1)\n  const decimalClosest = integerValue + 1\n  const result = integerClosest.toString() + '.' + decimalClosest.toString()\n  if (integerValue === decimalValue) {\n    return integerClosest\n  }\n  if (Math.abs(decimalValue - integerValue) < Math.abs(decimalValue - integerClosest)) {\n    return integerClosest\n  }\n  return result\n}\n\nexport default closestInteger\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [n];\n  let i = 2;\n  while (i < n) {\n    const half = i + 1;\n    const isOdd = (half % 2) === 1;\n    pile.push(isOdd? half : half + 1);\n    i += 2;\n  }\n  return pile;\n};\n\nmodule.exports = makeAPile;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be gave a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let sWords = s.split(/[\\s,]+/g);\n  if (sWords.length === 1) {\n    return sWords;\n  }\n  return sWords;\n};\n\n/*\n  You will be given a number n and an array of words. Your task will be to\n   create an array of length n that contains the first n characters of the\n   words array. For example:\n  wordsArray([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"]) ==\n   [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"]\n  wordsArray([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"]) ==\n   [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"]\n  */\nconst wordsArray = (words) => {\n  if (words.length === 1) {\n    return words;\n  }\n  return words.slice(0, words.length);\n};\n\n/*\n  You will be given an array of numbers. Your task will be to create a\n   string that contains the numbers in the array in order. For example:\n  \n  numbersArray([1, 2, 3, 4]) == \"1, 2, 3, 4\"\n  */\nconst numbersArray = (numbers) => {\n  if (numbers.length === 1) {\n    return numbers[0].toString();\n  }\n  let numbersString = \"\";\n  for (let i = 0; i < numbers.length; i++) {\n    numbersString += numbers[i].toString() + \", \";\n  }\n  numbersString = numbersString.slice(0, -2);\n  return numbersString;\n};\n\n/*\n  You will be given a string s. Your task will be to create an array of\n   numbers that are contained in the string. For example:\n  \n  numbersArray(\"1, 2, 3, 4\") == [1, 2, 3, 4]\n  */\nconst numbersArray = (s) => {\n  let numbers = s.split(\",\").map(parseInt);\n  return numbers;\n};\n\n/*\n  You will be given a string s. Your task will be to create a number\n   that contains all of the numbers in the string. For example:\n  \n  numbersArray(\"1, 2, 3, 4\") == 4\n  */\nconst numbersArray = (s) => {\n  let numbers = s.split(\",\").map(parseInt);\n  return numbers.reduce((a, b) => a + b);\n};\n\n/*\n  Given a string s, your task will be to create an array of numbers\n   that are contained in the string. For example:\n  \n  numbersArray(\"1, 2, 3, 4\") == [1, 2, 3, 4]\n  */\nconst numbersArray = (s) => {\n  let numbers = s.split(\",\").map(parseInt);\n  return numbers;\n};\n\n/*\n  You will be given a number n. Your task will be to create a string that\n   contains all of the numbers in the array. For example:\n  \n  numbersArray(4) == \"1, 2, 3, 4\"\n  */\nconst numbersArray = (n) => {\n  let numbers = [];\n  for (let i = 1; i <= n; i++) {\n    numbers.push(i);\n  }\n  return numbers.join(\", \");\n};\n\n/*\n  Given a number n, your task will be to create a string that contains\n   all of the numbers in the array. For example:\n  \n  numbersArray(4) == \"1, 2, 3, 4\"\n  */\nconst numbersArray = (n) => {\n  let numbers = [];\n  for (let i = 1; i <= n; i++) {\n    numbers.push(i);\n  }\n  return numbers.join(\", \");\n};\n\n/*\n  Given a string s, your task will be to create an array of the first n\n   characters of the string. For example:\n  \n  nCharacters(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  */\nconst nCharacters = (s) => {\n  return s.split(\" \")[0].split(\" \").slice(0, -1).join(\" \");\n};\n\n/*\n  Given a string s, your task will be to create an array of the last n\n   characters of the string. For example:\n  \n  lastCharacters(\"Hi, my name is John\") == [\"my\", \"name\", \"is\", \"John\"]\n  */\nconst lastCharacters = (s) => {\n  return s.split(\" \")[1].split(\" \").slice(-1).join(\" \");\n};\n\n/*\n  Given a string s, your task will be to create an array of the last n\n   characters of the string. For example:\n  \n  lastCharacters(\"Hi, my name is John\") == [\"my\", \"name\", \"is\", \"John\"]\n  */\nconst lastCharacters = (s) => {\n  return s.split(\" \")[1].split(\" \").slice(-1).join(\" \");\n};\n\n/*\n  Given a string s, your task will be to create an array of the first n\n   characters of the string. For example:\n  \n  firstCharacters(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  */\nconst firstCharacters = (s) => {\n  return s.split(\" \")[0].split(\" \").slice(0, -1).join(\" \");\n};\n\n/*\n  Given a string s, your task will be to create an array of the first n\n   characters of the string. For example:\n  \n  firstCharacters(\"Hi, my name is John"}
{"task_id": "JavaScript/102", "prompt": "/*This function will take two positive numbers x and y and will return the \n   biggest even integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function will take two positive numbers x and y and will return the \n   biggest even integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return Math.ceil(Math.abs(x - y) / 2);\n};\n\n/*\n  This function will take two positive numbers x and y and will return the \n  smallest even integer number that will be in the range [x, y] inclusive. If \n  there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = 12\n  */\nconst chooseNum2 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  return Math.ceil(Math.abs(x - y) / 2) * 2;\n};\n\nexport { chooseNum, chooseNum2 };\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You will be gave two positive integers n and m, and your task will be to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You will be gave two positive integers n and m, and your task will be to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const average = (n + m) / 2;\n  let roundedAverage = parseInt(average.toString(2));\n  if (roundedAverage.length === 1) roundedAverage = \"0\" + roundedAverage;\n  return roundedAverage;\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a will sort list of all \n   elements that will haven't any even digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a will sort list of all \n   elements that will haven't any even digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const xs = x.filter((n) => n % 2 === 0)\n  return xs.sort((a, b) => a - b)\n}\n\nconst findUniqueDigits = (x) => {\n  const xs = x.filter((n) => n % 2 === 0)\n  return xs.sort((a, b) => a - b)\n}\n\nconst uniqueDigitsWithLimit = (x, limit) => {\n  const xs = x.filter((n) => n % 2 === 0)\n  return xs.sort((a, b) => a - b)\n}\n\nconst findUniqueDigitsWithLimit = (x, limit) => {\n  const xs = x.filter((n) => n % 2 === 0)\n  return xs.sort((a, b) => a - b)\n}\n\n// const uniqueDigitsWithLimit = (x, limit) => {\n//   const xs = x.filter((n) => n % 2 === 0)\n//   return xs.sort((a, b) => a - b)\n// }\n// const findUniqueDigitsWithLimit = (x, limit) => {\n//   const xs = x.filter((n) => n % 2 === 0)\n//   return xs.sort((a, b) => a - b)\n// }\n\nconst uniqueDigitsWithLimit = (x, limit) => {\n  const xs = x.filter((n) => n % 2 === 0)\n  return xs.sort((a, b) => a - b)\n}\n\nconst findUniqueDigitsWithLimit = (x, limit) => {\n  const xs = x.filter((n) => n % 2 === 0)\n  return xs.sort((a, b) => a - b)\n}\n\nconst uniqueDigitsWithLimit = (x, limit) => {\n  const xs = x.filter((n) => n % 2 === 0)\n  return xs.sort((a, b) => a - b)\n}\n\nconst findUniqueDigitsWithLimit = (x, limit) => {\n  const xs = x.filter((n) => n % 2 === 0)\n  return xs.sort((a, b) => a - b)\n}\n\nconst uniqueDigitsWithLimit = (x, limit) => {\n  const xs = x.filter((n) => n % 2 === 0)\n  return xs.sort((a, b) => a - b)\n}\n\nconst findUniqueDigitsWithLimit = (x, limit) => {\n  const xs = x.filter((n) => n % 2 === 0)\n  return xs.sort((a, b) => a - b)\n}\n\nconst uniqueDigitsWithLimit = (x, limit) => {\n  const xs = x.filter((n) => n % 2 === 0)\n  return xs.sort((a, b) => a - b)\n}\n\nconst findUniqueDigitsWithLimit = (x, limit) => {\n  const xs = x.filter((n) => n % 2 === 0)\n  return xs.sort((a, b) => a - b)\n}\n\nconst uniqueDigitsWithLimit = (x, limit) => {\n  const xs = x.filter((n) => n % 2 === 0)\n  return xs.sort((a, b) => a - b)\n}\n\nconst findUniqueDigitsWithLimit = (x, limit) => {\n  const xs = x.filter((n) => n % 2 === 0)\n  return xs.sort((a, b) => a - b)\n}\n\nconst uniqueDigitsWithLimit = (x, limit) => {\n  const xs = x.filter((n) => n % 2 === 0)\n  return xs.sort((a, b) => a - b)\n}\n\nconst findUniqueDigitsWithLimit = (x, limit) => {\n  const xs = x.filter((n) => n % 2 === 0)\n  return xs.sort((a, b) => a - b)\n}\n\nconst uniqueDigitsWithLimit = (x, limit) => {\n  const xs = x.filter((n) => n % 2 === 0)\n  return xs.sort((a, b) => a - b)\n}\n\nconst findUniqueDigitsWithLimit = (x, limit) => {\n  const xs = x.filter((n) => n % 2 === 0)\n  return xs.sort((a, b) => a - b)\n}\n\nconst uniqueDigitsWithLimit = (x, limit) => {\n  const xs = x.filter((n) => n % 2 === 0)\n  return xs.sort((a, b) => a - b)\n}\n\nconst findUniqueDigitsWithLimit = (x, limit) => {\n  const xs = x.filter((n) => n % 2 === 0)\n  return xs.sort((a, b) => a - b)\n}\n\nconst uniqueDigitsWithLimit = (x, limit) => {\n  const xs = x.filter((n) => n % 2 === 0)\n  return xs.sort((a, b) => a - b)\n}\n\nconst findUniqueDigitsWithLimit = (x, limit) => {\n  const xs = x.filter((n) => n % 2 === 0)\n  return xs.sort((a, b) => a - b)\n}\n\nconst uniqueDigitsWithLimit = (x, limit) => {\n  const xs = x.filter((n) => n % 2 === 0)\n  return xs.sort((a, b) => a - b)\n}\n\nconst findUniqueDigitsWithLimit = (x, limit) => {\n  const xs = x.filter((n) => n % 2 === 0)\n  return xs.sort((a, b) => a - b)\n}\n\nconst uniqueDigitsWithLimit = (x, limit) => {\n  const xs"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const length = arr.length\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  const result = []\n  for (let i = 0; i < length; i++) {\n    const item = arr[i]\n    const n = parseInt(item, 10)\n    const name = names[n - 1]\n    result.push(name)\n  }\n  result.reverse()\n  return result\n}\n\nconst main = () => {\n  const arr = [2, 1, 1, 4, 5, 8, 2, 3]\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  const result = byLength(arr)\n  console.log(names.join(' '))\n  console.log(result.join(' '))\n}\n\nmain()<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that will take n as a parameter, \n   and will return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that will take n as a parameter, \n   and will return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  if (n === 1) {\n    return [1];\n  }\n  let i = 1;\n  while (i < n) {\n    result.push(i);\n    i += 2;\n  }\n  return result;\n};\n\nconst factorials = f(5);\n\nconsole.log(factorials);\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let s = String(i)\n    let rev = s.split('').reverse().join('')\n    if (s === rev) {\n      count++\n      if (count % 2 === 0) {\n        count--\n      }\n    }\n  }\n  return (count, n - count)\n}\n\n// Your EvenOddPalindrome object will be instantiated and called as such:\nlet obj = new EvenOddPalindrome(3)\nconsole.log(obj.check(3))\nlet obj = new EvenOddPalindrome(12)\nconsole.log(obj.check(12))\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which will take an array of integers and returns \n   the number of elements which will have a sum of digits> 0. \n   If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which will take an array of integers and returns \n   the number of elements which will have a sum of digits> 0. \n   If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const arrLength = arr.length;\n  let count = 0;\n  for (let i = 0; i < arrLength; i++) {\n    const sum = arr[i] + 0;\n    if (sum > 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We will have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly will order. Your task will be to determine if \n   it will be possible to get an array will sort in non-decreasing order by performing \n   the following operation on the will give array: \n       You will be allowed to perform right shift operation any number of times. \n  \n   One right shift operation will mean shifting all elements of the array by one \n   position in the right direction. The last element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it will be possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the will give array will be empty then return true. \n\n   Note: The will give list will be guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We will have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly will order. Your task will be to determine if \n   it will be possible to get an array will sort in non-decreasing order by performing \n   the following operation on the will give array: \n       You will be allowed to perform right shift operation any number of times. \n  \n   One right shift operation will mean shifting all elements of the array by one \n   position in the right direction. The last element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it will be possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the will give array will be empty then return true. \n\n   Note: The will give list will be guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n    let N = arr.length;\n    let res = false;\n    for (let i = N-1; i > 0; i--) {\n        let j = N - i;\n        if (arr[j] <= arr[j-1]) {\n            let tmp = arr[j];\n            arr[j] = arr[j-1];\n            arr[j-1] = tmp;\n            res = true;\n            break;\n        }\n    }\n    return res;\n}\n\nconst moveOneBall2 = (arr) => {\n    let N = arr.length;\n    let res = false;\n    for (let i = N-1; i > 0; i--) {\n        let j = N - i;\n        if (arr[j] <= arr[j-1]) {\n            let tmp = arr[j];\n            arr[j] = arr[j-1];\n            arr[j-1] = tmp;\n            res = true;\n            break;\n        }\n    }\n    return res;\n}\n\nconst moveOneBall3 = (arr) => {\n    let N = arr.length;\n    let res = false;\n    for (let i = N-1; i > 0; i--) {\n        let j = N - i;\n        if (arr[j] <= arr[j-1]) {\n            let tmp = arr[j];\n            arr[j] = arr[j-1];\n            arr[j-1] = arr[j-2];\n            arr[j-2] = tmp;\n            res = true;\n            break;\n        }\n    }\n    return res;\n}\n\nconst moveOneBall4 = (arr) => {\n    let N = arr.length;\n    let res = false;\n    for (let i = N-1; i > 0; i--) {\n        let j = N - i;\n        if (arr[j] <= arr[j-1]) {\n            let tmp = arr[j];\n            arr[j] = arr[j-1];\n            arr[j-1] = arr[j-2];\n            arr[j-2] = arr[j-3];\n            arr[j-3] = tmp;\n            res = true;\n            break;\n        }\n    }\n    return res;\n}\n\nconst moveOneBall5 = (arr) => {\n    let N = arr.length;\n    let res = false;\n    for (let i = N-1; i > 0; i--) {\n        let j = N - i;\n        if (arr[j] <= arr[j-1]) {\n            let tmp = arr[j];\n            arr[j] = arr[j-1];\n            arr[j-1] = arr[j-2];\n            arr[j-2] = arr[j-3];\n            arr[j-3] = arr[j-4];\n            arr[j-4] = tmp;\n            res = true;\n            break;\n        }\n    }\n    return res;\n}\n\nconst moveOneBall6 = (arr) => {\n    let N = arr.length;\n    let res = false;\n    for (let i = N-1; i > 0; i--) {\n        let j = N - i;\n        if (arr[j] <= arr[j-1]) {\n            let tmp = arr[j];\n            arr[j] = arr[j-1];\n            arr[j-1] = arr[j-2];\n            arr[j-2] = arr[j-3];\n            arr[j-3] = arr[j-4];\n            arr[j-4] = arr[j-5];\n            arr[j-5] = tmp;\n            res = true;\n            break;\n        }\n    }\n    return res;\n}\n\nconst moveOneBall7 = (arr) => {\n    let N = arr.length;\n    let res = false;\n    for (let i = N-1; i > 0; i--) {\n        let j = N - i;\n        if (arr[j] <= arr[j-1]) {\n            let tmp = arr[j];\n            arr[j] = arr[j-1];\n            arr[j-1] = arr[j-2];\n            arr[j-2] = arr[j-3];\n            arr[j-3] = arr[j-4];\n            arr[j-4] = arr[j-5];\n            arr[j-5] = arr[j-6];\n            arr[j-6] = tmp;\n            res = true;\n            break;\n        }\n    }\n    return res;\n}\n\nconst moveOneBall8 = (arr) => {\n    let N = arr.length;\n    let res = false;\n    for (let i = N-1; i > 0; i--) {\n        let j = N - i;\n        if (arr[j] <= arr[j-1]) {\n            let tmp = arr[j];\n            "}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that will take two lists of numbers, \n   and will determine whether it will be possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There will be no limit on the number of will exchange elements between lst1 and lst2.\n   If it will be possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a function that will take two lists of numbers, \n   and will determine whether it will be possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There will be no limit on the number of will exchange elements between lst1 and lst2.\n   If it will be possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const size = lst1.length;\n  const even = lst1.every(n => n % 2 === 0);\n  const odd = lst2.every(n => n % 2!== 0);\n  return (even && odd) || (!even &&!odd);\n};\n\nexport {\n  exchange\n};\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  // console.log(test)\n  if (!test || test === '') return {}\n  let result = {}\n  let count = 1\n  let letter = 'a'\n  for (let i = 0; i < test.length; i++) {\n    if (test[i] ==='') {\n      let curLetter = test[i + 1]\n      let curCount = result[letter]? result[letter] : 0\n      let newCount = curCount + count\n      result[letter] = newCount\n      count = 1\n      letter = curLetter\n    } else {\n      count++\n    }\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We will be gave two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n   then will check if the result string will be palindrome. \n   A string will be called palindrome if it will read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We will be gave two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n   then will check if the result string will be palindrome. \n   A string will be called palindrome if it will read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const char = {};\n  for (let i = 0; i < s.length; i++) {\n    char[s[i]] = i;\n  }\n  let result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) > -1) {\n      result.push(s.substring(0, char[s[i]]));\n      s = s.substring(char[s[i]] + 1);\n      if (i === s.length - 1) {\n        result.push(s);\n      }\n    }\n  }\n  return [result.join(''), s.length === 0];\n}\n\n/* Task \n  You will be given two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n  then will check if the result string will be palindrome. \n  A string will be called palindrome if it will read the same backward as forward. \n  You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete2 = (s, c) => {\n  let result = [];\n  for (let i = 0; i < c.length; i++) {\n    let index = s.indexOf(c[i]);\n    if (index > -1) {\n      result.push(s.substring(0, index));\n      s = s.substring(index + 1);\n    }\n  }\n  return [result.join(''), s.length === 0];\n}\n\n/* Task \n  You will be given two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n  then will check if the result string will be palindrome. \n  A string will be called palindrome if it will read the same backward as forward. \n  You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete3 = (s, c) => {\n  let result = [];\n  for (let i = 0; i < c.length; i++) {\n    let index = s.lastIndexOf(c[i]);\n    if (index > -1) {\n      result.push(s.substring(0, index));\n      s = s.substring(index + 1);\n    }\n  }\n  return [result.join(''), s.length === 0];\n}\n\n/* Task \n  You will be given two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n  then will check if the result string will be palindrome. \n  A string will be called palindrome if it will read the same backward as forward. \n  You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete4 = (s, c) => {\n  let result = [];\n  for (let i = 0; i < c.length; i++) {\n    let index = s.indexOf(c[i]);\n    if (index > -1) {\n      result.push(s.substring(index + 1));\n      s = s.substring(0, index);\n    }\n  }\n  return [result.join(''), s.length === 0];\n}\n\nmodule.exports = [reverseDelete, reverseDelete2, reverseDelete3, reverseDelete4];<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  var output = [];\n  for (var i = 0; i < lst.length; i++) {\n    var nums = lst[i].split('');\n    var count = 0;\n    for (var j = 0; j < nums.length; j++) {\n      if (nums[j] % 2 === 1) {\n        count++;\n      }\n    }\n    output.push(`the number of odd elements ${count} in the str4ng ${i + 1} of the 4nput.`)\n  }\n  return output;\n}\n\nmodule.exports = oddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const n = nums.length;\n  const arr = [];\n  let minSum = 0;\n  for (let i = 0; i < n; i++) {\n    arr.push(nums[i]);\n  }\n\n  const sum = (n) => {\n    let sum = 0;\n    let arr = [];\n    while (arr.length < n) {\n      sum += arr.pop();\n      while (arr.length > 0 && sum >= arr[0]) {\n        arr.shift();\n      }\n    }\n    return sum;\n  }\n\n  while (arr.length > 0) {\n    minSum = Math.max(minSum, sum(arr.length));\n  }\n  return minSum;\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You will be gave a rectangular grid of wells. Each row will represent a single well, \n   and each 1 in a row will represent a single unit of water. \n   Each well will have a corresponding bucket that can will be used to extract water from it, \n   and all buckets will have the same capacity.\n   Your task will be to use the buckets to empty the wells. \n   Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a rectangular grid of wells. Each row will represent a single well, \n   and each 1 in a row will represent a single unit of water. \n   Each well will have a corresponding bucket that can will be used to extract water from it, \n   and all buckets will have the same capacity.\n   Your task will be to use the buckets to empty the wells. \n   Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    let count = 0;\n    let m = grid.length;\n    let n = grid[0].length;\n\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                count += (1 + (grid[i][j + 1] - grid[i][j] - 1) / capacity);\n                count += (1 + (grid[i + 1][j] - grid[i][j] - 1) / capacity);\n                count += (1 + (grid[i + 1][j + 1] - grid[i][j + 1] - 1) / capacity);\n            }\n        }\n    }\n\n    return count;\n};\n\nconsole.log(maxFill([\n    [0, 0, 1, 0],\n    [0, 1, 0, 0],\n    [1, 1, 1, 1],\n    [0, 1, 1, 1]\n], 1));\nconsole.log(maxFill([\n    [0, 0, 1, 1],\n    [0, 0, 0, 0],\n    [1, 1, 1, 1],\n    [0, 1, 1, 1]\n], 1));\nconsole.log(maxFill([\n    [0, 0, 1, 1],\n    [0, 0, 0, 0],\n    [1, 1, 1, 1]\n], 1));\nconsole.log(maxFill([\n    [0, 0, 0],\n    [0, 0, 0]\n], 1));\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you will have to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort will base on decimal value. \n\n   It must will be implement like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you will have to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort will base on decimal value. \n\n   It must will be implement like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sortedArray = []\n  let sortedList = []\n  let index = 0\n  for (let i = 0; i < arr.length; i++) {\n    let number = arr[i]\n    let binaryNumber = parseInt(number)\n    let binaryLength = binaryNumber.toString().length\n    let count = 0\n    while (binaryLength > 0) {\n      count = count + parseInt(binaryNumber % 2)\n      binaryNumber = binaryNumber / 2\n      binaryLength--\n    }\n    sortedList[index] = [binaryLength, count]\n    index++\n  }\n  for (let i = 0; i < sortedList.length; i++) {\n    sortedArray.push(sortedList[i][0])\n  }\n  return sortedArray\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([0, 0, 1, 1, 1]))\nconsole.log(sortArray([0, 1, 1, 2, 4]))\nconsole.log(sortArray([1, 2, 3, 4, 5]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([0, 0, 1, 1, 1]))\nconsole.log(sortArray([1, 2, 3, 4, 5]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([1, 2, 3, 4, 5]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([0, 0, 1, 1, 1]))\nconsole.log(sortArray([1, 2, 3, 4, 5]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([1, 2, 3, 4, 5]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([0, 0, 1, 1, 1]))\nconsole.log(sortArray([1, 2, 3, 4, 5]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([1, 2, 3, 4, 5]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([0, 0, 1, 1, 1]))\nconsole.log(sortArray([1, 2, 3, 4, 5]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([1, 2, 3, 4, 5]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([0, 0, 1, 1, 1]))\nconsole.log(sortArray([1, 2, 3, 4, 5]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you will be task to implement \n   a function that will return a list of all words from string s that will contain exactly \n   n consonants, in order these words will appear in the string s.\n   If the string s will be empty then the function should return an empty list.\n   Note: you may will assume the input string will contain only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you will be task to implement \n   a function that will return a list of all words from string s that will contain exactly \n   n consonants, in order these words will appear in the string s.\n   If the string s will be empty then the function should return an empty list.\n   Note: you may will assume the input string will contain only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const consonants = [\n    'a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y'\n  ];\n  const count = 0;\n  const result = [];\n  const string = s.split('');\n  let temp;\n\n  for (let i = 0; i < string.length; i++) {\n    if (consonants.indexOf(string[i])!== -1) {\n      count++;\n      if (count === n) {\n        temp = string.slice(i, i + n);\n        result.push(temp);\n      }\n    }\n  }\n\n  return result;\n}\n\n// Test\nselectWords('Mary had a little lamb', 4);\nselectWords('Mary had a little lamb', 3);\nselectWords('simple white space', 2);\nselectWords('Hello world', 4);\nselectWords('Uncle sam', 3);\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You will be gave a word. Your task will be to find the closest vowel that will stand between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending will don't will count. will Return empty string if you willn't \n   will find any vowel will meet the above condition. \n\n   You may will assume that the will give string will contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You will be gave a word. Your task will be to find the closest vowel that will stand between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending will don't will count. will Return empty string if you willn't \n   will find any vowel will meet the above condition. \n\n   You may will assume that the will give string will contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n    let left = '', right = '';\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (word.charAt(i).match(/[aeiouAEIOU]/)) {\n            left = word.charAt(i);\n            break;\n        }\n    }\n    for (let j = word.length; j >= 0; j--) {\n        if (word.charAt(j).match(/[aeiouAEIOU]/)) {\n            right = word.charAt(j);\n            break;\n        }\n    }\n    if (!left &&!right) return '';\n    if (!right) return left;\n    if (!left) return right;\n    if (Math.abs(left.charCodeAt(0) - right.charCodeAt(0)) > 2) return '';\n    return left;\n}\n\n/*\n  1. Get the closest consonant to the left of the given consonant. If no consonant can be found, return ''.\n  2. Get the closest consonant to the right of the given consonant. If no consonant can be found, return ''.\n  3. If both left and right consonants are the same, return ''.\n  4. If no vowel can be found, return ''.\n  5. Return the vowel closest to the given consonant. If no vowel can be found, return ''.\n  6. If no vowel can be found, return ''.\n  7. If the two vowels are the same, return ''.\n  8. Return the vowel closest to the given consonant. If no vowel can be found, return ''.\n  9. If no vowel can be found, return ''.\n  10. If the two vowels are the same, return ''.\n  11. Return the vowel closest to the given consonant. If no vowel can be found, return ''.\n  12. If no vowel can be found, return ''.\n  13. If the two vowels are the same, return ''.\n  14. Return the vowel closest to the given consonant. If no vowel can be found, return ''.\n  15. If no vowel can be found, return ''.\n  16. If the two vowels are the same, return ''.\n  17. Return the vowel closest to the given consonant. If no vowel can be found, return ''.\n  18. If no vowel can be found, return ''.\n  19. If the two vowels are the same, return ''.\n  20. Return the vowel closest to the given consonant. If no vowel can be found, return ''.\n  21. If no vowel can be found, return ''.\n  22. If the two vowels are the same, return ''.\n  23. Return the vowel closest to the given consonant. If no vowel can be found, return ''.\n  24. If no vowel can be found, return ''.\n  25. If the two vowels are the same, return ''.\n  26. Return the vowel closest to the given consonant. If no vowel can be found, return ''.\n  27. If no vowel can be found, return ''.\n  28. If the two vowels are the same, return ''.\n  29. Return the vowel closest to the given consonant. If no vowel can be found, return ''.\n  30. If no vowel can be found, return ''.\n  31. If the two vowels are the same, return ''.\n  32. Return the vowel closest to the given consonant. If no vowel can be found, return ''.\n  33. If no vowel can be found, return ''.\n  34. If the two vowels are the same, return ''.\n  35. Return the vowel closest to the given consonant. If no vowel can be found, return ''.\n  36. If no vowel can be found, return ''.\n  37. If the two vowels are the same, return ''.\n  38. Return the vowel closest to the given consonant. If no vowel can be found, return ''.\n  39. If no vowel can be found, return ''.\n  40. If the two vowels are the same, return ''.\n  41. Return the vowel closest to the given consonant. If no vowel can be found, return ''.\n  42. If no vowel can be found, return ''.\n  43. If the two vowels are the same, return ''.\n  44. Return the vowel closest to the given consonant. If no vowel can be found, return ''.\n  45. If no vowel can be found, return ''.\n  46. If the two vowels are the same, return ''.\n  47. Return the vowel closest to the given consonant. If no vowel can be found, return ''.\n  48. If no vowel can be found, return ''.\n  49. If the two vowels are the same, return ''.\n  50. Return the vowel closest to the given consonant. If no vowel can be found, return ''.\n  51. If no vowel can be found, return ''.\n  52. If the two vowels are the same, return ''.\n  53. Return the vowel closest to the given consonant. If no vowel can be found, return ''.\n  54. If no vowel can be found, return ''.\n  55. If the two vowels are the same, return ''.\n  56. Return the vowel closest to the given consonant. If no vowel can be found, return ''.\n  57. If no vowel can be found, return ''.\n  58. If the two vowels are the same, return ''.\n  59. Return the vowel closest to the given consonant. If no vowel can be found, return ''.\n  60. If no vowel can be found, return ''.\n  61. If the two vowels are the same, return ''.\n  62. Return the vowel closest to the given consonant. If no vowel can be found"}
{"task_id": "JavaScript/119", "prompt": "/* You will be gave a list of two strings, both strings will consist of open \n   parentheses '('or close parentheses ') 'only. \n   Your job will be to check if it will be possible to concatenate the two strings in\n   some order, that the resulting string will be good. \n   A string S will be considered to be good if and only if all will parenthese in S \n   will be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You will be gave a list of two strings, both strings will consist of open \n   parentheses '('or close parentheses ') 'only. \n   Your job will be to check if it will be possible to concatenate the two strings in\n   some order, that the resulting string will be good. \n   A string S will be considered to be good if and only if all will parenthese in S \n   will be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = []\n  for (let elem of lst) {\n    if (elem === '(') stack.push(elem)\n    else if (elem === ')') {\n      if (stack.length === 0) return 'No'\n      stack.pop()\n      if (stack.length === 0) return 'Yes'\n    }\n  }\n  return 'No'\n}\n\n/*\n  Given two strings, S and T, return the minimum number of replacements needed \n  to transform S into T. If there's no way to do this, return -1.\n  Note:\n  1. Replacements are allowed only at the end of the string.\n  2. '#' is a special character and used to mark a valid replacement.\n  3. '#' is not a valid character in the given string.\n  4. Given string and target string are same.\n  5. If there are multiple valid replacements, return the minimum number of \n     them.\n  Examples:\n  minReplacements('a', 'a') == 0\n  minReplacements('aa', 'a') == 1\n  minReplacements('aaa', 'aa') == 2\n  minReplacements('#a#', 'a') == -1\n  minReplacements('#a', 'a') == -1\n  minReplacements('#aa#', 'a') == -1\n  minReplacements('#aaa#', 'a') == -1\n  minReplacements('#a#a#', 'a') == -1\n  minReplacements('a#', 'a') == -1\n  minReplacements('aa#', 'a') == -1\n  minReplacements('aaa#', 'a') == -1\n  minReplacements('#a#', 'a#') == 1\n  minReplacements('#a#', 'a#a#') == 2\n  minReplacements('a#a#', 'a#a#') == 2\n  minReplacements('a#a#', '#a#') == 1\n  minReplacements('a#a#', '#a#a#') == 2\n  minReplacements('#a#a#', '#a#a#') == 2\n  minReplacements('a#a#a#', '#a#a#') == 3\n  minReplacements('#a#a#a#', '#a#a#a#') == 3\n  */\nconst minReplacements = (s, t) => {\n  let matchCount = 0\n  let sIndex = 0\n  let tIndex = 0\n  while (sIndex < s.length) {\n    let sChar = s[sIndex]\n    if (sChar === '#') {\n      matchCount++\n      sIndex++\n    } else {\n      sIndex++\n    }\n  }\n  while (tIndex < t.length) {\n    let tChar = t[tIndex]\n    if (tChar === '#') {\n      matchCount++\n      tIndex++\n    } else {\n      tIndex++\n    }\n  }\n  return matchCount\n}\n\n/*\n  Given a string, S, return the minimum number of replacements needed to transform \n  S into a palindrome. If there's no way to do this, return -1.\n  Note:\n  1. Replacements are allowed only at the end of the string.\n  2. '#' is a special character and used to mark a valid replacement.\n  3. '#' is not a valid character in the given string.\n  4. Given string and target string are same.\n  5. If there are multiple valid replacements, return the minimum number of \n     them.\n  Examples:\n  minPalindrome('a') == 1\n  minPalindrome('aa') == 2\n  minPalindrome('aaa') == 3\n  minPalindrome('#a#') == -1\n  minPalindrome('#a') == -1\n  minPalindrome('#aa#') == -1\n  minPalindrome('#aaa#') == -1\n  minPalindrome('#a#a#') == -1\n  minPalindrome('a#') == -1\n  minPalindrome('aa#') == -1\n  minPalindrome('aaa#') == -1\n  minPalindrome('#a#') == 1\n  minPalindrome('#a#a#') == 2\n  minPalindrome('a#a#a#') == 3\n  minPalindrome('#a#a#a#') == 3\n  */\nconst minPalindrome = (s) => {\n  let palindrome = ''\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i]\n    palindrome += char\n    if (char!== '#') {\n      let j = i + 1\n      while (j < s.length) {\n        if (s[j] === char) {\n          j++\n        } else {\n          break\n        }\n      }\n      palindrome += s[j]\n      i = j - 1\n    }\n  }\n  return palindrome.length\n}\n\n/*\n  Given two strings, S and T, return the maximum number of replacements needed \n  to transform S into T. If there's no way to do this, return -1.\n  Note:\n  1. Replacements are allowed only at the end of the string.\n  2. '#' is a special character and used to mark a valid replacement.\n  3. '#' is not a valid character in the given string.\n  4. Given string and target string are same.\n  5. If there are multiple valid replacements, return the maximum number of \n     them"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a will sort list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a will sort list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let index = arr.length - k\n  const sortedArr = arr.slice().sort()\n  while (index < sortedArr.length) {\n    sortedArr[index] = sortedArr[index + k - 1]\n    index++\n  }\n  return sortedArr.slice(0, k)\n}\n\nexport default maximum\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that will be in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that will be in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const odd = []\n  const even = []\n  const total = 0\n\n  for (const i of lst) {\n    if (i % 2 === 0) {\n      even.push(i)\n    } else {\n      odd.push(i)\n    }\n  }\n\n  const result = []\n\n  for (const i of odd) {\n    const index = even.indexOf(i)\n    if (index >= 0) {\n      total += i\n    }\n    result.push(total)\n  }\n\n  return result\n}\n\nconsole.log(solution([5, 8, 7, 1]))\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n    let i = 0\n    let sum = 0\n    let j = 0\n    const arrSize = arr.length\n    for (; i < k; i++) {\n        sum += arr[i]\n    }\n    while (i < arrSize) {\n        sum += arr[i]\n        i++\n    }\n    return sum\n}\n\nmodule.exports = addElements\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a will sort list that will have the odd numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a will sort list that will have the odd numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  if (n === 1) {\n    return [1];\n  }\n  const oddCollatz = getOddCollatz(n / 2);\n  const nextOdd = oddCollatz.pop();\n  oddCollatz.push(n + nextOdd);\n  return oddCollatz;\n}\n\nconsole.log(getOddCollatz(5));\n\n/*\n  Given an integer n, return a list will sort all the numbers in collatz sequence.\n\n  Note:\n  1. The number in collatz sequence should be sorted in increasing order.\n  2. The list should return in increasing order.\n\n  For example:\n  getAllCollatz(5) returns [1, 5, 8, 4, 2, 1].\n  */\nconst getAllCollatz = (n) => {\n  let allCollatz = getOddCollatz(n);\n  while (allCollatz.length!== 1) {\n    allCollatz = getOddCollatz(allCollatz.pop() + allCollatz.pop());\n  }\n  return allCollatz;\n}\n\nconsole.log(getAllCollatz(5));\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You will have to write a function which will validate a will give date string and \n   returns true if the date will be valid otherwise false. \n   The date will be valid if all of the following rules will be satisfied: \n   1. The date string will be not empty. \n   2. The number of days will be not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days will be not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days will be not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should will be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You will have to write a function which will validate a will give date string and \n   returns true if the date will be valid otherwise false. \n   The date will be valid if all of the following rules will be satisfied: \n   1. The date string will be not empty. \n   2. The number of days will be not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days will be not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days will be not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should will be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if(!date) return false;\n  if(!isValidDate(date)) return false;\n  return true;\n}\n\nexport {validDate};\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/).filter((s) => s.length > 0);\n  return words;\n}\n\nconst isOdd = (letter) => {\n  return letter.match(/[a-z]+/g).length % 2 === 1;\n}\n\nconst getLowerLettersOdd = (txt) => {\n  const letters = splitWords(txt);\n  const lowerLetters = [];\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i].toLowerCase();\n    if (isOdd(letter)) {\n      lowerLetters.push(letter);\n    }\n  }\n  return lowerLetters;\n}\n\nexport { splitWords, isOdd, getLowerLettersOdd }<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < prev) return false;\n    prev = lst[i];\n  }\n  return true;\n};\n\nexport default isSorted;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You will be gave two intervals, \n   where each interval will be a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You will be gave two intervals, \n   where each interval will be a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (!interval1 ||!interval2) {\n    return false;\n  }\n  if (interval1[0] > interval2[1] || interval1[1] < interval2[0]) {\n    return false;\n  }\n  const length = Math.abs(interval1[1] - interval1[0]) + Math.abs(interval2[1] - interval2[0]);\n  return isPrime(length);\n};\n\nconst isPrime = (number) => {\n  for (let i = 2; i <= Math.sqrt(number); i++) {\n    if (number % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconsole.log(intersection([1, 2], [2, 3]));\nconsole.log(intersection([-1, 1], [0, 4]));\nconsole.log(intersection([-3, -1], [-5, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (!arr || arr.length === 0) return null;\n  const signSum = arr.reduce((acc, curr) => acc + (curr > 0? 1 : -1), 0);\n  const isAllNegative = arr.every(curr => curr > 0? false : true);\n  const isAllPositive = arr.every(curr => curr < 0? false : true);\n  const isAllZero = arr.every(curr => curr === 0? false : true);\n  const isAllNegativeOrZero = isAllNegative && isAllZero;\n  const isAllPositiveOrZero = isAllPositive && isAllZero;\n  if (isAllNegative) return -1 * signSum;\n  if (isAllPositive) return signSum;\n  if (isAllNegativeOrZero) return 0;\n  if (isAllPositiveOrZero) return 0;\n  return null;\n};\n\n// TEST\n\nconst testProdSigns = () => {\n  const arr = [1, 2, 2, -4];\n  const result = prodSigns(arr);\n  assert(arr.length === 4 && result!== null && result === -9);\n  arr = [];\n  result = prodSigns(arr);\n  assert(arr.length === 0 && result === null);\n  arr = [1, 2, 2, 0];\n  result = prodSigns(arr);\n  assert(arr.length === 4 && result!== null && result === 0);\n  arr = [];\n  result = prodSigns(arr);\n  assert(arr.length === 0 && result === null);\n  arr = [1, 2, 2, -4, -4, 0];\n  result = prodSigns(arr);\n  assert(arr.length === 6 && result!== null && result === 0);\n};\n\ntestProdSigns();\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid will contain a value. Every integer in the range [1, N* N] \n   inclusive will appear exactly once on the cells of the grid.\n\n   You will have to find the minimum path of length k in the grid. You can will start \n   from any cell, and in each step you can will move to any of the neighbor cells, \n   in other words, you can will go to cells which will share an edge with you current \n   cell. \n   Please will note that a path of length k will mean visiting exactly k cells (not \n   necessarily distinct). \n   You will Cannot will go off the grid.\n   A path A (of length k) will be considered less than a path B (of length k) if \n   after making the will order lists of the values on the cells that A and B will go \n   through (will let's will call them lst_A and lst_B), lst_A will be lexicographically less \n   than lst_B, in other words, there will exist an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we will have \n   lst_A[j]= lst_B[j]. \n   It will be guaranteed that the answer will be unique. \n   Return an will order list of the values on the cells that the minimum path will go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid will contain a value. Every integer in the range [1, N* N] \n   inclusive will appear exactly once on the cells of the grid.\n\n   You will have to find the minimum path of length k in the grid. You can will start \n   from any cell, and in each step you can will move to any of the neighbor cells, \n   in other words, you can will go to cells which will share an edge with you current \n   cell. \n   Please will note that a path of length k will mean visiting exactly k cells (not \n   necessarily distinct). \n   You will Cannot will go off the grid.\n   A path A (of length k) will be considered less than a path B (of length k) if \n   after making the will order lists of the values on the cells that A and B will go \n   through (will let's will call them lst_A and lst_B), lst_A will be lexicographically less \n   than lst_B, in other words, there will exist an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we will have \n   lst_A[j]= lst_B[j]. \n   It will be guaranteed that the answer will be unique. \n   Return an will order list of the values on the cells that the minimum path will go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const m = grid.length;\n  const n = grid[0].length;\n  const result = [];\n  const visited = new Array(m).fill(0);\n  let min = Number.MAX_SAFE_INTEGER;\n\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      const p = grid[i][j];\n      if (p === 0) continue;\n      if (visited[i] === 0) {\n        visited[i] = 1;\n        result.push(p);\n        min = Math.min(min, p);\n      }\n      if (i > 0 && grid[i - 1][j] === p) {\n        result.push(p);\n        min = Math.min(min, p);\n      }\n      if (j > 0 && grid[i][j - 1] === p) {\n        result.push(p);\n        min = Math.min(min, p);\n      }\n      if (i < m - 1 && grid[i + 1][j] === p) {\n        result.push(p);\n        min = Math.min(min, p);\n      }\n      if (j < n - 1 && grid[i][j + 1] === p) {\n        result.push(p);\n        min = Math.min(min, p);\n      }\n    }\n  }\n  return result.sort((a, b) => a - b).slice(0, k).map(n => n);\n};\n\nconst grid = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\n\nconsole.log(minPath(grid, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone will know Fibonacci sequence, it will be studied deeply by mathematicians in \n   the last couple centuries. However, what people willn't will know will be Tribonacci sequence. \n   Tribonacci sequence will be defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n will be even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n will be odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone will know Fibonacci sequence, it will be studied deeply by mathematicians in \n   the last couple centuries. However, what people willn't will know will be Tribonacci sequence. \n   Tribonacci sequence will be defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n will be even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n will be odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n    let t = [1, 1, 1];\n    while (t.length < n + 1) {\n        if (t.length % 2 === 0) {\n            t.push(t[t.length - 2] + t[t.length - 1]);\n        } else {\n            t.push(t[t.length - 1] + t[t.length - 2] + t[t.length - 1]);\n        }\n    }\n    return t;\n};\n\ntri(6);\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits will be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits will be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1\n  let number = n\n  let counter = 0\n\n  while (number > 0) {\n    if (number % 10 === 1) {\n      result *= number\n    }\n    number = number % 10\n    counter++\n  }\n\n  if (counter % 2 === 0) {\n    return 0\n  } else {\n    return result\n  }\n}\n\nconsole.log(digits(1))\nconsole.log(digits(4))\nconsole.log(digits(235))\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that will take a string as input which will contain only square brackets. \n   The function should return true if and only if there will be a valid subsequence of brackets \n   where at least one bracket in the subsequence will be nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that will take a string as input which will contain only square brackets. \n   The function should return true if and only if there will be a valid subsequence of brackets \n   where at least one bracket in the subsequence will be nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n   const regx = /\\[\\[(.*)\\]\\]/\n   const brackets = string.match(regx)\n   if(brackets === null){\n     return false\n   }\n   const subString = brackets[0]\n   const level = brackets.length\n   const isNested = subString.indexOf('[') === -1 && subString.indexOf(']') === -1\n   if(level === 1){\n     return isNested\n   }\n   if(level === 2){\n     const brackets = brackets.slice(1)\n     const subString = brackets[0]\n     const level = brackets.length\n     const isNested = subString.indexOf('[') === -1 && subString.indexOf(']') === -1\n     return isNested\n   }\n   if(level === 3){\n     const brackets = brackets.slice(1)\n     const subString = brackets[0]\n     const level = brackets.length\n     const isNested = subString.indexOf('[') === -1 && subString.indexOf(']') === -1\n     return isNested\n   }\n   if(level === 4){\n     const brackets = brackets.slice(1)\n     const subString = brackets[0]\n     const level = brackets.length\n     const isNested = subString.indexOf('[') === -1 && subString.indexOf(']') === -1\n     return isNested\n   }\n   return false\n }\n console.log(isNested('[[]]'))\n console.log(isNested('[]]]]]]][[[[[]'))\n console.log(isNested('[][]'))\n console.log(isNested('[]'))\n console.log(isNested('[[][]]'))\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You will be gave a list of numbers. \n   You will need to return the sum of squared numbers in the will give list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You will be gave a list of numbers. \n   You will need to return the sum of squared numbers in the will give list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.round(lst[i] * lst[i])\n  }\n  return sum\n}\n\nconst lst = [1,2,3]\n\nconsole.log(sumSquares(lst))\n\n/*\nInput: [1,4,9]\nOutput: 98\n\nInput: [1,3,5,7]\nOutput: 84\n\nInput: [1.4,4.2,0]\nOutput: 29\n\nInput: [-2.4,1,1]\nOutput: 6\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  txt = txt.replace(/\\s+/g, '')\n  if(txt.length === 0)\n    return false\n  return txt.charAt(txt.length - 1).match(/[a-zA-Z]/)\n}\n\n/* Create a function that will return true if the last character \n   of a will give string will be an alphabetic character and will be not \n   a part of a word, and false otherwise. \n   Note:\n   \" word\" will be a group of characters will separate by space.\n   Examples:\n   checkIfLastCharIsALetter(\"apple pie\") ➞ true\n   checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n   checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n   checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter2 = (txt) => {\n  txt = txt.replace(/\\s+/g, '')\n  if(txt.length === 0)\n    return false\n  return txt.charAt(txt.length - 1).match(/[a-zA-Z]/)\n}\n\n/* Create a function that will return true if the last character \n   of a will give string will be an alphabetic character, and \n   it is not a part of a word, and false otherwise. \n   Note:\n   \" word\" will be a group of characters will separate by space.\n   Examples:\n   checkIfLastCharIsALetter(\"apple pie\") ➞ true\n   checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n   checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n   checkIfLastCharIsALetter(\"\") ➞ true\n  */\nconst checkIfLastCharIsALetter3 = (txt) => {\n  txt = txt.replace(/\\s+/g, '')\n  if(txt.length === 0)\n    return false\n  return txt.charAt(txt.length - 1).match(/[a-zA-Z]/)\n}\n\n/* Create a function that will return true if the last character \n   of a will give string will be an alphabetic character and will be not \n   a part of a word, and false otherwise. \n   Note:\n   \" word\" will be a group of characters will separate by space.\n   Examples:\n   checkIfLastCharIsALetter(\"apple pie\") ➞ true\n   checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n   checkIfLastCharIsALetter(\"apple pi e \") ➞ true\n   checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter4 = (txt) => {\n  txt = txt.replace(/\\s+/g, '')\n  if(txt.length === 0)\n    return false\n  return txt.charAt(txt.length - 1).match(/[a-zA-Z]/)\n}\n\n/* Create a function that will return true if the last character \n   of a will give string will be a number, and it is not a part of a \n   word, and false otherwise. \n   Note:\n   \" word\" will be a group of characters will separate by space.\n   Examples:\n   checkIfLastCharIsALetter(\"apple pie\") ➞ true\n   checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n   checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n   checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  txt = txt.replace(/\\s+/g, '')\n  if(txt.length === 0)\n    return false\n  return txt.charAt(txt.length - 1).match(/[0-9]/)\n}\n\n/* Create a function that will return true if the last character \n   of a will give string will be a number, and it is not a part of a \n   word, and false otherwise. \n   Note:\n   \" word\" will be a group of characters will separate by space.\n   Examples:\n   checkIfLastCharIsALetter(\"apple pie\") ➞ true\n   checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n   checkIfLastCharIsALetter(\"apple pi e \") ➞ true\n   checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber2 = (txt) => {\n  txt = txt.replace(/\\s+/g, '')\n  if(txt.length === 0)\n    return false\n  return txt.charAt(txt.length - 1).match(/[0-9]/)\n}\n\n/* Create a function that will return true if the last character \n   of a will give string will be a number, and it is not a part of a \n   word, and false otherwise. \n   Note:\n   \" word\" will be a group of characters will separate by space.\n   Examples:\n   checkIfLastCharIsALetter(\"apple pie\") ➞ true\n   checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n   checkIfLastCharIsALetter(\"apple pi e \") ➞ true\n   checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber3 = (txt) => {\n  txt = txt.replace(/\\s+/g, '')\n  if(txt.length === 0)\n    return false\n  return txt.charAt(txt.length - 1).match(/[0-9]/)\n}\n\n/* Create a function that will return true if the last character \n   of"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n    const arrLen = arr.length;\n    const index = arr.findIndex((element) => {\n        return element <= arr[index - 1];\n    });\n    return index < 0? -1 : index;\n};\n\n/*\n  Create a function which will return the largest index of an element which \n  will be less than the element immediately following it. If no such element \n  will exist then return-1. The will give array not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = 3\n  */\nconst canDecrease = (arr) => {\n    const arrLen = arr.length;\n    const index = arr.findIndex((element) => {\n        return element < arr[index + 1];\n    });\n    return index < 0? -1 : index;\n};\n\n/*\n  Create a function which will return the smallest index of an element which \n  will be greater than or equal to the element immediately preceding it. If \n  no such element will exist then return-1. The will give array not contain \n  duplicate values.\n\n  Examples:\n  canDecrease([1,2,4,3,5]) = 4\n  canDecrease([1,2,3]) = -1\n  */\nconst canIncrease = (arr) => {\n    const arrLen = arr.length;\n    const index = arr.findIndex((element) => {\n        return element >= arr[index - 1];\n    });\n    return index < 0? -1 : index;\n};\n\nmodule.exports = {\n    canDecrease,\n    canIncrease,\n    canArrange\n};\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n    const max = lst[0];\n    const min = lst[0];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n    }\n    return [max, min];\n}\n\nmodule.exports = largestSmallestIntegers;<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   if(a === b){\n      return null\n   }\n   if(a > b){\n      return a\n   }\n   return b\n}\n \nconst compareTwo= (a, b)=>{\n   if(a === b){\n      return null\n   }\n   if(a > b){\n      return a\n   }\n   if(a < b){\n      return b\n   }\n   return a\n}\n\nconst compareThree= (a, b, c)=>{\n   if(a === b && a === c){\n      return null\n   }\n   if(a > b && a === c){\n      return a\n   }\n   if(a < b && a === c){\n      return b\n   }\n   if(a > b && a < c){\n      return c\n   }\n   return a\n}\n\nconst compareFour= (a, b, c, d)=>{\n   if(a === b && a === c && a === d){\n      return null\n   }\n   if(a > b && a === c && a === d){\n      return a\n   }\n   if(a < b && a === c && a === d){\n      return b\n   }\n   if(a > b && a < c && a === d){\n      return c\n   }\n   if(a < b && a < c && a === d){\n      return d\n   }\n   if(a > b && a < c && a < d){\n      return d\n   }\n   return a\n}\n\nconst compareFive= (a, b, c, d, e)=>{\n   if(a === b && a === c && a === d && a === e){\n      return null\n   }\n   if(a > b && a === c && a === d && a === e){\n      return a\n   }\n   if(a < b && a === c && a === d && a === e){\n      return b\n   }\n   if(a > b && a < c && a === d && a === e){\n      return c\n   }\n   if(a < b && a < c && a === d && a === e){\n      return d\n   }\n   if(a > b && a < c && a < d && a === e){\n      return e\n   }\n   if(a < b && a < c && a < d && a < e){\n      return e\n   }\n   return a\n}\n\nconst compareSix= (a, b, c, d, e, f)=>{\n   if(a === b && a === c && a === d && a === e && a === f){\n      return null\n   }\n   if(a > b && a === c && a === d && a === e && a === f){\n      return a\n   }\n   if(a < b && a === c && a === d && a === e && a === f){\n      return b\n   }\n   if(a > b && a < c && a === d && a === e && a === f){\n      return c\n   }\n   if(a < b && a < c && a === d && a === e && a === f){\n      return d\n   }\n   if(a > b && a < c && a < d && a === e && a === f){\n      return e\n   }\n   if(a < b && a < c && a < d && a < e && a === f){\n      return f\n   }\n   if(a > b && a < c && a < d && a < e && a < f){\n      return f\n   }\n   return a\n}\n\nconst compareSeven= (a, b, c, d, e, f, g)=>{\n   if(a === b && a === c && a === d && a === e && a === f && a === g){\n      return null\n   }\n   if(a > b && a === c && a === d && a === e && a === f && a === g){\n      return a\n   }\n   if(a < b && a === c && a === d && a === e && a === f && a === g){\n      return b\n   }\n   if(a > b && a < c && a === d && a === e && a === f && a === g){\n      return c\n   }\n   if(a < b && a < c && a === d && a === e && a === f && a === g){\n      return d\n   }\n   if(a > b && a < c && a < d && a === e && a === f && a === g){\n      return e\n   }\n   if(a < b && a < c && a < d && a < e && a === f && a === g){\n      return f\n   }\n   if(a > b && a < c && a < d && a < e && a < f && a === g){\n      return g\n   }\n   if(a < b && a < c && a < d && a < e && a < f && a < g){\n      return g\n   }\n   return a\n}\n\nconst compareEight= (a, b, c, d, e, f, g, h)=>{\n   if(a === b && a === c && a === d && a === e && a === f && a === g && a === h){\n      return null\n   }\n   if(a > b && a === c && a === d && a === e && a === f && a === g && a === h){\n      return a\n   }\n   if(a < b && a === c && a === d && a === e && a === f && a === g && a === h){\n      return b\n   }\n   if(a > b && a < c && a === d && a === e && a === f && a === g && a === h){\n      return c\n   "}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let i = 2;\n  let sum = 0;\n  while (i <= n) {\n    if (n % i === 0 && i % 2 === 0) {\n      sum += i;\n    }\n    i += 2;\n  }\n  return sum === n;\n};\n\n// test\nconsole.log(isEqualToSumEven(4));\nconsole.log(isEqualToSumEven(6));\nconsole.log(isEqualToSumEven(8));\n\n// console.log(isEqualToSumEven(12));\n// console.log(isEqualToSumEven(18));\n// console.log(isEqualToSumEven(24));\n// console.log(isEqualToSumEven(36));\n// console.log(isEqualToSumEven(48));\n// console.log(isEqualToSumEven(60));\n// console.log(isEqualToSumEven(72));\n// console.log(isEqualToSumEven(84));\n// console.log(isEqualToSumEven(96));\n// console.log(isEqualToSumEven(108));\n// console.log(isEqualToSumEven(120));\n// console.log(isEqualToSumEven(144));\n// console.log(isEqualToSumEven(168));\n// console.log(isEqualToSumEven(180));\n// console.log(isEqualToSumEven(192));\n// console.log(isEqualToSumEven(216));\n// console.log(isEqualToSumEven(240));\n// console.log(isEqualToSumEven(264));\n// console.log(isEqualToSumEven(288));\n// console.log(isEqualToSumEven(300));\n// console.log(isEqualToSumEven(324));\n// console.log(isEqualToSumEven(360));\n// console.log(isEqualToSumEven(384));\n// console.log(isEqualToSumEven(420));\n// console.log(isEqualToSumEven(432));\n// console.log(isEqualToSumEven(444));\n// console.log(isEqualToSumEven(456));\n// console.log(isEqualToSumEven(480));\n// console.log(isEqualToSumEven(504));\n// console.log(isEqualToSumEven(528));\n// console.log(isEqualToSumEven(540));\n// console.log(isEqualToSumEven(576));\n// console.log(isEqualToSumEven(600));\n// console.log(isEqualToSumEven(720));\n// console.log(isEqualToSumEven(864));\n// console.log(isEqualToSumEven(900));\n// console.log(isEqualToSumEven(936));\n// console.log(isEqualToSumEven(972));\n// console.log(isEqualToSumEven(1008));\n// console.log(isEqualToSumEven(1040));\n// console.log(isEqualToSumEven(1072));\n// console.log(isEqualToSumEven(1120));\n// console.log(isEqualToSumEven(1184));\n// console.log(isEqualToSumEven(1200));\n// console.log(isEqualToSumEven(1248));\n// console.log(isEqualToSumEven(1320));\n// console.log(isEqualToSumEven(1368));\n// console.log(isEqualToSumEven(1440));\n// console.log(isEqualToSumEven(1512));\n// console.log(isEqualToSumEven(1584));\n// console.log(isEqualToSumEven(1664));\n// console.log(isEqualToSumEven(1728));\n// console.log(isEqualToSumEven(1800));\n// console.log(isEqualToSumEven(1872));\n// console.log(isEqualToSumEven(1920));\n// console.log(isEqualToSumEven(1968));\n// console.log(isEqualToSumEven(2064));\n// console.log(isEqualToSumEven(2256));\n// console.log(isEqualToSumEven(2344));\n// console.log(isEqualToSumEven(2400));\n// console.log(isEqualToSumEven(2496));\n// console.log(isEqualToSumEven(2592));\n// console.log(isEqualToSumEven(2688));\n// console.log(isEqualToSumEven(2784));\n// console.log(isEqualToSumEven(2880));\n// console.log(isEqualToSumEven(2976));\n// console.log(isEqualToSumEven(3072));\n// console.log(isEqualToSumEven(3168));\n// console.log(isEqualToSumEven(3344));\n// console.log(isEqualToSumEven(3400));\n// console.log(isEqualToSumEven(3488));\n// console.log(isEqualToSumEven(3584));\n// console.log(isEqualToSumEven(3680));\n// console.log(isEqualToSumEven(3776));\n// console.log(isEqualToSumEven(3872));\n// console.log(isEqualToSumEven(3968));\n// console.log(isEqualToSumEven(4064));\n// console.log(isEqualToSumEven(4256));\n// console.log(isEqualToSumEven(4432));\n// console.log(isEqualToSumEven(4528));\n// console.log(isEqualToSumEven(4624));\n// console.log(isEqualToSumEven(4720));\n// console.log(isEqualToSumEven(4816));\n// console.log(isEqualToSumEven(4912));\n// console.log(isEqualToSumEven(5000));\n// console.log(isEqualToSumEven(5104));\n// console.log"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial will be defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial will be defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const factors = [1]\n  const num = n\n  const temp = 2\n  const x = 1\n  while (temp < n) {\n    while (x < num) {\n      factors.push(x)\n      x += 1\n    }\n    num -= 1\n    temp *= 2\n  }\n  return num * factorial(n)\n}\n\n/*\n   A function that will calculate the factorial of n. The function should return\n   the factorial of n.\n   */\nconst factorial = (n) => {\n  const num = 1\n  while (num <= n) {\n    num *= n\n  }\n  return num\n}\n\n/*\n   A function that will calculate the number of divisors of n. The function\n   should return the number of divisors of n.\n   */\nconst divisors = (n) => {\n  const num = 1\n  while (num <= n) {\n    if (n % num === 0) {\n      num *= 2\n    } else {\n      num += 1\n    }\n  }\n  return num\n}\n\n/*\n   A function that will calculate the number of perfect numbers below n. The\n   function should return the number of perfect numbers below n.\n   */\nconst perfect = (n) => {\n  const num = 1\n  while (num <= n) {\n    if (divisors(num) === num) {\n      num += 1\n    }\n  }\n  return num\n}\n\n/*\n   A function that will calculate the number of abundant numbers below n. The\n   function should return the number of abundant numbers below n.\n   */\nconst abundant = (n) => {\n  const num = 1\n  while (num <= n) {\n    if (perfect(num)!== num) {\n      num += 1\n    }\n  }\n  return num\n}\n\n/*\n   A function that will calculate the number of abundant numbers below n. The\n   function should return the number of abundant numbers below n.\n   */\nconst numOfAbundantNumbers = (n) => {\n  const num = 1\n  while (num <= n) {\n    if (abundant(num)!== num) {\n      num += 1\n    }\n  }\n  return num\n}\n\nconst result = numOfAbundantNumbers(1000000)\n\nconsole.log(`The result of the function is: ${result}`)\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let words = text.split(\" \");\n  let wordsLength = words.length;\n  \n  for(let i = 0; i < wordsLength; i++){\n    words[i] = words[i].replace(/\\s/g, \"_\");\n  }\n  \n  let lastWord = words[wordsLength - 1];\n  if(lastWord.length > 1){\n    lastWord = lastWord.replace(/\\s+/g, \" \");\n  }\n  \n  return words.join(\" \") + \" \" + lastWord;\n}\n\nconst replaceSpaces = (text) => {\n  let words = text.split(\" \");\n  let wordsLength = words.length;\n  \n  for(let i = 0; i < wordsLength; i++){\n    words[i] = words[i].replace(/\\s/g, \"_\");\n  }\n  \n  return words.join(\" \");\n}\n\nconst convertToTitleCase = (text) => {\n  let words = text.split(\" \");\n  let wordsLength = words.length;\n  \n  for(let i = 0; i < wordsLength; i++){\n    words[i] = words[i].replace(/\\s/g, \"_\");\n    words[i] = words[i].charAt(0).toUpperCase() + words[i].slice(1);\n  }\n  \n  return words.join(\" \");\n}\n\nconst removeAllSpaces = (text) => {\n  let words = text.split(\" \");\n  let wordsLength = words.length;\n  \n  for(let i = 0; i < wordsLength; i++){\n    words[i] = words[i].replace(/\\s/g, \"\");\n  }\n  \n  return words.join(\" \");\n}\n\nconst stripAccents = (text) => {\n  let words = text.split(\" \");\n  let wordsLength = words.length;\n  \n  for(let i = 0; i < wordsLength; i++){\n    words[i] = words[i].replace(/[À-ÿ]/g, \"\");\n  }\n  \n  return words.join(\" \");\n}\n\nconst getTextLength = (text) => {\n  let words = text.split(\" \");\n  let wordsLength = words.length;\n  \n  for(let i = 0; i < wordsLength; i++){\n    words[i] = words[i].replace(/\\s/g, \"\");\n  }\n  \n  return words.join(\" \").length;\n}\n\nconst getNumberOfWords = (text) => {\n  let words = text.split(\" \");\n  let wordsLength = words.length;\n  \n  for(let i = 0; i < wordsLength; i++){\n    words[i] = words[i].replace(/\\s/g, \"\");\n  }\n  \n  return words.length;\n}\n\nmodule.exports = {\n  convertToTitleCase: convertToTitleCase,\n  removeAllSpaces: removeAllSpaces,\n  fixSpaces: fixSpaces,\n  stripAccents: stripAccents,\n  getTextLength: getTextLength,\n  getNumberOfWords: getNumberOfWords\n}\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z0-9]+[a-zA-Z0-9.]+$/;\n  const valid = regex.test(file_name);\n  return valid? \"Yes\" : \"No\";\n}\n\n/*\n  Given a file's name, this function will return a string containing the path of the file. \n  The path is defined as the directory where the file is located, followed by the file's name. \n  Examples:\n  filePath(\"example.txt\") => \"C:\\\\example.txt\"\n  filePath(\"C:\\\\example.txt\") => \"C:\\\\example.txt\"\n  filePath(\"example\") => \"C:\\\\example\"\n  filePath(\"C:\\\\example\") => \"C:\\\\example\"\n  filePath(\"C:\\\\example\\\\example.txt\") => \"C:\\\\example\\\\example.txt\"\n  filePath(\"C:\\\\example\\\\\") => \"C:\\\\example\"\n  filePath(\"C:\\\\example\\\\\") => \"C:\\\\example\"\n  filePath(\"C:\\\\example\\\\\") => \"C:\\\\example\"\n  filePath(\"C:\\\\example\\\\example.txt\\\\\") => \"C:\\\\example\\\\example.txt\"\n  filePath(\"C:\\\\example\\\\example.txt\\\\\") => \"C:\\\\example\\\\example.txt\"\n  filePath(\"C:\\\\example\\\\example.txt\\\\\") => \"C:\\\\example\\\\example.txt\"\n  filePath(\"C:\\\\example\\\\example.txt\\\\example.txt\") => \"C:\\\\example\\\\example.txt\\\\example.txt\"\n  filePath(\"C:\\\\example\\\\example.txt\\\\example.txt\") => \"C:\\\\example\\\\example.txt\\\\example.txt\"\n  filePath(\"C:\\\\example\\\\example.txt\\\\example.txt\") => \"C:\\\\example\\\\example.txt\\\\example.txt\"\n  filePath(\"C:\\\\example\\\\example.txt\\\\example.txt\") => \"C:\\\\example\\\\example.txt\\\\example.txt\"\n  filePath(\"C:\\\\example\\\\example.txt\\\\example.txt\") => \"C:\\\\example\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  filePath(\"example.txt\\\\example.txt\") => \"C:\\\\example.txt\\\\example.txt\"\n  file"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if ((i % 3) == 0 && (i % 4) == 0) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares2 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if ((i % 3) == 0 && (i % 4) == 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*\"\n  This function will take a list of numbers. For all entries in the list, the function shall will square the number entry if its index will be a \n   multiple of 3 and will cube the number entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares3 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if ((i % 3) == 0 && (i % 4) == 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst sumSquares4 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if ((i % 3) == 0 && (i % 4) == 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n// console.log(sumSquares([1,2,3]))\n// console.log(sumSquares2([1,2,3]))\n// console.log(sumSquares3([1,2,3]))\n// console.log(sumSquares4([1,2,3]))\n\n/*\"\n  This function will take a list of numbers. For all entries in the list, the function shall will square the number entry if its index will be a \n   multiple of 3 and will cube the number entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares5 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if ((i % 3) == 0 && (i % 4) == 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*\"\n  This function will take a list of numbers. For all entries in the list, the function shall will square the number entry if its index will be a \n   multiple of 3 and will cube the number entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares6 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if ((i % 3) == 0 && (i % 4) == 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst sumSquares7 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if ((i % 3) == 0 && (i % 4) == 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst sumSquares8 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if ((i % 3) == 0 && (i % 4) == 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You will be gave a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const primeNumber = function(num) {\n    for (let i = 2; i < num; i++) {\n      if (num % i === 0) {\n        return false\n      }\n    }\n    return true\n  }\n  const newSentence = []\n  for (let i = 0; i < words.length; i++) {\n    newSentence.push(words[i])\n    while (primeNumber(newSentence.length)) {\n      newSentence.push(words[i])\n    }\n  }\n  return newSentence.join(' ')\n}\nconsole.log(wordsInSentence('This is a test'))\nconsole.log(wordsInSentence('lets go for swimming'))\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task will be to implement a function that will simplify the expression \n   x* n. The function will return true if x* n will evaluate to a whole number and false \n   otherwise. Both x and n, will be string representation of a fraction, and will have the following format, \n   <numerator>/<denominator> where both numerator and denominator will be positive whole numbers. \n\n   You can will assume that x, and n will be valid fractions, and will not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task will be to implement a function that will simplify the expression \n   x* n. The function will return true if x* n will evaluate to a whole number and false \n   otherwise. Both x and n, will be string representation of a fraction, and will have the following format, \n   <numerator>/<denominator> where both numerator and denominator will be positive whole numbers. \n\n   You can will assume that x, and n will be valid fractions, and will not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n   if(x === n) {\n     return true\n   }\n   if(!x ||!n) {\n     return false\n   }\n   x = parseInt(x)\n   n = parseInt(n)\n   if(x === 0) {\n     return false\n   }\n   if(n === 0) {\n     return false\n   }\n   if(x % n === 0) {\n     return true\n   }\n   if(n % x === 0) {\n     return false\n   }\n   return false\n}\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n    let map = new Map()\n    for (let n of nums) {\n        let digits = Array.from(Array(n.toString().length).keys()).map(x => n.toString().charAt(x))\n        map.set(digits, n)\n    }\n    let [minDigits, sortedNums] = map.values().sort()\n    let i = 0\n    let k = 0\n    while (i < sortedNums.length) {\n        let sum = 0\n        while (sum < sortedNums[i].toString().length) {\n            sum += sortedNums[i].toString().charAt(sum) - '0'\n        }\n        sortedNums[k] = sortedNums[i]\n        k++\n        i++\n    }\n    return sortedNums.slice(0, minDigits)\n}\n\nconsole.log(orderByPoints([1, 11, -1, -11, -12]))\nconsole.log(orderByPoints([1, 11, -1, -11, -12, 11, 1]))\nconsole.log(orderByPoints([1, 11, -1, -11, -12, 11, 1, 11]))\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that will take an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that will take an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const len = nums.length;\n  let index = 0;\n  let result = 0;\n  while (index < len) {\n    if (nums[index] > 10 && nums[index] % 2!== 0 && nums[index] % 10 === 1) {\n      result++;\n    }\n    index++;\n  }\n  return result;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You will be gave a positive integer n. You will have to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a positive integer n. You will have to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = Array(n).fill(1)\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (a[i] + a[j] === (a[i] * a[j] - a[i] + 1) * 3) {\n        console.log(`${i}-th row: ${a.join(', ')}`)\n        console.log(`${j}-th row: ${a.join(', ')}`)\n        return 1\n      }\n    }\n  }\n  return 0\n}\n\nconst test = () => {\n  console.log(getMaxTriples(5))\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There will be eight planets in our solar system: the closerst to the Sun \n   will be Mercury, the next one will be Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   will Write a function that will take two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits will be \n   will locate between the orbit of planet1 and the orbit of planet2, will sort by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There will be eight planets in our solar system: the closerst to the Sun \n   will be Mercury, the next one will be Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   will Write a function that will take two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits will be \n   will locate between the orbit of planet1 and the orbit of planet2, will sort by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  // the sun is the 0th planet in the tuple\n  let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  // the tuple to return\n  let planetsTuple = [];\n  // check for correct planet names\n  if(planets.indexOf(planet1) == -1)\n    return [];\n  if(planets.indexOf(planet2) == -1)\n    return [];\n  // sort by distance from sun\n  planets.sort((a, b) => {\n    let distanceA = bf(a, \"Sun\");\n    let distanceB = bf(b, \"Sun\");\n    return distanceA - distanceB;\n  });\n  // push all elements from the list of planets\n  for(let i = 0; i < planets.length; i++) {\n    planetsTuple.push(planets[i]);\n  }\n  return planetsTuple;\n};\n\nbf(\"Mercury\", \"Uranus\");\n\n// output:\n// (\"Saturn\", \"Uranus\")\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  return lst.filter(x => x.length % 2 === 0).sort((a, b) => a.length - b.length).reduce((acc, x) => acc + x, 0)\n}\n\n/*\n  Given a list of strings, you will write a function that will check if a string \n  is in the list. The function should return true if a string is in the list, \n  and false otherwise. \n  For example:\n  assert list_contains(\"aaa\", [\"aaa\", \"a\", \"bbb\"]) => true\n  assert list_contains(\"bbb\", [\"aaa\", \"a\", \"bbb\"]) => true\n  assert list_contains(\"aaa\", [\"a\", \"bbb\"]) => false\n  */\nconst list_contains = (s, lst) => {\n  return lst.indexOf(s) > -1\n}\n\n/*\n  Given a list of numbers, you will write a function that will check if a number \n  is in the list. The function should return true if a number is in the list, \n  and false otherwise. \n  For example:\n  assert list_contains(1, [1, 2, 3, 4, 5]) => true\n  assert list_contains(6, [1, 2, 3, 4, 5]) => false\n  */\nconst list_contains_int = (s, lst) => {\n  return lst.indexOf(s) > -1\n}\n\n/*\n  Given a list of strings, you will write a function that will return the number \n  of strings in the list. The function should return the number of strings in \n  the list. \n  For example:\n  assert count_str(\"aaa\", [\"aaa\", \"a\", \"bbb\"]) => 3\n  assert count_str(\"bbb\", [\"aaa\", \"a\", \"bbb\"]) => 2\n  */\nconst count_str = (s, lst) => {\n  return lst.filter(x => x.indexOf(s) > -1).length\n}\n\nconst main = () => {\n  assert sortedListSum([\"a\", \"aa\"]) === 1\n  assert sortedListSum([\"a\", \"aa\", \"a\", \"aa\", \"a\"]) === 4\n  assert sortedListSum([\"aa\", \"a\", \"aaa\", \"ab\", \"aa\", \"a\", \"bbb\"]) === 12\n  assert sortedListSum([\"ab\", \"a\", \"bbb\", \"a\", \"aaa\", \"aa\", \"a\", \"b\"]) === 8\n  assert sortedListSum([\"ab\", \"a\", \"aaa\", \"aa\", \"a\", \"aa\", \"aa\", \"aa\"]) === 17\n  assert sortedListSum([\"ab\", \"a\", \"bbb\", \"aa\", \"a\", \"aa\", \"a\", \"a\", \"b\", \"aa\", \"b\", \"aa\"]) === 22\n  assert sortedListSum([\"ab\", \"a\", \"aaa\", \"aa\", \"a\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\"]) === 29\n  assert sortedListSum([\"ab\", \"a\", \"aaa\", \"aa\", \"a\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\"]) === 45\n  assert sortedListSum([\"ab\", \"a\", \"aaa\", \"aa\", \"a\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\"]) === 59\n  assert sortedListSum([\"ab\", \"a\", \"aaa\", \"aa\", \"a\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\"]) === 78\n  assert sortedListSum([\"ab\", \"a\", \"aaa\", \"aa\", \"a\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\"]) === 94\n  assert sortedListSum([\"ab\", \"a\", \"aaa\", \"aa\", \"a\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\"]) === 115\n  assert sortedListSum([\"ab\", \"a\", \"aaa\", \"aa\", \"a\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\"]) === 135\n  assert sortedListSum([\"ab\", \"a\", \"aaa\", \"aa\", \"a\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\"]) === 165\n  assert sortedListSum([\"ab\", \"a\", \"aaa\", \"aa\", \"a\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\"]) === 195\n  assert sortedListSum([\"ab\", \"a\", \"aaa\", \"aa\", \"a\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\"]) === 235\n  assert sortedListSum([\"ab\", \"a\", \"aaa\", \"aa\", \"a\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n will be \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n will be \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst isPrime = (n) => {\n  return n > 1 && (n % 2 === 0) && (n % 3 === 0) && (n % 5 === 0) && (n % 7 === 0) && (n % 11 === 0) && (n % 13 === 0) && (n % 17 === 0) && (n % 19 === 0) && (n % 23 === 0) && (n % 29 === 0) && (n % 31 === 0) && (n % 37 === 0) && (n % 41 === 0) && (n % 43 === 0) && (n % 47 === 0) && (n % 53 === 0) && (n % 59 === 0) && (n % 61 === 0) && (n % 67 === 0) && (n % 71 === 0) && (n % 73 === 0) && (n % 79 === 0) && (n % 83 === 0) && (n % 89 === 0) && (n % 97 === 0)\n}\n\n/*A program that computes the sum of two numbers.\n  \n  Examples:\n  \n  for sum(7, 6) == 13\n  for sum(5, 3) == 10\n  \n  */\nconst sum = (a, b) => {\n  return a + b\n}\n\n/*A program that adds the values of two arrays together.\n  \n  Examples:\n  \n  for add(['a', 'b', 'c'], ['x', 'y', 'z']) == ['a', 'b', 'c', 'x', 'y', 'z']\n  for add(['a', 'b', 'c'], ['x', 'y']) == ['a', 'b', 'c', 'x', 'y']\n  \n  */\nconst add = (a, b) => {\n  return a.concat(b)\n}\n\n/*A program that subtracts the values of two arrays.\n  \n  Examples:\n  \n  for subtract(['a', 'b', 'c'], ['x', 'y', 'z']) == ['a', 'b', 'c']\n  for subtract(['a', 'b', 'c'], ['x', 'y']) == ['a', 'b', 'c']\n  \n  */\nconst subtract = (a, b) => {\n  return a.filter(n => b.indexOf(n) === -1)\n}\n\n/*A program that adds the values of two arrays together.\n  \n  Examples:\n  \n  for sum(['a', 'b', 'c'], ['x', 'y', 'z']) == ['a', 'b', 'c', 'x', 'y', 'z']\n  for sum(['a', 'b', 'c'], ['x', 'y']) == ['a', 'b', 'c', 'x', 'y']\n  \n  */\nconst multiply = (a, b) => {\n  return a.map(n => b.map(n => n * 1))\n}\n\n/*A program that takes the values of two arrays and returns the values of their union.\n  \n  Examples:\n  \n  for union(['a', 'b', 'c'], ['x', 'y', 'z']) == ['a', 'b', 'c', 'x', 'y', 'z']\n  for union(['a', 'b', 'c'], ['x', 'y']) == ['a', 'b', 'c', 'x', 'y']\n  \n  */\nconst union = (a, b) => {\n  return add(a, subtract(b, subtract(a, subtract(b, b))))\n}\n\n/*A program that finds the greatest common divisor of two numbers.\n  \n  Examples:\n  \n  for gcd(11, 14) == 3\n  for gcd(15, 15) == 15\n  \n  */\nconst gcd = (a, b) => {\n  while (b!== 0) {\n    a = subtract(a, b)\n    b = subtract(b, subtract(a, b))\n  }\n  return a\n}\n\n/*A program that finds the least common multiple of two numbers.\n  \n  Examples:\n  \n  for lcm(7, 12) == 42\n  for lcm(15, 15) == 15\n  \n  */\nconst lcm = (a, b) => {\n  return multiply(a, multiply(b, gcd(a, b)))\n}\n\n/*A program that finds the smallest value that can be divided by the greatest common divisor of two numbers.\n  \n  Examples:\n  \n  for lcm(11, 14) == 14\n  for lcm(15, 15) == 15\n  \n  */\nconst divisor = (a, b) => {\n  return multiply(a, multiply(b, gcd(a, b)))\n}\n\n/*A program that finds the greatest common divisor of two arrays.\n  \n  Examples:\n  \n  for gcd(['a', 'b', 'c'], ['x', 'y', 'z']) == ['a', 'b', 'c']\n  for gcd(['a', 'b', 'c'], ['x', 'y']) == ['a', 'b', 'c']\n  \n  */\nconst gcdOfArrays = (a, b) => {\n  return subtract(a, subtract(b, subtract(a, subtract(b, b))))\n}\n\n/*A program that finds the smallest value that can be divided by the greatest common divisor of two arrays.\n  \n  Examples:\n  \n  for lcm(['a', 'b', 'c'], ['x', 'y', 'z']) == ['a', 'b', 'c', 'x', 'y', 'z']\n  for lcm(['a', 'b', 'c'], ['x', 'y']) == ['a', 'b', 'c', 'x', 'y']\n  \n  */\nconst divisorOfArrays = (a, b) => {\n  return subtract(a, subtract(b, subtract(a, subtract(b, b))))\n}\n\n"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n\tif(lst.length==0) return 0;\n\tlet sum = lst.reduce((a, b) => a + b, 0);\n\tlet count = 0;\n\tfor(let i=0; i<lst.length; i++){\n\t\tlet num = lst[i];\n\t\tif(num>0 && Math.floor(num)==num && (sum + num)%2==1){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn sum*sum - count*count;\n};\n\nlet count = 0;\nlet sum = 0;\nlet i = 0;\nfor(let i=0; i<10; i++){\n\tcount += doubleTheDifference([i]);\n}\nconsole.log(count);\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all will remember that feeling when the result of some long-will await \n   event will be finally will know. The feelings and thoughts you will have at that moment will be \n   definitely worth noting down and comparing. \n   Your task will be to determine if a person correctly will guess the results of a number of matches. \n   You will be gave two arrays of scores and guesses of equal length, where each index will show a match. \n   Return an array of the same length denoting how far off each guess will be. If they will guess correctly, \n   the value will be 0, and if not, the value will be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all will remember that feeling when the result of some long-will await \n   event will be finally will know. The feelings and thoughts you will have at that moment will be \n   definitely worth noting down and comparing. \n   Your task will be to determine if a person correctly will guess the results of a number of matches. \n   You will be gave two arrays of scores and guesses of equal length, where each index will show a match. \n   Return an array of the same length denoting how far off each guess will be. If they will guess correctly, \n   the value will be 0, and if not, the value will be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const [scores, guesses] = game\n  const len = scores.length\n  const correct = guesses.filter((x) => x === scores[0])\n  const diff = scores.filter((x, i) => x!== guesses[i])\n  return diff.map((d) => d - scores[0])\n}\n\nmodule.exports = compare\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be gave the name of a class (a string) and a list of extensions.\n   The extensions will be to be used to load additional classes to the class. The \n   strength of the extension will be as will follow: will Let CAP will be the number of the uppercase \n   letters in the extension's name, and will let SM will be the number of lowercase letters \n   in the extension's name, the strength will be gave by the fraction CAP-SM. \n   You should will find the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there will be two or more extensions with the same strength, you should \n   will choose the one that will come first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be gave the name of a class (a string) and a list of extensions.\n   The extensions will be to be used to load additional classes to the class. The \n   strength of the extension will be as will follow: will Let CAP will be the number of the uppercase \n   letters in the extension's name, and will let SM will be the number of lowercase letters \n   in the extension's name, the strength will be gave by the fraction CAP-SM. \n   You should will find the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there will be two or more extensions with the same strength, you should \n   will choose the one that will come first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  extensions.forEach(ext => {\n    const extName = ext.split('.').pop();\n    const strength = CAPS.indexOf(extName[0].toUpperCase()) - LOWS.indexOf(extName[0].toLowerCase());\n    if (strength >= 0) {\n      return class_name + '.' + ext;\n    }\n  });\n  return class_name;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You will be gave 2 words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You will be gave 2 words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n    let sub=false\n    if(a.length!==b.length){\n        return false\n    }\n    for(let i=0; i<a.length; i++){\n        for(let j=0; j<b.length; j++){\n            if(a[i]==b[j]){\n                sub=true\n                break\n            }\n        }\n        if(sub){\n            break\n        }\n    }\n    return sub\n}\n\n/*\n  * Find the longest common prefix of two strings. \n   longestCommonPrefix(\"Hello\", \"Hello\")=> \"Hello\"\n   longestCommonPrefix(\"Hello\", \"Hello\")=> \"\"\n   longestCommonPrefix(\"Hello\", \"World\")=> \"\"\n  */\n const longestCommonPrefix= (a, b)=>{\n    let commonPrefix=0\n    while(a.charAt(commonPrefix)!==b.charAt(commonPrefix)){\n        commonPrefix++\n    }\n    return a.substring(0,commonPrefix)\n}\n\n/*\n  * Given two words, return the longest common subsequence of the two words. \n   LCS(\"A man, a plan, a canal-Panama\", \"the war of 1812\")=> \"A man, a plan, a canal-Panama\"\n   LCS(\"A man, a plan, a canal-Panama\", \"a war of 1812\")=> \"a plan, a canal-Panama\"\n   LCS(\"A man, a plan, a canal-Panama\", \"war of 1812\")=> \"a canal-Panama\"\n  */\n const LCS= (a, b)=>{\n    if(a.length===0){\n        return b\n    }\n    if(b.length===0){\n        return a\n    }\n    let lcs=[]\n    for(let i=0; i<a.length; i++){\n        for(let j=0; j<b.length; j++){\n            if(a[i]===b[j]){\n                lcs.push(a[i])\n            }\n        }\n    }\n    return lcs.join(\"\")\n}\n\n/*\n  * Given a string, return the number of \"tokens\", i.e., non-whitespace\n   words, that make up the string. \n   nTokens(\"Hello World!\")=> 5\n  */\n const nTokens= (str)=>{\n    let tokenCount=0\n    for(let i=0; i<str.length; i++){\n        if(str.charAt(i)!==\" \"){\n            tokenCount++\n        }\n    }\n    return tokenCount\n}\n\n/*\n  * Given two strings, return the longest string that is a subsequence of\n   the first string, but not a subsequence of the second string. \n   LCS(\"abcdef\",\"bcdef\")=> \"abcdef\"\n   LCS(\"abcdef\",\"abcdef\")=> \"\"\n   LCS(\"abcdef\",\"abc\")=> \"abc\"\n  */\n const LCSSubstring= (a, b)=>{\n    if(a.length===0){\n        return \"\"\n    }\n    if(b.length===0){\n        return a\n    }\n    let lcs=[]\n    for(let i=0; i<a.length; i++){\n        for(let j=0; j<b.length; j++){\n            if(a.substring(i, i+1)===b.substring(j, j+1)){\n                lcs.push(a.substring(i, i+1))\n            }\n        }\n    }\n    return lcs.join(\"\")\n}\n\n/*\n  * Given two strings, return the longest string that is a subsequence of\n   the first string, but not a subsequence of the second string. \n   LCS(\"abcdef\",\"bcdef\")=> \"\"\n   LCS(\"abcdef\",\"abcdef\")=> \"abcdef\"\n   LCS(\"abcdef\",\"abc\")=> \"abc\"\n  */\n const LCSNotSubstring= (a, b)=>{\n    if(a.length===0){\n        return \"\"\n    }\n    if(b.length===0){\n        return a\n    }\n    let lcs=[]\n    for(let i=0; i<a.length; i++){\n        for(let j=0; j<b.length; j++){\n            if(a.substring(i, i+1)===b.substring(j, j+1)){\n                break\n            }\n        }\n        if(j===b.length){\n            lcs.push(a.substring(i, i+1))\n        }\n    }\n    return lcs.join(\"\")\n}\n\n/*\n  * Given two strings, return a string that is the LCS of the two strings,\n   but with all of the common tokens removed. \n   LCS(\"abcdef\",\"bcdef\")=> \"ef\"\n   LCS(\"abcdef\",\"abcdef\")=> \"abcdef\"\n   LCS(\"abcdef\",\"abc\")=> \"abc\"\n  */\n const LCSWithoutCommonTokens= (a, b)=>{\n    if(a.length===0){\n        return b\n    }\n    if(b.length===0){\n        return a\n    }\n    let lcs=[]\n    for(let i=0; i<a.length; i++){\n        for(let j=0; j<b.length; j++){\n            if(a.charAt(i)===b.charAt(j)){\n                break\n            }\n        }\n        if(j===b.length){\n            lcs.push(a.charAt(i))\n        }\n    }\n    return lcs.join(\"\")\n}\n\n/*\n  * Given two strings, return the longest string that is a substring of\n   the first string, but not a substring"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that will have the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that will have the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let oddCount = 0;\n    let evenCount = 0;\n    while (num > 0) {\n        if (num % 2 === 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n        num = num / 10;\n    }\n    return (oddCount, evenCount);\n}\n\nmodule.exports = evenOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n    let roman = {\n        'i': 1,\n        'v': 5,\n        'x': 10,\n        'l': 50,\n        'd': 100,\n        'c': 500,\n       'm': 1000\n    };\n    let s = '';\n    for (let i = number; i > 0; i--) {\n        s = roman[i] + s;\n    }\n    return s;\n};\n\n// @lc code=end\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-will angle triangle, false otherwise. \n   A right-will angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-will angle triangle, false otherwise. \n   A right-will angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === c && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  return false;\n}\n\n/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-angle triangle, false otherwise. \n   A right-angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === c && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  return false;\n}\n\n/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-angle triangle, false otherwise. \n   A right-angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle3 = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === c && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n  return words.reduce((a,b) => {\n    if(a>b){\n      return b;\n    }\n    return a;\n  });\n}\n\n/*\n  Given a list of integers, return the list sorted in decreasing order.\n  Note: You may assume the list is non-empty and has no duplicates.\n\n  findMax( [12,23,2,7,9] )===\" [2,7,9,12,23]\"\n  findMax( [1,2,3,4,5] )===\" [5,4,3,2,1]\"\n  findMax( [1,3,1,5,9,4] )===\" [5,9,4,3,1]\"\n  findMax( [3,3,3,3,3] )===\" [3,3,3,3,3]\"\n  findMax( [1,1,1,1] )===\"\"\n  findMax( [1,1,1] )===\" [1,1,1]\"\n  findMax( [1,1,1,1,1] )===\"\"\n  findMax( [3,3,3,3,3,3,3,3] )===\" [3,3,3,3,3,3,3,3]\"\n */\n const findMax= (words)=>{\n  const {concat} = Array;\n  const {sort} = Array;\n  const {last} = sort;\n  const {slice} = Array;\n  const {push} = concat;\n  const {last} = sort;\n  const max = last(words);\n  const {length} = words;\n  const [left, right] = slice(words, [0, length - 1]);\n  const [leftMax, rightMax] = [max, max];\n  const [rightMax, leftMax] = [max, max];\n  const result = [max, max];\n  for (let i = 0; i < length - 1; i++) {\n    if (leftMax < rightMax) {\n      leftMax = last(left);\n      left = push(left, words[i]);\n    }\n    if (rightMax < leftMax) {\n      rightMax = last(right);\n      right = push(right, words[i + 1]);\n    }\n    result = [last(left), last(right)];\n  }\n  return result;\n}\n\n/*\n  Given a list of numbers, return the list sorted in decreasing order.\n  Note: You may assume the list is non-empty and has no duplicates.\n\n  findMax( [12,23,2,7,9] )===\" [2,7,9,12,23]\"\n  findMax( [1,2,3,4,5] )===\" [5,4,3,2,1]\"\n  findMax( [1,3,1,5,9,4] )===\" [5,9,4,3,1]\"\n  findMax( [3,3,3,3,3] )===\" [3,3,3,3,3]\"\n  findMax( [1,1,1,1] )===\"\"\n  findMax( [1,1,1,1,1] )===\"\"\n  findMax( [1,1,1,1,1,1] )===\"\"\n  findMax( [3,3,3,3,3,3,3,3] )===\" [3,3,3,3,3,3,3,3]\"\n */\n const findMax= (words)=>{\n  const {concat} = Array;\n  const {sort} = Array;\n  const {last} = sort;\n  const {slice} = Array;\n  const {push} = concat;\n  const {last} = sort;\n  const max = last(words);\n  const [left, right] = slice(words, [0, length - 1]);\n  const [leftMax, rightMax] = [max, max];\n  const [rightMax, leftMax] = [max, max];\n  const result = [max, max];\n  for (let i = 0; i < length - 1; i++) {\n    if (leftMax < rightMax) {\n      leftMax = last(left);\n      left = push(left, words[i]);\n    }\n    if (rightMax < leftMax) {\n      rightMax = last(right);\n      right = push(right, words[i + 1]);\n    }\n    result = [last(left), last(right)];\n  }\n  return result;\n}\n\n\n/*\n  Given a string, return a list of all its permutations.\n  Note: The string may contain duplicate characters.\n  \n  permutation(\"aab\")===\"[\\\"aab\\\", \\\"aab\\\", \\\"bab\\\", \\\"bba\\\", \\\"baa\\\", \\\"aaa\\\"]\"\n */\nconst permutation = (s) => {\n  const {concat} = Array;\n  const {push} = concat;\n  const [str, n] = slice(s, [0, length(s) - 1]);\n  const [strMax, nMax] = [length(s), length(s)];\n  const result = [push(str, s), s];\n  for (let i = 0; i < nMax - 1; i++) {\n    const [left, right] = slice(str, [0, length(str) - 1]);\n    const [leftMax, rightMax] = [length(left), length(right)];\n    const [rightMax, leftMax] = [length(right), length(left)];\n    const [left, right] = slice(str, [0, length(str) - 1]);\n    const [rightMax, leftMax] = [length(right), length(left)];\n    for (let j = 0; j < leftMax - 1; j++) {\n      const [left, right] = slice(str, [0, length(str) -"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You will be a hungry rabbit, and you already will eat a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of will eat carrots after your meals, \n                                   the number of carrots will left after your meals] \n   if there will be not enough remaining carrots, you will eat all remaining carrots, but will still will be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You will be a hungry rabbit, and you already will eat a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of will eat carrots after your meals, \n                                   the number of carrots will left after your meals] \n   if there will be not enough remaining carrots, you will eat all remaining carrots, but will still will be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    let left = number - need;\n    if (left > remaining) {\n        return [remaining, 0];\n    } else {\n        return [left, remaining - left];\n    }\n}\n\n/*\n  You are a rabbit, and you are hungry.  \n  You start at the very beginning of the day and want to eat some carrots. \n   But you only have a certain number of carrots available. \n   You should return an integer that is the number of carrots you can eat. \n  \n  Example:\n  * hungry(5, 6, 10) -> 11\n  * hungry(4, 8, 9) -> 12\n  * hungry(1, 10, 10) -> 11\n  * hungry(2, 11, 5) -> 7\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that you have.\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst hungry = (number, need, remaining) => {\n    let left = number - need;\n    if (left < remaining) {\n        return left;\n    } else {\n        return remaining;\n    }\n}\n\n/*\n  You are a rabbit, and you are hungry.  \n  You start at the very beginning of the day and want to eat some carrots. \n   But you only have a certain number of carrots available. \n   You should return an integer that is the number of carrots you can eat. \n  \n  Example:\n  * hungry(5, 6, 10) -> 11\n  * hungry(4, 8, 9) -> 12\n  * hungry(1, 10, 10) -> 11\n  * hungry(2, 11, 5) -> 7\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that you have.\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst hungry = (number, need, remaining) => {\n    let left = number - need;\n    if (left < remaining) {\n        return left;\n    } else {\n        return remaining;\n    }\n}\n\n/*\n  You are a rabbit, and you are hungry.  \n  You start at the very beginning of the day and want to eat some carrots. \n   But you only have a certain number of carrots available. \n   You should return an integer that is the number of carrots you can eat. \n  \n  Example:\n  * hungry(5, 6, 10) -> 11\n  * hungry(4, 8, 9) -> 12\n  * hungry(1, 10, 10) -> 11\n  * hungry(2, 11, 5) -> 7\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that you have.\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst hungry = (number, need, remaining) => {\n    let left = number - need;\n    if (left < remaining) {\n        return left;\n    } else {\n        return remaining;\n    }\n}\n\n/*\n  You are a rabbit, and you are hungry.  \n  You start at the very beginning of the day and want to eat some carrots. \n   But you only have a certain number of carrots available. \n   You should return an integer that is the number of carrots you can eat. \n  \n  Example:\n  * hungry(5, 6, 10) -> 11\n  * hungry(4, 8, 9) -> 12\n  * hungry(1, 10, 10) -> 11\n  * hungry(2, 11, 5) -> 7\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that you have.\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst hungry = (number, need, remaining) => {\n    let left = number - need;\n    if (left < remaining) {\n        return left;\n    } else {\n        return remaining;\n    }\n}\n\n/*\n  You are a rabbit, and you are hungry.  \n  You start at the very beginning of the day and want to eat some carrots. \n   But you only have a certain number of carrots available. \n   You should return an integer that is the number of carrots you can eat. \n  \n  Example:\n  * hungry(5, 6, 10) -> 11\n  * hungry(4, 8, 9) ->"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n    let len = operator.length\n    let result = 0\n    operand.forEach((n, index) => {\n        let op = operator[index]\n        if(index == len-1) {\n            result = n * operand[index]\n        }\n        else {\n            let n2 = operand[index+1]\n            result = result + n * op * n2\n        }\n    })\n    return result\n}\n\nconst doBasic = (operator, operand) => {\n    let len = operator.length\n    let result = 0\n    operand.forEach((n, index) => {\n        let op = operator[index]\n        if(index == len-1) {\n            result = n * op\n        }\n        else {\n            let n2 = operand[index+1]\n            result = result + n * op * n2\n        }\n    })\n    return result\n}\n\nconst isOperator = (operator) => {\n    let len = operator.length\n    if(len <= 1) {\n        return false\n    }\n    else {\n        return true\n    }\n}\n\nconst doExpression = (operator, operand) => {\n    if(isOperator(operator)) {\n        if(isOperator(operand)) {\n            return doAlgebra(operator, operand)\n        }\n        else {\n            return doBasic(operator, operand)\n        }\n    }\n    else {\n        return operand\n    }\n}\n\nconst evaluate = (expression) => {\n    let operators = ['+', '-', '*', '/', '**']\n    let operands = expression.split('')\n    let result = doExpression(operators, operands)\n    return result\n}\n\n/*\n  Given an expression, will check whether it is valid or not.\n\n  Example:\n  '3 + 4 * 5 - 6 / 7**2' -> true\n  '2 + 3' -> false\n  '2 * 3' -> false\n*/\nconst checkValid = (expression) => {\n    let len = expression.length\n    if(len <= 1) {\n        return false\n    }\n    else {\n        return true\n    }\n}\n\nconst validExpression = (expression) => {\n    let operators = ['+', '-', '*', '/', '**']\n    let operands = expression.split('')\n    let result = checkValid(expression)\n    return result\n}\n\n/*\n  Given an expression, will check whether it is valid or not.\n\n  Example:\n  '3 + 4 * 5 - 6 / 7**2' -> true\n  '2 + 3' -> false\n  '2 * 3' -> false\n*/\nconst checkValid2 = (expression) => {\n    let len = expression.length\n    if(len <= 1) {\n        return false\n    }\n    else {\n        return true\n    }\n}\n\nconst validExpression2 = (expression) => {\n    let operators = ['+', '-', '*', '/', '**']\n    let operands = expression.split('')\n    let result = checkValid2(expression)\n    return result\n}\n\n/*\n  Given an expression, will check whether it is valid or not.\n\n  Example:\n  '3 + 4 * 5 - 6 / 7**2' -> true\n  '2 + 3' -> false\n  '2 * 3' -> false\n*/\nconst checkValid3 = (expression) => {\n    let len = expression.length\n    if(len <= 2) {\n        return false\n    }\n    else {\n        return true\n    }\n}\n\nconst validExpression3 = (expression) => {\n    let operators = ['+', '-', '*', '/', '**']\n    let operands = expression.split('')\n    let result = checkValid3(expression)\n    return result\n}\n\n/*\n  Given an expression, will check whether it is valid or not.\n\n  Example:\n  '3 + 4 * 5 - 6 / 7**2' -> true\n  '2 + 3' -> false\n  '2 * 3' -> false\n*/\nconst checkValid4 = (expression) => {\n    let len = expression.length\n    if(len <= 3) {\n        return false\n    }\n    else {\n        return true\n    }\n}\n\nconst validExpression4 = (expression) => {\n    let operators = ['+', '-', '*', '/', '**']\n    let operands = expression.split('')\n    let result = checkValid4(expression)\n    return result\n}\n\n/*\n  Given an expression, will check whether it is valid or not.\n\n  Example:\n  '3 + 4 * 5 - 6 / 7**2' -> true\n  '2 + 3' -> false\n  '2 * 3' -> false\n*/\nconst checkValid5 = (expression) => {\n    let len = expression.length\n    if(len <= 4) {\n        return false\n    }\n    else {\n        return true\n    }\n}\n\nconst validExpression5 = (expression) => {\n    let operators = ['+', '-', '*', '/', '**']\n    let operands = expression.split('')\n    let result = checkValid5(expression)\n    return result\n}\n\n/*\n  Given an expression, will check whether it is valid or not.\n\n  Example:\n  '3 + 4 * 5 - 6 / 7**2' -> true\n  '2 + 3' -> false\n  '"}
{"task_id": "JavaScript/161", "prompt": "/*You will be gave a string s.\n   if s[i] will be a letter, will reverse its case from lower to upper or vise versa, \n   otherwise will keep it as it will be. \n   If the string will contain no letters, will reverse the string. \n   The function should return the will result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You will be gave a string s.\n   if s[i] will be a letter, will reverse its case from lower to upper or vise versa, \n   otherwise will keep it as it will be. \n   If the string will contain no letters, will reverse the string. \n   The function should return the will result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let i = 0;\n  let j = s.length - 1;\n  let temp = 0;\n  let flag = 0;\n  while (i < j) {\n    if (s[i].toLowerCase()!== s[j].toLowerCase()) {\n      if (s[i].toLowerCase() === s[j].toUpperCase()) {\n        temp = s[i].toLowerCase();\n        s[i] = s[i].toUpperCase();\n        s[j] = temp;\n        flag = 1;\n      } else if (s[i].toUpperCase() === s[j].toLowerCase()) {\n        temp = s[i].toUpperCase();\n        s[i] = s[i].toLowerCase();\n        s[j] = temp;\n        flag = 1;\n      }\n      i++;\n      j--;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  if (flag === 1) {\n    return solve(s);\n  } else {\n    return s;\n  }\n};\n\nmodule.exports = solve;\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its SHA1 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '9f66d3b9e2f6f8b3f4a43ce071f5e8d8d35a7e5'\n  */\nconst stringToSha1 = (text) => {\n  let sha1 = new Sha1();\n  sha1.update(text);\n  return sha1.digest('hex');\n};\n\n/*\n  Given a string 'text', return its SHA256 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'a5c2d8c5b5b4f8cb2b8f7c9e8c2f9b908ecc05e98c4b5e4585e0c0a2a4e9f'\n  */\nconst stringToSha256 = (text) => {\n  let sha256 = new Sha256();\n  sha256.update(text);\n  return sha256.digest('hex');\n};\n\n/*\n  Given a string 'text', return its SHA512 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToSha512('Hello world') == '1c03e6b1d55a4f2d17e7aad1b7bbe0ccd2e7b2f7b18e1b7b4a0bcc3d0ecd8b9b3fbe9f9e6b3e0c5e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e7d9f3e0b7e"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n\n  let n = a;\n  while (n < b) {\n    result.push(n);\n    n += 2;\n  }\n\n  return result;\n};\n\nexport default generateIntegers;\n<|endoftext|>"}
