{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const elements = Array.from(numbers);\n  const elementsLength = elements.length;\n  const isClose = (number1, number2) => Math.abs(number1 - number2) <= threshold;\n  const allClose = (number1, number2) => number1 === number2;\n  const indexOfClosest = (elements, number) => elements.findIndex(isClose(number, element));\n  const indexOfClosestAll = (elements, number) => elements.findIndex(allClose(number, element));\n  const indexes = elements.map((element, index) => indexOfClosest(elements, element));\n  return indexes.every(index => index === indexOfClosestAll(elements, number));\n};\n\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nconst generateNumberedList = (numberOfElements) => {\n  const numbers = Array(numberOfElements);\n  for (let i = 0; i < numberOfElements; i++) {\n    numbers[i] = getRandomInt(1, numberOfElements);\n  }\n  return numbers;\n};\n\nconst generateCluster = (numberOfElements, clusterSize) => {\n  const clusters = generateNumberedList(clusterSize);\n  const clusteredElements = clusters.map(() => generateNumberedList(numberOfElements));\n  return clusters.concat(clusteredElements);\n};\n\nconst generateClusters = (numberOfElements, clustersNumber) => {\n  const clusters = generateNumberedList(clustersNumber);\n  const clusteredElements = clusters.map(() => generateCluster(numberOfElements, clustersNumber));\n  return clusters.concat(clusteredElements);\n};\n\nconst generateRandomClusters = (numberOfElements, clustersNumber) => {\n  const clusters = generateClusters(numberOfElements, clustersNumber);\n  const clusteredElements = clusters.map(() => generateCluster(numberOfElements, clustersNumber));\n  return clusters.concat(clusteredElements);\n};\n\nconst getClusterDifference = (cluster1, cluster2) => {\n  const elements1 = Array.from(cluster1);\n  const elements2 = Array.from(cluster2);\n  const elementsDifference = elements1.filter(element =>!elements2.includes(element));\n  return elementsDifference;\n};\n\nconst getClusterElements = (cluster) => Array.from(cluster);\n\nconst getClusterSizes = (clusters) => {\n  const clustersSizes = clusters.map(getClusterElements);\n  const clustersSizesSum = clustersSizes.reduce((sum, elements) => sum + elements.length, 0);\n  return clustersSizesSum;\n};\n\nconst getClusterNumber = (clusters) => {\n  const clustersSizes = clusters.map(getClusterSizes);\n  return clustersSizes.reduce((sum, elements) => sum + elements, 0);\n};\n\nconst getClusterPercentage = (clusters) => {\n  const clustersSizes = clusters.map(getClusterSizes);\n  return clustersSizes.reduce((sum, elements) => sum + elements * 100 / clusters.length, 0);\n};\n\nconst getClusterVariance = (clusters) => {\n  const clustersSizes = clusters.map(getClusterSizes);\n  const total = clustersSizes.reduce((sum, elements) => sum + elements, 0);\n  const variance = clustersSizes.reduce((sum, elements) => sum + Math.pow(elements - total / clusters.length, 2), 0);\n  return variance;\n};\n\nconst getClustersDifference = (clusters1, clusters2) => {\n  const clustersDifference = clusters1.filter(cluster1 =>!clusters2.includes(cluster1));\n  return clustersDifference;\n};\n\nconst getClusterDifferencePercentage = (cluster1, cluster2) => {\n  const elements1 = Array.from(cluster1);\n  const elements2 = Array.from(cluster2);\n  const elementsDifference = elements1.filter(element =>!elements2.includes(element));\n  return elementsDifference.length * 100 / elements1.length;\n};\n\nconst getClusterDifferenceVariance = (cluster1, cluster2) => {\n  const elements1 = Array.from(cluster1);\n  const elements2 = Array.from(cluster2);\n  const elementsDifference = elements1.filter(element =>!elements2.includes(element));\n  const total = elements1.length + elements2.length;\n  const variance = elementsDifference.length * Math.pow(elementsDifference.length - total, 2) / total;\n  return variance;\n};\n\nmodule.exports = {\n  hasCloseElements,\n  generateNumberedList,\n  generateCluster,\n  generateClusters,\n  generateRandomClusters,\n  getClusterDifference,\n  getClusterElements,\n  getClusterSizes,\n  getClusterNumber,\n  getClusterPercentage,\n  getClusterVariance,\n  getClustersDifference,\n  getClusterDifferencePercentage,\n  getClusterDifferenceVariance\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of cuddle parenthesis. Your finish is to \n   separate those group into separate strings and return the list of those. \n   disjoined groups are balanced (each open couple is properly closed) and not nest within each other \n   Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string containing multiple groups of cuddle parenthesis. Your finish is to \n   separate those group into separate strings and return the list of those. \n   disjoined groups are balanced (each open couple is properly closed) and not nest within each other \n   Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let output = [];\n  let i = 0;\n  let len = paren_string.length;\n  while (i < len) {\n    let group = paren_string.substr(i, 1);\n    if (group === '(') {\n      output.push(group);\n      i += 1;\n      if (paren_string[i] === '(') {\n        output.push(paren_string.substr(i, 1));\n        i += 1;\n      }\n    } else if (group === ')') {\n      output.push(group);\n      i += 1;\n      if (paren_string[i] === ')') {\n        output.push(paren_string.substr(i, 1));\n        i += 1;\n      }\n    } else {\n      output.push(group);\n      i += 1;\n    }\n  }\n  return output;\n};\n\n// Your function is to write a function that will take an array of strings, and return an array of all the words in the array,\n// but excluding any of the words in the array passed to the function. For example, if the array contains 'a b c d' then \n// the function should return ['b', 'c', 'd']\nconst removeWords = (words_to_remove) => {\n  let output = [];\n  let words_to_keep = [];\n  words_to_remove.forEach((word) => {\n    words_to_keep = words_to_keep.concat(removeWords(words_to_remove.filter((i) => i!== word)));\n  });\n  words_to_keep.forEach((word) => {\n    if (words_to_remove.indexOf(word) === -1) {\n      output.push(word);\n    }\n  });\n  return output;\n};\n\n// Your function is to write a function that will take an array of strings, and return an array of all the words in the array,\n// but excluding any of the words in the array passed to the function. For example, if the array contains 'a b c d' then \n// the function should return ['b', 'c', 'd']\nconst removeWords1 = (words_to_remove) => {\n  let output = [];\n  let words_to_keep = [];\n  words_to_remove.forEach((word) => {\n    words_to_keep = words_to_keep.concat(removeWords(words_to_remove.filter((i) => i!== word)));\n  });\n  return words_to_keep;\n};\n\n// Your function is to write a function that will take an array of strings, and return an array of all the words in the array,\n// but excluding any of the words in the array passed to the function. For example, if the array contains 'a b c d' then \n// the function should return ['b', 'c', 'd']\nconst removeWords2 = (words_to_remove) => {\n  let output = [];\n  let words_to_keep = [];\n  words_to_remove.forEach((word) => {\n    words_to_keep = words_to_keep.concat(removeWords(words_to_remove.filter((i) => i!== word)));\n  });\n  return words_to_keep;\n};\n\n// Your function is to write a function that will take an array of strings, and return an array of all the words in the array,\n// but excluding any of the words in the array passed to the function. For example, if the array contains 'a b c d' then \n// the function should return ['b', 'c', 'd']\nconst removeWords3 = (words_to_remove) => {\n  let output = [];\n  let words_to_keep = [];\n  words_to_remove.forEach((word) => {\n    words_to_keep = words_to_keep.concat(removeWords(words_to_remove.filter((i) => i!== word)));\n  });\n  return words_to_keep;\n};\n\n// Your function is to write a function that will take an array of strings, and return an array of all the words in the array,\n// but excluding any of the words in the array passed to the function. For example, if the array contains 'a b c d' then \n// the function should return ['b', 'c', 'd']\nconst removeWords4 = (words_to_remove) => {\n  let output = [];\n  let words_to_keep = [];\n  words_to_remove.forEach((word) => {\n    words_to_keep = words_to_keep.concat(removeWords(words_to_remove.filter((i) => i!== word)));\n  });\n  return words_to_keep;\n};\n\n// Your function is to write a function that will take an array of strings, and return an array of all the words in the array,\n// but excluding any of the words in the array passed to the function. For example, if the array contains 'a b c d' then \n// the function should return ['b', 'c', 'd']\nconst removeWords5 = (words_to_remove) => {\n  let output = [];\n  let words_to_keep = [];\n  words_to_remove.forEach((word) => {\n    words_to_keep = words_to_keep.concat(removeWords(words_to_remove.filter((i) => i!== word)));\n  });\n  return words_to_keep;\n};\n\n// Your function is to write a function that will take an array of strings, and return an array of all the words in the array,\n// but excluding any of the words in the array passed to the function. For example, if the array contains 'a b c d' then \n// the function should return ['b', 'c', 'd']\nconst removeWords6 = (words_to_remove) => {\n  let output = [];\n  let words_to_keep = [];\n  words_to_remove.forEach((word"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const integer = Math.floor(number);\n  const decimal = number - integer;\n  return decimal;\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n   \n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInt = (number) => {\n  return Math.floor(number);\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n   \n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDec = (number) => {\n  const int = truncateInt(number);\n  const decimal = number - int;\n  return int + decimal;\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n   \n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal = (number) => {\n  const int = truncateInt(number);\n  const decimal = number - int;\n  return int + decimal;\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n   \n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateRound = (number) => {\n  const int = truncateInt(number);\n  const decimal = number - int;\n  return int + (Math.round(decimal) || 0);\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n   \n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateRoundDecimal = (number) => {\n  const int = truncateInt(number);\n  const decimal = number - int;\n  return int + (Math.round(decimal) || 0);\n}\n\nexport {\n  truncateNumber,\n  truncateInt,\n  truncateDec,\n  truncateDecimal,\n  truncateRound,\n  truncateRoundDecimal\n};\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n    const sum = operations.reduce((acc, cur) => acc + cur, 0);\n    if (sum < 0) {\n        return true;\n    }\n    return false;\n};\n\nexport default belowZero;<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute difference between each \n   element and a centerpoint (mean in this case ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute difference between each \n   element and a centerpoint (mean in this case ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n    // mean is defined as the sum of values / number of values\n    const sum = numbers.reduce((acc, n) => acc + n, 0);\n    const n = numbers.length;\n    return sum / n;\n};\n\n// Example 1\nconst meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n// = 1.0\n;\n\n// Example 2\nconst meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0])\n// = 1.25\n;\n\n// Example 3\nconst meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n// = 2.5\n;\n\n// Example 4\nconst meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n// = 3.75\n;\n\n// Example 5\nconst meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n// = 5.25\n;\n\n// Example 6\nconst meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0])\n// = 7.5\n;\n\n// Example 7\nconst meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])\n// = 10.0\n;\n\n// Example 8\nconst meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0])\n// = 11.25\n;\n\n// Example 9\nconst meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0])\n// = 12.5\n;\n\n// Example 10\nconst meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0])\n// = 13.75\n;\n\n// Example 11\nconst meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0])\n// = 14.25\n;\n\n// Example 12\nconst meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0])\n// = 15.5\n;\n\n// Example 13\nconst meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0])\n// = 16.0\n;\n\n// Example 14\nconst meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0])\n// = 17.0\n;\n\n// Example 15\nconst meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0])\n// = 18.0\n;\n\n// Example 16\nconst meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0])\n// = 19.0\n;\n\n// Example 17\nconst meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0])\n// = 20.0\n;\n\n// Example 18\nconst meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0])\n// = 21.0\n;\n\n// Example 19\nconst meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n    return [].concat(...numbers.map(number => [delimeter, number]))\n       .reverse();\n};\n\n/**\n  @param {string} text\n  @return {string}\n  Given a string `text` and an integer `delimeter`\n  insert a `delimeter` between every two characters of `text`\n  */\nconst intersperse_string = (text, delimeter) => {\n    return text.split('').join(delimeter)\n};\n\nconst intersperse_string_2 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\n/**\n  @param {string} text\n  @return {string}\n  Given a string `text` and an integer `delimeter`\n  insert a `delimeter` between every two characters of `text`\n  */\nconst intersperse_string_3 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\nconst intersperse_string_4 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\nconst intersperse_string_5 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\n/**\n  @param {string} text\n  @return {string}\n  Given a string `text` and an integer `delimeter`\n  insert a `delimeter` between every two characters of `text`\n  */\nconst intersperse_string_6 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\n/**\n  @param {string} text\n  @return {string}\n  Given a string `text` and an integer `delimeter`\n  insert a `delimeter` between every two characters of `text`\n  */\nconst intersperse_string_7 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\n/**\n  @param {string} text\n  @return {string}\n  Given a string `text` and an integer `delimeter`\n  insert a `delimeter` between every two characters of `text`\n  */\nconst intersperse_string_8 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\n/**\n  @param {string} text\n  @return {string}\n  Given a string `text` and an integer `delimeter`\n  insert a `delimeter` between every two characters of `text`\n  */\nconst intersperse_string_9 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\nconst intersperse_string_10 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\nconst intersperse_string_11 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\nconst intersperse_string_12 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\nconst intersperse_string_13 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\nconst intersperse_string_14 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\nconst intersperse_string_15 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\nconst intersperse_string_16 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\nconst intersperse_string_17 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\nconst intersperse_string_18 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\nconst intersperse_string_19 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\nconst intersperse_string_20 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\nconst intersperse_string_21 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\nconst intersperse_string_22 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\nconst intersperse_string_23 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\nconst intersperse_string_24 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\nconst intersperse_string_25 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\nconst intersperse_string_26 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\nconst intersperse_string_27 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\nconst intersperse_string_28 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\nconst intersperse_string_29 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\nconst intersperse_string_30 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\nconst intersperse_string_31 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\nconst intersperse_string_32 = (text, delimeter) => {\n    return text.split('').join(delimeter);\n};\n\nconst"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by space. \n   For each of the group, output the thick grade of nesting of digression. \n   E.g. (() ()) has maximum two levels of nesting while (( ()) ) receive three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by space. \n   For each of the group, output the thick grade of nesting of digression. \n   E.g. (() ()) has maximum two levels of nesting while (( ()) ) receive three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const groups = paren_string.split(' ')\n  const depth_list = []\n  const max_depth = 0\n  groups.forEach((group) => {\n    const group_depth = group.split('()').reduce((previous, current) => {\n      const is_in_parens = current === '('\n      if (is_in_parens) {\n        return previous + 1\n      }\n      return previous\n    }, 0)\n    depth_list.push(group_depth)\n    if (group_depth > max_depth) {\n      max_depth = group_depth\n    }\n  })\n  return depth_list\n}\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens_with_comments = (paren_string) => {\n  const groups = paren_string.split(' ')\n  const depth_list = []\n  const max_depth = 0\n  groups.forEach((group) => {\n    const group_depth = group.split('()').reduce((previous, current) => {\n      const is_in_parens = current === '('\n      if (is_in_parens) {\n        return previous + 1\n      }\n      return previous\n    }, 0)\n    depth_list.push(group_depth)\n    if (group_depth > max_depth) {\n      max_depth = group_depth\n    }\n  })\n  return depth_list\n}\n\nmodule.exports = {\n  parseNestedParens,\n  parseNestedParens_with_comments\n}\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain grant substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contain grant substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i]\n    if (string.indexOf(substring)!== -1) {\n      result.push(string)\n    }\n  }\n  return result\n}\n\n/* Filter an input list of strings by matching a regular expression\n  >>> filterByRegExp([], '.*')\n  []\n  >>> filterByRegExp(['abc', 'bacd', 'cde', 'array'], '.*')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByRegExp = (strings, pattern) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i]\n    if (string.match(pattern)) {\n      result.push(string)\n    }\n  }\n  return result\n}\n\n/* Return the count of the number of times a substring is found in a string\n  >>> countSubstring('abcaa', 'a')\n  2\n  >>> countSubstring('abcaa', 'ab')\n  2\n  >>> countSubstring('abcaa', 'a')\n  1\n  >>> countSubstring('abcaa', 'b')\n  0\n  */\nconst countSubstring = (string, substring) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/* Return the length of a string\n  >>> length('abc')\n  3\n  >>> length('a')\n  1\n  */\nconst length = (string) => {\n  return string.length\n}\n\n/* Return the number of lines in a string\n  >>> lineCount('abc\\n')\n  2\n  >>> lineCount('a')\n  1\n  */\nconst lineCount = (string) => {\n  return string.split(/\\r?\\n/).length\n}\n\n/* Return the number of lines in a string\n  >>> lineCount('abc\\n')\n  2\n  >>> lineCount('a')\n  1\n  */\nconst lineCount = (string) => {\n  return string.split(/\\r?\\n/).length\n}\n\n/* Return the number of lines in a string\n  >>> lineCount('abc\\n')\n  2\n  >>> lineCount('a')\n  1\n  */\nconst lineCount = (string) => {\n  return string.split(/\\r?\\n/).length\n}\n\n/* Return the number of lines in a string\n  >>> lineCount('abc\\n')\n  2\n  >>> lineCount('a')\n  1\n  */\nconst lineCount = (string) => {\n  return string.split(/\\r?\\n/).length\n}\n\n/* Return the number of lines in a string\n  >>> lineCount('abc\\n')\n  2\n  >>> lineCount('a')\n  1\n  */\nconst lineCount = (string) => {\n  return string.split(/\\r?\\n/).length\n}\n\n/* Return the number of lines in a string\n  >>> lineCount('abc\\n')\n  2\n  >>> lineCount('a')\n  1\n  */\nconst lineCount = (string) => {\n  return string.split(/\\r?\\n/).length\n}\n\n/* Return the number of lines in a string\n  >>> lineCount('abc\\n')\n  2\n  >>> lineCount('a')\n  1\n  */\nconst lineCount = (string) => {\n  return string.split(/\\r?\\n/).length\n}\n\n/* Return the number of lines in a string\n  >>> lineCount('abc\\n')\n  2\n  >>> lineCount('a')\n  1\n  */\nconst lineCount = (string) => {\n  return string.split(/\\r?\\n/).length\n}\n\n/* Return the number of lines in a string\n  >>> lineCount('abc\\n')\n  2\n  >>> lineCount('a')\n  1\n  */\nconst lineCount = (string) => {\n  return string.split(/\\r?\\n/).length\n}\n\n/* Return the number of lines in a string\n  >>> lineCount('abc\\n')\n  2\n  >>> lineCount('a')\n  1\n  */\nconst lineCount = (string) => {\n  return string.split(/\\r?\\n/).length\n}\n\n/* Return the number of lines in a string\n  >>> lineCount('abc\\n')\n  2\n  >>> lineCount('a')\n  1\n  */\nconst lineCount = (string) => {\n  return string.split(/\\r?\\n/).length\n}\n\n/* Return the number of lines in a string\n  >>> lineCount('abc\\n')\n  2\n  >>> lineCount('a')\n  1\n  */\nconst lineCount = (string) => {\n  return string.split(/\\r?\\n/).length\n}\n\n/* Return the number of lines in a string\n  >>> lineCount('abc\\n')\n  2\n  >>> lineCount('a')\n  1\n  */\nconst lineCount = (string) => {\n  return string.split(/\\r?\\n/).length\n}\n\n/* Return the number of lines in a string\n  >>> lineCount('abc\\n')\n  2\n  >>> lineCount('a')\n  1\n  */\nconst lineCount = (string) => {\n  return string.split(/\\r?\\n/).length\n}\n\n/* Return the number of lines in a string\n  >>> lineCount('abc\\n')\n  2\n  >>> lineCount('a')\n  1\n  */\nconst lineCount = (string) => {\n  return string.split(/\\r?\\n/).length\n}\n\n/* Return the number of lines in a string\n  >>> lineCount('abc\\n"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const product = 1;\n  const sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n    sum += numbers[i];\n  }\n  return [sum, product];\n};\n\nmodule.exports = sumProduct;\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximal element determine until establish here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, generate a list of rolling maximal element determine until establish here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const currentMax = numbers[0];\n  const currentMin = numbers[0];\n  let output = [currentMax];\n  let previous = currentMax;\n  for (let i = 1; i < numbers.length; i++) {\n    const current = numbers[i];\n    if (current > previous) {\n      previous = current;\n      currentMax = current;\n    } else if (current < previous) {\n      previous = current;\n      currentMin = current;\n    }\n    output.push(currentMax);\n  }\n  output.push(currentMin);\n  return output;\n};\n\n// const numbers = [1, 2, 3, 2, 3, 4, 2];\nconst numbers = [1, 2, 3, 2, 3, 4, 2, 5, 6];\nconsole.log(rollingMax(numbers));\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const len = string.length;\n  const postfix = string.slice(0, len - 1).reverse();\n  const reverse = string.slice(0, len).reverse();\n  return reverse + postfix;\n}\n\n/* A rule that will create a palindrome from a word.\n   Algorithm idea is to take a word and find the longest palindrome that is a substring of the word.\n   >>> makePalindrome('apple')\n   'apple'\n   >>> makePalindrome('ap')\n   'apple'\n   >>> makePalindrome('a')\n   'a'\n   >>> makePalindrome('a')\n   'a'\n   >>> makePalindrome('a')\n   'a'\n   */\nconst makePalindrome = (string) => {\n  const len = string.length;\n  const palindrome = string.slice(0, len - 1);\n  const reverse = string.slice(0, len).reverse();\n  return reverse + palindrome;\n}\n\n/*\n  > a = new Array('a', 'b', 'c', 'd', 'e');\n  > a.forEach((el, i) => console.log(el, i));\n  a\n  0 a\n  1 b\n  2 c\n  3 d\n  4 e\n  */\nconst makePalindrome = (string) => {\n  const len = string.length;\n  const palindrome = string.slice(0, len - 1);\n  const reverse = string.slice(0, len).reverse();\n  return reverse + palindrome;\n}\n\n/*\n  > a = new Array('a', 'b', 'c', 'd', 'e');\n  > a.forEach((el, i) => console.log(el, i));\n  a\n  0 a\n  1 b\n  2 c\n  3 d\n  4 e\n  */\nconst makePalindrome = (string) => {\n  const len = string.length;\n  const palindrome = string.slice(0, len - 1);\n  const reverse = string.slice(0, len).reverse();\n  return reverse + palindrome;\n}\n\n/*\n  > a = new Array('a', 'b', 'c', 'd', 'e');\n  > a.forEach((el, i) => console.log(el, i));\n  a\n  0 a\n  1 b\n  2 c\n  3 d\n  4 e\n  */\nconst makePalindrome = (string) => {\n  const len = string.length;\n  const palindrome = string.slice(0, len - 1);\n  const reverse = string.slice(0, len).reverse();\n  return reverse + palindrome;\n}\n\nconst makePalindrome = (string) => {\n  const len = string.length;\n  const palindrome = string.slice(0, len - 1);\n  const reverse = string.slice(0, len).reverse();\n  return reverse + palindrome;\n}\n\nconst makePalindrome = (string) => {\n  const len = string.length;\n  const palindrome = string.slice(0, len - 1);\n  const reverse = string.slice(0, len).reverse();\n  return reverse + palindrome;\n}\n\nconst makePalindrome = (string) => {\n  const len = string.length;\n  const palindrome = string.slice(0, len - 1);\n  const reverse = string.slice(0, len).reverse();\n  return reverse + palindrome;\n}\n\nconst makePalindrome = (string) => {\n  const len = string.length;\n  const palindrome = string.slice(0, len - 1);\n  const reverse = string.slice(0, len).reverse();\n  return reverse + palindrome;\n}\n\nconst makePalindrome = (string) => {\n  const len = string.length;\n  const palindrome = string.slice(0, len - 1);\n  const reverse = string.slice(0, len).reverse();\n  return reverse + palindrome;\n}\n\nconst makePalindrome = (string) => {\n  const len = string.length;\n  const palindrome = string.slice(0, len - 1);\n  const reverse = string.slice(0, len).reverse();\n  return reverse + palindrome;\n}\n\nconst makePalindrome = (string) => {\n  const len = string.length;\n  const palindrome = string.slice(0, len - 1);\n  const reverse = string.slice(0, len).reverse();\n  return reverse + palindrome;\n}\n\nconst makePalindrome = (string) => {\n  const len = string.length;\n  const palindrome = string.slice(0, len - 1);\n  const reverse = string.slice(0, len).reverse();\n  return reverse + palindrome;\n}\n\nconst makePalindrome = (string) => {\n  const len = string.length;\n  const palindrome = string.slice(0, len - 1);\n  const reverse = string.slice(0, len).reverse();\n  return reverse + palindrome;\n}\n\nconst makePalindrome = (string) => {\n  const len = string.length;\n  const palindrome = string.slice(0, len - 1);\n  const reverse = string.slice(0, len).reverse();\n  return reverse + palindrome;\n}\n\nconst makePalindrome = (string) => {\n  const len = string.length;\n  const palindrome = string.slice(0, len - 1);\n  const reverse = string.slice(0, len).reverse();\n  return reverse + pal"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const arrA = a.split('')\n  const arrB = b.split('')\n  let result = ''\n  for (let i = 0; i < arrA.length; i++) {\n    if (arrA[i] === '1' && arrB[i] === '1') {\n      result += '1'\n    } else if (arrA[i] === '1' && arrB[i] === '0') {\n      result += '0'\n    } else if (arrA[i] === '0' && arrB[i] === '1') {\n      result += '0'\n    } else if (arrA[i] === '0' && arrB[i] === '0') {\n      result += '0'\n    }\n  }\n  return result\n}\n\n/*\n  Given a binary string, return an equivalent base-36 string.\n  >>> binaryToBase36('1111011001001111100110111')\n  '19D'\n  */\nconst binaryToBase36 = (binaryString) => {\n  let base36 = ''\n  for (let i = 0; i < binaryString.length; i++) {\n    base36 += binaryToBase36(binaryString[i])\n  }\n  return base36\n}\n\n/*\n  Given a base-36 string, return an equivalent binary string.\n  >>> base36ToBinary('19D')\n  '1111011001001111100110111'\n  */\nconst base36ToBinary = (base36String) => {\n  let binary = ''\n  for (let i = 0; i < base36String.length; i++) {\n    binary += base36ToBinary(base36String[i])\n  }\n  return binary\n}\n\n/*\n  Given a number, return a binary string of that number in base-36.\n  >>> numberToBase36(19)\n  '19D'\n  */\nconst numberToBase36 = (number) => {\n  let base36 = ''\n  while (number > 0) {\n    base36 = base36 + binaryToBase36(number % 36)\n    number = Math.floor(number / 36)\n  }\n  return base36\n}\n\n/*\n  Given a string, return a number in base-36.\n  >>> base36ToNumber('19D')\n  19\n  */\nconst base36ToNumber = (base36String) => {\n  let number = 0\n  for (let i = base36String.length - 1; i >= 0; i--) {\n    number = number * 36 + binaryToBase36(base36String[i])\n  }\n  return number\n}\n\n/*\n  Given a string, return a number in base-36.\n  >>> base36ToNumber('19D')\n  19\n  */\nconst base36ToNumber = (base36String) => {\n  let number = 0\n  for (let i = base36String.length - 1; i >= 0; i--) {\n    number = number * 36 + binaryToBase36(base36String[i])\n  }\n  return number\n}\n\n/*\n  Given a number, return a string in base-36.\n  >>> numberToBase36(19)\n  '19D'\n  */\nconst numberToBase36 = (number) => {\n  let base36 = ''\n  while (number > 0) {\n    base36 = base36 + binaryToBase36(number % 36)\n    number = Math.floor(number / 36)\n  }\n  return base36\n}\n\n/*\n  Given a string, return a number in base-36.\n  >>> base36ToNumber('19D')\n  19\n  */\nconst base36ToNumber = (base36String) => {\n  let number = 0\n  for (let i = base36String.length - 1; i >= 0; i--) {\n    number = number * 36 + binaryToBase36(base36String[i])\n  }\n  return number\n}\n\n/*\n  Given a string, return a number in base-36.\n  >>> base36ToNumber('19D')\n  19\n  */\nconst base36ToNumber = (base36String) => {\n  let number = 0\n  for (let i = base36String.length - 1; i >= 0; i--) {\n    number = number * 36 + binaryToBase36(base36String[i])\n  }\n  return number\n}\n\n/*\n  Given two numbers, return their sum.\n  >>> add(7, 3)\n  10\n  >>> add(4, 3)\n  7\n  */\nconst add = (a, b) => {\n  return a + b\n}\n\n/*\n  Given two numbers, return their product.\n  >>> product(7, 3)\n  21\n  >>> product(4, 3)\n  12\n  */\nconst product = (a, b) => {\n  return a * b\n}\n\n/*\n  Given two numbers, return their difference.\n  >>> difference(7, 3)\n  4\n  >>> difference(4, 3)\n  1\n  */\nconst difference = (a, b) => {\n  return a - b\n}\n\n/*\n  Given two numbers, return their quotient.\n  >>> quotient(7, 3)\n  1\n  >>> quotient(4, 3)\n  1\n  */\nconst quotient = (a, b) => {\n  return a / b\n}\n\n/*\n  Given two numbers, return their remainder.\n  >>> remainder(7, 3)\n  1\n  >>> remainder(4, 3)\n  0\n  */\nconst remainder = (a, b) => {\n  return a % b\n}\n\n/*\n  Given two numbers, return their greatest common divisor.\n  >>> gcd(7, 3)\n  3\n  >>> gcd(4, 3)\n  1\n  */\nconst gcd = (a, b) => {\n  while (b!= 0) {\n    let tmp = b\n    b = a % b\n    a = tmp\n  }\n  return a\n}\n\n/*\n  Given two numbers, return their least common multiple.\n  >>> lcm(7, 3)\n  7\n  >>> lcm"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the same duration. Return nothing in lawsuit the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the same duration. Return nothing in lawsuit the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return undefined;\n  }\n\n  const longest = strings[0];\n  let longestIndex = 0;\n\n  strings.forEach(string => {\n    if (string.length > longest.length) {\n      longest = string;\n      longestIndex = strings.indexOf(string);\n    }\n  });\n\n  return strings[longestIndex];\n};\n\nexport default longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  return b === 0? a : greatestCommonDivisor(b, a % b);\n}\n\nconst isPrime = (n) => {\n  return n === 1 || n === 2 || (n > 2 && n % 1 === 0 && n!== 1 && n!== 4) || n % 3 === 0 || n % 5 === 0 || n % 7 === 0 || n % 11 === 0 || n % 13 === 0 || n % 17 === 0 || n % 19 === 0 || n % 23 === 0 || n % 29 === 0 || n % 31 === 0 || n % 37 === 0 || n % 41 === 0 || n % 43 === 0 || n % 47 === 0 || n % 53 === 0 || n % 59 === 0 || n % 61 === 0 || n % 67 === 0 || n % 71 === 0 || n % 73 === 0 || n % 79 === 0 || n % 83 === 0 || n % 89 === 0 || n % 97 === 0;\n}\n\n//\n// Find a number which is the greatest product of\n// all the primes below it\n//\nconst findPrime = (n) => {\n  const p = [];\n  for (let i = 1; i < n; i++) {\n    if (isPrime(i)) {\n      p.push(i);\n    }\n  }\n  return largestPrimeProduct(p);\n}\n\n//\n// Given a set of primes, find the largest product\n// of the primes\n//\nconst largestPrimeProduct = (primes) => {\n  let max = 1;\n  for (let i = 0; i < primes.length; i++) {\n    let prod = 1;\n    for (let j = 0; j < primes.length; j++) {\n      prod *= primes[j];\n    }\n    if (prod > max) {\n      max = prod;\n    }\n  }\n  return max;\n}\n\n//\n// Find a number which is the smallest prime number\n// that is evenly divisible by all the primes below it\n//\nconst findSmallestPrime = (n) => {\n  let prime = 1;\n  while (prime < n) {\n    let primeCount = 0;\n    for (let i = 1; i < n; i++) {\n      if (n % i === 0) {\n        primeCount++;\n      }\n    }\n    if (primeCount === n) {\n      return prime;\n    }\n    prime++;\n  }\n  return n;\n}\n\n//\n// Find the number of different ways to divide\n// the number n into primes\n//\nconst findDifferentPrimeFibonacci = (n) => {\n  let count = 1;\n  for (let i = 1; i < n; i++) {\n    count += fibonacci(i);\n  }\n  return count;\n}\n\n//\n// Find the number of different ways to divide\n// the number n into primes\n//\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\n//\n// Find the greatest common divisor of a and b\n//\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n}\n\n//\n// Find the number of different ways to divide\n// the number n into primes\n//\nconst findDifferentPrimeBinary = (n) => {\n  let count = 1;\n  for (let i = 1; i < n; i++) {\n    count += binaryPrimeFinder(i);\n  }\n  return count;\n}\n\n//\n// Find the number of different ways to divide\n// the number n into primes\n//\nconst binaryPrimeFinder = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    count += binaryPrimeFinder(n - i);\n  }\n  return count;\n}\n\n//\n// Find the smallest prime number that\n// is evenly divisible by all the primes below it\n//\nconst findSmallestPrimeBinary = (n) => {\n  let prime = 1;\n  while (prime < n) {\n    let primeCount = 0;\n    for (let i = 1; i < n; i++) {\n      if (n % i === 0) {\n        primeCount++;\n      }\n    }\n    if (primeCount === n) {\n      return prime;\n    }\n    prime++;\n  }\n  return n;\n}\n\n//\n// Find the number of different ways to divide\n// the number n into primes\n//\nconst findDifferentPrimeFibonacciBinary = (n) => {\n  let count = 1;\n  for (let i = 1; i < n; i++) {\n    count += fibonacciBinary(i);\n  }\n  return count;\n}\n\n//\n// Find the number of different ways to divide\n// the number n into primes\n//\nconst fibonacciBinary = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    count += fibonacciBinary(n - i);\n  }\n  return count;\n}\n\n//\n// Find the largest prime number which is\n// not evenly divisible by any of the\n// primes below it\n//\nconst findLargestPrime = (n) => {\n  let max = 1;\n  for (let i = 1; i < n; i++) {\n    if (isPrime(i)) {\n      max = i;\n    }\n  }\n  return max;\n}\n\n//\n// Find the number of different ways to divide\n// the number n into primes\n//\nconst findDifferentPrimeFibonacciBinary = (n) => {\n  let count = 1;\n  for (let i = 1; i < n; i++) {\n    count += fibonacciBinary(i);\n  }\n  return count;\n}\n\n//"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the remark string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from shortest to longest of the remark string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    const prefix = string.slice(0, i + 1);\n    prefixes.push(prefix);\n  }\n  return prefixes;\n};\n\n/* Return list of all prefixes of the given string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allPrefixes('abcabc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    const prefix = string.slice(0, i + 1);\n    prefixes.push(prefix);\n  }\n  return prefixes;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const numbers = new Array(n + 1);\n  numbers[0] = '0';\n  for (let i = 1; i <= n; i++) {\n    numbers[i] = `${numbers[i - 1]} ${i}`;\n  }\n  return numbers.join(' ');\n};\n\nmodule.exports = stringSequence;\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('')\n  const uniqueChars = new Set(chars)\n  return chars.length - uniqueChars.size\n}\n\n/* Given a string, find out the total number of letter (regardless of case)\n  >>> countLetter('Jerry')\n  10\n  >>> countLetter('xyzXYZ')\n  26\n  */\nconst countLetter = (string) => {\n  const chars = string.split('')\n  return chars.length\n}\n\n/* Given a string, find out the total number of words in the string\n  >>> countWords('Hello World')\n  2\n  >>> countWords('Hello World!')\n  1\n  >>> countWords('Hello World! Hello')\n  3\n  */\nconst countWords = (string) => {\n  return string.split(' ').length\n}\n\n/* Given a string, find out the total number of words in the string\n  >>> countWords('Hello World')\n  2\n  >>> countWords('Hello World!')\n  1\n  >>> countWords('Hello World! Hello')\n  3\n  */\nconst countWords2 = (string) => {\n  return string.split('').length\n}\n\n/* Given a string, find out the total number of vowels in the string\n  >>> countVowels('Hello World')\n  4\n  >>> countVowels('Hello World!')\n  2\n  >>> countVowels('Hello World! Hello')\n  3\n  */\nconst countVowels = (string) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const chars = string.split('')\n  const count = chars.reduce((acc, char) => {\n    if (vowels.indexOf(char.toLowerCase()) > -1) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/* Given a string, find out the total number of consonants in the string\n  >>> countConsonants('Hello World')\n  7\n  >>> countConsonants('Hello World!')\n  3\n  >>> countConsonants('Hello World! Hello')\n  3\n  */\nconst countConsonants = (string) => {\n  const consonants = ['b', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'x', 'z']\n  const chars = string.split('')\n  const count = chars.reduce((acc, char) => {\n    if (consonants.indexOf(char.toLowerCase()) > -1) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/* Given a string, find out the total number of vowels and consonants in the string\n  >>> countVowCons('Hello World')\n  6\n  >>> countVowCons('Hello World!')\n  4\n  >>> countVowCons('Hello World! Hello')\n  5\n  */\nconst countVowCons = (string) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const consonants = ['b', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'x', 'z']\n  const chars = string.split('')\n  const count = chars.reduce((acc, char) => {\n    if (vowels.indexOf(char.toLowerCase()) > -1) {\n      acc += 1\n    }\n    if (consonants.indexOf(char.toLowerCase()) > -1) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/* Given a string, find out the total number of consonants and vowels in the string\n  >>> countVowCons('Hello World')\n  6\n  >>> countVowCons('Hello World!')\n  4\n  >>> countVowCons('Hello World! Hello')\n  5\n  */\nconst countVowCons2 = (string) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const consonants = ['b', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'x', 'z']\n  const chars = string.split('')\n  const count = chars.reduce((acc, char) => {\n    if (vowels.indexOf(char.toLowerCase()) > -1) {\n      acc += 1\n    }\n    if (consonants.indexOf(char.toLowerCase()) > -1) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/* Given a string, find out the total number of vowels, consonants and words in the string\n  >>> countVowCons2('Hello World')\n  6\n  >>> countVowCons2('Hello World!')\n  4\n  >>> countVowCons2('Hello World! Hello')\n  5\n  */\nconst countVowCons3 = (string) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const consonants = ['b', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'x', 'z']\n  const chars = string.split('')\n  const count = chars.reduce((acc, char) => {\n    if (vowels.indexOf(char.toLowerCase()) > -1) {\n      acc += 1\n    }\n    if (consonants.indexOf(char.toLowerCase()) > -1) {\n      acc += 1\n    }\n    if (acc > 0) {\n      acc += 1\n    }\n    return acc\n  }, 0)"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing melodious notes in a particular ASCII format. \n   Your task is to parse this string and return list of integers equate to how many beats does each \n   not concluding. \n\n   Here is a legend: \n  ' oxygen' - whole bill, lasts four beats \n  ' o|' - one-half bill, lasts two pulse \n  ' .|' - quater eminence, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string representing melodious notes in a particular ASCII format. \n   Your task is to parse this string and return list of integers equate to how many beats does each \n   not concluding. \n\n   Here is a legend: \n 'oxygen' - whole bill, lasts four beats \n 'o|' - one-half bill, lasts two pulse \n  '.|' - quater eminence, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const [ beat, note, beat_string ] = music_string.split(' ')\n  return parse_beat(beat)\n}\n\n// convert string to list of integers, representing beat\nconst parse_beat = (beat) => {\n  const beats = beat.split('|')\n  return beats.map(x => parse_note(x))\n}\n\n// convert string to list of integers, representing note\nconst parse_note = (note) => {\n  const [ octave, duration, note_string ] = note.split('|')\n  const [ octave, duration, note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] = note.split('|')\n  const [ note_string ] ="}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  while (string.indexOf(substring)!== -1) {\n    count++\n    string = string.replace(substring, '')\n  }\n  return count\n}\n\n/*\n  Find the smallest and largest values in an array\n  >>> findSmallestAndLargest([1, 2, 3])\n  [1, 2, 3]\n  >>> findSmallestAndLargest([1, -2, 3])\n  [1, -2, 3]\n  >>> findSmallestAndLargest([-2, 1, 3])\n  [-2, 1, 3]\n  >>> findSmallestAndLargest([1, 2, 3, -4, -5])\n  [1, 2, 3, -4, -5]\n  >>> findSmallestAndLargest([1, 2, 3, -4, -5, 2, 1])\n  [1, 2, 3, -4, -5, 2, 1]\n  >>> findSmallestAndLargest([1, 2, 3, -4, -5, 2, 1, 3])\n  [1, 2, 3, -4, -5, 2, 1, 3]\n  >>> findSmallestAndLargest([1, 2, 3, -4, -5, 2, 1, 3, 2, 1])\n  [1, 2, 3, -4, -5, 2, 1, 3, 2, 1]\n  >>> findSmallestAndLargest([1, 2, 3, -4, -5, 2, 1, 3, 2, 1, 4, 5])\n  [1, 2, 3, -4, -5, 2, 1, 3, 2, 1, 4, 5]\n  >>> findSmallestAndLargest([1, 2, 3, -4, -5, 2, 1, 3, 2, 1, 4, 5, 2, 1])\n  [1, 2, 3, -4, -5, 2, 1, 3, 2, 1, 4, 5, 2, 1]\n  >>> findSmallestAndLargest([1, 2, 3, -4, -5, 2, 1, 3, 2, 1, 4, 5, 2, 1, 3, 1, 2, 1])\n  [1, 2, 3, -4, -5, 2, 1, 3, 2, 1, 4, 5, 2, 1, 3, 1, 2, 1]\n*/\nconst findSmallestAndLargest = (array) => {\n  const [min, max] = array.reduce(([a, b], element) => {\n    if (element < a) {\n      return [element, a]\n    } else {\n      return [a, element]\n    }\n  }, [Number.MAX_VALUE, Number.MIN_VALUE])\n  return [min, max]\n}\n\n/*\n  Find the longest substring that occurs only once in a string\n  >>> findLongestSubstringOnce('abcd', 'bc')\n  'c'\n  >>> findLongestSubstringOnce('abcd', 'ab')\n  'ab'\n  >>> findLongestSubstringOnce('abcd', 'abcd')\n  'abcd'\n  >>> findLongestSubstringOnce('abcd', 'abcdd')\n  'abcd'\n  >>> findLongestSubstringOnce('abcd', 'abcddd')\n  'abcd'\n  >>> findLongestSubstringOnce('abcd', 'abcdddd')\n  'abcd'\n  >>> findLongestSubstringOnce('abcd', 'abcddddc')\n  'abcd'\n  >>> findLongestSubstringOnce('abcd', 'abcddddcc')\n  'abcd'\n  >>> findLongestSubstringOnce('abcd', 'abcddddccc')\n  'abcd'\n  >>> findLongestSubstringOnce('abcd', 'abcddddcccc')\n  'abcd'\n  >>> findLongestSubstringOnce('abcd', 'abcddddccccc')\n  'abcd'\n  >>> findLongestSubstringOnce('abcd', 'abcddddcccccc')\n  'abcd'\n  >>> findLongestSubstringOnce('abcd', 'abcddddccccccc')\n  'abcd'\n  >>> findLongestSubstringOnce('abcd', 'abcddddcccccccc')\n  'abcd'\n  >>> findLongestSubstringOnce('abcddddccccccccc', 'abcddddccccccccc')\n  'abcddddccccccccc'\n  >>> findLongestSubstringOnce('abcddddccccccccc', 'abcddddcccccccccc')\n  'abcddddccccccccc'\n  >>> findLongestSubstringOnce('abcddddccccccccc', 'abcddddccccccccccc')\n  'abcddddccccccccc'\n  >>> findLongestSubstringOnce('abcddddcccccccccc', 'abcddddcccccccccccc')\n  'abcddddcccccccccc'\n  >>> findLongestSubstringOnce('abcddddcccccccccc', 'abcddddccccccccccccc')\n  'abcddddccccccccccc'\n  >>> findLongestSubstringOnce('abcddddcccccccccccc', 'abcddddcccccccccccccc')\n  'abcddddcccccccccccc'\n  >>> findLongestSubstringOnce('abcddddcccccccccccccc', 'abcddddcccccccccccccccc')\n  'abcddddcccccccccccccc'\n  >>> findLongestSubstringOnce('abcddddcccccccccccccccc', 'abcddddcccccccccccccccccc')\n  'abcddddcccccccccccccccc'\n  >>> findLongestSubstringOnce('abcddddcccccccccccccccccc', 'abcddddcccccccccccccccccccc')\n  'abcddddcccccccccccccccccc'\n  >>> findLongestSubstringOnce('abcdd"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited string of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   revert the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space - delimited string of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   revert the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const len = numbers.length\n  const array = []\n  for (let i = 0; i < len; i += 1) {\n    array.push(numbers[i])\n  }\n  array.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return array.join('')\n}\n\n/*\n   Input is a space delimited string of numbers from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   revert the string with numbers sorted from largest to smallest\n  >>> sortNumbers('five one two three')\n  'one two three five'\n  */\nconst reverseNumbers = (numbers) => {\n  const len = numbers.length\n  const array = []\n  for (let i = 0; i < len; i += 1) {\n    array.push(numbers[i])\n  }\n  array.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return array.join('')\n}\n\nconst sumNumbers = (numbers) => {\n  const len = numbers.length\n  let sum = 0\n  for (let i = 0; i < len; i += 1) {\n    sum += parseInt(numbers[i], 10)\n  }\n  return sum\n}\n\nconst printNumbers = (numbers) => {\n  const len = numbers.length\n  let out = ''\n  for (let i = 0; i < len; i += 1) {\n    out += numbers[i]\n    if (i + 1 === len) {\n      out += '\\n'\n    } else {\n      out +=''\n    }\n  }\n  return out\n}\n\nconst printArray = (array) => {\n  const len = array.length\n  let out = ''\n  for (let i = 0; i < len; i += 1) {\n    out += array[i]\n    if (i + 1 === len) {\n      out += '\\n'\n    } else {\n      out +=''\n    }\n  }\n  return out\n}\n\nconst printArray2 = (array) => {\n  const len = array.length\n  let out = ''\n  for (let i = 0; i < len; i += 1) {\n    out += array[i]\n  }\n  return out\n}\n\nconst printArray3 = (array) => {\n  const len = array.length\n  let out = ''\n  for (let i = 0; i < len; i += 1) {\n    out += array[i]\n    if (i + 1 === len) {\n      out += '\\n'\n    } else {\n      out +=''\n    }\n  }\n  return out\n}\n\nconst printArray4 = (array) => {\n  const len = array.length\n  let out = ''\n  for (let i = 0; i < len; i += 1) {\n    out += array[i]\n    if (i + 1 === len) {\n      out += '\\n'\n    } else {\n      out +=''\n    }\n  }\n  return out\n}\n\nconst printArray5 = (array) => {\n  const len = array.length\n  let out = ''\n  for (let i = 0; i < len; i += 1) {\n    out += array[i]\n  }\n  return out\n}\n\nconst printArray6 = (array) => {\n  const len = array.length\n  let out = ''\n  for (let i = 0; i < len; i += 1) {\n    out += array[i]\n    if (i + 1 === len) {\n      out += '\\n'\n    } else {\n      out +=''\n    }\n  }\n  return out\n}\n\nconst printArray7 = (array) => {\n  const len = array.length\n  let out = ''\n  for (let i = 0; i < len; i += 1) {\n    out += array[i]\n    if (i + 1 === len) {\n      out += '\\n'\n    } else {\n      out +=''\n    }\n  }\n  return out\n}\n\nconst printArray8 = (array) => {\n  const len = array.length\n  let out = ''\n  for (let i = 0; i < len; i += 1) {\n    out += array[i]\n  }\n  return out\n}\n\nconst printArray9 = (array) => {\n  const len = array.length\n  let out = ''\n  for (let i = 0; i < len; i += 1) {\n    out += array[i]\n  }\n  return out\n}\n\nconst printArray10 = (array) => {\n  const len = array.length\n  let out = ''\n  for (let i = 0; i < len; i += 1) {\n    out += array[i]\n    if (i + 1 === len) {\n      out += '\\n'\n    } else {\n      out +=''\n    }\n  }\n  return out\n}\n\nconst printArray11 = (array) => {\n  const len = array.length\n  let out = ''\n  for (let i = 0; i < len; i += 1) {\n    out += array[i]\n    if (i + 1 === len) {\n      out += '\\n'\n    } else {\n      out +=''\n    }\n  }\n  return out\n}\n\nconst printArray12 = (array) => {\n  const len = array.length\n  let out = ''\n  for (let i = 0; i < len; i += 1) {\n    out += array[i]\n    if ("}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) blue-ribbon and return two that be the closest to each \n   other and return them in order (smaller number, larger phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) blue-ribbon and return two that be the closest to each \n   other and return them in order (smaller number, larger phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  // Check if the list has more than one element\n  if (numbers.length > 1) {\n    // Check if the list has at least two elements\n    if (numbers.length > 2) {\n      // Find the two closest elements in the list\n      const min = (a, b) => a < b? a : b;\n      const max = (a, b) => a > b? a : b;\n      const closestElements = numbers.slice(1, 3);\n      const closest = closestElements.map(x => max(x, numbers[0]));\n      const secondClosest = closestElements.map(x => min(x, numbers[0]));\n      return [closest[0], secondClosest[0]];\n    } else {\n      // One element list\n      return [numbers[0], numbers[0]];\n    }\n  } else {\n    // One element list\n    return [numbers[0], numbers[0]];\n  }\n};\n\nmodule.exports = {\n  findClosestElements\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const avg = sum / numbers.length\n\n  return numbers.map(num => (num - avg) / avg)\n}\n\n/* Given a list of numbers, add random noise to each of them */\nconst addNoise = (numbers) => {\n  return numbers.map(num => {\n    const random = Math.random()\n    return num + random * 10\n  })\n}\n\n/* Given a list of numbers, return the inverse of the list */\nconst invert = (numbers) => {\n  return numbers.map(num => 1 / num)\n}\n\n/* Given a list of numbers, return the logarithm of the list */\nconst log = (numbers) => {\n  return numbers.map(num => Math.log(num))\n}\n\n/* Given a list of numbers, return the logarithm of the list */\nconst exp = (numbers) => {\n  return numbers.map(num => Math.exp(num))\n}\n\n/* Given a list of numbers, return the difference of the list */\nconst difference = (numbers) => {\n  return numbers.reduce((acc, num) => acc + num, 0)\n}\n\n/* Given a list of numbers, return the mean of the list */\nconst mean = (numbers) => {\n  return numbers.reduce((acc, num) => acc + num, 0) / numbers.length\n}\n\n/* Given a list of numbers, return the median of the list */\nconst median = (numbers) => {\n  numbers = rescaleToUnit(numbers)\n\n  const middle = numbers.length / 2\n  const left = numbers.slice(0, middle)\n  const right = numbers.slice(middle + 1, numbers.length)\n  return (left.concat(right).sort((a, b) => a - b)[middle]) / 2\n}\n\n/* Given a list of numbers, return the mode of the list */\nconst mode = (numbers) => {\n  const counts = {}\n  numbers.forEach(num => counts[num] = counts[num] || 0)\n  const maxCount = Math.max.apply(Math, Object.keys(counts))\n  return Object.keys(counts).find(key => counts[key] === maxCount)\n}\n\n/* Given a list of numbers, return the mode of the list */\nconst variance = (numbers) => {\n  const mean = mean(numbers)\n  const deviations = numbers.map(num => Math.pow(num - mean, 2))\n  const sumOfSquaredDeviations = numbers.reduce((acc, num) => acc + num, 0)\n  const variance = sumOfSquaredDeviations / numbers.length\n  return variance\n}\n\n/* Given a list of numbers, return the standard deviation of the list */\nconst stdDeviation = (numbers) => {\n  return Math.sqrt(variance(numbers))\n}\n\n/* Given a list of numbers, return the variance of the list */\nconst variance = (numbers) => {\n  return variance(numbers)\n}\n\n/* Given a list of numbers, return the standard deviation of the list */\nconst stdDeviation = (numbers) => {\n  return Math.sqrt(variance(numbers))\n}\n\n/* Given a list of numbers, return the standard deviation of the list */\nconst stdDeviation = (numbers) => {\n  return Math.sqrt(variance(numbers))\n}\n\n/* Given a list of numbers, return the standard deviation of the list */\nconst stdDeviation = (numbers) => {\n  return Math.sqrt(variance(numbers))\n}\n\n/* Given a list of numbers, return the standard deviation of the list */\nconst stdDeviation = (numbers) => {\n  return Math.sqrt(variance(numbers))\n}\n\n/* Given a list of numbers, return the standard deviation of the list */\nconst stdDeviation = (numbers) => {\n  return Math.sqrt(variance(numbers))\n}\n\n/* Given a list of numbers, return the standard deviation of the list */\nconst stdDeviation = (numbers) => {\n  return Math.sqrt(variance(numbers))\n}\n\n/* Given a list of numbers, return the standard deviation of the list */\nconst stdDeviation = (numbers) => {\n  return Math.sqrt(variance(numbers))\n}\n\n/* Given a list of numbers, return the standard deviation of the list */\nconst stdDeviation = (numbers) => {\n  return Math.sqrt(variance(numbers))\n}\n\n/* Given a list of numbers, return the standard deviation of the list */\nconst stdDeviation = (numbers) => {\n  return Math.sqrt(variance(numbers))\n}\n\n/* Given a list of numbers, return the standard deviation of the list */\nconst stdDeviation = (numbers) => {\n  return Math.sqrt(variance(numbers))\n}\n\n/* Given a list of numbers, return the standard deviation of the list */\nconst stdDeviation = (numbers) => {\n  return Math.sqrt(variance(numbers))\n}\n\n/* Given a list of numbers, return the standard deviation of the list */\nconst stdDeviation = (numbers) => {\n  return Math.sqrt(variance(numbers))\n}\n\n/* Given a list of numbers, return the standard deviation of the list */\nconst stdDeviation = (numbers) => {\n  return Math.sqrt(variance(numbers))\n}\n\n/* Given a list of numbers, return the standard deviation of the list */\nconst stdDeviation = (numbers) => {\n  return Math.sqrt(variance(numbers))\n}\n\n/* Given a list of numbers, return the standard deviation of the list */\nconst stdDeviation = (numbers) => {\n  return Math.sqrt(variance(numbers))\n}\n\n/* Given a list of numbers, return the standard deviation of the list */\nconst stdDev"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integer\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter given list of any python values only for integer\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => typeof value === 'number' && isInteger(value));\n};\n\n/*\n  Returns `true` if the input `value` is a `number` and is an integer\n  >>> isInteger(42)\n  True\n  >>> isInteger(42.5)\n  False\n  >>> isInteger(new Number(42))\n  True\n  */\nconst isInteger = (value) => {\n  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n};\n\n/*\n  Returns `true` if the input `value` is a `string` and is an integer\n  >>> isInteger('42')\n  True\n  >>> isInteger('42.5')\n  False\n  >>> isInteger(new String('42'))\n  True\n  */\nconst isInteger = (value) => {\n  return typeof value ==='string' && isFinite(value) && Math.floor(Number(value)) === Number(value);\n};\n\n/*\n  >>> isInteger('3.14')\n  True\n  >>> isInteger('3.14.5')\n  False\n  >>> isInteger(new Number('3.14'))\n  True\n  */\nconst isInteger = (value) => {\n  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n};\n\n/*\n  Returns `true` if the input `value` is a `string` and is an integer\n  >>> isInteger('3.14')\n  True\n  >>> isInteger('3.14.5')\n  False\n  >>> isInteger(new String('3.14'))\n  True\n  */\nconst isInteger = (value) => {\n  return typeof value ==='string' && isFinite(value) && Math.floor(Number(value)) === Number(value);\n};\n\n/*\n  Returns `true` if the input `value` is an `Array` and is an integer\n  >>> isInteger([3, 4, 5])\n  True\n  >>> isInteger([3.5, 'abc', {}, []])\n  False\n  >>> isInteger([1, 2, 3, 'abc', {}, []])\n  True\n  */\nconst isInteger = (value) => {\n  return Array.isArray(value) && value.every(isInteger);\n};\n\n/*\n  Returns `true` if the input `value` is an `Array` and is an integer\n  >>> isInteger([3, 4, 5])\n  True\n  >>> isInteger([3.5, 'abc', {}, []])\n  False\n  >>> isInteger([1, 2, 3, 'abc', {}, []])\n  True\n  */\nconst isInteger = (value) => {\n  return Array.isArray(value) && value.every(isInteger);\n};\n\n/*\n  Returns `true` if the input `value` is an `Array` and is an integer\n  >>> isInteger([3, 4, 5])\n  True\n  >>> isInteger([3.5, 'abc', {}, []])\n  False\n  >>> isInteger([1, 2, 3, 'abc', {}, []])\n  True\n  */\nconst isInteger = (value) => {\n  return Array.isArray(value) && value.every(isInteger);\n};\n\n/*\n  Returns `true` if the input `value` is an `Array` and is an integer\n  >>> isInteger([3, 4, 5])\n  True\n  >>> isInteger([3.5, 'abc', {}, []])\n  False\n  >>> isInteger([1, 2, 3, 'abc', {}, []])\n  True\n  */\nconst isInteger = (value) => {\n  return Array.isArray(value) && value.every(isInteger);\n};\n\n/*\n  Returns `true` if the input `value` is an `Array` and is an integer\n  >>> isInteger([3, 4, 5])\n  True\n  >>> isInteger([3.5, 'abc', {}, []])\n  False\n  >>> isInteger([1, 2, 3, 'abc', {}, []])\n  True\n  */\nconst isInteger = (value) => {\n  return Array.isArray(value) && value.every(isInteger);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": false, "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/**\n  Returns the index of the first occurrence of a substring in a string.\n  >>> indexOf('abc', 'c')\n  2\n  >>> indexOf('abc', 'x')\n  -1\n  >>> indexOf('abc', '')\n  0\n  >>> indexOf('abc', 'ab')\n  0\n  >>> indexOf('abc', 'a')\n  0\n  >>> indexOf('abc', 'ab', 0)\n  0\n  >>> indexOf('abc', 'c', 0)\n  2\n  >>> indexOf('abc', 'c', 1)\n  2\n  >>> indexOf('abc', 'c', 2)\n  2\n  >>> indexOf('abc', 'c', 3)\n  2\n  >>> indexOf('abc', 'c', 4)\n  -1\n  >>> indexOf('abc', 'c', -1)\n  2\n  >>> indexOf('abc', 'c', -2)\n  2\n  >>> indexOf('abc', 'c', -3)\n  2\n  >>> indexOf('abc', 'c', 5)\n  -1\n  >>> indexOf('abc', 'c', -4)\n  2\n  >>> indexOf('abc', 'c', -5)\n  -1\n  >>> indexOf('abc', 'x', -1)\n  -1\n  >>> indexOf('abc', 'x', 0)\n  -1\n  >>> indexOf('abc', 'x', 1)\n  -1\n  >>> indexOf('abc', 'x', 2)\n  -1\n  >>> indexOf('abc', 'x', 3)\n  -1\n  >>> indexOf('abc', 'x', 4)\n  -1\n  >>> indexOf('abc', 'x', 5)\n  -1\n  >>> indexOf('abc', 'x', -2)\n  -1\n  >>> indexOf('abc', 'x', -3)\n  -1\n  >>> indexOf('abc', 'x', -4)\n  -1\n  >>> indexOf('abc', 'x', -5)\n  -1\n  >>> indexOf('abc', '', 0)\n  0\n  >>> indexOf('abc', '', 1)\n  0\n  >>> indexOf('abc', '', 2)\n  0\n  >>> indexOf('abc', '', 3)\n  0\n  >>> indexOf('abc', '', 4)\n  0\n  >>> indexOf('abc', '', -1)\n  0\n  >>> indexOf('abc', '', -2)\n  0\n  >>> indexOf('abc', '', -3)\n  0\n  >>> indexOf('abc', '', -4)\n  0\n  >>> indexOf('abc', '', -5)\n  0\n  >>> indexOf('abc', 'c', 0)\n  2\n  >>> indexOf('abc', 'c', 1)\n  2\n  >>> indexOf('abc', 'c', 2)\n  2\n  >>> indexOf('abc', 'c', 3)\n  2\n  >>> indexOf('abc', 'c', 4)\n  2\n  >>> indexOf('abc', 'c', -1)\n  2\n  >>> indexOf('abc', 'c', -2)\n  2\n  >>> indexOf('abc', 'c', -3)\n  2\n  >>> indexOf('abc', 'c', -4)\n  2\n  >>> indexOf('abc', 'c', -5)\n  2\n  >>> indexOf('abc', 'x', 0)\n  -1\n  >>> indexOf('abc', 'x', 1)\n  -1\n  >>> indexOf('abc', 'x', 2)\n  -1\n  >>> indexOf('abc', 'x', 3)\n  -1\n  >>> indexOf('abc', 'x', 4)\n  -1\n  >>> indexOf('abc', 'x', 5)\n  -1\n  >>> indexOf('abc', 'x', -1)\n  -1\n  >>> indexOf('abc', 'x', -2)\n  -1\n  >>> indexOf('abc', 'x', -3)\n  -1\n  >>> indexOf('abc', 'x', -4)\n  -1\n  >>> indexOf('abc', 'x', -5)\n  -1\n  >>> indexOf('', '', 0)\n  0\n  >>> indexOf('', '', 1)\n  0\n  >>> indexOf('', '', 2)\n  0\n  >>> indexOf('', '', 3)\n  0\n  >>> indexOf('', '', 4)\n  0\n  >>> indexOf('', '', -1)\n  0\n  >>> indexOf('', '', -2)\n  0\n  >>> indexOf('', '', -3)\n  0\n  >>> indexOf('', '', -4)\n  0\n  >>> indexOf('', '', -5)\n  0\n  >>> indexOf('abc', '', 0)\n  0\n  >>> indexOf('abc', '', 1)\n  0\n  >>> indexOf('abc', '', 2)\n  0\n  >>> indexOf('abc', '', 3)\n  0\n  >>> indexOf('abc', '', 4)\n  0\n  >>> indexOf('abc', '', -1)\n  0\n  >>> indexOf('abc', '', -2)\n  0\n  >>> indexOf('abc', '', -3)\n  0\n  >>> indexOf('abc', '', -4)\n  0\n  >>> indexOf('abc', '', -5)\n  0\n  */\nconst indexOf = (string, substring, from) => {\n  let index = string.indexOf(substring, from);\n  return index === -1? -1 : index;\n};\n\n/**\n  Returns the last index of a substring in a string.\n  >>> lastIndexOf('abc', 'b')\n  2\n  >>> lastIndexOf('abc', 'c')\n  2\n  >>> lastIndexOf('abc', 'x')\n  -1\n  >>> lastIndexOf('abc', '')\n  3\n  >>> lastIndexOf('abc', 'ab')\n  0\n  >>> lastIndexOf('abc', 'a')\n  0\n  >>> lastIndexOf('abc', 'ab', 1)\n  0\n  >>> lastIndexOf('abc', 'ab', 2)\n  0\n  >>>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest phone number that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find the largest phone number that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let answer = n;\n  let a = Math.sqrt(n);\n  while (a * a <= n) {\n    if (n % a === 0) {\n      answer = Math.min(answer, a);\n    }\n    a++;\n  }\n  return answer;\n};\n\n/*\n  >>> largestDivisor(16)\n  4\n  >>> largestDivisor(24)\n  6\n  >>> largestDivisor(25)\n  5\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(27)\n  9\n  >>> largestDivisor(28)\n  7\n  >>> largestDivisor(100)\n  10\n  >>> largestDivisor(1000)\n  10\n  >>> largestDivisor(2000)\n  11\n  >>> largestDivisor(4000)\n  16\n  >>> largestDivisor(5000)\n  17\n  >>> largestDivisor(6)\n  3\n  >>> largestDivisor(60000)\n  63\n  >>> largestDivisor(7000000)\n  70\n  >>> largestDivisor(8000000)\n  80\n  >>> largestDivisor(9000000)\n  90\n  >>> largestDivisor(9000000000)\n  1000\n  >>> largestDivisor(100000)\n  1000\n  >>> largestDivisor(1000000)\n  1000\n  >>> largestDivisor(10000000)\n  10000\n  >>> largestDivisor(100000000)\n  100000\n  >>> largestDivisor(1000000000)\n  100000\n  >>> largestDivisor(10000000000)\n  1000000\n  >>> largestDivisor(100000000000)\n  1000000\n  >>> largestDivisor(1000000000000)\n  1000000\n  >>> largestDivisor(10000000000000)\n  10000000\n  >>> largestDivisor(100000000000000)\n  10000000000\n  >>> largestDivisor(100000000000000000)\n  10000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor(100000000000000000)\n  100000000000000\n  >>> largestDivisor("}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n    const result = [];\n    const count = 1;\n    while (n > 1) {\n        if (n % 2 === 0) {\n            result.push(2);\n            n = n / 2;\n        } else if (n % 3 === 0) {\n            result.push(3);\n            n = n / 3;\n        } else {\n            result.push(5);\n            n = n / 5;\n        }\n    }\n    return result;\n};\n\n// TEST\nconst test = () => {\n    console.log(factorize(70));\n};\n\nmodule.exports = {\n    factorize\n};\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNums = [];\n  const len = numbers.length;\n  let i = 0;\n  while (i < len) {\n    if (uniqueNums.indexOf(numbers[i]) === -1) {\n      uniqueNums.push(numbers[i]);\n    }\n    i++;\n  }\n  return uniqueNums;\n};\n\nexport default removeDuplicates;<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n    let s = string.toLowerCase();\n    s = s.replace(/a/g, 'A');\n    s = s.replace(/e/g, 'E');\n    s = s.replace(/i/g, 'I');\n    s = s.replace(/o/g, 'O');\n    s = s.replace(/u/g, 'U');\n    s = s.replace(/y/g, 'Y');\n    return s;\n};\n\n/*\n  * @description Returns the number of words in the given string.\n  * @param {string} string\n  * @returns {number}\n  */\nconst numberOfWords = (string) => {\n    return string.match(/\\S+/g).length;\n};\n\n/*\n  * @description Returns the string that contains only the words in the given string.\n  * @param {string} string\n  * @returns {string}\n  */\nconst stringOnlyWords = (string) => {\n    let s = string.toLowerCase();\n    let ret = '';\n    let word = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/\\w/)) {\n            word = s[i];\n            ret += word +'';\n        }\n    }\n    return ret;\n};\n\n/*\n  * @description Returns the string that contains the words in the given string.\n  * @param {string} string\n  * @returns {string}\n  */\nconst stringContainsWords = (string) => {\n    let s = string.toLowerCase();\n    let ret = '';\n    let word = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/\\w/)) {\n            word = s[i];\n            ret += word +'';\n        }\n    }\n    return ret;\n};\n\n/*\n  * @description Converts a string to lowercase.\n  * @param {string} string\n  * @returns {string}\n  */\nconst toLowerCase = (string) => {\n    return string.toLowerCase();\n};\n\n/*\n  * @description Converts a string to uppercase.\n  * @param {string} string\n  * @returns {string}\n  */\nconst toUpperCase = (string) => {\n    return string.toUpperCase();\n};\n\n/*\n  * @description Returns the first character of the given string.\n  * @param {string} string\n  * @returns {string}\n  */\nconst firstCharacter = (string) => {\n    return string.charAt(0);\n};\n\n/*\n  * @description Returns the last character of the given string.\n  * @param {string} string\n  * @returns {string}\n  */\nconst lastCharacter = (string) => {\n    return string.charAt(string.length - 1);\n};\n\n/*\n  * @description Returns the length of the given string.\n  * @param {string} string\n  * @returns {number}\n  */\nconst length = (string) => {\n    return string.length;\n};\n\n/*\n  * @description Returns the characters of the given string.\n  * @param {string} string\n  * @returns {string}\n  */\nconst characters = (string) => {\n    return string;\n};\n\n/*\n  * @description Returns the number of characters in the given string.\n  * @param {string} string\n  * @returns {number}\n  */\nconst characterCount = (string) => {\n    return string.length;\n};\n\n/*\n  * @description Returns the characters of the given string with a space in between them.\n  * @param {string} string\n  * @returns {string}\n  */\nconst spaceAndCharacters = (string) => {\n    return string +'';\n};\n\n/*\n  * @description Returns the string that contains the given number of spaces.\n  * @param {number} number\n  * @returns {string}\n  */\nconst spaceString = (number) => {\n    let space = '';\n    for (let i = 0; i < number; i++) {\n        space +='';\n    }\n    return space;\n};\n\n/*\n  * @description Returns the string that contains the given number of characters.\n  * @param {number} number\n  * @returns {string}\n  */\nconst characterString = (number) => {\n    let character = '';\n    for (let i = 0; i < number; i++) {\n        character += 'c';\n    }\n    return character;\n};\n\n/*\n  * @description Returns the string that contains the given number of spaces followed by the given number of characters.\n  * @param {number} number\n  * @param {number} number\n  * @returns {string}\n  */\nconst spaceAndCharacterString = (number, numberOfCharacters) => {\n    let space = '';\n    for (let i = 0; i < number; i++) {\n        space +='';\n    }\n    let character = '';\n    for (let i = 0; i < numberOfCharacters; i++) {\n        character += 'c';\n    }\n    return space + character;\n};\n\n/*\n  * @description Returns the string that contains the given number of spaces followed by the given number of words.\n  * @param {number} number\n  * @param {number} number\n  * @returns {string}\n  */\nconst spaceAndWordsString = (number, numberOfWords) => {\n    let space = '';\n    for (let i = 0; i < number; i++) {\n        space +='';\n    }\n    let word = '';\n    for (let i = 0; i < numberOfWords; i++) {\n        word += 'word';\n    }\n    return space + word;\n};\n\n/*\n  * @description Returns the string that contains the given number of spaces followed by the given number of characters.\n  * @param {number} number\n  * @param {number} number\n  * @returns {string}\n  */\nconst spaceAndCharacterString = (number, number"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, string) => `${acc}${string}`, '')\n}\n\n/* Convert a number to a string */\nconst toString = (num) => {\n  return num.toString()\n}\n\n/* Return a random string of length length */\nconst randomString = (length) => {\n  let chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n  let result = ''\n  for (let i = 0; i < length; i++) {\n    result += chars[Math.floor(Math.random() * 62)]\n  }\n  return result\n}\n\n/* Add a random number to the end of a string */\nconst randomize = (string) => {\n  let randomLength = Math.floor(Math.random() * 10)\n  return `${string}${randomString(randomLength)}`\n}\n\n/* Return a random boolean */\nconst randomBool = () => {\n  return Math.floor(Math.random() * 2)\n}\n\n/* Generate a random string of length length */\nconst randomStringOfLength = (length) => {\n  let chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n  let result = ''\n  for (let i = 0; i < length; i++) {\n    result += chars[Math.floor(Math.random() * 62)]\n  }\n  return result\n}\n\n/* Create a random object */\nconst randomObject = () => {\n  let keys = ['a', 'b', 'c']\n  let values = [1, 2, 3]\n  return {\n   ...{\n     ...keys.reduce((acc, key) => {\n        acc[key] = randomBool()\n        return acc\n      }, {}),\n     ...values.reduce((acc, value) => {\n        acc[randomBool()? 'b' : 'a'] = value\n        return acc\n      }, {})\n    }\n  }\n}\n\n/* Generate a random string */\nconst randomString = (length) => {\n  let chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n  let result = ''\n  for (let i = 0; i < length; i++) {\n    result += chars[Math.floor(Math.random() * 62)]\n  }\n  return result\n}\n\n/* Generate a random number */\nconst randomNumber = () => {\n  return Math.floor(Math.random() * 100)\n}\n\n/* Generate a random date */\nconst randomDate = () => {\n  return new Date(Math.floor(Math.random() * 1000000000000000))\n}\n\n/* Generate a random date */\nconst randomTime = () => {\n  return new Date(Math.floor(Math.random() * 1000000000000000))\n}\n\n/* Generate a random object */\nconst randomObject = () => {\n  let keys = ['a', 'b', 'c']\n  let values = [1, 2, 3]\n  return {\n   ...{\n     ...keys.reduce((acc, key) => {\n        acc[key] = randomBool()\n        return acc\n      }, {}),\n     ...values.reduce((acc, value) => {\n        acc[randomBool()? 'b' : 'a'] = value\n        return acc\n      }, {})\n    }\n  }\n}\n\n/* Generate a random array */\nconst randomArray = (size) => {\n  let result = []\n  for (let i = 0; i < size; i++) {\n    result.push(randomBool())\n  }\n  return result\n}\n\n/* Generate a random array */\nconst randomArrayOfObjects = (size) => {\n  let result = []\n  for (let i = 0; i < size; i++) {\n    result.push(randomObject())\n  }\n  return result\n}\n\n/* Generate a random array */\nconst randomArrayOfStrings = (size) => {\n  let result = []\n  for (let i = 0; i < size; i++) {\n    result.push(randomString(10))\n  }\n  return result\n}\n\n/* Generate a random array */\nconst randomArrayOfNumbers = (size) => {\n  let result = []\n  for (let i = 0; i < size; i++) {\n    result.push(randomNumber())\n  }\n  return result\n}\n\n/* Generate a random array */\nconst randomArrayOfDates = (size) => {\n  let result = []\n  for (let i = 0; i < size; i++) {\n    result.push(randomDate())\n  }\n  return result\n}\n\n/* Generate a random array */\nconst randomArrayOfTimes = (size) => {\n  let result = []\n  for (let i = 0; i < size; i++) {\n    result.push(randomTime())\n  }\n  return result\n}\n\n/* Generate a random array */\nconst randomArrayOfObjects = (size) => {\n  let result = []\n  for (let i = 0; i < size; i++) {\n    result.push(randomObject())\n  }\n  return result\n}\n\n/* Generate a random array */\nconst randomArrayOfStrings = (size) => {\n  let result = []\n  for (let i = 0; i < size; i++) {\n    result.push(randomString(10))\n  }\n  return result\n}\n\n/* Generate a random array */\nconst randomArrayOfNumbers = (size) => {\n  let result = []\n  for (let i = 0; i < size; i++) {\n    result.push(randomNumber())\n  }\n  return result\n}\n\n/* Generate a random array */\nconst randomArrayOfDates = (size) => {\n  let result = []\n  for (let i = 0; i < size; i++) {\n    result.push(randomDate())\n  }\n  return result\n}\n\n/* Generate"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a grant prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start with a grant prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(item => {\n    return item.startsWith(prefix);\n  });\n};\n\n/**\n  * Return an array of strings with their prefix removed.\n  * @param  {Array} strings\n  * @param  {String} prefix\n  * @return {Array}\n  */\nconst removePrefix = (strings, prefix) => {\n  return strings.map(item => {\n    return item.replace(prefix, '');\n  });\n};\n\n/**\n  * Return a new array of strings, where the given prefix is removed from all\n  * strings in the array.\n  * @param  {Array} strings\n  * @param  {String} prefix\n  * @return {Array}\n  */\nconst removePrefixes = (strings, prefix) => {\n  return strings.map(item => {\n    return item.replace(prefix, '');\n  });\n};\n\n/**\n  * Return an array of strings, where every element is equal to the given\n  * string.\n  * @param  {Array} strings\n  * @param  {String} prefix\n  * @return {Array}\n  */\nconst prepend = (strings, prefix) => {\n  return strings.map(item => {\n    return prefix + item;\n  });\n};\n\n/**\n  * Return a new array of strings, where every element is prepended with the\n  * given string.\n  * @param  {Array} strings\n  * @param  {String} prefix\n  * @return {Array}\n  */\nconst append = (strings, prefix) => {\n  return strings.map(item => {\n    return item + prefix;\n  });\n};\n\n/**\n  * Return an array of strings, where every element is equal to the given\n  * string, except for the prefix, which is removed.\n  * @param  {Array} strings\n  * @param  {String} prefix\n  * @return {Array}\n  */\nconst removePrefixesAndAppend = (strings, prefix) => {\n  return strings.map(item => {\n    return item.replace(prefix, '') + prefix;\n  });\n};\n\nexport default {\n  removePrefix,\n  removePrefixes,\n  filterByPrefix,\n  prepend,\n  append,\n  removePrefixesAndAppend,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\nconst getNegative = (l) => {\n  return l.filter(x => x < 0);\n};\n\nconst getPositiveAndNegative = (l) => {\n  return getPositive(getNegative(l));\n};\n\nconst getAll = (l) => {\n  return l.filter(x => x > 0).concat(l.filter(x => x < 0));\n};\n\nconst getAllButNegative = (l) => {\n  return l.filter(x => x > 0).concat(l.filter(x => x < 0));\n};\n\nconst getAllButPositive = (l) => {\n  return l.filter(x => x > 0).concat(l.filter(x => x < 0));\n};\n\nconst getAllButBoth = (l) => {\n  return l.filter(x => x > 0).concat(l.filter(x => x < 0));\n};\n\nconst getAllButNone = (l) => {\n  return l.filter(x => x > 0).concat(l.filter(x => x < 0));\n};\n\nexport { getPositive, getNegative, getPositiveAndNegative, getAll, getAllButNegative, getAllButPositive, getAllButBoth, getAllButNone };\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number equal choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number equal choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false\n  if (n % 2 === 0) return false\n  const sqrt = Math.sqrt(n)\n  const i = 3\n  while (i <= sqrt) {\n    if (n % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*Return prime numbers.\n  >>> nextPrime(10)\n  11\n  >>> nextPrime(12)\n  13\n  >>> nextPrime(11)\n  13\n  >>> nextPrime(7)\n  11\n  >>> nextPrime(6)\n  7\n  >>> nextPrime(2)\n  2\n  >>> nextPrime(1)\n  2\n  */\nconst nextPrime = (n) => {\n  if (isPrime(n)) {\n    return n + 1\n  } else {\n    const i = 2\n    while (!isPrime(i)) {\n      i++\n    }\n    return i\n  }\n}\n\nexport { isPrime, nextPrime }\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero recurrence only entirely zero point, even if there exist many. \n   Moreover, findZero only carry list xs having even number of coefficient \n   and largest non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero recurrence only entirely zero point, even if there exist many. \n   Moreover, findZero only carry list xs having even number of coefficient \n   and largest non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  if (!xs) {\n    throw new Error('xs are required');\n  }\n\n  if (!Array.isArray(xs) ||!xs.length) {\n    throw new Error('xs is not an array');\n  }\n\n  let [n, m] = xs.length;\n\n  if (!(n % 2)) {\n    throw new Error('array must have even number of elements');\n  }\n\n  let [a, b] = [0, 0];\n  let result = 0;\n  let i = 0;\n\n  for (let j = 0; j < m; j++) {\n    result = result + xs[i] * Math.pow(j, n - 2);\n    i++;\n  }\n\n  return result;\n};\n\nmodule.exports = findZero;\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by three, while its value at the indicies that are divisible by three are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by three, while its value at the indicies that are divisible by three are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n    let sort = () => {\n        let sorted = [...l];\n        let sortedList = [...l];\n        for (let i = 0; i < sorted.length - 1; i++) {\n            for (let j = i + 1; j < sorted.length; j++) {\n                if (sorted[i] % 3 === 0 && sorted[j] % 3 === 0) {\n                    if (sorted[i] < sorted[j]) {\n                        sortedList[i] = sorted[j];\n                        sortedList[j] = sorted[i];\n                    }\n                }\n            }\n        }\n        return sortedList;\n    };\n    return sort();\n};\n\nconsole.log(sortThird([5, 6, 3, 4, 8, 9, 2]));<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return l.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push(b);\n      return a;\n    }\n    return a;\n  }, []);\n};\n\nexport default unique;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) {\n    throw new Error('Input list is empty')\n  }\n  if (l.length === 1) {\n    return l[0]\n  }\n  return l.reduce((m, n) => n > m? n : m)\n}\n\n/**\n  * @param {Array} a\n  * @param {Function} fn\n  * @returns {Array}\n  * @example\n  *   max([1, 3, 5, 2, 4, 8], (a) => a < 3? a + 1 : a)\n  *   // => [3, 5, 8]\n  *   max([1, 3, 5, 2, 4, 8], (a) => a < 3? a + 1 : a)\n  *   // => [3, 5, 8]\n  *\n  *   max([1, 3, 5, 2, 4, 8], (a) => a < 3? a + 1 : a)\n  *   // => [3, 5, 8]\n  */\nconst max = (a, fn) => {\n  return a.reduce((m, n) => fn(n) > m? n : m)\n}\n\n/**\n  * @param {Array} a\n  * @param {Function} fn\n  * @returns {Array}\n  * @example\n  *   maxBy([1, 3, 5, 2, 4, 8], (a) => a < 3? a + 1 : a)\n  *   // => [3, 5, 8]\n  *   maxBy([1, 3, 5, 2, 4, 8], (a) => a < 3? a + 1 : a)\n  *   // => [3, 5, 8]\n  *\n  *   maxBy([1, 3, 5, 2, 4, 8], (a) => a < 3? a + 1 : a)\n  *   // => [3, 5, 8]\n  */\nconst maxBy = (a, fn) => {\n  return a.reduce((m, n) => fn(n) > m? n : m)\n}\n\nmodule.exports = {\n  min,\n  minBy,\n  max,\n  maxBy,\n  minElement,\n  maxElement\n}\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n    const count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i % 3 === 0 && i % 5 === 0) {\n            count++;\n        }\n    }\n    return count;\n};\n\nconsole.log(fizzBuzz(99));\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the odd indicies, while its values at the even indicies constitute equal \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the odd indicies, while its values at the even indicies constitute equal \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n    return Array.from(l).filter(\n        (x) => {\n            return x % 2 === 1;\n        }\n    ).sort((x, y) => {\n        return x - y;\n    });\n}\n\n// A more efficient version of sortEven using Array.from\nconst sortEven2 = (l) => {\n    return Array.from(l).sort((x, y) => {\n        return x - y;\n    });\n}\n\n// This is what I expect\nconst expected = [1, 2, 3];\n\n// This is the solution\nconst solution = sortEven(expected);\n\nconsole.log('Solution:'+ solution);\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n   let groups = [ ], groups2 = [ ];\n   for (let i = 0; i < s.length; i += 3) {\n     groups.push(s.slice(i, Math.min(i + 3, s.length)));\n   }\n   for (const group of groups) {\n     if (group.length = = 3)\n       groups2.push(group[0] + group.slice(1));\n     else\n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n   let groups = [ ], groups2 = [ ];\n   for (let i = 0; i < s.length; i += 3) {\n     groups.push(s.slice(i, Math.min(i + 3, s.length)));\n   }\n   for (const group of groups) {\n     if (group.length = = 3)\n       groups2.push(group.slice(1) + group[0]);\n     else\n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n   let groups = [ ], groups2 = [ ];\n   for (let i = 0; i < s.length; i += 3) {\n     groups.push(s.slice(i, Math.min(i + 3, s.length)));\n   }\n   for (const group of groups) {\n     if (group.length = = 3)\n       groups2.push(group[0] + group.slice(1));\n     else\n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n\nconst encode = (s) = > {\n  if (s.length === 0) return '';\n  if (s.length === 1) return s;\n  return encode_cyclic(s);\n}\n\nconst decode = (s) = > {\n  if (s.length === 0) return '';\n  if (s.length === 1) return s;\n  return decode_cyclic(s);\n}\n\nconst encodeCyclic = (s) = > {\n  if (s.length === 0) return '';\n  if (s.length === 1) return s;\n  return encode_cyclic(s);\n}\n\nconst decodeCyclic = (s) = > {\n  if (s.length === 0) return '';\n  if (s.length === 1) return s;\n  return decode_cyclic(s);\n}\n\nmodule.exports = {\n  encode,\n  decode,\n  encodeCyclic,\n  decodeCyclic\n};\n\n/*\n  encode(s) = {\n    encode_cyclic(s)\n  }\n*/\n\n/*\n  decode(s) = {\n    decode_cyclic(s)\n  }\n*/\n\n/*\n  encodeCyclic(s) = {\n    encode_cyclic(s)\n  }\n*/\n\n/*\n  decodeCyclic(s) = {\n    decode_cyclic(s)\n  }\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    let fib = 2;\n    let prime = 1;\n    let cnt = 1;\n    while (cnt < n) {\n        fib = fib + fib;\n        if (primeFib(fib) === fib) {\n            prime = fib;\n        }\n        cnt += 1;\n    }\n    return prime;\n};\n\nlet n = primeFib(10);\nconsole.log(n);\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. \n   it returns dependable if there be three distinct elements in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input. \n   it returns dependable if there be three distinct elements in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const result = new Set();\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        result.add(l[i] + l[j]);\n      }\n    }\n  }\n  return result.size === 3;\n};\n\n/*\n  solve takes a list of integers as an input and returns a boolean if there \n   is a 3-sum that is dependable.\n\n  >>> solve([1, 3, 5, 0])\n  false\n  >>> solve([1, 3, -2, 1])\n  true\n  >>> solve([1, 2, 3, 7])\n  false\n  >>> solve([2, 4, -5, 3, 9, 7])\n  true\n  >>> solve([1])\n  false\n  */\nconst solve = (l) => {\n  const result = new Set();\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          result.add(l[i] + l[j] + l[k]);\n        }\n      }\n    }\n  }\n  return result.size === 3;\n};\n\n/*\n  triplesSumToZeroInRange takes a list of integers as an input, a list of \n   starting positions in the array of integers and an ending position in the \n   array of integers. It returns a boolean if there is a 3-sum that is dependable \n   within the given range, and false otherwise.\n\n  >>> triplesSumToZeroInRange([1, 3, 5, 0], [0, 1, 3, 5], 4)\n  false\n  >>> triplesSumToZeroInRange([1, 3, -2, 1], [0, 1, 3, 7], 4)\n  true\n  >>> triplesSumToZeroInRange([1, 2, 3, 7], [0, 1, 3, 7], 4)\n  false\n  >>> triplesSumToZeroInRange([2, 4, -5, 3, 9, 7], [0, 1, 3, 7], 8)\n  true\n  >>> triplesSumToZeroInRange([1], [0], 1)\n  false\n  */\nconst triplesSumToZeroInRange = (l, s, e) => {\n  const result = new Set();\n  for (let i = s; i < e; i++) {\n    for (let j = i + 1; j < e; j++) {\n      for (let k = j + 1; k < e; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          result.add(l[i] + l[j] + l[k]);\n        }\n      }\n    }\n  }\n  return result.size === 3;\n};\n\n/*\n  solveInRange takes a list of integers as an input, a list of starting positions \n   in the array of integers and an ending position in the array of integers. It \n   returns a boolean if there is a 3-sum that is dependable within the given \n   range, and false otherwise.\n\n  >>> solveInRange([1, 3, 5, 0], [0, 1, 3, 5], 4)\n  false\n  >>> solveInRange([1, 3, -2, 1], [0, 1, 3, 7], 4)\n  true\n  >>> solveInRange([1, 2, 3, 7], [0, 1, 3, 7], 4)\n  false\n  >>> solveInRange([2, 4, -5, 3, 9, 7], [0, 1, 3, 7], 8)\n  true\n  >>> solveInRange([1], [0], 1)\n  false\n  */\nconst solveInRange = (l, s, e) => {\n  const result = new Set();\n  for (let i = s; i < e; i++) {\n    for (let j = i + 1; j < e; j++) {\n      for (let k = j + 1; k < e; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          result.add(l[i] + l[j] + l[k]);\n        }\n      }\n    }\n  }\n  return result.size === 3;\n};\n\n/*\n  main takes a list of integers as an input and returns a boolean if there \n   is a 3-sum that is dependable.\n\n  >>> main([1, 3, 5, 0])\n  false\n  >>> main([1, 3, -2, 1])\n  true\n  >>> main([1, 2, 3, 7])\n  false\n  >>> main([2, 4, -5, 3, 9, 7])\n  true\n  >>> main([1])\n  false\n  */\nconst main = (l) => {\n  const result = new Set();\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          result.add(l[i] + l[j] + l[k]);\n        }\n      }\n    }\n  }\n  return result.size === 3;\n};\n\nexport default {\n  triplesSumToZero,\n  solve,\n  triplesSumTo"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly square boundlessly long line. \n   n car are drive exit to correctly;   simultaneously, a unlike set of n car \n   are drive right to left.    The two sets of cars start out be very far from \n   each early.   All cars motivate in the like amphetamine.   Two cars are said to clash \n   when a car that's move left to proper hit a car that's move good to left. \n   However, the cars are infinitely sturdy and hard; as a solution, they continue be active \n   in their trajectory as if they did not clash. \n\n   This function output the number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly square boundlessly long line. \n   n car are drive exit to correctly;   simultaneously, a unlike set of n car \n   are drive right to left.    The two sets of cars start out be very far from \n   each early.   All cars motivate in the like amphetamine.   Two cars are said to clash \n   when a car that's move left to proper hit a car that's move good to left. \n   However, the cars are infinitely sturdy and hard; as a solution, they continue be active \n   in their trajectory as if they did not clash. \n\n   This function output the number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n    for (i = 1; i <= n; i++) {\n      for (j = i + 1; j <= n; j++) {\n        if (car[i].x < car[j].x) {\n          car[i].x = car[j].x;\n        } else {\n          car[j].x = car[i].x;\n        }\n      }\n    }\n  }\n */\n\n#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nint main() {\n  int n;\n  int i, j;\n  int collisions = 0;\n\n  cin >> n;\n\n  for (i = 1; i <= n; i++) {\n    for (j = i + 1; j <= n; j++) {\n      if (car[i].x < car[j].x) {\n        car[i].x = car[j].x;\n      } else {\n        car[j].x = car[i].x;\n      }\n    }\n  }\n\n  for (i = 1; i <= n; i++) {\n    for (j = i + 1; j <= n; j++) {\n      if (car[i].x < car[j].x) {\n        collisions += 1;\n      }\n    }\n  }\n\n  cout << collisions << endl;\n\n  return 0;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList[i] = l[i] + 1;\n  }\n  return newList;\n};\n\n// Add two numbers together\n/*\n  >>> add(1, 2)\n  3\n  >>> add(4, 5)\n  9\n  >>> add(6, 9)\n  15\n  >>> add(10, 15)\n  25\n  >>> add(12, 21)\n  37\n  >>> add(25, 37)\n  61\n  >>> add(23, 31)\n  56\n  >>> add(32, 23)\n  37\n  >>> add(11, 9)\n  10\n  */\nconst add = (x, y) => x + y;\n\n// Subtract two numbers\n/*\n  >>> subtract(4, 3)\n  1\n  >>> subtract(4, 2)\n  3\n  >>> subtract(5, 5)\n  0\n  >>> subtract(5, 4)\n  1\n  >>> subtract(6, 6)\n  0\n  >>> subtract(5, 1)\n  4\n  >>> subtract(5, 9)\n  4\n  >>> subtract(0, 0)\n  0\n  >>> subtract(1, 1)\n  0\n  >>> subtract(9, 9)\n  0\n  >>> subtract(1, 9)\n  8\n  >>> subtract(9, 1)\n  8\n  >>> subtract(10, 5)\n  5\n  */\nconst subtract = (x, y) => x - y;\n\n// Multiply two numbers\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 5)\n  25\n  >>> multiply(5, 3)\n  15\n  >>> multiply(4, 2)\n  8\n  >>> multiply(3, 5)\n  15\n  >>> multiply(6, 3)\n  18\n  >>> multiply(6, 5)\n  30\n  >>> multiply(6, 4)\n  24\n  >>> multiply(6, 6)\n  36\n  >>> multiply(2, 6)\n  12\n  >>> multiply(2, 3)\n  6\n  >>> multiply(2, 2)\n  4\n  >>> multiply(1, 2)\n  2\n  >>> multiply(3, 1)\n  3\n  >>> multiply(4, 0)\n  0\n  >>> multiply(4, 4)\n  16\n  >>> multiply(9, 0)\n  0\n  >>> multiply(9, 9)\n  81\n  >>> multiply(9, 2)\n  18\n  >>> multiply(9, 3)\n  27\n  >>> multiply(9, 9)\n  81\n  >>> multiply(9, 8)\n  72\n  */\nconst multiply = (x, y) => x * y;\n\n// Divide two numbers\n/*\n  >>> divide(9, 3)\n  3\n  >>> divide(9, 2)\n  4\n  >>> divide(9, 4)\n  3\n  >>> divide(9, 5)\n  3\n  >>> divide(9, 6)\n  3\n  >>> divide(9, 7)\n  3\n  >>> divide(9, 8)\n  3\n  >>> divide(9, 9)\n  1\n  >>> divide(9, 10)\n  9\n  >>> divide(9, 1)\n  9\n  >>> divide(1, 9)\n  1\n  >>> divide(1, 2)\n  0\n  >>> divide(1, 0)\n  0\n  >>> divide(1, 4)\n  0\n  >>> divide(3, 4)\n  1\n  >>> divide(4, 3)\n  1\n  >>> divide(4, 2)\n  2\n  >>> divide(4, 1)\n  2\n  >>> divide(4, 0)\n  0\n  >>> divide(1, 0)\n  0\n  >>> divide(0, 0)\n  0\n  */\nconst divide = (x, y) => x / y;\n\n// Test if two numbers are equal\n/*\n  >>> equal(1, 1)\n  true\n  >>> equal(1, 2)\n  false\n  >>> equal(1, 3)\n  false\n  >>> equal(1, 4)\n  false\n  >>> equal(9, 9)\n  true\n  >>> equal(9, 10)\n  false\n  >>> equal(9, 11)\n  false\n  >>> equal(9, 12)\n  false\n  >>> equal(9, 13)\n  false\n  >>> equal(9, 14)\n  false\n  >>> equal(9, 15)\n  false\n  >>> equal(9, 16)\n  false\n  >>> equal(9, 17)\n  false\n  >>> equal(9, 18)\n  false\n  >>> equal(9, 19)\n  false\n  >>> equal(9, 20)\n  false\n  >>> equal(9, 21)\n  false\n  >>> equal(9, 22)\n  false\n  >>> equal(9, 23)\n  false\n  >>> equal(9, 24)\n  false\n  >>> equal(9, 25)\n  false\n  >>> equal(9, 26)\n  false\n  >>> equal(9, 27)\n  false\n  >>> equal(9, 28)\n  false\n  >>> equal(9, 29)\n  false\n  >>> equal(9, 30)\n  false\n  >>> equal(9, 31)\n  false\n  >>> equal(9, 32)\n  false\n  >>> equal(9, 33)\n  false\n  >>> equal(9, 34)\n  false\n  >>> equal(9, 35)\n  false\n  >>> equal(9, 36)\n  false\n  >>> equal(9, 37)\n  false\n  >>> equal(9, 38)\n  false\n  >>> equal(9, 39)\n  false\n  >>> equal(9, 40)\n  false\n  >>> equal(9, 41)\n  false\n  >>> equal(9, 42)\n  false\n  >>> equal(9, 43)\n  false\n  >>> equal(9, 44)\n  false\n  >>> equal(9, 45)\n  false\n  >>> equal("}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const pairsSumToZero = (l) => {\n    const allZero = l.filter(v => v === 0);\n    if (allZero.length === l.length) {\n      return true;\n    } else if (allZero.length === 1) {\n      return l.includes(allZero[0]);\n    } else {\n      return false;\n    }\n  };\n  return allZero.every(pairsSumToZero);\n};\n\nexport default pairsSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return drawstring theatrical performance after the conversion. \n   base number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return drawstring theatrical performance after the conversion. \n   base number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n    let res = ''\n    for (let i = x; i >= 1; i--) {\n        res = (res + (base - 1)).toString() + i.toString()\n    }\n    return res.toString()\n}\n\n/* \n   Return the result of x - base * y. \n   This function return the result of x - base * y in base 10. \n   Example:\n   >>> sumBase(10, 10)\n   '0'\n   >>> sumBase(12, 10)\n   '2'\n   >>> sumBase(10, 8)\n   '20'\n   >>> sumBase(8, 3)\n   '4'\n   >>> sumBase(8, 2)\n   '200'\n   >>> sumBase(9, 3)\n   '3'\n   >>> sumBase(9, 2)\n   '30'\n   >>> sumBase(3, 2)\n   '1'\n   >>> sumBase(3, 2)\n   '1'\n   >>> sumBase(2, 2)\n   '0'\n   >>> sumBase(2, 2)\n   '0'\n  */\nconst sumBase = (x, y) => {\n    return (x - y * changeBase(x, y)).toString()\n}\n\n/*\n   Return the result of x + base * y. \n   This function return the result of x + base * y in base 10. \n   Example:\n   >>> sumBase(10, 10)\n   '0'\n   >>> sumBase(12, 10)\n   '22'\n   >>> sumBase(10, 8)\n   '22'\n   >>> sumBase(8, 3)\n   '22'\n   >>> sumBase(8, 2)\n   '1000'\n   >>> sumBase(9, 3)\n   '23'\n   >>> sumBase(9, 2)\n   '999'\n   >>> sumBase(3, 2)\n   '3'\n   >>> sumBase(3, 2)\n   '3'\n   >>> sumBase(2, 2)\n   '0'\n   >>> sumBase(2, 2)\n   '0'\n  */\nconst sumBase2 = (x, y) => {\n    return (x + y * changeBase(x, y)).toString()\n}\n\n/*\n   Return the result of x - base * y. \n   This function return the result of x - base * y in base 10. \n   Example:\n   >>> sumBase(10, 10)\n   '0'\n   >>> sumBase(12, 10)\n   '2'\n   >>> sumBase(10, 8)\n   '20'\n   >>> sumBase(8, 3)\n   '4'\n   >>> sumBase(8, 2)\n   '200'\n   >>> sumBase(9, 3)\n   '3'\n   >>> sumBase(9, 2)\n   '30'\n   >>> sumBase(3, 2)\n   '1'\n   >>> sumBase(3, 2)\n   '1'\n   >>> sumBase(2, 2)\n   '0'\n   >>> sumBase(2, 2)\n   '0'\n  */\nconst sumBase3 = (x, y) => {\n    return (x - y * changeBase(x, y)).toString()\n}\n\n/*\n   Return the result of x * base ** y. \n   This function return the result of x * base ** y in base 10. \n   Example:\n   >>> sumBase(10, 10)\n   '0'\n   >>> sumBase(12, 10)\n   '22'\n   >>> sumBase(10, 8)\n   '22'\n   >>> sumBase(8, 3)\n   '22'\n   >>> sumBase(8, 2)\n   '1000'\n   >>> sumBase(9, 3)\n   '23'\n   >>> sumBase(9, 2)\n   '999'\n   >>> sumBase(3, 2)\n   '3'\n   >>> sumBase(3, 2)\n   '3'\n   >>> sumBase(2, 2)\n   '0'\n   >>> sumBase(2, 2)\n   '0'\n  */\nconst sumBase4 = (x, y) => {\n    return (x * changeBase(x, y)).toString()\n}\n\n/*\n   Return the result of x + base * y. \n   This function return the result of x + base * y in base 10. \n   Example:\n   >>> sumBase(10, 10)\n   '0'\n   >>> sumBase(12, 10)\n   '22'\n   >>> sumBase(10, 8)\n   '22'\n   >>> sumBase(8, 3)\n   '22'\n   >>> sumBase(8, 2)\n   '1000'\n   >>> sumBase(9, 3)\n   '23'\n   >>> sumBase(9, 2)\n   '999'\n   >>> sumBase(3, 2)\n   '3'\n   >>> sumBase(3, 2)\n   '3'\n   >>> sumBase(2, 2)\n   '0'\n   >>> sumBase(2, 2)\n   '0'\n  */\nconst sumBase5 = (x, y) => {\n    return (x + y * changeBase(x, y)).toString()\n}\n\n/*\n   Return the result of x / base ** y. \n   This function return the result of x / base ** y in base 10. \n   Example:\n   >>> sumBase(10, 10)\n   '0'\n   >>> sumBase(12, 10)\n   '2'\n   >>> sumBase(10, 8)\n   '22'\n   >>> sumBase(8, 3)\n   '4'\n   >>> sumBase(8, 2)\n   '200'\n   >>> sumBase(9, 3)\n   '3'\n   >>> sumBase(9, 2)\n   '30'\n   >>> sumBase(3, 2)\n   '1'\n   >>> sumBase(3, 2)\n   '1'\n   >>> sumBase(2, 2)\n   '0'\n   >>> sumBase("}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/**\n * Given two points, find the length of the hypotenuse.\n * \n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst hypotenuse = (x, y) => {\n  return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n};\n\n/**\n * Given the lengths of two sides, find the length of the third side.\n * \n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @return {number}\n */\nconst thirdSide = (a, b, c) => {\n  return Math.abs(a * b * c / (hypotenuse(a, b) * hypotenuse(b, c)));\n};\n\n/**\n * Given the lengths of two sides, find the area of the triangle.\n * \n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, hypotenuse(a, b));\n};\n\n/**\n * Given the length of a side and the length of the hypotenuse, find the area of the triangle.\n * \n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, hypotenuse(a, b));\n};\n\n/**\n * Given the length of two sides, find the area of the triangle.\n * \n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, hypotenuse(a, b));\n};\n\n/**\n * Given the length of a side and the length of the hypotenuse, find the area of the triangle.\n * \n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, hypotenuse(a, b));\n};\n\n/**\n * Given the length of a side and the length of the hypotenuse, find the area of the triangle.\n * \n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, hypotenuse(a, b));\n};\n\n/**\n * Given the length of a side and the length of the hypotenuse, find the area of the triangle.\n * \n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, hypotenuse(a, b));\n};\n\n/**\n * Given the length of a side and the length of the hypotenuse, find the area of the triangle.\n * \n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, hypotenuse(a, b));\n};\n\n/**\n * Given the length of a side and the length of the hypotenuse, find the area of the triangle.\n * \n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, hypotenuse(a, b));\n};\n\n/**\n * Given the length of a side and the length of the hypotenuse, find the area of the triangle.\n * \n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, hypotenuse(a, b));\n};\n\n/**\n * Given the length of a side and the length of the hypotenuse, find the area of the triangle.\n * \n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, hypotenuse(a, b));\n};\n\n/**\n * Given the length of a side and the length of the hypotenuse, find the area of the triangle.\n * \n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, hypotenuse(a, b));\n};\n\n/**\n * Given the length of a side and the length of the hypotenuse, find the area of the triangle.\n * \n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, hypotenuse(a, b));\n};\n\n/**\n * Given the length of a side and the length of the hypotenuse, find the area of the triangle.\n * \n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, hypotenuse(a, b));\n};\n\n/**\n * Given the length of a side and the length of the hypotenuse, find the area of the triangle.\n * \n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, hypotenuse(a, b));\n};\n\n/**\n * Given the length of a side and the length of the hypotenuse, find the area of the triangle.\n * \n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, hypotenuse(a, b));\n};\n\n/**\n * Given the length"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please publish a affair to efficiently calculate the n-th component of the fib4 phone number sequence.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please publish a affair to efficiently calculate the n-th component of the fib4 phone number sequence.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 2;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n//test\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const half = Math.floor(l.length / 2);\n  let first = 0;\n  let second = l.length - 1;\n  while (first < half) {\n    if (l[first] < l[second]) {\n      first++;\n    } else {\n      second--;\n    }\n  }\n  if (first + second === half) {\n    return (l[first] + l[second]) / 2;\n  } else if (first + second === l.length - 1) {\n    return l[first];\n  } else {\n    return l[second];\n  }\n};\n\nconst test_median = (l) => {\n  let median = median(l);\n  assert.deepEqual(median, l[Math.floor(l.length / 2)]);\n};\n\ntest_median([3, 1, 2, 4, 5]);\ntest_median([-10, 4, 6, 1000, 10, 20]);\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": false, "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    if(text.length === 0) return true;\n    return text.charAt(0) === text.charAt(text.length - 1) && text.length % 2 === 1;\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": false, "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n    return (n % p + p) % p;\n}\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = modp;\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes as remark string encode with encode_shift routine. return decoded string. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as remark string encode with encode_shift routine. return decoded string. \n   * / \n const decodeShift = (s) = > {\n   let s = encodeShift(s);\n   s = s.split(\"\").map(ch = > String.fromCharCode(\n     (ch.charCodeAt(0) - 5 - \" a\".charCodeAt(0) )% 26 + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n   return s; \n } \n\n\n const encode = (s) = > encodeShift(s)\n\n const decode = (s) = > decodeShift(s)\n\n const encode_shift = (s) = > encodeShift(s)\n\n const decode_shift = (s) = > decodeShift(s)\n\n / * \n   takes as remark string encode with encode_shift routine. return decoded string. \n   * / \n const decode_shift = (s) = > {\n   let s = decodeShift(s);\n   s = s.split(\"\").map(ch = > String.fromCharCode(\n     (ch.charCodeAt(0) - 5 - \" a\".charCodeAt(0) )% 26 + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n   return s; \n } \n */\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns drawstring without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string and returns drawstring without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const result = text.split('');\n  for (let i = 0; i < vowels.length; i++) {\n    result.splice(result.indexOf(vowels[i]), 1);\n  }\n  return result.join('');\n};\n\nconst removeVowelsAndNumbers = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const result = text.split('');\n  for (let i = 0; i < vowels.length; i++) {\n    result.splice(result.indexOf(vowels[i]), 1);\n  }\n  for (let i = 0; i < result.length; i++) {\n    if (!isNumber(result[i])) {\n      result.splice(i, 1);\n      i--;\n    }\n  }\n  return result.join('');\n};\n\nconst removeVowelsAndNumbersAndNumbers = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const result = text.split('');\n  for (let i = 0; i < vowels.length; i++) {\n    result.splice(result.indexOf(vowels[i]), 1);\n  }\n  for (let i = 0; i < result.length; i++) {\n    if (!isNumber(result[i])) {\n      result.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < result.length; i++) {\n    if (!isNumber(result[i])) {\n      result.splice(i, 1);\n      i--;\n    }\n  }\n  return result.join('');\n};\n\nconst isVowel = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  return vowels.includes(text);\n};\n\nconst removeNonVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const result = text.split('');\n  for (let i = 0; i < vowels.length; i++) {\n    result.splice(result.indexOf(vowels[i]), 1);\n  }\n  return result.join('');\n};\n\nconst removeNonVowelsAndNumbers = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const result = text.split('');\n  for (let i = 0; i < vowels.length; i++) {\n    result.splice(result.indexOf(vowels[i]), 1);\n  }\n  for (let i = 0; i < result.length; i++) {\n    if (!isNumber(result[i])) {\n      result.splice(i, 1);\n      i--;\n    }\n  }\n  return result.join('');\n};\n\nconst removeNonVowelsAndNumbersAndNumbers = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const result = text.split('');\n  for (let i = 0; i < vowels.length; i++) {\n    result.splice(result.indexOf(vowels[i]), 1);\n  }\n  for (let i = 0; i < result.length; i++) {\n    if (!isNumber(result[i])) {\n      result.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < result.length; i++) {\n    if (!isNumber(result[i])) {\n      result.splice(i, 1);\n      i--;\n    }\n  }\n  return result.join('');\n};\n\nconst removeNonVowelsAndNumbersAndNumbersAndNumbers = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const result = text.split('');\n  for (let i = 0; i < vowels.length; i++) {\n    result.splice(result.indexOf(vowels[i]), 1);\n  }\n  for (let i = 0; i < result.length; i++) {\n    if (!isNumber(result[i])) {\n      result.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < result.length; i++) {\n    if (!isNumber(result[i])) {\n      result.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < result.length; i++) {\n    if (!isNumber(result[i])) {\n      result.splice(i, 1);\n      i--;\n    }\n  }\n  return result.join('');\n};\n\nconst removeNumbers = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const result = text.split('');\n  for (let i = 0; i < vowels.length; i++) {\n    result.splice(result.indexOf(vowels[i]), 1);\n  }\n  for (let i = 0; i < result.length; i++) {\n    if (!isNumber(result[i])) {\n      result.splice(i, 1);\n      i--;\n    }\n  }\n  return result.join('');\n};\n\nconst removeNumbersAndNumbers = (text) => {\n  const vowels"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": false, "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const res = l.every((n) => n < t);\n  return res;\n};\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  const res = l.every((n) => n > t);\n  return res;\n};\n\n/*Return true if all numbers in the list l are in the range of [min, max].\n  >>> rangeInclusive([1, 2, 4, 10], 4, 10)\n  true\n  >>> rangeInclusive([1, 20, 4, 10], 4, 10)\n  false\n  >>> rangeInclusive([1, 2, 4, 10], 1, 4)\n  false\n  */\nconst rangeInclusive = (l, min, max) => {\n  const res = belowThreshold(l, max) && aboveThreshold(l, min);\n  return res;\n};\n\n/*Return true if all numbers in the list l are in the range of [min, max].\n  >>> rangeInclusive([1, 2, 4, 10], 4, 10)\n  true\n  >>> rangeInclusive([1, 20, 4, 10], 4, 10)\n  false\n  >>> rangeInclusive([1, 2, 4, 10], 1, 4)\n  false\n  */\nconst rangeExclusive = (l, min, max) => {\n  const res = belowThreshold(l, min) || aboveThreshold(l, max);\n  return res;\n};\n\n/*Return true if all numbers in the list l are less than the limit.\n  >>> rangeLimit([1, 2, 4, 10], 4)\n  true\n  >>> rangeLimit([1, 20, 4, 10], 4)\n  false\n  >>> rangeLimit([1, 2, 4, 10], 3)\n  false\n  */\nconst rangeLimit = (l, lim) => {\n  const res = l.every((n) => n < lim);\n  return res;\n};\n\n/*Return true if all numbers in the list l are greater than the limit.\n  >>> rangeLimit([1, 2, 4, 10], 3)\n  false\n  >>> rangeLimit([1, 20, 4, 10], 3)\n  true\n  */\nconst rangeAboveLimit = (l, lim) => {\n  const res = l.every((n) => n > lim);\n  return res;\n};\n\n/*Return true if all numbers in the list l are in the range of [min, max]\n  but not within the range of [min, max]\n  >>> rangeLimit([1, 2, 4, 10], 4, 10)\n  false\n  >>> rangeLimit([1, 2, 4, 10], 4, 3)\n  true\n  >>> rangeLimit([1, 2, 4, 10], 3, 4)\n  true\n  */\nconst rangeExclusiveLimit = (l, min, max) => {\n  const res = rangeExclusive(l, min, max) && rangeLimit(l, min, max);\n  return res;\n};\n\n/*Return true if all numbers in the list l are in the range of [min, max]\n  but not within the range of [min, max]\n  >>> rangeLimit([1, 2, 4, 10], 4, 10)\n  false\n  >>> rangeLimit([1, 2, 4, 10], 4, 3)\n  true\n  >>> rangeLimit([1, 2, 4, 10], 3, 4)\n  true\n  */\nconst rangeInclusiveLimit = (l, min, max) => {\n  const res = rangeInclusive(l, min, max) && rangeLimit(l, min, max);\n  return res;\n};\n\n/*Return true if all numbers in the list l are in the range of [min, max]\n  but not within the range of [min, max]\n  >>> rangeLimit([1, 2, 4, 10], 4, 10)\n  false\n  >>> rangeLimit([1, 2, 4, 10], 4, 3)\n  true\n  >>> rangeLimit([1, 2, 4, 10], 3, 4)\n  true\n  */\nconst rangeExclusiveInclusiveLimit = (l, min, max) => {\n  const res = rangeExclusive(l, min, max) && rangeInclusive(l, min, max);\n  return res;\n};\n\n/*\n  TESTS:\n  >>> rangeLimit([1, 2, 4, 10], 4, 10)\n  true\n  >>> rangeLimit([1, 2, 4, 10], 4, 3)\n  false\n  >>> rangeLimit([1, 2, 4, 10], 3, 4)\n  true\n  >>> rangeLimit([1, 2, 4, 10], 4, 3)\n  true\n  >>> rangeLimit([1, 2, 4, 10], 3, 4)\n  true\n  >>> rangeLimit([1, 2, 4, 10], 4, 3)\n  true\n  >>> rangeLimit([1, 2, 4, 10], 3, 4)\n  true\n  >>> rangeLimit([1, 2, 4, 10], 3, 4)\n  true\n  >>> rangeLimit([1, 2, 4, 10], 3, 4)\n  true\n  >>> rangeLimit([1, 2, 4, 10], 4, 3)\n  false\n  >>> rangeLimit([1, 2, 4, 10], 3, 4)\n  true\n  >>> rangeLimit([1, 2, 4, 10], 3, 4)\n  true\n  >>> rangeLimit([1, 2, 4, 10], 3, 4)\n  true\n  >>> rangeLimit([1, 2, 4, 10], 3, 4)\n  true\n  >>> rangeLimit([1, 2, 4, 10], 3, 4)\n  true\n  >>> rangeLimit([1, 2, 4, 10], 3, 4)\n  true\n  >>> rangeLimit([1, 2, 4, 10], 3, 4)\n  true\n  >>> rangeLimit([1, 2, 4, 10], 3, 4)\n  true\n  >>> rangeLimit([1, 2, 4, 10], 3, 4)\n  true\n  >>> rangeLimit([1, 2,"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const sum = x + y;\n  return sum;\n}\n\n/*\n  Add two numbers\n  >>> add2(2, 3)\n  5\n  >>> add2(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  const sum = x + y;\n  return sum;\n}\n\n/*\n  Add two numbers\n  >>> add3(2, 3)\n  5\n  >>> add3(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  const sum = x + y;\n  return sum;\n}\n\n/*\n  Add two numbers\n  >>> add4(2, 3)\n  5\n  >>> add4(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  const sum = x + y;\n  return sum;\n}\n\n/*\n  Add two numbers\n  >>> add5(2, 3)\n  5\n  >>> add5(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  const sum = x + y;\n  return sum;\n}\n\n/*\n  Add two numbers\n  >>> add6(2, 3)\n  5\n  >>> add6(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  const sum = x + y;\n  return sum;\n}\n\n/*\n  Add two numbers\n  >>> add7(2, 3)\n  5\n  >>> add7(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  const sum = x + y;\n  return sum;\n}\n\n/*\n  Add two numbers\n  >>> add8(2, 3)\n  5\n  >>> add8(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  const sum = x + y;\n  return sum;\n}\n\n/*\n  Add two numbers\n  >>> add9(2, 3)\n  5\n  >>> add9(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  const sum = x + y;\n  return sum;\n}\n\n/*\n  Add two numbers\n  >>> add10(2, 3)\n  5\n  >>> add10(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  const sum = x + y;\n  return sum;\n}\n\n/*\n  Add two numbers\n  >>> add11(2, 3)\n  5\n  >>> add11(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  const sum = x + y;\n  return sum;\n}\n\n/*\n  Add two numbers\n  >>> add12(2, 3)\n  5\n  >>> add12(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  const sum = x + y;\n  return sum;\n}\n\n/*\n  Add two numbers\n  >>> add13(2, 3)\n  5\n  >>> add13(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  const sum = x + y;\n  return sum;\n}\n\n/*\n  Add two numbers\n  >>> add14(2, 3)\n  5\n  >>> add14(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  const sum = x + y;\n  return sum;\n}\n\n/*\n  Add two numbers\n  >>> add15(2, 3)\n  5\n  >>> add15(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  const sum = x + y;\n  return sum;\n}\n\n/*\n  Add two numbers\n  >>> add16(2, 3)\n  5\n  >>> add16(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  const sum = x + y;\n  return sum;\n}\n\n/*\n  Add two numbers\n  >>> add17(2, 3)\n  5\n  >>> add17(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  const sum = x + y;\n  return sum;\n}\n\n/*\n  Add two numbers\n  >>> add18(2, 3)\n  5\n  >>> add18(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  const sum = x + y;\n  return sum;\n}\n\n/*\n  Add two numbers\n  >>> add19(2, 3)\n  5\n  >>> add19(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  const sum = x + y;\n  return sum;\n}\n\n/*\n  Add two numbers\n  >>> add20(2, 3)\n  5\n  >>> add20(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  const sum = x + y;\n  return sum;\n}\n\n/*\n  Add two numbers\n  >>> add21(2, 3)\n  5\n  >>> add21(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  const sum = x + y;\n  return sum;\n}\n\n/*\n  Add two numbers\n  >>> add22(2, 3)\n  5\n  >>> add22(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  const sum = x + y;\n  return sum;\n}\n\n/*\n  Add two numbers\n  >>> add23(2, 3)\n  5\n  >>> add23(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  const sum = x + y;\n  return sum;\n}\n\n/*\n  Add two numbers\n  >>> add24(2, 3)\n  5\n  >>> add24(5, 7)\n  12\n  */\nconst add24 = (x,"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    if (s0.length!== s1.length) {\n        return false;\n    }\n    return (s0.split('').every(c0 => s1.includes(c0)));\n};\n\n/*\n  Check if two words are anagrams.\n  >>> isAnagram('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> isAnagram('abcd', 'dddddddabc')\n  true\n  >>> isAnagram('dddddddabc', 'abcd')\n  true\n  >>> isAnagram('eabcd', 'dddddddabce')\n  false\n  >>> isAnagram('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst isAnagram = (s0, s1) => {\n    const s0Chars = s0.split('').map(c => c.toLowerCase());\n    const s1Chars = s1.split('').map(c => c.toLowerCase());\n\n    if (s0Chars.length!== s1Chars.length) {\n        return false;\n    }\n\n    return (s0Chars.every(c0 => s1Chars.includes(c0)));\n};\n\n/*\n  Check if two words are permutations of one another.\n  >>> isPermutation('abcd', 'eabcd')\n  true\n  >>> isPermutation('abcd', 'eabcd')\n  true\n  >>> isPermutation('abcd', 'eabcd')\n  true\n  >>> isPermutation('abcd', 'abce')\n  false\n  >>> isPermutation('abcd', 'abde')\n  false\n  >>> isPermutation('abcd', 'abcd')\n  true\n  */\nconst isPermutation = (s0, s1) => {\n    if (s0.length!== s1.length) {\n        return false;\n    }\n\n    const s0Chars = s0.split('').map(c => c.toLowerCase());\n    const s1Chars = s1.split('').map(c => c.toLowerCase());\n\n    const s0Len = s0Chars.length;\n    const s1Len = s1Chars.length;\n\n    if (s0Len!== s1Len) {\n        return false;\n    }\n\n    for (let i = 0; i < s0Len; i++) {\n        const c0 = s0Chars[i];\n        const c1 = s1Chars[i];\n\n        if (c0 === c1) {\n            continue;\n        }\n\n        return false;\n    }\n\n    return true;\n};\n\n/*\n  Check if two words are a rotation of one another.\n  >>> isRotation('abcd', 'abcd')\n  true\n  >>> isRotation('abcd', 'abcd')\n  true\n  >>> isRotation('abcd', 'abce')\n  false\n  >>> isRotation('abcd', 'abce')\n  false\n  >>> isRotation('abcd', 'abcd')\n  true\n  */\nconst isRotation = (s0, s1) => {\n    if (s0.length!== s1.length) {\n        return false;\n    }\n\n    const s0Chars = s0.split('').map(c => c.toLowerCase());\n    const s1Chars = s1.split('').map(c => c.toLowerCase());\n\n    const s0Len = s0Chars.length;\n    const s1Len = s1Chars.length;\n\n    if (s0Len!== s1Len) {\n        return false;\n    }\n\n    const s0Index = 0;\n    const s1Index = 0;\n\n    while (s0Index < s0Len && s1Index < s1Len) {\n        const c0 = s0Chars[s0Index];\n        const c1 = s1Chars[s1Index];\n\n        if (c0!== c1) {\n            return false;\n        }\n\n        s0Index++;\n        s1Index++;\n    }\n\n    return true;\n};\n\nmodule.exports = {\n    isAnagram,\n    isPermutation,\n    isRotation\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n    if (n <= 1) return n;\n    else return fib(n - 1) + fib(n - 2);\n};\n\n/*Return a Fibonacci number for every number of the given array.\n  >>> fib([1, 2, 3])\n  [1, 1, 2]\n  >>> fib([1, 3, 5])\n  [1, 1, 2, 3, 5]\n  >>> fib([1, 4, 7])\n  [1, 1, 2, 3, 5, 8]\n  */\nconst fibs = (numbers) => {\n    return numbers.reduce((acc, num) => [acc, acc + fib(num)], [0, 1]);\n};\n\nmodule.exports = {\n    fib,\n    fibs\n};\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const count = brackets.length - 1;\n  let bracketsLeft = 0;\n  for (let i = 0; i < count; i++) {\n    bracketsLeft += (brackets[i] === \"<\")? -1 : 1;\n  }\n  let bracketsRight = 0;\n  for (let i = count; i >= 0; i--) {\n    bracketsRight += (brackets[i] === \">\")? -1 : 1;\n  }\n  if (bracketsLeft === 0 && bracketsRight === 0) {\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const isIncreasing = (a, b) => a - b > 0\n  const isDecreasing = (a, b) => b - a > 0\n  return l.reduce((prev, curr, index) => {\n    if (index === 0) return prev\n    return isIncreasing(prev, curr) || isDecreasing(prev, curr)\n  }, true)\n}\n\n/*\n  Return true if the given list is a palindrome.\n  >>> isPalindrome([1, 1])\n  true\n  >>> isPalindrome([1, 2, 3, 2, 1])\n  true\n  >>> isPalindrome([1, 2, 3, 2, 1])\n  true\n  >>> isPalindrome([1, 1, 1, 1, 1])\n  true\n  >>> isPalindrome([1, 1, 1, 2, 1])\n  false\n  */\nconst isPalindrome = (l) => {\n  let reversed = l.reverse()\n  return reversed.join('') === l.join('')\n}\n\n/*\n  Return true if the given list is a permutation of the elements of the given list.\n  >>> isPermutation([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  true\n  >>> isPermutation([1, 2, 3, 4, 5], [2, 1, 3, 4, 5])\n  true\n  >>> isPermutation([1, 2, 3, 4, 5], [1, 3, 2, 4, 5])\n  true\n  >>> isPermutation([1, 2, 3, 4, 5], [2, 3, 1, 4, 5])\n  true\n  >>> isPermutation([1, 2, 3, 4, 5], [1, 3, 5, 2, 4])\n  true\n  >>> isPermutation([1, 2, 3, 4, 5], [3, 2, 1, 4, 5])\n  false\n  >>> isPermutation([1, 2, 3, 4, 5], [3, 2, 5, 1, 4])\n  false\n  */\nconst isPermutation = (l, list) => {\n  if (l.length!== list.length) return false\n  return l.every((el, index) => list.indexOf(el) === index)\n}\n\n/*\n  Return true if the given list is a permutation of the elements of the given list.\n  >>> isPermutation([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  true\n  >>> isPermutation([1, 2, 3, 4, 5], [2, 1, 3, 4, 5])\n  true\n  >>> isPermutation([1, 2, 3, 4, 5], [1, 3, 2, 4, 5])\n  true\n  >>> isPermutation([1, 2, 3, 4, 5], [2, 3, 1, 4, 5])\n  true\n  >>> isPermutation([1, 2, 3, 4, 5], [3, 2, 5, 1, 4])\n  true\n  >>> isPermutation([1, 2, 3, 4, 5], [3, 2, 5, 1, 4])\n  false\n  */\nconst isPermutation = (l, list) => {\n  if (l.length!== list.length) return false\n  return l.every((el, index) => list.indexOf(el) === index)\n}\n\nmodule.exports = {\n  monotonic,\n  isPalindrome,\n  isPermutation\n}\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let sorted_l1 = Array.from(l1);\n  sorted_l1.sort();\n  let sorted_l2 = Array.from(l2);\n  sorted_l2.sort();\n  let intersection = sorted_l1.filter(item => sorted_l2.includes(item));\n  return intersection.length === sorted_l1.length? intersection : [];\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  const sqrt = Math.sqrt(n)\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n < 3) return n\n  const d = sqrt - 1\n  for (let i = 2; i <= sqrt; i++) {\n    if (n % i === 0) {\n      if (i === sqrt) return n\n      else {\n        return largestPrimeFactor(n / i)\n      }\n    }\n  }\n}\n\n/*\n  Return the number of divisors of n. Assume n > 1 and is not a flower.\n  >>> divisorCount(4)\n  4\n  >>> divisorCount(12)\n  12\n  >>> divisorCount(14)\n  14\n  >>> divisorCount(9)\n  1\n  >>> divisorCount(2)\n  2\n  */\nconst divisorCount = (n) => {\n  const sqrt = Math.sqrt(n)\n  if (n === 1) return 1\n  if (n === 2) return 1\n  if (n === 3) return 1\n  if (n < 3) return 1\n  if (n === 4) return 2\n  if (n < 7) return 3\n  if (n < 15) return 4\n  if (n < 31) return 5\n  if (n < 63) return 6\n  if (n < 127) return 7\n  if (n < 255) return 8\n  if (n < 511) return 9\n  if (n < 1023) return 10\n  if (n < 2047) return 11\n  if (n < 4095) return 12\n  if (n < 8191) return 13\n  if (n < 16383) return 14\n  if (n < 32767) return 15\n  if (n < 65535) return 16\n  if (n < 131071) return 17\n  if (n < 262143) return 18\n  if (n < 524287) return 19\n  if (n < 1048575) return 20\n  if (n < 2097151) return 21\n  if (n < 4194303) return 22\n  if (n < 8388607) return 23\n  if (n < 16777215) return 24\n  if (n < 33554431) return 25\n  if (n < 67108863) return 26\n  if (n < 134217727) return 27\n  if (n < 268435455) return 28\n  if (n < 536870911) return 29\n  if (n < 1073741823) return 30\n  if (n < 2147483647) return 31\n  if (n < 4294967295) return 32\n  if (n < 8589934591) return 33\n  if (n < 17179869183) return 34\n  if (n < 34359738367) return 35\n  if (n < 68719476735) return 36\n  if (n < 137438953471) return 37\n  if (n < 274877906943) return 38\n  if (n < 549755813887) return 39\n  if (n < 1099511627771) return 40\n  if (n < 2199023255551) return 41\n  if (n < 41990232555921) return 42\n  if (n < 83886069425987) return 43\n  if (n < 167772162599991) return 44\n  if (n < 3355443225999999) return 45\n  if (n < 67108864359999999) return 46\n  if (n < 134217721699999999) return 47\n  if (n < 2684354599999999999) return 48\n  if (n < 53687091199999999999) return 49\n  if (n < 107374182399999999999) return 50\n  if (n < 214748364799999999999) return 51\n  if (n < 429496729599999999999) return 52\n  if (n < 858993459199999999999) return 53\n  if (n < 1717986918399999999999) return 54\n  if (n < 3435973836799999999999) return 55\n  if (n < 6871947673599999999999) return 56\n  if (n < 13743895347199999999999) return 57\n  if (n < 27487790694399999999999) return 58\n  if (n < 54975581388799999999999) return 59\n  if (n < 109951162777199999999999) return 60\n  if (n < 219902325555199999999999) return 61\n  if (n < 4199023255592199999999999) return 62\n  if (n < 8388606942598799999999999) return 63\n  if (n < 16777216259999199999999999) return 64\n  if (n < 33554432259999399999999999) return 65\n  if (n < 67108864359999799999999999) return 66\n  if (n < 13421772169999799999999999) return 67\n  if (n < 2684354599999799999999999) return 68\n  if (n < 5368709119999799999999999) return 69\n  if (n < 10737418239999799999999999) return 70\n  if (n < 21474836479999799999999999) return 71\n  if (n < 42949672959999799999999999) return 72\n  if (n < 85899345919999799999999999) return 73\n  if (n < 171798691839999799999999999) return 74\n  if (n < 343597383679999799999999999) return 75\n  if (n < 687194767359999799999999999) return 76\n  if (n < 1374389534719999799999999999) return 77\n  if (n < 2748779069439999799999999999) return 78\n  if (n < 5497558138879999799999999999) return 79\n  if (n < 10995116277719999799999999999) return 80\n  if (n < 21990232555511999799999999999"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": false, "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n\n  const result = sumToN(n - 1);\n  return n * result;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n\n  const result = sumToN(n - 1);\n  return n * result;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n\n  const result = sumToN(n - 1);\n  return n * result;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n\n  const result = sumToN(n - 1);\n  return n * result;\n};\n\nconst sumToN = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n\n  const result = sumToN(n - 1);\n  return n * result;\n};\n\nconst sumToN = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n\n  const result = sumToN(n - 1);\n  return n * result;\n};\n\nconst sumToN = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n\n  const result = sumToN(n - 1);\n  return n * result;\n};\n\nconst sumToN = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n\n  const result = sumToN(n - 1);\n  return n * result;\n};\n\nconst sumToN = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n\n  const result = sumToN(n - 1);\n  return n * result;\n};\n\nconst sumToN = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n\n  const result = sumToN(n - 1);\n  return n * result;\n};\n\nconst sumToN = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n\n  const result = sumToN(n - 1);\n  return n * result;\n};\n\nconst sumToN = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n\n  const result = sumToN(n - 1);\n  return n * result;\n};\n\nconst sumToN = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n\n  const result = sumToN(n - 1);\n  return n * result;\n};\n\nconst sumToN = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n\n  const result = sumToN(n - 1);\n  return n * result;\n};\n\nconst sumToN = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n\n  const result = sumToN(n - 1);\n  return n * result;\n};\n\nconst sumToN = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n\n  const result = sumToN(n - 1);\n  return n * result;\n};\n\nconst sumToN = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n\n  const result = sumToN(n - 1);\n  return n * result;\n};\n\nconst sumToN = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n\n  const result = sumToN(n - 1);\n  return n * result;\n};\n\nconst sumToN = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n\n  const result = sumToN(n - 1);\n  return n * result;\n};\n\nconst sumToN = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n\n  const result = sumToN(n - 1);\n  return n * result;\n};\n\nconst sumToN = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n\n  const result = sumToN(n - 1);\n  return n * result;\n};\n\nconst sumToN = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n\n  const result = sumToN(n - 1);\n  return n * result;\n};\n\nconst sumToN = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n\n  const result = sumToN(n - 1);\n  return n * result;\n};\n\nconst sumToN = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n\n  const result = sumToN(n"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    const stack = [];\n    for (let i = 0; i < brackets.length; i++) {\n        const bracket = brackets[i];\n        if (bracket === '(') {\n            stack.push(bracket);\n        }\n        if (bracket === ')') {\n            if (stack.pop()!== '(') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n};\n\nconsole.log(correctBracketing(\"()()\"));\nconsole.log(correctBracketing(\"(\"));\nconsole.log(correctBracketing(\"(())\"));\nconsole.log(correctBracketing(\")(\"));\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same mannequin.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same mannequin.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n    const len = xs.length;\n    const p = xs[len-1];\n    const p2 = xs[len-2];\n    const p3 = xs[len-3];\n    const p4 = xs[len-4];\n    const d = [];\n    for (let i = len-3; i >= 0; i--) {\n        d[i] = p3 * (p4 + p2 * p);\n        p4 = p3 * p2 + p;\n        p3 = p2;\n        p2 = p;\n    }\n    return d;\n}\n\n/*\n  x is a polynomial. Find a constant c such that derivative(x) = c.\n  If there are no such constants c, return -1.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  >>> derivative([3, 3, 4, 5])\n  [3, -1]\n  >>> derivative([0, 0, 0])\n  -1\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please publish a affair to efficiently calculate the n-th component of the fibfib phone number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please publish a affair to efficiently calculate the n-th component of the fibfib phone number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if(n <= 0) {\n    return 0\n  }\n  else if (n === 1) {\n    return 0\n  }\n  else if (n === 2) {\n    return 1\n  }\n  else {\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  }\n}\n\nconsole.log(fibfib(3))\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string exemplify \n   a news as input and return the number of vowels in the drawstring. \n   Vowels in this lawsuit are' a',' e',' i',' oxygen',' u'. Here,' y' is besides a \n   vowel, but only when it is at the end of the given word. \n\n   exercise:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which takes a string exemplify \n   a news as input and return the number of vowels in the drawstring. \n   Vowels in this lawsuit are' a',' e',' i',' oxygen',' u'. Here,' y' is besides a \n   vowel, but only when it is at the end of the given word. \n\n   exercise:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  return s.split('').reduce((acc, v, i) => {\n    if (v === 'y') {\n      return acc;\n    }\n    if (v === 'a' || v === 'e' || v === 'i' || v === 'o' || v === 'u') {\n      acc++;\n    }\n    return acc;\n  }, 0);\n};\n\nmodule.exports = vowelsCount;\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits veracious by shift\n   and return the resultant role as a bowed stringed instrument. \n   If shift > numeral of digits, return finger reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits veracious by shift\n   and return the resultant role as a bowed stringed instrument. \n   If shift > numeral of digits, return finger reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = x\n  while (shift--) {\n    result = result.concat(x.slice(0, 1))\n    x = x.slice(1)\n  }\n  return result\n}\n\nconsole.log(circularShift(12, 1))\nconsole.log(circularShift(12, 2))\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function that takes a drawstring as stimulation and fall the kernel of the upper quality only' \n   american standard code for information interchange code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   Write a function that takes a drawstring as stimulation and fall the kernel of the upper quality only' \n   american standard code for information interchange code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n    let result = 0;\n    for (let i = 0; i < s.length; i++) {\n        let n = s[i];\n        if (n.length > 1) {\n            result += (n.charCodeAt(0) - 'A'.charCodeAt(0)) * (10 - n.charCodeAt(1));\n        } else {\n            result += n.charCodeAt(0) - 'A'.charCodeAt(0);\n        }\n    }\n    return result;\n};\n\nconst letterSum = (s) => {\n    let result = 0;\n    for (let i = 0; i < s.length; i++) {\n        let n = s[i];\n        if (n.length > 1) {\n            result += (n.charCodeAt(0) - 'A'.charCodeAt(0)) * (26 - n.charCodeAt(1));\n        } else {\n            result += n.charCodeAt(0) - 'A'.charCodeAt(0);\n        }\n    }\n    return result;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\nconsole.log(letterSum(\"\"));\nconsole.log(letterSum(\"abAB\"));\nconsole.log(letterSum(\"abcCd\"));\nconsole.log(letterSum(\"helloE\"));\nconsole.log(letterSum(\"woArBld\"));\nconsole.log(letterSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a phone number of apple and oranges \n   that are distributed in a basket of fruit this basket contains \n   apples, orange, and mango yield. Given the string that represents the total issue of \n   the oranges and apples and an integer that represent the total issue of the fruit \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a string that represents a phone number of apple and oranges \n   that are distributed in a basket of fruit this basket contains \n   apples, orange, and mango yield. Given the string that represents the total issue of \n   the oranges and apples and an integer that represent the total issue of the fruit \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n    let [apple, orange, mango] = s.split(\" \");\n    let appleTotal = +apple;\n    let orangeTotal = +orange;\n    let mangoTotal = +mango;\n    let fruitTotal = appleTotal + orangeTotal + mangoTotal;\n    return (fruitTotal - n)\n};\n*/\nconst fruitDistribution = (s, n) => {\n    let [apple, orange, mango] = s.split(\" \");\n    let appleTotal = +apple;\n    let orangeTotal = +orange;\n    let mangoTotal = +mango;\n    let fruitTotal = appleTotal + orangeTotal + mangoTotal;\n    return (fruitTotal - n)\n};\n\nfruitDistribution(\"1 apple and 3 oranges\", 10);\n// fruitDistribution(\"2 apples and 3 oranges\", 5);\n// fruitDistribution(\"5 apples and 6 oranges\", 7);\n// fruitDistribution(\"0 apple and 1 oranges\", 5);\n// fruitDistribution(\"1 apple and 2 oranges\", 3);\n// fruitDistribution(\"3 apples and 4 oranges\", 8);\n// fruitDistribution(\"3 apples and 1 oranges\", 5);\n// fruitDistribution(\"1 apple and 2 oranges\", 2);\n// fruitDistribution(\"3 apples and 1 oranges\", 2);\n// fruitDistribution(\"2 apples and 2 oranges\", 2);\n// fruitDistribution(\"1 apple and 1 oranges\", 1);\n// fruitDistribution(\"2 apples and 1 oranges\", 2);\n// fruitDistribution(\"2 apples and 2 oranges\", 4);\n// fruitDistribution(\"0 apples and 1 oranges\", 2);\n// fruitDistribution(\"2 apples and 3 oranges\", 6);\n// fruitDistribution(\"2 apples and 2 oranges\", 3);\n// fruitDistribution(\"2 apples and 1 oranges\", 3);\n// fruitDistribution(\"1 apple and 2 oranges\", 4);\n// fruitDistribution(\"1 apple and 2 oranges\", 3);\n// fruitDistribution(\"1 apple and 1 oranges\", 2);\n// fruitDistribution(\"2 apples and 2 oranges\", 4);\n// fruitDistribution(\"1 apple and 1 oranges\", 2);\n// fruitDistribution(\"2 apples and 2 oranges\", 4);\n// fruitDistribution(\"2 apples and 1 oranges\", 3);\n// fruitDistribution(\"3 apples and 1 oranges\", 3);\n// fruitDistribution(\"2 apples and 1 oranges\", 2);\n// fruitDistribution(\"1 apple and 1 oranges\", 2);\n// fruitDistribution(\"3 apples and 2 oranges\", 5);\n// fruitDistribution(\"2 apples and 2 oranges\", 4);\n// fruitDistribution(\"1 apple and 1 oranges\", 3);\n// fruitDistribution(\"1 apple and 1 oranges\", 2);\n// fruitDistribution(\"1 apple and 2 oranges\", 4);\n// fruitDistribution(\"1 apple and 1 oranges\", 3);\n// fruitDistribution(\"2 apples and 1 oranges\", 4);\n// fruitDistribution(\"2 apples and 2 oranges\", 3);\n// fruitDistribution(\"2 apples and 1 oranges\", 3);\n// fruitDistribution(\"1 apple and 1 oranges\", 2);\n// fruitDistribution(\"2 apples and 1 oranges\", 3);\n// fruitDistribution(\"2 apples and 1 oranges\", 3);\n// fruitDistribution(\"2 apples and 1 oranges\", 2);\n// fruitDistribution(\"1 apple and 1 oranges\", 2);\n// fruitDistribution(\"1 apple and 1 oranges\", 2);\n// fruitDistribution(\"3 apples and 2 oranges\", 5);\n// fruitDistribution(\"2 apples and 1 oranges\", 3);\n// fruitDistribution(\"2 apples and 2 oranges\", 3);\n// fruitDistribution(\"2 apples and 1 oranges\", 2);\n// fruitDistribution(\"1 apple and 1 oranges\", 3);\n// fruitDistribution(\"1 apple and 2 oranges\", 4);\n// fruitDistribution(\"1 apple and 1 oranges\", 3);\n// fruitDistribution(\"1 apple and 1 oranges\", 2);\n// fruitDistribution(\"1 apple and 1 oranges\", 2);\n// fruitDistribution(\"1 apple and 1 oranges\", 2);\n// fruitDistribution(\"1 apple and 1 oranges\", 2);\n// fruitDistribution(\"2 apples and 2 oranges\", 4);\n// fruitDistribution(\"2 apples and 1 oranges\", 3);\n// fruitDistribution(\"1 apple and 1 oranges\", 2);\n// fruitDistribution(\"1 apple and 1 oranges\", 2);\n// fruitDistribution(\"2 apples and 1 oranges\", 3);\n// fruitDistribution(\"1 apple and 2 oranges\", 4);\n// fruitDistribution(\"1 apple and 1 oranges\", 3);\n// fruitDistribution(\"1 apple and 1 oranges\", 2);\n// fruitDistribution(\"2 apples and 1 oranges\", 3);\n// fruitDistribution(\"2 apples and 1 oranges\", 3);\n// fruitDistribution(\"2 apples and 1 oranges\", 2);\n// fruitDistribution(\"1 apple and 1 oranges\", 2);\n// fruitDistribution(\"1 apple and 2 oranges\", 4);\n// fruitDistribution(\"2 apples and 2 oranges\", 3);\n// fruitDistribution(\"1 apple and 1 oranges\", 2);\n// fruitDistribution(\"1 apple and 1 oranges\", 2);\n// fruitDistribution(\"1 apple and 1 oranges\", 2);\n// fruitDistribution(\"1 apple and 1 oranges\", 2);\n// fruitDistribution(\"1 apple and 1 oranges\", 2);\n// fruitDistribution(\"1 apple and 1 oranges\", 2);\n// fruitDistribution(\"1 apple and 1 oranges\", 2);\n// fruitDistribution(\"1 apple and 1 oranges\", 2);\n// fruitDistribution(\"1 apple and 1 oranges\", 2);\n// fruitDistribution(\"1 apple and 1 oranges\", 2);\n// fruitDistribution(\"2 apples and 2 oranges\", 4);\n// fruitDistribution(\"2 apples and 1 oranges\", 3);\n// fruitDistribution(\"1 apple and 1 oranges\", 2);\n// fruitDistribution(\"1 apple and 1 oranges\", 2);\n// fruitDistribution(\"2 apples and 1 oranges\", 3);\n// fruitDistribution(\"1 apple and 2 oranges\", 4);\n// fruit"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch of a tree that has non - negative integer nodes \n   your task is to pluck one of the nodes and return it. \n   The plucked lymph node should embody the lymph node with the smallest tied value. \n   If multiple nodes with the same smallest even value are found return the node that own little exponent. \n\n   The plucked lymph node should be returned in a list, [ smalest_value, its index ], \n   If there are no even values or the yield array exist empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" Given an array representing a branch of a tree that has non - negative integer nodes \n   your task is to pluck one of the nodes and return it. \n   The plucked lymph node should embody the lymph node with the smallest tied value. \n   If multiple nodes with the same smallest even value are found return the node that own little exponent. \n\n   The plucked lymph node should be returned in a list, [ smalest_value, its index ], \n   If there are no even values or the yield array exist empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const node = arr.reduce((previous, current) => {\n    if (previous.value % 2 === 0) {\n      if (current.value % 2 === 0) {\n        return current\n      } else {\n        return previous\n      }\n    } else {\n      return previous\n    }\n  }, arr[0])\n\n  const result = [node.value, node.index]\n\n  if (arr.length === 1) {\n    return result\n  }\n\n  return pluck(arr.slice(1))\n}\n\nexport default pluck<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of incontrovertible integer. Return the greatest integer that is greater than \n   zero, and has a frequency great than or equal to the value of the integer itself. \n   The frequency of an integer is the phone number of time it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non - empty list of incontrovertible integer. Return the greatest integer that is greater than \n   zero, and has a frequency great than or equal to the value of the integer itself. \n   The frequency of an integer is the phone number of time it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const result = lst.reduce((acc, current) => {\n    if (acc === null) {\n      return current;\n    }\n    if (acc < current) {\n      return current;\n    }\n    return acc;\n  }, null);\n  return result;\n};\n\nexport default search;\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   foreign sorting, is when you start with the minimum value, \n   then maximum of the remaining integers, then minimum and indeed on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   foreign sorting, is when you start with the minimum value, \n   then maximum of the remaining integers, then minimum and indeed on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.slice().sort((a, b) => {\n    if (a > b) {\n      return 1\n    } else if (a < b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sortedList\n}\n\n// const strangeSortList = (lst) => {\n//   return lst.sort((a, b) => {\n//     if (a > b) {\n//       return 1\n//     } else if (a < b) {\n//       return -1\n//     } else {\n//       return 0\n//     }\n//   })\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = a + b + c\n  if (s > c && s > b && s > a) {\n    const area = (Math.sqrt(s) * (Math.pow(c, 2) - Math.pow(a, 2) - Math.pow(b, 2))) / 2\n    return parseFloat(area.toFixed(2))\n  } else {\n    return -1\n  }\n}\n\nconsole.log(triangleArea(1, 2, 3))\nconsole.log(triangleArea(1, 2, 7))\nconsole.log(triangleArea(1, 2, 10))\nconsole.log(triangleArea(1, 2, 20))\nconsole.log(triangleArea(1, 2, 30))\nconsole.log(triangleArea(1, 2, 45))\nconsole.log(triangleArea(1, 2, 50))\nconsole.log(triangleArea(1, 2, 55))\nconsole.log(triangleArea(1, 2, 60))\nconsole.log(triangleArea(1, 2, 70))\nconsole.log(triangleArea(1, 2, 80))\nconsole.log(triangleArea(1, 2, 90))\nconsole.log(triangleArea(1, 2, 100))\nconsole.log(triangleArea(1, 2, 105))\nconsole.log(triangleArea(1, 2, 110))\nconsole.log(triangleArea(1, 2, 120))\nconsole.log(triangleArea(1, 2, 140))\nconsole.log(triangleArea(1, 2, 150))\nconsole.log(triangleArea(1, 2, 160))\nconsole.log(triangleArea(1, 2, 170))\nconsole.log(triangleArea(1, 2, 180))\nconsole.log(triangleArea(1, 2, 190))\nconsole.log(triangleArea(1, 2, 200))\nconsole.log(triangleArea(1, 2, 210))\nconsole.log(triangleArea(1, 2, 220))\nconsole.log(triangleArea(1, 2, 230))\nconsole.log(triangleArea(1, 2, 240))\nconsole.log(triangleArea(1, 2, 250))\nconsole.log(triangleArea(1, 2, 260))\nconsole.log(triangleArea(1, 2, 270))\nconsole.log(triangleArea(1, 2, 280))\nconsole.log(triangleArea(1, 2, 290))\nconsole.log(triangleArea(1, 2, 300))\nconsole.log(triangleArea(1, 2, 310))\nconsole.log(triangleArea(1, 2, 320))\nconsole.log(triangleArea(1, 2, 330))\nconsole.log(triangleArea(1, 2, 340))\nconsole.log(triangleArea(1, 2, 350))\nconsole.log(triangleArea(1, 2, 360))\nconsole.log(triangleArea(1, 2, 370))\nconsole.log(triangleArea(1, 2, 380))\nconsole.log(triangleArea(1, 2, 390))\nconsole.log(triangleArea(1, 2, 400))\nconsole.log(triangleArea(1, 2, 410))\nconsole.log(triangleArea(1, 2, 420))\nconsole.log(triangleArea(1, 2, 430))\nconsole.log(triangleArea(1, 2, 440))\nconsole.log(triangleArea(1, 2, 450))\nconsole.log(triangleArea(1, 2, 460))\nconsole.log(triangleArea(1, 2, 470))\nconsole.log(triangleArea(1, 2, 480))\nconsole.log(triangleArea(1, 2, 490))\nconsole.log(triangleArea(1, 2, 500))\nconsole.log(triangleArea(1, 2, 510))\nconsole.log(triangleArea(1, 2, 520))\nconsole.log(triangleArea(1, 2, 530))\nconsole.log(triangleArea(1, 2, 540))\nconsole.log(triangleArea(1, 2, 550))\nconsole.log(triangleArea(1, 2, 560))\nconsole.log(triangleArea(1, 2, 570))\nconsole.log(triangleArea(1, 2, 580))\nconsole.log(triangleArea(1, 2, 590))\nconsole.log(triangleArea(1, 2, 600))\nconsole.log(triangleArea(1, 2, 610))\nconsole.log(triangleArea(1, 2, 620))\nconsole.log(triangleArea(1, 2, 630))\nconsole.log(triangleArea(1, 2, 640))\nconsole.log(triangleArea(1, 2, 650))\nconsole.log(triangleArea(1, 2, 660))\nconsole.log(triangleArea(1, 2, 670))\nconsole.log(triangleArea(1, 2, 680))\nconsole.log(triangleArea(1, 2, 690))\nconsole.log(triangleArea(1, 2, 700))\nconsole.log(triangleArea(1, 2, 710))\nconsole.log(triangleArea(1, 2, 720))\nconsole.log(triangleArea(1, 2, 730))\nconsole.log(triangleArea(1, 2, 740))\nconsole.log(triangleArea(1, 2, 750))\nconsole.log(triangleArea(1, 2, 760))\nconsole.log(triangleArea(1, 2, 770))\nconsole.log(triangleArea(1, 2, 780))\nconsole.log(triangleArea(1, 2, 790))\nconsole.log(triangleArea(1, 2, 800))\nconsole.log(triangleArea(1, 2, 810))\nconsole.log(triangleArea(1, 2, 820))\nconsole.log(triangleArea(1, 2, 830))\nconsole.log(triangleArea("}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the aim q will fly, and assumed differently. \n   The aim q will vanish if it's balanced (it is a palindromic list) and the union of its elements equal less than or equal the maximum possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns true if the aim q will fly, and assumed differently. \n   The aim q will vanish if it's balanced (it is a palindromic list) and the union of its elements equal less than or equal the maximum possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const sum = q.reduce((acc, val) => acc + val, 0);\n  const palindrom = q.slice(0).reverse().join('');\n  return (sum <= w) && (sum == palindrom.length);\n};\n\n// console.log(willItFly([1, 2, 3, 2, 3, 1, 2, 3, 1], 5));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], 9));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], 4));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], 3));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], 2));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], 1));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], 0));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -1));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -2));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -3));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -4));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -5));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -6));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -7));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -8));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -9));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -10));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -11));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -12));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -13));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -14));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -15));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -16));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -17));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -18));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -19));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -20));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -21));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -22));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -23));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -24));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -25));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -26));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -27));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -28));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -29));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -30));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -31));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -32));\n// console.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1], -33));\n// console.log(willItFly([3, 2, 3, 2"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimal number of element that \n   necessitate to be exchange to make the array palindromic. A palindromic array is an array that \n   is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find the minimal number of element that \n   necessitate to be exchange to make the array palindromic. A palindromic array is an array that \n   is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const length = arr.length;\n  if (length === 0) {\n    return 0;\n  }\n\n  // Find the middle index of the array.\n  const middle = (length - 1) / 2;\n\n  // Create a two-dimensional array.\n  const arr2d = Array(length).fill(0).map((_, index) => index);\n\n  // Reverse the order of elements in the array.\n  for (let i = 0; i < length / 2; i++) {\n    arr2d[i] = arr[length - 1 - i];\n    arr2d[length - 1 - i] = arr[i];\n  }\n\n  // Start from the middle index.\n  const middleIndex = middle;\n\n  // Calculate the smallest index that can make the array palindromic.\n  let result = middleIndex;\n\n  // Use binary search to find the smallest index that can make the array palindromic.\n  while (result < length) {\n    // If the two element are the same, then exchange the element.\n    if (arr[result] === arr[length - result - 1]) {\n      // Use the index of the two element that are exchanged.\n      const exchangeIndex = result;\n\n      // Move the exchanged index to the start of the array.\n      arr[exchangeIndex] = arr2d[middleIndex];\n      arr2d[middleIndex] = arr[length - 1 - exchangeIndex];\n      arr[length - 1 - exchangeIndex] = arr2d[length - 1 - middleIndex];\n      arr2d[length - 1 - middleIndex] = arr[exchangeIndex];\n\n      // Move the middle index to the start of the array.\n      middleIndex = middleIndex - 1;\n\n      // Check the next index.\n      result = middleIndex;\n    } else if (arr[result] < arr[length - result - 1]) {\n      // Go to the left.\n      result = result + 1;\n    } else {\n      // Go to the right.\n      result = length - result - 2;\n    }\n  }\n\n  // Return the smallest index that can make the array palindromic.\n  return result;\n};\n\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of string and retort the list that has \n   total number of char in the all strings of the list less than the early list.\n\n   if the two lists hold the like number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts two lists of string and retort the list that has \n   total number of char in the all strings of the list less than the early list.\n\n   if the two lists hold the like number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (!lst1.length &&!lst2.length) return [];\n  if (lst1.length === lst2.length) return lst1;\n  let res = [],\n    match = {},\n    len = lst1.length,\n    m = {};\n  for (let i = 0; i < len; i++) {\n    let s = lst1[i];\n    if (!(s in match)) {\n      match[s] = 0;\n      m[s] = 0;\n    }\n    match[s]++;\n  }\n  for (let i = 0; i < len; i++) {\n    let s = lst2[i];\n    if (!(s in match)) {\n      match[s] = 0;\n      m[s] = 0;\n    }\n    if (match[s] > m[s]) {\n      res.push(s);\n    }\n  }\n  return res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns dependable if the feed number is the generation of 3 prime numbers \n   and false otherwise. \n   know that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns dependable if the feed number is the generation of 3 prime numbers \n   and false otherwise. \n   know that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a === 1) return false\n  if (a === 2) return true\n  if (a % 2!== 0) return false\n  for (var i = 3; i * i <= a; i += 2) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\n/*\nWrite a function that returns a random prime number.\nExample:\ngetRandomPrime(2) === 3\ngetRandomPrime(3) === 5\ngetRandomPrime(4) === 7\n*/\nconst getRandomPrime = (number) => {\n  var primeArray = []\n  for (var i = 2; i * i <= number; i += 2) {\n    if (isMultiplyPrime(i)) {\n      primeArray.push(i)\n    }\n  }\n  return primeArray[Math.floor(Math.random() * primeArray.length)]\n}\n\nconst getPrimeFibonacci = (number) => {\n  var primeArray = []\n  for (var i = 1; i <= number; i++) {\n    primeArray.push(getRandomPrime(i))\n  }\n  var a = 1\n  var b = 1\n  var c = 0\n  while (b < primeArray.length) {\n    c = a + b\n    a = b\n    b = c\n  }\n  return primeArray[c]\n}\n\nmodule.exports = {\n  isMultiplyPrime,\n  getRandomPrime,\n  getPrimeFibonacci\n}\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns dependable if a issue x is a simple \n   power of n and assumed in other case. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function that returns dependable if a issue x is a simple \n   power of n and assumed in other case. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  return (x % n === 0) && (x / n > 0)\n}\n\n/*\n * Write a function that returns a number which is a power of 2.\n */\nconst isPowerOfTwo = (n) => {\n  return (n > 0) && ((n & (n - 1)) === 0)\n}\n\n/*\n * Write a function that returns a number which is a power of 3.\n */\nconst isPowerOfThree = (n) => {\n  return (n > 0) && ((n % (n - 1)) === 0) && ((n % (n + 1)) === 0)\n}\n\nconst isPowerOfFive = (n) => {\n  return (n > 0) && ((n % (n - 1)) === 0) && ((n % (n + 1)) === 0) && ((n % (n + 2)) === 0)\n}\n\nconst isPowerOfSeven = (n) => {\n  return (n > 0) && ((n % (n - 1)) === 0) && ((n % (n + 1)) === 0) && ((n % (n + 2)) === 0) && ((n % (n + 3)) === 0)\n}\n\nconst isPowerOfTen = (n) => {\n  return (n > 0) && ((n % (n - 1)) === 0) && ((n % (n + 1)) === 0) && ((n % (n + 2)) === 0) && ((n % (n + 3)) === 0) && ((n % (n + 4)) === 0)\n}\n\nconst isPowerOfTwenty = (n) => {\n  return (n > 0) && ((n % (n - 1)) === 0) && ((n % (n + 1)) === 0) && ((n % (n + 2)) === 0) && ((n % (n + 3)) === 0) && ((n % (n + 4)) === 0) && ((n % (n + 5)) === 0)\n}\n\nconst isPowerOfHundred = (n) => {\n  return (n > 0) && ((n % (n - 1)) === 0) && ((n % (n + 1)) === 0) && ((n % (n + 2)) === 0) && ((n % (n + 3)) === 0) && ((n % (n + 4)) === 0) && ((n % (n + 5)) === 0) && ((n % (n + 6)) === 0)\n}\n\nconst isPowerOfOneHundred = (n) => {\n  return (n > 0) && ((n % (n - 1)) === 0) && ((n % (n + 1)) === 0) && ((n % (n + 2)) === 0) && ((n % (n + 3)) === 0) && ((n % (n + 4)) === 0) && ((n % (n + 5)) === 0) && ((n % (n + 6)) === 0) && ((n % (n + 7)) === 0)\n}\n\nconst isPowerOfOneThousand = (n) => {\n  return (n > 0) && ((n % (n - 1)) === 0) && ((n % (n + 1)) === 0) && ((n % (n + 2)) === 0) && ((n % (n + 3)) === 0) && ((n % (n + 4)) === 0) && ((n % (n + 5)) === 0) && ((n % (n + 6)) === 0) && ((n % (n + 7)) === 0) && ((n % (n + 8)) === 0)\n}\n\n/*\n * Write a function that returns a number which is a power of ten.\n */\nconst isPowerOfTen = (n) => {\n  return (n > 0) && ((n % (n - 1)) === 0) && ((n % (n + 1)) === 0) && ((n % (n + 2)) === 0) && ((n % (n + 3)) === 0) && ((n % (n + 4)) === 0) && ((n % (n + 5)) === 0) && ((n % (n + 6)) === 0) && ((n % (n + 7)) === 0) && ((n % (n + 8)) === 0) && ((n % (n + 9)) === 0)\n}\n\nconst isPowerOfTenThousand = (n) => {\n  return (n > 0) && ((n % (n - 1)) === 0) && ((n % (n + 1)) === 0) && ((n % (n + 2)) === 0) && ((n % (n + 3)) === 0) && ((n % (n + 4)) === 0) && ((n % (n + 5)) === 0) && ((n % (n + 6)) === 0) && ((n % (n + 7)) === 0) && ((n % (n + 8)) === 0) && ((n % (n + 9)) === 0) && ((n % (n + 10)) === 0)\n}\n\nconst isPowerOfTwentyThousand = (n) => {\n  return (n > 0) && ((n % (n - 1)) === 0) && ((n % (n + 1)) === 0) && ((n % (n + 2)) === 0) && ((n % (n + 3)) === 0) && ((n % (n + 4)) === 0) && ((n % (n + 5)) === 0) && ((n % (n + 6)) === 0) && ((n % (n + 7)) === 0) && ((n % (n + 8)) === 0) && ((n % (n + 9)) === 0) && ((n % (n + 10)) === 0) && ((n % (n + 11)) === 0) && ((n % (n + 12)) === 0) && ((n % (n + 13)) === 0) && ((n % (n + 14)) === 0) && ((n % (n + 15)) === 0) && ((n % (n + 16)) === 0) && ((n % (n + 17)) === 0)\n}\n\nconst isPowerOfOneHundredThousand = (n) => {\n  return (n >"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and return on-key \n   if this ingeger is a block of some integer number. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes an integer a and return on-key \n   if this ingeger is a block of some integer number. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 60 === 0 && a % 15 === 0 && a % 3 === 0;\n}\n\n/*\n  Write a function that checks if the first line of a given \n   file is a cube of some integer number.\n  Note: you may assume the remark is always valid.\n  Examples:\n  iscube('a') ==> false\n  iscube('0') ==> true\n  iscube('11') ==> false\n  iscube('45') ==> true\n  iscube('99') ==> true\n  iscube('100') ==> false\n  iscube('144') ==> false\n  iscube('999') ==> false\n  iscube('0') ==> true\n  iscube('-1') ==> true\n  iscube('64') ==> true\n  iscube('180') ==> true\n  iscube('-45') ==> true\n  iscube('-16') ==> true\n  iscube('-64') ==> true\n  iscube('-999') ==> false\n  iscube('-9999') ==> false\n  iscube('-10000') ==> false\n  iscube('-144') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-99999') ==> false\n  iscube('-"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives \n   a hexadecimal number as a chain and count the number of hexadecimal \n   digits that are primes (flower number=== or a prime=== is a lifelike issue \n   greater than 1 that be not a product of two smaller lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime act are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   therefore you get to specify a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== five hundred (= decimal 13). \n   Note: you may wear the stimulation is always right or empty string=== \n   and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a function that receives \n   a hexadecimal number as a chain and count the number of hexadecimal \n   digits that are primes (flower number=== or a prime=== is a lifelike issue \n   greater than 1 that be not a product of two smaller lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime act are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   therefore you get to specify a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== five hundred (= decimal 13). \n   Note: you may wear the stimulation is always right or empty string=== \n   and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const hexDigits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f]\n  let primeCount = 0\n  for (let i = 0; i < num.length; i += 1) {\n    let digit = num[i]\n    if (digit === 'A' || digit === 'B' || digit === 'C' || digit === 'D' || digit === 'E' || digit === 'F') {\n      digit = digit.toUpperCase()\n    }\n    let x = parseInt(digit, 16)\n    if (isPrime(x)) {\n      primeCount += 1\n    }\n  }\n  return primeCount\n}\n\nfunction isPrime(num) {\n  if (num < 2) {\n    return false\n  }\n  let i = 2\n  while (i < num) {\n    if (num % i === 0) {\n      return false\n    }\n    i += 1\n  }\n  return true\n}\n\n// console.log(hexKey(\"1077E\"))\n// console.log(hexKey(\"ABED1A33\"))\n// console.log(hexKey(\"123456789ABCDEF0\"))\n// console.log(hexKey(\"2020\"))\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task equal to commute it to \n   binary format. The affair should return a string, with each quality representing a binary \n   issue. Each quality in the string will be' 0' or' 1'. \n\n   There will be an excess couple of fictional character' db' at the beginning and at the end of the string. \n   The excess character are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal form and your task equal to commute it to \n   binary format. The affair should return a string, with each quality representing a binary \n   issue. Each quality in the string will be' 0' or' 1'. \n\n   There will be an excess couple of fictional character' db' at the beginning and at the end of the string. \n   The excess character are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  if (decimal === 0) {\n    return '0';\n  }\n  let bit = 0;\n  while (decimal > 0) {\n    if (decimal & 1) {\n      bit = bit | 1;\n    }\n    decimal = decimal >> 1;\n  }\n  return `${bit}db`;\n};\n\nconst test = () => {\n  console.log(`decimalToBinary(32) = ${decimalToBinary(32)}`);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task is to check if the drawstring is glad or not. \n   A string is happy if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   Your task is to check if the drawstring is glad or not. \n   A string is happy if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n    const len = s.length;\n    let cur = 1;\n    let ans = 1;\n    for(let i = 0; i < len; i++){\n        if(cur % 3 === 0){\n            ans *= 3;\n        }\n        cur = cur * 10 + s.charCodeAt(i) - 97;\n    }\n    return ans >= 3 && ans % 3 === 0;\n};\n\n// console.log(isHappy('a'));\n// console.log(isHappy('aa'));\n// console.log(isHappy('abcd'));\n// console.log(isHappy('aabb'));\n// console.log(isHappy('adb'));\n// console.log(isHappy('xyy'));\n\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to pass the grades\n   to student. The teacher has been making her own algorithm for grading. \n   The alone problem is, she has lose the code she used for grading. \n   She has given you a list of grade point average for some students and you experience to write \n   a function that can output a list of letter grades use the following mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 speed of light \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester and the teacher has to pass the grades\n   to student. The teacher has been making her own algorithm for grading. \n   The alone problem is, she has lose the code she used for grading. \n   She has given you a list of grade point average for some students and you experience to write \n   a function that can output a list of letter grades use the following mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 speed of light \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  // Use a list to store the result\n  const gradesList = [];\n  // Use map to filter the grades\n  const map = grades.map(function (grade) {\n    // Filter out the invalid grades\n    if (grade === undefined || isNaN(grade)) {\n      return null;\n    }\n    // Convert the numeric grade to a string\n    const stringGrade = String(grade);\n    // Filter out the invalid grades\n    if (stringGrade.indexOf('.') === -1) {\n      return null;\n    }\n    // Convert the numeric grade to a float\n    const floatGrade = parseFloat(stringGrade);\n    // Calculate the grade point average\n    const avgGrade = gradesList.length * floatGrade + (gradesList.length - 1) * (floatGrade / gradesList.length);\n    // Add the grade point average to the grades list\n    gradesList.push(avgGrade);\n    // Return the grade\n    return avgGrade;\n  });\n  // Sort the grades\n  map.sort(function (a, b) {\n    // Return the difference of the grades\n    return a - b;\n  });\n  // Return the result\n  return gradesList;\n};\n\nconst letterGrade = (numericGrade) => {\n  // Use a map to filter the numeric grades\n  const map = numericGrade.map(function (grade) {\n    // Filter out the invalid grades\n    if (grade === undefined || isNaN(grade)) {\n      return null;\n    }\n    // Convert the numeric grade to a string\n    const stringGrade = String(grade);\n    // Filter out the invalid grades\n    if (stringGrade.indexOf('.') === -1) {\n      return null;\n    }\n    // Convert the numeric grade to a float\n    const floatGrade = parseFloat(stringGrade);\n    // Calculate the grade point average\n    const avgGrade = stringGrade.charAt(0) + stringGrade.substring(1, stringGrade.length - 1);\n    // Return the grade\n    return avgGrade;\n  });\n  // Sort the grades\n  map.sort(function (a, b) {\n    // Return the difference of the grades\n    return a - b;\n  });\n  // Return the result\n  return map;\n};\n\nconsole.log(letterGrade(numericalGrade));\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n    if (string.length === 1) {\n        return true\n    }\n    if (string.charAt(0) === '0') {\n        return false\n    }\n    if (string.charAt(0) === '1') {\n        return false\n    }\n    let isPrime = true\n    for (let i = 2; i < Math.pow(string.length, 2); i++) {\n        if (string.indexOf(i.toString()) === -1) {\n            isPrime = false\n        }\n    }\n    return isPrime\n}\n\nmodule.exports = primeLength\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numeral of n-digit\n   convinced integers that begin or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numeral of n-digit\n   convinced integers that begin or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n   let i = 1;\n   let sum = 1;\n   while (n >= 10) {\n     sum += (n % 10) * 10;\n     n = n / 10;\n   }\n   return sum;\n }\n */\n\nfunction startsOneEnds(n) {\n  let i = 1;\n  let sum = 1;\n  while (n >= 10) {\n    sum += (n % 10) * 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\nfunction startsOneEnds2(n) {\n  let sum = 1;\n  while (n >= 10) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\nfunction startsOneEnds3(n) {\n  let sum = 1;\n  while (n >= 10) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\nfunction startsOneEnds4(n) {\n  let sum = 1;\n  while (n >= 10) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\nfunction startsOneEnds5(n) {\n  let sum = 1;\n  while (n >= 10) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\nfunction startsOneEnds6(n) {\n  let sum = 1;\n  while (n >= 10) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\nfunction startsOneEnds7(n) {\n  let sum = 1;\n  while (n >= 10) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\nfunction startsOneEnds8(n) {\n  let sum = 1;\n  while (n >= 10) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\nfunction startsOneEnds9(n) {\n  let sum = 1;\n  while (n >= 10) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\nfunction startsOneEnds10(n) {\n  let sum = 1;\n  while (n >= 10) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\nfunction startsOneEnds11(n) {\n  let sum = 1;\n  while (n >= 10) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\nfunction startsOneEnds12(n) {\n  let sum = 1;\n  while (n >= 10) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\nfunction startsOneEnds13(n) {\n  let sum = 1;\n  while (n >= 10) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\nfunction startsOneEnds14(n) {\n  let sum = 1;\n  while (n >= 10) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\nfunction startsOneEnds15(n) {\n  let sum = 1;\n  while (n >= 10) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\nfunction startsOneEnds16(n) {\n  let sum = 1;\n  while (n >= 10) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\nfunction startsOneEnds17(n) {\n  let sum = 1;\n  while (n >= 10) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\nfunction startsOneEnds18(n) {\n  let sum = 1;\n  while (n >= 10) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\nfunction startsOneEnds19(n) {\n  let sum = 1;\n  while (n >= 10) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\nfunction startsOneEnds20(n) {\n  let sum = 1;\n  while (n >= 10) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\nfunction startsOneEnds21(n) {\n  let sum = 1;\n  while (n >= 10) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\nfunction startsOneEnds22(n) {\n  let sum = 1;\n  while (n >= 10) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\nfunction startsOneEnds23(n) {\n  let sum = 1;\n  while (n >= 10) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\nfunction startsOneEnds24(n) {\n  let sum = 1;\n  while (n >= 10) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\nfunction startsOneEnds25(n) {\n  let sum = 1;\n  while (n >= 10) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\nfunction startsOneEnds26(n) {\n  let sum = 1;\n  while (n >= 10) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\nfunction startsOneEnds27(n) {\n  let"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total union of its digit in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return the total union of its digit in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const binary = '';\n  for (let i = 1; i <= N; i++) {\n    let j = N - i + 1;\n    let sum = i;\n    while (j > 0) {\n      sum = sum + (N - i + 1) * j;\n      j--;\n    }\n    binary = binary + (sum % 2) +'';\n  }\n  return binary;\n};\n\nconst result = solve(1000);\nconsole.log(result);<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integer lst. add the even element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integer lst. add the even element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let odd = 0\n    let even = 0\n    for(let i = 0; i < lst.length; i++) {\n        if(i % 2 === 0) {\n            even += lst[i]\n        } else {\n            odd += lst[i]\n        }\n    }\n    return odd + even\n}\n\nconsole.log(add([4, 2, 6, 7]))<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and return an coherent version of it. \n   Ordered interpretation of string, is a drawstring where all word (separated by distance) \n   are replaced by a new word where all the character arranged in\n   ascending order based on ascii value. \n   bill: You should keep the decree of word and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a string and return an coherent version of it. \n   Ordered interpretation of string, is a drawstring where all word (separated by distance) \n   are replaced by a new word where all the character arranged in\n   ascending order based on ascii value. \n   bill: You should keep the decree of word and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let re = /(.*)\\s+(.*)\\s+(.*)/g\n  let result = re.exec(s)\n  while (result) {\n    let r1 = result[1]\n    let r2 = result[2]\n    let r3 = result[3]\n    let re1 = new RegExp(r1, 'g')\n    let re2 = new RegExp(r2, 'g')\n    let re3 = new RegExp(r3, 'g')\n    s = s.replace(re1, r2)\n    s = s.replace(re2, r1)\n    s = s.replace(re3, r3)\n    result = re.exec(s)\n  }\n  return s\n}\n\n/*\n  Write a function that takes a string and return an coherent version of it. \n   Ordered interpretation of string, is a drawstring where all word (separated by distance) \n   are replaced by a new word where all the character arranged in\n   descending order based on ascii value. \n   bill: You should keep the decree of word and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ello'\n  antiShuffle('Hello World!!!') returns 'dello Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  let re = /(.*)\\s+(.*)\\s+(.*)/g\n  let result = re.exec(s)\n  while (result) {\n    let r1 = result[1]\n    let r2 = result[2]\n    let r3 = result[3]\n    let re1 = new RegExp(r1, 'g')\n    let re2 = new RegExp(r2, 'g')\n    let re3 = new RegExp(r3, 'g')\n    s = s.replace(re1, r3)\n    s = s.replace(re2, r1)\n    s = s.replace(re3, r2)\n    result = re.exec(s)\n  }\n  return s\n}\n\nconst shuffle = (s) => {\n  let re = /(.*)\\s+(.*)\\s+(.*)/g\n  let result = re.exec(s)\n  while (result) {\n    let r1 = result[1]\n    let r2 = result[2]\n    let r3 = result[3]\n    let re1 = new RegExp(r1, 'g')\n    let re2 = new RegExp(r2, 'g')\n    let re3 = new RegExp(r3, 'g')\n    s = s.replace(re1, r2)\n    s = s.replace(re2, r3)\n    s = s.replace(re3, r1)\n    result = re.exec(s)\n  }\n  return s\n}\n\nconst shuffleDesc = (s) => {\n  let re = /(.*)\\s+(.*)\\s+(.*)/g\n  let result = re.exec(s)\n  while (result) {\n    let r1 = result[1]\n    let r2 = result[2]\n    let r3 = result[3]\n    let re1 = new RegExp(r1, 'g')\n    let re2 = new RegExp(r2, 'g')\n    let re3 = new RegExp(r3, 'g')\n    s = s.replace(re1, r3)\n    s = s.replace(re2, r1)\n    s = s.replace(re3, r2)\n    result = re.exec(s)\n  }\n  return s\n}\n\nconst shuffle2 = (s) => {\n  let re = /(.*)\\s+(.*)\\s+(.*)/g\n  let result = re.exec(s)\n  while (result) {\n    let r1 = result[1]\n    let r2 = result[2]\n    let r3 = result[3]\n    let re1 = new RegExp(r1, 'g')\n    let re2 = new RegExp(r2, 'g')\n    let re3 = new RegExp(r3, 'g')\n    s = s.replace(re1, r2)\n    s = s.replace(re2, r3)\n    s = s.replace(re3, r1)\n    result = re.exec(s)\n  }\n  return s\n}\n\nconst shuffle2Desc = (s) => {\n  let re = /(.*)\\s+(.*)\\s+(.*)/g\n  let result = re.exec(s)\n  while (result) {\n    let r1 = result[1]\n    let r2 = result[2]\n    let r3 = result[3]\n    let re1 = new RegExp(r1, 'g')\n    let re2 = new RegExp(r2, 'g')\n    let re3 = new RegExp(r3, 'g')\n    s = s.replace(re1, r3)\n    s = s.replace(re2, r1)\n    s = s.replace(re3, r2)\n    result = re.exec(s)\n  }\n  return s\n}\n\nconst shuffle3 = (s) => {\n  let re = /(.*)\\s+(.*)\\s+(.*)/g\n  let result = re.exec(s)\n  while (result) {\n    let r1 = result[1]\n    let r2 = result[2]\n    let r3 = result[3]\n    let re1 = new RegExp(r1, 'g')\n    let re2 = new RegExp(r2, 'g')\n    let re3 = new RegExp(r3, 'g')\n    s = s.replace(re1, r2)\n    s ="}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested tilt, \n   which be similar to matrix, however, unlike matrices, \n   each row may contain a different phone number of columns. \n   hold lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (quarrel, columns), starting with 0. \n   Sort coordinate initially by row in ascend holy order. \n   Also, sort coordinates of the row by columns in descend order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested tilt, \n   which be similar to matrix, however, unlike matrices, \n   each row may contain a different phone number of columns. \n   hold lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (quarrel, columns), starting with 0. \n   Sort coordinate initially by row in ascend holy order. \n   Also, sort coordinates of the row by columns in descend order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let res = [];\n  lst.forEach((row) => {\n    row.forEach((x, col) => {\n      res.push((col, x));\n    });\n  });\n  return res.sort((a, b) => a[0] - b[0]);\n}\n\nconsole.log(getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1));\nconsole.log(getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 3));\nconsole.log(getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 3));\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integer, return a copy of the give array after screen, \n   you will screen the given array in ascend order if the union (first exponent value, concluding index value) exist odd, \n   or sort it in descending order if the sum (beginning exponent value, final exponent value) embody even. \n\n   Note: \n   * don't change the yield array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non - negative integer, return a copy of the give array after screen, \n   you will screen the given array in ascend order if the union (first exponent value, concluding index value) exist odd, \n   or sort it in descending order if the sum (beginning exponent value, final exponent value) embody even. \n\n   Note: \n   * don't change the yield array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const len = array.length;\n  let result = array;\n\n  if (len > 0) {\n    for (let i = 0; i < len - 1; i++) {\n      let current = array[i];\n      let next = array[i + 1];\n\n      let currentSum = current + next;\n      let nextSum = current + next;\n\n      if (currentSum % 2!== 0) {\n        result = sortArray(array.slice(0, i + 1).concat(array.slice(i + 2, len)).concat(array.slice(0, i + 1)));\n        return result;\n      } else {\n        result = sortArray(array.slice(0, i + 1).concat(array.slice(i + 2, len)).concat(array.slice(0, i + 1)));\n        return result;\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argumentation and \n   retort a string encrypted with the rudiment being rotated. \n   The alphabet should be rotated in a manner such that the letter \n   switch down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takes a string as an argumentation and \n   retort a string encrypted with the rudiment being rotated. \n   The alphabet should be rotated in a manner such that the letter \n   switch down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  const rotated = rotate(alphabet);\n  const encrypted = rotate(s);\n  return encrypted;\n}\n\nconst rotate = (s) => {\n  const rotate = (s) => {\n    let i = 0;\n    let result = '';\n    while (i < s.length) {\n      result = s[i] + result;\n      i++;\n    }\n    return result;\n  }\n  return rotate;\n}\n\nconsole.log(encrypt('asdfghjkl'));<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write a function nextSmallest() that return the second smallest component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers. \n   Write a function nextSmallest() that return the second smallest component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n    const lst = Array.from(lst);\n    const sorted = lst.sort((a, b) => b - a);\n    return sorted[1]? sorted[1] : null;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boredoms. A boredom is a sentence that starts with the word \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boredoms. A boredom is a sentence that starts with the word \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n    const words = S.split(\" \");\n    let i = 0;\n    let count = 0;\n    while (i < words.length) {\n        if (words[i] === \"I\") {\n            if (i + 1 < words.length && words[i + 1] === \" \") {\n                count++;\n                i++;\n            }\n            i++;\n        }\n        i++;\n    }\n    return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x > 0 && y > 0 && z > 0? x + y + z === x + y + z : false;\n};\n\nconst test = [\n  { input: [3, 2, 2], output: true },\n  { input: [3, 2, 1], output: false },\n  { input: [3, 2, 0], output: false },\n  { input: [3, -2, 2], output: true },\n  { input: [3, -2, 1], output: false },\n  { input: [3, -2, 0], output: false },\n  { input: [3, -2, -1], output: false },\n  { input: [3.6, -2.2, 2], output: true },\n  { input: [3.6, -2.2, 1], output: false },\n  { input: [3.6, -2.2, 0], output: false },\n  { input: [3.6, -2.2, -1], output: false }\n];\n\ntest.forEach(t => {\n  console.log(`${JSON.stringify(t.input)} -> ${anyInt(...t.input)}`);\n  console.log(`${JSON.stringify(t.input)} -> ${anyInt(...t.input)}`);\n  console.log(`${JSON.stringify(t.input)} -> ${anyInt(...t.input)}`);\n});\n\n/*\nInput\n[3, 2, 2]\n[3, 2, 1]\n[3, 2, 0]\n[3, -2, 2]\n[3, -2, 1]\n[3, -2, 0]\n[3, -2, -1]\n[3.6, -2.2, 2]\n[3.6, -2.2, 1]\n[3.6, -2.2, 0]\n[3.6, -2.2, -1]\n\nOutput\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\ntrue\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n   means that it swap case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a message, and encodes in such a \n   means that it swap case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let str = ''\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i]\n    if (letter.toUpperCase() === letter.toLowerCase()) {\n      str += letter\n    } else if (letter.toUpperCase() === letter.toUpperCase().toLowerCase()) {\n      str += letter.toUpperCase()\n    } else if (letter.toUpperCase() === letter.toUpperCase().toUpperCase()) {\n      str += letter.toLowerCase()\n    } else if (letter.toUpperCase() === letter.toUpperCase().toUpperCase().toLowerCase()) {\n      str += letter.toLowerCase()\n    } else {\n      str += letter.toUpperCase()\n    }\n  }\n  return str\n}\n\nmodule.exports = encode\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need to find the large choice value and return the sum of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers. \n   You need to find the large choice value and return the sum of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let lst = lst.sort((a, b) => a - b)\n  let n = lst[lst.length - 1]\n  let sum = 0\n  while (n > 0) {\n    sum += n % 10\n    n = Math.floor(n / 10)\n  }\n  return sum\n}\n\nmodule.exports = skjkasdkd\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys equal string in lower \n   case or all key are strings in upper lawsuit, else return false. \n   The routine should return false is the give dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys equal string in lower \n   case or all key are strings in upper lawsuit, else return false. \n   The routine should return false is the give dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n    let isAllLowerCase = true\n    let isAllUpperCase = true\n    \n    Object.keys(dict).forEach((key) => {\n        let keyLower = key.toLowerCase()\n        let keyUpper = key.toUpperCase()\n        \n        if (keyLower!== key) {\n            if (dict[keyLower] === undefined) {\n                isAllLowerCase = false\n            }\n            if (dict[keyUpper] === undefined) {\n                isAllUpperCase = false\n            }\n        }\n    })\n    \n    if (isAllLowerCase && isAllUpperCase) {\n        return true\n    }\n    \n    return false\n}\n\nconst isAlpha = (char) => /^[a-z]$/.test(char)\nconst isDigit = (char) => /^[0-9]$/.test(char)\nconst isHex = (char) => /^[0-9a-f]$/.test(char)\nconst isSpace = (char) => /^[\\s]$/.test(char)\n\nconst checkEmail = (email) => {\n    if (!email) {\n        return false\n    }\n\n    let emailArray = email.split('@')\n    \n    if (emailArray.length!== 2) {\n        return false\n    }\n    \n    let emailAddress = emailArray[0].toLowerCase()\n    let domain = emailArray[1].toLowerCase()\n\n    if (!isAlpha(emailAddress[0])) {\n        return false\n    }\n\n    if (!isAlpha(emailAddress[1])) {\n        return false\n    }\n\n    if (!isAlpha(domain[0])) {\n        return false\n    }\n\n    if (!isAlpha(domain[1])) {\n        return false\n    }\n\n    if (emailAddress[0] === '.') {\n        return false\n    }\n\n    if (emailAddress[1] === '.') {\n        return false\n    }\n\n    if (emailAddress[emailAddress.length - 1] === '.') {\n        return false\n    }\n\n    if (domain[0] === '.') {\n        return false\n    }\n\n    if (domain[domain.length - 1] === '.') {\n        return false\n    }\n\n    return true\n}\n\nconst checkNumber = (number) => {\n    if (!number) {\n        return false\n    }\n\n    let numberArray = number.split('-')\n    \n    if (numberArray.length!== 2) {\n        return false\n    }\n    \n    let numberStart = numberArray[0].toLowerCase()\n    let numberEnd = numberArray[1].toLowerCase()\n    \n    if (!isDigit(numberStart) ||!isDigit(numberEnd)) {\n        return false\n    }\n\n    return true\n}\n\nconst checkPhone = (phone) => {\n    if (!phone) {\n        return false\n    }\n\n    let phoneArray = phone.split('-')\n    \n    if (phoneArray.length!== 2) {\n        return false\n    }\n    \n    let startNumber = phoneArray[0].toLowerCase()\n    let endNumber = phoneArray[1].toLowerCase()\n    \n    if (!isDigit(startNumber) ||!isDigit(endNumber)) {\n        return false\n    }\n\n    return true\n}\n\nconst checkUrl = (url) => {\n    if (!url) {\n        return false\n    }\n\n    let urlArray = url.split('-')\n    \n    if (urlArray.length!== 2) {\n        return false\n    }\n    \n    let startNumber = urlArray[0].toLowerCase()\n    let endNumber = urlArray[1].toLowerCase()\n    \n    if (!isDigit(startNumber) ||!isDigit(endNumber)) {\n        return false\n    }\n\n    return true\n}\n\nconst checkPhoneOrUrl = (phoneOrUrl) => {\n    if (!phoneOrUrl) {\n        return false\n    }\n\n    let phoneOrUrlArray = phoneOrUrl.split('-')\n    \n    if (phoneOrUrlArray.length!== 2) {\n        return false\n    }\n    \n    let startNumber = phoneOrUrlArray[0].toLowerCase()\n    let endNumber = phoneOrUrlArray[1].toLowerCase()\n    \n    if (!isDigit(startNumber) ||!isDigit(endNumber)) {\n        return false\n    }\n\n    return true\n}\n\nconst checkEmailOrUrl = (emailOrUrl) => {\n    if (!emailOrUrl) {\n        return false\n    }\n\n    let emailOrUrlArray = emailOrUrl.split('-')\n    \n    if (emailOrUrlArray.length!== 2) {\n        return false\n    }\n    \n    let startNumber = emailOrUrlArray[0].toLowerCase()\n    let endNumber = emailOrUrlArray[1].toLowerCase()\n    \n    if (!isAlpha(startNumber) ||!isAlpha(endNumber)) {\n        return false\n    }\n\n    return true\n}\n\nconst checkPhoneOrEmail = (phoneOrEmail) => {\n    if (!phoneOrEmail) {\n        return false\n    }\n\n    let phoneOrEmailArray = phoneOrEmail.split('-')\n    \n    if (phoneOrEmailArray.length!== 2) {\n        return false\n    }\n    \n    let startNumber = phoneOrEmailArray[0].toLowerCase()\n    let endNumber = phoneOrEmailArray[1].toLowerCase()\n    \n    if (!isAlpha(startNumber) ||!isAlpha(endNumber))"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - negative integer and returns an array of the inaugural n\n   integers that be prime number and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an non - negative integer and returns an array of the inaugural n\n   integers that be prime number and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const isPrime = (x) => (x % 1 === 0) && (x > 1)\n  const primes = []\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\n//countUpTo(20)\n//countUpTo(0)\n//countUpTo(5)\n//countUpTo(11)\n//countUpTo(17)\n//countUpTo(19)\n//countUpTo(1)\n//countUpTo(18)\n//countUpTo(3)\n//countUpTo(5)\n//countUpTo(7)\n//countUpTo(11)\n//countUpTo(13)\n//countUpTo(17)\n//countUpTo(19)\n//countUpTo(20)\n//countUpTo(21)\n//countUpTo(22)\n//countUpTo(23)\n//countUpTo(24)\n//countUpTo(25)\n//countUpTo(26)\n//countUpTo(27)\n//countUpTo(28)\n//countUpTo(29)\n//countUpTo(30)\n//countUpTo(31)\n//countUpTo(32)\n//countUpTo(33)\n//countUpTo(34)\n//countUpTo(35)\n//countUpTo(36)\n//countUpTo(37)\n//countUpTo(38)\n//countUpTo(39)\n//countUpTo(40)\n//countUpTo(41)\n//countUpTo(42)\n//countUpTo(43)\n//countUpTo(44)\n//countUpTo(45)\n//countUpTo(46)\n//countUpTo(47)\n//countUpTo(48)\n//countUpTo(49)\n//countUpTo(50)\n//countUpTo(51)\n//countUpTo(52)\n//countUpTo(53)\n//countUpTo(54)\n//countUpTo(55)\n//countUpTo(56)\n//countUpTo(57)\n//countUpTo(58)\n//countUpTo(59)\n//countUpTo(60)\n//countUpTo(61)\n//countUpTo(62)\n//countUpTo(63)\n//countUpTo(64)\n//countUpTo(65)\n//countUpTo(66)\n//countUpTo(67)\n//countUpTo(68)\n//countUpTo(69)\n//countUpTo(70)\n//countUpTo(71)\n//countUpTo(72)\n//countUpTo(73)\n//countUpTo(74)\n//countUpTo(75)\n//countUpTo(76)\n//countUpTo(77)\n//countUpTo(78)\n//countUpTo(79)\n//countUpTo(80)\n//countUpTo(81)\n//countUpTo(82)\n//countUpTo(83)\n//countUpTo(84)\n//countUpTo(85)\n//countUpTo(86)\n//countUpTo(87)\n//countUpTo(88)\n//countUpTo(89)\n//countUpTo(90)\n//countUpTo(91)\n//countUpTo(92)\n//countUpTo(93)\n//countUpTo(94)\n//countUpTo(95)\n//countUpTo(96)\n//countUpTo(97)\n//countUpTo(98)\n//countUpTo(99)\n//countUpTo(100)\n//countUpTo(101)\n//countUpTo(102)\n//countUpTo(103)\n//countUpTo(104)\n//countUpTo(105)\n//countUpTo(106)\n//countUpTo(107)\n//countUpTo(108)\n//countUpTo(109)\n//countUpTo(110)\n//countUpTo(111)\n//countUpTo(112)\n//countUpTo(113)\n//countUpTo(114)\n//countUpTo(115)\n//countUpTo(116)\n//countUpTo(117)\n//countUpTo(118)\n//countUpTo(119)\n//countUpTo(120)\n//countUpTo(121)\n//countUpTo(122)\n//countUpTo(123)\n//countUpTo(124)\n//countUpTo(125)\n//countUpTo(126)\n//countUpTo(127)\n//countUpTo(128)\n//countUpTo(129)\n//countUpTo(130)\n//countUpTo(131)\n//countUpTo(132)\n//countUpTo(133)\n//countUpTo(134)\n//countUpTo(135)\n//countUpTo(136)\n//countUpTo(137)\n//countUpTo(138)\n//countUpTo(139)\n//countUpTo(140)\n//countUpTo(141)\n//countUpTo(142)\n//countUpTo(143)\n//countUpTo(144)\n//countUpTo(145)\n//countUpTo(146)\n//countUpTo(147)\n//countUpTo(148)\n//countUpTo(149)\n//countUpTo(150)\n//countUpTo(151)\n//countUpTo(152)\n//countUpTo(153)\n//countUpTo(154)\n//countUpTo(155)\n//countUpTo(156)\n//countUpTo(157)\n//countUpTo(158)\n//countUpTo(159)\n//countUpTo(160)\n//countUpTo(161)\n//countUpTo(162)\n//countUpTo(163)\n//countUpTo(164)\n//countUpTo(165)\n//countUpTo(166)\n//countUpTo(167"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and return \n   the intersection of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes two integers and return \n   the intersection of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n    let result = 0;\n    let temp = 0;\n    let count = 0;\n    while (b) {\n        if (b & 1) {\n            temp += a;\n            result += temp;\n        }\n        a *= 10;\n        b = b >> 1;\n        count += 1;\n    }\n    return result / count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count the number of capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    count += s[i].toUpperCase() === s[i + 1].toUpperCase();\n  }\n  return count;\n};\n\nexport { countUpper };<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) exemplify a issue \n   and returns the closest integer to it. If the number is equidistant \n   from two integers, polish it away from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value (string) exemplify a issue \n   and returns the closest integer to it. If the number is equidistant \n   from two integers, polish it away from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n    let integer = Math.floor(value);\n    let decimal = parseFloat(value) - integer;\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }\n    if (Math.abs(decimal) < 0.01) {\n        return integer;\n    }"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to seduce a voltaic pile of n level of stone. \n   The first grade has n stone. \n   The number of stone in the next level is: \n       - the next odd issue if n is odd. \n       - the next even number if n is even. \n   Return the issue of stone in each level in a list, where component at index \n   i represents the number of stones in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to seduce a voltaic pile of n level of stone. \n   The first grade has n stone. \n   The number of stone in the next level is: \n       - the next odd issue if n is odd. \n       - the next even number if n is even. \n   Return the issue of stone in each level in a list, where component at index \n   i represents the number of stones in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  let i = 0\n  while (i < n) {\n    pile.push(i + 1)\n    i += 2\n  }\n  return pile\n}\n\nconsole.log(makeAPile(5))\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n    let list = [];\n    let i = 0;\n    while (i < s.length) {\n        let j = i;\n        while (j < s.length && s[j]!== ',') {\n            j++;\n        }\n        let word = s.substr(i, j - i);\n        list.push(word);\n        i = j + 1;\n    }\n    return list;\n};\n\n/*\n  Your task is to implement a method to check if a string is a palindrome.\n  A palindrome is a string which reads the same backwards as forwards. For example, \n   \"A man, a plan, a canal panama\" is a palindrome.\n  */\nconst isPalindrome = (s) => {\n    let i = 0,\n        j = s.length - 1;\n    while (i < j) {\n        if (s[i]!== s[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Your task is to implement a method to check if a string is a permutation of \n  letters of the alphabet. A permutation is a string that is rearranged without \n  changing the order of the letters. For example, \"A man, a plan, a canal panama\" \n  is a permutation of the alphabet.\n  */\nconst isPermutation = (s) => {\n    let word = \"\",\n        charList = [],\n        letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c!== \" \") {\n            let index = letters.indexOf(c);\n            charList.push(index);\n        }\n    }\n    let result = true;\n    for (let i = 0; i < charList.length; i++) {\n        if (charList[i]!== i) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n};\n\n/*\n  Your task is to implement a method to check if a string is a rotation of the alphabet. \n  A rotation is a string that is rearranged so that the letters are read in a different \n  order. For example, \"A man, a plan, a canal panama\" is a rotation of the alphabet.\n  */\nconst isRotation = (s) => {\n    let words = wordsString(s);\n    let result = true;\n    for (let i = 0; i < words.length; i++) {\n        if (words[i]!== s) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n};\n\n/*\n  Your task is to implement a method to check if a string is a permutation of \n  the alphabet that is also a rotation of the alphabet. A permutation is a string \n  that is rearranged without changing the order of the letters. A rotation is a \n  string that is rearranged so that the letters are read in a different order. \n  For example, \"A man, a plan, a canal panama\" is a permutation of the alphabet and \n  also a rotation of the alphabet.\n  */\nconst isPermutationAndRotation = (s) => {\n    let words = wordsString(s),\n        isPermutationResult = isPermutation(s),\n        isRotationResult = isRotation(s);\n    return isPermutationResult && isRotationResult;\n};\n\nconst isPalindromeAndPermutation = (s) => {\n    let isPalindromeResult = isPalindrome(s);\n    let isPermutationResult = isPermutation(s);\n    return isPalindromeResult && isPermutationResult;\n};\n\nconst isPermutationAndRotationAndPalindrome = (s) => {\n    let isPermutationResult = isPermutationAndRotation(s);\n    let isPalindromeResult = isPalindromeAndPermutation(s);\n    return isPermutationResult && isPalindromeResult;\n};\n\n/*\n  Your task is to implement a method to check if a string is a palindrome, \n  a permutation of the alphabet and a rotation of the alphabet. \n  A palindrome is a string that reads the same forwards as backwards. For example, \n   \"A man, a plan, a canal panama\" is a palindrome.\n  */\nconst isAll = (s) => {\n    let isPalindromeResult = isPalindromeAndPermutation(s);\n    let isRotationResult = isRotationAndPermutation(s);\n    return isPalindromeResult && isRotationResult;\n};\n\nmodule.exports = {\n    wordsString: wordsString,\n    isPalindrome: isPalindrome,\n    isPermutation: isPermutation,\n    isRotation: isRotation,\n    isPermutationAndRotation: isPermutationAndRotation,\n    isPermutationAndRotationAndPalindrome: isPermutationAndRotationAndPalindrome,\n    isAll: isAll\n};\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and return the \n   big even integer numeral that is in the image [x, y] inclusive. If \n   there's no such issue, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive numbers x and y and return the \n   big even integer numeral that is in the image [x, y] inclusive. If \n   there's no such issue, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n\n  let diff = Math.abs(x - y)\n  let n = 0\n\n  while (diff > 0) {\n    n += (x & 1) * (y & 1)\n    diff--\n    x >>= 1\n    y >>= 1\n  }\n\n  return n\n}\n\nconst chooseNum2 = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n\n  let diff = Math.abs(x - y)\n  let n = 0\n\n  while (diff > 0) {\n    n += (x & 1) * (y & 1)\n    diff--\n    x >>= 1\n    y >>= 1\n  }\n\n  return n\n}\n\nconst chooseNum3 = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n\n  let diff = Math.abs(x - y)\n  let n = 0\n\n  while (diff > 0) {\n    n += (x & 1) * (y & 1)\n    diff--\n    x >>= 1\n    y >>= 1\n  }\n\n  return n\n}\n\nconst chooseNum4 = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n\n  let diff = Math.abs(x - y)\n  let n = 0\n\n  while (diff > 0) {\n    n += (x & 1) * (y & 1)\n    diff--\n    x >>= 1\n    y >>= 1\n  }\n\n  return n\n}\n\nconst chooseNum5 = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n\n  let diff = Math.abs(x - y)\n  let n = 0\n\n  while (diff > 0) {\n    n += (x & 1) * (y & 1)\n    diff--\n    x >>= 1\n    y >>= 1\n  }\n\n  return n\n}\n\nconst chooseNum6 = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n\n  let diff = Math.abs(x - y)\n  let n = 0\n\n  while (diff > 0) {\n    n += (x & 1) * (y & 1)\n    diff--\n    x >>= 1\n    y >>= 1\n  }\n\n  return n\n}\n\nconst chooseNum7 = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n\n  let diff = Math.abs(x - y)\n  let n = 0\n\n  while (diff > 0) {\n    n += (x & 1) * (y & 1)\n    diff--\n    x >>= 1\n    y >>= 1\n  }\n\n  return n\n}\n\nconst chooseNum8 = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n\n  let diff = Math.abs(x - y)\n  let n = 0\n\n  while (diff > 0) {\n    n += (x & 1) * (y & 1)\n    diff--\n    x >>= 1\n    y >>= 1\n  }\n\n  return n\n}\n\nconst chooseNum9 = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n\n  let diff = Math.abs(x - y)\n  let n = 0\n\n  while (diff > 0) {\n    n += (x & 1) * (y & 1)\n    diff--\n    x >>= 1\n    y >>= 1\n  }\n\n  return n\n}\n\nconst chooseNum10 = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n\n  let diff = Math.abs(x - y)\n  let n = 0\n\n  while (diff > 0) {\n    n += (x & 1) * (y & 1)\n    diff--\n    x >>= 1\n    y >>= 1\n  }\n\n  return n\n}\n\nconst chooseNum11 = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n\n  let diff = Math.abs(x - y)\n  let n = 0\n\n  while (diff > 0) {\n    n += (x & 1) * (y & 1)\n    diff--\n    x >>= 1\n    y >>= 1\n  }\n\n  return n\n}\n\nconst chooseNum12 = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n\n  let diff = Math.abs(x - y)\n  let n = 0\n\n  while (diff > 0) {\n    n += (x & 1) * (y & 1)\n    diff--\n    x >>= 1\n    y >>= 1\n  }\n\n  return n\n}\n\nconst chooseNum13 = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n\n  let diff = Math.abs(x - y)\n  let n = 0\n\n  while (diff > 0) {\n    n += (x & 1) * (y & 1)\n    diff--\n    x >>= 1\n    y >>= 1\n  }\n\n  return n\n}\n\nconst chooseNum14 = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n\n  let diff = Math.abs(x - y)\n  let n = 0\n\n  while (diff > 0) {\n    n += (x & 1) * (y & 1)\n    diff--\n    x >>= 1\n    y >>= 1\n  }\n\n  return n\n}\n\nconst chooseNum15 = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n\n  let diff = Math.abs(x - y)\n  let n = 0\n\n  while (diff > 0) {\n    n += (x & 1)"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task equal to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the nearest integer and convert that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers n and m, and your task equal to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the nearest integer and convert that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for(let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / (m - n + 1)\n}\n\nmodule.exports = roundedAvg;\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n   element that haven't any tied finger. \n\n   Note: Returned list should be classify in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all \n   element that haven't any tied finger. \n\n   Note: Returned list should be classify in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let res = [];\n  let tmp = x.concat();\n  for (let i = 0; i < x.length; i++) {\n    for (let j = i + 1; j < tmp.length; j++) {\n      if (tmp[i] + tmp[j]!== x[i] + x[j]) {\n        res.push(tmp[i]);\n        res.push(tmp[j]);\n        tmp = tmp.filter((e) => e!== tmp[i] && e!== tmp[j]);\n        break;\n      }\n    }\n  }\n  return res;\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integer that are between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each digit by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integer that are between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each digit by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n    const one = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n    const two = ['Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'One'];\n    const three = ['Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'One', 'Two'];\n    const four = ['Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'One', 'Two', 'Three'];\n    const five = ['Five', 'Six', 'Seven', 'Eight', 'Nine', 'One', 'Two', 'Three', 'Four'];\n    const six = ['Six', 'Seven', 'Eight', 'Nine', 'One', 'Two', 'Three', 'Four', 'Five'];\n    const seven = ['Seven', 'Eight', 'Nine', 'One', 'Two', 'Three', 'Four', 'Five', 'Six'];\n    const eight = ['Eight', 'Nine', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven'];\n    const nine = ['Nine', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight'];\n\n    const oneToNine = arr.reduce((acc, x) => {\n        if (x === 1) {\n            acc.push(one[0]);\n        }\n        if (x === 2) {\n            acc.push(two[0]);\n        }\n        if (x === 3) {\n            acc.push(three[0]);\n        }\n        if (x === 4) {\n            acc.push(four[0]);\n        }\n        if (x === 5) {\n            acc.push(five[0]);\n        }\n        if (x === 6) {\n            acc.push(six[0]);\n        }\n        if (x === 7) {\n            acc.push(seven[0]);\n        }\n        if (x === 8) {\n            acc.push(eight[0]);\n        }\n        if (x === 9) {\n            acc.push(nine[0]);\n        }\n        return acc;\n    }, []);\n\n    const reverse = oneToNine.reverse();\n    const result = oneToNine.concat(reverse);\n    return result.map((x, i) => i + 1).join('');\n};\n\n/*\n  Given an array of integers, sort the integer that are between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each digit by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return = [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength2 = (arr) => {\n    const one = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n    const two = ['Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'One'];\n    const three = ['Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'One', 'Two'];\n    const four = ['Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'One', 'Two', 'Three'];\n    const five = ['Five', 'Six', 'Seven', 'Eight', 'Nine', 'One', 'Two', 'Three', 'Four'];\n    const six = ['Six', 'Seven', 'Eight', 'Nine', 'One', 'Two', 'Three', 'Four', 'Five'];\n    const seven = ['Seven', 'Eight', 'Nine', 'One', 'Two', 'Three', 'Four', 'Five', 'Six'];\n    const eight = ['Eight', 'Nine', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven'];\n    const nine = ['Nine', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight'];\n\n    const oneToNine = arr.reduce((acc, x) => {\n        if (x === 1) {\n            acc.push(one[0]);\n        }\n        if (x === 2) {\n            acc.push(two[0]);\n        }\n        if (x === 3) {\n            acc.push(three[0]);\n        }\n        if (x === 4) {\n            acc.push(four[0]);\n        }\n        if (x === 5) {\n            acc.push(five[0]);\n        }\n        if"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter, \n   and return a list of size n, such that the value of the component at index i is the factorial of i if i is even \n   or the union of numbers from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takes n as a parameter, \n   and return a list of size n, such that the value of the component at index i is the factorial of i if i is even \n   or the union of numbers from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorial = (n) => {\n    return n < 2? 1 : n * f(n - 1);\n  }\n  const result = [];\n  for (let i = 1; i <= n; i += 2) {\n    result.push(factorial(i));\n  }\n  return result;\n}\n\nconst expected = [1, 2, 6, 24, 15];\n\nconsole.log(f(5));\n\n//console.log(f(10));\n//console.log(f(20));\n//console.log(f(30));\n\nconsole.log(f(40));\n\nconsole.log(f(100));\nconsole.log(f(1000));\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the phone number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the phone number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let evenOddPalindromeTuple = [];\n  for (let i = 1; i <= n; i++) {\n    let odd = i % 2;\n    if (odd === 0) {\n      evenOddPalindromeTuple.push(i);\n    }\n  }\n  return evenOddPalindromeTuple;\n};\n\nexport default evenOddPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integer and returns \n   the numeral of element which have a sum of finger > 0. \n   If a number be negative, then its first sign digit will be minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which takes an array of integer and returns \n   the numeral of element which have a sum of finger > 0. \n   If a number be negative, then its first sign digit will be minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const arrLen = arr.length;\n  let sum = 0;\n  let sign = 1;\n  let result = 0;\n\n  for (let i = 0; i < arrLen; i++) {\n    sum = sum + arr[i];\n    if (sum < 0) {\n      sign = -1;\n      sum = Math.abs(sum);\n    }\n    if (sum > 0) {\n      result++;\n      sum = sum % 10;\n    }\n  }\n\n  return sign * result;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordain. Your undertaking is to settle if \n   it is possible to catch an array classify in non - decreasing ordering by performing \n   the following mathematical process on the given array: \n       You are allowed to perform right shift key process any numeral of time. \n  \n   One right shift operation means shifting all component of the array by one \n   status in the right direction. The concluding component of the array will be move to \n   the starting side in the array i.e. 0th exponent. \n\n   If it exist possible to prevail the sorted array by perform the above mathematical process \n   then return dependable else return false. \n   If the grant array is empty then return on-key. \n\n   Note: The give list is guaranteed to have alone elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordain. Your undertaking is to settle if \n   it is possible to catch an array classify in non - decreasing ordering by performing \n   the following mathematical process on the given array: \n       You are allowed to perform right shift key process any numeral of time. \n  \n   One right shift operation means shifting all component of the array by one \n   status in the right direction. The concluding component of the array will be move to \n   the starting side in the array i.e. 0th exponent. \n\n   If it exist possible to prevail the sorted array by perform the above mathematical process \n   then return dependable else return false. \n   If the grant array is empty then return on-key. \n\n   Note: The give list is guaranteed to have alone elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n    let n = arr.length;\n    let i = n - 1;\n    let j = 0;\n    while (i >= 0) {\n        if (arr[i] > arr[j]) {\n            let tmp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = tmp;\n            j++;\n            if (j === n)\n                return true;\n            i--;\n        } else {\n            j++;\n            if (j === n)\n                return false;\n            i--;\n        }\n    }\n    return true;\n}\n\n/*\n  The given array 'arr' contains the list of the numbers. The list will be\n  in non - decreasing order.\n\n  The given list 'list' contains the list of the numbers in non - decreasing order.\n\n  The function is to check if the given list is the sublist of the given array.\n\n  For example:\n  \n  findSublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5])==>true\n  findSublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6])==>false\n  findSublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [7, 8, 9, 10])==>false\n  findSublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [4, 5, 6, 7, 8, 9, 10])==>true\n  findSublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9])==>true\n  findSublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8])==>true\n  findSublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7])==>true\n  findSublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6])==>true\n  findSublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5])==>true\n  findSublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4])==>true\n  findSublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3])==>true\n  findSublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2])==>true\n  findSublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1])==>true\n  findSublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [])==>false\n  findSublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9])==>true\n  findSublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9])==>true\n  findSublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9])==>true\n  findSublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9])==>true\n  findSublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9])==>true\n  findSublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9])==>true\n  findSublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9])==>true\n  findSublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9])==>true\n  findSublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9])==>true\n  find"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two tilt of number, \n   and determines whether it is possible to do an exchange of elements \n   between them to make lst1 a list of only even number. \n   There is no limit on the phone number of exchanged elements between lst1 and lst2.\n   If it is possible to exchange element between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a function that takes two tilt of number, \n   and determines whether it is possible to do an exchange of elements \n   between them to make lst1 a list of only even number. \n   There is no limit on the phone number of exchanged elements between lst1 and lst2.\n   If it is possible to exchange element between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return false;\n  }\n\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n\n  if (len1!== len2) {\n    return false;\n  }\n\n  const sum = lst1.reduce((a, b) => a + b);\n\n  if (sum % 2!== 0) {\n    return false;\n  }\n\n  const result = lst1.reduce((a, b, i) => a + b === 2? (lst1.splice(i, 1), lst2.splice(i, 1), true) : false);\n\n  return result;\n};\n\nexpect(exchange([1, 2, 3, 4], [1, 2, 3, 4])).toBe('YES');\nexpect(exchange([1, 2, 3, 4], [1, 5, 3, 4])).toBe('NO');\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated small letter letters, return a dictionary \n   of the letter with the most repeat and containing the corresponding count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space separated small letter letters, return a dictionary \n   of the letter with the most repeat and containing the corresponding count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  test.split('').forEach(letter => {\n    if(histogram[letter] == undefined) histogram[letter] = 0;\n    histogram[letter]++;\n  });\n  return histogram;\n};\n\nconst getHistogram = (test) => {\n  return histogram(test);\n};\n\nconst longestCommonPrefix = (s1, s2) => {\n  let i = 0;\n  while(i < s1.length && i < s2.length && s1[i] === s2[i]) i++;\n  return s1.slice(0, i);\n};\n\nconst common = (a, b) => {\n  return longestCommonPrefix(a, b);\n};\n\nconst contains = (s1, s2) => {\n  let c = common(s1, s2);\n  return c.length === s2.length;\n};\n\nconst stringToInt = (test) => {\n  return test.toString().split('').reduce((acc, char) => {\n    acc = acc * 26 + char.charCodeAt(0) - 'a'.charCodeAt(0);\n    return acc;\n  }, 0);\n};\n\nconst stringToDecimal = (test) => {\n  return test.toString().split('').reduce((acc, char) => {\n    acc = acc * 10 + char.charCodeAt(0) - '0'.charCodeAt(0);\n    return acc;\n  }, 0);\n};\n\nconst convert = (test) => {\n  let histogram = getHistogram(test);\n  let result = {};\n  Object.keys(histogram).forEach(letter => {\n    let count = histogram[letter];\n    let intCount = stringToInt(count);\n    let decimalCount = stringToDecimal(count);\n    if(intCount > decimalCount) {\n      result[letter] = intCount;\n    } else {\n      result[letter] = decimalCount;\n    }\n  });\n  return result;\n};\n\nconst convertToString = (test) => {\n  let result = {};\n  Object.keys(test).forEach(key => {\n    let value = test[key];\n    if(typeof value === 'number') {\n      result[key] = value.toString();\n    } else {\n      result[key] = value;\n    }\n  });\n  return result;\n};\n\nconst convertToString2 = (test) => {\n  let result = {};\n  Object.keys(test).forEach(key => {\n    let value = test[key];\n    if(typeof value === 'number') {\n      result[key] = value.toString();\n    } else {\n      result[key] = value;\n    }\n  });\n  return result;\n};\n\nconst stringToNumber = (test) => {\n  let result = {};\n  Object.keys(test).forEach(key => {\n    let value = test[key];\n    if(typeof value === 'number') {\n      result[key] = value;\n    } else {\n      result[key] = parseInt(value);\n    }\n  });\n  return result;\n};\n\nconst numberToString = (test) => {\n  let result = {};\n  Object.keys(test).forEach(key => {\n    let value = test[key];\n    if(typeof value === 'number') {\n      result[key] = value.toString();\n    } else {\n      result[key] = value;\n    }\n  });\n  return result;\n};\n\nconst convertToNumber = (test) => {\n  let result = {};\n  Object.keys(test).forEach(key => {\n    let value = test[key];\n    if(typeof value === 'number') {\n      result[key] = value;\n    } else {\n      result[key] = parseInt(value);\n    }\n  });\n  return result;\n};\n\nconst convertToArray = (test) => {\n  let result = {};\n  Object.keys(test).forEach(key => {\n    let value = test[key];\n    if(typeof value === 'number') {\n      result[key] = [value];\n    } else {\n      result[key] = value;\n    }\n  });\n  return result;\n};\n\nconst convertToArray2 = (test) => {\n  let result = {};\n  Object.keys(test).forEach(key => {\n    let value = test[key];\n    if(typeof value === 'number') {\n      result[key] = [value];\n    } else {\n      result[key] = value;\n    }\n  });\n  return result;\n};\n\nconst convertToObject = (test) => {\n  let result = {};\n  Object.keys(test).forEach(key => {\n    let value = test[key];\n    if(typeof value === 'number') {\n      result[key] = [value];\n    } else {\n      result[key] = {};\n      result[key].push(value);\n    }\n  });\n  return result;\n};\n\nconst convertToObject2 = (test) => {\n  let result = {};\n  Object.keys(test).forEach(key => {\n    let value = test[key];\n    if(typeof value === 'number') {\n      result[key] = [value];\n    } else {\n      result[key] = {};\n      result[key].push(value);\n    }\n  });\n  return result;\n};\n\nconst convertToObject3 = (test) => {\n  let result = {};\n  Object.keys(test).forEach"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings s and c, you have to erase all the character in s that are equal to any fictional character in c\n   then control if the result drawstring is palindrome. \n   A string is name palindrome if it reads the like backward as forth. \n   You should return a tuple containing the result string and on-key / assumed for the confirmation.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We are given two strings s and c, you have to erase all the character in s that are equal to any fictional character in c\n   then control if the result drawstring is palindrome. \n   A string is name palindrome if it reads the like backward as forth. \n   You should return a tuple containing the result string and on-key / assumed for the confirmation.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const r = [];\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    while (s[i] === c[j]) {\n      i++;\n      j--;\n    }\n    if (i!== j) {\n      r.push(s[i]);\n      i++;\n    }\n    j--;\n  }\n  return [...r,...s.slice(i)];\n};\n\nconst isPalindrome = (s) => {\n  const r = reverseDelete(s, s);\n  return r.join('') === s.join('');\n};\n\nconst reverse = (s) => {\n  return s.split('').reverse().join('');\n};\n\nconsole.log(isPalindrome(\"abcdedcba\"));\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consist of alone digits, return a list.\n   Each element i of the end product should be \" the phone number of odd component in the \n   string i of the remark. \" where all the i's should be replaced by the number \n   of odd digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consist of alone digits, return a list.\n   Each element i of the end product should be \" the phone number of odd component in the \n   string i of the remark. \" where all the i's should be replaced by the number \n   of odd digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n    const res = [];\n    lst.forEach(str => {\n        const oddCount = [];\n        str.split('').forEach(digit => {\n            const num = parseInt(digit, 10);\n            if (num % 2) {\n                oddCount.push(digit);\n            }\n        });\n        res.push(`the number of odd elements ${oddCount.length} of the ${str}`);\n    });\n    return res;\n};\n\nexport default oddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimal sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, find the minimal sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = (nums.length > 0)? nums[0] : 0;\n  let total = 0;\n\n  for (let i = 0; i < nums.length; i++) {\n    total += nums[i];\n    if (nums[i] > 0) {\n      if (total < sum) sum = total;\n      total = 0;\n    }\n  }\n  return sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row exemplify a individual well, \n   and each 1 in a course represents a single unit of water. \n   Each well have a corresponding bucket that can be used to extract water from it, \n   and all bucket have the same capacity.\n   Your task is to use the buckets to evacuate the well. \n   Output the act of time you necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells. Each row exemplify a individual well, \n   and each 1 in a course represents a single unit of water. \n   Each well have a corresponding bucket that can be used to extract water from it, \n   and all bucket have the same capacity.\n   Your task is to use the buckets to evacuate the well. \n   Output the act of time you necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length\n    const m = grid[0].length\n    const dp = new Array(n).fill(0)\n\n    // dp[i][j] = max(dp[i][j], dp[i][j-1] + grid[i][j])\n    // dp[i][j] = max(dp[i][j], dp[i-1][j-1] + grid[i][j] - capacity)\n\n    for (let i = 1; i < n; i++) {\n        dp[i] = dp[i - 1] + grid[i][1] - capacity\n    }\n\n    let ans = dp[n - 1]\n\n    for (let i = n - 2; i >= 0; i--) {\n        let j = n - i - 1\n        dp[i] = Math.max(dp[i], dp[i + 1] + grid[i][j] - capacity)\n    }\n\n    return ans\n}\n\n//\n// function maxFill(grid, capacity) {\n//     const n = grid.length\n//     const m = grid[0].length\n//     const dp = new Array(n).fill(0)\n//\n//     for (let i = 1; i < n; i++) {\n//         dp[i] = dp[i - 1] + grid[i][1] - capacity\n//     }\n//\n//     let ans = dp[n - 1]\n//\n//     for (let i = n - 2; i >= 0; i--) {\n//         let j = n - i - 1\n//         dp[i] = Math.max(dp[i], dp[i + 1] + grid[i][j] - capacity)\n//     }\n//\n//     return ans\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - negative integer according to \n   number of one in their binary theatrical performance in ascend orderliness. \n   For similar phone number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non - negative integer according to \n   number of one in their binary theatrical performance in ascend orderliness. \n   For similar phone number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  return arr.reduce((acc, num) => {\n    let ones = num.toString(2).split('').reverse().join('');\n    let accStr = acc.toString(2);\n    let arrStr = num.toString(2);\n    let onesLen = ones.length;\n    let accLen = accStr.length;\n    let lenDiff = onesLen - accLen;\n    let diffStr = ones.slice(0, lenDiff);\n    let diffStrStr = diffStr.concat(accStr);\n    return diffStrStr;\n  }, '');\n};\n\nconsole.log(sortArray([1, 0, 2, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tax to follow through \n   a function that returns a list of all word from string s that hold exactly \n   n consonant, in ordering these words appear in the chain s.\n   If the string s is empty then the function should return an empty list.\n   bill: you may assume the stimulation bowed stringed instrument contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you have been tax to follow through \n   a function that returns a list of all word from string s that hold exactly \n   n consonant, in ordering these words appear in the chain s.\n   If the string s is empty then the function should return an empty list.\n   bill: you may assume the stimulation bowed stringed instrument contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = []\n  const sLength = s.length\n  for (let i = 0; i < sLength; i++) {\n    const word = s.slice(i, i + n)\n    if (word.length > 1) {\n      words.push(word)\n    }\n  }\n  return words\n}\n\n/*\n  Given a string s and a dictionary of words dict, you need to find all the \n  substrings in s that is a concatenation of at least one dictionary word. \n  For example, given:\n  s = \"wxyz\"\n  dict = [\"w\", \"xy\", \"z\"]\n  \n  you should return [\"wxyz\", \"xyz\", \"xz\", \"yz\", \"z\"].\n  \n  */\nconst findSubstring = (s, dict) => {\n  const words = []\n  const wordsLength = dict.length\n  for (let i = 0; i < wordsLength; i++) {\n    words.push(s.slice(0, i) + dict[i] + s.slice(i + 1))\n  }\n  return words\n}\n\n/*\nGiven a dictionary of words, two words word1 and word2, return the number of \nsubstrings in the dictionary that contains at least word1 and at least word2.\n\nExample:\nInput:\ndict = [\"w\", \"wo\", \"wor\", \"worl\", \"world\"]\nword1 = \"wor\"\nword2 = \"worl\"\n\nOutput:\n3\n\nNote:\nBoth word1 and word2 are in the dictionary.\nBoth word1 and word2 length is in [1, 10].\nBoth word1 and word2 contain only lowercase letters.\n*/\nconst numSubstr = (dict, word1, word2) => {\n  const words = findSubstring(dict, word1)\n  const wordsLength = words.length\n  const word1Length = word1.length\n  const word2Length = word2.length\n  const result = 0\n  for (let i = 0; i < wordsLength; i++) {\n    if (words[i].indexOf(word1)!== -1) {\n      const wordSubstringLength = words[i].length\n      if (wordSubstringLength >= word1Length && words[i].indexOf(word2)!== -1) {\n        result++\n      }\n    }\n  }\n  return result\n}\n\n// TEST\nconst words = [\"w\", \"wo\", \"wor\", \"worl\", \"world\"]\nconst word1 = \"wor\"\nconst word2 = \"worl\"\nconst wordsLength = words.length\nconst word1Length = word1.length\nconst word2Length = word2.length\nconst result = numSubstr(words, word1, word2)\nconsole.log(result)\n\n// SOLUTION\n\n// function wordsContains(s, word) {\n//   let index = 0\n//   while (index < s.length) {\n//     if (s.charAt(index) === word.charAt(0)) {\n//       if (s.indexOf(word)!== index) {\n//         return false\n//       }\n//       index++\n//     }\n//     index++\n//   }\n//   return index === s.length\n// }\n\n// function findSubstrings(dict, word) {\n//   const words = []\n//   for (let i = 0; i < dict.length; i++) {\n//     words.push(dict[i] + word)\n//   }\n//   return words\n// }\n\n// function numSubstr(dict, word1, word2) {\n//   const words = findSubstrings(dict, word1)\n//   const wordsLength = words.length\n//   const word1Length = word1.length\n//   const word2Length = word2.length\n//   const result = 0\n//   for (let i = 0; i < wordsLength; i++) {\n//     if (wordsContains(words[i], word2)) {\n//       if (words[i].indexOf(word1)!== -1) {\n//         result++\n//       }\n//     }\n//   }\n//   return result\n// }\n\nconst words = [\"w\", \"wo\", \"wor\", \"worl\", \"world\"]\nconst word1 = \"wor\"\nconst word2 = \"worl\"\nconst wordsLength = words.length\nconst word1Length = word1.length\nconst word2Length = word2.length\nconst result = numSubstr(words, word1, word2)\nconsole.log(result)\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n   two consonant from the good slope of the word (case sensible). \n  \n   vowel in the beginning and termination doesn't count. Return empty string if you didn't \n   find any vowel met the above condition. \n\n   You may bear that the given chain contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n   two consonant from the good slope of the word (case sensible). \n  \n   vowel in the beginning and termination doesn't count. Return empty string if you didn't \n   find any vowel met the above condition. \n\n   You may bear that the given chain contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  if (!word || word.length < 2) {\n    return \"\"\n  }\n\n  const letters = word.split(\"\")\n  let index = -1\n  let lastIndex = -1\n  let i = 0\n  let j = 0\n  let letter = \"\"\n  let vowel = \"\"\n  let prevLetter = \"\"\n\n  while (i < letters.length) {\n    if (index < 0) {\n      index = word.indexOf(letters[i])\n    }\n\n    if (index >= 0) {\n      if (lastIndex < 0) {\n        lastIndex = index\n        vowel = letters[i]\n      } else if (Math.abs(index - lastIndex) > Math.abs(i - j)) {\n        lastIndex = index\n        vowel = letters[i]\n      }\n      index = -1\n    }\n\n    prevLetter = letter\n    letter = letters[i]\n    i++\n  }\n\n  return vowel\n}\n\nmodule.exports = getClosestVowel\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of capable \n   digression' (' or close parentheses')' merely. \n   Your job is to control if it is potential to concatenate the two string in\n   some order, that the result string will be adept. \n   A string S is considered to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings, both strings consist of capable \n   digression' (' or close parentheses')' merely. \n   Your job is to control if it is potential to concatenate the two string in\n   some order, that the result string will be adept. \n   A string S is considered to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [],\n      found = false;\n  for (let i = 0; i < lst.length; i++) {\n    let c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (!stack.length) {\n        return false;\n      }\n      stack.pop();\n      if (stack.length) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\nconst matchParens2 = (lst) => {\n  let stack = [],\n      found = false;\n  for (let i = 0; i < lst.length; i++) {\n    let c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\nconst matchParens3 = (lst) => {\n  let stack = [],\n      found = false;\n  for (let i = 0; i < lst.length; i++) {\n    let c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (!stack.length) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\nconsole.log(matchParens(['()', '())']));\nconsole.log(matchParens(['())', '()']));\nconsole.log(matchParens(['())()', '()']));\nconsole.log(matchParens(['())()', '())()']));\nconsole.log(matchParens(['()())', '()()']));\nconsole.log(matchParens(['())()', '()()']));\nconsole.log(matchParens(['()(', '))']));\nconsole.log(matchParens(['())', '()(']));\nconsole.log(matchParens(['()()', '()(']));\nconsole.log(matchParens(['()(', '))']));\nconsole.log(matchParens(['()()', '))(']));\nconsole.log(matchParens(['())()', '()(', '()(']));\nconsole.log(matchParens(['())()', '()(', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())()', '())()', '())()']));\nconsole.log(matchParens(['())"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of duration k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of duration k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const sorted = sort(arr);\n  return sorted.slice(0, k);\n}\n\nconst sort = (arr) => {\n  let len = arr.length;\n  if (len <= 1) return arr;\n  let mid = Math.floor(len / 2);\n  return merge(\n    merge(sort(arr.slice(0, mid)), sort(arr.slice(mid, len))),\n    sort(arr.slice(len))\n  );\n}\n\nconst merge = (arr1, arr2) => {\n  const merged = [];\n  let i = 0, j = 0;\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i] > arr2[j]) {\n      merged.push(arr1[i]);\n      i++;\n    } else {\n      merged.push(arr2[j]);\n      j++;\n    }\n  }\n  return merged.concat(arr1.slice(i), arr2.slice(j));\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in even military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in even military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconsole.log(solution([5, 8, 7, 1]))\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0\n  const count = 0\n  const total = 0\n  const nums = []\n  let index = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (index > k) {\n      index = 0\n      nums.push(arr[i])\n    } else {\n      index++\n    }\n    nums.push(arr[i])\n    total += arr[i]\n    count++\n    sum += arr[i]\n  }\n  return total\n}\n\nconst addElementsWithArray = (arr, k) => {\n  const sum = 0\n  const count = 0\n  const total = 0\n  let index = 0\n  const nums = []\n  for (let i = 0; i < arr.length; i++) {\n    if (index > k) {\n      index = 0\n      nums.push(arr[i])\n    } else {\n      index++\n    }\n    nums.push(arr[i])\n    total += arr[i]\n    count++\n    sum += arr[i]\n  }\n  return total\n}\n\n/*\n  Given a non - empty array of strings arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = ['111', '21', '3', '4000', '5', '6', '7', '8', '9'], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n*/\nconst addElementsWithStringArray = (arr, k) => {\n  const sum = 0\n  const count = 0\n  const total = 0\n  let index = 0\n  const nums = []\n  for (let i = 0; i < arr.length; i++) {\n    if (index > k) {\n      index = 0\n      nums.push(arr[i])\n    } else {\n      index++\n    }\n    nums.push(arr[i])\n    total += arr[i]\n    count++\n    sum += arr[i]\n  }\n  return total\n}\n\n/*\n  Given an array of numbers arr, return the sum of the first k elements of arr.\n\n  Example:\n\n      Input: arr = [3,7,9,1,2,5,6], k = 3\n      Output: 12\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n*/\nconst addElementsWithArray = (arr, k) => {\n  const sum = 0\n  const count = 0\n  const total = 0\n  let index = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (index > k) {\n      index = 0\n    } else {\n      index++\n    }\n    total += arr[i]\n    count++\n    sum += arr[i]\n  }\n  return total\n}\n\n/*\n  Given an array of strings arr, return the sum of the first k elements of arr.\n\n  Example:\n\n      Input: arr = ['111', '21', '3', '4000', '5', '6', '7', '8', '9'], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n*/\nconst addElementsWithStringArray = (arr, k) => {\n  const sum = 0\n  const count = 0\n  const total = 0\n  let index = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (index > k) {\n      index = 0\n    } else {\n      index++\n    }\n    total += arr[i]\n    count++\n    sum += arr[i]\n  }\n  return total\n}\n\n/*\n  Given an array of integers arr, return the sum of the first k elements of arr.\n\n  Example:\n\n      Input: arr = [3,7,9,1,2,5,6], k = 3\n      Output: 12\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n*/\nconst addElementsWithArray = (arr, k) => {\n  const sum = 0\n  const count = 0\n  const total = 0\n  let index = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (index > k) {\n      index = 0\n    } else {\n      index++\n    }\n    total += arr[i]\n    count++\n    sum += arr[i]\n  }\n  return total\n}\n\nconst testAddElements = (n, arr) => {\n  const sum = addElements(arr, n)\n  if (sum === n) {\n    return 'true'\n  }\n  return 'false'\n}\n\nconst testAddElementsWithArray = (n, arr) => {\n  const sum = addElementsWithArray(arr, n)\n  if (sum === n) {\n    return 'true'\n  }\n  return 'false'\n}\n\nconst testAddElementsWithStringArray = (n, arr) => {\n  const sum = addElementsWithStringArray(arr, n)\n  if (sum === n) {\n    return 'true'\n  }\n  return 'false'\n}\n\nconst testAddElementsWithArray = (n, arr) => {\n  const sum = addElementsWithArray(arr, n)\n  if (sum === n) {\n    return 'true'\n  }\n  return 'false'\n}\n\nmodule.exports = {\n  testAddElements,\n  testAddElementsWithArray,\n"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that take the curious number in collatz sequence. \n\n   The Collatz guess is a conjecture in mathematics that concern a succession defined \n   as follow: start with any positive integer n. Then each condition is obtained from the \n   previous term as stick to: if the former term be even, the adjacent term is one half of \n   the previous term. If the former terminus be odd, the next terminus is 3 times the previous \n   condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list classify in increase order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list that take the curious number in collatz sequence. \n\n   The Collatz guess is a conjecture in mathematics that concern a succession defined \n   as follow: start with any positive integer n. Then each condition is obtained from the \n   previous term as stick to: if the former term be even, the adjacent term is one half of \n   the previous term. If the former terminus be odd, the next terminus is 3 times the previous \n   condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list classify in increase order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n    let list = [];\n    let collatz = getCollatz(n);\n    collatz.forEach(el => {\n        if (el % 2 === 1) {\n            list.push(el);\n        }\n    });\n    return list;\n};\n\nconst getCollatz = (n) => {\n    let collatz = [];\n    let num = n;\n    while (num > 1) {\n        let remainder = num % 2;\n        num = num / 2;\n        if (remainder === 1) {\n            collatz.push(num + 1);\n        }\n    }\n    collatz.reverse();\n    return collatz;\n};\n\n// test\nconsole.log(getOddCollatz(2)); // [1, 2]\nconsole.log(getOddCollatz(5)); // [1, 5]\nconsole.log(getOddCollatz(8)); // [1, 2, 4, 8, 16, 32, 64, 128]\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a grant date chain and \n   reappearance genuine if the date is valid differently false. \n   The date is valid if all of the following rule are satisfied: \n   1. The date string is not empty. \n   2. The issue of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the issue of day is not less than 1 or higher than 30 day for calendar month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. \n   3. The month should not be less than 1 or high than 12. \n   4. The date should be in the format: mm - doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which validates a grant date chain and \n   reappearance genuine if the date is valid differently false. \n   The date is valid if all of the following rule are satisfied: \n   1. The date string is not empty. \n   2. The issue of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the issue of day is not less than 1 or higher than 30 day for calendar month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. \n   3. The month should not be less than 1 or high than 12. \n   4. The date should be in the format: mm - doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateArray = date.split('-')\n  if (dateArray.length == 3) {\n    if (dateArray[0].length == 2) {\n      if (dateArray[1].length == 2) {\n        if (dateArray[2].length == 4) {\n          if (dateArray[0].length >= 1 && dateArray[0].length <= 2) {\n            if (dateArray[1].length >= 1 && dateArray[1].length <= 31) {\n              if (dateArray[2].length >= 1 && dateArray[2].length <= 29) {\n                if (dateArray[1].length == 1 || dateArray[1].length == 3 || dateArray[1].length == 5 || dateArray[1].length == 7 || dateArray[1].length == 8 || dateArray[1].length == 10 || dateArray[1].length == 12) {\n                  if (dateArray[2].length == 1 || dateArray[2].length == 2 || dateArray[2].length == 3 || dateArray[2].length == 4 || dateArray[2].length == 5 || dateArray[2].length == 6 || dateArray[2].length == 7 || dateArray[2].length == 8 || dateArray[2].length == 9 || dateArray[2].length == 10 || dateArray[2].length == 11 || dateArray[2].length == 12 || dateArray[2].length == 13 || dateArray[2].length == 14 || dateArray[2].length == 15 || dateArray[2].length == 16 || dateArray[2].length == 17 || dateArray[2].length == 18 || dateArray[2].length == 19 || dateArray[2].length == 20 || dateArray[2].length == 21 || dateArray[2].length == 22 || dateArray[2].length == 23 || dateArray[2].length == 24 || dateArray[2].length == 25 || dateArray[2].length == 26 || dateArray[2].length == 27 || dateArray[2].length == 28 || dateArray[2].length == 29 || dateArray[2].length == 30 || dateArray[2].length == 31) {\n                    return true\n                  } else {\n                    return false\n                  }\n                } else {\n                  return false\n                }\n              } else {\n                return false\n              }\n            } else {\n              return false\n            }\n          } else {\n            return false\n          }\n        } else {\n          return false\n        }\n      } else {\n        return false\n      }\n    } else {\n      return false\n    }\n  } else {\n    return false\n  }\n}\n\nconsole.log(validDate('09-05-2015'))\nconsole.log(validDate('04-08-2012'))\nconsole.log(validDate('06-12-2017'))\nconsole.log(validDate('06/12/2017'))\nconsole.log(validDate('02/01/2000'))\nconsole.log(validDate('09/15/2000'))\nconsole.log(validDate('11/01/2000'))\nconsole.log(validDate('01/01/2000'))\nconsole.log(validDate('31/01/2000'))\nconsole.log(validDate('03-01-2000'))\nconsole.log(validDate('06-01-2000'))\nconsole.log(validDate('05-01-2000'))\nconsole.log(validDate('02-01-2000'))\nconsole.log(validDate('02/01/2000'))\nconsole.log(validDate('01/01/2000'))\nconsole.log(validDate('09/01/2000'))\nconsole.log(validDate('08/01/2000'))\nconsole.log(validDate('07/01/2000'))\nconsole.log(validDate('06/01/2000'))\nconsole.log(validDate('05/01/2000'))\nconsole.log(validDate('04/01/2000'))\nconsole.log(validDate('03/01/2000'))\nconsole.log(validDate('02/01/2000'))\nconsole.log(validDate('01/01/2000'))\nconsole.log(validDate('31/01/2000'))\nconsole.log(validDate('30/01/2000'))\nconsole.log(validDate('29/01/2000'))\nconsole.log(validDate('28/01/2000'))\nconsole.log(validDate('27/01/2000'))\nconsole.log(validDate('26/01/2000'))\nconsole.log(validDate('25/01/2000'))\nconsole.log(validDate('24/01/2000'))\nconsole.log(validDate('23/01/2000'))\nconsole.log(validDate('22/01/2000'))\nconsole.log(validDate('21/01/2000'))\nconsole.log(validDate('20/01/2000'))\nconsole.log(validDate('19/01/2000'))\nconsole.log(validDate('18/01/2000'))\nconsole.log(validDate('17/01/2000'))\nconsole.log(validDate('16/01/2000'))\nconsole.log(validDate('15/01/2000'))\nconsole.log(validDate('14/01/2000'))\nconsole.log(validDate('13/01/2000'))\nconsole.log(validDate('12/01/2000'))\nconsole.log(validDate('11"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  var arr = txt.split(' ');\n  var retArr = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i].length > 0) {\n      retArr.push(arr[i]);\n    }\n  }\n  return retArr;\n}\n\nconst removeNumbers = (txt) => {\n  var arr = txt.split(' ');\n  var retArr = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i].length > 0) {\n      retArr.push(arr[i]);\n    }\n  }\n  return retArr;\n}\n\nconst toNumber = (txt) => {\n  var arr = txt.split(' ');\n  var retArr = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i].length > 0) {\n      retArr.push(parseInt(arr[i]));\n    }\n  }\n  return retArr;\n}\n\nconst addNumbers = (txt) => {\n  var arr = txt.split(' ');\n  var retArr = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i].length > 0) {\n      retArr.push(parseInt(arr[i]));\n    }\n  }\n  return retArr;\n}\n\nconst isNumber = (txt) => {\n  var arr = txt.split(' ');\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i].length > 0) {\n      if (parseInt(arr[i]) == arr[i]) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nconst addTwoNumbers = (txt) => {\n  var arr = txt.split(' ');\n  var retArr = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i].length > 0) {\n      retArr.push(parseInt(arr[i]));\n    }\n  }\n  return retArr;\n}\n\nconst subtractTwoNumbers = (txt) => {\n  var arr = txt.split(' ');\n  var retArr = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i].length > 0) {\n      retArr.push(parseInt(arr[i]));\n    }\n  }\n  return retArr;\n}\n\nconst subtractTwoNumbers2 = (txt) => {\n  var arr = txt.split(' ');\n  var retArr = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i].length > 0) {\n      retArr.push(parseInt(arr[i]));\n    }\n  }\n  return retArr;\n}\n\nconst subtractTwoNumbers3 = (txt) => {\n  var arr = txt.split(' ');\n  var retArr = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i].length > 0) {\n      retArr.push(parseInt(arr[i]));\n    }\n  }\n  return retArr;\n}\n\nconst subtractTwoNumbers4 = (txt) => {\n  var arr = txt.split(' ');\n  var retArr = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i].length > 0) {\n      retArr.push(parseInt(arr[i]));\n    }\n  }\n  return retArr;\n}\n\nconst subtractTwoNumbers5 = (txt) => {\n  var arr = txt.split(' ');\n  var retArr = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i].length > 0) {\n      retArr.push(parseInt(arr[i]));\n    }\n  }\n  return retArr;\n}\n\nconst divideTwoNumbers = (txt) => {\n  var arr = txt.split(' ');\n  var retArr = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i].length > 0) {\n      retArr.push(parseInt(arr[i]));\n    }\n  }\n  return retArr;\n}\n\nconst multiplyTwoNumbers = (txt) => {\n  var arr = txt.split(' ');\n  var retArr = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i].length > 0) {\n      retArr.push(parseInt(arr[i]));\n    }\n  }\n  return retArr;\n}\n\nconst divideTwoNumbers2 = (txt) => {\n  var arr = txt.split(' ');\n  var retArr = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i].length > 0) {\n      retArr.push(parseInt(arr[i]));\n    }\n  }\n  return retArr;\n}\n\nconst multiplyTwoNumbers2 = (txt) => {\n  var arr = txt.split(' ');\n  var retArr = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i].length > 0) {\n      retArr.push(parseInt(arr[i]));\n    }\n  }\n  return retAr"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted \n   in ascending decree. If list have more than 1 extra of the like \n   number, return false. simulate no minus numbers and alone integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they are sorted \n   in ascending decree. If list have more than 1 extra of the like \n   number, return false. simulate no minus numbers and alone integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let list = lst.slice(0)\n  let length = list.length\n  let isSorted = true\n\n  for (let i = 0; i < length - 1; i++) {\n    if (list[i] > list[i + 1]) {\n      isSorted = false\n      break\n    }\n  }\n  return isSorted\n}\n\nconsole.log(isSorted([5, 4, 3, 2, 1]))\nconsole.log(isSorted([1, 2, 3, 4, 5]))\nconsole.log(isSorted([1, 2, 3, 4, 5, 6]))\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7]))\nconsole.log(isSorted([1, 3, 2, 4, 5, 6, 7]))\nconsole.log(isSorted([1, 2, 2, 3, 3, 4]))\nconsole.log(isSorted([1, 2, 2, 2, 3, 4]))\nconsole.log(isSorted([1, 2, 2, 2, 2, 3, 4]))\nconsole.log(isSorted([1, 2, 2, 2, 2, 2, 3, 4]))\nconsole.log(isSorted([1, 2, 2, 2, 2, 2, 2, 3, 4]))\nconsole.log(isSorted([1, 2, 2, 2, 2, 2, 2, 2, 3, 4]))\nconsole.log(isSorted([1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4]))\nconsole.log(isSorted([1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval equal a couple of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals, \n   where each interval equal a couple of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] < interval2[0] || interval1[1] > interval2[1]) {\n    return 'NO';\n  }\n\n  const length = interval1[1] - interval1[0] + 1;\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  if (isPrime(length)) {\n    return 'YES';\n  }\n  return 'NO';\n};\n\nconsole.log(intersection([1, 2], [2, 3]));\nconsole.log(intersection([-1, 1], [0, 4]));\nconsole.log(intersection([-3, -1], [-5, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n   union of magnitude of integer multiply by product of all signs \n   of each number in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need to return\n   union of magnitude of integer multiply by product of all signs \n   of each number in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null;\n  let sign = 1;\n  let prod = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    prod = prod * arr[i];\n    if (arr[i] > 0) {\n      sign = sign * 1;\n    } else if (arr[i] < 0) {\n      sign = sign * -1;\n    } else {\n      sign = sign * 0;\n    }\n  }\n  return sign * prod;\n};\n\nconsole.log(prodSigns([1, 2, 2, -4]));\nconsole.log(prodSigns([0, 1]));\nconsole.log(prodSigns([]));\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N > = 2) and a positive integer k, \n   each cell of the grid incorporate a value. Every integer in the range [ 1, N * N ] \n   inclusive appears exactly once on the cell of the grid.\n\n   You induce to find the minimum path of length k in the grid. You can begin \n   from any cell, and in each step you can move to any of the neighbor cells, \n   in early password, you can go to cell which partake an edge with you current \n   cell. \n   Please note that a path of duration k means travel to exactly k cells (not \n   inevitably discrete). \n   You CANNOT go off the grid.\n   A way A (of distance k) is considered less than a way barn (of length k) if \n   after have the arrange tilt of the values on the cell that A and B plump \n   through (let's predict them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early son, there exist an integer exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we consume \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the solution is unique. \n   Return an ordered list of the values on the cells that the minimum way move through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N > = 2) and a positive integer k, \n   each cell of the grid incorporate a value. Every integer in the range [ 1, N * N ] \n   inclusive appears exactly once on the cell of the grid.\n\n   You induce to find the minimum path of length k in the grid. You can begin \n   from any cell, and in each step you can move to any of the neighbor cells, \n   in early password, you can go to cell which partake an edge with you current \n   cell. \n   Please note that a path of duration k means travel to exactly k cells (not \n   inevitably discrete). \n   You CANNOT go off the grid.\n   A way A (of distance k) is considered less than a way barn (of length k) if \n   after have the arrange tilt of the values on the cell that A and B plump \n   through (let's predict them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early son, there exist an integer exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we consume \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the solution is unique. \n   Return an ordered list of the values on the cells that the minimum way move through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n    const n = grid.length;\n    const d = grid[0].length;\n    const lst = new Array(d).fill(Infinity);\n    const visited = new Array(d).fill(false);\n    \n    const goTo = (cell, direction) => {\n        let next;\n        if (direction === 'left') {\n            next = cell - d;\n        } else {\n            next = cell + d;\n        }\n        if (next < 0 || next >= n) return;\n        if (visited[next]) return;\n        visited[next] = true;\n        lst[next] = Math.min(lst[cell], grid[next][cell]);\n        goTo(next, direction);\n    };\n    \n    goTo(0, 'left');\n    return lst;\n};\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3));\nconsole.log(minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1));\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied profoundly by mathematicians in \n   the final couple hundred. However, what people don't know is Tribonacci sequence. \n   Tribonacci succession is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is curious.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it was studied profoundly by mathematicians in \n   the final couple hundred. However, what people don't know is Tribonacci sequence. \n   Tribonacci succession is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is curious.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let nums = [];\n  let curr = 1;\n  while (n--) {\n    nums.push(curr);\n    curr = 1 + curr / 2;\n  }\n  return nums;\n};\n\ntri(3);\n\nconsole.log(tri(5));\n\nconsole.log(tri(7));\n\nconsole.log(tri(12));\n\nconsole.log(tri(20));\n\nconsole.log(tri(30));\n\nconsole.log(tri(40));\n\nconsole.log(tri(50));\n\nconsole.log(tri(60));\n\nconsole.log(tri(70));\n\nconsole.log(tri(80));\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the leftover digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the leftover digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const str = n.toString()\n  let result = 1\n  for (let i = str.length - 1; i >= 0; i--) {\n    result *= parseInt(str[i])\n  }\n  return result % 10\n}\n\nexport default digits\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which check entirely square brackets. \n   The affair should return true if and entirely if there is a valid posteriority of bracket \n   where at least one bracket in the posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ assumed \n   isNested('[]') ➞ assumed \n   isNested('[[][]]') ➞ dependable \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes a string as input which check entirely square brackets. \n   The affair should return true if and entirely if there is a valid posteriority of bracket \n   where at least one bracket in the posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ assumed \n   isNested('[]') ➞ assumed \n   isNested('[[][]]') ➞ dependable \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n  const _isNested = (string) = > {\n    const _getValidPosteriors = (string) = > {\n      const _isValidPosterior = (string) = > {\n        const _isNestedPosterior = (string) = > {\n          const _isNestedPosterior = (string) = > {\n            const _getValidPosteriors = (string) = > {\n              const _isNestedPosterior = (string) = > {\n                const _isNestedPosterior = (string) = > {\n                  const _isNestedPosterior = (string) = > {\n                    const _getValidPosteriors = (string) = > {\n                      const _isNestedPosterior = (string) = > {\n                        const _isNestedPosterior = (string) = > {\n                          const _isNestedPosterior = (string) = > {\n                            const _getValidPosteriors = (string) = > {\n                              const _isNestedPosterior = (string) = > {\n                                const _isNestedPosterior = (string) = > {\n                                  const _isNestedPosterior = (string) = > {\n                                    const _getValidPosteriors = (string) = > {\n                                      const _isNestedPosterior = (string) = > {\n                                        const _isNestedPosterior = (string) = > {\n                                          const _isNestedPosterior = (string) = > {\n                                            const _getValidPosteriors = (string) = > {\n                                              const _isNestedPosterior = (string) = > {\n                                                const _isNestedPosterior = (string) = > {\n                                                  const _getValidPosteriors = (string) = > {\n                                                    const _isNestedPosterior = (string) = > {\n                                                      const _isNestedPosterior = (string) = > {\n                                                        const _isNestedPosterior = (string) = > {\n                                                          const _getValidPosteriors = (string) = > {\n                                                           const _isNestedPosterior = (string) = > {\n                                                            const _isNestedPosterior = (string) = > {\n                                                            \tconst _getValidPosteriors = (string) = > {\n                                                            \t  const _isNestedPosterior = (string) = > {\n                                                            \t  \tconst _isNestedPosterior = (string) = > {\n                                                            \t  \t  const _getValidPosteriors = (string) = > {\n                                                            \t  \t  \tconst _isNestedPosterior = (string) = > {\n                                                            \t  \t  \t  const _isNestedPosterior = (string) = > {\n                                                            \t  \t  \t    const _getValidPosteriors = (string) = > {\n                                                            \t  \t  \t    \tconst _isNestedPosterior = (string) = > {\n                                                            \t  \t  \t        const _isNestedPosterior = (string) = > {\n                                                            \t  \t  \t        \tconst _getValidPosteriors = (string) = > {\n                                                            \t  \t  \t        \t  const _isNestedPosterior = (string) = > {\n                                                            \t  \t  \t        \t  \tconst _isNestedPosterior = (string) = > {\n                                                            \t  \t  \t        \t  \t\tconst _getValidPosteriors = (string) = > {\n                                                            \t  \t  \t        \t  \t\t\tconst _isNestedPosterior = (string) = > {\n                                                            \t  \t  \t        \t  \t\t\tconst _isNestedPosterior = (string) = > {\n                                                            \t  \t  \t        \t  \t\t\tconst _getValidPosteriors = (string) = > {\n                                                            \t  \t  \t        \t  \t\t\t\tconst _isNestedPosterior = (string) = > {\n                                                            \t  \t  \t        \t  \t\t\t\tconst _isNestedPosterior = (string) = > {\n                                                            \t  \t  \t        \t  \t\t\t\tconst _getValidPosteriors = (string) = > {\n                                                            \t  \t  \t        \t  \t\t\t\t\tconst _isNestedPosterior = (string) = > {\n                                                            \t  \t  \t        \t  \t\t\t\t\tconst _isNestedPosterior = (string) = > {\n                                                            \t  \t  \t        \t  \t\t\t\t\tconst _getValidPosteriors = (string) = > {\n                                                            \t  \t  \t        \t  "}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need to return the sum of squared numbers in the give list,\n   round each component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers. \n   You need to return the sum of squared numbers in the give list,\n   round each component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  lst.forEach(e => sum += e*e);\n  return sum;\n}\n\nconst test = (lst) => {\n  console.log(sumSquares(lst));\n}\n\ntest([1,2,3]);\ntest([1,4,9]);\ntest([1,3,5,7]);\ntest([1.4,4.2,0]);\ntest([-2.4,1,1]);\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the final quality \n   of a given string constitute an alphabetical quality and is not \n   a function of a word, and fake otherwise. \n   Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns true if the final quality \n   of a given string constitute an alphabetical quality and is not \n   a function of a word, and fake otherwise. \n   Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  txt = txt.trim();\n  txt = txt.toLowerCase();\n  const isALetter = txt.slice(-1) == \"a\" || txt.slice(-1) == \"e\" || txt.slice(-1) == \"i\" || txt.slice(-1) == \"o\" || txt.slice(-1) == \"u\";\n  return isALetter;\n}\n\n/*\n  Create a function that returns true if the final quality \n  of a given string constitute an alphabetic quality,\n  and is not a function of a word, and fake otherwise. \n  Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ true\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  txt = txt.trim();\n  txt = txt.toLowerCase();\n  const isALetter = txt.slice(-1) == \"a\" || txt.slice(-1) == \"e\" || txt.slice(-1) == \"i\" || txt.slice(-1) == \"o\" || txt.slice(-1) == \"u\";\n  return isALetter;\n}\n\n/*\n  Create a function that returns true if the final quality \n  of a given string consist of a lowercase character \n  and is not a function of a word, and fake otherwise. \n  Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  txt = txt.trim();\n  txt = txt.toLowerCase();\n  const isALetter = txt.slice(-1) == \"a\" || txt.slice(-1) == \"e\" || txt.slice(-1) == \"i\" || txt.slice(-1) == \"o\" || txt.slice(-1) == \"u\";\n  return isALetter;\n}\n\n/*\n  Create a function that returns true if the final quality \n  of a given string consist of an uppercase character \n  and is not a function of a word, and fake otherwise. \n  Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  txt = txt.trim();\n  txt = txt.toLowerCase();\n  const isALetter = txt.slice(-1) == \"A\" || txt.slice(-1) == \"E\" || txt.slice(-1) == \"I\" || txt.slice(-1) == \"O\" || txt.slice(-1) == \"U\";\n  return isALetter;\n}\n\n/*\n  Create a function that returns true if the final quality \n  of a given string consist of an lowercase character \n  and is not a function of a word, and fake otherwise. \n  Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  txt = txt.trim();\n  txt = txt.toLowerCase();\n  const isALetter = txt.slice(-1) == \"a\" || txt.slice(-1) == \"e\" || txt.slice(-1) == \"i\" || txt.slice(-1) == \"o\" || txt.slice(-1) == \"u\";\n  return isALetter;\n}\n\n/*\n  Create a function that returns true if the final quality \n  of a given string consist of an uppercase character \n  and is not a function of a word, and fake otherwise. \n  Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  txt = txt.trim();\n  txt = txt.toLowerCase();\n  const isALetter = txt.slice(-1) == \"A\" || txt.slice(-1) == \"E\" || txt.slice(-1) == \"I\" || txt.slice(-1) == \"O\" || txt.slice(-1) == \"U\";\n  return isALetter;\n}\n\n/*\n  Create a function that returns true if the final quality \n  of a given string consist of an lowercase character \n  and is not a function of a word, and fake otherwise. \n  Note: \" word \""}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0\n  let count = 0\n  for(let i = 0; i < arr.length; i++) {\n    let num = arr[i]\n    if(num > max) {\n      max = num\n      count = 1\n    } else if(num === max) {\n      count++\n    }\n  }\n  if(count === 0) {\n    return -1\n  } else {\n    return max\n  }\n}\n\nconsole.log(canArrange([1,2,4,3,5]));\nconsole.log(canArrange([1,2,3]));\nconsole.log(canArrange([1,2,3,4,5,6]));\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' equal \n   the big of damaging integer, and 'b' is the smallest \n   of positive integers in a list.\n   If there is no negative or plus integers, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns a tuple (a, b), where 'a' equal \n   the big of damaging integer, and 'b' is the smallest \n   of positive integers in a list.\n   If there is no negative or plus integers, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return (null, null);\n  }\n  return (\n    largestSmallestIntegers(lst.slice(1))\n     .then(() => largestSmallestIntegers(lst.slice(0, 1)))\n  );\n};\n\n// console.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7]));\nconsole.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7]));\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, float, or string representing \n   real issue, and returns the large variable in its give variable character. \n   Return null if the value are equal. \n   eminence: If a real number is represented as a string, the floating compass point might constitute. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes integers, float, or string representing \n   real issue, and returns the large variable in its give variable character. \n   Return null if the value are equal. \n   eminence: If a real number is represented as a string, the floating compass point might constitute. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n   if (a == b) return null\n   if (a < b) return a\n   if (a > b) return b\n   if (a === b) return a\n   if (typeof a === \"string\") {\n     if (a === b) return a\n     if (a < b) return a\n     if (a > b) return b\n   }\n   if (typeof a === \"number\") {\n     if (a === b) return a\n     if (a < b) return a\n     if (a > b) return b\n   }\n   if (a === b) return a\n }\n */\n\nconst compareOne = (a, b) => {\n  if (a === b) return a\n  if (a < b) return a\n  if (a > b) return b\n  if (a === b) return a\n  if (typeof a === \"string\") {\n    if (a === b) return a\n    if (a < b) return a\n    if (a > b) return b\n  }\n  if (typeof a === \"number\") {\n    if (a === b) return a\n    if (a < b) return a\n    if (a > b) return b\n  }\n  if (a === b) return a\n}\n\nconsole.log(compareOne(1, 2.5))\nconsole.log(compareOne(1, \" 2,3 \"))\nconsole.log(compareOne(\"5,1\", \" 6 \"))\nconsole.log(compareOne(\"1\", 1))\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the union of precisely 4 cocksure even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number n can be written as the union of precisely 4 cocksure even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      count++;\n    }\n  }\n  if (count === 4) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumOdd = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      count++;\n    }\n  }\n  if (count === 4) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEvenOdd = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if ((i % 2 === 0) || (i % 2 === 1)) {\n      count++;\n    }\n  }\n  if (count === 4) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEvenOddAlt = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if ((i % 2 === 0) && (i % 3 === 0)) {\n      count++;\n    }\n  }\n  if (count === 4) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEvenAlt = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if ((i % 2 === 0) || (i % 3 === 0)) {\n      count++;\n    }\n  }\n  if (count === 4) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEvenAlt2 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if ((i % 2 === 0) && (i % 3 === 0) && (i % 5 === 0)) {\n      count++;\n    }\n  }\n  if (count === 4) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEvenAlt3 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if ((i % 2 === 0) && (i % 3 === 0) && (i % 5 === 0) && (i % 7 === 0)) {\n      count++;\n    }\n  }\n  if (count === 4) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEvenAlt4 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if ((i % 2 === 0) && (i % 3 === 0) && (i % 5 === 0) && (i % 7 === 0) && (i % 11 === 0)) {\n      count++;\n    }\n  }\n  if (count === 4) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEvenAlt5 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if ((i % 2 === 0) && (i % 3 === 0) && (i % 5 === 0) && (i % 7 === 0) && (i % 11 === 0) && (i % 13 === 0)) {\n      count++;\n    }\n  }\n  if (count === 4) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEvenAlt6 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if ((i % 2 === 0) && (i % 3 === 0) && (i % 5 === 0) && (i % 7 === 0) && (i % 11 === 0) && (i % 13 === 0) && (i % 17 === 0)) {\n      count++;\n    }\n  }\n  if (count === 4) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEvenAlt7 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if ((i % 2 === 0) && (i % 3 === 0) && (i % 5 === 0) && (i % 7 === 0) && (i % 11 === 0) && (i % 13 === 0) && (i % 17 === 0) && (i % 19 === 0)) {\n      count++;\n    }\n  }\n  if (count === 4) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEvenAlt8 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if ((i % 2 === 0) && (i % 3 === 0) && (i % 5 === 0) && (i % 7 === 0) && (i % 11 === 0) && (i % 13 === 0) && (i % 17 === 0) && (i % 19 === 0) && (i % 23 === 0)) {\n      count++;\n    }\n  }\n  if (count === 4) {\n    return true;\n  }\n  return false;\n};\n\nexport {\n  isEqualToSumEven,\n  isEqualToSumEvenAlt,\n  isEqualToSumEvenAlt2,\n  isEqualToSumEvenAlt3,\n  isEqualToSumEvenAlt4,\n  isEqualToSumEvenAlt5,\n  isEqualToSumEvenAlt6,\n  isEqualToSumEvenAlt7,\n  isEqualToSumEvenAlt8\n};\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) return 1\n  else return n * specialFactorial(n-1)\n}\n\n/*\n   Calculates the Catalan number, a number commonly referred to as the\n   fourth number in the sequence of continued fractions. \n   The Catalan number is given by: \n   catalan(n) = sum(1/k**2 for k in range(n+1))\n   \n   For example:\n  >>> specialFactorial(9)\n  4482\n  >>> specialCatalan(9)\n  4482\n  \n  The function will receive an integer as input and should return the special\n  Catalan number of this integer.\n  */\nconst specialCatalan = (n) => {\n  if (n === 0) return 1\n  else return specialCatalan(n-1) + specialCatalan(n-2)\n}\n\n/*\n   Calculates the Euler's number, a number commonly referred to as the fifth\n   number in the sequence of continued fractions. \n   The Euler's number is given by: \n   euler(n) = 1/sum(1/k**2 for k in range(n+1))\n   \n   For example:\n  >>> specialFactorial(9)\n  4482\n  >>> specialEuler(9)\n  4482\n  \n  The function will receive an integer as input and should return the special\n  Euler's number of this integer.\n  */\nconst specialEuler = (n) => {\n  if (n === 0) return 1\n  else return specialEuler(n-1) + specialEuler(n-2)\n}\n\n/*\n   Calculates the Sierpinski Gasket, a number commonly referred to as the\n   sixth number in the sequence of continued fractions.\n   The Sierpinski Gasket is given by: \n   sierpinski(n) = sum(1/k**3 for k in range(n+1))\n   \n   For example:\n  >>> specialFactorial(9)\n  4482\n  >>> specialSierpinski(9)\n  4482\n  \n  The function will receive an integer as input and should return the special\n  Sierpinski Gasket of this integer.\n  */\nconst specialSierpinski = (n) => {\n  if (n === 0) return 1\n  else return specialSierpinski(n-1) + specialSierpinski(n-2)\n}\n\n/*\n   Calculates the Mertens, a number commonly referred to as the seventh\n   number in the sequence of continued fractions.\n   The Mertens is given by: \n   mertens(n) = sum(1/k**4 for k in range(n+1))\n   \n   For example:\n  >>> specialFactorial(9)\n  4482\n  >>> specialMertens(9)\n  4482\n  \n  The function will receive an integer as input and should return the special\n  Mertens of this integer.\n  */\nconst specialMertens = (n) => {\n  if (n === 0) return 1\n  else return specialMertens(n-1) + specialMertens(n-2)\n}\n\n/*\n   Calculates the Combinatorial number, a number commonly referred to as the\n   eightth number in the sequence of continued fractions.\n   The Combinatorial number is given by: \n   combinatorial(n) = sum(1/k**5 for k in range(n+1))\n   \n   For example:\n  >>> specialFactorial(9)\n  4482\n  >>> specialCombinatorial(9)\n  4482\n  \n  The function will receive an integer as input and should return the special\n  Combinatorial number of this integer.\n  */\nconst specialCombinatorial = (n) => {\n  if (n === 0) return 1\n  else return specialCombinatorial(n-1) + specialCombinatorial(n-2)\n}\n\n/*\n   Calculates the Lucas numbers, a number commonly referred to as the ninth\n   number in the sequence of continued fractions.\n   The Lucas numbers are given by: \n   lucas(n) = sum(1/k**6 for k in range(n+1))\n   \n   For example:\n  >>> specialFactorial(9)\n  4482\n  >>> specialLucas(9)\n  4482\n  \n  The function will receive an integer as input and should return the special\n  Lucas numbers of this integer.\n  */\nconst specialLucas = (n) => {\n  if (n === 0) return 1\n  else return specialLucas(n-1) + specialLucas(n-2)\n}\n\n/*\n   Calculates the Jacobi numbers, a number commonly referred to as the\n   twelfth number in the sequence of continued fractions.\n   The Jacobi numbers are given by: \n   jacobi(n) = sum(1/k**7 for k in range(n+1))\n   \n   For example:\n  >>> specialFactorial(9)\n  4482\n  >>> specialJacobi(9)\n  4482\n  \n  The function will receive an integer as input and should return the special\n  Jacobi numbers of this integer.\n  */\nconst specialJacobi = (n) => {\n  if (n === 0) return 1\n  else return specialJacobi(n-1) + specialJacobi(n-2)\n}\n\n/*\n   Calculates the Catalan number, a number commonly referred to as the\n   thirteenth number in the sequence of continued fractions.\n   The Catalan number is given by: \n   catalan(n) = sum(1/k**8 for k in range(n+1))\n   \n   For example:\n  >>> specialFactorial(9)\n  4482\n  >>> specialCatalan(9)\n  4482\n  \n  The function will receive an integer as input and should return the special\n  Catalan number of this integer.\n  */\nconst specialCatalan = (n) => {\n  if (n === 0) return 1\n  else return specialCatalan(n-1) + specialCatal"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n    return text\n       .split(' ')\n       .map(x => x.replace(/\\d/g, '_'))\n       .join(' ')\n       .replace(/ /g, '-')\n       .replace(/\\s+/g, '_');\n}\n\nmodule.exports = fixSpaces;<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string exemplify a file's name, and fall \n  ' Yes' if the the file's name is valid, and returns' No' differently. \n   A file's name is considered to be valid if and only if all the following condition \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains precisely one department of transportation'.' \n   - The substring before the department of transportation should not be empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a string exemplify a file's name, and fall \n 'Yes' if the the file's name is valid, and returns' No' differently. \n   A file's name is considered to be valid if and only if all the following condition \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains precisely one department of transportation'.' \n   - The substring before the department of transportation should not be empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const pattern = /^([a-zA-Z]|[0-9]|[a-zA-Z][0-9]{2,3})([\\S]{1,2}|[\\S]{3})([\\S]{1,2}|[\\S]{3})?(\\.[\\S]{3,4})?$/;\n  const match = file_name.match(pattern);\n  return match? 'Yes' : 'No';\n}\n\nconst check_file = (file_name) => {\n  if (fileNameCheck(file_name) === 'Yes') {\n    return file_name;\n  } else {\n    return false;\n  }\n}\n\nconst remove_leading_slash = (file_name) => {\n  if (file_name.charAt(0) === '/') {\n    return file_name.slice(1);\n  } else {\n    return file_name;\n  }\n}\n\nconst remove_trailing_slash = (file_name) => {\n  if (file_name.charAt(file_name.length - 1) === '/') {\n    return file_name.slice(0, -1);\n  } else {\n    return file_name;\n  }\n}\n\nconst check_file_type = (file_name) => {\n  return {\n    'extension': check_file(remove_trailing_slash(remove_leading_slash(file_name))),\n    'type': file_name.slice(remove_leading_slash(file_name).length).slice(file_name.indexOf('.'))\n  };\n}\n\nconst get_file_name = (file_name) => {\n  const file_name_check = check_file(file_name);\n  return file_name_check;\n}\n\nconst read_file = (file_name) => {\n  const file_name_check = check_file(file_name);\n  if (file_name_check) {\n    return fs.readFileSync(file_name);\n  } else {\n    return false;\n  }\n}\n\nconst write_file = (file_name, file_data) => {\n  const file_name_check = check_file(file_name);\n  if (file_name_check) {\n    fs.writeFileSync(file_name, file_data);\n    return true;\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = {\n  check_file: check_file,\n  read_file: read_file,\n  write_file: write_file,\n  get_file_name: get_file_name,\n  remove_trailing_slash: remove_trailing_slash,\n  remove_leading_slash: remove_leading_slash,\n  check_file_type: check_file_type\n}\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  const res = [];\n  let temp = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      temp += lst[i] * lst[i];\n    }\n    if (lst[i] % 4 === 0) {\n      temp += lst[i] * lst[i] * lst[i];\n    }\n  }\n  res.push(temp);\n  res.push(max);\n  res.push(min);\n  return res;\n};\n\n/*\n  This function will take a list of numbers. For all entries in the list, the routine will feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function will then return the product of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst prod = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  const res = [];\n  let temp = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      temp *= lst[i];\n    }\n    if (lst[i] % 4 === 0) {\n      temp *= lst[i];\n    }\n  }\n  res.push(temp);\n  res.push(max);\n  res.push(min);\n  return res;\n};\n\n/*\n  This function will take a list of numbers. For all entries in the list, the routine will feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function will then return the square root of all \n   entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 1.414\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 2.862\n  */\nconst sqrt = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  const res = [];\n  let temp = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      temp = Math.sqrt(lst[i]);\n    }\n    if (lst[i] % 4 === 0) {\n      temp = Math.sqrt(lst[i]);\n    }\n  }\n  res.push(temp);\n  res.push(max);\n  res.push(min);\n  return res;\n};\n\nmodule.exports = {\n  sumSquares,\n  prod,\n  sqrt\n};<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n   the sentence contains some news separate by a space, \n   and you have to return a chain that contains the quarrel from the original sentence,\n   whose duration are choice numbers, \n   the order of the words in the new chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representing a sentence,\n   the sentence contains some news separate by a space, \n   and you have to return a chain that contains the quarrel from the original sentence,\n   whose duration are choice numbers, \n   the order of the words in the new chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    let words = sentence.split(/\\s+/);\n    words.sort((a, b) => a.length - b.length);\n    let chain = words[0];\n    for (let i = 1; i < words.length; i++) {\n        chain = `${chain} ${words[i]}`;\n    }\n    return chain;\n};\n\nconst main = () => {\n    let sentence = \"This is a test\";\n    let chain = wordsInSentence(sentence);\n    console.log(chain);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression \n   x * n. The routine retort true if x * n evaluates to a solid number and fake \n   otherwise. Both x and n, are drawstring representation of a fraction, and have the follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive unharmed numbers. \n\n   You can wear that x, and n are valid fraction, and do not hold zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a function that will simplify the expression \n   x * n. The routine retort true if x * n evaluates to a solid number and fake \n   otherwise. Both x and n, are drawstring representation of a fraction, and have the follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive unharmed numbers. \n\n   You can wear that x, and n are valid fraction, and do not hold zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n    return x * n === n\n   ? n\n    : simplify(x / n, n)\n}\n\n\n* */<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integer \n   in ascending ordering according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts the given list of integer \n   in ascending ordering according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  if (!Array.isArray(nums)) throw new TypeError(\"orderByPoints expects an array as an argument.\");\n  return nums.sort(function(a, b) {\n    if (a == b) return 0;\n    return (a > b)? 1 : -1;\n  });\n}\n\n/*\n  Write a function which sorts the given list of strings \n   in ascending ordering according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints2 = (nums) => {\n  if (!Array.isArray(nums)) throw new TypeError(\"orderByPoints expects an array as an argument.\");\n  return nums.sort(function(a, b) {\n    if (a == b) return 0;\n    return (a > b)? 1 : -1;\n  });\n}\n\nconst sortByPoints = (nums) => {\n  if (!Array.isArray(nums)) throw new TypeError(\"orderByPoints expects an array as an argument.\");\n  return nums.sort(function(a, b) {\n    if (a == b) return 0;\n    return a.exponent - b.exponent;\n  });\n}\n\n/*\n  Write a function which sorts the given list of strings \n   in ascending ordering according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints3 = (nums) => {\n  if (!Array.isArray(nums)) throw new TypeError(\"orderByPoints expects an array as an argument.\");\n  return nums.sort(function(a, b) {\n    if (a == b) return 0;\n    return a.points - b.points;\n  });\n}\n\nconst sortByPoints2 = (nums) => {\n  if (!Array.isArray(nums)) throw new TypeError(\"orderByPoints expects an array as an argument.\");\n  return nums.sort(function(a, b) {\n    if (a == b) return 0;\n    return a.points - b.points;\n  });\n}\n\n/*\n  Write a function which sorts the given list of strings \n   in ascending ordering according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints4 = (nums) => {\n  if (!Array.isArray(nums)) throw new TypeError(\"orderByPoints expects an array as an argument.\");\n  return nums.sort(function(a, b) {\n    if (a == b) return 0;\n    return a.points - b.points;\n  });\n}\n\nconst sortByPoints3 = (nums) => {\n  if (!Array.isArray(nums)) throw new TypeError(\"orderByPoints expects an array as an argument.\");\n  return nums.sort(function(a, b) {\n    if (a == b) return 0;\n    return a.points - b.points;\n  });\n}\n\nconst sortByPoints2 = (nums) => {\n  if (!Array.isArray(nums)) throw new TypeError(\"orderByPoints expects an array as an argument.\");\n  return nums.sort(function(a, b) {\n    if (a == b) return 0;\n    return a.points - b.points;\n  });\n}\n\nconst sortByPoints1 = (nums) => {\n  if (!Array.isArray(nums)) throw new TypeError(\"orderByPoints expects an array as an argument.\");\n  return nums.sort(function(a, b) {\n    if (a == b) return 0;\n    return a.points - b.points;\n  });\n}\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numeral as stimulation and reappearance \n   the numeral of elements in the array that be great than 10 and both \n   first and final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an array of numeral as stimulation and reappearance \n   the numeral of elements in the array that be great than 10 and both \n   first and final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n    const odd = nums.filter(num => num % 2 === 1);\n    const even = nums.filter(num => num % 2 === 0);\n\n    return odd.length + even.length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to produce an integer array a of duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to produce an integer array a of duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let result = 0\n  for (let i = 1; i < n; i++) {\n    let j = i\n    while (j < n) {\n      let k = j + 1\n      while (k < n) {\n        if (i === j || j === k) {\n          continue\n        }\n        let sum = i * i + j * j + k * k\n        if (sum % 3 === 0) {\n          result++\n        }\n        k++\n      }\n      j++\n    }\n  }\n  return result\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   equal Mercury, the future one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a function that takes two satellite name as string planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits are \n   settle between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The routine should return an empty tuple if planet1 or planet2\n   are not correct satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar system: the closerst to the Sun \n   equal Mercury, the future one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a function that takes two satellite name as string planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits are \n   settle between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The routine should return an empty tuple if planet1 or planet2\n   are not correct satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  //TODO: check input\n  let planet1 = planet1.toLowerCase();\n  let planet2 = planet2.toLowerCase();\n  let result = [];\n  let result2 = [];\n  //return empty tuple if either planet is not correct\n  if(planet1 == 'earth' || planet1 =='mercury' || planet1 =='venus' || planet1 =='mars' || planet1 == 'jupiter' || planet1 =='saturn' || planet1 == 'uranus' || planet1 == 'neptune' || planet2 == 'earth' || planet2 =='mercury' || planet2 =='venus' || planet2 =='mars' || planet2 == 'jupiter' || planet2 =='saturn' || planet2 == 'uranus' || planet2 == 'neptune') {\n    return result;\n  }\n  //check for existence of planet1\n  if(planet1 in planetary_data.planets) {\n    //check for existence of planet2\n    if(planet2 in planetary_data.planets) {\n      result = get_planets_orbit(planet1, planet2);\n    }\n  }\n  return result;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a argument, \n   deletes the drawstring that take leftover lengths from it, \n   and returns the resulted list with a classify order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list classify by that principle. \n   If two words experience the like length, sort the list alphabetically. \n   The function should return a list of strings in screen order. \n   You may simulate that all words will have the like duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings as a argument, \n   deletes the drawstring that take leftover lengths from it, \n   and returns the resulted list with a classify order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list classify by that principle. \n   If two words experience the like length, sort the list alphabetically. \n   The function should return a list of strings in screen order. \n   You may simulate that all words will have the like duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  lst.sort((a, b) => a.length - b.length);\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let j = i;\n    while (i < lst.length && lst[i].length === lst[j].length) {\n      if (lst[i].length === 0) break;\n      res.push(lst[j++]);\n    }\n  }\n  return res;\n}\n\n/*Write a function that accepts a list of strings as a argument, \n   returns the list with all duplicates removed, \n   and returns the resulted list in original order. \n   The list is constantly a list of strings and never an array of numbers, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list original order. \n   If two words experience the like length, sort the list alphabetically. \n   The function should return a list of strings in original order. \n   You may simulate that all words will have the like duration.\n  For example:\n  assert list_remove_duplicates([\"aa\", \"a\", \"aaa\"]) => [\"aa\", \"a\", \"aaa\"]\n  assert list_remove_duplicates([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst listRemoveDuplicates = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let j = i + 1;\n    while (j < lst.length && lst[i].length === lst[j].length) {\n      if (lst[i].length === 0) break;\n      res.push(lst[j++]);\n    }\n  }\n  return res;\n}\n\n/*Write a function that accepts a list of strings as a argument, \n   returns the list with all duplicates removed, \n   and returns the resulted list in original order. \n   The list is constantly a list of strings and never an array of numbers, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list original order. \n   If two words experience the like length, sort the list alphabetically. \n   The function should return a list of strings in original order. \n   You may simulate that all words will have the like duration.\n  For example:\n  assert list_remove_duplicates([\"aa\", \"a\", \"aaa\"]) => [\"aa\", \"a\", \"aaa\"]\n  assert list_remove_duplicates([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst listRemoveDuplicatesSorted = (lst) => {\n  lst.sort();\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let j = i + 1;\n    while (j < lst.length && lst[i].length === lst[j].length) {\n      if (lst[i].length === 0) break;\n      res.push(lst[j++]);\n    }\n  }\n  return res;\n}\n\n/*Write a function that accepts a list of numbers as a argument, \n   deletes the number that take leftover lengths from it, \n   and returns the resulted list with a classify order, \n   The list is constantly a list of numbers and never an array of strings, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list classify by that principle. \n   If two words experience the like length, sort the list alphabetically. \n   The function should return a list of numbers in screen order. \n   You may simulate that all words will have the like duration.\n  For example:\n  assert list_sort([\"aa\", 1, \"aaa\", \"aa\"]) => [1, \"aa\", \"aaa\"]\n  assert list_sort([\"ab\", 1, \"aaa\", \"cd\"]) => [1, \"ab\", \"cd\"]\n  */\nconst sortedListSumNumbers = (lst) => {\n  lst.sort((a, b) => a - b);\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let j = i;\n    while (i < lst.length && lst[i] === lst[j]) {\n      res.push(lst[j++]);\n    }\n  }\n  return res;\n}\n\n/*Write a function that accepts a list of numbers as a argument, \n   returns the list with all duplicates removed, \n   and returns the resulted list in original order. \n   The list is constantly a list of numbers and never an array of strings, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list original order. \n   If two words experience the like length, sort the list alphabetically. \n   The function should return a list of numbers in original order. \n   You may simulate that all words will have the like duration.\n  For example:\n  assert list_remove_duplicates([\"aa\", 1, \"aaa\", \"aa\"]) => [1, \"aa\", \"aaa\"]\n  assert list_remove_duplicates([\"ab\", 1, \"aaa\", \"cd\"]) => [1, \""}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYTest = () => {\n  assert(xOrY(7, 34, 12) === 34, '7 equals 34');\n  assert(xOrY(15, 8, 5) === 5, '15 equals 5');\n}\n\nconst test = () => {\n  xOrYTest();\n}\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numeral \n   in the list that be odd. Ignore numbers that constitute negative or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input signal list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numeral \n   in the list that be odd. Ignore numbers that constitute negative or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input signal list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n    return (lst)?\n      reduce((x, y) =>\n        (x + y) + ((Math.abs(x) ^ y) & 1) * Math.pow(10, Math.floor(Math.log10(x) + Math.log10(y)))\n     , 0) :\n      0\n  }\n  \n  // https://www.geeksforgeeks.org/find-the-difference-between-two-lists-set-2/\n  const diff = (listA, listB) => {\n    const diffArr = []\n    for (const elem of listA) {\n      if (listB.indexOf(elem) > -1) {\n        diffArr.push(elem)\n      }\n    }\n    return diffArr\n  }\n  \n  // https://www.geeksforgeeks.org/find-the-difference-between-two-lists-set-3/\n  const findDifference = (listA, listB) => {\n    const diffArr = []\n    for (const elem of listA) {\n      if (listB.indexOf(elem) > -1) {\n        diffArr.push(elem)\n      }\n    }\n    return diffArr\n  }\n  \n  const testDiff = (listA, listB) => {\n    const diffArr = diff(listA, listB)\n    if (diffArr.length > 0) {\n      console.log(diffArr.join(''))\n    } else {\n      console.log('0')\n    }\n  }\n  \n  testDiff([9, -2, 0, 1, 3, 2, 0, 0])\n  testDiff([-1, -2, 0, 1, 3, 2, 0, 0])\n  testDiff([9, -2])\n  testDiff([0])\n  \n  // double the difference\n  doubleTheDifference([1, 3, 2, 0, 5, 2, -1, 3, 2, 3, 2, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2,"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the solution of some long - expect \n   consequence is last known. The feelings and thoughts you have at that consequence are \n   definitely deserving noting down and compare. \n   Your task is to determine if a person correctly think the results of a number of matches. \n   You are feed two array of scores and guess of adequate length, where each index shows a match. \n   Return an array of the like length announce how far off each guess was. If they have estimate correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling when the solution of some long - expect \n   consequence is last known. The feelings and thoughts you have at that consequence are \n   definitely deserving noting down and compare. \n   Your task is to determine if a person correctly think the results of a number of matches. \n   You are feed two array of scores and guess of adequate length, where each index shows a match. \n   Return an array of the like length announce how far off each guess was. If they have estimate correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const correct = game.slice(0);\n  const guess = Array.from(guess);\n  \n  for(let i = 0; i < correct.length; i++){\n    const item = correct[i];\n    const guessItem = guess[i];\n    \n    if(item === guessItem){\n      correct[i] = 0;\n    }else{\n      correct[i] = Math.abs(item - guessItem);\n    }\n  }\n  \n  return correct;\n}\n\nmodule.exports = compare;<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n   The extensions are to be use to load extra class to the course. The \n   strength of the extension is as follows: Let CAP equal the number of the capital \n   letters in the propagation's name, and let SM embody the number of lowercase letters \n   in the extension's name, the persuasiveness is give by the fraction CAP - SM. \n   You should discover the strong extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there embody two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n   The extensions are to be use to load extra class to the course. The \n   strength of the extension is as follows: Let CAP equal the number of the capital \n   letters in the propagation's name, and let SM embody the number of lowercase letters \n   in the extension's name, the persuasiveness is give by the fraction CAP - SM. \n   You should discover the strong extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there embody two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach((extension) => {\n    const strengthOfExtension = strengthOfExtension(class_name, extension);\n    strength[extension] = strengthOfExtension;\n  });\n  const strongestExtension = strongestExtensionByStrength(strength);\n  return strongestExtension;\n};\n\nconst strongestExtensionByStrength = (strength) => {\n  const strongestExtension = strength.find(\n    (extensionStrength) => extensionStrength.strength > 0\n  );\n  return strongestExtension;\n};\n\nconst strongestExtensionByStrengthOfExtension = (class_name, extension) => {\n  const strength = strengthOfExtension(class_name, extension);\n  return strength.extension;\n};\n\nconst strengthOfExtension = (class_name, extension) => {\n  const capitalLetters = class_name.toUpperCase().split(' ').length;\n  const strength = capitalLetters - extension.toUpperCase().split(' ').length;\n  return {\n    class_name: class_name,\n    extension: extension,\n    strength: strength\n  };\n};\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotation cost a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > fake \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > fake \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotation cost a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > fake \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > fake \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n    a = a.toLowerCase()\n    b = b.toLowerCase()\n    a = a.replace(/\\s/g, '')\n    b = b.replace(/\\s/g, '')\n    let pattern = /\\b(?!.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\b)(?=.*\\"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let result = 0,\n        digit,\n        count = 0;\n    while(num) {\n        digit = num % 10;\n        if(digit === 0) {\n            count++;\n        }\n        else if(digit % 2 === 0) {\n            count++;\n        }\n        num = Math.floor(num / 10);\n    }\n    return (count, count % 2 === 0? 'Odd' : 'Even');\n};\n\nmodule.exports = {\n    evenOddCount\n};\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n\n  if(number <= 1) {\n    result = 'I';\n    return result;\n  }\n\n  let x = number,\n    y = 1;\n\n  if(number % 10 === 0) {\n    x = number - number % 10;\n    y = 10;\n  }\n\n  if(x >= 5) {\n    result += 'V';\n    x -= 5;\n  }\n  \n  if(x >= 4) {\n    result += 'IV';\n    x -= 4;\n  }\n\n  if(x >= 1) {\n    result += 'I';\n    x -= 1;\n  }\n\n  if(x > 0) {\n    result += (x > 0)? 'X' : 'IX';\n    x = Math.floor(x / y);\n  }\n\n  while(x > 0) {\n    result += 'C';\n    x -= 1;\n  }\n\n  return result;\n}\n\n/*\n  Given a roman numeral, return its integer equivalent. \n  restriction: 1 < = num < = 4000 \n\n  Examples:\n  >>> intToRoman(1) == 1\n  >>> intToRoman(4) == 4\n  >>> intToRoman(4999) == 4999\n  */\nconst intToRoman = (number) => {\n  let result = 0;\n\n  if(number === 1) {\n    result = 1;\n  } else if(number === 4) {\n    result = 4;\n  } else if(number > 4 && number < 9) {\n    result = 5;\n  } else if(number > 8 && number < 15) {\n    result = 9;\n  } else if(number > 14) {\n    result = 15;\n  } else if(number > 4) {\n    result = 16;\n  } else {\n    result = 1;\n  }\n\n  return result;\n}\n\n/*\n  Given a roman numeral, return its integer equivalent. \n  restriction: 1 < = num < = 4000 \n\n  Examples:\n  >>> intToRoman(1) == 1\n  >>> intToRoman(4) == 4\n  >>> intToRoman(4999) == 4999\n  */\nconst intToRoman2 = (number) => {\n  let result = 0;\n\n  if(number === 1) {\n    result = 1;\n  } else if(number === 4) {\n    result = 4;\n  } else if(number > 4 && number < 9) {\n    result = 5;\n  } else if(number > 8 && number < 15) {\n    result = 9;\n  } else if(number > 14) {\n    result = 15;\n  } else if(number > 4) {\n    result = 16;\n  } else {\n    result = 1;\n  }\n\n  return result;\n}\n\n/*\n  Given a roman numeral, return its integer equivalent. \n  restriction: 1 < = num < = 4000 \n\n  Examples:\n  >>> intToRoman(1) == 1\n  >>> intToRoman(4) == 4\n  >>> intToRoman(4999) == 4999\n  */\nconst intToRoman3 = (number) => {\n  let result = 0;\n\n  if(number === 1) {\n    result = 1;\n  } else if(number === 4) {\n    result = 4;\n  } else if(number > 4 && number < 9) {\n    result = 5;\n  } else if(number > 8 && number < 15) {\n    result = 9;\n  } else if(number > 14) {\n    result = 15;\n  } else if(number > 4) {\n    result = 16;\n  } else {\n    result = 1;\n  }\n\n  return result;\n}\n\n/*\n  Given a roman numeral, return its integer equivalent. \n  restriction: 1 < = num < = 4000 \n\n  Examples:\n  >>> intToRoman(1) == 1\n  >>> intToRoman(4) == 4\n  >>> intToRoman(4999) == 4999\n  */\nconst intToRoman4 = (number) => {\n  let result = 0;\n\n  if(number === 1) {\n    result = 1;\n  } else if(number === 4) {\n    result = 4;\n  } else if(number > 4 && number < 9) {\n    result = 5;\n  } else if(number > 8 && number < 15) {\n    result = 9;\n  } else if(number > 14) {\n    result = 15;\n  } else if(number > 4) {\n    result = 16;\n  } else {\n    result = 1;\n  }\n\n  return result;\n}\n\n/*\n  Given a roman numeral, return its integer equivalent. \n  restriction: 1 < = num < = 4000 \n\n  Examples:\n  >>> intToRoman(1) == 1\n  >>> intToRoman(4) == 4\n  >>> intToRoman(4999) == 4999\n  */\nconst intToRoman5 = (number) => {\n  let result = 0;\n\n  if(number === 1) {\n    result = 1;\n  } else if(number === 4) {\n    result = 4;\n  } else if(number > 4 && number < 9) {\n    result = 5;\n  } else if(number > 8 && number < 15) {\n    result = 9;\n  } else if(number > 14) {\n    result = 15;\n  } else if(number > 4) {\n    result = 16;\n  } else {\n    result = 1;\n  }\n\n  return result;\n}\n\n/*\n  Given a roman numeral, return its integer equivalent. \n  restriction: 1 < = num < = 4000 \n\n  Examples:\n  >>> intToRoman(1) == 1\n  >>> intToRoman(4) == 4\n  >>> intToRoman(4999) == 4999\n  */\nconst intToRoman6 = (number) => {\n  let result = 0;\n\n  if(number === 1)"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. refund on-key if the three \n   sides form a justly - angled triangulum, fake differently. \n   A correctly - angle triangle is a triangle in which one slant is right slant or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. refund on-key if the three \n   sides form a justly - angled triangulum, fake differently. \n   A correctly - angle triangle is a triangle in which one slant is right slant or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n    const angle = (Math.atan2(b, a) - Math.atan2(c, a)) % (2 * Math.PI);\n    return (Math.abs(angle) < (Math.PI / 4));\n}\n\n/**\n Given the lengths of two sides of a rectangle. return true if the length of the other side is the same as the sum of the other two.\n  Example:\n  sameSide(3, 4, 5) == true\n  sameSide(1, 2, 3) == false\n  */\nconst sameSide = (a, b, c) => {\n    return (Math.abs(a - c) < 0.0000001);\n}\n\n/**\n Given the lengths of two sides of a rectangle. return true if the length of the other side is the same as the sum of the other two.\n  Example:\n  sameSide(3, 4, 5) == true\n  sameSide(1, 2, 3) == false\n  */\nconst sameSideTwo = (a, b, c) => {\n    return (Math.abs(b - c) < 0.0000001);\n}\n\n/**\n Given the lengths of two sides of a rectangle. return true if the length of the other side is the same as the sum of the other two.\n  Example:\n  sameSide(3, 4, 5) == true\n  sameSide(1, 2, 3) == false\n  */\nconst sameSideThree = (a, b, c) => {\n    return (Math.abs(a - c) < 0.0000001);\n}\n\n/**\n Given the lengths of two sides of a rectangle. return true if the length of the other side is the same as the sum of the other two.\n  Example:\n  sameSide(3, 4, 5) == true\n  sameSide(1, 2, 3) == false\n  */\nconst sameSideFour = (a, b, c) => {\n    return (Math.abs(b - c) < 0.0000001);\n}\n\n/**\n Given the lengths of two sides of a rectangle. return true if the length of the other side is the same as the sum of the other two.\n  Example:\n  sameSide(3, 4, 5) == true\n  sameSide(1, 2, 3) == false\n  */\nconst sameSideFive = (a, b, c) => {\n    return (Math.abs(a - c) < 0.0000001);\n}\n\n/**\n Given the lengths of two sides of a rectangle. return true if the length of the other side is the same as the sum of the other two.\n  Example:\n  sameSide(3, 4, 5) == true\n  sameSide(1, 2, 3) == false\n  */\nconst sameSideSix = (a, b, c) => {\n    return (Math.abs(b - c) < 0.0000001);\n}\n\n/**\n Given the lengths of two sides of a rectangle. return true if the length of the other side is the same as the sum of the other two.\n  Example:\n  sameSide(3, 4, 5) == true\n  sameSide(1, 2, 3) == false\n  */\nconst sameSideSeven = (a, b, c) => {\n    return (Math.abs(a - c) < 0.0000001);\n}\n\n/**\n Given the lengths of two sides of a rectangle. return true if the length of the other side is the same as the sum of the other two.\n  Example:\n  sameSide(3, 4, 5) == true\n  sameSide(1, 2, 3) == false\n  */\nconst sameSideEight = (a, b, c) => {\n    return (Math.abs(a - c) < 0.0000001);\n}\n\n/**\n Given the lengths of two sides of a rectangle. return true if the length of the other side is the same as the sum of the other two.\n  Example:\n  sameSide(3, 4, 5) == true\n  sameSide(1, 2, 3) == false\n  */\nconst sameSideNine = (a, b, c) => {\n    return (Math.abs(b - c) < 0.0000001);\n}\n\nconst sameSide = (a, b, c) => {\n    return (Math.abs(a - c) < 0.0000001);\n}\n\nconst sameSideTwo = (a, b, c) => {\n    return (Math.abs(b - c) < 0.0000001);\n}\n\nconst sameSideThree = (a, b, c) => {\n    return (Math.abs(a - c) < 0.0000001);\n}\n\nconst sameSideFour = (a, b, c) => {\n    return (Math.abs(b - c) < 0.0000001);\n}\n\nconst sameSideFive = (a, b, c) => {\n    return (Math.abs(a - c) < 0.0000001);\n}\n\nconst sameSideSix = (a, b, c) => {\n    return (Math.abs(b - c) < 0.0000001);\n}\n\nconst sameSideSeven = (a, b, c) => {\n    return (Math.abs(a - c) < 0.0000001);\n}\n\nconst sameSideEight = (a, b, c) => {\n    return (Math.abs(a - c) < 0.0000001);\n}\n\nconst sameSideNine = (a, b, c) => {\n    return (Math.abs(b - c) < 0.0000001);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings. \n   The list check unlike words. Return the news with maximum numeral \n   of unique quality. If multiple string have maximal number of alone \n   characters, return the one which comes foremost in lexicographical ordering. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings. \n   The list check unlike words. Return the news with maximum numeral \n   of unique quality. If multiple string have maximal number of alone \n   characters, return the one which comes foremost in lexicographical ordering. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   words.sort();\n   let [a, b] = words;\n   let [aa, bb] = words;\n   let [aaa, bbb] = words;\n   let [aaaa, bbbb] = words;\n   let [aaaaa, bbbbb] = words;\n   let [aaaaaa, bbbbbb] = words;\n   let [aaaaaaa, bbbbbbb] = words;\n   let [aaaaaaaa, bbbbbbbb] = words;\n   return aaaaaaa;\n }\n   \n const words = [\"aaaa\", \"bbb\", \"ccc\", \"ddd\"];\n const words = [\"name\", \"of\", \"string\"];\n const words = [\"name\", \"enam\", \"plot\"];\n const words = [\"aaaaaaa\", \"bb\", \"milliliter\"];\n const words = [\"a\", \"b\", \"c\"];\n const words = [\"a\", \"b\", \"c\", \"d\"];\n const words = [\"a\", \"b\", \"c\", \"d\", \"e\"];\n const words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"];\n const words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"];\n const words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\n const words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"];\n const words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"];\n const words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"];\n const words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"];\n const words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"];\n const words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"];\n const words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"];\n const words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"];\n const words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"];\n const words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"];\n const words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"];\n const words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"];\n const words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"];\n const words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"];\n const words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"];\n const words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"];\n const words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"];\n const words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n */\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have corrode a sealed number of carrot, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [ total number of eat carrot after your meals, \n                                   the number of carrots left after your meals ] \n   if there exist not enough remaining carrots, you will eat all remaining carrots, but will still be athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already have corrode a sealed number of carrot, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [ total number of eat carrot after your meals, \n                                   the number of carrots left after your meals ] \n   if there exist not enough remaining carrots, you will eat all remaining carrots, but will still be athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = []\n  let total = number + need\n  let left = remaining\n  let finished = 0\n  \n  while(total > 0) {\n    const finished = Math.min(left, total)\n    result.push(finished)\n    left -= finished\n    total -= finished\n  }\n  \n  return result\n}\n\n// Another way to do the same thing\nconst eat = (number, need, remaining) => {\n  let finished = 0\n  let remainingCarrots = number\n  let left = remainingCarrots\n  let finishedCarrots = 0\n  \n  while(left > 0) {\n    const finished = Math.min(left, need)\n    finishedCarrots += finished\n    left -= finished\n    if(left > 0) {\n      finishedCarrots += need\n      left -= need\n    }\n    need -= finished\n  }\n  \n  return [finishedCarrots, remainingCarrots - finishedCarrots]\n}\n\nconst eat = (number, need, remaining) => {\n  let finished = 0\n  let left = remaining\n  let finishedCarrots = 0\n  \n  while(left > 0) {\n    const finished = Math.min(left, need)\n    finishedCarrots += finished\n    left -= finished\n    if(left > 0) {\n      finishedCarrots += need\n      left -= need\n    }\n    need -= finished\n  }\n  \n  return [finishedCarrots, left]\n}\n\n/*\n  This is my solution using array to record how many carrots you have eaten\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let finished = 0\n  let left = remaining\n  let finishedCarrots = 0\n  let result = []\n  \n  while(left > 0) {\n    const finished = Math.min(left, need)\n    finishedCarrots += finished\n    left -= finished\n    if(left > 0) {\n      finishedCarrots += need\n      left -= need\n    }\n    need -= finished\n    result.push(finishedCarrots)\n  }\n  \n  return result\n}\n\nconst eat = (number, need, remaining) => {\n  let finished = 0\n  let left = remaining\n  let finishedCarrots = 0\n  let result = []\n  \n  while(left > 0) {\n    const finished = Math.min(left, need)\n    finishedCarrots += finished\n    left -= finished\n    if(left > 0) {\n      finishedCarrots += need\n      left -= need\n    }\n    need -= finished\n    result.push(finishedCarrots)\n  }\n  \n  return result\n}\n\nconst eat = (number, need, remaining) => {\n  let finished = 0\n  let left = remaining\n  let finishedCarrots = 0\n  let result = []\n  \n  while(left > 0) {\n    const finished = Math.min(left, need)\n    finishedCarrots += finished\n    left -= finished\n    if(left > 0) {\n      finishedCarrots += need\n      left -= need\n    }\n    need -= finished\n    result.push(finishedCarrots)\n  }\n  \n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operation, and \n   the second list be a list of integers. Use the two given lists to build up the algebric \n   formulation and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operation, and \n   the second list be a list of integers. Use the two given lists to build up the algebric \n   formulation and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const lenOperator = operator.length\n  const lenOperand = operand.length\n  let result = 0\n\n  if (lenOperator > lenOperand) {\n    return result\n  }\n\n  operand.forEach((operand, index) => {\n    result += operator[index].apply(null, [operand, result, index, lenOperand])\n  })\n\n  return result\n}\n\nexport default doAlgebra\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse its sheath from depleted to upper or vise versa, \n   otherwise keep it as it is. \n   If the string hold no letters, change by reversal the string. \n   The function should return the result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   if s[i] is a letter, reverse its sheath from depleted to upper or vise versa, \n   otherwise keep it as it is. \n   If the string hold no letters, change by reversal the string. \n   The function should return the result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const len = s.length;\n  const str = s.split(\"\");\n  let result = [];\n  let i = len - 1;\n  while (i >= 0) {\n    const c = str[i];\n    if (c.match(/[a-zA-Z]/)) {\n      str[i] = str[i].replace(/[a-zA-Z]/g, (c) => {\n        if (c === c.toUpperCase()) {\n          return c.toLowerCase();\n        }\n        return c.toUpperCase();\n      });\n    }\n    i--;\n  }\n  return str.join(\"\");\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n    if (text.length === 0) {\n        return null\n    }\n    const md5sum = crypto.createHash('md5')\n    md5sum.update(text)\n    return md5sum.digest('hex')\n}\n\n/**\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n    if (text.length === 0) {\n        return null\n    }\n    const md5sum = crypto.createHash('md5')\n    md5sum.update(text)\n    return md5sum.digest('hex')\n}\n\nmodule.exports = stringToMd5\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even finger between a\n   and b, in ascend order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even finger between a\n   and b, in ascend order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let i = a;\n  let result = [];\n\n  while (i <= b) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n    i += 1;\n  }\n  return result;\n};\n\nconst generateIntegers_test = () => {\n  const a = 2;\n  const b = 8;\n  const result = generateIntegers(a, b);\n  console.log(result);\n  console.log(result.join(' '));\n  return result.join(' ');\n};\n\ngenerateIntegers_test();\n<|endoftext|>"}
