{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  if(numbers.length < 2)\n    return false;\n  const min = Math.min(numbers[0], numbers[1]);\n  const max = Math.max(numbers[0], numbers[1]);\n  const diff = max - min;\n  for(let i = 2; i < numbers.length; i++) {\n    if(Math.abs(numbers[i] - min) < threshold * diff)\n      return true;\n    if(Math.abs(numbers[i] - max) < threshold * diff)\n      return true;\n  }\n  return false;\n};\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  true\n  */\nconst hasCloseElementsInList = (numbers, threshold) => {\n  for(let i = 0; i < numbers.length; i++) {\n    if(hasCloseElements([numbers[i]], threshold))\n      return true;\n  }\n  return false;\n};\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  true\n  */\nconst hasCloseElementsInArray = (numbers, threshold) => {\n  for(let i = 0; i < numbers.length; i++) {\n    if(hasCloseElements([numbers[i]], threshold))\n      return true;\n  }\n  return false;\n};\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  true\n  */\nconst hasCloseElementsInArrays = (numbers, threshold) => {\n  for(let i = 0; i < numbers.length; i++) {\n    if(hasCloseElementsInArray(numbers[i], threshold))\n      return true;\n  }\n  return false;\n};\n\nmodule.exports = {\n  hasCloseElements,\n  hasCloseElementsInList,\n  hasCloseElementsInArray,\n  hasCloseElementsInArrays\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string drawstring containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   separate freestanding those group into separate strings string section and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore neglect any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string drawstring containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   separate freestanding those group into separate strings string section and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore neglect any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let stack = [];\n  let list = [];\n  let level = 0;\n  let cur = 0;\n  paren_string = paren_string.trim();\n  for(let i = 0; i < paren_string.length; i++){\n    if(paren_string[i] == '('){\n      stack.push(i);\n      level++;\n    } else if (paren_string[i] == ')'){\n      level--;\n      if(level == 0){\n        let section = paren_string.slice(cur, i);\n        cur = i + 1;\n        list.push(section);\n      }\n      stack.pop();\n    }\n  }\n  return list;\n}\n\n/*\n  Input to this function is a string drawstring containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   combine all the freestanding groups to one string string section. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore neglect any spaces in the input string.\n  >>> joinParenGroups('( ) (( )) (( )( ))')\n  '()()()()'\n  */\nconst joinParenGroups = (paren_string) => {\n  let list = separateParenGroups(paren_string);\n  return list.reduce(function(previous, current){\n    return previous + current;\n  }, \"\");\n}\n\n/*\n  Input to this function is a string drawstring containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   combine all the freestanding groups to one string string section. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore neglect any spaces in the input string.\n  >>> joinParenGroups('(( )) (( )( ))')\n  '()()()()'\n  */\nconst joinParens = (paren_string) => {\n  let list = separateParenGroups(paren_string);\n  return list.reduce(function(previous, current){\n    return previous + current + \")\";\n  }, \"\");\n}\n\n/*\n  Input to this function is a string drawstring containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   combine all the freestanding groups to one string string section. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore neglect any spaces in the input string.\n  >>> joinParens('(( )) (( )( ))')\n  '()()()()'\n  */\nconst joinParensNoBrace = (paren_string) => {\n  let list = separateParenGroups(paren_string);\n  return list.reduce(function(previous, current){\n    return previous + current + \")\";\n  }, \"\");\n}\n\n/*\n  Input to this function is a string drawstring containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   combine all the freestanding groups to one string string section. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore neglect any spaces in the input string.\n  >>> joinParensNoBrace('(( )) (( )( ))')\n  '()()()()'\n  */\nconst joinParensNoBraceNoSpace = (paren_string) => {\n  let list = separateParenGroups(paren_string);\n  return list.reduce(function(previous, current){\n    return previous + current + \")\";\n  }, \"\");\n}\n\n/*\n  Input to this function is a string drawstring containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   combine all the freestanding groups to one string string section. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore neglect any spaces in the input string.\n  >>> joinParensNoBraceNoSpace('(( )) (( )( ))')\n  '()()()()'\n  */\nconst joinParensNoBraceNoSpaceNoBrace = (paren_string) => {\n  let list = separateParenGroups(paren_string);\n  return list.reduce(function(previous, current){\n    return previous + current + \")\";\n  }, \"\");\n}\n\n/*\n  Input to this function is a string drawstring containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   combine all the freestanding groups to one string string section. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore neglect any spaces in the input string.\n  >>> joinParensNoBraceNoSpaceNoBrace('(( )) (( )( ))')\n  '()()()()'\n  */\nconst joinParensNoBraceNoSpaceNoBraceNoSpace = (paren_string) => {\n  let list = separateParenGroups(paren_string);\n  return list.reduce(function(previous, current){\n    return previous + current + \")\";\n  }, \"\");\n}\n\n/*\n  Input to this function is a string drawstring containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   combine all the freestanding groups to one string string section. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore neglect any spaces in the input string.\n  >>> joinParensNoBraceNoSpaceNoBraceNoSpace('(( )) (( )( ))')\n  '()()()()'\n  */\nconst joinParensNoBraceNoSpaceNoBraceNoSpaceNoBrace = (paren_string) => {\n  let list = separateParenGroups(paren_string);\n  return list.reduce(function(previous, current){\n"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating float point number, it can be decomposed disintegrate into \n   and integer part (largest bombastic integer smaller than given give number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating float point number, it can be decomposed disintegrate into \n   and integer part (largest bombastic integer smaller than given give number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let intPart = Math.floor(number)\n  let decimalPart = number - intPart\n  let decimal = Math.pow(10, -decimalPart.toString().length)\n  return decimalPart.toString().split(\"e\").shift()\n}\n\n/* \n   Given a number with an integer and a decimal part, it can be \n   recomputed with the sum of the integer and decimal part.\n  >>> add(3, 5.2)\n  8.8\n  */\nconst add = (number, decimal) => {\n  let intPart = Math.floor(number)\n  let decimalPart = number - intPart\n  return intPart + decimalPart\n}\n\n/*\n   Given a number with an integer and a decimal part, it can be \n   recomputed with the sum of the integer and decimal part.\n  >>> subtract(3, 5.2)\n  -2.2\n  */\nconst subtract = (number, decimal) => {\n  let intPart = Math.floor(number)\n  let decimalPart = number - intPart\n  return intPart - decimalPart\n}\n\n/* \n   Given two numbers with an integer and a decimal part, it can be \n   recomputed with the sum of the integer and decimal part.\n  >>> multiply(3, 5.2)\n  21.84\n  */\nconst multiply = (number, decimal) => {\n  let intPart = Math.floor(number)\n  let decimalPart = number - intPart\n  return intPart * decimalPart\n}\n\n/*\n   Given two numbers with an integer and a decimal part, it can be \n   recomputed with the sum of the integer and decimal part.\n  >>> divide(3, 5.2)\n  0.72\n  */\nconst divide = (number, decimal) => {\n  let intPart = Math.floor(number)\n  let decimalPart = number - intPart\n  return intPart / decimalPart\n}\n\n/* \n   Given a positive floating float point number, it can be \n   recomputed with the sum of the integer and decimal part.\n  >>> divideByZero(3)\n  NaN\n  */\nconst divideByZero = (number) => {\n  return number / 0\n}\n\n/* \n   Given a positive floating float point number, it can be \n   recomputed with the sum of the integer and decimal part.\n  >>> divideByInfinity(3)\n  NaN\n  */\nconst divideByInfinity = (number) => {\n  return number / Infinity\n}\n\n/* \n   Given a positive floating float point number, it can be \n   recomputed with the sum of the integer and decimal part.\n  >>> divideByNegativeInfinity(3)\n  NaN\n  */\nconst divideByNegativeInfinity = (number) => {\n  return number / -Infinity\n}\n\n/* \n   Given a positive floating float point number, it can be \n   recomputed with the sum of the integer and decimal part.\n  >>> divideByNegativeZero(3)\n  Infinity\n  */\nconst divideByNegativeZero = (number) => {\n  return number / -0\n}\n\n/*\n   Given a positive floating float point number, it can be \n   recomputed with the sum of the integer and decimal part.\n  >>> moduloByZero(3)\n  NaN\n  */\nconst moduloByZero = (number) => {\n  return number % 0\n}\n\n/* \n   Given a positive floating float point number, it can be \n   recomputed with the sum of the integer and decimal part.\n  >>> moduloByInfinity(3)\n  NaN\n  */\nconst moduloByInfinity = (number) => {\n  return number % Infinity\n}\n\n/* \n   Given a positive floating float point number, it can be \n   recomputed with the sum of the integer and decimal part.\n  >>> moduloByNegativeInfinity(3)\n  NaN\n  */\nconst moduloByNegativeInfinity = (number) => {\n  return number % -Infinity\n}\n\n/* \n   Given a positive floating float point number, it can be \n   recomputed with the sum of the integer and decimal part.\n  >>> moduloByNegativeZero(3)\n  NaN\n  */\nconst moduloByNegativeZero = (number) => {\n  return number % -0\n}\n\nmodule.exports = {\n  truncateNumber,\n  add,\n  subtract,\n  multiply,\n  divide,\n  divideByZero,\n  divideByInfinity,\n  divideByNegativeInfinity,\n  divideByNegativeZero,\n  moduloByZero,\n  moduloByInfinity,\n  moduloByNegativeInfinity,\n  moduloByNegativeZero\n}\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account that starts startle with \n   zero balance. Your task is to detect if at any point degree the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account that starts startle with \n   zero balance. Your task is to detect if at any point degree the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n    let balance = 0;\n    for (let operation of operations) {\n        balance += operation;\n    }\n    if (balance < 0) {\n        return true;\n    }\n    return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b) / numbers.length\n  const deviations = numbers.map(number => Math.abs(number - mean))\n  return Math.abs(deviations.reduce((a, b) => a + b) / numbers.length)\n}\n\n/*\n   Calculate Standard Deviation of the provided list of numbers\n   >>> stdDev([1.0, 2.0, 3.0, 4.0])\n   1.5\n  */\nconst stdDev = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b) / numbers.length\n  const deviations = numbers.map(number => Math.abs(number - mean))\n  return Math.sqrt(deviations.reduce((a, b) => a + b) / numbers.length)\n}\n\n/*\n   Calculate the mean of the provided list of numbers\n   >>> mean([1.0, 2.0, 3.0, 4.0])\n   2.0\n  */\nconst mean = (numbers) => {\n  return numbers.reduce((a, b) => a + b) / numbers.length\n}\n\n/*\n   Calculate the median of the provided list of numbers\n   >>> median([1.0, 2.0, 3.0, 4.0])\n   2.0\n  */\nconst median = (numbers) => {\n  const medianIndex = Math.floor(numbers.length / 2)\n  if (numbers.length % 2) {\n    return (numbers[medianIndex - 1] + numbers[medianIndex]) / 2\n  } else {\n    return numbers[medianIndex]\n  }\n}\n\n/*\n   Calculate the mode of the provided list of numbers\n   >>> mode([1.0, 2.0, 3.0, 4.0])\n   3.0\n  */\nconst mode = (numbers) => {\n  const sortedNumbers = numbers.sort()\n  const mode = sortedNumbers[Math.floor(sortedNumbers.length / 2)]\n  return mode\n}\n\n/*\n   Calculate the mode of the provided list of numbers\n   >>> mode([1.0, 2.0, 3.0, 4.0])\n   3.0\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers)\n  const deviations = numbers.map(number => Math.abs(number - mean))\n  return deviations.reduce((a, b) => a + b) / numbers.length\n}\n\n/*\n   Calculate the variance of the provided list of numbers\n   >>> variance([1.0, 2.0, 3.0, 4.0])\n   1.25\n  */\nconst stdDeviation = (numbers) => {\n  return stdDev(numbers)\n}\n\n/*\n   Calculate the mean absolute deviation of the provided list of numbers\n   >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n   1.5\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers)\n  const deviations = numbers.map(number => Math.abs(number - mean))\n  return Math.abs(deviations.reduce((a, b) => a + b) / numbers.length)\n}\n\n/*\n   Calculate the standard deviation of the provided list of numbers\n   >>> stdDeviation([1.0, 2.0, 3.0, 4.0])\n   1.5\n  */\nconst stdDeviation = (numbers) => {\n  return stdDev(numbers)\n}\n\n/*\n   Calculate the standard deviation of the provided list of numbers\n   >>> stdDeviation([1.0, 2.0, 3.0, 4.0])\n   1.5\n  */\nconst stdDev = (numbers) => {\n  return stdDeviation(numbers)\n}\n\n/*\n   Calculate the median of the provided list of numbers\n   >>> median([1.0, 2.0, 3.0, 4.0])\n   2.0\n  */\nconst median = (numbers) => {\n  return median(numbers)\n}\n\n/*\n   Calculate the mean of the provided list of numbers\n   >>> mean([1.0, 2.0, 3.0, 4.0])\n   2.0\n  */\nconst mean = (numbers) => {\n  return mean(numbers)\n}\n\n/*\n   Calculate the mode of the provided list of numbers\n   >>> mode([1.0, 2.0, 3.0, 4.0])\n   3.0\n  */\nconst mode = (numbers) => {\n  return mode(numbers)\n}\n\n/*\n   Calculate the mode of the provided list of numbers\n   >>> mode([1.0, 2.0, 3.0, 4.0])\n   3.0\n  */\nconst variance = (numbers) => {\n  return variance(numbers)\n}\n\n/*\n   Calculate the variance of the provided list of numbers\n   >>> variance([1.0, 2.0, 3.0, 4.0])\n   1.25\n  */\nconst stdDeviation = (numbers) => {\n  return stdDeviation(numbers)\n}\n\n/*\n   Calculate the standard deviation of the provided list of numbers\n   >>> stdDeviation([1.0, 2.0, 3.0, 4.0])\n   1.5\n  */\nconst stdDev = (numbers) => {\n  return stdDeviation(numbers)\n}\n\n/*\n   Calculate the median of the provided list of numbers\n   >>> median([1.0, 2.0, 3.0, 4.0])\n   2.0\n  */\nconst median = (numbers) => {\n  return median(numbers)\n}\n\n/*\n   Calculate the mean of the provided list of numbers\n   "}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements element of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number 'delimeter' between every two consecutive elements element of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let i = 0\n  let len = numbers.length\n  let result = []\n  let j = 0\n  while (i < len - 1) {\n    result.push(numbers[i])\n    result.push(delimeter)\n    i++\n  }\n  result.push(numbers[i])\n  return result\n}\n\nmodule.exports = intersperse\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string drawstring represented multiple groups group for nested parentheses separated classify by spaces. \n   For each of the group, output the deepest thick level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string drawstring represented multiple groups group for nested parentheses separated classify by spaces. \n   For each of the group, output the deepest thick level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let result = [];\n  let cur_group = 0;\n  let prev_group = 0;\n  let max_depth = 0;\n  let cur_depth = 0;\n\n  for(let i = 0; i < paren_string.length; i++) {\n    if(paren_string[i] === '(') {\n      cur_group++;\n      cur_depth = 1;\n    } else if(paren_string[i] === ')') {\n      cur_depth--;\n      if(cur_depth < 0) {\n        cur_depth = 0;\n      }\n      if(cur_depth === 0) {\n        if(cur_group > prev_group) {\n          result.push(cur_group);\n          max_depth = Math.max(max_depth, result.length - 1);\n        }\n        prev_group = cur_group;\n        cur_group = 0;\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input to this function is a string drawstring represented multiple groups group for nested parentheses separated classify by spaces. \n  For each of the group, output the total number of groups of the same level of nesting as the current group.\n\n  E.g. (()()) ((())()) has two groups of same level of nesting.\n  E.g. ((())()) has two groups of same level of nesting.\n  E.g. ((()())()) has two groups of same level of nesting.\n  E.g. ((())()) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. (((())())) has two groups of same level of nesting.\n  E.g. (((())())) has two groups of same level of nesting.\n  E.g. (((())())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two groups of same level of nesting.\n  E.g. ((()())) has two"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain check given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contain check given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const regex = new RegExp(`[^${substring}]`, 'i');\n  const filtered = strings.filter(el => regex.test(el));\n  return filtered;\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filterBySubstring_2 = (strings, substring) => {\n  const regex = new RegExp(`[^${substring}]`, 'i');\n  const filtered = strings.filter(el => regex.test(el));\n  return filtered;\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filterBySubstring_3 = (strings, substring) => {\n  const regex = new RegExp(`[^${substring}]`, 'i');\n  const filtered = strings.filter(el => regex.test(el));\n  return filtered;\n};\n\nmodule.exports = {\n  filterBySubstring,\n  filterBySubstring_2,\n  filterBySubstring_3\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting consist of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting consist of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\n/*\n  Given a set of positive integers and a positive integer, return all possible combinations of numbers that add up to a number.\n  \n  Combinations are sorted by size.\n  \n  >>> combine(1, 3)\n  [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n  >>> combine(1, 2)\n  [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n  >>> combine(4, 2)\n  [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4], [4, 2]]\n  >>> combine(4, 3)\n  [[1, 2, 3], [1, 2, 4], [1, 3, 4], [1, 3, 5], [2, 3, 4], [2, 3, 5], [2, 4, 5], [3, 4, 5]]\n  >>> combine(4, 4)\n  [[1, 2, 3, 4]]\n  >>> combine(5, 4)\n  [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [1, 3, 5, 5], [1, 4, 5, 5], [2, 3, 4, 5], [2, 3, 5, 5], [2, 4, 5, 5], [3, 4, 5, 5]]\n  >>> combine(7, 4)\n  [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 2, 4, 7], [1, 3, 4, 5], [1, 3, 5, 5], [1, 3, 5, 7], [1, 4, 5, 5], [1, 4, 5, 7], [1, 4, 7, 7], [1, 5, 7, 7], [2, 3, 4, 5], [2, 3, 5, 5], [2, 3, 5, 7], [2, 4, 5, 5], [2, 4, 5, 7], [2, 4, 7, 7], [2, 5, 7, 7], [3, 4, 5, 5], [3, 4, 5, 7], [3, 4, 7, 7], [3, 5, 7, 7], [4, 5, 7, 7]]\n  >>> combine(7, 5)\n  [[1, 2, 3, 4, 5]]\n  >>> combine(9, 8)\n  [[1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 9], [1, 2, 3, 4, 5, 6, 8, 9], [1, 2, 3, 4, 5, 8, 9, 9], [1, 2, 3, 4, 6, 8, 9, 9], [1, 2, 3, 5, 6, 8, 9, 9], [1, 2, 4, 5, 6, 8, 9, 9], [1, 2, 5, 6, 8, 9, 9, 9], [1, 3, 4, 5, 6, 8, 9, 9], [1, 3, 5, 6, 8, 9, 9, 9], [1, 4, 5, 6, 8, 9, 9, 9], [2, 3, 4, 5, 6, 8, 9, 9], [2, 3, 5, 6, 8, 9, 9, 9], [2, 4, 5, 6, 8, 9, 9, 9], [2, 5, 6, 8, 9, 9, 9, 9], [3, 4, 5, 6, 8, 9, 9, 9]]\n  >>> combine(7, 3)\n  [[1, 2, 3], [1, 2, 4], [1, 3, 4], [1, 3, 5], [1, 4, 5], [1, 4, 7], [1, 5, 7], [2, 3, 4], [2, 3, 5], [2, 3, 6], [2, 4, 5], [2, 4, 6], [2, 4, 7], [2, 5, 7], [3, 4, 5], [3, 4, 6], [3, 4, 7], [3, 5, 7], [3, 5, 8], [3, 6, 7], [4, 5, 7], [4, 5, 8], [4, 6, 7], [4, 6, 8], [4, 7, 8], [5, 6, 7], [5, 6, 8], [5, 7, 8], [5, 7, 9], [5, 8, 9], [6, 7, 8], [6, 7, 9], [6, 8, 9], [6, 8, 9]]\n  >>> combine(8, 7)\n  [[1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 8], [1, 2, 3, 5, 6, 7, 8], [1, 2, 3, 5, 6, 8, 8], [1, 2, 3, 6, 7, 8, 8], [1, 2, 4, 5, 6, 7, 8], [1, 2, 4, 5, 6, 7, 8], [1, 2, 5, 6, 7, 8, 8], [1, 3, 4, 5, 6, 7, 8], [1, 3, 4, 5, 6, 7, 8], [1, 3, 6, 7, 8, 8, 8], [1, 4, 5, 6, 7, 8, 8], [1, 4, 5, 6, 7, 8, 8], [1, 4, 6, 7, 8, 8, 8], [1, 5, 6, 7,"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate render a list of rolling maximum maximal element found line up until given moment consequence \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, generate render a list of rolling maximum maximal element found line up until given moment consequence \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const numbersLength = numbers.length;\n  if (numbersLength <= 1) return numbers;\n\n  const rollingMax = (current, next) => {\n    const max = current > next? current : next;\n    return [...new Array(max), current, next];\n  };\n\n  const rollingMaxMax = (current, next) => {\n    const max = current > next? current : next;\n    return [...new Array(max), current, next];\n  };\n\n  const rollingMaxSum = (current, next) => {\n    const sum = current + next;\n    return [...new Array(sum), current, next];\n  };\n\n  const rollingMaxSumMax = (current, next) => {\n    const sum = current + next;\n    return [...new Array(sum), current, next];\n  };\n\n  const rollingMaxList = (numbers, length) => {\n    const rollingMax = (current, next) => {\n      const max = current > next? current : next;\n      return [...new Array(max), current, next];\n    };\n\n    const rollingMaxMax = (current, next) => {\n      const max = current > next? current : next;\n      return [...new Array(max), current, next];\n    };\n\n    const rollingMaxSum = (current, next) => {\n      const sum = current + next;\n      return [...new Array(sum), current, next];\n    };\n\n    const rollingMaxSumMax = (current, next) => {\n      const sum = current + next;\n      return [...new Array(sum), current, next];\n    };\n\n    let maxLength = length;\n    let maxResult = [];\n    let rollingMaxResult = [];\n\n    const numberMax = (current, next) => {\n      const max = current > next? current : next;\n      return [...new Array(max), current, next];\n    };\n\n    const numberMaxMax = (current, next) => {\n      const max = current > next? current : next;\n      return [...new Array(max), current, next];\n    };\n\n    const numberMaxSum = (current, next) => {\n      const sum = current + next;\n      return [...new Array(sum), current, next];\n    };\n\n    const numberMaxSumMax = (current, next) => {\n      const sum = current + next;\n      return [...new Array(sum), current, next];\n    };\n\n    if (numbersLength > length) {\n      const start = (numbersLength - length) * -1;\n      maxLength = numbersLength - start;\n      maxResult = numbers.slice(start, start + maxLength);\n    }\n\n    while (numbersLength > 0) {\n      const current = numbers[0];\n      const next = numbers[1];\n      const max = rollingMax(current, next);\n      rollingMaxResult.push(max);\n      numbers = numbers.slice(2);\n      numbersLength -= 2;\n    }\n\n    return rollingMaxResult;\n  };\n\n  return rollingMaxList(numbers, length);\n};\n\n/* From a given list of integers, generate render a list of rolling maximum maximal element found line up until given moment consequence \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMaxMax = (numbers) => {\n  const numbersLength = numbers.length;\n  if (numbersLength <= 1) return numbers;\n\n  const rollingMax = (current, next) => {\n    const max = current > next? current : next;\n    return [...new Array(max), current, next];\n  };\n\n  const rollingMaxMax = (current, next) => {\n    const max = current > next? current : next;\n    return [...new Array(max), current, next];\n  };\n\n  const rollingMaxSum = (current, next) => {\n    const sum = current + next;\n    return [...new Array(sum), current, next];\n  };\n\n  const rollingMaxSumMax = (current, next) => {\n    const sum = current + next;\n    return [...new Array(sum), current, next];\n  };\n\n  const rollingMaxList = (numbers, length) => {\n    const rollingMax = (current, next) => {\n      const max = current > next? current : next;\n      return [...new Array(max), current, next];\n    };\n\n    const rollingMaxMax = (current, next) => {\n      const max = current > next? current : next;\n      return [...new Array(max), current, next];\n    };\n\n    const rollingMaxSum = (current, next) => {\n      const sum = current + next;\n      return [...new Array(sum), current, next];\n    };\n\n    const rollingMaxSumMax = (current, next) => {\n      const sum = current + next;\n      return [...new Array(sum), current, next];\n    };\n\n    let maxLength = length;\n    let maxResult = [];\n    let rollingMaxResult = [];\n\n    const numberMax = (current, next) => {\n      const max = current > next? current : next;\n      return [...new Array(max), current, next];\n    };\n\n    const numberMaxMax = (current, next) => {\n      const max = current > next? current : next;\n      return [...new Array(max), current, next];\n    };\n\n    const numberMaxSum = (current, next) => {\n      const sum = current + next;\n      return [...new Array(sum), current, next];\n    };\n\n    const numberMaxSumMax = (current, next) => {\n      const sum = current + next;\n      return [...new Array(sum), current, next];\n    };\n\n    if (numbersLength > length) {\n      const start = (numbersLength - length) * -1;\n      maxLength = numbersLength - start;\n      maxResult = numbers.slice(start, start + maxLength);\n    }\n\n    while (numbersLength > 0) {\n      const current = numbers[0];\n      const next = numbers[1];\n"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest light palindrome that begins with a supplied issue string.\n   Algorithm idea is simple bare: \n   - Find the longest farseeing postfix of supplied provide string that is a palindrome. \n   - Append to the end conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest light palindrome that begins with a supplied issue string.\n   Algorithm idea is simple bare: \n   - Find the longest farseeing postfix of supplied provide string that is a palindrome. \n   - Append to the end conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const result = [];\n  while (string.length) {\n    const begin = string.length - 1;\n    while (begin >= 0 && string[begin]!== string[begin + 1]) {\n      begin--;\n    }\n    const end = string.length - 1;\n    while (end >= 0 && string[end]!== string[end - 1]) {\n      end--;\n    }\n    result.push(string.slice(begin + 1, end + 1));\n    string = string.slice(0, begin) + string.slice(end + 1, string.length);\n  }\n  return result.reverse().join('');\n}\n\n/* Test if strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the longest light palindrome that contains only one letter from the provided string.\n   Algorithm idea is simple bare: \n   - Find the longest farseeing postfix of supplied provide string that is a palindrome. \n   - Append to the end conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('a')\n  'a'\n  >>> makePalindrome('abc')\n  'a'\n  >>> makePalindrome('cat')\n  'cata'\n  */\nconst makePalindrome = (string) => {\n  const result = [];\n  while (string.length) {\n    const begin = string.length - 1;\n    while (begin >= 0 && string[begin]!== string[begin + 1]) {\n      begin--;\n    }\n    const end = string.length - 1;\n    while (end >= 0 && string[end]!== string[end - 1]) {\n      end--;\n    }\n    if (begin > 0 && end > 0) {\n      result.push(string.slice(begin + 1, end + 1));\n    }\n    string = string.slice(0, begin) + string.slice(end + 1, string.length);\n  }\n  return result.reverse().join('');\n}\n\n/* Test if strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the longest light palindrome that contains only one letter from the provided string.\n   Algorithm idea is simple bare: \n   - Find the longest farseeing postfix of supplied provide string that is a palindrome. \n   - Append to the end conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('a')\n  'a'\n  >>> makePalindrome('abc')\n  'a'\n  >>> makePalindrome('cat')\n  'cata'\n  */\nconst makePalindrome = (string) => {\n  const result = [];\n  while (string.length) {\n    const begin = string.length - 1;\n    while (begin >= 0 && string[begin]!== string[begin + 1]) {\n      begin--;\n    }\n    const end = string.length - 1;\n    while (end >= 0 && string[end]!== string[end - 1]) {\n      end--;\n    }\n    if (begin > 0 && end > 0) {\n      result.push(string.slice(begin + 1, end + 1));\n    }\n    string = string.slice(0, begin) + string.slice(end + 1, string.length);\n  }\n  return result.reverse().join('');\n}\n\n/* Find the longest light palindrome that contains only one letter from the provided string.\n   Algorithm idea is simple bare: \n   - Find the longest farseeing postfix of supplied provide string that is a palindrome. \n   - Append to the end conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('a')\n  'a'\n  >>> makePalindrome('abc')\n  'a'\n  >>> makePalindrome('cat')\n  'cata'\n  */\nconst makePalindrome = (string) => {\n  const result = [];\n  while (string.length) {\n    const begin = string.length - 1;\n    while (begin >= 0 && string[begin]!== string[begin + 1]) {\n      begin--;\n    }\n    const end = string.length - 1;\n    while (end >= 0 && string[end]!== string[end - 1]) {\n      end--;\n    }\n    if (begin > 0 && end > 0) {\n      result.push(string.slice(begin + 1, end + 1));\n    }\n    string = string.slice(0, begin) + string.slice(end + 1, string.length);\n  }\n  return result.reverse().join('');\n}\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string bowed stringed instrument.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string bowed stringed instrument.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n    const length = Math.max(a.length, b.length);\n    const newString = Array(length);\n    for(let i = 0; i < length; i++) {\n        newString[i] = a[i] ^ b[i];\n    }\n    return newString.join(\"\");\n}\n\nconst stringXorTest = () => {\n    console.log(\"The result of stringXor('010', '110') is '\" + stringXor('010', '110') + \"'\");\n}\n\n/*\n  Given a string, remove every substring that has even length. \n  Return a new string with every substring removed, in the order they were found.\n  >>> removeEvenSubStrings('abcde')\n  'acd'\n  >>> removeEvenSubStrings('abcdefg')\n  'acefg'\n  */\nconst removeEvenSubStrings = (str) => {\n    const newStr = str.split(\"\");\n    for(let i = 0; i < newStr.length; i++) {\n        if(newStr[i].length % 2 === 0) {\n            newStr.splice(i, 1);\n        }\n    }\n    return newStr.join(\"\");\n}\n\nconst removeEvenSubStringsTest = () => {\n    console.log(\"The result of removeEvenSubStrings('abcdefg') is '\" + removeEvenSubStrings('abcdefg') + \"'\");\n}\n\n/*\n  Given two strings, return the smallest string that is a permutation of the other.\n  >>> permutation('abc', 'cde')\n  'abc'\n  >>> permutation('abc', 'abcd')\n  'cab'\n  >>> permutation('abc', 'abca')\n  'abca'\n  >>> permutation('abcd', 'abc')\n  'abcd'\n  >>> permutation('abcd', 'abce')\n  'abce'\n  >>> permutation('abcd', 'abcd')\n  'abcd'\n  */\nconst permutation = (a, b) => {\n    const aLetters = a.split(\"\");\n    const bLetters = b.split(\"\");\n    let aPermutation = \"\";\n    for(let i = 0; i < aLetters.length; i++) {\n        let index = -1;\n        for(let j = 0; j < bLetters.length; j++) {\n            if(aLetters[i] === bLetters[j]) {\n                index = j;\n                break;\n            }\n        }\n        if(index === -1) {\n            return \"\";\n        }\n        aPermutation += aLetters[i];\n        bLetters.splice(index, 1);\n    }\n    return aPermutation;\n}\n\nconst permutationTest = () => {\n    console.log(\"The result of permutation('abc', 'cde') is '\" + permutation('abc', 'cde') + \"'\");\n    console.log(\"The result of permutation('abc', 'abcd') is '\" + permutation('abc', 'abcd') + \"'\");\n    console.log(\"The result of permutation('abcd', 'abce') is '\" + permutation('abcd', 'abce') + \"'\");\n    console.log(\"The result of permutation('abcd', 'abcd') is '\" + permutation('abcd', 'abcd') + \"'\");\n}\n\n/*\n  Given a string, remove every substring that contains a given character. \n  Return a new string with every substring that contains the given character removed.\n  >>> removeSubStrings('abc', 'c')\n  'ac'\n  >>> removeSubStrings('abc', 'a')\n  'bc'\n  >>> removeSubStrings('abc', 'b')\n  'ac'\n  >>> removeSubStrings('abc', 'e')\n  'abc'\n  >>> removeSubStrings('abc', 'z')\n  'abc'\n  >>> removeSubStrings('abc', 'ab')\n  'c'\n  >>> removeSubStrings('abc', 'bc')\n  'a'\n  >>> removeSubStrings('abc', 'd')\n  'abc'\n  >>> removeSubStrings('abc', 'abc')\n  'abc'\n  */\nconst removeSubStrings = (str, char) => {\n    const newStr = str.split(char);\n    return newStr.join(\"\");\n}\n\nconst removeSubStringsTest = () => {\n    console.log(\"The result of removeSubStrings('abc', 'c') is '\" + removeSubStrings('abc', 'c') + \"'\");\n    console.log(\"The result of removeSubStrings('abc', 'a') is '\" + removeSubStrings('abc', 'a') + \"'\");\n    console.log(\"The result of removeSubStrings('abc', 'b') is '\" + removeSubStrings('abc', 'b') + \"'\");\n    console.log(\"The result of removeSubStrings('abc', 'e') is '\" + removeSubStrings('abc', 'e') + \"'\");\n    console.log(\"The result of removeSubStrings('abc', 'z') is '\" + removeSubStrings('abc', 'z') + \"'\");\n    console.log(\"The result of removeSubStrings('abc', 'ab') is '\" + removeSubStrings('abc', 'ab') + \"'\");\n    console.log(\"The result of removeSubStrings('abc', 'bc') is '\" + removeSubStrings('abc', 'bc') + \"'\");\n    console.log(\"The result of removeSubStrings('abc', 'd') is '\" + removeSubStrings('abc', 'd') + \"'\");\n    console.log(\"The result of removeSubStrings('abc', 'abc') is '\" + removeSubStrings('abc', 'abc') + \"'\");\n}\n\nconst main = () => {\n    stringXorTest();\n    removeEvenSubStringsTest();\n    permutationTest();\n    removeSubStringsTest();\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case sheath of multiple \n   strings of the same length. Return null nothing in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case sheath of multiple \n   strings of the same length. Return null nothing in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) return null;\n\n  const max = strings[0];\n  for (const string of strings) {\n    if (string.length > max.length) {\n      max = string;\n    }\n  }\n\n  return max;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common coarse divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common coarse divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n    let x = a;\n    let y = b;\n    while (x!= 0 && y!= 0) {\n        if (a < b) {\n            x -= b;\n        } else {\n            y -= a;\n        }\n    }\n    return x + y;\n};\n\n/**\n * Return the largest integer which is less than or equal to the sum of two integers a and b.\n * This will return the smallest positive number which is a multiple of two.\n *\n * @param a\n * @param b\n * @returns {number}\n */\nconst largestCommonMultiple = (a, b) => {\n    let c = greatestCommonDivisor(a, b);\n    return Math.floor(Math.sqrt(c));\n};\n\nmodule.exports = largestCommonMultiple;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest long of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from shortest to longest long of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let result = []\n  let currentPrefix = []\n  let currentLength = 0\n  for (let i = 0; i < string.length; i++) {\n    if (currentLength + 1 < string.length && string.charAt(i) === string.charAt(i + 1)) {\n      currentPrefix.push(string.charAt(i))\n      currentLength += 1\n    } else {\n      result.push(currentPrefix.join(''))\n      currentPrefix = []\n      currentLength = 0\n    }\n  }\n  return result.concat(currentPrefix.join(''))\n}\n\n// Return list of all suffixes from longest to shortest long of the input string\nconst allSuffixes = (string) => {\n  let result = []\n  let currentSuffix = []\n  let currentLength = 0\n  for (let i = 0; i < string.length; i++) {\n    if (currentLength + 1 < string.length && string.charAt(i) === string.charAt(i + 1)) {\n      currentSuffix.push(string.charAt(i))\n      currentLength += 1\n    } else {\n      result.push(currentSuffix.join(''))\n      currentSuffix = []\n      currentLength = 0\n    }\n  }\n  return result.concat(currentSuffix.join(''))\n}\n\n// Return all permutations of a string\nconst allPermutations = (string) => {\n  const permutations = []\n  let currentPermutation = []\n  for (let i = 0; i < string.length; i++) {\n    let next = string.charAt(i)\n    if (i === string.length - 1) {\n      next = null\n    } else {\n      next = string.charAt(i + 1)\n    }\n    currentPermutation.push(next)\n    permutations.push(currentPermutation)\n    currentPermutation = []\n  }\n  return permutations\n}\n\nmodule.exports = {\n  allPrefixes,\n  allSuffixes,\n  allPermutations,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let i, result = '';\n  for (i = 0; i < n; i++) {\n    result += `${i + 1}`;\n  }\n  return result;\n};\n\nmodule.exports = {\n  stringSequence\n};\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct clear-cut characters (regardless of case sheath) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many distinct clear-cut characters (regardless of case sheath) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n    let result = 0\n    const stringArray = string.split('').map((char) => char.toUpperCase())\n    for (let i = 0; i < stringArray.length; i++) {\n        for (let j = i + 1; j < stringArray.length; j++) {\n            if (stringArray[i] === stringArray[j]) {\n                result++\n            }\n        }\n    }\n    return result\n}\n\n/**\n * Given a string, count how many distinct letters it contains.\n  >>> countLetters('Jello')\n  3\n  >>> countLetters('Hellow')\n  2\n  >>> countLetters('Hello')\n  2\n  >>> countLetters('Hola')\n  2\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>> countLetters('Hello, world!')\n  6\n  >>>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string drawstring representing musical melodious notes in a special extra ASCII format. \n   Your task job is to parse this string and return list of integers integer corresponding equate to how many beats does each \n   not last. \n\n   Here is a legend caption: \n  ' o' - whole solid note, lasts four beats \n  ' o|' - half one-half note eminence, lasts survive two beats \n  ' .|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string drawstring representing musical melodious notes in a special extra ASCII format. \n   Your task job is to parse this string and return list of integers integer corresponding equate to how many beats does each \n   not last. \n\n   Here is a legend caption: \n 'o' - whole solid note, lasts four beats \n 'o|' - half one-half note eminence, lasts survive two beats \n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  // Initialize a list of whole notes to be filled with 0.\n  const note_list = [];\n  // Initialize a list of half one-half notes to be filled with 0.\n  const half_note_list = [];\n  // Initialize a list of quarter notes to be filled with 0.\n  const quarter_note_list = [];\n  // Initialize a list of half one-half notes to be filled with 0.\n  const quarter_half_note_list = [];\n  // Initialize a list of quarter notes to be filled with 0.\n  const quarter_quarter_note_list = [];\n\n  // For each character in the input string, parse it and add it to the appropriate list.\n  for (let i = 0; i < music_string.length; i++) {\n    // If the character is 'o', it's a whole note, so add it to the list.\n    if (music_string[i] === 'o') {\n      note_list.push(1);\n    } else if (music_string[i] === 'o|') {\n      half_note_list.push(1);\n    } else if (music_string[i] === '.') {\n      quarter_note_list.push(1);\n    } else if (music_string[i] === '|') {\n      quarter_half_note_list.push(1);\n    } else if (music_string[i] === 'o') {\n      quarter_quarter_note_list.push(1);\n    }\n  }\n\n  // Return list of integers.\n  return [note_list, half_note_list, quarter_note_list, quarter_half_note_list, quarter_quarter_note_list];\n};\n\nmodule.exports = parseMusic;\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found find oneself in the original string. Count overlaping cases font.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substring can be found find oneself in the original string. Count overlaping cases font.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  if (!string) return 0\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) count++\n  }\n  return count\n}\n\n/*\n  Return a new string, which is the substring of the first argument string,\n  starting at the index specified by the second argument and ending at the\n  index specified by the third argument. If the index is out of range, it is\n  ignored.\n  \n  >>> substr('Hello World!', 5)\n  'Hello'\n  >>> substr('Hello World!', -1)\n  'Hello World!'\n  >>> substr('Hello World!', 5, -1)\n  'World!'\n  >>> substr('Hello World!', 5, 7)\n  ''\n  >>> substr('Hello World!', 5, 5)\n  ''\n  >>> substr('Hello World!', -1, 3)\n  ''\n  >>> substr('Hello World!', -1, 5)\n  'World!'\n  >>> substr('Hello World!', -1, 7)\n  'Hello World!'\n  >>> substr('Hello World!', -2, 7)\n  'Hello World!'\n  >>> substr('Hello World!', 7, -2)\n  ''\n  >>> substr('Hello World!', 7, 5)\n  ''\n  >>> substr('Hello World!', 5, 7)\n  ''\n  \n  */\nconst substr = (string, index, length) => {\n  if (!string) return ''\n  let endIndex = index + length\n  if (endIndex > string.length) endIndex = string.length\n  return string.substr(index, endIndex)\n}\n\n/*\n  Return the length of the given string.\n  \n  >>> len('Hello')\n  5\n  >>> len('Hello World!')\n  11\n  \n  */\nconst len = (string) => {\n  if (!string) return 0\n  return string.length\n}\n\n/*\n  Return a new string, which is the given string with every character\n  replaced by a new string.\n  \n  >>> replace('Hello World!', 'o', 'a')\n  'Hellaa daaaa!'\n  >>> replace('Hello World!', 'o', 'a', 1)\n  'Heaa daaaa!'\n  >>> replace('Hello World!', 'o', 'a', -1)\n  'Hello World!'\n  \n  */\nconst replace = (string, old, new, times) => {\n  if (!string) return ''\n  return string.replace(new RegExp(old, 'g'), times? new.repeat(times) : new)\n}\n\n/*\n  Return a new string, which is the given string with every character\n  replaced by a new string. The new string is given as a single argument.\n  \n  >>> replace('Hello World!', 'o', 'a')\n  'Hellaa daaaa!'\n  >>> replace('Hello World!', 'o', 'a', 1)\n  'Heaa daaaa!'\n  >>> replace('Hello World!', 'o', 'a', -1)\n  'Hello World!'\n  \n  */\nconst replaceAll = (string, old, new) => {\n  if (!string) return ''\n  return string.replace(new RegExp(old, 'g'), new)\n}\n\n/*\n  Return a new string, which is the given string with every character\n  replaced by a new string. The new string is given as a single argument,\n  and the number of times the character is to be replaced is given as the\n  third argument.\n  \n  >>> replace('Hello World!', 'o', 'a')\n  'Hellaa daaaa!'\n  >>> replace('Hello World!', 'o', 'a', 1)\n  'Heaa daaaa!'\n  >>> replace('Hello World!', 'o', 'a', -1)\n  'Hello World!'\n  \n  */\nconst replaceN = (string, old, new, times) => {\n  if (!string) return ''\n  return string.replace(new RegExp(old, 'g'), new.repeat(times))\n}\n\n/*\n  Return a new string, which is the given string with the first character\n  replaced by the second argument.\n  \n  >>> replaceFirst('Hello World!', 'o', 'a')\n  'Hellaa daaaa!'\n  >>> replaceFirst('Hello World!', 'o', 'a', 1)\n  'Heaa daaaa!'\n  >>> replaceFirst('Hello World!', 'o', 'a', -1)\n  'Hello World!'\n  \n  */\nconst replaceFirst = (string, old, new) => {\n  if (!string) return ''\n  return string.replace(new RegExp(old, 'g'), new)\n}\n\n/*\n  Return a new string, which is the given string with the first character\n  replaced by the second argument. The new string is given as a single argument.\n  \n  >>> replaceFirst('Hello World!', 'o', 'a')\n  'Hellaa daaaa!'\n  >>> replaceFirst('Hello World!', 'o', 'a', 1)\n  'Heaa daaaa!'\n  >>> replaceFirst('Hello World!', 'o', 'a', -1)\n  'Hello World!'\n  \n  */\nconst replaceFirstAll = (string, old, new) => {\n  if (!string) return ''\n  return string.replace(new RegExp(old, 'g'), new.slice(0, 1))\n}\n\n/*\n  Return a new string, which is the given string with the first character\n  replaced by the second argument. The new string is given as a single argument,\n  and the number of times the character is to be replaced is given as the\n  third argument.\n  \n  >>> replaceFirst('Hello World!', 'o', 'a')\n  'Hellaa daaaa!'\n  >>> replaceFirst('Hello World!', 'o', 'a', 1)\n  'Heaa daaaa!'\n  >>> replaceFirst('Hello World!', 'o', 'a', -1)\n  'Hello World!'\n  \n  */\nconst replaceLast = (string, old, new) => {\n  if"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited subtend string of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string bowed stringed instrument with numbers sorted from smallest belittled to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space - delimited subtend string of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string bowed stringed instrument with numbers sorted from smallest belittled to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ');\n  let sortedArray = [];\n  numbersArray.forEach(n => {\n    if (n >= 0 && n <= 9) {\n      sortedArray.push(n);\n    }\n  });\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  const sortedString = sortedArray.join(' ');\n  return sortedString;\n};\n\n// Test Code\n\nconsole.log(sortNumbers('three one five'));\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select blue-ribbon and return two that are the closest to each \n   other and return them in order club (smaller number act, larger number numeral).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select blue-ribbon and return two that are the closest to each \n   other and return them in order club (smaller number act, larger number numeral).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const result = []\n  const closest = []\n  const min = (x, y) => Math.abs(x - y)\n\n  for (let i = 0; i < numbers.length; i++) {\n    const index = i\n    const current = numbers[index]\n    for (let j = index + 1; j < numbers.length; j++) {\n      const next = numbers[j]\n      if (closest.length === 0) {\n        closest.push(next)\n        closest.push(current)\n      } else {\n        const first = closest[0]\n        const second = closest[1]\n        const distance = min(next, first)\n        if (distance === min(next, second)) {\n          closest.push(next)\n        } else {\n          if (distance === min(next, current)) {\n            closest.push(current)\n          } else {\n            result.push(closest)\n            closest = []\n          }\n        }\n      }\n    }\n    if (closest.length > 0) {\n      result.push(closest)\n    }\n  }\n  return result\n}\n\nmodule.exports = findClosestElements\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply put on a linear transform to that list,\n   such that the smallest little number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), apply put on a linear transform to that list,\n   such that the smallest little number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) min = numbers[i];\n    if (numbers[i] > max) max = numbers[i];\n  }\n  let range = max - min;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push((numbers[i] - min) / range);\n  }\n  return result;\n};\n\nexport default rescaleToUnit;<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": false, "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(x => typeof x === 'number');\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param  {Array} values - List of python values to filter\n  * @return {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(x => typeof x ==='string');\n};\n\n/**\n  * Filter given list of any python values only for lists\n  * @param  {Array} values - List of python values to filter\n  * @return {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(x => typeof x === 'object');\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param  {Array} values - List of python values to filter\n  * @return {Array}\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(x => typeof x === 'object');\n};\n\n/**\n  * Filters given list of any python values for boolean values\n  * @param  {Array} values - List of python values to filter\n  * @return {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(x => typeof x === 'boolean');\n};\n\n/**\n  * Filters given list of any python values for numbers\n  * @param  {Array} values - List of python values to filter\n  * @return {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(x => typeof x === 'number');\n};\n\n/**\n  * Filters given list of any python values for strings\n  * @param  {Array} values - List of python values to filter\n  * @return {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(x => typeof x ==='string');\n};\n\n/**\n  * Filters given list of any python values for lists\n  * @param  {Array} values - List of python values to filter\n  * @return {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(x => typeof x === 'object');\n};\n\n/**\n  * Filters given list of any python values for dictionaries\n  * @param  {Array} values - List of python values to filter\n  * @return {Array}\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(x => typeof x === 'object');\n};\n\n/**\n  * Filters given list of any python values for boolean values\n  * @param  {Array} values - List of python values to filter\n  * @return {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(x => typeof x === 'boolean');\n};\n\n/**\n  * Filters given list of any python values for numbers\n  * @param  {Array} values - List of python values to filter\n  * @return {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(x => typeof x === 'number');\n};\n\n/**\n  * Filters given list of any python values for strings\n  * @param  {Array} values - List of python values to filter\n  * @return {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(x => typeof x ==='string');\n};\n\n/**\n  * Filters given list of any python values for lists\n  * @param  {Array} values - List of python values to filter\n  * @return {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(x => typeof x === 'object');\n};\n\n/**\n  * Filters given list of any python values for dictionaries\n  * @param  {Array} values - List of python values to filter\n  * @return {Array}\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(x => typeof x === 'object');\n};\n\n/**\n  * Filters given list of any python values for boolean values\n  * @param  {Array} values - List of python values to filter\n  * @return {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(x => typeof x === 'boolean');\n};\n\nmodule.exports = {\n  filterIntegers,\n  filterStrings,\n  filterLists,\n  filterDictionaries,\n  filterBooleans,\n  filterNumbers,\n  filterStrings,\n  filterLists,\n  filterDictionaries,\n  filterBooleans,\n  filterNumbers\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given grant string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of given grant string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n    return string.length;\n};\n\n/* Return a copy of the given string\n  >>> strdup('abc')\n  'abc'\n  >>> strdup('abc') === 'abc'\n  True\n  >>> strdup('')\n  ''\n  >>> strdup('123') === '123'\n  True\n  >>> strdup('123') === '456'\n  False\n  */\nconst strdup = (string) => {\n    return string;\n};\n\n/* Return a new string containing the concatenation of all the given strings\n  >>> strconcat('abc', 'def')\n  'defabc'\n  >>> strconcat('abc', 'def') === 'defabc'\n  True\n  >>> strconcat('abc', 'def') === 'abcdef'\n  True\n  >>> strconcat('abc')\n  'abc'\n  >>> strconcat('abc', 'def') === 'defabc'\n  True\n  >>> strconcat('abc', 'def', 'ghi') === 'defabcghi'\n  True\n  */\nconst strconcat = (...strings) => {\n    return strings.join('');\n};\n\n/* Return a new string containing the given character repeated n times\n  >>> strrepeat('a', 1)\n  'a'\n  >>> strrepeat('a', 0)\n  ''\n  >>> strrepeat('a', -1)\n  Traceback (most recent call last):\n   ...\n  ValueError: negative repeat count\n\n  >>> strrepeat('a', 3)\n  'aaa'\n  >>> strrepeat('a', 3) === 'aaa'\n  True\n  */\nconst strrepeat = (character, n) => {\n    if (n < 0) {\n        throw new ValueError('negative repeat count');\n    }\n\n    return n >= 0? character.repeat(n) : '';\n};\n\n/* Return a new string containing the given character repeated n times\n  >>> strrep('a', 3)\n  'aaa'\n  >>> strrep('a', 3) === 'aaa'\n  True\n  */\nconst strrep = (character, n) => {\n    return n >= 0? character.repeat(n) : '';\n};\n\n/* Return a new string containing the given character repeated n times\n  >>> strrepeat('a', 3)\n  'aaa'\n  >>> strrep('a', 3) === 'aaa'\n  True\n  */\nconst strrep = (character, n) => {\n    return n >= 0? character.repeat(n) : '';\n};\n\n/* Return the position of the first occurrence of a character in a string\n  >>> index('abcdefg', 'c')\n  1\n  >>> index('abcdefg', 'd')\n  4\n  >>> index('abcdefg', 'z')\n  -1\n  >>> index('abcdefg', 'a')\n  0\n  >>> index('abcdefg', 'a', 1)\n  1\n  >>> index('abcdefg', 'a', 0, 2)\n  2\n  >>> index('abcdefg', 'a', 2, 2)\n  -1\n  */\nconst index = (string, character, start, end) => {\n    const length = strlen(string);\n\n    if (start < 0) {\n        throw new RangeError('start index out of range');\n    }\n\n    if (start >= length) {\n        throw new RangeError('start index out of range');\n    }\n\n    if (end < 0) {\n        throw new RangeError('end index out of range');\n    }\n\n    if (end > length) {\n        throw new RangeError('end index out of range');\n    }\n\n    if (start + 1 > end) {\n        throw new RangeError('end index out of range');\n    }\n\n    return string.indexOf(character, start);\n};\n\n/* Return the position of the last occurrence of a character in a string\n  >>> lastindex('abcdefg', 'c')\n  1\n  >>> lastindex('abcdefg', 'd')\n  4\n  >>> lastindex('abcdefg', 'z')\n  -1\n  >>> lastindex('abcdefg', 'a')\n  -1\n  >>> lastindex('abcdefg', 'a', 2)\n  -1\n  */\nconst lastindex = (string, character, start) => {\n    const length = strlen(string);\n\n    if (start < 0) {\n        throw new RangeError('start index out of range');\n    }\n\n    if (start >= length) {\n        throw new RangeError('start index out of range');\n    }\n\n    return string.lastIndexOf(character, start);\n};\n\n/* Return a new string containing the first n characters of the given string\n  >>> substring('abcdefg', 1)\n  'bcdefg'\n  >>> substring('abcdefg', 1, 3)\n  'bcdef'\n  >>> substring('abcdefg', 0, 1)\n  ''\n  >>> substring('abcdefg', 0, 3)\n  'abc'\n  >>> substring('abcdefg', -1)\n  Traceback (most recent call last):\n   ...\n  ValueError: start index out of range\n  >>> substring('abcdefg', -2)\n  Traceback (most recent call last):\n   ...\n  ValueError: start index out of range\n  >>> substring('abcdefg', -3)\n  Traceback (most recent call last):\n   ...\n  ValueError: start index out of range\n  >>> substring('abcdefg', -4)\n  Traceback (most recent call last):\n   ...\n  ValueError: start index out of range\n  >>> substring('abcdefg', 3, 4)\n  Traceback (most recent call last):\n   ...\n  ValueError: end index out of range\n  >>> substring('abcdefg', 3, -1)\n  Traceback (most recent call last):\n   ...\n  ValueError: end index out of range\n  >>> substring('abcdefg', 3, -2)\n  Traceback (most recent call last):\n   ...\n  ValueError: end index out of range\n  >>> substring('abcdefg', 3, 3)\n  Traceback (most recent call last):\n   ...\n  ValueError: end index out of range\n  */\nconst substring = (string"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find discover the largest number phone number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find discover the largest number phone number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let num = 1;\n  while (num <= n) {\n    if (n % num === 0) {\n      return num;\n    } else {\n      num++;\n    }\n  }\n};\n\nconst isPrime = (n) => {\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst largestDivisorInPrimeRange = (n) => {\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      return largestDivisor(i);\n    }\n  }\n};\n\nconsole.log(largestDivisorInPrimeRange(10));\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors component of given integer in the order club from smallest to largest bombastic. \n   Each of the factors should be listed list number of times fourth dimension corresponding to how many times it appeares in factorization. \n   Input stimulation number phone number should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors component of given integer in the order club from smallest to largest bombastic. \n   Each of the factors should be listed list number of times fourth dimension corresponding to how many times it appeares in factorization. \n   Input stimulation number phone number should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n    let factors = [];\n    for (let i = 1; i < n; i++) {\n        let factors_i = [];\n        let current_number = n;\n        let current_number_index = n;\n        let current_number_subtract_from = n;\n        while (current_number > 1) {\n            if (n % current_number === 0) {\n                factors_i.push(current_number);\n                current_number -= current_number_subtract_from;\n            } else {\n                current_number_index--;\n            }\n        }\n        factors.push(factors_i);\n    }\n    return factors;\n};\n\nconsole.log(factorize(8));\nconsole.log(factorize(25));\nconsole.log(factorize(70));\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements element that occur more than once. \n   Keep prevent order of elements chemical element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove all elements element that occur more than once. \n   Keep prevent order of elements chemical element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const hash = new Map();\n  let output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (!hash.has(numbers[i])) {\n      hash.set(numbers[i], 1);\n      output.push(numbers[i]);\n    }\n  }\n  return output;\n};\n\n/*\n  From a list of integers, remove all elements element that occur more than once. \n  Keep prevent order of elements chemical element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const hash = new Map();\n  let output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (!hash.has(numbers[i])) {\n      hash.set(numbers[i], 1);\n      output.push(numbers[i]);\n    }\n  }\n  return output;\n};\n\nconst removeDuplicates = (numbers) => {\n  const hash = new Map();\n  let output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (!hash.has(numbers[i])) {\n      hash.set(numbers[i], 1);\n      output.push(numbers[i]);\n    }\n  }\n  return output;\n};\n\nconst removeDuplicates = (numbers) => {\n  const hash = new Map();\n  let output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (!hash.has(numbers[i])) {\n      hash.set(numbers[i], 1);\n      output.push(numbers[i]);\n    }\n  }\n  return output;\n};\n\nconst removeDuplicates = (numbers) => {\n  const hash = new Map();\n  let output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (!hash.has(numbers[i])) {\n      hash.set(numbers[i], 1);\n      output.push(numbers[i]);\n    }\n  }\n  return output;\n};\n\nconst removeDuplicates = (numbers) => {\n  const hash = new Map();\n  let output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (!hash.has(numbers[i])) {\n      hash.set(numbers[i], 1);\n      output.push(numbers[i]);\n    }\n  }\n  return output;\n};\n\nconst removeDuplicates = (numbers) => {\n  const hash = new Map();\n  let output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (!hash.has(numbers[i])) {\n      hash.set(numbers[i], 1);\n      output.push(numbers[i]);\n    }\n  }\n  return output;\n};\n\nconst removeDuplicates = (numbers) => {\n  const hash = new Map();\n  let output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (!hash.has(numbers[i])) {\n      hash.set(numbers[i], 1);\n      output.push(numbers[i]);\n    }\n  }\n  return output;\n};\n\nconst removeDuplicates = (numbers) => {\n  const hash = new Map();\n  let output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (!hash.has(numbers[i])) {\n      hash.set(numbers[i], 1);\n      output.push(numbers[i]);\n    }\n  }\n  return output;\n};\n\nconst removeDuplicates = (numbers) => {\n  const hash = new Map();\n  let output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (!hash.has(numbers[i])) {\n      hash.set(numbers[i], 1);\n      output.push(numbers[i]);\n    }\n  }\n  return output;\n};\n\nconst removeDuplicates = (numbers) => {\n  const hash = new Map();\n  let output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (!hash.has(numbers[i])) {\n      hash.set(numbers[i], 1);\n      output.push(numbers[i]);\n    }\n  }\n  return output;\n};\n\nconst removeDuplicates = (numbers) => {\n  const hash = new Map();\n  let output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (!hash.has(numbers[i])) {\n      hash.set(numbers[i], 1);\n      output.push(numbers[i]);\n    }\n  }\n  return output;\n};\n\nconst removeDuplicates = (numbers) => {\n  const hash = new Map();\n  let output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (!hash.has(numbers[i])) {\n      hash.set(numbers[i], 1);\n      output.push(numbers[i]);\n    }\n  }\n  return output;\n};\n\nconst removeDuplicates = (numbers) => {\n  const hash = new Map();\n  let output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (!hash.has(numbers[i])) {\n      hash.set(numbers[i], 1);\n      output.push(numbers[i]);\n    }\n  }\n  return output;\n};\n\nconst removeDuplicates = (numbers) => {\n  const hash = new Map();\n  let output = [];"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char === 'a'? char.toUpperCase() : char.toLowerCase();\n  });\n};\n\n/**\n  * For a given string, remove all uppercase letters.\n  *\n  * For a given string, remove all lowercase letters.\n  *\n  * For a given string, remove all whitespace characters.\n  *\n  * For a given string, convert all punctuation characters to their corresponding word.\n  *\n  * For a given string, convert all special characters to their corresponding word.\n  *\n  * For a given string, remove all non-alphanumeric characters.\n  *\n  * For a given string, remove all non-alphanumeric characters.\n  *\n  * For a given string, remove all duplicate characters.\n  *\n  * For a given string, convert all whitespace characters to a single space.\n  *\n  * For a given string, convert all whitespace characters to a single space.\n  *\n  * For a given string, convert all special characters to their corresponding word.\n  *\n  * For a given string, convert all special characters to their corresponding word.\n  *\n  * For a given string, remove all non-alphanumeric characters.\n  *\n  * For a given string, remove all non-alphanumeric characters.\n  *\n  * For a given string, remove all duplicate characters.\n  *\n  * For a given string, convert all whitespace characters to a single space.\n  *\n  * For a given string, convert all whitespace characters to a single space.\n  *\n  * For a given string, convert all special characters to their corresponding word.\n  *\n  * For a given string, convert all special characters to their corresponding word.\n  *\n  * For a given string, remove all non-alphanumeric characters.\n  *\n  * For a given string, remove all non-alphanumeric characters.\n  *\n  * For a given string, remove all duplicate characters.\n  *\n  * For a given string, convert all whitespace characters to a single space.\n  *\n  * For a given string, convert all whitespace characters to a single space.\n  *\n  * For a given string, convert all special characters to their corresponding word.\n  *\n  * For a given string, convert all special characters to their corresponding word.\n  *\n  * For a given string, remove all non-alphanumeric characters.\n  *\n  * For a given string, remove all non-alphanumeric characters.\n  *\n  * For a given string, remove all duplicate characters.\n  *\n  * For a given string, convert all whitespace characters to a single space.\n  *\n  * For a given string, convert all whitespace characters to a single space.\n  *\n  * For a given string, convert all special characters to their corresponding word.\n  *\n  * For a given string, convert all special characters to their corresponding word.\n  *\n  * For a given string, remove all non-alphanumeric characters.\n  *\n  * For a given string, remove all non-alphanumeric characters.\n  *\n  * For a given string, remove all duplicate characters.\n  *\n  * For a given string, convert all whitespace characters to a single space.\n  *\n  * For a given string, convert all whitespace characters to a single space.\n  *\n  * For a given string, convert all special characters to their corresponding word.\n  *\n  * For a given string, convert all special characters to their corresponding word.\n  *\n  * For a given string, remove all non-alphanumeric characters.\n  *\n  * For a given string, remove all non-alphanumeric characters.\n  *\n  * For a given string, remove all duplicate characters.\n  *\n  * For a given string, convert all whitespace characters to a single space.\n  *\n  * For a given string, convert all whitespace characters to a single space.\n  *\n  * For a given string, convert all special characters to their corresponding word.\n  *\n  * For a given string, convert all special characters to their corresponding word.\n  *\n  * For a given string, remove all non-alphanumeric characters.\n  *\n  * For a given string, remove all non-alphanumeric characters.\n  *\n  * For a given string, remove all duplicate characters.\n  *\n  * For a given string, convert all whitespace characters to a single space.\n  *\n  * For a given string, convert all whitespace characters to a single space.\n  *\n  * For a given string, convert all special characters to their corresponding word.\n  *\n  * For a given string, convert all special characters to their corresponding word.\n  *\n  * For a given string, remove all non-alphanumeric characters.\n  *\n  * For a given string, remove all non-alphanumeric characters.\n  *\n  * For a given string, remove all duplicate characters.\n  *\n  * For a given string, convert all whitespace characters to a single space.\n  *\n  * For a given string, convert all whitespace characters to a single space.\n  *\n  * For a given string, convert all special characters to their corresponding word.\n  *\n  * For a given string, convert all special characters to their corresponding word.\n  *\n  * For a given string, remove all non-alphanumeric characters.\n  *\n  * For a given string, remove all non-alphanumeric characters.\n  *\n  * For a given string, remove all duplicate characters.\n  *\n  * For a given string, convert all whitespace characters to a single space.\n  *\n  * For a given string, convert all whitespace characters to a single space.\n  *\n  * For a given string, convert all special characters to their corresponding word.\n  *\n  * For a given string, convert all special characters to their corresponding word.\n  *\n  * For a given string, remove all non-alphanumeric characters.\n  *\n  * For a given string, remove all non-alphanumeric characters.\n  *\n  * For a given string, remove all duplicate characters.\n  *\n  * For a given string, convert all whitespace characters to a single space.\n  *\n  * For a given string, convert all whitespace characters to a single space.\n  "}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  const result = strings.reduce((previous, current) => previous + current, '');\n  return result;\n};\n\n/*\n  Return a list of all the permutations of a string.\n  >>> permutations('a')\n  ['a', 'a', 'a', 'a', 'a', 'a']\n  >>> permutations('ab')\n  ['ab', 'ba', 'ab', 'ba', 'ab', 'ba']\n  >>> permutations('abc')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba', 'abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutations('xyz')\n  Traceback (most recent call last):\n ...\n  ValueError: Input string must contain at least one character.\n  */\nconst permutations = (str) => {\n  if (str.length === 0) {\n    return [];\n  }\n\n  if (str.length === 1) {\n    return [str];\n  }\n\n  const chars = str.split('');\n\n  const permutationsForChar = (currentStr) => {\n    const char = chars[currentStr.length];\n\n    const permutationsForCharWithoutCurrentChar = permutations(str.slice(0, currentStr.length) + str.slice(currentStr.length + 1));\n\n    return permutationsForCharWithoutCurrentChar.map((permutation) => permutation + char);\n  };\n\n  return chars.reduce(permutationsForChar, permutationsForChar(''));\n};\n\n/*\n  Return a string with all the permutations of a string.\n  >>> permutation('a')\n  'a'\n  >>> permutation('ab')\n  'ab'\n  >>> permutation('abc')\n  'abc'\n  >>> permutation('xyz')\n  'xyz'\n  */\nconst permutation = (str) => {\n  if (str.length === 1) {\n    return str;\n  }\n\n  const chars = str.split('');\n\n  const permutationForChar = (currentStr) => {\n    const char = chars[currentStr.length];\n\n    return char + permutation(str.slice(0, currentStr.length) + str.slice(currentStr.length + 1));\n  };\n\n  return chars.reduce(permutationForChar, '');\n};\n\n/*\n  Return a list of all the permutations of a string.\n  >>> permutations('a')\n  ['a', 'a', 'a', 'a', 'a']\n  >>> permutations('ab')\n  ['ab', 'ba', 'ab', 'ba', 'ab', 'ba']\n  >>> permutations('abc')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba', 'abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> permutations('xyz')\n  Traceback (most recent call last):\n ...\n  ValueError: Input string must contain at least one character.\n  */\nconst permutation = (str) => {\n  if (str.length === 0) {\n    return [];\n  }\n\n  if (str.length === 1) {\n    return [str];\n  }\n\n  const chars = str.split('');\n\n  const permutationsForChar = (currentStr) => {\n    const char = chars[currentStr.length];\n\n    const permutationsForCharWithoutCurrentChar = permutation(str.slice(0, currentStr.length) + str.slice(currentStr.length + 1));\n\n    return permutationsForCharWithoutCurrentChar.map((permutation) => permutation + char);\n  };\n\n  return chars.reduce(permutationsForChar, permutationsForChar(''));\n};\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start startle with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start startle with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = []\n  const hasPrefix = (str) => str.startsWith(prefix)\n\n  strings.forEach(str => {\n    if(hasPrefix(str)) filtered.push(str)\n  })\n\n  return filtered\n}\n\n/**\n  * @param {Array} strings\n  * @param {string} prefix\n  * @return {Array}\n  * @description\n  * Removes all strings from an input array that don't start with a given prefix.\n  *\n  * @example\n  * const filtered = removePrefix([ 'abc', 'bcd', 'cde', 'array' ], 'a')\n  * //=> [ 'abc', 'cde', 'array' ]\n  */\nconst removePrefix = (strings, prefix) => {\n  const filtered = []\n  const hasPrefix = (str) => str.startsWith(prefix)\n\n  strings.forEach(str => {\n    if(hasPrefix(str)) filtered.push(str)\n  })\n\n  return filtered\n}\n\n/**\n  * @param {Array} strings\n  * @param {string} prefix\n  * @return {Array}\n  * @description\n  * Removes all strings from an input array that don't end with a given suffix.\n  *\n  * @example\n  * const filtered = removeSuffix([ 'abc', 'bcd', 'cde', 'array' ], 'y')\n  * //=> [ 'abc', 'bcd', 'array' ]\n  */\nconst removeSuffix = (strings, suffix) => {\n  const filtered = []\n  const hasSuffix = (str) => str.endsWith(suffix)\n\n  strings.forEach(str => {\n    if(hasSuffix(str)) filtered.push(str)\n  })\n\n  return filtered\n}\n\n/**\n  * @param {Array} strings\n  * @param {string} suffix\n  * @return {Array}\n  * @description\n  * Removes all strings from an input array that don't contain a given suffix.\n  *\n  * @example\n  * const filtered = removeSuffix([ 'abc', 'bcd', 'cde', 'array' ], 'y')\n  * //=> [ 'abc', 'bcd', 'array' ]\n  */\nconst removeSuffixFrom = (strings, suffix) => {\n  const filtered = []\n  const hasSuffix = (str) => str.endsWith(suffix)\n\n  strings.forEach(str => {\n    if(hasSuffix(str)) filtered.push(str)\n  })\n\n  return filtered\n}\n\n/**\n  * @param {Array} strings\n  * @param {string} prefix\n  * @param {string} suffix\n  * @return {Array}\n  * @description\n  * Removes all strings from an input array that don't contain both a given prefix and suffix.\n  *\n  * @example\n  * const filtered = removePrefixAndSuffix([ 'abc', 'bcd', 'cde', 'array' ], 'y', 'a')\n  * //=> [ 'bcd', 'array' ]\n  */\nconst removePrefixAndSuffix = (strings, prefix, suffix) => {\n  const filtered = []\n  const hasPrefix = (str) => str.startsWith(prefix)\n  const hasSuffix = (str) => str.endsWith(suffix)\n\n  strings.forEach(str => {\n    if(hasPrefix(str) && hasSuffix(str)) filtered.push(str)\n  })\n\n  return filtered\n}\n\nmodule.exports = {\n  filterByPrefix,\n  removePrefix,\n  removeSuffix,\n  removeSuffixFrom,\n  removePrefixAndSuffix\n}\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let a = [...l];\n  a.sort((a1, a2) => a1 - a2);\n  return a.filter((n) => n > 0);\n};\n\n/*\n  Given a list of numbers, check if it is possible to divide the sum of the list into equal parts.\n  Note: The numbers can be of different magnitude.\n\n  >>> getDivisors([4, 7, 9, 10, 11])\n  [4, 7, 9, 10, 11]\n  >>> getDivisors([4, 7, 9, 10, 11, 13])\n  [4, 7, 9, 10, 11, 13]\n  >>> getDivisors([4, 7, 9, 10, 11, 13, 17, 19])\n  [4, 7, 9, 10, 11, 13, 17, 19]\n  >>> getDivisors([4, 7, 9, 10, 11, 13, 17, 19, 23])\n  [4, 7, 9, 10, 11, 13, 17, 19, 23]\n  >>> getDivisors([4, 7, 9, 10, 11, 13, 17, 19, 23, 29])\n  [4, 7, 9, 10, 11, 13, 17, 19, 23, 29]\n  >>> getDivisors([4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31])\n  [4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31]\n  >>> getDivisors([4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37])\n  [4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37]\n  >>> getDivisors([4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37, 41])\n  [4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37, 41]\n  >>> getDivisors([4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  [4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n  >>> getDivisors([4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47])\n  [4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n  >>> getDivisors([4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53])\n  [4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53]\n  >>> getDivisors([4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59])\n  [4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59]\n  >>> getDivisors([4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61])\n  [4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]\n  >>> getDivisors([4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67])\n  [4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67]\n  >>> getDivisors([4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71])\n  [4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n  >>> getDivisors([4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73])\n  [4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73]\n  >>> getDivisors([4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79])\n  [4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79]\n  >>> getDivisors([4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83])\n  [4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83]\n  >>> getDivisors([4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89])\n  [4, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89]\n  >>> getDivisors([4, 7,"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number phone number is prime, and false assumed otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number phone number is prime, and false assumed otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  let sqrt = Math.floor(Math.sqrt(n));\n  for (let i = 2; i <= sqrt; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Calculate the number of divisors in a given number.\n  >>> calcDivisors(6)\n  4\n  >>> calcDivisors(10)\n  10\n  >>> calcDivisors(21)\n  21\n  >>> calcDivisors(100)\n  50\n  >>> calcDivisors(101)\n  50\n  >>> calcDivisors(11)\n  11\n  >>> calcDivisors(13441)\n  624\n  >>> calcDivisors(61)\n  6\n  >>> calcDivisors(4)\n  1\n  >>> calcDivisors(1)\n  1\n  >>> calcDivisors(0)\n  0\n  */\nconst calcDivisors = (n) => {\n  let count = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Calculate the number of divisors in a given number, and the number of\n  non-prime divisors in the given number.\n  >>> calcDivisorsAndNonPrimes(6)\n  {\n    divisors: 4,\n    nonPrimeDivisors: 0\n  }\n  >>> calcDivisorsAndNonPrimes(10)\n  {\n    divisors: 10,\n    nonPrimeDivisors: 0\n  }\n  >>> calcDivisorsAndNonPrimes(21)\n  {\n    divisors: 21,\n    nonPrimeDivisors: 0\n  }\n  >>> calcDivisorsAndNonPrimes(100)\n  {\n    divisors: 50,\n    nonPrimeDivisors: 0\n  }\n  >>> calcDivisorsAndNonPrimes(101)\n  {\n    divisors: 50,\n    nonPrimeDivisors: 1\n  }\n  >>> calcDivisorsAndNonPrimes(11)\n  {\n    divisors: 11,\n    nonPrimeDivisors: 0\n  }\n  >>> calcDivisorsAndNonPrimes(13441)\n  {\n    divisors: 624,\n    nonPrimeDivisors: 0\n  }\n  >>> calcDivisorsAndNonPrimes(61)\n  {\n    divisors: 6,\n    nonPrimeDivisors: 0\n  }\n  >>> calcDivisorsAndNonPrimes(4)\n  {\n    divisors: 1,\n    nonPrimeDivisors: 0\n  }\n  >>> calcDivisorsAndNonPrimes(1)\n  {\n    divisors: 1,\n    nonPrimeDivisors: 0\n  }\n  >>> calcDivisorsAndNonPrimes(0)\n  {\n    divisors: 0,\n    nonPrimeDivisors: 0\n  }\n  */\nconst calcDivisorsAndNonPrimes = (n) => {\n  let count = calcDivisors(n);\n  let nonPrimeCount = 0;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i) === false) {\n      nonPrimeCount++;\n      count--;\n    }\n  }\n  return {\n    divisors: count,\n    nonPrimeDivisors: nonPrimeCount\n  };\n};\n\n/*\n  Calculate the sum of all the divisors in a given number.\n  >>> calcSumOfDivisors(6)\n  6\n  >>> calcSumOfDivisors(10)\n  30\n  >>> calcSumOfDivisors(21)\n  21\n  >>> calcSumOfDivisors(100)\n  450\n  >>> calcSumOfDivisors(101)\n  451\n  >>> calcSumOfDivisors(11)\n  11\n  >>> calcSumOfDivisors(13441)\n  924\n  >>> calcSumOfDivisors(61)\n  61\n  >>> calcSumOfDivisors(4)\n  1\n  >>> calcSumOfDivisors(1)\n  1\n  >>> calcSumOfDivisors(0)\n  0\n  */\nconst calcSumOfDivisors = (n) => {\n  let sum = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  Calculate the number of perfect numbers less than a given number.\n  >>> calcPerfectNumbersLessThan(100)\n  50\n  >>> calcPerfectNumbersLessThan(101)\n  51\n  >>> calcPerfectNumbersLessThan(11)\n  11\n  >>> calcPerfectNumbersLessThan(13441)\n  1324\n  >>> calcPerfectNumbersLessThan(61)\n  61\n  >>> calcPerfectNumbersLessThan(4)\n  4\n  >>> calcPerfectNumbersLessThan(1)\n  1\n  >>> calcPerfectNumbersLessThan(0)\n  0\n  */\nconst calcPerfectNumbersLessThan = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i) === true && calcSumOfDivisors(i) === i) {\n      sum++;\n    }\n  }\n  return sum;\n};\n\n/*\n  Calculate the number of perfect numbers less than a given number,\n  and the number of perfect numbers that are not less than a given number.\n  >>> calcPerfectNumbersLessThanAndNonPerfectNumbersLessThan(100)\n  {\n    perfectNumbersLessThan: 50,\n    nonPerfectNumbersLessThan: 51"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns return key only only zero point, even if there are many. \n   Moreover, findZero only takes aim list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns return key only only zero point, even if there are many. \n   Moreover, findZero only takes aim list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  let n = xs.length;\n  for (let i = 0; i < n; i++) {\n    x += xs[i];\n  }\n  return x;\n};\n\nconsole.log(findZero([1, 2]));\nconsole.log(findZero([-6, 11, -6, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal adequate \n   to the values of the corresponding represent indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal adequate \n   to the values of the corresponding represent indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let sorted = [];\n  for(let i = 0; i < l.length; i++){\n    if(i % 3 === 0){\n      sorted.push(l[i]);\n    }\n  }\n  for(let i = 0; i < sorted.length; i++){\n    for(let j = i + 1; j < sorted.length; j++){\n      if(sorted[i] + sorted[j] === sorted[j]){\n        sorted.splice(j, 1);\n        j--;\n      }\n    }\n  }\n  return sorted;\n};\n\n/*\n *This function takes a list l and returns a list l' such that\n * l' is a permutation of l, in the sense that for all i, l[i] = l'[i]\n * if i % 3!= 0, l[i] = l[i] + 1\n * if i % 3 == 0, l[i] = l[i] + 1\n * if i % 3 == 1, l[i] = l[i] - 1\n *\n *This function is recursive\n */\nconst getPermutation = (l) => {\n  let ret = [];\n  if(l.length === 1){\n    return [l[0]];\n  }\n  let l2 = l.slice(0);\n  for(let i = 0; i < l.length; i++){\n    if(i % 3!== 0){\n      ret.push(l[i]);\n    }else{\n      ret.push(l[i] + 1);\n    }\n  }\n  return getPermutation(l2);\n};\n\nconst getPermutation2 = (l) => {\n  let ret = [];\n  for(let i = 0; i < l.length; i++){\n    if(i % 3 === 0){\n      ret.push(l[i]);\n    }else{\n      ret.push(l[i] + 1);\n    }\n  }\n  return ret;\n};\n\nconst getPermutation3 = (l) => {\n  let ret = [];\n  for(let i = 0; i < l.length; i++){\n    if(i % 3!== 0){\n      ret.push(l[i]);\n    }else{\n      ret.push(l[i] + 1);\n    }\n  }\n  return ret;\n};\n\nconst getPermutation4 = (l) => {\n  let ret = [];\n  for(let i = 0; i < l.length; i++){\n    if(i % 3 === 1){\n      ret.push(l[i]);\n    }else{\n      ret.push(l[i] - 1);\n    }\n  }\n  return ret;\n};\n\nconst getPermutation5 = (l) => {\n  let ret = [];\n  for(let i = 0; i < l.length; i++){\n    if(i % 3 === 2){\n      ret.push(l[i]);\n    }else{\n      ret.push(l[i] - 1);\n    }\n  }\n  return ret;\n};\n\nconst getPermutation6 = (l) => {\n  let ret = [];\n  for(let i = 0; i < l.length; i++){\n    if(i % 3 === 1){\n      ret.push(l[i]);\n    }else{\n      ret.push(l[i] + 1);\n    }\n  }\n  return ret;\n};\n\nconst getPermutation7 = (l) => {\n  let ret = [];\n  for(let i = 0; i < l.length; i++){\n    if(i % 3 === 2){\n      ret.push(l[i]);\n    }else{\n      ret.push(l[i] + 1);\n    }\n  }\n  return ret;\n};\n\nconst getPermutation8 = (l) => {\n  let ret = [];\n  for(let i = 0; i < l.length; i++){\n    if(i % 3 === 0){\n      ret.push(l[i]);\n    }else{\n      ret.push(l[i] - 1);\n    }\n  }\n  return ret;\n};\n\nconst getPermutation9 = (l) => {\n  let ret = [];\n  for(let i = 0; i < l.length; i++){\n    if(i % 3 === 2){\n      ret.push(l[i]);\n    }else{\n      ret.push(l[i] - 1);\n    }\n  }\n  return ret;\n};\n\nconst getPermutation10 = (l) => {\n  let ret = [];\n  for(let i = 0; i < l.length; i++){\n    if(i % 3 === 1){\n      ret.push(l[i]);\n    }else{\n      ret.push(l[i] + 1);\n    }\n  }\n  return ret;\n};\n\nconst getPermutation11 = (l) => {\n  let ret = [];\n  for(let i = 0; i < l.length; i++){\n    if(i % 3 === 2){\n      ret.push(l[i]);\n    }else{\n      ret.push(l[i] + 1);\n    }\n  }\n  return ret;\n};\n\nconst getPermutation12 = (l) => {\n  let ret = [];\n  for(let i = 0; i < l.length; i++){\n    if(i % 3 === 1){\n      ret.push(l[i]);\n    }else{\n      ret.push(l[i] - 1);\n    }\n  }\n  return ret;\n};\n\nconst getPermutation13 = (l) => {\n  let ret = [];\n  for(let"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return new Set(l).values();\n};\n\nexport default unique;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const element = l[0];\n  let i = 0;\n  for (i = 1; i < l.length; i++) {\n    if (l[i] > element) {\n      element = l[i];\n    }\n  }\n  return element;\n};\n\n/* Return maximum element in the list\n  >>> maxElement([3, 3, 1, 3, 3, 2, 5, 3, 5, 9, 5, 7, 9, 9, 8, 9, 9, 6, 9, 8, 4, 3, 3, 3, 4, 9, 5, 3, 9, 7, 9, 9, 9, 6, 9, 6, 3, 9, 9, 3, 9, 9, 8, 6, 9, 9, 3, 9, 8, 3, 3, 6, 9, 8, 7, 9, 6, 9, 3, 5, 6, 3, 9, 9, 3, 7, 9, 8, 9, 3, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let x = 0;\n  while (x <= n) {\n    const div = x % 11;\n    if (div === 0 || div === 4) {\n      x += 3;\n    } else if (div === 8) {\n      x += 2;\n    } else if (div === 9) {\n      x += 1;\n    }\n    if (x % 13 === 0) {\n      x += 3;\n    }\n    console.log(x);\n    x += 1;\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n    const sorted = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 2) {\n            sorted.push(l[i]);\n        } else {\n            sorted.push(l[i - 1]);\n        }\n    }\n    return sorted;\n};\n\nmodule.exports = sortEven;\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string drawstring by cycling groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string drawstring by cycling groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var decoded = '', i = 0; \n   for (let j = 0; j < s.length; j += 3) { \n     if (j + 3 <= s.length) { \n       decoded += s.slice(i, j) + s.slice(j + 1, j + 3);\n       i = j + 3;\n     }\n   } \n   return decoded;\n}\n*/\n\nfunction decodeCyclic(s) {\n  return decodeCyclic2(s, \" \");\n}\n\nfunction decodeCyclic2(s, b) {\n  return decodeCyclic3(s, b, \" \");\n}\n\nfunction decodeCyclic3(s, b, bb) {\n  return decodeCyclic4(s, b, bb, \" \");\n}\n\nfunction decodeCyclic4(s, b, bb, bb2) {\n  return decodeCyclic5(s, b, bb, bb2, \" \");\n}\n\nfunction decodeCyclic5(s, b, bb, bb2, bb3) {\n  return decodeCyclic6(s, b, bb, bb2, bb3, \" \");\n}\n\nfunction decodeCyclic6(s, b, bb, bb2, bb3, bb4) {\n  return decodeCyclic7(s, b, bb, bb2, bb3, bb4, \" \");\n}\n\nfunction decodeCyclic7(s, b, bb, bb2, bb3, bb4, bb5) {\n  return decodeCyclic8(s, b, bb, bb2, bb3, bb4, bb5, \" \");\n}\n\nfunction decodeCyclic8(s, b, bb, bb2, bb3, bb4, bb5, bb6) {\n  return decodeCyclic9(s, b, bb, bb2, bb3, bb4, bb5, bb6, \" \");\n}\n\nfunction decodeCyclic9(s, b, bb, bb2, bb3, bb4, bb5, bb6, bb7) {\n  return decodeCyclic10(s, b, bb, bb2, bb3, bb4, bb5, bb6, bb7, \" \");\n}\n\nfunction decodeCyclic10(s, b, bb, bb2, bb3, bb4, bb5, bb6, bb7, bb8) {\n  return decodeCyclic11(s, b, bb, bb2, bb3, bb4, bb5, bb6, bb7, bb8, \" \");\n}\n\nfunction decodeCyclic11(s, b, bb, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9) {\n  return decodeCyclic12(s, b, bb, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9, \" \");\n}\n\nfunction decodeCyclic12(s, b, bb, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9, bb10) {\n  return decodeCyclic13(s, b, bb, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9, bb10, \" \");\n}\n\nfunction decodeCyclic13(s, b, bb, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9, bb10, bb11) {\n  return decodeCyclic14(s, b, bb, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9, bb10, bb11, \" \");\n}\n\nfunction decodeCyclic14(s, b, bb, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9, bb10, bb11, bb12) {\n  return decodeCyclic15(s, b, bb, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9, bb10, bb11, bb12, \" \");\n}\n\nfunction decodeCyclic15(s, b, bb, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9, bb10, bb11, bb12, bb13) {\n  return decodeCyclic16(s, b, bb, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9, bb10, bb11, bb12, bb13, \" \");\n}\n\nfunction decodeCyclic16(s, b, bb, bb2, bb3, bb4,"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number phone number and it's also prime premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number phone number and it's also prime premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  const prime = (n) => {\n    if (n < 2) {\n      return false\n    } else if (n === 2) {\n      return true\n    } else {\n      return (n % 2 === 0)\n    }\n  }\n\n  const fib = (n) => {\n    if (n < 2) {\n      return 1\n    } else {\n      return fib(n - 1) + fib(n - 2)\n    }\n  }\n\n  return fib(n)\n}\n\nexport default primeFib\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let unique = {};\n  return l.reduce((acc, x) => {\n    if (acc[x]) {\n      return acc;\n    }\n    let val = x + acc[x];\n    if (val === 0) {\n      return acc;\n    }\n    if (unique[val]) {\n      return acc;\n    }\n    unique[val] = true;\n    return Object.assign(acc, { [x]: 1 });\n  }, {});\n};\n\nconst list = [2, 3, -2, 1, -1, 7, 0, -9];\n\nconsole.log(triplesSumToZero(list));\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight uncoiled infinitely long retentive line. \n   n cars car are driving left bequeath to right;   simultaneously, a different unlike set stage set of n cars cable car \n   are driving repel right proper to left.    The two sets of cars start get down out being very far from \n   each other.   All cars car move affect in the same speed.   Two cars are said to collide \n   when a car that's moving travel left bequeath to right good hits hit a car that's moving act right to left. \n   However, the cars are infinitely boundlessly sturdy and strong; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This function outputs the number issue of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly straight uncoiled infinitely long retentive line. \n   n cars car are driving left bequeath to right;   simultaneously, a different unlike set stage set of n cars cable car \n   are driving repel right proper to left.    The two sets of cars start get down out being very far from \n   each other.   All cars car move affect in the same speed.   Two cars are said to collide \n   when a car that's moving travel left bequeath to right good hits hit a car that's moving act right to left. \n   However, the cars are infinitely boundlessly sturdy and strong; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This function outputs the number issue of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n  return (n+1) * (n+2) / 2\n}\n*/\n\n// TODO: Implement this function\n\npublic class Solution {\n    public int carRace(int numberOfCars) {\n        return (numberOfCars+1)*(numberOfCars+2)/2;\n    }\n}<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const incr = (l, i) => l[i] + 1\n  return Array.from(l).reduce(incr, [])\n}\n\n/**\n  * Return list with elements decremented by 1.\n  * @param {Array} l\n  * @return {Array}\n  * @example\n  *   decrList([1, 2, 3])\n  *   #=> [0, 1, 2]\n  *   decrList([6, 4, 6, 3, 4, 4, 10, 1, 124])\n  *   #=> [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst decrList = (l) => {\n  const decr = (l, i) => l[i] - 1\n  return Array.from(l).reduce(decr, [])\n}\n\n/**\n  * Return list with elements shifted left by 1.\n  * @param {Array} l\n  * @return {Array}\n  * @example\n  *   shiftLeftList([1, 2, 3])\n  *   #=> [2, 3, 4]\n  *   shiftLeftList([6, 4, 6, 3, 4, 4, 10, 1, 124])\n  *   #=> [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst shiftLeftList = (l) => {\n  const shift = (l, i) => (l[i] << 1) | (l[i + 1] >>> 31)\n  return Array.from(l).reduce(shift, [])\n}\n\n/**\n  * Return list with elements shifted right by 1.\n  * @param {Array} l\n  * @return {Array}\n  * @example\n  *   shiftRightList([1, 2, 3])\n  *   #=> [1, 0, 2]\n  *   shiftRightList([6, 4, 6, 3, 4, 4, 10, 1, 124])\n  *   #=> [6, 5, 4, 3, 4, 4, 9, 0, 123]\n  */\nconst shiftRightList = (l) => {\n  const shift = (l, i) => (l[i] >>> 1) | (l[i + 1] << 31)\n  return Array.from(l).reduce(shift, [])\n}\n\n/**\n  * Return list with elements shifted left and right by 1.\n  * @param {Array} l\n  * @return {Array}\n  * @example\n  *   shiftLeftAndRightList([1, 2, 3])\n  *   #=> [2, 3, 4]\n  *   shiftLeftAndRightList([6, 4, 6, 3, 4, 4, 10, 1, 124])\n  *   #=> [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst shiftLeftAndRightList = (l) => {\n  const shift = (l, i) => ((l[i] << 1) | (l[i + 1] >>> 31))\n  return Array.from(l).reduce(shift, [])\n}\n\nmodule.exports = {\n  incrList,\n  decrList,\n  shiftLeftList,\n  shiftRightList,\n  shiftLeftAndRightList\n}\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  if (!l) return false\n  let i = 0\n  while (i < l.length) {\n    let j = i + 1\n    while (j < l.length) {\n      if (l[i] === 0 && l[j] === 0) return true\n      if (l[i]!== 0 && l[j]!== 0) break\n      j++\n    }\n    i++\n  }\n  return false\n}\n\nmodule.exports = pairsSumToZero\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number phone number x to base.\n   return string representation theatrical performance after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number phone number x to base.\n   return string representation theatrical performance after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n    const baseDigits = new Array(base);\n    for(let i = 1; i <= base; i++) {\n        baseDigits[i - 1] = i.toString();\n    }\n    let output = x.toString();\n    for(let i = base; i > 0; i--) {\n        output = output.split('').reverse().join(baseDigits[x % i]);\n        x = x / i;\n    }\n    return output;\n};\n\n/**\n * @param {number} x\n * @param {number} base\n * @return {string}\n * @description \n * Given a positive integer x and a base, return the base-th number in the \n * number string representing the number.\n * For example, if base is 2, then output is \"100\".\n * Input base must be less than 10.\n *\n * @examples\n * changeBase(10, 2)\n * // => '1010'\n * changeBase(10, 8)\n * // => '1011'\n * changeBase(10, 1)\n * // => '10'\n * changeBase(10, 0)\n * // => '10'\n */\nconst changeBase = (x, base) => {\n    const baseDigits = new Array(base);\n    for(let i = 1; i <= base; i++) {\n        baseDigits[i - 1] = i.toString();\n    }\n    let output = x.toString();\n    for(let i = base; i > 0; i--) {\n        output = output.split('').reverse().join(baseDigits[x % i]);\n        x = x / i;\n    }\n    return output;\n};\n\n// TESTING\nconst test = [\n    [8, 2],\n    [8, 3],\n    [7, 2],\n];\n\ntest.forEach(([x, base]) => {\n    console.log(`${x} in base ${base} is ${changeBase(x, base)}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high gamey return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high gamey return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(h * (h - 2 * a));\n};\n\n/*Given length of a side and high gamey return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  13.5\n  */\nconst trapezoidArea = (a, h, w) => {\n  return triangleArea(a, h) + triangleArea(w, h);\n};\n\n/*Given length of a side and high gamey return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  13.5\n  */\nconst trapezoidArea = (a, h, w) => {\n  return triangleArea(a, h) + triangleArea(w, h);\n};\n\n/*Given length of a side and high gamey return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  13.5\n  */\nconst trapezoidArea = (a, h, w) => {\n  return triangleArea(a, h) + triangleArea(w, h);\n};\n\n/*Given length of a side and high gamey return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  13.5\n  */\nconst trapezoidArea = (a, h, w) => {\n  return triangleArea(a, h) + triangleArea(w, h);\n};\n\n/*Given length of a side and high gamey return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  13.5\n  */\nconst trapezoidArea = (a, h, w) => {\n  return triangleArea(a, h) + triangleArea(w, h);\n};\n\n/*Given length of a side and high gamey return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  13.5\n  */\nconst trapezoidArea = (a, h, w) => {\n  return triangleArea(a, h) + triangleArea(w, h);\n};\n\n/*Given length of a side and high gamey return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  13.5\n  */\nconst trapezoidArea = (a, h, w) => {\n  return triangleArea(a, h) + triangleArea(w, h);\n};\n\n/*Given length of a side and high gamey return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  13.5\n  */\nconst trapezoidArea = (a, h, w) => {\n  return triangleArea(a, h) + triangleArea(w, h);\n};\n\n/*Given length of a side and high gamey return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  13.5\n  */\nconst trapezoidArea = (a, h, w) => {\n  return triangleArea(a, h) + triangleArea(w, h);\n};\n\n/*Given length of a side and high gamey return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  13.5\n  */\nconst trapezoidArea = (a, h, w) => {\n  return triangleArea(a, h) + triangleArea(w, h);\n};\n\n/*Given length of a side and high gamey return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  13.5\n  */\nconst trapezoidArea = (a, h, w) => {\n  return triangleArea(a, h) + triangleArea(w, h);\n};\n\n/*Given length of a side and high gamey return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  13.5\n  */\nconst trapezoidArea = (a, h, w) => {\n  return triangleArea(a, h) + triangleArea(w, h);\n};\n\n/*Given length of a side and high gamey return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  13.5\n  */\nconst trapezoidArea = (a, h, w) => {\n  return triangleArea(a, h) + triangleArea(w, h);\n};\n\n/*Given length of a side and high gamey return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  13.5\n  */\nconst trapezoidArea = (a, h, w) => {\n  return triangleArea(a, h) + triangleArea(w, h);\n};\n\n/*Given length of a side and high gamey return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  13.5\n  */\nconst trapezoidArea = (a, h, w) => {\n  return triangleArea(a, h) + triangleArea(w, h);\n};\n\n/*Given length of a side and high gamey return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  13.5\n  */\nconst trapezoidArea = (a, h, w) => {\n  return triangleArea(a, h) + triangleArea(w, h);\n};\n\n/*Given length of a side and high gamey return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  13.5\n  */\nconst trapezoidArea = (a, h, w) => {\n  return triangleArea(a, h) + triangleArea(w, h);\n};\n\n/*Given length of a side and high gamey return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  13.5\n  */\nconst trapezoidArea = (a, h, w) => {\n  return triangleArea(a, h) + triangleArea(w, h);\n};\n\n/*Given length of a side and high gamey return area for a triangle trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  13.5\n  */\nconst tra"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write compose a function to efficiently compute calculate the n-th element of the fib4 number act sequence succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write compose a function to efficiently compute calculate the n-th element of the fib4 number act sequence succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 2) {\n    return 1;\n  }\n  const a = fib4(n - 1);\n  const b = fib4(n - 2);\n  return a + b + fib4(n - 3) + fib4(n - 4);\n}\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let count = 0;\n  let median;\n  l.forEach((v) => {\n    if (count === 0) {\n      median = v;\n    }\n    else if (count === 1) {\n      median = (l[0] + v) / 2;\n    }\n    else {\n      if (l[count - 1] < v) {\n        median = (l[count - 1] + v) / 2;\n      }\n      else {\n        median = l[count - 1];\n      }\n    }\n    count++;\n  });\n  return median;\n};\n\nconsole.log(median([3, 1, 2, 4, 5]));\nconsole.log(median([-10, 4, 6, 1000, 10, 20]));\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string drawstring is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if given string drawstring is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let i = 0;\n    let j = text.length - 1;\n\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n\n/**\n  Returns the longest palindrome\n  >>> longestPalindrome('babad')\n  'bab'\n  >>> longestPalindrome('babad')\n  'bab'\n  >>> longestPalindrome('abcdcba')\n  'abcd'\n  >>> longestPalindrome('babad')\n  'bab'\n  >>> longestPalindrome('aa')\n  'aa'\n  >>> longestPalindrome('aaa')\n  'aaa'\n  >>> longestPalindrome('abcdcba')\n  'abcd'\n  >>> longestPalindrome('babad')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('abcdcba')\n  'abcd'\n  >>> longestPalindrome('abcdcba')\n  'abcd'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('babb')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('bab')\n  'bab'\n  >>> longestPalindrome('"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": false, "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const base = Math.pow(2, n);\n  return Math.floor(base / p);\n};\n\nexport default modp;\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string drawstring by shifting every character quality by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes aim as input string bowed stringed instrument encoded with encode_shift function affair. Returns reappearance decoded decode string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string drawstring by shifting every character quality by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes aim as input string bowed stringed instrument encoded with encode_shift function affair. Returns reappearance decoded decode string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n   ) ).join(\"\");\n }\n*/\n\nconsole.log(encodeShift(\"a\")); // \"a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a     a a a a a a a a. a a a a a a a a a a a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a a a a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a a a a a  a a a a a a a a a    a a a a a a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a a a a a                                   a a a a a a a a a a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a a a a aa a a a., a a a a a a a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a a a, a a a a a a a a a a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a a a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a aa a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a a a a\n\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a aa a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a a aa a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a a a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a a a a\n\nconsole.log(decodeShift(\"a a a a a a a a a a a a a a a a a a a a a a a a a\n\nconsole.log(decodeShift(\""}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string drawstring and returns string drawstring without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string drawstring and returns string drawstring without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/(?:[aeiouyAEIOUY]|[^aeiouyAEIOUY])+/g, '$1');\n};\n\n/*\n  removeVowels is a function that takes string drawstring and returns string drawstring without vowels.\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiouyAEIOUY]+/g, '');\n};\n\n/*\n  removeVowels is a function that takes string drawstring and returns string drawstring without vowels.\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[AEIOU]+/g, '');\n};\n\n/*\n  removeVowels is a function that takes string drawstring and returns string drawstring without vowels.\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[AEIOU]+/g, '');\n};\n\n/*\n  removeVowels is a function that takes string drawstring and returns string drawstring without vowels.\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[AEIOUY]+/g, '');\n};\n\n/*\n  removeVowels is a function that takes string drawstring and returns string drawstring without vowels.\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[AEIOU]+/g, '');\n};\n\n/*\n  removeVowels is a function that takes string drawstring and returns string drawstring without vowels.\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[AEIOU]+/g, '');\n};\n\n/*\n  removeVowels is a function that takes string drawstring and returns string drawstring without vowels.\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[AEIOU]+/g, '');\n};\n\n/*\n  removeVowels is a function that takes string drawstring and returns string drawstring without vowels.\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[AEIOU]+/g, '');\n};\n\n/*\n  removeVowels is a function that takes string drawstring and returns string drawstring without vowels.\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold brink t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l are below threshold brink t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Tests\n\n/*\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1,"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\nconsole.log(add(1, 2));\nconsole.log(add(5, 7));<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters quality.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same characters quality.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const q0 = charsQuality(s0)\n  const q1 = charsQuality(s1)\n  return q0 === q1\n}\n\n/*\n  Check if two words are the same.\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  false\n  >>> sameWords('eabcd', 'dddddddabce')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  true\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('eabcd', 'ddddddd')\n  false\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcd', 'dddddddabce')\n  true\n  >>> sameWords('eabcd', 'dddddddabce')\n  true\n  >>> sameWords('eabcd', 'ddddddd')\n  true\n  */\nconst sameWords = (s0, s1) => {\n  const q0 = charsQuality(s0)\n  const q1 = charsQuality(s1)\n  return q0 === q1\n}\n\n/*\n  Check if two words have the same characters quality.\n  >>> sameCharsQuality('eabcd', 'dddddddabc')\n  true\n  >>> sameCharsQuality('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  false\n  >>> sameCharsQuality('eabcd', 'dddddddabce')\n  true\n  >>> sameCharsQuality('eabcd', 'dddddddabc')\n  true\n  >>> sameCharsQuality('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsQuality('eabcd', 'ddddddd')\n  false\n  >>> sameCharsQuality('abcd', 'dddddddabc')\n  true\n  >>> sameCharsQuality('abcd', 'dddddddabce')\n  false\n  >>> sameCharsQuality('eabcd', 'dddddddabce')\n  true\n  >>> sameCharsQuality('eabcd', 'ddddddd')\n  true\n  */\nconst sameCharsQuality = (s0, s1) => {\n  const q0 = charsQuality(s0)\n  const q1 = charsQuality(s1)\n  return q0 === q1\n}\n\nmodule.exports = {\n  sameChars,\n  sameWords,\n  sameCharsQuality,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10, memo={})\n  55\n  >>> fib(1, memo={})\n  1\n  >>> fib(8, memo={})\n  21\n  */\nconst fib = (n, memo = {}) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n in memo) return memo[n]\n  return memo[n] = fib(n - 1, memo) + fib(n - 2, memo)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10, memo={}, cache={})\n  55\n  >>> fib(1, memo={}, cache={})\n  1\n  >>> fib(8, memo={}, cache={})\n  21\n  */\nconst fib = (n, memo = {}, cache = {}) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n in cache) return cache[n]\n  if (n in memo) return memo[n]\n  return memo[n] = fib(n - 1, memo, cache) + fib(n - 2, memo, cache)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10, memo={}, cache={}, cacheSize=10)\n  55\n  >>> fib(1, memo={}, cache={}, cacheSize=10)\n  1\n  >>> fib(8, memo={}, cache={}, cacheSize=10)\n  21\n  */\nconst fib = (n, memo = {}, cache = {}, cacheSize = 10) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n in cache) return cache[n]\n  if (n in memo) return memo[n]\n  if (cache.size < cacheSize) {\n    cache[n] = fib(n - 1, memo, cache, cacheSize) + fib(n - 2, memo, cache, cacheSize)\n    return cache[n]\n  }\n  return memo[n] = fib(n - 1, memo, cache, cacheSize) + fib(n - 2, memo, cache, cacheSize)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10, memo={}, cache={}, cacheSize=10, cacheLimit=3)\n  55\n  >>> fib(1, memo={}, cache={}, cacheSize=10, cacheLimit=3)\n  1\n  >>> fib(8, memo={}, cache={}, cacheSize=10, cacheLimit=3)\n  21\n  */\nconst fib = (n, memo = {}, cache = {}, cacheSize = 10, cacheLimit = 3) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n in cache) return cache[n]\n  if (cache.size < cacheSize) {\n    cache[n] = fib(n - 1, memo, cache, cacheSize, cacheLimit) + fib(n - 2, memo, cache, cacheSize, cacheLimit)\n    return cache[n]\n  }\n  return memo[n] = fib(n - 1, memo, cache, cacheSize, cacheLimit) + fib(n - 2, memo, cache, cacheSize, cacheLimit)\n}\n\n/* Return n-th Fibonacci number.\n  >>> fib(10, memo={}, cache={}, cacheSize=10, cacheLimit=3, cacheDepth=2)\n  55\n  >>> fib(1, memo={}, cache={}, cacheSize=10, cacheLimit=3, cacheDepth=2)\n  1\n  >>> fib(8, memo={}, cache={}, cacheSize=10, cacheLimit=3, cacheDepth=2)\n  21\n  */\nconst fib = (n, memo = {}, cache = {}, cacheSize = 10, cacheLimit = 3, cacheDepth = 2) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n in cache) return cache[n]\n  if (cache.size < cacheSize) {\n    cache[n] = fib(n - 1, memo, cache, cacheSize, cacheLimit, cacheDepth + 1) + fib(n - 2, memo, cache, cacheSize, cacheLimit, cacheDepth + 1)\n    return cache[n]\n  }\n  return memo[n] = fib(n - 1, memo, cache, cacheSize, cacheLimit, cacheDepth + 1) + fib(n - 2, memo, cache, cacheSize, cacheLimit, cacheDepth + 1)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    stack.push(brackets[i])\n    if (stack[stack.length - 1] === '>') {\n      if (stack.length === 2) {\n        return false\n      }\n      stack.pop()\n    }\n    if (stack.length === 2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a string, return the string with all punctuation removed.\n  Keep punctuation inside of parentheses.\n  Example:\n    >>> removePunctuation(\"What a nice day\")\n    'What a nice day'\n    >>> removePunctuation(\"What a nice day! I like to have my <cool> day\")\n    'What a nice day! I like to have my <cool> day'\n  */\nconst removePunctuation = (string) => {\n  let brackets = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '(') {\n      brackets.push('(')\n    }\n    if (string[i] === ')') {\n      brackets.push(')')\n    }\n  }\n  for (let i = 0; i < brackets.length; i++) {\n    string = string.replace(brackets[i], '')\n  }\n  return string\n}\n\n/*\n  Given a string, return a list of all the words in the string.\n  Example:\n    >>> splitWords(\"a nice day\")\n    ['a', 'nice', 'day']\n    >>> splitWords(\"a nice day! I like to have my <cool> day\")\n    ['a', 'nice', 'day!', 'I', 'like', 'to', 'have','my', '<cool>', 'day']\n  */\nconst splitWords = (string) => {\n  let words = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i].match(/[A-Za-z]+/)) {\n      words.push(string[i])\n    }\n  }\n  return words\n}\n\n/*\n  Given a string, return a list of all the words in the string,\n  sorted in alphabetical order.\n  Example:\n    >>> sortWords(\"a nice day\")\n    ['a', 'nice', 'day']\n    >>> sortWords(\"a nice day! I like to have my <cool> day\")\n    ['a', 'cool', 'day!', 'I', 'like', 'nice', 'to', 'day']\n  */\nconst sortWords = (string) => {\n  let words = splitWords(string)\n  words.sort()\n  return words\n}\n\n/*\n  Given a string, return the string with all whitespace removed.\n  Example:\n    >>> removeWhitespace(\"  a nice day! I like to have my <cool> day  \")\n    'a nice day! I like to have my <cool> day'\n  */\nconst removeWhitespace = (string) => {\n  return string.replace(/\\s+/g, '')\n}\n\n/*\n  Given a string, return the string with all punctuation removed.\n  Keep punctuation inside of parentheses.\n  Example:\n    >>> removePunctuation(\"What a nice day! I like to have my <cool> day\")\n    'What a nice day! I like to have my <cool> day'\n  */\nconst removePunctuation = (string) => {\n  let brackets = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '(') {\n      brackets.push('(')\n    }\n    if (string[i] === ')') {\n      brackets.push(')')\n    }\n  }\n  for (let i = 0; i < brackets.length; i++) {\n    string = string.replace(brackets[i], '')\n  }\n  return string\n}\n\n/*\n  Given a string, return the string with all whitespace removed,\n  and punctuation removed.\n  Example:\n    >>> removeWhitespaceAndPunctuation(\"  What a nice day! I like to have my <cool> day  \")\n    'What a nice day! I like to have my <cool> day'\n  */\nconst removeWhitespaceAndPunctuation = (string) => {\n  return removePunctuation(removeWhitespace(string))\n}\n\n/*\n  Given a string, return the string with all whitespace removed.\n  Example:\n    >>> removeWhitespace(\"  a nice day! I like to have my <cool> day  \")\n    'a nice day! I like to have my <cool> day'\n  */\nconst removeWhitespace = (string) => {\n  return string.replace(/\\s+/g, '')\n}\n\n/*\n  Given a string, return the string with all whitespace removed,\n  and punctuation removed, except for parenthesis.\n  Example:\n    >>> removeWhitespaceAndPunctuation(\"What a nice day! I like to have my <cool> day\")\n    'What a nice day! I like to have my <cool> day'\n  */\nconst removeWhitespaceAndPunctuation = (string) => {\n  return removePunctuation(removeWhitespace(string))\n}\n\n/*\n  Given a string, return the string with all whitespace removed,\n  and punctuation removed, except for parenthesis.\n  Keep punctuation inside of parentheses.\n  Example:\n    >>> removeWhitespaceAndPunctuation(\"What a nice day! I like to have my <cool> day\")\n    'What a nice day! I like to have my <cool> day'\n  */\nconst removeWhitespaceAndPunctuation = (string) => {\n  let brackets = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '(') {\n      brackets.push('(')\n    }\n    "}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const s = l.sort((a, b) => a - b)\n  return s[1] > s[2]? true : false\n}\n\nmodule.exports = monotonic\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements element for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elements element for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const i = 0\n  const j = 0\n  const len1 = l1.length\n  const len2 = l2.length\n  const common = []\n\n  while (i < len1 && j < len2) {\n    if (l1[i] === l2[j]) {\n      common.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] < l2[j]) {\n      i++\n    } else if (l1[i] > l2[j]) {\n      j++\n    }\n  }\n  return common\n}\n\nexport default common\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n == 2) return 2\n  if (n % 2 == 0) return largestPrimeFactor(n / 2)\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i == 0) return i\n  }\n  return largestPrimeFactor(Math.sqrt(n))\n}\n\n/*\n  Find the difference between the sum of the squares of the first ten natural\n  numbers and the square of the sum of the first ten natural numbers.\n  >>> differenceSumOfSquares()\n  0.0\n  >>> differenceSumOfSquares(1)\n  1.0\n  >>> differenceSumOfSquares(1.0)\n  1.0\n  >>> differenceSumOfSquares(2)\n  1.0\n  >>> differenceSumOfSquares(3)\n  1.0\n  >>> differenceSumOfSquares(4)\n  1.0\n  >>> differenceSumOfSquares(5)\n  1.0\n  >>> differenceSumOfSquares(6)\n  1.0\n  >>> differenceSumOfSquares(7)\n  1.0\n  >>> differenceSumOfSquares(8)\n  1.0\n  >>> differenceSumOfSquares(9)\n  1.0\n  >>> differenceSumOfSquares(10)\n  1.0\n  >>> differenceSumOfSquares(11)\n  1.0\n  >>> differenceSumOfSquares(12)\n  1.0\n  >>> differenceSumOfSquares(13)\n  1.0\n  >>> differenceSumOfSquares(14)\n  1.0\n  >>> differenceSumOfSquares(15)\n  1.0\n  >>> differenceSumOfSquares(16)\n  1.0\n  >>> differenceSumOfSquares(17)\n  1.0\n  >>> differenceSumOfSquares(18)\n  1.0\n  >>> differenceSumOfSquares(19)\n  1.0\n  >>> differenceSumOfSquares(20)\n  1.0\n  >>> differenceSumOfSquares(21)\n  1.0\n  >>> differenceSumOfSquares(22)\n  1.0\n  >>> differenceSumOfSquares(23)\n  1.0\n  >>> differenceSumOfSquares(24)\n  1.0\n  >>> differenceSumOfSquares(25)\n  1.0\n  >>> differenceSumOfSquares(26)\n  1.0\n  >>> differenceSumOfSquares(27)\n  1.0\n  >>> differenceSumOfSquares(28)\n  1.0\n  >>> differenceSumOfSquares(29)\n  1.0\n  >>> differenceSumOfSquares(30)\n  1.0\n  >>> differenceSumOfSquares(31)\n  1.0\n  >>> differenceSumOfSquares(32)\n  1.0\n  >>> differenceSumOfSquares(33)\n  1.0\n  >>> differenceSumOfSquares(34)\n  1.0\n  >>> differenceSumOfSquares(35)\n  1.0\n  >>> differenceSumOfSquares(36)\n  1.0\n  >>> differenceSumOfSquares(37)\n  1.0\n  >>> differenceSumOfSquares(38)\n  1.0\n  >>> differenceSumOfSquares(39)\n  1.0\n  >>> differenceSumOfSquares(40)\n  1.0\n  >>> differenceSumOfSquares(41)\n  1.0\n  >>> differenceSumOfSquares(42)\n  1.0\n  >>> differenceSumOfSquares(43)\n  1.0\n  >>> differenceSumOfSquares(44)\n  1.0\n  >>> differenceSumOfSquares(45)\n  1.0\n  >>> differenceSumOfSquares(46)\n  1.0\n  >>> differenceSumOfSquares(47)\n  1.0\n  >>> differenceSumOfSquares(48)\n  1.0\n  >>> differenceSumOfSquares(49)\n  1.0\n  >>> differenceSumOfSquares(50)\n  1.0\n  >>> differenceSumOfSquares(51)\n  1.0\n  >>> differenceSumOfSquares(52)\n  1.0\n  >>> differenceSumOfSquares(53)\n  1.0\n  >>> differenceSumOfSquares(54)\n  1.0\n  >>> differenceSumOfSquares(55)\n  1.0\n  >>> differenceSumOfSquares(56)\n  1.0\n  >>> differenceSumOfSquares(57)\n  1.0\n  >>> differenceSumOfSquares(58)\n  1.0\n  >>> differenceSumOfSquares(59)\n  1.0\n  >>> differenceSumOfSquares(60)\n  1.0\n  >>> differenceSumOfSquares(61)\n  1.0\n  >>> differenceSumOfSquares(62)\n  1.0\n  >>> differenceSumOfSquares(63)\n  1.0\n  >>> differenceSumOfSquares(64)\n  1.0\n  >>> differenceSumOfSquares(65)\n  1.0\n  >>> differenceSumOfSquares(66)\n  1.0\n  >>> differenceSumOfSquares(67)\n  1.0\n  >>> differenceSumOfSquares(68)\n  1.0\n  >>> differenceSumOfSquares(69)\n  1.0\n  >>> differenceSumOfSquares(70)\n  1.0\n  >>> differenceSumOfSquares(71)\n  1.0\n  >>> differenceSumOfSquares(72)\n  1.0\n  >>> differenceSumOfSquares(73)\n  1.0\n  >>> differenceSumOfSquares(74)\n  1.0\n  >>> differenceSumOfSquares(75)\n  1.0\n  >>> differenceSumOfSquares(76)\n  1.0\n  >>> differenceSumOfSquares(77)\n  1.0\n  >>> differenceSumOfSquares(78)\n  1.0\n  >>> differenceSumOfSquares(79)\n  1.0\n  >>> differenceSumOfSquares(80)\n  1.0\n  >>> differenceSumOfSquares(81)\n  1.0\n  >>> differenceSumOfSquares(82)\n  1.0\n  >>> differenceSumOfSquares(83)\n  1."}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers issue from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that sums numbers issue from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return Array(n + 1).reduce((a, i) => a + i, 0)\n}\n\nexport default sumToN\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsLen = brackets.length\n  const bracketsLenMinusOne = bracketsLen - 1\n  const bracketsLenMinusTwo = bracketsLen - 2\n  return bracketsLen === bracketsLenMinusOne && bracketsLenMinusOne === bracketsLenMinusTwo\n}\n\nmodule.exports = correctBracketing\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return restitution derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return restitution derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length;\n  let deriv = [];\n  for (let i = 0; i < len; i++) {\n    deriv[i] = 0;\n    if (i > 0) {\n      deriv[i] = deriv[i - 1] + xs[i - 1];\n    }\n    deriv[i] *= xs[i];\n  }\n  return deriv;\n};\n\nconst findMax = (xs) => {\n  let max = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] > max) {\n      max = xs[i];\n    }\n  }\n  return max;\n};\n\nconst findMin = (xs) => {\n  let min = Infinity;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] < min) {\n      min = xs[i];\n    }\n  }\n  return min;\n};\n\nconst findCoeff = (xs, x) => {\n  let i = 0;\n  while (x >= xs[i]) {\n    i++;\n  }\n  return i;\n};\n\nconst integrate = (x1, x2, xs) => {\n  let ys = [];\n  for (let i = 0; i < xs.length; i++) {\n    ys[i] = xs[i] * (x2 - x1);\n  }\n  return ys;\n};\n\nconst findInterval = (ys, y) => {\n  let i = 0;\n  while (ys[i] <= y) {\n    i++;\n  }\n  return i;\n};\n\n/* Given a polynomial, find the roots of the derivative of the polynomial.\n   Return the roots in the form of a list of coefficients.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst findRoots = (xs) => {\n  const len = xs.length;\n  let roots = [];\n  for (let i = 0; i < len; i++) {\n    let root = 0;\n    if (i > 0) {\n      root = xs[i - 1] - xs[i];\n    }\n    roots[i] = root;\n  }\n  return roots;\n};\n\nconst findCoeffInInterval = (xs, x) => {\n  let i = findInterval(xs, x);\n  return xs[i];\n};\n\n/* xs are the coefficients of a polynomial. \n   The number of coefficients in xs.length is the degree of the polynomial.\n   Return the roots of the derivative of the polynomial.\n  */\nconst findRoots2 = (xs) => {\n  let len = xs.length;\n  let roots = [];\n  for (let i = 0; i < len; i++) {\n    let root = 0;\n    if (i > 0) {\n      root = xs[i - 1] - xs[i];\n    }\n    roots[i] = root;\n  }\n  return roots;\n};\n\n/* Given a polynomial, find the roots of the derivative of the polynomial.\n   Return the roots in the form of a list of coefficients.\n  */\nconst findRoots3 = (xs) => {\n  let len = xs.length;\n  let roots = [];\n  for (let i = 0; i < len; i++) {\n    let root = 0;\n    if (i > 0) {\n      root = xs[i - 1] - xs[i];\n    }\n    roots[i] = root;\n  }\n  return roots;\n};\n\nmodule.exports = {\n  findMax,\n  findMin,\n  findCoeff,\n  findRoots,\n  findRoots2,\n  findRoots3,\n  findInterval,\n  findCoeffInInterval,\n  derivative,\n  integrate,\n  findRoots3,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write compose a function to efficiently compute calculate the n-th element of the fibfib number act sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write compose a function to efficiently compute calculate the n-th element of the fibfib number act sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string drawstring representing \n   a word parole as input and returns hark back the number of vowels in the string bowed stringed instrument. \n   Vowels in this case event are' a',' e vitamin e',' i',' o',' u uracil'. Here,' y' is also besides a \n   vowel, but only when it is at the end goal of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which takes a string drawstring representing \n   a word parole as input and returns hark back the number of vowels in the string bowed stringed instrument. \n   Vowels in this case event are' a',' e vitamin e',' i',' o',' u uracil'. Here,' y' is also besides a \n   vowel, but only when it is at the end goal of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) >= 0) {\n      count++\n    }\n  }\n  if (s.charAt(s.length - 1) === 'y') {\n    count++\n  }\n  return count\n}\n\nmodule.exports = vowelsCount\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right proper by shift\n   and return the result as a string drawstring. \n   If shift > number of digits finger, return digits reversed change by reversal.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right proper by shift\n   and return the result as a string drawstring. \n   If shift > number of digits finger, return digits reversed change by reversal.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const xLength = x.length;\n  if (shift >= xLength) {\n    return x.split('').reverse().join('');\n  }\n  return x.split('').reverse().join('');\n}\n\n/*\n  Input: x = 12, shift = 2\n  Output: \"1112\"\n*/\nconst circularShift2 = (x, shift) => {\n  const xLength = x.length;\n  const digitSum = xLength - shift;\n  const remainder = xLength % shift;\n  if (digitSum === 0) {\n    return x.split('').reverse().join('');\n  }\n  return x.split('').reverse().join('');\n}\n\n//Test case\nconst testCircularShift = [\n  [12, 1, '21'],\n  [12, 2, '12'],\n];\n\nconsole.log(\n  'Circular shift test case:\\n',\n  testCircularShift.map((x) => {\n    const shift = x[1];\n    const x = x[0];\n    return `Input: ${x}, shift: ${shift}\\nOutput: ${circularShift(x, shift)}`;\n  })\n);\n\nconsole.log(\n  'Circular shift test case:\\n',\n  testCircularShift.map((x) => {\n    const shift = x[1];\n    const x = x[0];\n    return `Input: ${x}, shift: ${shift}\\nOutput: ${circularShift2(x, shift)}`;\n  })\n);\n\n/*\n  Input: x = 2147483648, shift = 1\n  Output: \"2147483647\"\n  Input: x = 2147483648, shift = 2\n  Output: \"2147483646\"\n  Input: x = 2147483648, shift = 3\n  Output: \"2147483646\"\n  Input: x = 2147483648, shift = 4\n  Output: \"2147483647\"\n  Input: x = 2147483648, shift = 5\n  Output: \"2147483648\"\n  Input: x = 2147483648, shift = 6\n  Output: \"2147483647\"\n  Input: x = 2147483648, shift = 7\n  Output: \"2147483648\"\n  Input: x = 2147483648, shift = 8\n  Output: \"2147483647\"\n  Input: x = 2147483648, shift = 9\n  Output: \"2147483648\"\n  Input: x = 2147483648, shift = 10\n  Output: \"2147483647\"\n  Input: x = 2147483648, shift = 11\n  Output: \"2147483648\"\n  Input: x = 2147483648, shift = 12\n  Output: \"2147483647\"\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function routine that takes a string drawstring as input and returns hark back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   Write a function routine that takes a string drawstring as input and returns hark back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const count = (s.length) * (s.length);\n  return count - s.match(/[A-Z]/g).length;\n}\n\nmodule.exports = digitSum;<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string drawstring that represents a number phone number of apples and oranges orange \n   that are distributed in a basket of fruit yield this basket contains \n   apples apple, oranges orange, and mango fruits. Given the string bowed stringed instrument that represents represent the total number of \n   the oranges and apples apple and an integer that represent act the total full number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a string drawstring that represents a number phone number of apples and oranges orange \n   that are distributed in a basket of fruit yield this basket contains \n   apples apple, oranges orange, and mango fruits. Given the string bowed stringed instrument that represents represent the total number of \n   the oranges and apples apple and an integer that represent act the total full number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'apples' || s[i] === 'oranges') {\n      count += 1\n    }\n  }\n  return count\n}\n */\n\nfunction fruitDistribution(s, n) {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'apples' || s[i] === 'oranges') {\n      count += 1\n    }\n  }\n  return count\n}\n\nlet test = fruitDistribution(\"2 apples apple and 3 oranges orange \", 100)\nconsole.log(test)\n\n/*\n  function fruitDistribution(s, n) {\n    let count = 0\n    for (let i = 0; i < s.length; i++) {\n      if (s[i] === 'apples' || s[i] === 'oranges') {\n        count += 1\n      }\n    }\n    return count\n  }\n  */<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch arm of a tree that has non - negative integer nodes lymph node \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node lymph node with the smallest even tied value. \n   If multiple nodes node with the same smallest even value are found determine return the node lymph node that has smallest index. \n\n   The plucked node should be returned fall in a list, [ smalest_value, its index exponent ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" Given an array representing a branch arm of a tree that has non - negative integer nodes lymph node \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node lymph node with the smallest even tied value. \n   If multiple nodes node with the same smallest even value are found determine return the node lymph node that has smallest index. \n\n   The plucked node should be returned fall in a list, [ smalest_value, its index exponent ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n    let node = null;\n    let value = Number.MAX_VALUE;\n    let index = -1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n            if (node === null || arr[i] < value) {\n                node = arr[i];\n                value = arr[i];\n                index = i;\n            }\n        }\n    }\n    if (node === null) {\n        return [ ];\n    }\n    return [ node, index ];\n};\n\nconst test = () => {\n    let arr = [4,2,3];\n    let [ node, index ] = pluck(arr);\n    if (node === null) {\n        node = [ ];\n    }\n    console.log(node, index);\n};\n\ntest();<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of positive integers integer. Return the greatest bang-up integer that is greater than \n   zero, and has a frequency greater capital than or equal to the value of the integer itself. \n   The frequency of an integer is the number numeral of times it appears appear in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non - empty list of positive integers integer. Return the greatest bang-up integer that is greater than \n   zero, and has a frequency greater capital than or equal to the value of the integer itself. \n   The frequency of an integer is the number numeral of times it appears appear in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let cnt = 1\n  let curr = 0\n  let len = lst.length\n  let max = 0\n  let min = 0\n  for (let i = 0; i < len; i++) {\n    cnt = 1\n    while (cnt < lst[i]) {\n      curr = lst[i] - cnt\n      if (curr > max) {\n        max = curr\n      }\n      cnt++\n    }\n  }\n  min = -1\n  for (let i = 0; i < len; i++) {\n    cnt = 1\n    while (cnt < lst[i]) {\n      curr = lst[i] - cnt\n      if (curr > min) {\n        min = curr\n      }\n      cnt++\n    }\n  }\n  if (min < 0) {\n    return -1\n  } else {\n    return max\n  }\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]))\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nconsole.log(search([5, 5, 4, 4, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange foreign order. \n   Strange foreign sorting, is when you start begin with the minimum value, \n   then maximum utmost of the remaining integers integer, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange foreign order. \n   Strange foreign sorting, is when you start begin with the minimum value, \n   then maximum utmost of the remaining integers integer, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const list = []\n  for (const value of lst) {\n    const min = Math.min(...lst.filter((x) => x > value))\n    const max = Math.max(...lst.filter((x) => x < value))\n    list.push(min)\n    list.push(max)\n  }\n  return list\n}\n\nconst test = (lst) => {\n  const result = strangeSortList(lst)\n  console.log(result)\n}\n\nconst run = () => {\n  const lst = [1, 5, 4, 3, 2]\n  console.log(lst)\n  test(lst)\n}\n\nrun()\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides side of a triangle. Return reelect the area of \n   the triangle rounded round to 2 decimal points if the three sides slope form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides side of a triangle. Return reelect the area of \n   the triangle rounded round to 2 decimal points if the three sides slope form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n    if (a === 0 || b === 0 || c === 0) {\n        return -1;\n    }\n    if (a + b > c && a + c > b && b + c > a) {\n        return ((a + b) * (a + c) - b * c) / 2;\n    }\n    return -1;\n};\n\nmodule.exports = triangleArea;\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns come back true if the object aim q will fly, and false fake otherwise. \n   The object aim q will fly if it's balanced (it is a palindromic list) and the sum union of its elements component is less than or equal the maximum maximal possible potential weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns come back true if the object aim q will fly, and false fake otherwise. \n   The object aim q will fly if it's balanced (it is a palindromic list) and the sum union of its elements component is less than or equal the maximum maximal possible potential weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n    return new Set(q.slice()).every(x => x <= w) && new Set(q.slice()).every(x => x % 2 === 1);\n};\n\n//# [Exercise 4]: (7)\nconst shouldItFly = (q, w) => {\n    return new Set(q.slice()).every(x => x <= w) && new Set(q.slice()).every(x => x % 2 === 1);\n};\n\n//# [Exercise 5]: (7)\nconst makeItFly = (q, w) => {\n    return new Set(q.slice()).every(x => x <= w) && new Set(q.slice()).every(x => x % 2 === 1);\n};\n\nconst result = [\n    { q: [1, 2, 3, 2], w: 3, expected: false },\n    { q: [1, 2, 3, 2], w: 6, expected: true },\n    { q: [1, 2, 3, 2], w: 7, expected: true },\n    { q: [1, 2, 3, 2], w: 8, expected: false },\n    { q: [1, 2, 3, 2], w: 9, expected: false },\n    { q: [1, 2, 3, 2], w: 11, expected: false },\n    { q: [1, 2, 3, 2], w: 12, expected: false },\n    { q: [1, 2, 3, 2], w: 13, expected: false },\n    { q: [1, 2, 3, 2], w: 14, expected: true },\n    { q: [1, 2, 3, 2], w: 15, expected: true },\n    { q: [1, 2, 3, 2], w: 16, expected: false },\n    { q: [1, 2, 3, 2], w: 17, expected: false },\n    { q: [1, 2, 3, 2], w: 18, expected: true },\n    { q: [1, 2, 3, 2], w: 19, expected: false },\n    { q: [1, 2, 3, 2], w: 20, expected: false },\n    { q: [1, 2, 3, 2], w: 21, expected: false },\n    { q: [1, 2, 3, 2], w: 22, expected: false },\n    { q: [1, 2, 3, 2], w: 23, expected: true },\n    { q: [1, 2, 3, 2], w: 24, expected: true },\n    { q: [1, 2, 3, 2], w: 25, expected: true },\n    { q: [1, 2, 3, 2], w: 26, expected: true },\n    { q: [1, 2, 3, 2], w: 27, expected: false },\n    { q: [1, 2, 3, 2], w: 28, expected: false },\n    { q: [1, 2, 3, 2], w: 29, expected: false },\n    { q: [1, 2, 3, 2], w: 30, expected: true },\n    { q: [1, 2, 3, 2], w: 31, expected: true },\n    { q: [1, 2, 3, 2], w: 32, expected: true },\n    { q: [1, 2, 3, 2], w: 33, expected: true },\n    { q: [1, 2, 3, 2], w: 34, expected: false },\n    { q: [1, 2, 3, 2], w: 35, expected: false },\n    { q: [1, 2, 3, 2], w: 36, expected: false },\n    { q: [1, 2, 3, 2], w: 37, expected: false },\n    { q: [1, 2, 3, 2], w: 38, expected: false },\n    { q: [1, 2, 3, 2], w: 39, expected: false },\n    { q: [1, 2, 3, 2], w: 40, expected: true },\n    { q: [1, 2, 3, 2], w: 41, expected: true },\n    { q: [1, 2, 3, 2], w: 42, expected: true },\n    { q: [1, 2, 3, 2], w: 43, expected: true },\n    { q: [1, 2, 3, 2], w: 44, expected: true },\n    { q: [1, 2, 3, 2], w: 45, expected: false },\n    { q: [1, 2, 3, 2], w: 46, expected: false },\n    { q: [1, 2, 3, 2], w: 47, expected: false },\n    { q: [1, 2, 3, 2], w: 48, expected: true },\n    { q: [1, 2, 3, 2], w: 49, expected: true },\n    { q: [1, 2, 3, 2], w: 50, expected: true },\n    { q: [1, 2, 3, 2], w: 51, expected: true },\n    { q: [1, 2, 3, 2], w: 52, expected: true },\n    { q: [1, 2, 3, 2], w: 53, expected: true },\n    { q: [1, 2, 3, 2], w: 54, expected: true },\n    { q: [1, 2, 3, 2], w: 55, expected: false },\n    { q: [1, 2, 3, 2], w: 56, expected: false },\n    {"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find discover the minimum number phone number of elements that \n   need want to be changed to make create the array palindromic. A palindromic array is an array that \n   is read the same backwards backward and forwards ahead. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find discover the minimum number phone number of elements that \n   need want to be changed to make create the array palindromic. A palindromic array is an array that \n   is read the same backwards backward and forwards ahead. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n    let arrLength = arr.length;\n    let result = 0;\n    let arrA = arr.slice();\n    let arrB = arr.slice();\n    let i;\n    let j;\n    let max = arrA[0];\n    let min = arrB[0];\n    let count = 0;\n    \n    for (i = 0; i < arrLength; i++) {\n        arrA[i] = arrA[i].toString();\n        arrB[i] = arrB[i].toString();\n        let currentMax = arrA[i];\n        let currentMin = arrB[i];\n        \n        for (j = i; j < arrLength; j++) {\n            if (arrA[j] === arrA[j-1]) {\n                arrA[j] = currentMax;\n                currentMax = currentMax * 2;\n            }\n            else {\n                arrA[j] = currentMax;\n                currentMax = currentMax * 2;\n            }\n            \n            if (arrB[j] === arrB[j-1]) {\n                arrB[j] = currentMin;\n                currentMin = currentMin * 2;\n            }\n            else {\n                arrB[j] = currentMin;\n                currentMin = currentMin * 2;\n            }\n        }\n        \n        if (currentMax === max) {\n            count++;\n            if (currentMin === min) {\n                result = count;\n            }\n        }\n        else {\n            if (currentMin === min) {\n                count++;\n                if (currentMax === max) {\n                    result = count;\n                }\n            }\n        }\n        \n        if (arrA[i] === arrB[i]) {\n            if (arrA[i] === max) {\n                if (arrB[i] === min) {\n                    result = count;\n                }\n            }\n        }\n        \n        if (arrA[i] === arrB[i]) {\n            if (arrA[i] === min) {\n                if (arrB[i] === max) {\n                    result = count;\n                }\n            }\n        }\n    }\n    \n    return result;\n};\n\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts accept two lists of strings chain and returns the list that has \n   total entire number of chars char in the all strings of the list less than the other list.\n\n   if the two lists tilt have the same number numeral of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts accept two lists of strings chain and returns the list that has \n   total entire number of chars char in the all strings of the list less than the other list.\n\n   if the two lists tilt have the same number numeral of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0) return lst2;\n  if (lst2.length === 0) return lst1;\n  const numChars = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  const res = lst1.filter(el => lst2.indexOf(el) < 0);\n  return res.length === numChars? lst1 : res;\n};\n\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'Hi']));\nconsole.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']));\nconsole.log(totalMatch(['4'], ['1', '2', '3', '4', '5']));\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true on-key if the given number phone number is the multiplication of 3 prime choice numbers \n   and false fake otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns true on-key if the given number phone number is the multiplication of 3 prime choice numbers \n   and false fake otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (isPrime(a) && a > 1) {\n    let a2 = a * a\n    for (let i = 3; i < a2; i += 2) {\n      if (a2 % i === 0) {\n        return false\n      }\n    }\n    return true\n  }\n  return false\n}\n\nconsole.log(isMultiplyPrime(30))\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function routine that returns true on-key if a number x is a simple bare \n   power of n and false in other cases casing. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function routine that returns true on-key if a number x is a simple bare \n   power of n and false in other cases casing. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  let power = Math.pow(n, x);\n  return power === x? true : false;\n};\n\nconst isSimplePower = (x, n) => {\n  return x === Math.pow(n, x);\n};\n\nconst isSimplePower = (x, n) => {\n  return x === Math.pow(n, x);\n};\n\nconst isSimplePower = (x, n) => {\n  return x === Math.pow(n, x);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes claim an integer a and returns true on-key \n   if this ingeger is a cube of some integer number act. \n   Note: you may assume simulate the input is always constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes claim an integer a and returns true on-key \n   if this ingeger is a cube of some integer number act. \n   Note: you may assume simulate the input is always constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if(a<=0) return false;\n  let i = 1;\n  while(i<=Math.floor(Math.sqrt(a))) {\n    if(a%i===0) return false;\n    i++;\n  }\n  return true;\n}\n\nconst ispandigital = (num) => {\n  let res = 0;\n  let n = 0;\n  for(let i=1;i<=num;i++) {\n    n = Math.pow(10,num-i);\n    if(iscube(n)) res += 1;\n  }\n  return res===num;\n}\n\nmodule.exports = {\n  iscube: iscube,\n  ispandigital: ispandigital\n}<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function routine that receives \n   a hexadecimal number phone number as a string and counts count the number of hexadecimal \n   digits finger that are primes (prime number=== or a prime=== is a natural lifelike number numeral \n   greater than 1 that is not a product of two smaller belittled natural lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So thus you have to determine decide a number of the following succeed digits finger: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note bill: you may assume the input stimulation is always constantly correct or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a function routine that receives \n   a hexadecimal number phone number as a string and counts count the number of hexadecimal \n   digits finger that are primes (prime number=== or a prime=== is a natural lifelike number numeral \n   greater than 1 that is not a product of two smaller belittled natural lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So thus you have to determine decide a number of the following succeed digits finger: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note bill: you may assume the input stimulation is always constantly correct or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n    const hexKeyMap = {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n    };\n    return num.split(\"\").reduce((prev, curr) => {\n        return (prev === undefined)? 0 : (prev + hexKeyMap[curr]);\n    }, 0);\n}\n\nconst primeNumbers = (num) => {\n    return num.split(\"\").reduce((prev, curr) => {\n        if (prev === undefined) {\n            return curr;\n        } else if (curr === \"0\" || curr === \"1\") {\n            return 0;\n        } else {\n            return (prev + curr) % num === 0? 0 : 1;\n        }\n    }, 0);\n}\n\nconst countFingers = (num) => {\n    return num.split(\"\").reduce((prev, curr) => {\n        return (prev === undefined)? 0 : (prev + 1);\n    }, 0);\n}\n\nconsole.log(primeNumbers(\"0\"));\nconsole.log(primeNumbers(\"1\"));\nconsole.log(primeNumbers(\"2\"));\nconsole.log(primeNumbers(\"3\"));\nconsole.log(primeNumbers(\"4\"));\nconsole.log(primeNumbers(\"5\"));\nconsole.log(primeNumbers(\"6\"));\nconsole.log(primeNumbers(\"7\"));\nconsole.log(primeNumbers(\"8\"));\nconsole.log(primeNumbers(\"9\"));\nconsole.log(primeNumbers(\"A\"));\nconsole.log(primeNumbers(\"B\"));\nconsole.log(primeNumbers(\"C\"));\nconsole.log(primeNumbers(\"D\"));\nconsole.log(primeNumbers(\"E\"));\nconsole.log(primeNumbers(\"F\"));\nconsole.log(primeNumbers(\"1077E\"));\nconsole.log(primeNumbers(\"ABED1A33\"));\nconsole.log(primeNumbers(\"123456789ABCDEF0\"));\nconsole.log(primeNumbers(\"2020\"));\nconsole.log(primeNumbers(\"ABCD\"));\nconsole.log(primeNumbers(\"ABD\"));\nconsole.log(primeNumbers(\"AB\"));\nconsole.log(primeNumbers(\"ABC\"));\nconsole.log(primeNumbers(\"ABCD\"));\nconsole.log(primeNumbers(\"ABCDE\"));\nconsole.log(primeNumbers(\"ABCDEF\"));\nconsole.log(primeNumbers(\"ABCDEFGH\"));\nconsole.log(primeNumbers(\"ABCDEFGHI\"));\nconsole.log(primeNumbers(\"ABCDEFGHIJ\"));\nconsole.log(primeNumbers(\"ABCDEFGHIJK\"));\nconsole.log(primeNumbers(\"ABCDEFGHIJKL\"));\nconsole.log(primeNumbers(\"ABCDEFGHIJKLM\"));\nconsole.log(primeNumbers(\"ABCDEFGHIJKLMN\"));\nconsole.log(primeNumbers(\"ABCDEFGHIJKLMNO\"));\nconsole.log(primeNumbers(\"ABCDEFGHIJKLMNOP\"));\nconsole.log(primeNumbers(\"ABCDEFGHIJKLMNOPQ\"));\nconsole.log(primeNumbers(\"ABCDEFGHIJKLMNOPQR\"));\nconsole.log(primeNumbers(\"ABCDEFGHIJKLMNOPQRS\"));\nconsole.log(primeNumbers(\"ABCDEFGHIJKLMNOPQRST\"));\nconsole.log(primeNumbers(\"ABCDEFGHIJKLMNOPQRSTU\"));\nconsole.log(primeNumbers(\"ABCDEFGHIJKLMNOPQRSTUVW\"));\nconsole.log(primeNumbers(\"ABCDEFGHIJKLMNOPQRSTUVWX\"));\nconsole.log(primeNumbers(\"ABCDEFGHIJKLMNOPQRSTUVWXY\"));\nconsole.log(primeNumbers(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"));\nconsole.log(primeNumbers(\"ABCDEFGHIJKLMNOPQRSTUVWXYZAA\"));\nconsole.log(primeNumbers(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABC\"));\nconsole.log(primeNumbers(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCD\"));\nconsole.log(primeNumbers(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDE\"));\nconsole.log(primeNumbers(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEF\"));\nconsole.log(primeNumbers(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFG\"));\nconsole.log(primeNumbers(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGH\"));\nconsole.log(primeNumbers(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHI\"));\nconsole.log(primeNumbers(\"ABC"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form shape and your task is to convert change it to \n   binary format. The function should return a string bowed stringed instrument, with each character representing present a binary \n   number. Each character fictional character in the string chain will be' 0' or' 1'. \n\n   There will be an extra excess couple of characters fictional character' db' at the beginning and at the end goal of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal form shape and your task is to convert change it to \n   binary format. The function should return a string bowed stringed instrument, with each character representing present a binary \n   number. Each character fictional character in the string chain will be' 0' or' 1'. \n\n   There will be an extra excess couple of characters fictional character' db' at the beginning and at the end goal of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n    let binary = decimalToBinaryHelper(decimal);\n    let binaryString = binary.split('').reverse().join('');\n    let binaryToDecimal = binaryToDecimalHelper(binaryString);\n    return binaryToDecimal;\n}\n\nconst decimalToBinaryHelper = (decimal) => {\n    let binary = '';\n    while (decimal > 0) {\n        let remainder = decimal % 2;\n        binary = remainder + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return binary;\n}\n\nconst binaryToDecimal = (binary) => {\n    let decimal = 0;\n    binary = binary.split('').reverse().join('');\n    while (binary.length > 0) {\n        let digit = binary.slice(-1);\n        decimal = decimal + (digit * 2);\n        binary = binary.slice(0, -1);\n    }\n    return decimal;\n}\n\nconst binaryToDecimalHelper = (binary) => {\n    let decimal = 0;\n    while (binary.length > 0) {\n        let remainder = binary.slice(-1);\n        decimal = decimal + (remainder * 2);\n        binary = binary.slice(0, -1);\n    }\n    return decimal;\n}\n\n// console.log(binaryToDecimal('db1111db'));\n// console.log(decimalToBinary(15));\n\nmodule.exports = decimalToBinary;<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task undertaking is to check if the string drawstring is happy or not. \n   A string bowed stringed instrument is happy if its length distance is at least 3 and every 3 consecutive letters letter are distinct discrete\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   Your task undertaking is to check if the string drawstring is happy or not. \n   A string bowed stringed instrument is happy if its length distance is at least 3 and every 3 consecutive letters letter are distinct discrete\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if(s.length === 1) {\n    return true\n  }\n\n  const count = {\n    0: 0,\n    1: 0,\n    2: 0\n  }\n\n  for(let i = 0; i < s.length; i++) {\n    const curr = parseInt(s[i], 10)\n    if(isNaN(curr)) {\n      return false\n    }\n\n    if(count[curr] === 0) {\n      count[curr] = 1\n    } else if(count[curr] === 1) {\n      count[curr] = 2\n    } else {\n      return false\n    }\n  }\n\n  for(let i = 0; i < s.length; i++) {\n    if(s[i] === s[i + 1] && s[i] === s[i + 2]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nconsole.log(isHappy('a'))\nconsole.log(isHappy('aa'))\nconsole.log(isHappy('abcd'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('xyy'))\nconsole.log(isHappy('xyyy'))\nconsole.log(isHappy('xyyyy'))\nconsole.log(isHappy('xyyyyy'))\nconsole.log(isHappy('xyyyyyy'))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give grant the grades\n   to students. The teacher has been making produce her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used practice for grading. \n   She has given sacrifice you a list of GPAs for some students and you have to write \n   a function affair that can output a list of letter grades using the following table mesa: \n            GPA        |     Letter grade degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester and the teacher has to give grant the grades\n   to students. The teacher has been making produce her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used practice for grading. \n   She has given sacrifice you a list of GPAs for some students and you have to write \n   a function affair that can output a list of letter grades using the following table mesa: \n            GPA        |     Letter grade degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const avg = grades.reduce((acc, n) => {\n    if (n) {\n      acc += n\n    }\n    return acc / grades.length\n  })\n  const sum = grades.reduce((acc, n) => {\n    if (n) {\n      acc += n\n    }\n    return acc\n  })\n  const max = grades.reduce((acc, n) => {\n    if (n > acc) {\n      acc = n\n    }\n    return acc\n  })\n  const min = grades.reduce((acc, n) => {\n    if (n < acc) {\n      acc = n\n    }\n    return acc\n  })\n  const avgSum = avg + sum\n  const avgMax = avg + max\n  const avgMin = avg + min\n\n  const isAvg = avgSum / 4.0 < avgMax\n  const isSum = sum / 4.0 < avgMax\n  const isMax = max / 4.0 < avgMax\n  const isMin = min / 4.0 < avgMax\n\n  if (isAvg) {\n    return 'A+'\n  } else if (isSum) {\n    return 'B'\n  } else if (isMax) {\n    return 'C+'\n  } else if (isMin) {\n    return 'D+'\n  } else {\n    return 'E'\n  }\n}\n\nconst main = () => {\n  const grades = [4.0, 3, 1.7, 2, 3.5]\n  console.log(numericalLetterGrade(grades))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns come back true if the string\n   length duration is a prime number act or false otherwise differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a string and returns come back true if the string\n   length duration is a prime number act or false otherwise differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\n    53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131,\n    137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199,\n    211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283,\n    293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383,\n    389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467,\n    479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577,\n    587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661,\n    673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769,\n    773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877,\n    881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983,\n    991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061,\n    1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151,\n    1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231,\n    1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307,\n    1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429,\n    1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493,\n    1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583,\n    1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667,\n    1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759,\n    1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871,\n    1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973,\n    1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053,\n    2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137,\n    2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243,\n    2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339,\n    2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411,\n    2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531,\n    2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633,\n    2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707,\n    2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791,\n    2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887,\n    2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999,\n    3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089,\n    3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209,\n    3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313,\n    3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391,\n    3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511,\n    3517, 3527, 3529, 35"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers issue of n-digit\n   positive integers integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers issue of n-digit\n   positive integers integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n  1\n  2\n  3\n ...\n  n\n  }\n   * / \n public static int countStartsEndsWith1(int n) {\n     int count = 0;\n     for (int i = 1; i <= n; i++) {\n         for (int j = 1; j <= n; j++) {\n             if (i + j <= n) {\n                 if (i + j > 1 && i + j <= n) {\n                     if (i + j > 2 && i + j <= n) {\n                         if (i + j > 3 && i + j <= n) {\n                             count++;\n                         }\n                     }\n                 }\n             }\n         }\n     }\n     return count;\n }\n */\npublic class CountStartsEndsWith1 {\n\n    public static void main(String[] args) {\n        int n = 4;\n        System.out.println(countStartsEndsWith1(n));\n    }\n\n    private static int countStartsEndsWith1(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (i + j <= n) {\n                    if (i + j > 1 && i + j <= n) {\n                        if (i + j > 2 && i + j <= n) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const digits = []\n  for (let i = 0; i <= N; i++) {\n    const digit = N % 2\n    N = N / 2\n    digits.push(digit)\n  }\n  const string = digits.join(\"\")\n  return string\n}\n\nconsole.log(solve(147))\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers lst. add the even elements element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integers lst. add the even elements element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const result = []\n  for(let i = 0; i < lst.length; i++) {\n    if(i % 2 === 1) {\n      result.push(lst[i])\n    }\n  }\n  return result\n}\n\nconsole.log(add([4, 2, 6, 7]))\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes claim a string and returns come back an ordered version translation of it. \n   Ordered version translation of string, is a string chain where all words (separated by space) \n   are replaced substitute by a new modern word discussion where all the characters quality arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes claim a string and returns come back an ordered version translation of it. \n   Ordered version translation of string, is a string chain where all words (separated by space) \n   are replaced substitute by a new modern word discussion where all the characters quality arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(/\\s+/g);\n  let ret = words.join(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let index = 0;\n    while (word.length > 1 && index < words.length) {\n      if (word.length > 3 && word.length < 9 && word.match(/[0-9]/)) {\n        let last = word.charAt(word.length - 1);\n        let first = word.charAt(0);\n        let newWord = first + last;\n        let found = false;\n        for (let j = 0; j < words.length; j++) {\n          if (newWord === words[j]) {\n            if (j < i) {\n              words[j] = newWord;\n            }\n            found = true;\n            break;\n          }\n        }\n        if (!found) {\n          words.splice(i, 0, newWord);\n        }\n      }\n      index++;\n    }\n  }\n  return words.join(' ');\n};\n\nconsole.log(antiShuffle('Hi'));\nconsole.log(antiShuffle('hello'));\nconsole.log(antiShuffle('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested cuddle lists, \n   which is similar like to matrix, however, unlike matrices, \n   each row course may contain a different unlike number of columns column. \n   Given feed lst, and integer x, find rule integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row rowing, columns), starting with 0. \n   Sort coordinates coordinate initially by rows course in ascending rise order. \n   Also, sort coordinates of the row by columns column in descending order orderliness.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested cuddle lists, \n   which is similar like to matrix, however, unlike matrices, \n   each row course may contain a different unlike number of columns column. \n   Given feed lst, and integer x, find rule integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row rowing, columns), starting with 0. \n   Sort coordinates coordinate initially by rows course in ascending rise order. \n   Also, sort coordinates of the row by columns column in descending order orderliness.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let coord = [x, 0]\n  let last = 0\n  const get = l => {\n    if (!l) return []\n    const d = lst[l]\n    const s = []\n    for (let i = last; i < d.length; i++) {\n      const coord = getRow(d, coord[1])\n      if (!coord) return []\n      s.push(...coord)\n    }\n    last = d.length\n    return s\n  }\n  return get(x)\n}\n\n/*\n  Given 2 dimensional data, as a nested cuddle lists, \n   which is similar like to matrix, however, unlike matrices, \n   each row course may contain a different unlike number of columns column. \n   Given feed lst, and integer x, find rule integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row rowing, columns), starting with 0. \n   Sort coordinates coordinate initially by rows course in ascending rise order. \n   Also, sort coordinates of the row by columns column in descending order orderliness.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getColumn = (lst, x) => {\n  let coord = [0, x]\n  let last = 0\n  const get = l => {\n    if (!l) return []\n    const d = lst[l]\n    const s = []\n    for (let i = last; i < d.length; i++) {\n      const coord = getColumn(d, coord[1])\n      if (!coord) return []\n      s.push(...coord)\n    }\n    last = d.length\n    return s\n  }\n  return get(x)\n}\n\nconst getCoordinate = (lst, x) => {\n  const getRow = (lst, x) => {\n    if (!lst) return []\n    const d = lst[x]\n    const s = []\n    for (let i = 0; i < d.length; i++) {\n      const coord = getRow(d, i)\n      if (!coord) return []\n      s.push(...coord)\n    }\n    return s\n  }\n  return getRow(lst, x)\n}\n\nconst getRowOfCoord = (lst, x) => {\n  let coord = getCoordinate(lst, x)\n  if (!coord) return []\n  const row = coord[0]\n  const col = coord[1]\n  const s = [...coord, [row, col]]\n  return s.sort((a, b) => a[0] - b[0])\n}\n\nconst getColumnOfCoord = (lst, x) => {\n  let coord = getCoordinate(lst, x)\n  if (!coord) return []\n  const row = coord[0]\n  const col = coord[1]\n  const s = [...coord, [row, col]]\n  return s.sort((a, b) => a[1] - b[1])\n}\n\nconst getCoordOfRow = (lst, x) => {\n  const row = x\n  const coord = getRowOfCoord(lst, x)\n  return coord[0]\n}\n\nconst getCoordOfColumn = (lst, x) => {\n  const col = x\n  const coord = getColumnOfCoord(lst, x)\n  return coord[1]\n}\n\nconst getCoord = (lst, x) => {\n  const row = getCoordOfRow(lst, x)\n  const col = getCoordOfColumn(lst, x)\n  return [row, col]\n}\n\nconst getRowColumnOfCoord = (lst, x) => {\n  const coord = getCoordOfRow(lst, x)\n  const [row, col] = coord\n  const s = [...coord, [row, col]]\n  return s.sort((a, b) => a[0] - b[0])\n}\n\nconst getRowColumn = (lst, x) => {\n  const row = getRowOfCoord(lst, x)\n  const col = getCoordOfColumn(lst, x)\n  const s = [...row, [row, col]]\n  return s.sort((a, b) => a[0] - b[0])\n}\n\nconst getCoordFromRowColumn = (lst, x) => {\n  const [row, col] = x\n  const coord = getRowColumnOfCoord(lst, x)\n  return [row, col]\n}\n\nconst getCoordFromRowColumn = (lst, x) => {\n  const [row,"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integers integer, return a copy of the given give array after sorting, \n   you will sort the given impart array in ascending order decree if the sum (first inaugural index exponent value, last index value) is odd curious, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non - negative integers integer, return a copy of the given give array after sorting, \n   you will sort the given impart array in ascending order decree if the sum (first inaugural index exponent value, last index value) is odd curious, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const len = array.length;\n  let sorted = array.slice();\n  let last = 0;\n  let sum = 0;\n  let half = Math.floor(len / 2);\n  let i = 0;\n  while (i < half) {\n    sum = array[i] + array[i + 1];\n    if (sum % 2 === 0) {\n      sorted = sorted.sort((a, b) => a - b);\n    } else {\n      sorted = sorted.sort((a, b) => b - a);\n    }\n    i += 2;\n  }\n  i = half;\n  while (i < len) {\n    sum = array[i] + array[i + 1];\n    if (sum % 2 === 0) {\n      sorted = sorted.sort((a, b) => b - a);\n    } else {\n      sorted = sorted.sort((a, b) => a - b);\n    }\n    i += 2;\n  }\n  return sorted;\n};\n\nexport { sortArray };\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string drawstring as an argument and \n   returns come back a string encrypted code with the alphabet being rotated rotate. \n   The alphabet should be rotated revolve in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takes a string drawstring as an argument and \n   returns come back a string encrypted code with the alphabet being rotated rotate. \n   The alphabet should be rotated revolve in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n    let res = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s.charAt(i);\n        if (i % 2 === 1) {\n            res += char.charAt(1);\n        } else {\n            res += char.charAt(0);\n        }\n    }\n    return res;\n};\n\nconsole.log(encrypt('asdfghjkl')); // ewhjklnop\nconsole.log(encrypt('gf')); // kj\nconsole.log(encrypt('et')); // ix\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write publish a function nextSmallest() that returns come back the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers. \n   Write publish a function nextSmallest() that returns come back the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   const sorted = lst.slice().sort()\n   const len = sorted.length\n   if (len === 0) return null\n   if (len === 1) return sorted[0]\n   let mid = Math.floor((len - 1) / 2)\n   if (sorted[mid] === sorted[len - 1]) return sorted[mid + 1]\n   return sorted[mid]\n }\n */\n\n/*\n  You are given a list of integers. \n   Write publish a function nextSmallest() that returns come back the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   const sorted = lst.slice().sort()\n   const len = sorted.length\n   if (len === 0) return null\n   if (len === 1) return sorted[0]\n   let mid = Math.floor((len - 1) / 2)\n   if (sorted[mid] === sorted[len - 1]) return sorted[mid + 1]\n   return sorted[mid]\n }\n */\n\n/*\n  You are given a list of integers. \n   Write publish a function nextSmallest() that returns come back the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   const sorted = lst.slice().sort()\n   const len = sorted.length\n   if (len === 0) return null\n   if (len === 1) return sorted[0]\n   let mid = Math.floor((len - 1) / 2)\n   if (sorted[mid] === sorted[len - 1]) return sorted[mid + 1]\n   return sorted[mid]\n }\n */\n\n/*\n  You are given a list of integers. \n   Write publish a function nextSmallest() that returns come back the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   const sorted = lst.slice().sort()\n   const len = sorted.length\n   if (len === 0) return null\n   if (len === 1) return sorted[0]\n   let mid = Math.floor((len - 1) / 2)\n   if (sorted[mid] === sorted[len - 1]) return sorted[mid + 1]\n   return sorted[mid]\n }\n */\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words password, and your task is to count consider the number \n   of boredoms boredom. A boredom is a sentence that starts depart with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words password, and your task is to count consider the number \n   of boredoms boredom. A boredom is a sentence that starts depart with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  if(S === '') return 0\n  const s = S.toLowerCase()\n  const p = s.split(' ')\n  const len = p.length\n  let cnt = 0\n  for(let i=0; i<len; i++) {\n    if(p[i] === 'i') {\n      cnt++\n    }\n  }\n  return cnt\n}\n\n/*\n  You'll be given a string of words password, and your task is to count consider the number \n   of boredoms boredom. A boredom is a sentence that starts depart with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  if(S === '') return 0\n  const s = S.toLowerCase()\n  const p = s.split(' ')\n  const len = p.length\n  let cnt = 0\n  for(let i=0; i<len; i++) {\n    if(p[i] === 'i') {\n      cnt++\n    }\n  }\n  return cnt\n}\n\n/*\n  You'll be given a string of words password, and your task is to count consider the number \n   of boredoms boredom. A boredom is a sentence that starts depart with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  if(S === '') return 0\n  const s = S.toLowerCase()\n  const p = s.split(' ')\n  const len = p.length\n  let cnt = 0\n  for(let i=0; i<len; i++) {\n    if(p[i] === 'i') {\n      cnt++\n    }\n  }\n  return cnt\n}\n\n/*\n  You'll be given a string of words password, and your task is to count consider the number \n   of boredoms boredom. A boredom is a sentence that starts depart with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  if(S === '') return 0\n  const s = S.toLowerCase()\n  const p = s.split(' ')\n  const len = p.length\n  let cnt = 0\n  for(let i=0; i<len; i++) {\n    if(p[i] === 'i') {\n      cnt++\n    }\n  }\n  return cnt\n}\n\nconst isBored = (S) => {\n  if(S === '') return 0\n  const s = S.toLowerCase()\n  const p = s.split(' ')\n  const len = p.length\n  let cnt = 0\n  for(let i=0; i<len; i++) {\n    if(p[i] === 'i') {\n      cnt++\n    }\n  }\n  return cnt\n}\n\nconst isBored = (S) => {\n  if(S === '') return 0\n  const s = S.toLowerCase()\n  const p = s.split(' ')\n  const len = p.length\n  let cnt = 0\n  for(let i=0; i<len; i++) {\n    if(p[i] === 'i') {\n      cnt++\n    }\n  }\n  return cnt\n}\n\nconst isBored = (S) => {\n  if(S === '') return 0\n  const s = S.toLowerCase()\n  const p = s.split(' ')\n  const len = p.length\n  let cnt = 0\n  for(let i=0; i<len; i++) {\n    if(p[i] === 'i') {\n      cnt++\n    }\n  }\n  return cnt\n}\n\nconst isBored = (S) => {\n  if(S === '') return 0\n  const s = S.toLowerCase()\n  const p = s.split(' ')\n  const len = p.length\n  let cnt = 0\n  for(let i=0; i<len; i++) {\n    if(p[i] === 'i') {\n      cnt++\n    }\n  }\n  return cnt\n}\n\nconst isBored = (S) => {\n  if(S === '') return 0\n  const s = S.toLowerCase()\n  const p = s.split(' ')\n  const len = p.length\n  let cnt = 0\n  for(let i=0; i<len; i++) {\n    if(p[i] === 'i') {\n      cnt++\n    }\n  }\n  return cnt\n}\n\nconst isBored = (S) => {\n  if(S === '') return 0\n  const s = S.toLowerCase()\n  const p = s.split(' ')\n  const len = p.length\n  let cnt = 0\n  for(let i=0; i<len; i++) {\n    if(p[i] === 'i') {\n      cnt++\n    }\n  }\n  return cnt\n}\n\nconst isBored = (S) => {\n  if(S === '') return 0\n  const s"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes claim 3 numbers. \n   Returns return key true if one of the numbers is equal adequate to the sum of the other two, and all numbers act are integers. \n   Returns return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes claim 3 numbers. \n   Returns return key true if one of the numbers is equal adequate to the sum of the other two, and all numbers act are integers. \n   Returns return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (!isInt(x) ||!isInt(y) ||!isInt(z)) {\n    return false\n  }\n  if (x === y) {\n    return true\n  }\n  if (x === z) {\n    return true\n  }\n  if (y === z) {\n    return true\n  }\n  return x + y === z\n}\n\nconst anyInt2 = (x, y, z) => {\n  if (!isInt(x) ||!isInt(y) ||!isInt(z)) {\n    return false\n  }\n  if (x === y) {\n    return true\n  }\n  if (x === z) {\n    return true\n  }\n  if (y === z) {\n    return true\n  }\n  return x + y === z\n}\n\nconst anyInt3 = (x, y, z) => {\n  if (!isInt(x) ||!isInt(y) ||!isInt(z)) {\n    return false\n  }\n  if (x === y) {\n    return true\n  }\n  if (x === z) {\n    return true\n  }\n  if (y === z) {\n    return true\n  }\n  return x + y === z\n}\n\nconst isInt = n => {\n  return typeof n === 'number' && n % 1 === 0\n}\n\nconst test = anyInt(3, 2, 2)\nconsole.log(test)\ntest = anyInt(3, -2, 1)\nconsole.log(test)\ntest = anyInt(3.6, -2.2, 2)\nconsole.log(test)\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes claim a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places plaza ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes claim a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places plaza ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const result = [];\n  const messageLength = message.length;\n  let i = 0;\n  let j = messageLength - 1;\n  \n  while (i <= j) {\n    let v = 0;\n    let letter = '';\n    let letterIndex = 0;\n    \n    while (i <= j) {\n      if (message[i].toUpperCase() === message[i].toLowerCase()) {\n        letter += message[i];\n      } else {\n        if (message[i].toUpperCase() === message[i].toUpperCase().charAt(0) &&\n          v === 1) {\n          letter += message[i].toUpperCase();\n          v = 0;\n        } else if (message[i].toUpperCase() === message[i].toLowerCase().charAt(0) &&\n          v === 0) {\n          letter += message[i].toLowerCase();\n          v = 1;\n        } else {\n          letter += message[i];\n          v = 0;\n        }\n      }\n      i++;\n      letterIndex++;\n    }\n    result.push(letter);\n  }\n  return result.join('');\n};\n\nconsole.log(encode('test'));\nconsole.log(encode('This is a message'));\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need necessitate to find the largest big prime value and return the sum union of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers. \n   You need necessitate to find the largest big prime value and return the sum union of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,119,121,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]\n  let max_int = 0\n  let max_digit = 0\n  let curr_digit = 0\n  let curr_digit_sum = 0\n  let curr_digit_sum_str = \"\"\n\n  for(let i = 0; i < lst.length; i++){\n    curr_digit = lst[i]\n    curr_digit_sum = curr_digit * primes[i]\n    curr_digit_sum_str = curr_digit_sum.toString()\n    curr_digit_sum += curr_digit_sum_str.charAt(curr_digit_sum_str.length - 1)\n    if(curr_digit_sum > max_int){\n      max_int = curr_digit_sum\n      max_digit = curr_digit\n    }\n  }\n\n  return max_int + max_digit\n}\n\nmodule.exports = skjkasdkd\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys samara are strings in lower gloomy \n   case or all keys keystone are strings in upper case lawsuit, else return false. \n   The function should return false is the given sacrifice dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys samara are strings in lower gloomy \n   case or all keys keystone are strings in upper case lawsuit, else return false. \n   The function should return false is the given sacrifice dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict);\n  let bool = true;\n  keys.forEach((key) => {\n    const value = dict[key];\n    const case = key.toUpperCase();\n    if (case === key) {\n      if (value.toUpperCase()!== value) {\n        bool = false;\n      }\n    } else {\n      if (value.toLowerCase()!== value) {\n        bool = false;\n      }\n    }\n  });\n  return bool;\n};\n\n/*\n  Given a dictionary, return true if all keys with value \"a\" are strings in lower \n   glorious case or all keys with value \"A\" are strings in upper case lawsuit, \n   else return false. The function should return false is the given sacrifice \n   dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictValueCase = (dict) => {\n  const keys = Object.keys(dict);\n  let bool = true;\n  keys.forEach((key) => {\n    const value = dict[key];\n    if (value.toLowerCase()!== value) {\n      bool = false;\n    }\n  });\n  return bool;\n};\n\nconst checkDictValueCaseOr = (dict) => {\n  const keys = Object.keys(dict);\n  let bool = true;\n  keys.forEach((key) => {\n    const value = dict[key];\n    if (value.toLowerCase()!== value || value.toUpperCase()!== value) {\n      bool = false;\n    }\n  });\n  return bool;\n};\n\n/*\n  Given a dictionary, return true if all keys with value \"a\" are strings in lower \n   glorious case or all keys with value \"A\" are strings in upper case lawsuit, \n   else return false. The function should return false is the given sacrifice \n   dictionary is empty.\n  Examples:\n  checkDictValueCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  checkDictValueCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictValueCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictValueCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictValueCaseOr = (dict) => {\n  const keys = Object.keys(dict);\n  let bool = true;\n  keys.forEach((key) => {\n    const value = dict[key];\n    if (value.toLowerCase()!== value || value.toUpperCase()!== value) {\n      bool = false;\n    }\n  });\n  return bool;\n};\n\nconst checkDictValueCaseOrAnd = (dict) => {\n  const keys = Object.keys(dict);\n  let bool = true;\n  keys.forEach((key) => {\n    const value = dict[key];\n    if (value.toLowerCase()!== value || value.toUpperCase()!== value || value.toUpperCase()!== value) {\n      bool = false;\n    }\n  });\n  return bool;\n};\n\nconst checkDictValueCaseOrAndOr = (dict) => {\n  const keys = Object.keys(dict);\n  let bool = true;\n  keys.forEach((key) => {\n    const value = dict[key];\n    if (value.toLowerCase()!== value || value.toUpperCase()!== value || value.toUpperCase()!== value || value.toUpperCase()!== value) {\n      bool = false;\n    }\n  });\n  return bool;\n};\n\nconst checkDictValueCaseOrAndOrOr = (dict) => {\n  const keys = Object.keys(dict);\n  let bool = true;\n  keys.forEach((key) => {\n    const value = dict[key];\n    if (value.toLowerCase()!== value || value.toUpperCase()!== value || value.toUpperCase()!== value || value.toUpperCase()!== value) {\n      bool = false;\n    }\n  });\n  return bool;\n};\n\nconst checkDictValueCaseOrAndOrOrOr = (dict) => {\n  const keys = Object.keys(dict);\n  let bool = true;\n  keys.forEach((key) => {\n    const value = dict[key];\n    if (value.toLowerCase()!== value || value.toUpperCase()!== value || value.toUpperCase()!== value || value.toUpperCase()!== value) {\n      bool = false;\n    }\n  });\n  return bool;\n};\n\nconst checkDictValueCaseOrAndOrOrOrOr = (dict) => {\n  const keys = Object.keys(dict);\n  let bool = true;\n  keys.forEach((key) => {\n    const value = dict[key];\n    if (value.toLowerCase()!== value || value.toUpper"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = []\n  let i = 1\n\n  while (i < n) {\n    if (isPrime(i)) {\n      arr.push(i)\n    }\n    i++\n  }\n  return arr\n}\n\n// console.log(countUpTo(5))\n// console.log(countUpTo(11))\n// console.log(countUpTo(0))\n// console.log(countUpTo(20))\n// console.log(countUpTo(1))\n// console.log(countUpTo(18))\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false\n  }\n\n  if (n === 2) {\n    return true\n  }\n\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n    let product = 0;\n    for (let i = 0; i < 9; i++) {\n        let digit = a % 10 * b % 10;\n        product += Math.floor(digit);\n        a /= 10;\n        b /= 10;\n    }\n    return product;\n};\n\nconsole.log(multiply(14, -15));\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count consider the number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count consider the number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let numOfUpper = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      numOfUpper++;\n    }\n  }\n  return numOfUpper;\n};\n\nexport { countUpper };\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes claim a value (string) representing defend a number \n   and returns hark back the closest integer to it. If the number numeral is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes claim a value (string) representing defend a number \n   and returns hark back the closest integer to it. If the number numeral is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  if (value === \"\") {\n    return 0;\n  }\n  const numeral = value.toString();\n  const numeral_int = parseInt(numeral);\n  let closest = numeral_int;\n  let closest_int = numeral_int;\n  let closest_diff = closest - numeral_int;\n  let diff = Math.abs(numeral_int - closest);\n  if (closest_int < closest) {\n    closest_int = closest;\n    closest_diff = closest_diff;\n    diff = diff;\n  }\n  for (let i = 1; i < numeral.length; i++) {\n    let int_val = parseInt(numeral.substring(0, i));\n    let diff_val = int_val - numeral_int;\n    if (closest_int < int_val) {\n      closest_int = int_val;\n      closest_diff = diff_val;\n      diff = diff_val;\n    }\n  }\n  if (closest_diff === 0) {\n    closest = closest_int;\n  } else {\n    closest = Math.round(closest_int + closest_diff / 2);\n  }\n  return closest;\n}\n\nmodule.exports = closestInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make name a pile of n levels grade of stones. \n   The first inaugural level has n stones gem. \n   The number of stones rock in the next level is: \n       - the next odd curious number if n is odd. \n       - the next future even tied number if n is even. \n   Return the number of stones in each level horizontal surface in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to make name a pile of n levels grade of stones. \n   The first inaugural level has n stones gem. \n   The number of stones rock in the next level is: \n       - the next odd curious number if n is odd. \n       - the next future even tied number if n is even. \n   Return the number of stones in each level horizontal surface in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = []\n  for (let i = 0; i < n; i++) {\n    levels.push(i + 1)\n  }\n  const sum = levels.reduce((a, b) => a + b, 0)\n  return levels.map(v => v * (sum - v + 1))\n}\n\n/*\n  Given a number n, write a method to compute the number of stones in the nth level of the pyramid.\n\n  Examples:\n  >>> levelOfPile(3)\n  4\n  >>> levelOfPile(5)\n  7\n  >>> levelOfPile(7)\n  12\n  */\nconst levelOfPile = (n) => {\n  return makeAPile(n).reduce((a, b) => a + b, 0)\n}\n\n/*\n  Given an n-by-n matrix where each row and column is a list of integers, \n   find the maximum total sum of any two consecutive sub-matrix sums.\n\n  Examples:\n  >>> findMaxSumTwoConsecutiveSubMatrix(\n ... [\n ...  [1, 2, 3],\n ...  [4, 5, 6],\n ...  [7, 8, 9]\n ... ]\n ... )\n  9\n  */\nconst findMaxSumTwoConsecutiveSubMatrix = (matrix) => {\n  const [height, width] = matrix.length\n  const [minRow, maxRow] = matrix.map(row => row.reduce((a, b) => Math.min(a, b), Infinity))\n  const [minCol, maxCol] = matrix.map(row => row.reduce((a, b) => Math.min(a, b), Infinity))\n\n  let total = 0\n  for (let i = minRow; i <= maxRow; i++) {\n    for (let j = minCol; j <= maxCol; j++) {\n      total += matrix[i][j]\n    }\n  }\n\n  const subMatrix = matrix.slice(minRow, maxRow + 1).slice(minCol, maxCol + 1)\n  for (let i = 0; i < subMatrix.length; i++) {\n    for (let j = 0; j < subMatrix.length; j++) {\n      total += Math.max(matrix[i][j], subMatrix[i][j])\n    }\n  }\n\n  return total\n}\n\n/*\n  Given a triangle, find the minimum path sum from top to bottom.\n  Each step you may move to adjacent numbers on the row below.\n\n  Examples:\n  >>> findMinPathSum(\n ... [\n ...  [75],\n ...  [95, 64],\n ...  [17, 47, 82],\n ...  [18, 35, 87, 10],\n ...  [20, 4, 82, 47, 65],\n ...  [19, 1, 23, 75, 3, 34],\n ...  [88, 2, 77, 73, 7, 63, 67],\n ...  [99, 65, 4, 28, 6, 16, 70, 92],\n ...  [41, 41, 26, 56, 83, 40, 80, 70, 33],\n ...  [41, 48, 72, 33, 47, 32, 37, 16, 94, 29],\n ...  [53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 58],\n ...  [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57],\n ...  [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48],\n ...  [63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31],\n ...  [4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23]\n ... ])\n  16\n  */\nconst findMinPathSum = (triangle) => {\n  const [height, width] = triangle.length\n  let [minRow, minCol] = triangle.reduce((a, b) => [Math.min(a[0], b[0]), Math.min(a[1], b[1])], [height, width])\n\n  let pathSum = triangle[height - 1][width - 1]\n  for (let i = height - 2; i >= 0; i--) {\n    for (let j = width - 2; j >= 0; j--) {\n      pathSum += triangle[i][j]\n      if (i > 0 && j > 0) {\n        pathSum += triangle[i - 1][j - 1]\n      }\n      minRow = Math.min(minRow, i)\n      minCol = Math.min(minCol, j)\n    }\n  }\n\n  return pathSum\n}\n\n/*\n  Given a triangle, find the minimum path sum from top to bottom.\n  Each step you may move to adjacent numbers on the row below.\n\n  Examples:\n  >>> findMinPathSumWithExtraSpace(\n ... [\n ...  [75],\n ...  [95, 64],\n ...  [17, 47, 82],\n ...  [18, 35, 87, 10],\n ...  [20, 4, 82, 47, 65],\n ...  [19, 1, 23, 75, 3, 34],\n ...  [88, 2, 77, 73, 7, 63, 67],\n ...  [99, 65, 4, 28, 6, 16, 70, 92],\n ...  [41, 41, 26, 56, 83, 40, 80, 70, 33],\n ...  [41, 48, 72, 33, 47, 32, 37, 16, 94, 29],\n ...  [53, 71, 44, 65, 25, 43, 91, 52"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words password separated by commas comma or spaces. Your task job is \n   to split the string bowed stringed instrument into words and return an array of the words son.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of words password separated by commas comma or spaces. Your task job is \n   to split the string bowed stringed instrument into words and return an array of the words son.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n    return s.split(/(\\s|,)/).filter(w => w.length > 0);\n}\n\n// Your task is to return a function that takes as parameter an array of words and returns an array of the\n// corresponding words\nconst convert = (words) => {\n    return (array) => {\n        return words.map(w => w.split(' ')[0]);\n    }\n}\n\nconst convertToString = (words) => {\n    return (array) => {\n        return words.map(w => w.join(' '));\n    }\n}\n\nmodule.exports = {\n    wordsString,\n    convert,\n    convertToString\n};<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive convinced numbers x and y and returns come back the \n   biggest even integer number act that is in the range [x, y] inclusive. If \n   there's no such number numeral, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive convinced numbers x and y and returns come back the \n   biggest even integer number act that is in the range [x, y] inclusive. If \n   there's no such number numeral, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = chooseNumHelper(x, y, 0)\n  if (num === -1) {\n    return -1\n  }\n  return num\n}\n\nconst chooseNumHelper = (x, y, i) => {\n  if (x === y) {\n    return i + 1\n  }\n  let middle = Math.floor((x + y) / 2)\n  if (x < middle && y < middle) {\n    return chooseNumHelper(x, y, i + 1)\n  }\n  if (x < middle) {\n    return chooseNumHelper(x, y, i)\n  }\n  return chooseNumHelper(x, y, i + 1)\n}\n\nmodule.exports = chooseNum\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest cheeseparing integer and convert that to binary. \n   If n is greater capital than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest cheeseparing integer and convert that to binary. \n   If n is greater capital than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n    let avg = (n + m) / 2;\n    const bin = Math.floor(avg);\n    const binStr = String(bin);\n    return binStr.match(/^\\d+$/)? binStr : -1;\n};\n\nconst avg = (n, m) => {\n    let sum = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n    }\n    return sum / (m - n + 1);\n};\n\nconst roundedAvg2 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toFixed(2);\n};\n\n/*\n  https://www.hackerearth.com/code-monk-binary-search/algorithm/average-of-integers-in-a-range/\n  */\nconst avg2 = (n, m) => {\n    let avg = 0;\n    while (n <= m) {\n        avg += n;\n        n++;\n    }\n    return avg / (m - n + 1);\n};\n\nconst avg3 = (n, m) => {\n    let sum = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n    }\n    return sum / (m - n + 1);\n};\n\nconst avg4 = (n, m) => {\n    let sum = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n    }\n    return sum / (m - n + 1);\n};\n\nconst avg5 = (n, m) => {\n    let sum = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n    }\n    return sum / (m - n + 1);\n};\n\nconst avg6 = (n, m) => {\n    let sum = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n    }\n    return sum / (m - n + 1);\n};\n\nconst avg7 = (n, m) => {\n    let sum = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n    }\n    return sum / (m - n + 1);\n};\n\nconst avg8 = (n, m) => {\n    let sum = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n    }\n    return sum / (m - n + 1);\n};\n\nconst avg9 = (n, m) => {\n    let sum = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n    }\n    return sum / (m - n + 1);\n};\n\nconst avg10 = (n, m) => {\n    let sum = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n    }\n    return sum / (m - n + 1);\n};\n\nconst avg11 = (n, m) => {\n    let sum = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n    }\n    return sum / (m - n + 1);\n};\n\nconst avg12 = (n, m) => {\n    let sum = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n    }\n    return sum / (m - n + 1);\n};\n\nconst avg13 = (n, m) => {\n    let sum = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n    }\n    return sum / (m - n + 1);\n};\n\nconst avg14 = (n, m) => {\n    let sum = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n    }\n    return sum / (m - n + 1);\n};\n\nconst avg15 = (n, m) => {\n    let sum = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n    }\n    return sum / (m - n + 1);\n};\n\nconst avg16 = (n, m) => {\n    let sum = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n    }\n    return sum / (m - n + 1);\n};\n\nconst avg17 = (n, m) => {\n    let sum = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n    }\n    return sum / (m - n + 1);\n};\n\nconst avg18 = (n, m) => {\n    let sum = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n    }\n    return sum / (m - n + 1);\n};\n\nconst avg19 = (n, m) => {\n    let sum = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n    }\n    return sum / (m - n + 1);\n};\n\nconst avg20 = (n, m) => {\n    let sum = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n    }\n    return sum / (m - n + 1);\n};\n\nconst avg21 = (n, m) => {\n    let sum = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n    }\n    return sum / (m - n + 1);\n};\n\nconst avg22 = (n, m) => {\n    let sum = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n    }\n    return sum / (m - n + 1);\n};\n\nconst avg23 = (n, m) => {"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit. \n\n   Note: Returned list should be sorted screen in increasing order decree. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit. \n\n   Note: Returned list should be sorted screen in increasing order decree. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  let index = 0;\n  let count = 1;\n  while (index < x) {\n    if (x % count === 0) {\n      result.push(x / count);\n    }\n    index++;\n    count++;\n  }\n  return result;\n};\n\nexport default uniqueDigits;\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n    const sorted = arr.sort((a, b) => {\n        return b.length - a.length;\n    });\n\n    return sorted.reverse().map((num, index) => {\n        const digit = sorted[index].split('').reverse().join('');\n        return digit.length === 1? `${digit}` : `${num}${digit}`;\n    });\n};\n\nconst main = (input) => {\n    const arr = byLength(input);\n    return arr;\n};\n\nconst compare = (arr1, arr2) => {\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i]!== arr2[i]) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\nconst getResult = (arr) => {\n    const length = arr.length;\n    const result = arr.slice(0, length - 1);\n\n    return result;\n};\n\nconst test = () => {\n    let arr = [2, 1, 1, 4, 5, 8, 2, 3];\n    let arr1 = [2, 1, 1, 4, 5, 8, 2, 3];\n    let arr2 = [8, 5, 4, 3, 2, 2, 1, 1];\n    let arr3 = [2, 1, 1, 4, 5, 8, 2, 3];\n\n    let result = [\n        {\n            'arr': arr,\n            'expect': ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']\n        },\n        {\n            'arr': arr1,\n            'expect': ['One', 'One', 'Two', 'Two', 'Three', 'Four', 'Five', 'Eight']\n        },\n        {\n            'arr': arr2,\n            'expect': ['One', 'Two', 'Two', 'Three', 'Four', 'Five', 'Eight', 'Nine']\n        },\n        {\n            'arr': arr3,\n            'expect': ['One', 'Two', 'Two', 'Three', 'Four', 'Five', 'Eight', 'Nine']\n        }\n    ];\n\n    console.log(result);\n};\n\nconst test1 = () => {\n    let arr = [2, 1, 1, 4, 5, 8, 2, 3];\n    let arr1 = [2, 1, 1, 4, 5, 8, 2, 3];\n    let arr2 = [8, 5, 4, 3, 2, 2, 1, 1];\n    let arr3 = [2, 1, 1, 4, 5, 8, 2, 3];\n\n    let result = [\n        {\n            'arr': arr,\n            'expect': ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']\n        },\n        {\n            'arr': arr1,\n            'expect': ['One', 'One', 'Two', 'Two', 'Three', 'Four', 'Five', 'Eight']\n        },\n        {\n            'arr': arr2,\n            'expect': ['One', 'Two', 'Two', 'Three', 'Four', 'Five', 'Eight', 'Nine']\n        },\n        {\n            'arr': arr3,\n            'expect': ['One', 'Two', 'Two', 'Three', 'Four', 'Five', 'Eight', 'Nine']\n        }\n    ];\n\n    console.log(result);\n};\n\ntest();\ntest1();<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes claim n as a parameter, \n   and returns come back a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers act from 1 to i otherwise. \n   i starts get down from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takes claim n as a parameter, \n   and returns come back a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers act from 1 to i otherwise. \n   i starts get down from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const arr = Array.from(range(1, n + 1)).map(x => x * Math.pow(x, 2));\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(arr[i - 1]);\n    } else {\n      result.push(arr.reduce((p, c) => p + c, 0));\n    }\n  }\n  return result;\n};\n\nconst arr = f(5);\nconsole.log(arr);\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number phone number of even and odd \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the number phone number of even and odd \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n    let even = 0;\n    let odd = 0;\n    let min = 1;\n    let max = n;\n\n    while (min < max) {\n        let mid = (min + max) / 2;\n        if (isPalindrome(mid)) {\n            if (isEven(mid)) {\n                even++;\n            } else {\n                odd++;\n            }\n        } else {\n            if (isEven(mid)) {\n                min = mid + 1;\n            } else {\n                max = mid;\n            }\n        }\n    }\n    return [even, odd];\n};\n\nconst isEven = (n) => (n % 2 === 0);\nconst isPalindrome = (n) => (n + n) === n;\n\nconst test = (n) => {\n    const evenOddPalindrome = (n) => {\n        let even = 0;\n        let odd = 0;\n        let min = 1;\n        let max = n;\n\n        while (min < max) {\n            let mid = (min + max) / 2;\n            if (isPalindrome(mid)) {\n                if (isEven(mid)) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            } else {\n                if (isEven(mid)) {\n                    min = mid + 1;\n                } else {\n                    max = mid;\n                }\n            }\n        }\n        return [even, odd];\n    };\n\n    console.log(evenOddPalindrome(n));\n};\n\ntest(12);\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes claim an array of integers and returns return key \n   the number of elements which has a sum union of digits > 0. \n   If a number numeral is negative, then its first inaugural signed bless digit will be negative: \n   e.g. for example -123 has signed sign digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which takes claim an array of integers and returns return key \n   the number of elements which has a sum union of digits > 0. \n   If a number numeral is negative, then its first inaugural signed bless digit will be negative: \n   e.g. for example -123 has signed sign digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const positiveDigits = arr.filter((x) => x >= 0)\n  const negativeDigits = arr.filter((x) => x < 0)\n\n  const numeralSum = positiveDigits.reduce((acc, num) => acc + num)\n  const positiveSum = positiveDigits.reduce((acc, num) => acc + Math.pow(10, num))\n\n  const negativeSum = negativeDigits.reduce((acc, num) => acc + Math.pow(10, -num))\n\n  const hasNonZeroSum = positiveSum > 0 || negativeSum > 0\n  return hasNonZeroSum? positiveSum + negativeSum : 0\n}\n\nconsole.log(countNums([-1, 11, -11]))\nconsole.log(countNums([1, 1, 2]))\nconsole.log(countNums([-1, 11, -11, 1, 1, 2]))\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordered rate. Your task is to determine specify if \n   it is possible to get beget an array sorted in non - decreasing order decree by performing \n   the following be operation on the given array: \n       You are allowed to perform do right shift operation any number numeral of times prison term. \n  \n   One right shift operation means mean shifting transfer all elements of the array by one \n   position placement in the right veracious direction. The last element component of the array will be moved to \n   the starting start position military position in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted array by performing the above operation process \n   then return true else return false. \n   If the given array is empty then return true. \n\n   Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordered rate. Your task is to determine specify if \n   it is possible to get beget an array sorted in non - decreasing order decree by performing \n   the following be operation on the given array: \n       You are allowed to perform do right shift operation any number numeral of times prison term. \n  \n   One right shift operation means mean shifting transfer all elements of the array by one \n   position placement in the right veracious direction. The last element component of the array will be moved to \n   the starting start position military position in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted array by performing the above operation process \n   then return true else return false. \n   If the given array is empty then return true. \n\n   Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  // if (arr.length === 0) return true;\n  let cnt = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < arr[i + 1]) {\n      cnt++;\n      arr[i + 1] = arr[i];\n    } else {\n      break;\n    }\n  }\n  return cnt > 1;\n};\n\n// console.log(moveOneBall([3, 4, 5, 1, 2])); // true\nconsole.log(moveOneBall([3, 5, 4, 1, 2])); // false\n\n/*\n  Given an array arr[1], arr[2],..., arr[N], the length of the array is N.\n  If N is a perfect number, then there are no duplicates.\n  Then, there is a subset arr[i], i = 1..N, that is sorted in non-decreasing order.\n  Then, there exists some j, 1 < j < N, such that arr[j] > arr[i].\n  For example, arr[1] > arr[2], arr[2] > arr[3], arr[3] > arr[4]...\n  and arr[N] > arr[N - 1]\n  Then, the array arr is in non-decreasing order.\n  \n  The function returns true if the above condition holds.\n  Otherwise, returns false.\n  \n  For example:\n  \n  arr = [3, 4, 5, 1, 2, 3, 4]\n  The function should return false.\n\n  Note:\n  \n  1. arr.length > 0\n  2. arr.length is a perfect number\n  3. arr is sorted in non-decreasing order.\n  \n  */\nconst check = (arr) => {\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > arr[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall = (arr) => {\n  let cnt = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < arr[i + 1]) {\n      cnt++;\n      arr[i + 1] = arr[i];\n    } else {\n      break;\n    }\n  }\n  return cnt > 1;\n};\n\nconst check = (arr) => {\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > arr[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// console.log(check([3, 4, 5, 1, 2])); // true\nconsole.log(check([3, 5, 4, 1, 2])); // false\n\n// console.log(moveOneBall([3, 5, 4, 1, 2])); // false\nconsole.log(moveOneBall([3, 5, 4, 1, 2])); // true\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function routine that takes two lists list of numbers, \n   and determines settle whether it is possible to perform do an exchange of elements \n   between them to make cause lst1 a list of only even numbers. \n   There is no limit on the number of exchanged change elements between lst1 and lst2.\n   If it is possible to exchange elements chemical element between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a function routine that takes two lists list of numbers, \n   and determines settle whether it is possible to perform do an exchange of elements \n   between them to make cause lst1 a list of only even numbers. \n   There is no limit on the number of exchanged change elements between lst1 and lst2.\n   If it is possible to exchange elements chemical element between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const result = [];\n  if (lst1.length === 0 || lst2.length === 0) {\n    return 'NO';\n  }\n\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst2.indexOf(lst1[i])!== -1) {\n      result.push(lst1[i]);\n      lst2.splice(lst2.indexOf(lst1[i]), 1);\n    }\n  }\n\n  if (lst2.length === 0) {\n    return 'YES';\n  }\n\n  return 'NO';\n};\n\nconst lst1 = [1, 2, 3, 4, 5];\nconst lst2 = [1, 5, 3, 4];\n\nconsole.log(exchange(lst1, lst2));\n\n/*In this problem, you will implement a function routine that takes two lists list of strings, \n   and determines whether it is possible to perform an exchange of elements between them to make \n   cause lst1 a list of only even strings. \n   There is no limit on the number of exchanged change elements between lst1 and lst2.\n   If it is possible to exchange elements chemical element between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [\"1\", \"2\", \"3\", \"4\"]) => \"YES\"\n  exchange([1, 2, 3, 4], [\"1\", \"5\", \"3\", \"4\"]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange2 = (lst1, lst2) => {\n  const result = [];\n  if (lst1.length === 0 || lst2.length === 0) {\n    return 'NO';\n  }\n\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst2.indexOf(lst1[i])!== -1) {\n      result.push(lst1[i]);\n      lst2.splice(lst2.indexOf(lst1[i]), 1);\n    }\n  }\n\n  if (lst2.length === 0) {\n    return 'YES';\n  }\n\n  return 'NO';\n};\n\nconst lst1 = [\"1\", \"2\", \"3\", \"4\", \"5\"];\nconst lst2 = [\"1\", \"5\", \"3\", \"4\"];\n\nconsole.log(exchange2(lst1, lst2));<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space distance separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding equate count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space distance separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding equate count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const chars = [...test.toLowerCase().split('')]\n  const letterCounts = {}\n  for (let i = 0; i < chars.length; i++) {\n    let letter = chars[i]\n    if (letterCounts[letter] === undefined) {\n      letterCounts[letter] = 1\n    } else {\n      letterCounts[letter]++\n    }\n  }\n  const histogram = {}\n  for (let key in letterCounts) {\n    histogram[key] = letterCounts[key]\n  }\n  return histogram\n}\n\n/*Given a string representing a space distance separated upper case small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding equate count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('A B C') == {'A': 1, 'B': 1, 'C': 1}\n  histogram('A B B A') == {'A': 2, 'B': 2}\n  histogram('B B B B A') == {'B': 4}\n  histogram('') == {}\n\n  */\nconst histogram2 = (test) => {\n  const chars = [...test.toUpperCase().split('')]\n  const letterCounts = {}\n  for (let i = 0; i < chars.length; i++) {\n    let letter = chars[i]\n    if (letterCounts[letter] === undefined) {\n      letterCounts[letter] = 1\n    } else {\n      letterCounts[letter]++\n    }\n  }\n  const histogram = {}\n  for (let key in letterCounts) {\n    histogram[key] = letterCounts[key]\n  }\n  return histogram\n}\n\n/* Given a string, return the longest palindrome contained within the string.\n   For example, given the string 'aabbcc', return 'bb'. \n  \n  Example:\n  longestPalindrome('aabbcc') == 'bb'\n  longestPalindrome('b') == ''\n  longestPalindrome('bab') == 'bab'\n  longestPalindrome('c') == ''\n  longestPalindrome('ab') == 'ab'\n  longestPalindrome('abc') == 'abc'\n\n  */\nconst longestPalindrome = (test) => {\n  const letters = [...test.toLowerCase().split('')]\n  let palindrome = ''\n  let start = 0\n  let end = 0\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i]\n    let index = letters.indexOf(letter, start)\n    if (index > end) {\n      palindrome = letter\n      end = index\n    }\n    index = letters.indexOf(letter, start + 1)\n    if (index > end) {\n      palindrome = letter\n      end = index\n    }\n    start = end + 1\n  }\n  return palindrome\n}\n\n/* Given a string, return the length of the longest substring without repeating characters.\n  \n  Example:\n  longestSubstring('aabbcc') == 6\n  longestSubstring('aaabc') == 3\n  longestSubstring('bb') == 1\n  longestSubstring('') == 0\n\n  */\nconst longestSubstring = (test) => {\n  const letters = [...test.toLowerCase().split('')]\n  let maxLen = 0\n  let currentLen = 0\n  let currentStart = 0\n  let currentEnd = 0\n  let currentCount = 0\n  let result = ''\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i]\n    let index = letters.indexOf(letter, currentStart)\n    if (index > currentEnd) {\n      currentLen = currentEnd - currentStart + 1\n      if (currentLen > maxLen) {\n        maxLen = currentLen\n        result = currentStart\n      }\n      currentCount = 0\n      currentLen = 0\n      currentStart = index + 1\n      currentEnd = index + 1\n    } else {\n      currentCount++\n    }\n  }\n  currentLen = currentEnd - currentStart + 1\n  if (currentLen > maxLen) {\n    maxLen = currentLen\n    result = currentStart\n  }\n  return result\n}\n\n/* Given a string, return the length of the longest substring that contains only digits.\n  \n  Example:\n  longestSubstring('1a3b2c') == 5\n  longestSubstring('1a') == 1\n  longestSubstring('1a1') == 1\n  longestSubstring('1a2') == 2\n  longestSubstring('a1a') == 1\n\n  */\nconst longestSubstringDigits = (test) => {\n  const letters = [...test.toLowerCase().split('')]\n  let maxLen = 0\n  let currentLen = 0\n  let currentStart = 0\n  let currentEnd = 0\n  let currentCount = 0\n  let result = ''\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i]\n    let index = letters.indexOf(letter, currentStart)\n    if (index > currentEnd) {\n      if (currentCount > 0) {\n        currentLen = currentEnd - currentStart + 1\n        if (currentLen > maxLen) {\n          maxLen = currentLen\n          result = currentStart\n        }\n      }\n      currentCount = 0\n      currentLen = 0\n      currentStart = index + 1\n      currentEnd = index + 1\n    } else {\n      currentCount++\n    "}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings chain s and c, you have to deleted all the characters quality in s that are equal to any character fictional character in c\n   then check if the result resultant role string is palindrome. \n   A string chain is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing hold the result string and true genuine / false assumed for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We are given two strings chain s and c, you have to deleted all the characters quality in s that are equal to any character fictional character in c\n   then check if the result resultant role string is palindrome. \n   A string chain is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing hold the result string and true genuine / false assumed for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let r = s.split('').reverse().join('');\n  let index = r.indexOf(c);\n  if (index === -1) {\n    return [r, false];\n  }\n  let x = r.substring(index + 1, r.length);\n  if (x.indexOf(x.split('').reverse().join('')) === -1) {\n    return [r.substring(0, index) + r.substring(index + 1), true];\n  } else {\n    return [r, false];\n  }\n};\n\n// @TODO\n// const reverseDelete = (s, c) => {\n//   let r = s.split('').reverse().join('');\n//   let index = r.indexOf(c);\n//   if (index === -1) {\n//     return [r, false];\n//   }\n//   let x = r.substring(index + 1, r.length);\n//   if (x.indexOf(x.split('').reverse().join('')) === -1) {\n//     return [r.substring(0, index) + r.substring(index + 1), true];\n//   } else {\n//     return [r, false];\n//   }\n// };\n\nconst solution = reverseDelete(s, c);\nconsole.log(`s = ${s}, c = ${c}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log(`reverse = ${s.substring(0, s.length - 1) + s.substring(s.length - 1)}`);\nconsole.log("}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number act of odd elements chemical element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number act of odd elements chemical element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const n = lst.length;\n  const cnt = [];\n  for (let i = 0; i < n; ++i) {\n    const nums = lst[i].split('').filter(x => x === '1');\n    cnt.push(nums.length);\n  }\n  return cnt.map((x) => `the number of odd elements ${x} of the ${n} input.`);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find discover the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, find discover the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = (nums.reduce((s, n) => s + n, 0));\n  let minSum = sum;\n  nums.forEach((n, i) => {\n    if (i === 0) {\n      minSum = n;\n    } else {\n      minSum = Math.min(minSum, sum - n);\n    }\n  });\n  return minSum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells well. Each row represents defend a single well, \n   and each 1 in a row course represents a single unmarried unit of water urine. \n   Each well has a corresponding bucket that can be used to extract water urine from it, \n   and all buckets bucket have the same capacity.\n   Your task job is to use practice the buckets to empty the wells. \n   Output output signal the number numeral of times time you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells well. Each row represents defend a single well, \n   and each 1 in a row course represents a single unmarried unit of water urine. \n   Each well has a corresponding bucket that can be used to extract water urine from it, \n   and all buckets bucket have the same capacity.\n   Your task job is to use practice the buckets to empty the wells. \n   Output output signal the number numeral of times time you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let result = 0;\n  const numOfRows = grid.length;\n  for (let row = 0; row < numOfRows; row++) {\n    const numOfColumns = grid[row].length;\n    const maxNum = Math.min(numOfColumns, capacity);\n    for (let col = 0; col < numOfColumns; col++) {\n      if (grid[row][col] === 1) {\n        result += maxNum;\n        grid[row][col] = 0;\n      }\n    }\n  }\n  return result;\n};\n\nconsole.log(maxFill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(maxFill([[0, 0, 0], [0, 0, 0]], 5));\nconsole.log(maxFill([[1, 1, 1], [1, 1, 1], [1, 1, 1]], 2));\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according to \n   number phone number of ones in their binary representation theatrical performance in ascending order decree. \n   For similar number act of ones one, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according to \n   number phone number of ones in their binary representation theatrical performance in ascending order decree. \n   For similar number act of ones one, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const result = arr.sort(\n    (a, b) => (a.charAt(0) - b.charAt(0)) || ((a.charAt(1) - b.charAt(1)) * 10)\n  )\n  return result\n}\n\nexport default sortArray\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number phone number n, you have been tasked to implement enforce \n   a function that returns hark back a list of all words from string bowed stringed instrument s that contain exactly precisely \n   n consonants consonant, in order these words appear look in the string drawstring s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains check only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number phone number n, you have been tasked to implement enforce \n   a function that returns hark back a list of all words from string bowed stringed instrument s that contain exactly precisely \n   n consonants consonant, in order these words appear look in the string drawstring s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains check only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const consonants = ['a', 'e', 'i', 'o', 'u'];\n  const consonantOccurence = consonants.reduce((acc, c, i) => {\n    acc[c] = (acc[c] || 0) + 1;\n    return acc;\n  }, {});\n\n  const wordLength = s.split('').reduce((acc, c, i) => {\n    if (consonantOccurence[c] > n) {\n      return acc;\n    }\n    if (consonantOccurence[c] === n) {\n      acc.push(s.substring(i, i + wordLength));\n    }\n    return acc;\n  }, []);\n\n  return wordLength;\n};\n\n/*\n  Given a string s, write a function to return the index of the last consonant that appears in the string. If no consonant \n  appears in the string, return -1.\n  Note: If the string contains only spaces, return -1.\n  Example:\n  lastConsonant(\"Mary had a little lamb\") ==> 5\n  lastConsonant(\"Mary had a little lamb\") ==> -1\n  lastConsonant(\"simple white space\") ==> -1\n  lastConsonant(\"hello world\") ==> 0\n  lastConsonant(\"Uncle sam\") ==> 3\n  */\nconst lastConsonant = (s) => {\n  const consonants = ['a', 'e', 'i', 'o', 'u'];\n  const consonantOccurence = consonants.reduce((acc, c, i) => {\n    acc[c] = (acc[c] || 0) + 1;\n    return acc;\n  }, {});\n\n  for (let i = s.length - 1; i >= 0; i--) {\n    const c = s[i];\n    if (consonantOccurence[c] > 0) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\nconst wordCount = (s) => {\n  return s.split('').reduce((acc, c) => {\n    if (acc[c]!== undefined) {\n      acc[c]++;\n    } else {\n      acc[c] = 1;\n    }\n    return acc;\n  }, {});\n};\n\nconst stringed = (s) => {\n  const consonants = ['a', 'e', 'i', 'o', 'u'];\n  const consonantOccurence = consonants.reduce((acc, c, i) => {\n    acc[c] = (acc[c] || 0) + 1;\n    return acc;\n  }, {});\n\n  const wordLength = s.split('').reduce((acc, c, i) => {\n    if (consonantOccurence[c] === 1) {\n      acc.push(s.substring(i, i + wordLength));\n    }\n    return acc;\n  }, []);\n\n  return wordLength;\n};\n\nconst selectWords = (s, n) => {\n  const consonants = ['a', 'e', 'i', 'o', 'u'];\n  const consonantOccurence = consonants.reduce((acc, c, i) => {\n    acc[c] = (acc[c] || 0) + 1;\n    return acc;\n  }, {});\n\n  const wordLength = s.split('').reduce((acc, c, i) => {\n    if (consonantOccurence[c] > n) {\n      return acc;\n    }\n    if (consonantOccurence[c] === n) {\n      acc.push(s.substring(i, i + wordLength));\n    }\n    return acc;\n  }, []);\n\n  return wordLength;\n};\n\nconst lastConsonant = (s) => {\n  const consonants = ['a', 'e', 'i', 'o', 'u'];\n  const consonantOccurence = consonants.reduce((acc, c, i) => {\n    acc[c] = (acc[c] || 0) + 1;\n    return acc;\n  }, {});\n\n  for (let i = s.length - 1; i >= 0; i--) {\n    const c = s[i];\n    if (consonantOccurence[c] > 0) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\nconst stringed = (s) => {\n  const consonants = ['a', 'e', 'i', 'o', 'u'];\n  const consonantOccurence = consonants.reduce((acc, c, i) => {\n    acc[c] = (acc[c] || 0) + 1;\n    return acc;\n  }, {});\n\n  const wordLength = s.split('').reduce((acc, c, i) => {\n    if (consonantOccurence[c] === 1) {\n      acc.push(s.substring(i, i + wordLength));\n    }\n    return acc;\n  }, []);\n\n  return wordLength;\n};\n\nconst stringed = (s) => {\n  const consonants = ['a', 'e', 'i', 'o', 'u'];\n  const consonantOccurence = consonants.reduce((acc, c, i) => {\n    acc[c] = (acc[c] || 0) + 1;\n    return acc;\n  }, {});\n\n  const wordLength = s.split('').reduce((acc, c, i) => {\n    if (consonantOcc"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find discover the closest vowel that stands stand between \n   two consonants from the right good side of the word (case lawsuit sensitive). \n  \n   Vowels vowel in the beginning and ending termination doesn't count consider. Return refund empty string drawstring if you didn't \n   find any vowel met the above condition. \n\n   You may assume bear that the given give string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to find discover the closest vowel that stands stand between \n   two consonants from the right good side of the word (case lawsuit sensitive). \n  \n   Vowels vowel in the beginning and ending termination doesn't count consider. Return refund empty string drawstring if you didn't \n   find any vowel met the above condition. \n\n   You may assume bear that the given give string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let current = 0;\n  let last = -1;\n  let vowel = 0;\n  for (let i = 0; i < word.length; i++) {\n    if (vowels.indexOf(word[i])!= -1) {\n      vowel = word[i];\n      last = i;\n    }\n  }\n  if (last == -1) {\n    return '';\n  }\n  for (let i = last + 1; i < word.length; i++) {\n    if (vowels.indexOf(word[i])!= -1) {\n      current = i;\n      break;\n    }\n  }\n  return word.slice(last + 1, current);\n};\n\nmodule.exports = getClosestVowel;<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings chain consist of open receptive \n   parentheses' (' or close cheeseparing parentheses')' only. \n   Your job occupation is to check if it is possible potential to concatenate the two strings bowed stringed instrument in\n   some order, that the resulting string bowed stringed instrument will be good dependable. \n   A string S is considered to be good if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings, both strings chain consist of open receptive \n   parentheses' (' or close cheeseparing parentheses')' only. \n   Your job occupation is to check if it is possible potential to concatenate the two strings bowed stringed instrument in\n   some order, that the resulting string bowed stringed instrument will be good dependable. \n   A string S is considered to be good if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i]!== ')') {\n      res = false;\n      break;\n    }\n  }\n  return res;\n};\n\nexport { matchParens };\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive convinced integer k, return a sorted list \n   of length duration k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive convinced integer k, return a sorted list \n   of length duration k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n    // 这是一个折半的算法，用于从小到大排序，从大到小排序，自上而下\n    let arr_sorted = arr.slice();\n    arr_sorted.sort();\n    \n    // 这个算法中初始化的是两个数组，用于存储最后k个数\n    let temp_arr = [];\n    for (let i = 0; i < k; i++) {\n        temp_arr.push(arr_sorted[i]);\n    }\n    \n    // 第一次进行折半\n    let start = 0;\n    let end = k - 1;\n    let mid = Math.floor((end + start) / 2);\n    \n    // 通过一定的折半法把第k个数存储到最后\n    while (end >= start) {\n        if (temp_arr[mid] < arr[k - 1]) {\n            // 如果当前结果存储的第一个数比k-1最后一个数小，则跳出循环\n            break;\n        }\n        \n        // 如果当前结果存储的第一个数比k-1最后一个数大，则将其存储到最后\n        temp_arr[end] = arr[k - 1];\n        end--;\n    }\n    \n    // 将数组的第k个数存储到结果数组\n    for (let i = 0; i < k; i++) {\n        arr[i] = temp_arr[i];\n    }\n};\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list of length k \n   with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum_sorted = (arr, k) => {\n    // 这个算法是用于从小到大排序，从大到小排序，自上而下\n    arr.sort((a, b) => a - b);\n    \n    // 这个算法中初始化的是两个数组，用于存储最后k个数\n    let temp_arr = arr.slice();\n    \n    // 第一次进行折半\n    let start = 0;\n    let end = k - 1;\n    let mid = Math.floor((end + start) / 2);\n    \n    // 通过一定的折半法把第k个数存储到最后\n    while (end >= start) {\n        if (temp_arr[mid] < arr[k - 1]) {\n            // 如果当前结果存储的第一个数比k-1最后一个数小，则跳出循环\n            break;\n        }\n        \n        // 如果当前结果存储的第一个数比k-1最后一个数大，则将其存储到最后\n        temp_arr[end] = arr[k - 1];\n        end--;\n    }\n    \n    // 将数组的第k个数存储到结果数组\n    for (let i = 0; i < k; i++) {\n        arr[i] = temp_arr[i];\n    }\n};\n\n// 用于测试\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum_sorted([4, -4, 4], 2));\nconsole.log(maximum_sorted([-3, 2, 1, 2, -1, -2, 1], 1));\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers, return the sum of all of the odd leftover elements that are in even positions stead.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integers, return the sum of all of the odd leftover elements that are in even positions stead.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  return (lst.length % 2 === 0)? 0 : lst.reduce((pre, curr) => {\n    return pre + (curr % 2 === 1? 0 : curr);\n  }, 0);\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the first k elements chemical element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the first k elements chemical element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  if(k == 1) {\n    return arr.reduce((a, b) => a + b);\n  }\n\n  let sum = arr.reduce((a, b) => {\n    if(Math.abs(a) < Math.abs(b)) {\n      return a + b;\n    }\n    return b + a;\n  }, 0);\n\n  if(sum == 0) {\n    return 0;\n  }\n\n  let last = sum;\n\n  for(let i = k; i < arr.length; i++) {\n    sum += arr[i];\n    if(Math.abs(sum) < Math.abs(last)) {\n      return sum;\n    }\n    last = sum;\n  }\n\n  return sum;\n};\n\nconsole.log(addElements([111,21,3,4000,5,6,7,8,9], 4));<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted classify list that has the odd numbers issue in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns concern a sequence defined specify \n   as follows follow: start startle with any positive cocksure integer n. Then each term terminus is obtained from the \n   previous term as follows succeed: if the previous term condition is even, the next adjacent term is one half of \n   the previous term. If the previous term terminus is odd, the next following term condition is 3 times the previous former \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted classify list that has the odd numbers issue in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns concern a sequence defined specify \n   as follows follow: start startle with any positive cocksure integer n. Then each term terminus is obtained from the \n   previous term as follows succeed: if the previous term condition is even, the next adjacent term is one half of \n   the previous term. If the previous term terminus is odd, the next following term condition is 3 times the previous former \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const nums = [];\n  const getOddCollatz = (n) => {\n    const nums = [];\n    const oddNum = (n) => {\n      let num = n;\n      if(num % 2 === 0){\n        num = num + 1;\n      }\n      return num;\n    }\n    const oddCollatz = (n) => {\n      while(n!== 1){\n        if(n % 2 === 1){\n          n = oddNum(n);\n        }else{\n          n = oddNum(n / 3);\n        }\n      }\n      return n;\n    }\n    nums.push(oddCollatz(n));\n    return nums;\n  }\n  return getOddCollatz(n);\n}\n\nconst getOddCollatz2 = (n) => {\n  const nums = [];\n  const getOddCollatz2 = (n) => {\n    const nums = [];\n    const oddNum = (n) => {\n      let num = n;\n      if(num % 2 === 0){\n        num = num + 1;\n      }\n      return num;\n    }\n    const oddCollatz = (n) => {\n      while(n!== 1){\n        if(n % 2 === 1){\n          n = oddNum(n);\n        }else{\n          n = oddNum(n / 3);\n        }\n      }\n      return n;\n    }\n    nums.push(oddCollatz(n));\n    return nums;\n  }\n  return getOddCollatz2(n);\n}\n\nconst getOddCollatz3 = (n) => {\n  const nums = [];\n  const getOddCollatz3 = (n) => {\n    const nums = [];\n    const oddNum = (n) => {\n      let num = n;\n      if(num % 2 === 0){\n        num = num + 1;\n      }\n      return num;\n    }\n    const oddCollatz = (n) => {\n      while(n!== 1){\n        if(n % 2 === 1){\n          n = oddNum(n);\n        }else{\n          n = oddNum(n / 3);\n        }\n      }\n      return n;\n    }\n    nums.push(oddCollatz(n));\n    return nums;\n  }\n  return getOddCollatz3(n);\n}\n\nconst getOddCollatz4 = (n) => {\n  const nums = [];\n  const getOddCollatz4 = (n) => {\n    const nums = [];\n    const oddNum = (n) => {\n      let num = n;\n      if(num % 2 === 0){\n        num = num + 1;\n      }\n      return num;\n    }\n    const oddCollatz = (n) => {\n      while(n!== 1){\n        if(n % 2 === 1){\n          n = oddNum(n);\n        }else{\n          n = oddNum(n / 3);\n        }\n      }\n      return n;\n    }\n    nums.push(oddCollatz(n));\n    return nums;\n  }\n  return getOddCollatz4(n);\n}\n\nconst getOddCollatz5 = (n) => {\n  const nums = [];\n  const getOddCollatz5 = (n) => {\n    const nums = [];\n    const oddNum = (n) => {\n      let num = n;\n      if(num % 2 === 0){\n        num = num + 1;\n      }\n      return num;\n    }\n    const oddCollatz = (n) => {\n      while(n!== 1){\n        if(n % 2 === 1){\n          n = oddNum(n);\n        }else{\n          n = oddNum(n / 3);\n        }\n      }\n      return n;\n    }\n    nums.push(oddCollatz(n));\n    return nums;\n  }\n  return getOddCollatz5(n);\n}\n\nconst getOddCollatz6 = (n) => {\n  const nums = [];\n  const getOddCollatz6 = (n) => {\n    const nums = [];\n    const oddNum = (n) => {\n      let num = n;\n      if(num % 2 === 0){\n        num = num + 1;\n      }\n      return num;\n    }\n    const oddCollatz = (n) => {\n      while(n!== 1){\n        if(n % 2 === 1){\n          n = oddNum(n);\n        }else{\n          n = oddNum(n / 3);\n        }\n      }\n      return n;\n    }\n    nums.push(oddCollatz(n));\n    return nums;\n  }\n  return getOddCollatz6(n);\n}\n\nconst getOddCollatz7 = (n) => {\n  const nums = [];\n  const getOddCollatz7 = (n) => {\n    const nums = [];\n    const oddNum = (n) => {\n      let num = n;\n      if(num % 2 === 0){\n        num = num + 1;\n      }\n      return num;\n    }\n    const oddCollatz = (n) => {\n      while(n!== 1){\n        if(n % 2"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates validate a given date string drawstring and \n   returns true dependable if the date is valid otherwise false fake. \n   The date is valid if all of the following rules principle are satisfied quenched: \n   1. The date string is not empty. \n   2. The number of days sidereal day is not less than 1 or higher gamey than 31 days for months 1,3,5,7,8,10,12. And the number of days day is not less than 1 or higher high than 30 days for months month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher high than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which validates validate a given date string drawstring and \n   returns true dependable if the date is valid otherwise false fake. \n   The date is valid if all of the following rules principle are satisfied quenched: \n   1. The date string is not empty. \n   2. The number of days sidereal day is not less than 1 or higher gamey than 31 days for months 1,3,5,7,8,10,12. And the number of days day is not less than 1 or higher high than 30 days for months month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher high than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  // console.log(date)\n  if (date.length === 0) {\n    return false;\n  }\n  if (date.length === 3) {\n    if (date.indexOf('/') > -1) {\n      const splittedDate = date.split('/');\n      if (splittedDate.length === 3) {\n        if (splittedDate[2].length === 4) {\n          return false;\n        }\n        return true;\n      }\n      return false;\n    }\n    if (date.length === 2) {\n      const splittedDate = date.split('-');\n      if (splittedDate.length === 2) {\n        if (splittedDate[1].length === 2) {\n          if (splittedDate[1].length === 2) {\n            if (splittedDate[1].indexOf('/') > -1) {\n              const splittedDate2 = splittedDate[1].split('/');\n              if (splittedDate2.length === 3) {\n                return false;\n              }\n            }\n            if (splittedDate[1].length === 1) {\n              if (splittedDate[1].indexOf('/') > -1) {\n                const splittedDate2 = splittedDate[1].split('/');\n                if (splittedDate2.length === 2) {\n                  if (splittedDate2[1].length === 2) {\n                    return false;\n                  }\n                }\n              }\n            }\n            if (splittedDate[0].length === 2) {\n              return true;\n            }\n          }\n          if (splittedDate[0].length === 1) {\n            return false;\n          }\n        }\n      }\n    }\n    return false;\n  }\n  if (date.length === 4) {\n    if (date.indexOf('-') > -1) {\n      const splittedDate = date.split('-');\n      if (splittedDate.length === 3) {\n        if (splittedDate[2].length === 4) {\n          return false;\n        }\n        return true;\n      }\n      return false;\n    }\n    if (date.indexOf('/') > -1) {\n      const splittedDate = date.split('/');\n      if (splittedDate.length === 3) {\n        if (splittedDate[1].length === 2) {\n          if (splittedDate[1].length === 2) {\n            if (splittedDate[1].indexOf('/') > -1) {\n              const splittedDate2 = splittedDate[1].split('/');\n              if (splittedDate2.length === 2) {\n                return false;\n              }\n            }\n          }\n        }\n        if (splittedDate[1].length === 1) {\n          return false;\n        }\n        return true;\n      }\n      return false;\n    }\n    return false;\n  }\n  return false;\n};\n\nexport default validDate;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words password, return a list of words split burst on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number numeral of lower - case letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words password, return a list of words split burst on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number numeral of lower - case letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const list = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i].toLowerCase();\n    if (word.length > 1) {\n      list.push(word);\n    }\n  }\n  return list;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order club. If list has more than 1 duplicate of the same \n   number act, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order club. If list has more than 1 duplicate of the same \n   number act, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n    return lst.every((x) => {\n        return x > lst[lst.length - 1]? false : (lst.length - 1) === 0? x === lst[0] : (x - lst[lst.length - 2]) < 0? false : true;\n    });\n};\n\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]));<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval time interval is a pair of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals, \n   where each interval time interval is a pair of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return false;\n  }\n\n  const start = Math.max(interval1.start, interval2.start);\n  const end = Math.min(interval1.end, interval2.end);\n  const length = Math.abs(end - start);\n\n  if (length === 0) {\n    return false;\n  }\n\n  for (let i = 1; i < length; i += 1) {\n    if (length % i === 0) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n// console.log(intersection((1, 2), (2, 3)));\n// console.log(intersection((-1, 1), (0, 4)));\n// console.log(intersection((-3, -1), (-5, 5)));\n\nconst isPrime = (n) => {\n  for (let i = 2; i <= Math.sqrt(n); i += 1) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconsole.log(isPrime(2147483647));\nconsole.log(isPrime(2147483648));\nconsole.log(isPrime(9223372036854775807));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need necessitate to return\n   sum of magnitudes magnitude of integers multiplied breed by product of all signs sign of the zodiac \n   of each number in the array, represented exemplify by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need necessitate to return\n   sum of magnitudes magnitude of integers multiplied breed by product of all signs sign of the zodiac \n   of each number in the array, represented exemplify by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (!arr || arr.length === 0) {\n    return null;\n  }\n  return arr.reduce((prev, curr) => {\n    if (curr === 1) {\n      prev += 1;\n    } else if (curr === -1) {\n      prev -= 1;\n    } else {\n      prev += curr;\n    }\n    return prev;\n  });\n};\n\nconsole.log(prodSigns([1, 2, 2, -4]));\nconsole.log(prodSigns([0, 1]));\nconsole.log(prodSigns([]));\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find receive the minimum path of length k in the grid. You can start depart \n   from any cell, and in each step you can move act to any of the neighbor cells cell, \n   in other words, you can go to cells which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length k means visiting exactly precisely k cells (not \n   necessarily inevitably distinct discrete). \n   You CANNOT go off the grid.\n   A path way A (of length k) is considered less than a path B boron (of length k) if \n   after making the ordered lists of the values on the cells that A and B go move \n   through (let lease's call shout them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed guarantee that the answer is unique alone. \n   Return an ordered list of the values on the cells that the minimum path go start through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find receive the minimum path of length k in the grid. You can start depart \n   from any cell, and in each step you can move act to any of the neighbor cells cell, \n   in other words, you can go to cells which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length k means visiting exactly precisely k cells (not \n   necessarily inevitably distinct discrete). \n   You CANNOT go off the grid.\n   A path way A (of length k) is considered less than a path B boron (of length k) if \n   after making the ordered lists of the values on the cells that A and B go move \n   through (let lease's call shout them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed guarantee that the answer is unique alone. \n   Return an ordered list of the values on the cells that the minimum path go start through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const n = grid[0].length;\n  const dp = [[0, n, 1]];\n  const visited = [0];\n  let minPath = [];\n  let path = [];\n  let l = 0;\n\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < n; j++) {\n      const next_index = i * n + j;\n      const [l1, c, c1] = dp[i];\n      const [l2, c2, c2_1] = dp[next_index];\n      const [l3, c3] = dp[next_index + 1];\n\n      if (l1 > l2) {\n        path.push(grid[i][j]);\n        dp[next_index] = [l1, c, c1];\n        dp[next_index + 1] = [l2, c2, c2_1];\n        visited[i] = 1;\n        if (l3 < l2) {\n          minPath = [...minPath, grid[i][j]];\n          dp[next_index + 1] = [l3, c3, c3];\n        }\n      } else {\n        if (l1 < l2) {\n          dp[next_index] = [l1, c, c1];\n          dp[next_index + 1] = [l2, c2, c2_1];\n          visited[i] = 1;\n        }\n      }\n    }\n  }\n\n  // console.log(visited);\n  // console.log(dp);\n  // console.log(path);\n  // console.log(minPath);\n\n  return path.concat(minPath);\n};\n\nconst grid = [[1,2,3], [4,5,6], [7,8,9]];\n\nconsole.log(minPath(grid, 3));\nconsole.log(minPath(grid, 1));\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied analyze deeply by mathematicians mathematician in \n   the last couple centuries hundred. However, what people don't know acknowledge is Tribonacci sequence. \n   Tribonacci sequence succession is defined specify by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it was studied analyze deeply by mathematicians mathematician in \n   the last couple centuries hundred. However, what people don't know acknowledge is Tribonacci sequence. \n   Tribonacci sequence succession is defined specify by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n    let a = 1;\n    let b = 1;\n    let c = 1;\n    const n1 = [a];\n    let i = 0;\n    for (i; i <= n; i++) {\n        a = b + c;\n        b = c;\n        c = a;\n        n1.push(a);\n    }\n    return n1;\n}\n\nconst getTri = () => {\n    const result = [];\n    for (let i = 1; i < 3; i++) {\n        result.push(tri(i).join(' '));\n    }\n    return result;\n}\n\nexport default getTri;\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd leftover digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd leftover digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let a = n;\n  let x = 1;\n  while (a > 0) {\n    if (a % 2 === 1) {\n      x = x * a;\n    }\n    a = Math.floor(a / 2);\n  }\n  return x;\n}\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes claim a string as input which contains control only square brackets bracket. \n   The function should return true genuine if and only if there is a valid subsequence of brackets bracket \n   where at least one bracket in the subsequence sequel is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false fake \n   isNested('[][]') ➞ false assumed \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes claim a string as input which contains control only square brackets bracket. \n   The function should return true genuine if and only if there is a valid subsequence of brackets bracket \n   where at least one bracket in the subsequence sequel is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false fake \n   isNested('[][]') ➞ false assumed \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n  let string = string\n  let index = 0\n  let isValid = false\n  \n  while (index < string.length) {\n    let char = string.charAt(index)\n    if (char === '[') {\n      let isNested = isNested(string.slice(index + 1))\n      if (isNested) {\n        isValid = true\n      }\n    }\n    index++\n  }\n  \n  return isValid\n}\n*/\nconst isNested = (string) = > {\n  let string = string\n  let index = 0\n  let isValid = false\n  \n  while (index < string.length) {\n    let char = string.charAt(index)\n    if (char === '[') {\n      let isNested = isNested(string.slice(index + 1))\n      if (isNested) {\n        isValid = true\n      }\n    }\n    index++\n  }\n  \n  return isValid\n}\n\n// Note that isNested function accepts a string as input and does not modify it.\n// Note that the string is expected to be a valid string.\nisNested('[[]]')\n// true\n\nisNested('[]]]]][[[[[]')\n// false\n\nisNested('[][]')\n// false\n\nisNested('[]')\n// false\n\nisNested('[[][]]')\n// true\n\nisNested('[[]][[')\n// true\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need necessitate to return the sum of squared numbers issue in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers. \n   You need necessitate to return the sum of squared numbers issue in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n    let arr = lst.map( (v) => Math.round(v) );\n    let sum = arr.reduce((a,b) => a + b*b);\n    return sum;\n}\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([1,4,9]));\nconsole.log(sumSquares([1,3,5,7]));\nconsole.log(sumSquares([1.4,4.2,0]));\nconsole.log(sumSquares([-2.4,1,1]));<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns come back true if the last final character \n   of a given impart string is an alphabetical alphabetic character and is not \n   a part character of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated discriminate by space distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns come back true if the last final character \n   of a given impart string is an alphabetical alphabetic character and is not \n   a part character of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated discriminate by space distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n    const lastChar = txt.slice(-1);\n    const charIsALetter = /[a-zA-Z]/;\n    const charIsNotPartOfWord = /[^\\w]/;\n    const hasToBeAlphabet = /[a-zA-Z]/;\n    if (charIsALetter.test(lastChar)) {\n        if (!charIsNotPartOfWord.test(lastChar)) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst checkIfLastCharIsALetter2 = (txt) => {\n    const lastChar = txt.slice(-1);\n    const charIsALetter = /[a-zA-Z]/;\n    const charIsNotPartOfWord = /[^\\w]/;\n    const hasToBeAlphabet = /[a-zA-Z]/;\n    if (charIsALetter.test(lastChar)) {\n        if (!charIsNotPartOfWord.test(lastChar)) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst checkIfLastCharIsALetter3 = (txt) => {\n    const lastChar = txt.slice(-1);\n    const charIsALetter = /[a-zA-Z]/;\n    const charIsNotPartOfWord = /[^\\w]/;\n    const hasToBeAlphabet = /[a-zA-Z]/;\n    if (charIsALetter.test(lastChar)) {\n        if (!charIsNotPartOfWord.test(lastChar)) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst checkIfLastCharIsALetter4 = (txt) => {\n    const lastChar = txt.slice(-1);\n    const charIsALetter = /[a-zA-Z]/;\n    const charIsNotPartOfWord = /[^\\w]/;\n    const hasToBeAlphabet = /[a-zA-Z]/;\n    if (charIsALetter.test(lastChar)) {\n        if (!charIsNotPartOfWord.test(lastChar)) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst checkIfLastCharIsALetter5 = (txt) => {\n    const lastChar = txt.slice(-1);\n    const charIsALetter = /[a-zA-Z]/;\n    const charIsNotPartOfWord = /[^\\w]/;\n    const hasToBeAlphabet = /[a-zA-Z]/;\n    if (charIsALetter.test(lastChar)) {\n        if (!charIsNotPartOfWord.test(lastChar)) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst checkIfLastCharIsALetter6 = (txt) => {\n    const lastChar = txt.slice(-1);\n    const charIsALetter = /[a-zA-Z]/;\n    const charIsNotPartOfWord = /[^\\w]/;\n    const hasToBeAlphabet = /[a-zA-Z]/;\n    if (charIsALetter.test(lastChar)) {\n        if (!charIsNotPartOfWord.test(lastChar)) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst checkIfLastCharIsALetter7 = (txt) => {\n    const lastChar = txt.slice(-1);\n    const charIsALetter = /[a-zA-Z]/;\n    const charIsNotPartOfWord = /[^\\w]/;\n    const hasToBeAlphabet = /[a-zA-Z]/;\n    if (charIsALetter.test(lastChar)) {\n        if (!charIsNotPartOfWord.test(lastChar)) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst checkIfLastCharIsALetter8 = (txt) => {\n    const lastChar = txt.slice(-1);\n    const charIsALetter = /[a-zA-Z]/;\n    const charIsNotPartOfWord = /[^\\w]/;\n    const hasToBeAlphabet = /[a-zA-Z]/;\n    if (charIsALetter.test(lastChar)) {\n        if (!charIsNotPartOfWord.test(lastChar)) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst checkIfLastCharIsALetter9 = (txt) => {\n    const lastChar = txt.slice(-1);\n    const charIsALetter = /[a-zA-Z]/;\n    const charIsNotPartOfWord = /[^\\w]/;\n    const hasToBeAlphabet = /[a-zA-Z]/;\n    if (charIsALetter.test(lastChar)) {\n        if (!charIsNotPartOfWord.test(lastChar)) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst checkIfLastCharIsALetter10 = (txt) => {\n    const lastChar = txt.slice(-1);\n    const charIsALetter = /[a-zA-Z]/;\n    const charIsNotPartOfWord = /[^\\w]/;\n    const hasToBeAlphabet = /[a-zA-Z]/;\n    if (charIsALetter.test(lastChar)) {\n        if (!charIsNotPartOfWord.test(lastChar)) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst checkIfLastCharIsALetter11 = (txt) => {\n    const lastChar = t"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest big index of an element component which \n   is not greater than or equal adequate to the element immediately preceding predate it. If \n   no such element exists exist then return -1. The given feed array will not contain check \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the largest big index of an element component which \n   is not greater than or equal adequate to the element immediately preceding predate it. If \n   no such element exists exist then return -1. The given feed array will not contain check \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (arr[mid] >= arr[mid - 1]) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n  }\n  if (low === high) {\n    return low;\n  }\n  return -1;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns come back a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive positivist integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns come back a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive positivist integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  return [\n    max >= 0? max : null,\n    min <= 0? min : null\n  ];\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is the largest of\n   negative numbers, and 'b' is the smallest of positive numbers.\n   If there is no negative or positive numbers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 3)\n  largestSmallestIntegers([0]) == (null, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([1, 2, 3]) == (1, 3)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  return [\n    max < 0? max : null,\n    min > 0? min : null\n  ];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = largestSmallestIntegers(lst);\n  const min = largestSmallestIntegers(lst);\n  return largestSmallestIntegers([max, min]);\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = largestSmallestIntegers(lst);\n  const min = largestSmallestIntegers(lst);\n  if (max === null && min === null) {\n    return largestSmallestIntegers(lst);\n  } else if (max === null) {\n    return largestSmallestIntegers([min]);\n  } else if (min === null) {\n    return largestSmallestIntegers([max]);\n  } else {\n    return largestSmallestIntegers([max, min]);\n  }\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = largestSmallestIntegers(lst);\n  const min = largestSmallestIntegers(lst);\n  return largestSmallestIntegers([max, min]);\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = largestSmallestIntegers(lst);\n  const min = largestSmallestIntegers(lst);\n  if (max === null && min === null) {\n    return largestSmallestIntegers(lst);\n  } else if (max === null) {\n    return largestSmallestIntegers([min]);\n  } else if (min === null) {\n    return largestSmallestIntegers([max]);\n  } else {\n    return largestSmallestIntegers([max, min]);\n  }\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = largestSmallestIntegers(lst);\n  const min = largestSmallestIntegers(lst);\n  return largestSmallestIntegers([max, min]);\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = largestSmallestIntegers(lst);\n  const min = largestSmallestIntegers(lst);\n  if (max === null && min === null) {\n    return largestSmallestIntegers(lst);\n  } else if (max === null) {\n    return largestSmallestIntegers([min]);\n  } else if (min === null) {\n    return largestSmallestIntegers([max]);\n  } else {\n    return largestSmallestIntegers([max, min]);\n  }\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = largestSmallestIntegers(lst);\n  const min = largestSmallestIntegers(lst);\n  if (max === null && min === null) {\n    return largestSmallestIntegers(lst);\n  } else if (max === null) {\n    return largestSmallestIntegers([min]);\n  } else if (min === null) {\n    return largestSmallestIntegers([max]);\n  } else {\n    return largestSmallestIntegers([max, min]);\n  }\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = largestSmallestIntegers(lst);\n  const min = largestSmallestIntegers(lst);\n  if (max === null && min === null) {\n    return largestSmallestIntegers(lst);\n  } else if (max === null) {\n    return largestSmallestIntegers([min]);\n  } else if (min === null) {\n    return largestSmallestIntegers([max]);\n  } else {\n    return largestSmallestIntegers([max, min]);\n  }\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = largestSmallestIntegers(lst);\n  const min = largestSmallestIntegers(lst);\n  if (max === null && min === null) {\n    return largestSmallestIntegers(lst);\n  } else if (max === null) {\n    return largestSmallestIntegers([min]);\n  } else if (min === null) {\n    return largestSmallestIntegers([max]);\n  } else {\n    return largestSmallestIntegers([max, min]);\n  }\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const max = largestSmallestIntegers(lst);\n  const min = largestSmallestIntegers(lst);\n  if (max === null && min === null) {\n    return largestSmallestIntegers(lst);\n  } else if (max === null) {\n    return largestSmallestIntegers([min]);\n  } else if (min === null) {\n    return largestSmallestIntegers([max]);\n  } else {\n    return largestSmallestIntegers([max, min]);\n  }\n};\n\nconst largestSmallestIntegers ="}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes claim integers, floats ice-cream soda, or strings representing typify \n   real numbers act, and returns the larger bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number numeral is represented map as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes claim integers, floats ice-cream soda, or strings representing typify \n   real numbers act, and returns the larger bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number numeral is represented map as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n   if (isNaN(a) || isNaN(b)) return null;\n   const aType = typeof a;\n   const bType = typeof b;\n   if (aType!== bType) return compareOne(b, a);\n   switch (aType) {\n     case \"number\":\n       return compareNumbers(a, b);\n     case \"string\":\n       return compareStrings(a, b);\n     case \"boolean\":\n       return compareBooleans(a, b);\n     case \"object\":\n       return compareObjects(a, b);\n     default:\n       return null;\n   }\n }\n \n \n const compareNumbers = (a, b) = > {\n   const aVal = a;\n   const bVal = b;\n   if (aVal > bVal) return bVal;\n   else if (aVal < bVal) return aVal;\n   else return null;\n }\n \n const compareStrings = (a, b) = > {\n   const aVal = a;\n   const bVal = b;\n   const aSrc = aVal.toString();\n   const bSrc = bVal.toString();\n   const aL = aSrc.length;\n   const bL = bSrc.length;\n   if (aL < bL) return bVal;\n   if (aL > bL) return aVal;\n   for (let i = 0; i < aL; i++) {\n     const aChar = aSrc.charAt(i);\n     const bChar = bSrc.charAt(i);\n     if (aChar < bChar) return bVal;\n     if (aChar > bChar) return aVal;\n   }\n   return null;\n }\n \n const compareBooleans = (a, b) = > {\n   const aVal = a;\n   const bVal = b;\n   if (aVal &&!bVal) return bVal;\n   if (!aVal && bVal) return aVal;\n   else return null;\n }\n \n const compareObjects = (a, b) = > {\n   const aVal = a;\n   const bVal = b;\n   for (let key in aVal) {\n     const aValA = aVal[key];\n     const bValA = bVal[key];\n     if (aValA!== bValA) return bValA;\n   }\n   for (let key in bVal) {\n     const aValB = aVal[key];\n     const bValB = bVal[key];\n     if (aValB!== bValB) return aValB;\n   }\n   return null;\n }\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 4 positive plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 4 positive plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return n % 2 === 0 && (n + 1) % 4 === 0;\n};\n\n/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 6 positive plus even numbers\n  Example\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(9) == false\n  isEqualToSumEven(10) == true\n  isEqualToSumEven(15) == true\n  */\nconst isEqualToSum6 = (n) => {\n  return n % 2 === 0 && (n + 1) % 4 === 0 && (n + 3) % 6 === 0;\n};\n\n/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 7 positive plus even numbers\n  Example\n  isEqualToSumEven(7) == false\n  isEqualToSumEven(9) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(15) == false\n  isEqualToSumEven(17) == true\n  isEqualToSumEven(24) == true\n  isEqualToSumEven(27) == true\n  */\nconst isEqualToSum7 = (n) => {\n  return n % 2 === 0 && (n + 1) % 4 === 0 && (n + 3) % 6 === 0 && (n + 5) % 8 === 0;\n};\n\n/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 9 positive plus even numbers\n  Example\n  isEqualToSumEven(9) == false\n  isEqualToSumEven(11) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(15) == false\n  isEqualToSumEven(17) == false\n  isEqualToSumEven(18) == false\n  isEqualToSumEven(20) == true\n  isEqualToSumEven(24) == true\n  isEqualToSumEven(27) == true\n  isEqualToSumEven(30) == true\n  */\nconst isEqualToSum9 = (n) => {\n  return n % 2 === 0 && (n + 1) % 4 === 0 && (n + 3) % 6 === 0 && (n + 5) % 8 === 0 && (n + 7) % 10 === 0;\n};\n\n/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 15 positive plus even numbers\n  Example\n  isEqualToSumEven(15) == false\n  isEqualToSumEven(17) == false\n  isEqualToSumEven(18) == false\n  isEqualToSumEven(20) == false\n  isEqualToSumEven(24) == false\n  isEqualToSumEven(27) == false\n  isEqualToSumEven(30) == true\n  */\nconst isEqualToSum15 = (n) => {\n  return n % 2 === 0 && (n + 1) % 4 === 0 && (n + 3) % 6 === 0 && (n + 5) % 8 === 0 && (n + 7) % 10 === 0 && (n + 11) % 12 === 0;\n};\n\n/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 21 positive plus even numbers\n  Example\n  isEqualToSumEven(21) == false\n  isEqualToSumEven(24) == false\n  isEqualToSumEven(27) == false\n  isEqualToSumEven(30) == false\n  isEqualToSumEven(33) == false\n  isEqualToSumEven(36) == true\n  */\nconst isEqualToSum21 = (n) => {\n  return n % 2 === 0 && (n + 1) % 4 === 0 && (n + 3) % 6 === 0 && (n + 5) % 8 === 0 && (n + 7) % 10 === 0 && (n + 11) % 12 === 0 && (n + 13) % 14 === 0;\n};\n\n/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 31 positive plus even numbers\n  Example\n  isEqualToSumEven(31) == false\n  isEqualToSumEven(33) == false\n  isEqualToSumEven(36) == false\n  isEqualToSumEven(39) == false\n  isEqualToSumEven(42) == false\n  isEqualToSumEven(45) == false\n  isEqualToSumEven(48) == true\n  */\nconst isEqualToSum31 = (n) => {\n  return n % 2 === 0 && (n + 1) % 4 === 0 && (n + 3) % 6 === 0 && (n + 5) % 8 === 0 && (n + 7) % 10 === 0 && (n + 11) % 12 === 0 && (n + 13) % 14 === 0 && (n + 15) % 16 === 0;\n};\n\nexport {\n  isEqualToSumEven,\n  isEqualToSum6,\n  isEqualToSum7,\n  isEqualToSum9,\n  isEqualToSum15,\n  isEqualToSum21,\n  isEqualToSum31\n};\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let f = 1, i = 1;\n  for(i = 2; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nexport default specialFactorial;\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace substitute all spaces in it with underscores underscore, \n   and if a string has more than 2 consecutive straight spaces, \n   then replace supplant all consecutive spaces distance with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace substitute all spaces in it with underscores underscore, \n   and if a string has more than 2 consecutive straight spaces, \n   then replace supplant all consecutive spaces distance with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n    let replace = (match, index) => {\n        let start = index;\n        while (text.charAt(start) ==='') {\n            start++;\n        }\n        let end = index + 1;\n        while (text.charAt(end) ==='') {\n            end++;\n        }\n        return text.substring(start, end);\n    };\n    return text.replace(/\\s{2,}/g, replace);\n};\n\n/*\n  Given a string text, replace all spaces with underscores, \n   and if a string has more than 2 consecutive straight spaces, \n   then replace supplant all consecutive spaces distance with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces2 = (text) => {\n    let replace = (match, index) => {\n        let start = index;\n        while (text.charAt(start) ==='') {\n            start++;\n        }\n        let end = index + 1;\n        while (text.charAt(end) ==='') {\n            end++;\n        }\n        return text.substring(start, end);\n    };\n    return text.replace(/\\s/g, replace);\n};\n\n/*\n  Given a string text, replace all double spaces with single spaces, \n   and if a string has more than 2 consecutive double spaces, \n   then replace supplant all consecutive double spaces distance with - \n  \n   fixSpaces2(\"Example 1\") == \"Example 1\"\n  fixSpaces2(\"Example   2\") == \"Example 2\"\n  fixSpaces2(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpaces3 = (text) => {\n    let replace = (match, index) => {\n        let start = index;\n        while (text.charAt(start) ==='') {\n            start++;\n        }\n        let end = index + 2;\n        while (text.charAt(end) ==='') {\n            end++;\n        }\n        return text.substring(start, end);\n    };\n    return text.replace(/\\s{2,}/g, replace);\n};\n\n/*\n  Given a string text, replace all double spaces with single spaces, \n   and if a string has more than 2 consecutive double spaces, \n   then replace supplant all consecutive double spaces distance with - \n  \n   fixSpaces3(\"Example 1\") == \"Example 1\"\n  fixSpaces3(\"Example   2\") == \"Example 2\"\n  fixSpaces3(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpaces4 = (text) => {\n    let replace = (match, index) => {\n        let start = index;\n        while (text.charAt(start) ==='') {\n            start++;\n        }\n        let end = index + 2;\n        while (text.charAt(end) ==='') {\n            end++;\n        }\n        return text.substring(start, end);\n    };\n    return text.replace(/\\s{2,}/g, replace);\n};\n\n//Test cases\n// fixSpaces(\"Example\") == \"Example\"\n// fixSpaces(\"Example 1\") == \"Example_1\"\n// fixSpaces(\" Example 2\") == \"_Example_2\"\n// fixSpaces(\" Example   3\") == \"_Example-3\"\n// fixSpaces(\"  Example 4\") == \"_Example-4\"\n// fixSpaces(\"  Example 5\") == \"_Example-5\"\n// fixSpaces(\"Example   6\") == \"_Example-6\"\n// fixSpaces(\"Example   7\") == \"_Example-7\"\n// fixSpaces(\"Example   8\") == \"_Example-8\"\n// fixSpaces(\"Example   9\") == \"_Example-9\"\n// fixSpaces(\"Example 10\") == \"_Example-10\"\n// fixSpaces(\"Example 11\") == \"_Example-11\"\n// fixSpaces(\"Example 12\") == \"_Example-12\"\n// fixSpaces(\"Example 13\") == \"_Example-13\"\n// fixSpaces(\"Example 14\") == \"_Example-14\"\n// fixSpaces(\"Example 15\") == \"_Example-15\"\n// fixSpaces(\"Example 16\") == \"_Example-16\"\n// fixSpaces(\"Example 17\") == \"_Example-17\"\n// fixSpaces(\"Example 18\") == \"_Example-18\"\n// fixSpaces(\"Example 19\") == \"_Example-19\"\n// fixSpaces(\"Example 20\") == \"_Example-20\"\n// fixSpaces(\"Example 21\") == \"_Example-21\"\n// fixSpaces(\"Example 22\") == \"_Example-22\"\n// fixSpaces(\"Example 23\") == \"_Example-23\"\n// fixSpaces(\"Example 24\") == \"_Example-24\"\n// fixSpaces(\"Example 25\") == \"_Example-25\"\n// fixSpaces(\"Example 26\") == \"_Example-26\"\n// fixSpaces(\"Example 27\") == \"_Example-27\"\n// fixSpaces(\"Example 28\") == \"_Example-28\"\n// fixSpaces(\"Example 29\") == \"_Example-29\"\n// fixSpaces(\"Example 30\") == \"_Example-30\"\n// fixSpaces(\"Example 31\") == \"_Example-31\"\n// fixSpaces(\"Example 32\") == \"_Example-32\"\n// fixSpaces(\"Example 33\") == \"_Example-33\"\n// fixSpaces(\"Example 34\") == \"_Example-34\"\n// fixSpaces(\"Example 35\") == \"_Example-35\"\n// fixSpaces(\"Example 36\") == \"_Example-36\"\n// fixSpaces(\"Example 37\") == \"_Example-37\"\n// fixSpaces(\"Example 38\") == \"_Example-38\"\n// fixSpaces(\"Example 39\") == \"_Example-39\"\n// fixSpaces(\"Example 40\") == \"_Example-40\"\n// fixSpaces(\"Example 41\") == \"_"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string drawstring representing a file's name, and returns come back \n  ' Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following watch conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot point'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot point should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a string drawstring representing a file's name, and returns come back \n 'Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following watch conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot point'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot point should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_split = file_name.split('.');\n  const file_name_length = file_name_split.length;\n  const file_name_first_chars = file_name_split[0];\n  const file_name_last_chars = file_name_split[1];\n  const file_name_only_chars = file_name_split.slice(2,file_name_length).join('');\n  \n  return (file_name_first_chars === '' ||\n          file_name_last_chars === 'txt' ||\n          file_name_last_chars === 'exe' ||\n          file_name_last_chars === 'dll')? 'Yes' : 'No';\n}\n\nconst main = () => {\n  const file_names = [\n    'example.txt',\n    '1example.exe',\n    '2example.dll'\n  ];\n  \n  console.log(fileNameCheck(file_names[0]));\n  console.log(fileNameCheck(file_names[1]));\n  console.log(fileNameCheck(file_names[2]));\n}\n\nmain();<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry introduction if its index is a \n   multiple of 3 and will cube the integer entry introduction if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change switch the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry introduction if its index is a \n   multiple of 3 and will cube the integer entry introduction if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change switch the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n\n  let len = lst.length,\n    sum = 0,\n    val = 0,\n    i = 0;\n\n  while (i < len) {\n    val = lst[i];\n    if (i % 3 === 0) {\n      sum += val * val;\n    } else if (i % 4 === 0) {\n      sum += val * val * val;\n    }\n    i++;\n  }\n\n  return sum;\n};\n\nconsole.log(sumSquares([1, 2, 3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1, -5, 2, -1, -5]));\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing defend a sentence,\n   the sentence contains some words password separated by a space outer space, \n   and you have to return a string that contains hold the words from the original sentence,\n   whose lengths duration are prime numbers, \n   the order of the words discussion in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representing defend a sentence,\n   the sentence contains some words password separated by a space outer space, \n   and you have to return a string that contains hold the words from the original sentence,\n   whose lengths duration are prime numbers, \n   the order of the words discussion in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const tokens = sentence.split(\" \")\n  const map = new Map(tokens.map(x => [x, 1]))\n  const words = new Set(tokens.map(x => x.split(\"\"))[0])\n\n  return words\n   .filter(x => x.length % 2 == 0)\n   .reduce((a, b) => a.concat(b), \"\")\n   .split(\"\")\n   .map(x => x.toLowerCase())\n   .reduce((a, b) => a.concat(b), \"\")\n   .split(\"\")\n   .map(x => x.toUpperCase())\n   .reduce((a, b) => a.concat(b), \"\")\n   .split(\"\")\n   .map(x => x.toLowerCase())\n   .reduce((a, b) => a.concat(b), \"\")\n   .split(\"\")\n   .map(x => x.toUpperCase())\n   .reduce((a, b) => a.concat(b), \"\")\n   .split(\"\")\n   .map(x => x.toLowerCase())\n   .reduce((a, b) => a.concat(b), \"\")\n   .split(\"\")\n   .map(x => x.toUpperCase())\n   .reduce((a, b) => a.concat(b), \"\")\n}\n\nexport default wordsInSentence\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function routine that will simplify the expression \n   x * n. The function routine returns true dependable if x * n evaluates to a whole hale number and false delusive \n   otherwise. Both x and n, are string representation of a fraction, and have the following follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive convinced whole hale numbers issue. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false delusive \n   simplify(\"7/10\", \" 10/2 \") = false delusive \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a function routine that will simplify the expression \n   x * n. The function routine returns true dependable if x * n evaluates to a whole hale number and false delusive \n   otherwise. Both x and n, are string representation of a fraction, and have the following follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive convinced whole hale numbers issue. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false delusive \n   simplify(\"7/10\", \" 10/2 \") = false delusive \n   * / \n const simplify = (x, n) = > {\n    if (x == n) return true;\n    if (x == 0) return false;\n    if (n == 0) return false;\n    if (x == 1) return true;\n    if (n == 1) return true;\n    if (n == 0) return false;\n    if (x == 2 * n) return true;\n    if (x == n / 2) return true;\n    if (x == (x + n) / 2) return true;\n    if (x == (x - n) / 2) return true;\n    if (x * n == x) return true;\n    if (x / n == x) return true;\n    if (x / n == n) return true;\n    if (x / (n / 2) == x) return true;\n    if (x / (n / 2) == n) return true;\n    if (x / (n / 2) == (x + n) / 2) return true;\n    if (x / (n / 2) == (x - n) / 2) return true;\n    return false;\n }\n * \n */\n\nimport java.util.Scanner;\n\npublic class Simplify {\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tSystem.out.println(simplify(in.next(), in.next()));\n\t}\n\tpublic static boolean simplify(String x, String n) {\n\t\tif (x.equals(n)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (x.equals(\"0\")) {\n\t\t\treturn false;\n\t\t}\n\t\tif (n.equals(\"0\")) {\n\t\t\treturn false;\n\t\t}\n\t\tif (n.equals(\"1\")) {\n\t\t\treturn true;\n\t\t}\n\t\tif (x.equals(\"1\")) {\n\t\t\treturn true;\n\t\t}\n\t\tif (n.equals(\"2\")) {\n\t\t\treturn true;\n\t\t}\n\t\tif (x.equals(\"2\")) {\n\t\t\treturn true;\n\t\t}\n\t\tif (x.equals(n + \"/2\")) {\n\t\t\treturn true;\n\t\t}\n\t\tif (x.equals(n / 2 + \"/2\")) {\n\t\t\treturn true;\n\t\t}\n\t\tif (x.equals(n + \"/2\")) {\n\t\t\treturn true;\n\t\t}\n\t\tif (x.equals(n / 2 + \"/2\")) {\n\t\t\treturn true;\n\t\t}\n\t\tif (x.equals(n + \"/2\") && n.equals(x + \"/2\")) {\n\t\t\treturn true;\n\t\t}\n\t\tif (x.equals(n / 2 + \"/2\") && n.equals(x + \"/2\")) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts classify the given list of integers integer \n   in ascending order holy order according to the sum union of their digits. \n   Note eminence: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example case:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts classify the given list of integers integer \n   in ascending order holy order according to the sum union of their digits. \n   Note eminence: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example case:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.slice();\n  const tmp = sorted.sort((a, b) => {\n    const aDigits = a.toString().split('');\n    const bDigits = b.toString().split('');\n    const aSum = aDigits.reduce((aSum, num) => aSum + parseInt(num), 0);\n    const bSum = bDigits.reduce((aSum, num) => aSum + parseInt(num), 0);\n    if (aSum === bSum) {\n      return a.localeCompare(b);\n    }\n    return aSum - bSum;\n  });\n  const result = [];\n  for (let i = 0; i < tmp.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nexport default orderByPoints;\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers issue as input and returns return key \n   the number of elements in the array that are greater capital than 10 and both \n   first and last concluding digits of a number act are odd curious (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an array of numbers issue as input and returns return key \n   the number of elements in the array that are greater capital than 10 and both \n   first and last concluding digits of a number act are odd curious (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n    const oddFilter = (a) => {\n        return a % 2!== 0;\n    };\n    const evenFilter = (a) => {\n        return a % 2 === 0;\n    };\n    return nums.filter(oddFilter).filter(evenFilter);\n};\n\nconst getOddNums = (nums) => {\n    const oddFilter = (a) => {\n        return a % 2!== 0;\n    };\n    return nums.filter(oddFilter);\n};\n\nconst getEvenNums = (nums) => {\n    const evenFilter = (a) => {\n        return a % 2 === 0;\n    };\n    return nums.filter(evenFilter);\n};\n\nconst getOddAndEvenNums = (nums) => {\n    const oddFilter = (a) => {\n        return a % 2!== 0;\n    };\n    const evenFilter = (a) => {\n        return a % 2 === 0;\n    };\n    return nums.filter(oddFilter).filter(evenFilter);\n};\n\nconst getOddAndEvenNums2 = (nums) => {\n    const oddFilter = (a) => {\n        return a % 2!== 0;\n    };\n    const evenFilter = (a) => {\n        return a % 2 === 0;\n    };\n    return nums.filter(oddFilter).filter(evenFilter);\n};\n\nconst getOddNums2 = (nums) => {\n    const oddFilter = (a) => {\n        return a % 2!== 0;\n    };\n    return nums.filter(oddFilter);\n};\n\nconst getEvenNums2 = (nums) => {\n    const evenFilter = (a) => {\n        return a % 2 === 0;\n    };\n    return nums.filter(evenFilter);\n};\n\nconst getOddAndEvenNums3 = (nums) => {\n    const oddFilter = (a) => {\n        return a % 2!== 0;\n    };\n    const evenFilter = (a) => {\n        return a % 2 === 0;\n    };\n    return nums.filter(oddFilter).filter(evenFilter);\n};\n\nconst getOddAndEvenNums4 = (nums) => {\n    const oddFilter = (a) => {\n        return a % 2!== 0;\n    };\n    const evenFilter = (a) => {\n        return a % 2 === 0;\n    };\n    return nums.filter(oddFilter).filter(evenFilter);\n};\n\nconst getOddAndEvenNums5 = (nums) => {\n    const oddFilter = (a) => {\n        return a % 2!== 0;\n    };\n    const evenFilter = (a) => {\n        return a % 2 === 0;\n    };\n    return nums.filter(oddFilter).filter(evenFilter);\n};\n\nconst getOddAndEvenNums6 = (nums) => {\n    const oddFilter = (a) => {\n        return a % 2!== 0;\n    };\n    const evenFilter = (a) => {\n        return a % 2 === 0;\n    };\n    return nums.filter(oddFilter).filter(evenFilter);\n};\n\nconst getOddAndEvenNums7 = (nums) => {\n    const oddFilter = (a) => {\n        return a % 2!== 0;\n    };\n    const evenFilter = (a) => {\n        return a % 2 === 0;\n    };\n    return nums.filter(oddFilter).filter(evenFilter);\n};\n\nconst getOddAndEvenNums8 = (nums) => {\n    const oddFilter = (a) => {\n        return a % 2!== 0;\n    };\n    const evenFilter = (a) => {\n        return a % 2 === 0;\n    };\n    return nums.filter(oddFilter).filter(evenFilter);\n};\n\nconst getOddAndEvenNums9 = (nums) => {\n    const oddFilter = (a) => {\n        return a % 2!== 0;\n    };\n    const evenFilter = (a) => {\n        return a % 2 === 0;\n    };\n    return nums.filter(oddFilter).filter(evenFilter);\n};\n\nconst getOddAndEvenNums10 = (nums) => {\n    const oddFilter = (a) => {\n        return a % 2!== 0;\n    };\n    const evenFilter = (a) => {\n        return a % 2 === 0;\n    };\n    return nums.filter(oddFilter).filter(evenFilter);\n};\n\nconst getOddAndEvenNums11 = (nums) => {\n    const oddFilter = (a) => {\n        return a % 2!== 0;\n    };\n    const evenFilter = (a) => {\n        return a % 2 === 0;\n    };\n    return nums.filter(oddFilter).filter(evenFilter);\n};\n\nconst getOddAndEvenNums12 = (nums) => {\n    const oddFilter = (a) => {\n        return a % 2!== 0;\n    };\n    const evenFilter = (a) => {\n        return a % 2 === 0;\n    };\n    return nums.filter(oddFilter).filter(evenFilter);\n};\n\nconst getOddAndEvenNums13 = (nums) => {\n    const oddFilter = (a) => {\n        return a % 2!== 0;\n    };\n    const evenFilter = (a) => {\n        return a % 2 === 0;\n    };\n    return nums.filter(oddFilter).filter(evenFilter);\n};\n\nconst getOddAndEvenNums14 = (nums) => {\n    const oddFilter = (a) => {\n        return a % 2!== 0;\n    };\n    const evenFilter = (a) => {\n        return a % 2 === 0;\n    };\n    return"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create make an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number phone number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to create make an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number phone number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const max = n;\n  const triples = [];\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        const triplesCount = a[i] + a[j] + a[k];\n        if (triplesCount % 3 === 0) {\n          triples.push([i, j, k]);\n          count++;\n          if (count === max) return count;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nmodule.exports = getMaxTriples;\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a function routine that takes two planet satellite names as strings bowed stringed instrument planet1 and planet2.\n   The function should return a tuple containing incorporate all planets whose orbits are \n   located between the orbit sphere of planet1 and the orbit sphere of planet2, sorted screen by \n   the proximity to the sun sunday. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet names name calling.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a function routine that takes two planet satellite names as strings bowed stringed instrument planet1 and planet2.\n   The function should return a tuple containing incorporate all planets whose orbits are \n   located between the orbit sphere of planet1 and the orbit sphere of planet2, sorted screen by \n   the proximity to the sun sunday. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet names name calling.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planetNames = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  let distance = {}\n  let sortedPlanetNames = []\n  for (var i = 0; i < planetNames.length; i++) {\n    distance[planetNames[i]] = getDistance(planet1, planetNames[i])\n    sortedPlanetNames.push([distance[planetNames[i]], planetNames[i]])\n  }\n  sortedPlanetNames.sort(function (a, b) {\n    return a[0] - b[0]\n  })\n  let finalPlanetNames = []\n  for (var i = 0; i < sortedPlanetNames.length; i++) {\n    if (sortedPlanetNames[i][1] === planet1 || sortedPlanetNames[i][1] === planet2) {\n      finalPlanetNames.push(sortedPlanetNames[i][1])\n    }\n  }\n  return finalPlanetNames\n}\n\n// Helper function for BF\n// Gets the distance between two planets\nconst getDistance = (planet1, planet2) => {\n  var d = 6378.1 * Math.pow(10, 6)\n  var a = Math.pow(d, 2)\n  var e = Math.pow(a, 0.5)\n  var b = a * (1 - e * (Math.pow(Math.E, -1.5)))\n  var c = b * Math.pow(1 - e * Math.pow(Math.E, -1), 3)\n  var x = Math.pow(b, 2) - c\n  var y = Math.pow(4 * e, 2) - 4 * e * Math.pow(Math.E, -1) + 3 * Math.pow(Math.E, -1.5)\n  var z = Math.pow(x, 2) - y\n  var distance = Math.sqrt(z)\n  return distance\n}\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings chain as a parameter, \n   deletes edit the strings that have odd curious lengths from it, \n   and returns refund the resulted list with a sorted screen order decree, \n   The list is always a list of strings and never an array of numbers act, \n   and it may contain check duplicates. \n   The order of the list should be ascending by length duration of each word son, and you \n   should return the list sorted by that rule dominion. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order club. \n   You may assume that all words bible will have the same length distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings chain as a parameter, \n   deletes edit the strings that have odd curious lengths from it, \n   and returns refund the resulted list with a sorted screen order decree, \n   The list is always a list of strings and never an array of numbers act, \n   and it may contain check duplicates. \n   The order of the list should be ascending by length duration of each word son, and you \n   should return the list sorted by that rule dominion. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order club. \n   You may assume that all words bible will have the same length distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const list = lst.filter(s => s.length % 2 === 1);\n  return list.reduce((lst, el) => {\n    if (lst.length === 1) {\n      return [el];\n    }\n    let newList = [];\n    let index = 0;\n    while (index < lst.length - 1) {\n      newList.push(lst[index + 1]);\n      index++;\n    }\n    newList.push(el);\n    return newList;\n  }, []);\n}\n\nconst lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"e\"];\nconsole.log(sortedListSum(lst));\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if(n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nconst isPrime = (n) => {\n  if(n === 1) {\n    return false;\n  } else {\n    for(let i = 2; i <= Math.sqrt(n); i++) {\n      if(n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nconst primalityTest = (n) => {\n  let prime = true;\n  for(let i = 2; i <= n; i++) {\n    if(n % i === 0) {\n      prime = false;\n    }\n  }\n  return prime;\n}\n\nconst main = () => {\n  let xOrYResult = xOrY(7, 34, 12);\n  let isPrimeResult = isPrime(7);\n  let primeResult = primalityTest(7);\n  console.log(xOrYResult);\n  console.log(isPrimeResult);\n  console.log(primeResult);\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum kernel of squares of the numbers issue \n   in the list that are odd. Ignore numbers numeral that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum kernel of squares of the numbers issue \n   in the list that are odd. Ignore numbers numeral that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0\n   let difference = 0\n   for (let n of lst) {\n      if (n > 0 && n % 1 === 1) {\n         sum += n\n      } else if (n === 0) {\n         sum = 0\n      } else if (n > 0) {\n         sum += n\n         difference += n * n\n      }\n   }\n   return sum + difference\n }\n */<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling impression when the result of some long - awaited expect \n   event is finally ultimately known. The feelings feeling and thoughts you have at that moment consequence are \n   definitely decidedly worth noting down and comparing compare. \n   Your task undertaking is to determine if a person correctly guessed the results of a number phone number of matches catch. \n   You are given render two arrays array of scores and guesses of equal adequate length, where each index exponent shows testify a match. \n   Return an array of the same length distance denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling impression when the result of some long - awaited expect \n   event is finally ultimately known. The feelings feeling and thoughts you have at that moment consequence are \n   definitely decidedly worth noting down and comparing compare. \n   Your task undertaking is to determine if a person correctly guessed the results of a number phone number of matches catch. \n   You are given render two arrays array of scores and guesses of equal adequate length, where each index exponent shows testify a match. \n   Return an array of the same length distance denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  let index = 0;\n  while (index < game.length) {\n    if (guess[index] === game[index]) {\n      result.push(0);\n      index += 1;\n    } else {\n      result.push(Math.abs(guess[index] - game[index]));\n      index += 1;\n    }\n  }\n  return result;\n};\n\n// const compare = (game, guess) => {\n//   let result = [];\n//   for (let i = 0; i < game.length; i += 1) {\n//     if (guess[i] === game[i]) {\n//       result.push(0);\n//     } else {\n//       result.push(Math.abs(guess[i] - game[i]));\n//     }\n//   }\n//   return result;\n// };\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string drawstring) and a list of extensions.\n   The extensions are to be used to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let permit CAP be the number of the uppercase \n   letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find receive the strongest firm extension and return a string drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class (a string drawstring) and a list of extensions.\n   The extensions are to be used to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let permit CAP be the number of the uppercase \n   letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find receive the strongest firm extension and return a string drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n    const class_name_array = class_name.split('.');\n    const class_name_len = class_name_array.length;\n    const strength = [];\n    const strength_len = class_name_len;\n    const len = extensions.length;\n    const extension_strength = extensions.map(extension => extension.toLowerCase());\n    const extension_strength_len = extension_strength.length;\n    const max_strength = strength_len - extension_strength_len;\n    for (let i = 0; i < max_strength; i++) {\n        strength.push(strength_len - i);\n    }\n    return class_name_array.join('.') + '.' + extension_strength.reduce((previous, current, index) => {\n        if (strength[index] > previous) {\n            return current;\n        }\n        return previous;\n    }, '');\n};\n\nconsole.log(strongestExtension('A.B.C.D', ['A.B.C.E', 'A.B.C.F', 'A.B.C.G']));\nconsole.log(strongestExtension('A.B.C.D', ['A.B.C.E', 'A.B.C.F', 'A.B.C.G', 'A.B.C.H']));\nconsole.log(strongestExtension('A.B.C.D', ['A.B.C.E', 'A.B.C.F', 'A.B.C.G', 'A.B.C.H', 'A.B.C.I']));\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need necessitate to return true if the second word parole or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false fake \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false delusive \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need necessitate to return true if the second word parole or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false fake \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false delusive \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n\tlet t = []\n\tfor (let i = 0; i < b.length; i++) {\n\t  for (let j = 0; j < a.length; j++) {\n\t    t.push(a[j] == b[i])\n\t  }\n\t}\n\treturn t.every(x => x)\n}\n\n/*\n\tGiven a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n)\n\twindow(\"banana\",\"an\") = 1\n\twindow(\"banana\",\"an\") = 2\n\twindow(\"banana\",\"ban\") = 3\n\twindow(\"banana\",\"nana\") = 4\n\twindow(\"banana\",\"banana\") = 5\n\twindow(\"banana\",\"nana\") = 6\n\twindow(\"banana\",\"nana\") = 7\n\twindow(\"banana\",\"banana\") = 8\n\twindow(\"banana\",\"nana\") = 9\n\twindow(\"banana\",\"nana\") = 10\n\twindow(\"banana\",\"nana\") = 11\n\twindow(\"banana\",\"nana\") = 12\n\twindow(\"banana\",\"nana\") = 13\n\twindow(\"banana\",\"nana\") = 14\n\twindow(\"banana\",\"nana\") = 15\n\twindow(\"banana\",\"nana\") = 16\n\twindow(\"banana\",\"nana\") = 17\n\twindow(\"banana\",\"nana\") = 18\n\twindow(\"banana\",\"nana\") = 19\n\twindow(\"banana\",\"nana\") = 20\n\twindow(\"banana\",\"nana\") = 21\n\twindow(\"banana\",\"nana\") = 22\n\twindow(\"banana\",\"nana\") = 23\n\twindow(\"banana\",\"nana\") = 24\n\twindow(\"banana\",\"nana\") = 25\n\twindow(\"banana\",\"nana\") = 26\n\twindow(\"banana\",\"nana\") = 27\n\twindow(\"banana\",\"nana\") = 28\n\twindow(\"banana\",\"nana\") = 29\n\twindow(\"banana\",\"nana\") = 30\n\twindow(\"banana\",\"nana\") = 31\n\twindow(\"banana\",\"nana\") = 32\n\twindow(\"banana\",\"nana\") = 33\n\twindow(\"banana\",\"nana\") = 34\n\twindow(\"banana\",\"nana\") = 35\n\twindow(\"banana\",\"nana\") = 36\n\twindow(\"banana\",\"nana\") = 37\n\twindow(\"banana\",\"nana\") = 38\n\twindow(\"banana\",\"nana\") = 39\n\twindow(\"banana\",\"nana\") = 40\n\twindow(\"banana\",\"nana\") = 41\n\twindow(\"banana\",\"nana\") = 42\n\twindow(\"banana\",\"nana\") = 43\n\twindow(\"banana\",\"nana\") = 44\n\twindow(\"banana\",\"nana\") = 45\n\twindow(\"banana\",\"nana\") = 46\n\twindow(\"banana\",\"nana\") = 47\n\twindow(\"banana\",\"nana\") = 48\n\twindow(\"banana\",\"nana\") = 49\n\twindow(\"banana\",\"nana\") = 50\n\twindow(\"banana\",\"nana\") = 51\n\twindow(\"banana\",\"nana\") = 52\n\twindow(\"banana\",\"nana\") = 53\n\twindow(\"banana\",\"nana\") = 54\n\twindow(\"banana\",\"nana\") = 55\n\twindow(\"banana\",\"nana\") = 56\n\twindow(\"banana\",\"nana\") = 57\n\twindow(\"banana\",\"nana\") = 58\n\twindow(\"banana\",\"nana\") = 59\n\twindow(\"banana\",\"nana\") = 60\n\twindow(\"banana\",\"nana\") = 61\n\twindow(\"banana\",\"nana\") = 62\n\twindow(\"banana\",\"nana\") = 63\n\twindow(\"banana\",\"nana\") = 64\n\twindow(\"banana\",\"nana\") = 65\n\twindow(\"banana\",\"nana\") = 66\n\twindow(\"banana\",\"nana\") = 67\n\twindow(\"banana\",\"nana\") = 68\n\twindow(\"banana\",\"nana\") = 69\n\twindow(\"banana\",\"nana\") = 70\n\twindow(\"banana\",\"nana\") = 71\n\twindow(\"banana\",\"nana\") = 72\n\twindow(\"banana\",\"nana\") = 73\n\twindow(\"banana\",\"nana\") = 74\n\twindow(\"banana\",\"nana\") = 75\n\twindow(\"banana\",\"nana\") = 76\n\twindow(\"banana\",\"nana\") = 77\n\twindow(\"banana\",\"nana\") = 78\n\twindow(\"banana\",\"nana\") = 79\n\twindow(\"banana\",\"nana\") = 80\n\twindow(\"banana\",\"nana\") = 81\n\twindow(\"banana\",\"nana\") = 82\n\twindow(\"banana\",\"nana\") = 83\n\twindow(\"banana\",\"nana\") = 84\n\twindow(\"banana\",\"nana\") = 85\n\twindow(\"banana\",\"nana\") = 86\n\twindow(\"banana\",\"nana\") = 87\n\twindow(\"banana\",\"nana\") = 88\n\twindow(\"banana\",\"nana\") = 89\n\twindow(\"banana\",\"nana\") = 90\n\twindow(\"banana\",\"nana\") = 91\n\twindow(\"banana\",\"nana\") = 92\n\twindow(\"banana\",\"nana\") = 93\n\twindow(\"banana\",\"nana\") = 94\n\twindow(\"banana\",\"nana\") = 95\n\twindow(\"banana\",\"nana\") = 96\n\twindow(\"banana\",\"nana\") = 97\n\twindow(\"banana\",\"nana\") = 98\n\twindow(\"banana\",\"nana\") = 99\n\twindow(\"banana\",\"nana\") = 100\n\twindow(\"banana\",\"nana\") = 101\n\twindow(\"banana\",\"nana\") = 102\n\twindow(\"banana\",\"nana\") = 103\n\twindow(\"banana\",\"nana\") = 104\n\twindow(\"banana\",\"nana\") = 105\n\twindow(\"banana"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the number of even and odd digits digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const isEven = (num) => {\n    return num % 2 === 0\n  }\n  return [\n    Math.floor(num / 10),\n    Math.floor(num % 10)\n  ].filter((i) => isEven(i)).map((i) => i)\n}\n\nexport default evenOddCount<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain prevail its roman numeral equivalent as a string, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples model:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain prevail its roman numeral equivalent as a string, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples model:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const letters = [\n    {number: 1, letter: 'I'},\n    {number: 4, letter: 'IV'},\n    {number: 5, letter: 'V'},\n    {number: 9, letter: 'IX'},\n    {number: 10, letter: 'X'},\n    {number: 40, letter: 'XL'},\n    {number: 90, letter: 'XC'},\n    {number: 100, letter: 'C'},\n    {number: 400, letter: 'CD'},\n    {number: 900, letter: 'CM'},\n    {number: 500, letter: 'D'},\n    {number: 900, letter: 'M'},\n  ]\n  let current = 0\n  let last = 0\n  let prev = 0\n  let result = ''\n  for (let i = 0; i < letters.length; i++) {\n    if (number >= letters[i].number) {\n      current = letters[i].number\n      result += letters[i].letter\n      number -= current\n    } else {\n      last = current\n      prev = current\n    }\n  }\n  if (number >= 10) {\n    last = current\n    current = number\n    result += letters[letters.length - 1].letter\n  }\n  result = result.toLowerCase()\n  if (last === current) {\n    result = result.substring(0, 1).toLowerCase() + result.substring(1)\n  }\n  return result\n}\n\nmodule.exports = {\n  intToMiniRoman,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides slope form a right mighty - angled triangle triangulum, false delusive otherwise differently. \n   A right mighty - angled angle triangle is a triangle in which one angle is right proper angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides slope form a right mighty - angled triangle triangulum, false delusive otherwise differently. \n   A right mighty - angled angle triangle is a triangle in which one angle is right proper angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n\tif(a === 0 || b === 0 || c === 0) return false;\n\tconst a2 = (a * a);\n\tconst b2 = (b * b);\n\tconst c2 = (c * c);\n\tconst d = (2 * a * b) - (2 * c * a);\n\tconst e = (2 * a * c) - (2 * b * a);\n\tconst f = (b * c) - (a * b);\n\treturn (d === 0 || (d === f && e === -b2)) && (e === 0 || (e === f && d === -a2));\n};\n\n/*\n Given the lengths of the three sides side of a triangle. Return the perimeter of the triangle.\n */\nconst trianglePerimeter = (a, b, c) => {\n\treturn (a + b + c) * 0.5;\n};\n\n/*\n Given the lengths of the three sides side of a triangle. Return the area of the triangle.\n */\nconst triangleArea = (a, b, c) => {\n\treturn (a * b) / 2 + (b * c) / 2 - (a * c) / 2;\n};\n\nconst rightAngleTriangleArea = (a, b, c) => {\n\treturn triangleArea(a, b, c) - trianglePerimeter(a, b, c);\n};\n\nconst rightAngleTrianglePerimeter = (a, b, c) => {\n\treturn trianglePerimeter(a, b, c) + triangleArea(a, b, c);\n};\n\nconst rightAngleTriangleAreaIsZero = (a, b, c) => {\n\treturn rightAngleTriangleArea(a, b, c) === 0;\n};\n\nconst rightAngleTrianglePerimeterIsZero = (a, b, c) => {\n\treturn rightAngleTrianglePerimeter(a, b, c) === 0;\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n\treturn rightAngleTriangle(a, b, c);\n};\n\nconst triangleWithEqualSides = (a, b, c) => {\n\treturn (a === b && b === c) || (a === c && c === b);\n};\n\nconst triangleWithEqualSidesOrZero = (a, b, c) => {\n\treturn triangleWithEqualSides(a, b, c) || triangleWithEqualSides(a, c, b) || triangleWithEqualSides(b, a, c) || triangleWithEqualSides(b, c, a) || triangleWithEqualSides(c, a, b) || triangleWithEqualSides(c, b, a);\n};\n\nconst isRightAngleTriangleWithEqualSides = (a, b, c) => {\n\treturn rightAngleTriangle(a, b, c) && triangleWithEqualSides(a, b, c);\n};\n\nconst triangleIsRightAngleTriangle = (a, b, c) => {\n\treturn isRightAngleTriangle(a, b, c) && isRightAngleTriangle(b, c, a) && isRightAngleTriangle(c, a, b);\n};\n\nconst rightAngleTriangleIsRegularTriangle = (a, b, c) => {\n\treturn rightAngleTriangle(a, b, c) && triangleIsRightAngleTriangle(a, b, c);\n};\n\nconst triangleIsRegularTriangle = (a, b, c) => {\n\treturn rightAngleTriangle(a, b, c) && triangleWithEqualSidesOrZero(a, b, c);\n};\n\nconst triangleIsRegularTriangleWithEqualSides = (a, b, c) => {\n\treturn triangleIsRegularTriangle(a, b, c) && triangleWithEqualSides(a, b, c);\n};\n\nconst triangleIsRegularTriangleWithEqualSidesOrZero = (a, b, c) => {\n\treturn triangleIsRegularTriangleWithEqualSides(a, b, c) && triangleWithEqualSidesOrZero(a, b, c);\n};\n\nconst isRegularTriangle = (a, b, c) => {\n\treturn triangleIsRegularTriangle(a, b, c) && triangleIsRegularTriangleWithEqualSides(a, b, c);\n};\n\nconst triangleIsRegularTriangleWithZero = (a, b, c) => {\n\treturn triangleIsRegularTriangle(a, b, c) && triangleIsRegularTriangleWithEqualSidesOrZero(a, b, c);\n};\n\nconst triangleIsRegularTriangleWithEqualSidesAndZero = (a, b, c) => {\n\treturn triangleIsRegularTriangleWithEqualSides(a, b, c) && triangleIsRegularTriangleWithEqualSidesOrZero(a, b, c);\n};\n\nconst isRegularTriangleWithEqualSides = (a, b, c) => {\n\treturn triangleIsRegularTriangleWithEqualSides(a, b, c) && triangleIsRegularTriangleWithEqualSides(b, c, a) && triangleIsRegularTriangleWithEqualSides(c, a, b);\n};\n\nconst triangleIsRegularTriangleWithEqualSidesOrEqualZero = (a, b, c) => {\n\treturn triangleIsRegularTriangleWithEqualSides(a, b, c) && triangleIsRegularTriangleWithEqualSidesOrZero(a, b, c) && triangleIsRegularTriangleWithEqualSidesOrZero(b, c, a) && triangleIsRegularTriangleWithEqualSidesOrZero(c, a, b);\n};\n\nconst isRegularTriangleWithEqualSidesAndEqualZero = (a, b, c) => {\n\treturn triangleIsRegularTriangleWithEqualSides(a, b, c) && triangleIsRegularTriangleWithEqualSides(b, c,"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings chain. \n   The list contains different unlike words. Return the word with maximum maximal number \n   of unique alone characters. If multiple strings string section have maximum number of unique \n   characters character, return the one which comes come first foremost in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings chain. \n   The list contains different unlike words. Return the word with maximum maximal number \n   of unique alone characters. If multiple strings string section have maximum number of unique \n   characters character, return the one which comes come first foremost in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   let { [key: string]: number } = words.reduce((acc, word) => {\n     return {\n       [word]: acc[word] + 1\n     };\n   }, {});\n   let { [key: string]: number } = words.reduce((acc, word) => {\n     if (acc[word] === 1) {\n       return {\n         [word]: 0\n       };\n     }\n     return {\n       [word]: acc[word] - 1\n     };\n   }, {});\n   let result = words[0];\n   for (let word of words) {\n     if (acc[word] === 1) {\n       result = word;\n     }\n   }\n   return result;\n}*/<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten corrode a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already have eaten corrode a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    if (number >= need) {\n        return [number, remaining];\n    } else if (remaining === 0) {\n        return [number, remaining];\n    } else {\n        return [number, remaining - need];\n    }\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten some carrots. \n  You need to go to a shopping mall and buy some more. \n  you should return the number of carrots you need to buy.\n  \n  Example:\n  * buyCarrots(2) -> 3\n  * buyCarrots(0) -> 0\n  * buyCarrots(3) -> 0\n\n  Variables:\n  @carrots : number\n      the number of carrots you have eaten\n  @need : number\n      the number of carrots that you need to buy\n\n  Constrain:\n  * 0 <= carrots <= 1000\n  * 0 <= need <= 1000\n  \n  Have fun :)\n  */\nconst buyCarrots = (carrots, need) => {\n    if (carrots >= need) {\n        return need;\n    } else {\n        return 0;\n    }\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten some carrots. \n  You need to go to a shopping mall and buy some more. \n  you should return the number of carrots you need to buy.\n  \n  Example:\n  * buyCarrots(2) -> 3\n  * buyCarrots(0) -> 0\n  * buyCarrots(3) -> 0\n\n  Variables:\n  @carrots : number\n      the number of carrots you have eaten\n  @need : number\n      the number of carrots that you need to buy\n\n  Constrain:\n  * 0 <= carrots <= 1000\n  * 0 <= need <= 1000\n  \n  Have fun :)\n  */\nconst buy = (carrots, need) => {\n    if (carrots >= need) {\n        return need;\n    } else {\n        return 0;\n    }\n};\n\nconst main = () => {\n    const result = [0, 0];\n    let carrots = 4;\n    let need = 3;\n    let remaining = 5;\n    let carrots_eat = eat(carrots, need, remaining);\n    let carrots_buy = buy(carrots, need);\n    \n    console.log(carrots_buy, carrots_eat);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations, and \n   the second list is a list of integers integer. Use the two given impart lists to build build up the algebric \n   expression and return the evaluation of this expression formula. \n\n   The basic algebra operations operation: \n   Addition accession (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations, and \n   the second list is a list of integers integer. Use the two given impart lists to build build up the algebric \n   expression and return the evaluation of this expression formula. \n\n   The basic algebra operations operation: \n   Addition accession (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n    const operatorLength = operator.length;\n    const operandLength = operand.length;\n    const result = [];\n    let i = 0;\n    let j = 0;\n\n    while (i < operatorLength && j < operandLength) {\n        let operandValue = operand[j];\n        let operatorValue = operator[i];\n        if (operatorValue === '+') {\n            result.push(operandValue + result[j - 1]);\n            j += 1;\n        } else if (operatorValue === '-') {\n            result.push(operandValue - result[j - 1]);\n            j += 1;\n        } else if (operatorValue === '*') {\n            result.push(operandValue * result[j - 1]);\n            j += 1;\n        } else if (operatorValue === '//') {\n            result.push(Math.floor(operandValue / result[j - 1]));\n            j += 1;\n        } else if (operatorValue === '**') {\n            result.push(Math.pow(operandValue, result[j - 1]));\n            j += 1;\n        } else {\n            throw new Error(`The operator is not a valid algebra operator.`);\n        }\n        i += 1;\n    }\n    return result;\n};\n\nconst doAlgebra2 = (operator, operand) => {\n    const operatorLength = operator.length;\n    const operandLength = operand.length;\n    let result = [];\n    let i = 0;\n    let j = 0;\n\n    while (i < operatorLength && j < operandLength) {\n        let operandValue = operand[j];\n        let operatorValue = operator[i];\n        if (operatorValue === '+') {\n            result.push(operandValue + result[j - 1]);\n            j += 1;\n        } else if (operatorValue === '-') {\n            result.push(operandValue - result[j - 1]);\n            j += 1;\n        } else if (operatorValue === '*') {\n            result.push(operandValue * result[j - 1]);\n            j += 1;\n        } else if (operatorValue === '//') {\n            result.push(Math.floor(operandValue / result[j - 1]));\n            j += 1;\n        } else if (operatorValue === '**') {\n            result.push(Math.pow(operandValue, result[j - 1]));\n            j += 1;\n        } else {\n            throw new Error(`The operator is not a valid algebra operator.`);\n        }\n        i += 1;\n    }\n    return result;\n};\n\nconst doAlgebra3 = (operator, operand) => {\n    const operatorLength = operator.length;\n    const operandLength = operand.length;\n    let result = [];\n    let i = 0;\n    let j = 0;\n\n    while (i < operatorLength && j < operandLength) {\n        let operandValue = operand[j];\n        let operatorValue = operator[i];\n        if (operatorValue === '+') {\n            result.push(operandValue + result[j - 1]);\n            j += 1;\n        } else if (operatorValue === '-') {\n            result.push(operandValue - result[j - 1]);\n            j += 1;\n        } else if (operatorValue === '*') {\n            result.push(operandValue * result[j - 1]);\n            j += 1;\n        } else if (operatorValue === '//') {\n            result.push(Math.floor(operandValue / result[j - 1]));\n            j += 1;\n        } else if (operatorValue === '**') {\n            result.push(Math.pow(operandValue, result[j - 1]));\n            j += 1;\n        } else {\n            throw new Error(`The operator is not a valid algebra operator.`);\n        }\n        i += 1;\n    }\n    return result;\n};\n\nconst doAlgebra4 = (operator, operand) => {\n    const operatorLength = operator.length;\n    const operandLength = operand.length;\n    let result = [];\n    let i = 0;\n    let j = 0;\n\n    while (i < operatorLength && j < operandLength) {\n        let operandValue = operand[j];\n        let operatorValue = operator[i];\n        if (operatorValue === '+') {\n            result.push(operandValue + result[j - 1]);\n            j += 1;\n        } else if (operatorValue === '-') {\n            result.push(operandValue - result[j - 1]);\n            j += 1;\n        } else if (operatorValue === '*') {\n            result.push(operandValue * result[j - 1]);\n            j += 1;\n        } else if (operatorValue === '//') {\n            result.push(Math.floor(operandValue / result[j - 1]));\n            j += 1;\n        } else if (operatorValue === '**') {\n            result.push(Math.pow(operandValue, result[j - 1]));\n            j += 1;\n        } else {\n            throw new Error(`The operator is not a valid algebra operator.`);\n        }\n        i += 1;\n    }\n    return result;\n};\n\nconst doAlgebra5 = (operator, operand) => {\n    const operatorLength = operator."}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse turn back its case from lower gloomy to upper or vise versa, \n   otherwise keep sustain it as it is. \n   If the string contains hold no letters, reverse overrule the string. \n   The function should return the resulted string chain.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   if s[i] is a letter, reverse turn back its case from lower gloomy to upper or vise versa, \n   otherwise keep sustain it as it is. \n   If the string contains hold no letters, reverse overrule the string. \n   The function should return the resulted string chain.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n    let temp = s.split(\"\");\n    for(let i = 0; i < temp.length / 2; i++) {\n        let t = temp[i];\n        if(t.match(/[A-Z]/i)) {\n            temp[i] = t.toUpperCase();\n        } else if(t.match(/[a-z]/i)) {\n            temp[i] = t.toLowerCase();\n        }\n    }\n    return temp.join(\"\");\n}\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n    if(text === '') return null;\n\n    const md5 = crypto.createHash('md5');\n    md5.update(text);\n\n    return md5.digest('hex');\n};\n\nexport {\n    stringToMd5\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers integer a and b, return the even digits digit between a\n   and b, in ascending order holy order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers integer a and b, return the even digits digit between a\n   and b, in ascending order holy order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const min = Math.min(a, b);\n  const max = Math.max(a, b);\n  const x = (max - min) / 2;\n  const start = min + x;\n  const end = min + (x + 1);\n\n  return [...Array(end - start),...Array(start, end)].map((_, index) => index + start);\n};\n\nconst test = require('ava');\n\ntest('generateIntegers(2, 8)', t => {\n  const expected = [2, 4, 6, 8];\n  t.deepEqual(generateIntegers(2, 8), expected);\n});\n\ntest('generateIntegers(8, 2)', t => {\n  const expected = [2, 4, 6, 8];\n  t.deepEqual(generateIntegers(8, 2), expected);\n});\n\ntest('generateIntegers(10, 14)', t => {\n  const expected = [];\n  t.deepEqual(generateIntegers(10, 14), expected);\n});\n<|endoftext|>"}
