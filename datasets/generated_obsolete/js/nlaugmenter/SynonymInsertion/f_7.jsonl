{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const result = [];\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      const distance = Math.abs(numbers[i] - numbers[j]);\n      if (distance < threshold) {\n        result.push(distance);\n      }\n    }\n  }\n  return result.length > 0;\n};\n\n/**\n * Check if given list of numbers contains a given number\n  >>> hasElement([1, 2, 3], 2)\n  true\n  >>> hasElement([1, 2, 3], 4)\n  false\n  */\nconst hasElement = (numbers, number) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === number) {\n      result.push(i);\n    }\n  }\n  return result.length > 0;\n};\n\n/**\n * Check if given list of numbers contains a given number\n  >>> hasElement([1, 2, 3], 2)\n  true\n  >>> hasElement([1, 2, 3], 4)\n  false\n  */\nconst hasElementSorted = (numbers, number) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === number) {\n      result.push(i);\n    }\n  }\n  return result.length === 1;\n};\n\n/**\n * Check if given list of numbers contains a given number\n  >>> hasElement([1, 2, 3], 2)\n  true\n  >>> hasElement([1, 2, 3], 4)\n  false\n  */\nconst hasElementSortedReverse = (numbers, number) => {\n  const result = [];\n  for (let i = numbers.length - 1; i >= 0; i--) {\n    if (numbers[i] === number) {\n      result.push(i);\n    }\n  }\n  return result.length === 1;\n};\n\n/**\n * Check if given list of numbers contains a given number\n  >>> hasElement([1, 2, 3], 2)\n  true\n  >>> hasElement([1, 2, 3], 4)\n  false\n  */\nconst hasElementReverse = (numbers, number) => {\n  const result = [];\n  for (let i = numbers.length - 1; i >= 0; i--) {\n    if (numbers[i] === number) {\n      result.push(i);\n    }\n  }\n  return result.length === 1;\n};\n\n/**\n * Check if given list of numbers contains a given number\n  >>> hasElement([1, 2, 3], 2)\n  true\n  >>> hasElement([1, 2, 3], 4)\n  false\n  */\nconst hasElementSortedReverseSorted = (numbers, number) => {\n  const result = [];\n  for (let i = numbers.length - 1; i >= 0; i--) {\n    if (numbers[i] === number) {\n      result.push(i);\n    }\n  }\n  return result.length === 1;\n};\n\nexport {\n  hasCloseElements,\n  hasElement,\n  hasElementSorted,\n  hasElementSortedReverse,\n  hasElementReverse,\n  hasElementSortedReverseSorted,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string drawstring containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   separate freestanding those group into separate strings string section and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore neglect any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string drawstring containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   separate freestanding those group into separate strings string section and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore neglect any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const stack = [paren_string];\n  let result = [];\n  while (stack.length > 0) {\n    const top = stack.pop();\n    if (top === \")\") {\n      result.push(stack.pop());\n      stack.push(top);\n    } else if (top === \"(\" || top === \")\") {\n      result.push(top);\n    } else {\n      stack.push(top);\n      stack.push(stack.pop() + stack.pop());\n    }\n  }\n  return result;\n};\n\n/* Input to this function is a string drawstring containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   separate freestanding those group into separate strings string section and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore neglect any spaces in the input string.\n  >>> separateParenGroups('((()))')\n  ['()()', '(())']\n  */\nconst separateParenGroups2 = (paren_string) => {\n  const stack = [paren_string];\n  let result = [];\n  while (stack.length > 0) {\n    const top = stack.pop();\n    if (top === \")\") {\n      result.push(stack.pop());\n      stack.push(top);\n    } else if (top === \"(\" || top === \")\") {\n      stack.push(top);\n      stack.push(stack.pop() + stack.pop());\n    } else {\n      stack.push(top);\n      stack.push(stack.pop() + stack.pop());\n      stack.push(stack.pop() + stack.pop());\n    }\n  }\n  return result;\n};\n\nconst paren_test = (paren_string) => {\n  console.log(paren_string);\n  const stack = [paren_string];\n  let result = [];\n  while (stack.length > 0) {\n    const top = stack.pop();\n    if (top === \")\") {\n      result.push(stack.pop());\n      stack.push(top);\n    } else if (top === \"(\" || top === \")\") {\n      result.push(top);\n    } else {\n      stack.push(top);\n      stack.push(stack.pop() + stack.pop());\n    }\n  }\n  return result;\n};\n\n// console.log(paren_test('()'));\n// console.log(paren_test('()())'));\n// console.log(paren_test('((()))'));\n// console.log(paren_test('((()()))'));\n// console.log(paren_test('((())()()'));\n// console.log(paren_test('((())()())'));\n// console.log(paren_test('((())()()()'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())()()())'));\n// console.log(paren_test('((())"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating float point number, it can be decomposed disintegrate into \n   and integer part (largest bombastic integer smaller than given give number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating float point number, it can be decomposed disintegrate into \n   and integer part (largest bombastic integer smaller than given give number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const parts = number.toString().split('.');\n  return parts[1].length? parts[1] : \"\";\n}\n\n/* Given a positive integer, it can be decomposed into \n   integral part (largest bombastic integer smaller than given give number) and \n   decimal part (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateNumber(3)\n  0\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateInteger = (number) => {\n  const parts = number.toString().split('.');\n  return parts[0].length? parts[0] : \"\";\n}\n\n/* Given a positive floating float point number, it can be decomposed into \n   integral part (largest bombastic integer smaller than given give number) and \n   decimal part (leftover part always smaller than 1). \n\n   Return the integral part region of the number.\n  >>> truncateNumber(3.5)\n  3\n  >>> truncateNumber(3)\n  3\n  */\nconst truncateIntegerNumber = (number) => {\n  const parts = number.toString().split('.');\n  return parts[0].length? parseInt(parts[0]) : parseInt(number);\n}\n\nexport {\n  truncateInteger,\n  truncateNumber,\n  truncateIntegerNumber\n}<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account that starts startle with \n   zero balance. Your task is to detect if at any point degree the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account that starts startle with \n   zero balance. Your task is to detect if at any point degree the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n    let [previous, current] = operations.slice(0);\n    let previousBalance = previous.balance;\n    let currentBalance = current.balance;\n    if (previousBalance <= 0) {\n        return true;\n    }\n    let change = currentBalance - previousBalance;\n    if (change < 0) {\n        return true;\n    }\n    return false;\n}\n\nexport default belowZero;<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  return Math.abs(Math.round((numbers.reduce((a, b) => a + b) / numbers.length) - (numbers.reduce((a, b) => a + b) / numbers.length) + (numbers.length / 2)))\n}\n\n/**\n   * Calculates the average Standard Deviation of a set of numbers\n   * For a given list of input numbers, calculate Standard Deviation\n   * around the mean of this dataset. \n   * Standard Deviation is the square root of the variance: \n   * SD = sqrt(variance)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  return Math.sqrt(variance(numbers))\n}\n\n/**\n   * Calculates the average Variance of a set of numbers\n   * For a given list of input numbers, calculate Variance\n   * around the mean of this dataset. \n   * Variance is the square of the difference between each element and the mean. \n   * This is also known as the Coefficient of Variation (CV)\n   *  \n   * CV = (mean - x) / (standard deviation)\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst variance = (numbers) => {\n  return numbers.reduce((a, b) => {\n    return a + Math.pow(b - numbers.reduce((a, b) => a + b) / numbers.length, 2)\n  }, 0) / numbers.length\n}\n\nmodule.exports = {\n  meanAbsoluteDeviation,\n  standardDeviation,\n  variance\n}<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements element of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number 'delimeter' between every two consecutive elements element of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const n = numbers.length\n  const output = []\n  let i = 0\n  while (i < n - 1) {\n    output.push(numbers[i])\n    i += 1\n    if (i < n - 1) {\n      output.push(delimeter)\n    }\n  }\n  output.push(numbers[i])\n  return output\n}\n\nmodule.exports = intersperse\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string drawstring represented multiple groups group for nested parentheses separated classify by spaces. \n   For each of the group, output the deepest thick level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string drawstring represented multiple groups group for nested parentheses separated classify by spaces. \n   For each of the group, output the deepest thick level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  const max_level = 0;\n  const result = [];\n\n  const level = (s) => {\n    let last_paren = 0;\n    let nest_level = 0;\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) == '(') {\n        nest_level++;\n      }\n      if (s.charAt(i) == ')') {\n        nest_level--;\n      }\n      if (nest_level == 0) {\n        last_paren = i + 1;\n      }\n    }\n    return last_paren;\n  };\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string.charAt(i) == '(') {\n      paren_stack.push(i);\n    }\n    if (paren_string.charAt(i) == ')') {\n      const last_paren = parseNestedParens(paren_string.slice(paren_stack.pop(), i));\n      if (last_paren > max_level) {\n        max_level = last_paren;\n      }\n    }\n  }\n  result.push(max_level);\n  return result;\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens_2 = (paren_string) => {\n  const paren_stack = [];\n  const max_level = 0;\n  const result = [];\n\n  const level = (s) => {\n    let last_paren = 0;\n    let nest_level = 0;\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) == '(') {\n        nest_level++;\n      }\n      if (s.charAt(i) == ')') {\n        nest_level--;\n      }\n      if (nest_level == 0) {\n        last_paren = i + 1;\n      }\n    }\n    return last_paren;\n  };\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string.charAt(i) == '(') {\n      paren_stack.push(i);\n    }\n    if (paren_string.charAt(i) == ')') {\n      const last_paren = parseNestedParens_2(paren_string.slice(paren_stack.pop(), i));\n      if (last_paren > max_level) {\n        max_level = last_paren;\n      }\n    }\n  }\n  result.push(max_level);\n  return result;\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens_3 = (paren_string) => {\n  const paren_stack = [];\n  const max_level = 0;\n  const result = [];\n\n  const level = (s) => {\n    let last_paren = 0;\n    let nest_level = 0;\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) == '(') {\n        nest_level++;\n      }\n      if (s.charAt(i) == ')') {\n        nest_level--;\n      }\n      if (nest_level == 0) {\n        last_paren = i + 1;\n      }\n    }\n    return last_paren;\n  };\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string.charAt(i) == '(') {\n      paren_stack.push(i);\n    }\n    if (paren_string.charAt(i) == ')') {\n      const last_paren = parseNestedParens_3(paren_string.slice(paren_stack.pop(), i));\n      if (last_paren > max_level) {\n        max_level = last_paren;\n      }\n    }\n  }\n  result.push(max_level);\n  return result;\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens_4 = (paren_string) => {\n  const paren_stack = [];\n  const max_level = 0;\n  const result = [];\n\n  const level = (s) => {\n    let last_paren = 0;\n    let nest_level = 0;\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) == '(') {\n        nest_level++;\n      }\n      if (s.charAt(i) == ')') {\n        nest_level--;\n      }\n      if (nest_level == 0) {\n        last_paren = i + 1;\n      }\n    }\n    return last_paren;\n  };\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string.charAt(i) == '(') {\n      paren_stack.push(i);\n    }\n    if (paren_string.charAt(i) == ')') {\n      const last_paren = parseNestedParens_4(paren_string.slice(paren_stack.pop(), i));\n      if (last_paren > max_level) {\n        max_level = last_paren;\n      }\n    }\n  }\n  result.push(max_level);\n  return"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain check given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contain check given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) >= 0)\n}\n\n//\n// Filter an input list of strings for ones that don't contain check given substring\n//\nconst filterOutSubstring = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) < 0)\n}\n\n//\n// Filter an input list of strings for ones that contain check given substring\n//\nconst filterContainsSubstring = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) >= 0)\n}\n\n//\n// Filter an input list of strings for ones that don't contain check given substring\n//\nconst filterNotContainsSubstring = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) < 0)\n}\n\n//\n// Convert a list of strings into an array of objects\n//\nconst stringArray = (strings) => {\n  return strings.reduce((acc, str) => {\n    return acc.concat(str.split('\\n'))\n  }, [])\n}\n\n//\n// Convert an array of objects into a list of strings\n//\nconst stringList = (strings) => {\n  return strings.reduce((acc, obj) => {\n    return acc.concat(obj.join('\\n'))\n  }, [])\n}\n\n//\n// Convert an array of objects into a map of objects\n//\nconst objectMap = (objects) => {\n  return objects.reduce((acc, obj) => {\n    acc[obj.key] = obj.value\n    return acc\n  }, {})\n}\n\n//\n// Convert an array of objects into a list of objects\n//\nconst objectList = (objects) => {\n  return objects.reduce((acc, obj) => {\n    acc.push(obj)\n    return acc\n  }, [])\n}\n\n//\n// Convert an array of objects into a map of objects\n//\nconst objectObject = (objects) => {\n  return objects.reduce((acc, obj) => {\n    acc[obj.key] = obj.value\n    return acc\n  }, {})\n}\n\n//\n// Convert a list of objects into a map of objects\n//\nconst objectObjectList = (objects) => {\n  return objects.reduce((acc, obj) => {\n    acc[obj.key] = obj\n    return acc\n  }, {})\n}\n\n//\n// Map an array of objects to an array of objects\n//\nconst objectArrayMap = (objects, func) => {\n  return objects.reduce((acc, obj) => {\n    acc[func(obj)] = obj\n    return acc\n  }, {})\n}\n\n//\n// Map an array of objects to an array of objects\n//\nconst objectArrayListMap = (objects, func) => {\n  return objects.reduce((acc, obj) => {\n    acc.push(func(obj))\n    return acc\n  }, [])\n}\n\n//\n// Map an array of objects to a map of objects\n//\nconst objectArrayObjectMap = (objects, func) => {\n  return objects.reduce((acc, obj) => {\n    acc[func(obj)] = obj\n    return acc\n  }, {})\n}\n\n//\n// Map an array of objects to a list of objects\n//\nconst objectArrayObjectListMap = (objects, func) => {\n  return objects.reduce((acc, obj) => {\n    acc.push(func(obj))\n    return acc\n  }, [])\n}\n\n//\n// Map a list of objects to a map of objects\n//\nconst objectListObjectMap = (objects, func) => {\n  return objects.reduce((acc, obj) => {\n    acc[func(obj)] = obj\n    return acc\n  }, {})\n}\n\n//\n// Map a list of objects to a list of objects\n//\nconst objectListObjectListMap = (objects, func) => {\n  return objects.reduce((acc, obj) => {\n    acc.push(func(obj))\n    return acc\n  }, [])\n}\n\n//\n// Map an array of objects to a map of objects\n//\nconst objectObjectMap = (objects, func) => {\n  return objects.reduce((acc, obj) => {\n    acc[func(obj)] = obj\n    return acc\n  }, {})\n}\n\n//\n// Map a list of objects to a map of objects\n//\nconst objectObjectListMap = (objects, func) => {\n  return objects.reduce((acc, obj) => {\n    acc[func(obj)] = obj\n    return acc\n  }, {})\n}\n\n//\n// Map an array of objects to a list of objects\n//\nconst objectObjectListListMap = (objects, func) => {\n  return objects.reduce((acc, obj) => {\n    acc.push(func(obj))\n    return acc\n  }, [])\n}\n\n//\n// Map a list of objects to a map of objects\n//\nconst objectObjectObjectMap = (objects, func) => {\n  return objects.reduce((acc, obj) => {\n    acc[func(obj)] = obj\n    return acc\n  }, {})\n}\n\n//\n// Map an array of objects to a list of objects\n//\nconst objectObjectObjectListMap = (objects, func) => {\n  return objects.reduce((acc, obj) => {\n    acc.push(func(obj))\n    return acc\n  }, [])\n}\n\n//\n// Filter an array of objects\n//\nconst objectArrayFilter = (objects, func) => {\n  return objects.filter(func)\n}\n\n//\n// Map an array of objects to a list of objects\n//\nconst objectArrayListFilter = (objects, func) => {\n  return objects.filter(func).map(func)\n}\n\n//\n// Map an array of objects to a map of objects\n//\nconst objectArrayObjectFilter = (objects, func) => {\n  return objects.filter(func).map(func)\n}\n\n//\n// Filter an array of"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting consist of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting consist of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const { sum, product } = _sumProduct(numbers);\n  return { sum, product };\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst _sumProduct = (numbers) => {\n  const sum = numbers.reduce((acc, n) => {\n    return acc + n;\n  }, 0);\n  const product = numbers.reduce((acc, n) => {\n    return acc * n;\n  }, 1);\n  return { sum, product };\n};\n\nexport default sumProduct;\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate render a list of rolling maximum maximal element found line up until given moment consequence \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, generate render a list of rolling maximum maximal element found line up until given moment consequence \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n    const rollingMax = (numbers, max) => {\n        let result = numbers[0];\n        let currentMax = numbers[0];\n        let index = 0;\n        for (index = 1; index < numbers.length; index++) {\n            if (numbers[index] > currentMax) {\n                currentMax = numbers[index];\n                result = numbers[index];\n            }\n        }\n        return [...Array(max).fill().map((_, i) => result)];\n    };\n    return rollingMax(numbers, numbers.length);\n};\n\nconst list = [1, 2, 3, 2, 3, 4, 2];\nconsole.log(rollingMax(list));\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest light palindrome that begins with a supplied issue string.\n   Algorithm idea is simple bare: \n   - Find the longest farseeing postfix of supplied provide string that is a palindrome. \n   - Append to the end conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest light palindrome that begins with a supplied issue string.\n   Algorithm idea is simple bare: \n   - Find the longest farseeing postfix of supplied provide string that is a palindrome. \n   - Append to the end conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n    const maxSuffixLength = findLongestPalindromeSuffix(string);\n    const result = string.substring(0, maxSuffixLength + 1);\n    return result + reverse(string.substring(0, maxSuffixLength));\n};\n\n/* Find the longest farseeing postfix of supplied provide string that is a palindrome.\n   Algorithm idea is simple bare: \n   - Find the longest farseeing postfix of supplied provide string that is a palindrome. \n  */\nconst findLongestPalindromeSuffix = (string) => {\n    const length = string.length;\n    const postfixes = [];\n    for (let i = 0; i < length; i++) {\n        let suffix = string.substring(length - i - 1);\n        const isPalindrome = (suffix) = > { \n            return string = = string.split('').reverse().join('');\n        };\n        if (isPalindrome(suffix)) {\n            postfixes.push(suffix);\n        }\n    }\n    return postfixes.reduce((prev, next) => prev + next, \"\");\n};\n\nmodule.exports = {\n    makePalindrome\n};<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string bowed stringed instrument.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string bowed stringed instrument.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const str = a + b;\n  return str.split('').map((char) => char === '1'? '1' : '0').join('');\n};\n\nmodule.exports = stringXor;<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case sheath of multiple \n   strings of the same length. Return null nothing in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case sheath of multiple \n   strings of the same length. Return null nothing in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let output = ''\n  for (let i = 0; i < strings.length; i++) {\n    if (output.length < strings[i].length) {\n      output = strings[i]\n    }\n  }\n  return output\n}\n\n/*\n  >>> longest([{id: 1, name: 'A', surname: 'B'}, {id: 2, name: 'C', surname: 'D'}])\n  'C'\n  >>> longest([{id: 1, name: 'A', surname: 'B'}, {id: 2, name: 'C', surname: 'D'}, {id: 3, name: 'E', surname: 'F'}])\n  'E'\n  */\nconst longestByField = (strings, field) => {\n  let output = ''\n  for (let i = 0; i < strings.length; i++) {\n    if (output.length < strings[i][field]) {\n      output = strings[i][field]\n    }\n  }\n  return output\n}\n\n/*\n  >>> longestByField(['a', 'b', 'c'], 'id')\n  'a'\n  >>> longestByField(['a', 'bb', 'ccc'], 'id')\n  'ccc'\n  >>> longestByField(['a', 'b', 'c'],'surname')\n  'b'\n  */\n\nmodule.exports = longest\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common coarse divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common coarse divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n\n  if (b === 0) {\n    return a;\n  }\n\n  let t = a;\n  let x = 1;\n  let y = 0;\n  let divisor;\n\n  while (b!== 0) {\n    t = b;\n    x = a;\n    y = t;\n    divisor = a;\n\n    while (t!== 0) {\n      x -= t;\n      if (x < 0) {\n        x += b;\n      }\n\n      t = b - x;\n      if (t < 0) {\n        t += b;\n      }\n\n      y -= t;\n      if (y < 0) {\n        y += b;\n      }\n    }\n\n    a = b;\n    b = divisor;\n  }\n\n  return a;\n};\n\nexport {\n  greatestCommonDivisor\n};\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest long of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from shortest to longest long of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let allPrefixes = [];\n  let last = 0;\n  let len = string.length;\n  while (last < len) {\n    let current = string.substring(last, len);\n    allPrefixes.push(current);\n    last += 1;\n  }\n  return allPrefixes;\n};\n\n// Return the longest prefix of a string\n// For example, if the input string is \"abcdef\",\n// the longest prefix is \"abc\"\nconst longestPrefix = (string) => {\n  let longest = '';\n  let last = 0;\n  let len = string.length;\n  while (last < len) {\n    let current = string.substring(last, len);\n    if (current.length > longest) {\n      longest = current;\n    }\n    last += 1;\n  }\n  return longest;\n};\n\n// Return the shortest suffix of a string\n// For example, if the input string is \"abcdef\",\n// the shortest suffix is \"def\"\nconst shortestSuffix = (string) => {\n  let shortest = '';\n  let last = string.length - 1;\n  while (last >= 0) {\n    let current = string.substring(0, last + 1);\n    if (current.length < shortest) {\n      shortest = current;\n    }\n    last -= 1;\n  }\n  return shortest;\n};\n\n// Return true if all suffixes of a string are the same as the longest prefix of the string\n// For example, if the input string is \"abcdef\",\n// the suffixes are \"def\" and \"ef\"\nconst allSuffixes = (string) => {\n  let allSuffixes = [];\n  let last = 0;\n  let len = string.length;\n  while (last < len) {\n    let current = string.substring(last, len);\n    allSuffixes.push(current);\n    last += 1;\n  }\n  return allSuffixes.every((suffix) => {\n    return suffix.length === longestPrefix(string).length;\n  });\n};\n\n// Return the longest common prefix of a string\n// For example, if the input string is \"abcdef\",\n// the longest common prefix is \"abc\"\nconst longestCommonPrefix = (string) => {\n  let last = 0;\n  let len = string.length;\n  while (last < len) {\n    let current = string.substring(0, len);\n    if (current.length === longestPrefix(string).length) {\n      return current;\n    }\n    last += 1;\n  }\n};\n\n// Return the longest common suffix of a string\n// For example, if the input string is \"abcdef\",\n// the longest common suffix is \"def\"\nconst longestCommonSuffix = (string) => {\n  let last = string.length - 1;\n  while (last >= 0) {\n    let current = string.substring(last, string.length);\n    if (current.length === shortestSuffix(string).length) {\n      return current;\n    }\n    last -= 1;\n  }\n};\n\n// Return true if the input string is a palindrome\n// For example, \"a\" is a palindrome\n// and \"race a car\" is not a palindrome\nconst isPalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return string === reversed;\n};\n\n// Return true if the input string is a double palindrome\n// For example, \"a\" and \"b\" are double palindromes\n// and \"race a car\" is not a double palindrome\nconst isDoublePalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  let reversed2 = reversed.split('').reverse().join('');\n  return string === reversed && string === reversed2;\n};\n\n// Return true if the input string is a triple palindrome\n// For example, \"a\" and \"b\" and \"c\" are triple palindromes\n// and \"race a car\" is not a triple palindrome\nconst isTriplePalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  let reversed2 = string.split('').reverse().join('');\n  let reversed3 = reversed.split('').reverse().join('');\n  return string === reversed && string === reversed2 && string === reversed3;\n};\n\n// Return true if the input string is a quadruple palindrome\n// For example, \"a\" and \"b\" and \"c\" and \"d\" are quadruple palindromes\n// and \"race a car\" is not a quadruple palindrome\nconst isQuadruplePalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  let reversed2 = reversed.split('').reverse().join('');\n  let reversed3 = reversed.split('').reverse().join('');\n  let reversed4 = string.split('').reverse().join('');\n  return string === reversed && string === reversed2 && string === reversed3 && string === reversed4;\n};\n\n// Return true if the input string is a pentuple palindrome\n// For example, \"a\" and \"b\" and \"c\" and \"d\" and \"e\" are pentuple palindromes\n// and \"race a car\" is not a pentuple palindrome\nconst isPentuplePalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  let reversed2 = reversed.split('').reverse().join('');\n  let reversed3 = reversed.split('').reverse().join('');\n  let reversed4 = reversed.split('').reverse().join('');\n  let reversed5 = string.split('').reverse().join('');\n  return string === reversed && string === reversed2 && string === reversed3 && string === reversed4 && string === reversed5;\n};\n\n// Return true if the input string is a heptuple palindrome\n// For example, \"a\" and \"b\" and \"c\" and \"d\" and \"e\" and \"f\" are heptuple pal"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n    const s = '';\n    for (let i = 0; i <= n; i++) {\n        s += `${i} `;\n    }\n    return s;\n};\n\n/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 6)\n  '0 1 2 3 4 5 6'\n  */\nconst stringSequence = (n, begin = 0) => {\n    const s = '';\n    for (let i = begin; i <= n; i++) {\n        s += `${i} `;\n    }\n    return s;\n};\n\n/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 'a')\n  '0 a 1 a 2 a 3 a 4 a 5'\n  */\nconst stringSequence = (n, begin, end = 'a') => {\n    const s = '';\n    for (let i = begin; i <= n; i++) {\n        s += `${i} ${end}`;\n    }\n    return s;\n};\n\n/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 'a', 'z')\n  '0 a 1 a 2 a 3 a 4 a 5 z'\n  >>> stringSequence(0, 5, 'a', 'y')\n  '0 a 1 a 2 a 3 a 4 a 5 y'\n  */\nconst stringSequence = (n, begin, end = 'a', separator ='') => {\n    const s = '';\n    for (let i = begin; i <= n; i++) {\n        s += `${i} ${separator} ${end}`;\n    }\n    return s;\n};\n\n/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 'a', 'z','')\n  '0 a 1 a 2 a 3 a 4 a 5 z'\n  */\nconst stringSequence = (n, begin, end = 'a', separator ='') => {\n    const s = '';\n    for (let i = begin; i <= n; i++) {\n        s += `${i} ${separator} ${end}`;\n    }\n    return s;\n};\n\n/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 'a', 'z','', 'x')\n  '0 a 1 a 2 a 3 a 4 a 5 z x'\n  */\nconst stringSequence = (n, begin, end = 'a', separator ='', substitution = 'x') => {\n    const s = '';\n    for (let i = begin; i <= n; i++) {\n        s += `${i} ${separator} ${end} ${substitution}`;\n    }\n    return s;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct clear-cut characters (regardless of case sheath) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many distinct clear-cut characters (regardless of case sheath) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  // map with lower case strings, then count\n  const lowerCaseStrings = map(string.toLowerCase(), string);\n  return lowerCaseStrings.length;\n};\n\nconst countDistinctCharacters = (string) => {\n  // map with lower case strings, then count\n  const lowerCaseStrings = map(string.toLowerCase(), string);\n  return lowerCaseStrings.length;\n};\n\n// const countDistinctCharacters = (string) => {\n//   // map with lower case strings, then count\n//   const lowerCaseStrings = map(string.toLowerCase(), string);\n//   return lowerCaseStrings.length;\n// };\n\n// const countDistinctCharacters = (string) => {\n//   // map with lower case strings, then count\n//   const lowerCaseStrings = map(string.toLowerCase(), string);\n//   return lowerCaseStrings.length;\n// };\n\n// const countDistinctCharacters = (string) => {\n//   // map with lower case strings, then count\n//   const lowerCaseStrings = map(string.toLowerCase(), string);\n//   return lowerCaseStrings.length;\n// };\n\n// const countDistinctCharacters = (string) => {\n//   // map with lower case strings, then count\n//   const lowerCaseStrings = map(string.toLowerCase(), string);\n//   return lowerCaseStrings.length;\n// };\n\n// const countDistinctCharacters = (string) => {\n//   // map with lower case strings, then count\n//   const lowerCaseStrings = map(string.toLowerCase(), string);\n//   return lowerCaseStrings.length;\n// };\n\n// const countDistinctCharacters = (string) => {\n//   // map with lower case strings, then count\n//   const lowerCaseStrings = map(string.toLowerCase(), string);\n//   return lowerCaseStrings.length;\n// };\n\n// const countDistinctCharacters = (string) => {\n//   // map with lower case strings, then count\n//   const lowerCaseStrings = map(string.toLowerCase(), string);\n//   return lowerCaseStrings.length;\n// };\n\n// const countDistinctCharacters = (string) => {\n//   // map with lower case strings, then count\n//   const lowerCaseStrings = map(string.toLowerCase(), string);\n//   return lowerCaseStrings.length;\n// };\n\n// const countDistinctCharacters = (string) => {\n//   // map with lower case strings, then count\n//   const lowerCaseStrings = map(string.toLowerCase(), string);\n//   return lowerCaseStrings.length;\n// };\n\n// const countDistinctCharacters = (string) => {\n//   // map with lower case strings, then count\n//   const lowerCaseStrings = map(string.toLowerCase(), string);\n//   return lowerCaseStrings.length;\n// };\n\n// const countDistinctCharacters = (string) => {\n//   // map with lower case strings, then count\n//   const lowerCaseStrings = map(string.toLowerCase(), string);\n//   return lowerCaseStrings.length;\n// };\n\n// const countDistinctCharacters = (string) => {\n//   // map with lower case strings, then count\n//   const lowerCaseStrings = map(string.toLowerCase(), string);\n//   return lowerCaseStrings.length;\n// };\n\n// const countDistinctCharacters = (string) => {\n//   // map with lower case strings, then count\n//   const lowerCaseStrings = map(string.toLowerCase(), string);\n//   return lowerCaseStrings.length;\n// };\n\n// const countDistinctCharacters = (string) => {\n//   // map with lower case strings, then count\n//   const lowerCaseStrings = map(string.toLowerCase(), string);\n//   return lowerCaseStrings.length;\n// };\n\n// const countDistinctCharacters = (string) => {\n//   // map with lower case strings, then count\n//   const lowerCaseStrings = map(string.toLowerCase(), string);\n//   return lowerCaseStrings.length;\n// };\n\n// const countDistinctCharacters = (string) => {\n//   // map with lower case strings, then count\n//   const lowerCaseStrings = map(string.toLowerCase(), string);\n//   return lowerCaseStrings.length;\n// };\n\n// const countDistinctCharacters = (string) => {\n//   // map with lower case strings, then count\n//   const lowerCaseStrings = map(string.toLowerCase(), string);\n//   return lowerCaseStrings.length;\n// };\n\n// const countDistinctCharacters = (string) => {\n//   // map with lower case strings, then count\n//   const lowerCaseStrings = map(string.toLowerCase(), string);\n//   return lowerCaseStrings.length;\n// };\n\n// const countDistinctCharacters = (string) => {\n//   // map with lower case strings, then count\n//   const lowerCaseStrings = map(string.toLowerCase(), string);\n//   return lowerCaseStrings.length;\n// };\n\n// const countDistinctCharacters = (string) => {\n//   // map with lower case strings, then count\n//   const lowerCaseStrings = map(string.toLowerCase(), string);\n//   return lowerCaseStrings.length;\n// };\n\n// const countDistinctCharacters = (string) => {\n//   // map with lower case strings, then count\n//   const lowerCaseStrings = map(string.toLowerCase(), string);\n//   return lowerCaseStrings.length;\n// };\n\n// const countDistinctCharacters = (string) => {\n//   // map with lower case strings, then count\n//   const lowerCaseStrings = map(string.toLowerCase(), string);\n//   return lowerCaseStrings.length;\n// };\n\n// const countDistinctCharacters = (string) => {\n//   // map with lower case strings, then count\n//   const lowerCaseStrings = map(string.toLowerCase(), string);\n//   return lowerCaseStrings.length;\n// };\n\n// const countDistinctCharacters = (string) => {"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string drawstring representing musical melodious notes in a special extra ASCII format. \n   Your task job is to parse this string and return list of integers integer corresponding equate to how many beats does each \n   not last. \n\n   Here is a legend caption: \n  ' o' - whole solid note, lasts four beats \n  ' o|' - half one-half note eminence, lasts survive two beats \n  ' .|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string drawstring representing musical melodious notes in a special extra ASCII format. \n   Your task job is to parse this string and return list of integers integer corresponding equate to how many beats does each \n   not last. \n\n   Here is a legend caption: \n 'o' - whole solid note, lasts four beats \n 'o|' - half one-half note eminence, lasts survive two beats \n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const split_music_string = music_string.split(\" \");\n  let music_string_array = split_music_string.map( (melodious_string) => {\n    const melodious_array = melodious_string.split(\"o\");\n    const melodious_array_length = melodious_array.length;\n    const melodious_array_integers = melodious_array.map( (melodious_note) => {\n      return parseInt(melodious_note);\n    });\n    return melodious_array_length * melodious_array_integers;\n  });\n  return music_string_array;\n};\n\n/*\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\n\n/*\n  Input:\n    - a string representing melodious notes in a special extra ASCII format\n    - a string representing melodious notes in a special extra ASCII format\n  Output:\n    - an integer representing the number of beats of the last note of the first melody \n    - an integer representing the number of beats of the last note of the second melody\n  Example:\n    >>> parseMusic('o o|.| o| o|.|.|.|.| o o', 'o o| o o| o o| o o| o o')\n    [8, 4, 2, 4, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse = (music_string_1, music_string_2) => {\n  const music_string_array_1 = parseMusic(music_string_1);\n  const music_string_array_2 = parseMusic(music_string_2);\n  const music_array = [music_string_array_1, music_string_array_2];\n  const music_array_length = music_array.length;\n  const melody_1_length = music_array[0].length;\n  const melody_2_length = music_array[1].length;\n  const last_beat_of_melody_1 = Math.max(melody_1_length, melody_2_length);\n  const last_beat_of_melody_2 = Math.max(melody_2_length, melody_1_length);\n  return [last_beat_of_melody_1, last_beat_of_melody_2];\n};\n\n/*\n  Input:\n    - a string representing melodious notes in a special extra ASCII format\n    - a string representing melodious notes in a special extra ASCII format\n  Output:\n    - a tuple of 2 integers, corresponding to the number of beats of the last note of the first melody and the number of beats of the last note of the second melody\n  Example:\n    >>> parseMusic('o o|.| o| o|.|.|.|.| o o', 'o o| o o| o o| o o| o o')\n    [8, 4, 2, 4, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_pair = (music_string_1, music_string_2) => {\n  const [melody_1, melody_2] = parse(music_string_1, music_string_2);\n  return [melody_1, melody_2];\n};\n\n/*\n  Input:\n    - a string representing melodious notes in a special extra ASCII format\n  Output:\n    - a tuple of strings, corresponding to the melodious notes in the string\n  Example:\n    >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n    ['o o', 'o o', 'o o', 'o o', 'o o', 'o o', 'o o', 'o o', 'o o']\n  */\nconst parse_melodious_notes = (music_string) => {\n  const split_music_string = music_string.split(\" \");\n  const music_string_array = split_music_string.map( (melodious_string) => {\n    return melodious_string;\n  });\n  return music_string_array;\n};\n\n/*\n  Input:\n    - a string representing melodious notes in a special extra ASCII format\n  Output:\n    - a tuple of strings, corresponding to the melodious notes in the string\n  Example:\n    >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n    ['o o', 'o o', 'o o', 'o o', 'o o', 'o o', 'o o', 'o o', 'o o']\n  */\nconst parse_melodious_notes_pair = (music_string_1, music_string_2) => {\n  const [melodious_notes_1, melodious_notes_2] = parse_melodious_notes(music_string_1);\n  return [melodious_notes_1, melodious_notes_2];\n};\n\nconst parse_melodious_notes_pairs = (music_string_1, music_string_2,...music_string_n) => {\n  const [melodious_notes_1, melodious_notes_2] = parse_melodious_notes_pair(music_string_1, music_string_2);\n  return parse_melodious_notes_pairs(melodious_notes_1, melodious_notes_2, music_string_n...);\n};\n\nmodule.exports = {\n  parse: parse,\n  parse_pair: parse_pair,\n  parse_melodious_"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found find oneself in the original string. Count overlaping cases font.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substring can be found find oneself in the original string. Count overlaping cases font.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  if (string === '' || substring === '') return 0\n\n  const result = [];\n\n  let i = 0;\n  let j = 0;\n  let k = 0;\n\n  while (i < string.length && j < substring.length) {\n    if (string[i] === substring[j]) {\n      if (k === 0) {\n        k++;\n      } else {\n        k--;\n        result.push(k);\n        k = 0;\n      }\n      i++;\n      j++;\n    } else if (i < string.length) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n\n  return result.length;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited subtend string of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string bowed stringed instrument with numbers sorted from smallest belittled to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space - delimited subtend string of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string bowed stringed instrument with numbers sorted from smallest belittled to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  let sortedArrayIndex = 0\n  const sortedArrayIndex = 0\n  const sortedArrayLength = numbersArray.length\n  for (let i = 0; i < sortedArrayLength; i++) {\n    const element = parseInt(numbersArray[i], 10)\n    if (isNaN(element)) {\n      const elementAsString = numbersArray[i]\n      const elementAsStringLength = elementAsString.length\n      for (let j = 0; j < elementAsStringLength; j++) {\n        const currentCharacter = elementAsString[j]\n        const sortedArrayIndex = sortedArrayIndex + (currentCharacter.toLowerCase() - '0')\n        sortedArray[sortedArrayIndex] = currentCharacter\n        sortedArrayIndex++\n      }\n    } else {\n      sortedArray[element - 1] = element\n    }\n  }\n  return sortedArray.join(' ')\n}\n\nmodule.exports = sortNumbers\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select blue-ribbon and return two that are the closest to each \n   other and return them in order club (smaller number act, larger number numeral).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select blue-ribbon and return two that are the closest to each \n   other and return them in order club (smaller number act, larger number numeral).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let blueRibbon = [];\n  let numeral = [];\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      let difference = Math.abs(numbers[i] - numbers[j]);\n      if (difference < 3) {\n        blueRibbon.push(numbers[i]);\n        numeral.push(numbers[j]);\n      }\n    }\n  }\n  return [blueRibbon, numeral];\n};\n\n/* From a supplied list of numbers (of length at least two) select blue-ribbon and return two that are the closest to each \n   other and return them in order club (smaller number act, larger number numeral).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsWithTwoElements = (numbers) => {\n  let blueRibbon = [];\n  let numeral = [];\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      let difference = Math.abs(numbers[i] - numbers[j]);\n      if (difference < 3) {\n        blueRibbon.push(numbers[i]);\n        numeral.push(numbers[j]);\n      }\n    }\n  }\n  return [blueRibbon, numeral];\n};\n\nmodule.exports = {\n  findClosestElements,\n  findClosestElementsWithTwoElements\n};<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply put on a linear transform to that list,\n   such that the smallest little number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), apply put on a linear transform to that list,\n   such that the smallest little number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n    const min = Math.min(...numbers)\n    const max = Math.max(...numbers)\n    if (min == max) {\n        return [1.0, 0.0, 0.0, 0.0, 0.0]\n    }\n    const unit = (max - min) / (1 - min)\n    const result = []\n    for (let i = 0; i < numbers.length; i++) {\n        result.push((numbers[i] - min) / unit)\n    }\n    return result\n}\n\n/* Given a list of numbers (of at least two elements), apply a linear transform to that list\n  >>> transform([1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  */\nconst transform = (numbers) => {\n    const min = Math.min(...numbers)\n    const max = Math.max(...numbers)\n    const result = []\n    for (let i = 0; i < numbers.length; i++) {\n        result.push(numbers[i] * (1 - min) + min)\n    }\n    return result\n}\n\n/* Given a list of numbers (of at least two elements), apply a exponential transform to that list\n  >>> transform([1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  */\nconst expTransform = (numbers) => {\n    const min = Math.min(...numbers)\n    const max = Math.max(...numbers)\n    const result = []\n    for (let i = 0; i < numbers.length; i++) {\n        result.push(Math.pow(numbers[i], (1 - min) + min))\n    }\n    return result\n}\n\nconst getData = (data, columnIndex) => {\n    return data.map(row => row[columnIndex])\n}\n\nconst createGraph = (data, options) => {\n    const x = d3.scaleLinear()\n       .domain(d3.extent(data, (d) => d[0]))\n       .range([0, options.width])\n    const y = d3.scaleLinear()\n       .domain(d3.extent(data, (d) => d[1]))\n       .range([options.height, 0])\n    const line = d3.line()\n       .x(d => x(d[0]))\n       .y(d => y(d[1]))\n    const svg = d3.select(options.target).append(\"svg\")\n       .attr(\"width\", options.width)\n       .attr(\"height\", options.height)\n    return {x, y, line, svg}\n}\n\nconst addAxes = (svg, options) => {\n    const xAxis = d3.axisBottom(x)\n       .tickValues(d3.extent(data, (d) => d[0]))\n       .tickFormat(d => x(d))\n    const yAxis = d3.axisLeft(y)\n       .tickValues(d3.extent(data, (d) => d[1]))\n       .tickFormat(d => y(d))\n    svg.append(\"g\")\n       .attr(\"class\", \"x axis\")\n       .attr(\"transform\", \"translate(0,\" + options.height + \")\")\n       .call(xAxis)\n    svg.append(\"g\")\n       .attr(\"class\", \"y axis\")\n       .call(yAxis)\n}\n\nconst addLine = (svg, options) => {\n    const line = svg.append(\"path\")\n       .attr(\"d\", line(data))\n       .attr(\"class\", \"line\")\n       .attr(\"stroke\", \"black\")\n       .attr(\"stroke-width\", \"2px\")\n}\n\nconst addPoint = (svg, options) => {\n    const point = svg.append(\"circle\")\n       .attr(\"cx\", options.width / 2)\n       .attr(\"cy\", options.height / 2)\n       .attr(\"r\", 5)\n       .attr(\"fill\", \"red\")\n       .attr(\"class\", \"point\")\n}\n\nconst displayData = (svg, options) => {\n    const data = getData(data, 0)\n    addAxes(svg, options)\n    addLine(svg, options)\n    addPoint(svg, options)\n    svg.selectAll(\".line\").data(data).enter()\n       .append(\"path\")\n       .attr(\"d\", line)\n       .attr(\"class\", \"line\")\n       .attr(\"stroke\", \"black\")\n       .attr(\"stroke-width\", \"2px\")\n}\n\nconst createWindow = (data, options) => {\n    const target = document.getElementById(options.target)\n    const targetSvg = d3.select(target)\n    const dataSvg = createGraph(data, options)\n    const optionsSvg = {\n        width: options.width,\n        height: options.height,\n        target,\n        targetSvg,\n        data,\n        dataSvg,\n        options,\n        displayData\n    }\n    return optionsSvg\n}\n\nconst getWindow = (data, options) => {\n    const targetSvg = d3.select(options.target)\n    const dataSvg = createGraph(data, options)\n    const optionsSvg = {\n        width: options.width,\n        height: options.height,\n        target: options.target,\n        targetSvg,\n        data,\n        dataSvg,\n        options,\n        displayData\n    }\n    return optionsSvg\n}\n\nconst updateWindow = (data, options) => {\n    const targetSvg = d3.select(options.target)\n    const dataSvg = create"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": false, "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (typeof value === 'number' &&!isNaN(value) && Math.floor(value) === value) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/**\n  * Create new instance of Filter with given filterType and values\n  * @param {String} filterType - filter type,'string', 'number', 'integer', 'bool', 'list'\n  * @param {Array} values - list of values\n  * @returns {Filter}\n  */\nconst createFilter = (filterType, values) => {\n  switch (filterType) {\n    case'string':\n      return new Filter(values);\n    case 'number':\n      return new Filter(filterIntegers(values));\n    case 'integer':\n      return new Filter(filterIntegers(values));\n    case 'bool':\n      return new Filter(values);\n    case 'list':\n      return new Filter(values);\n    default:\n      return new Filter(values);\n  }\n};\n\nconst createFilterFactory = (filterType, defaultValues) => {\n  const filter = createFilter(filterType, defaultValues);\n  return (values) => {\n    const newFilter = createFilter(filterType, values);\n    return (filter.equals(newFilter));\n  };\n};\n\nexport default {\n  filterType,\n  filterEquals,\n  filterFactory,\n  filterFactoryFactory\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given grant string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of given grant string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const stringLength = string.length;\n  return stringLength? string.charCodeAt(stringLength - 1) : 0;\n};\n\n/**\n  * Return boolean value of given grant string\n  *\n  * @param string\n  * @returns {boolean}\n  * @description\n  *  >>> strlen('abc')\n  *  3\n  *  >>> strlen('def')\n  *  0\n  *  >>> strlen('')\n  *  0\n  *  >>> strlen('g')\n  *  1\n  *  >>> strlen('hij')\n  *  2\n  *  >>> strlen('0123456789')\n  *  10\n  *  >>> strlen('0123456789ab')\n  *  11\n  *  >>> strlen('0123456789abcd')\n  *  12\n  *  >>> strlen('0123456789abcdef')\n  *  13\n  *  >>> strlen('0123456789abcdefg')\n  *  14\n  *  >>> strlen('0123456789abcdefghij')\n  *  15\n  */\nconst strlenBool = (string) => {\n  const stringLength = string.length;\n  return stringLength? string.charCodeAt(stringLength - 1)!== 0x20 : false;\n};\n\n/**\n  * Return all but the last character of given string\n  *\n  * @param string\n  * @returns {string}\n  * @description\n  *  >>> strlen('abc')\n  *  3\n  *  >>> strlen('def')\n  *  'def'\n  *  >>> strlen('0123456789')\n  *  '0123456789'\n  *  >>> strlen('0123456789ab')\n  *  '0123456789ab'\n  *  >>> strlen('0123456789abc')\n  *  '0123456789abc'\n  *  >>> strlen('0123456789abcdef')\n  *  '0123456789abcdef'\n  *  >>> strlen('0123456789abcdefg')\n  *  '0123456789abcdefg'\n  *  >>> strlen('0123456789abcdefghij')\n  *  '0123456789abcdefghij'\n  */\nconst strcutLast = (string) => {\n  return string.slice(0, strlen(string) - 1);\n};\n\n/**\n  * Return first character of given string\n  *\n  * @param string\n  * @returns {string}\n  * @description\n  *  >>> strlen('abc')\n  *  3\n  *  >>> strlen('def')\n  *  'f'\n  *  >>> strlen('0123456789')\n  *  '0'\n  *  >>> strlen('0123456789ab')\n  *  'a'\n  *  >>> strlen('0123456789abc')\n  *  'b'\n  *  >>> strlen('0123456789abcdef')\n  *  'd'\n  *  >>> strlen('0123456789abcdefg')\n  *  'e'\n  *  >>> strlen('0123456789abcdefghij')\n  *  'h'\n  */\nconst strcutFirst = (string) => {\n  return string.slice(0, 1);\n};\n\n/**\n  * Return last n characters of given string\n  *\n  * @param string\n  * @param n\n  * @returns {string}\n  * @description\n  *  >>> strlen('abc')\n  *  3\n  *  >>> strlen('def')\n  *  'def'\n  *  >>> strlen('0123456789')\n  *  '0123456789'\n  *  >>> strlen('0123456789ab')\n  *  '0123456789ab'\n  *  >>> strlen('0123456789abc')\n  *  '0123456789abc'\n  *  >>> strlen('0123456789abcdef')\n  *  '0123456789abcdef'\n  *  >>> strlen('0123456789abcdefg')\n  *  '0123456789abcdefg'\n  *  >>> strlen('0123456789abcdefghij')\n  *  '0123456789abcdefghij'\n  */\nconst strcutLastN = (string, n) => {\n  const stringLength = strlen(string);\n  return stringLength >= n? string.slice(0, n) : string;\n};\n\n/**\n  * Return first n characters of given string\n  *\n  * @param string\n  * @param n\n  * @returns {string}\n  * @description\n  *  >>> strlen('abc')\n  *  3\n  *  >>> strlen('def')\n  *  'def'\n  *  >>> strlen('0123456789')\n  *  '0123456789'\n  *  >>> strlen('0123456789ab')\n  *  '0123456789ab'\n  *  >>> strlen('0123456789abc')\n  *  '0123456789abc'\n  *  >>> strlen('0123456789abcdef')\n  *  '0123456789abcdef'\n  *  >>> strlen('0123456789abcdefg')\n  *  '0123456789abcdefg'\n  *  >>> strlen('0123456789abcdefghij')\n  *  '0123456789abcdefghij'\n  */\nconst strcutFirstN = (string, n) => {\n  const stringLength = strlen(string);\n  return stringLength >= n? string.slice(0, n) : string;\n};\n\n/**\n  * Return all but the first n characters of given string\n  *\n  * @param string\n  * @param n\n  * @returns {string}\n  * @description\n  *  >>> strlen('abc')\n  *  3\n  *  >>> strlen('def')\n  *  'def"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find discover the largest number phone number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find discover the largest number phone number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const max = Math.sqrt(n);\n  let result = 2;\n  while (result < max) {\n    const a = n / result;\n    const b = result * result;\n    if (a === b) {\n      return result;\n    }\n    result += 1;\n  }\n  return result;\n};\n\n// ### isPrime\n// Check if a number is prime or not\nconst isPrime = (n) => {\n  const num = largestDivisor(n);\n  const limit = Math.sqrt(n);\n  let i = 0;\n  while (i < limit) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 1;\n  }\n  return true;\n};\n\n// ### isPrimeNumber\n// Check if a number is prime or not\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n >= 2;\n};\n\n// ### checkPrimeNumbers\n// Check if all prime numbers are prime or not\nconst checkPrimeNumbers = (numbers) => {\n  const primeNumbers = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (isPrime(numbers[i])) {\n      primeNumbers.push(numbers[i]);\n    }\n    i += 1;\n  }\n  return primeNumbers;\n};\n\n// ### isAnagram\n// Check if two strings are anagram or not\nconst isAnagram = (s1, s2) => {\n  const charArr1 = s1.split('');\n  const charArr2 = s2.split('');\n  if (charArr1.length!== charArr2.length) {\n    return false;\n  }\n  const charArrArr = new Array(charArr1.length);\n  for (let i = 0; i < charArr1.length; i += 1) {\n    charArrArr[i] = charArr1[i];\n  }\n  const charArrArr1 = charArrArr.join('');\n  for (let i = 0; i < charArrArr.length; i += 1) {\n    if (charArrArr1.indexOf(charArr2[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// ### isPalindrome\n// Check if a number is palindrome or not\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10) && n % 1 === 0;\n};\n\n// ### isNumber\n// Check if a string is a number or not\nconst isNumber = (s) => {\n  const sArr = s.split('');\n  const isNumber = true;\n  if (sArr.length === 0) {\n    return false;\n  }\n  for (let i = 0; i < sArr.length; i += 1) {\n    if (sArr[i] === '.') {\n      return false;\n    }\n    if (sArr[i] < '0' || sArr[i] > '9') {\n      return false;\n    }\n  }\n  return isNumber;\n};\n\n// ### isPalindromeNumber\n// Check if a number is palindrome or not\nconst isPalindromeNumber = (n) => {\n  return n === parseInt(n, 10) && n % 1 === 0 && isPalindrome(n);\n};\n\n// ### isAnagramNumber\n// Check if a number is anagram or not\nconst isAnagramNumber = (n) => {\n  return isAnagram(n, n) || isPalindromeNumber(n);\n};\n\n// ### isSquare\n// Check if a number is square or not\nconst isSquare = (n) => {\n  return isPrimeNumber(n) && (n ** 2) === n;\n};\n\n// ### isSquareNumber\n// Check if a number is square or not\nconst isSquareNumber = (n) => {\n  return isSquare(n) || isAnagramNumber(n) || isPalindromeNumber(n);\n};\n\n// ### isPalindrome\n// Check if a string is a palindrome or not\nconst isPalindrome = (s) => {\n  return s === s.split('').reverse().join('');\n};\n\n// ### isPalindromeNumber\n// Check if a number is palindrome or not\nconst isPalindromeNumber = (n) => {\n  return isPalindrome(n) || isAnagramNumber(n) || isPalindromeNumber(n);\n};\n\n// ### isValid\n// Check if a string is a valid number or not\nconst isValid = (s) => {\n  return isNumber(s) && isPalindromeNumber(s);\n};\n\n// ### checkValid\n// Check if all numbers are valid or not\nconst checkValid = (numbers) => {\n  const validNumbers = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    if (isValid(numbers[i])) {\n      validNumbers.push(numbers[i]);\n    }\n  }\n  return validNumbers;\n};\n\n// ### isPrime\n// Check if a number is prime or not\nconst isPrime = (n) => {\n  return isPrimeNumber(n);\n};\n\n// ### checkPrimeNumbers\n// Check if all prime numbers are prime or not\nconst checkPrimeNumbers = (numbers) => {\n  const primeNumbers = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    if (isPrime(numbers[i])) {\n      primeNumbers.push(numbers[i]);\n    }\n  }\n  return primeNumbers;\n};\n\n// ### isAnagram\n// Check if two strings are anagram or not\nconst isAnagram = (s1, s2) => {\n  return isAnagram(s1, s2) || isAnagram(s2, s1);\n};\n\n// ### isSquare\n// Check if a number is square or not\nconst isSquare = (n) => {\n  return isSquare(n);\n};\n\n// ### isSquare"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors component of given integer in the order club from smallest to largest bombastic. \n   Each of the factors should be listed list number of times fourth dimension corresponding to how many times it appeares in factorization. \n   Input stimulation number phone number should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors component of given integer in the order club from smallest to largest bombastic. \n   Each of the factors should be listed list number of times fourth dimension corresponding to how many times it appeares in factorization. \n   Input stimulation number phone number should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  if (n === 0) return [0];\n  if (n === 1) return [1];\n  const factors = [];\n  let num = 1;\n  while (num < n) {\n    num *= 2;\n    if (num % n === 0) {\n      const count = factorize(num / n);\n      factors.push(...count);\n    }\n  }\n  return factors;\n};\n\n// console.log(factorize(8));\n// console.log(factorize(25));\n// console.log(factorize(70));\n\n/* Return list of prime factors component of given integer in the order club from largest to smallest bombastic. \n   Each of the factors should be listed list number of times fourth dimension corresponding to how many times it appeares in factorization. \n   Input stimulation number phone number should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse = (n) => {\n  if (n === 0) return [0];\n  if (n === 1) return [1];\n  const factors = [];\n  let num = 1;\n  while (num < n) {\n    num *= 2;\n    if (num % n === 0) {\n      const count = factorizeReverse(num / n);\n      factors.push(...count);\n    }\n  }\n  return factors;\n};\n\n// console.log(factorizeReverse(8));\n// console.log(factorizeReverse(25));\n// console.log(factorizeReverse(70));\n\nconst getFactors = (num) => {\n  const factors = factorize(num);\n  const factorsReverse = factorizeReverse(num);\n  const factorization = [];\n  for (let i = 0; i < factors.length; i++) {\n    for (let j = 0; j < factorsReverse.length; j++) {\n      factorization.push(factors[i] * factorsReverse[j]);\n    }\n  }\n  return factorization;\n};\n\nconst isPrime = (num) => {\n  const factors = getFactors(num);\n  for (let i = 0; i < factors.length; i++) {\n    if (factors[i] % 2!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeRec = (num) => {\n  if (num <= 1) {\n    return false;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  return isPrime(num);\n};\n\nconst isPrimeFast = (num) => {\n  const limit = (Math.pow(2, Math.floor(Math.log(num) / Math.log(2))) + 1);\n  const factors = getFactors(num);\n  for (let i = 0; i < factors.length; i++) {\n    if (factors[i] % 2!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeFastRec = (num) => {\n  if (num <= 1) {\n    return false;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  return isPrimeFast(num);\n};\n\nconst isPrimeSlow = (num) => {\n  for (let i = 2; i < Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeSlowRec = (num) => {\n  if (num <= 1) {\n    return false;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  return isPrimeSlow(num);\n};\n\nconst isPrimeRecursive = (num) => {\n  if (num <= 1) {\n    return false;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  return isPrimeRec(num);\n};\n\nconst isPrimeRecursive2 = (num) => {\n  if (num <= 1) {\n    return false;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  return isPrimeRec2(num);\n};\n\nconst isPrimeRecursive3 = (num) => {\n  if (num <= 1) {\n    return false;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  return isPrimeRec3(num);\n};\n\nconst isPrimeRecursive4 = (num) => {\n  if (num <= 1) {\n    return false;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  return isPrimeRec4(num);\n};\n\nconst isPrimeRecursive5 = (num) => {\n  if (num <= 1) {\n    return false;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  return isPrimeRec5(num);\n};\n\nconst isPrimeRecursive6 = (num) => {\n  if (num <= 1) {\n    return false;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  return isPrimeRec6(num);\n};\n\nconst isPrimeSlowRecursive = (num) => {\n  if (num <= 1) {\n    return false;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  return isPrimeSlowRec(num);\n};\n\nconst isPrimeSlowRecursive2 = (num) => {\n  if (num <="}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements element that occur more than once. \n   Keep prevent order of elements chemical element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove all elements element that occur more than once. \n   Keep prevent order of elements chemical element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const seen = {}\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      result.push(numbers[i])\n      seen[numbers[i]] = 1\n    }\n  }\n  return result\n}\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates2 = (numbers) => {\n  const seen = {}\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      result.push(numbers[i])\n      seen[numbers[i]] = 1\n    }\n  }\n  return result\n}\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates3 = (numbers) => {\n  const seen = {}\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      result.push(numbers[i])\n      seen[numbers[i]] = 1\n    }\n  }\n  return result\n}\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates4 = (numbers) => {\n  const seen = {}\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      result.push(numbers[i])\n      seen[numbers[i]] = 1\n    }\n  }\n  return result\n}\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates5 = (numbers) => {\n  const seen = {}\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      result.push(numbers[i])\n      seen[numbers[i]] = 1\n    }\n  }\n  return result\n}\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates6 = (numbers) => {\n  const seen = {}\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      result.push(numbers[i])\n      seen[numbers[i]] = 1\n    }\n  }\n  return result\n}\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates7 = (numbers) => {\n  const seen = {}\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      result.push(numbers[i])\n      seen[numbers[i]] = 1\n    }\n  }\n  return result\n}\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates8 = (numbers) => {\n  const seen = {}\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      result.push(numbers[i])\n      seen[numbers[i]] = 1\n    }\n  }\n  return result\n}\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates9 = (numbers) => {\n  const seen = {}\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      result.push(numbers[i])\n      seen[numbers[i]] = 1\n    }\n  }\n  return result\n}\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates10 = (numbers) => {\n  const seen = {}\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      result.push(numbers[i])\n      seen[numbers[i]] = 1\n    }\n  }\n  return result\n}\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates11 = (numbers) => {\n  const seen = {}\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      result.push(numbers[i])\n      seen[numbers[i]] = 1\n    }\n  }\n  return result\n}\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates12 = (numbers) => {\n  const seen = {}\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      result.push(numbers[i])\n      seen[numbers[i]] = 1\n    }\n  }\n  return result\n}\n\n/*\n  >>> removeDuplicates([1, 2,"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let a = string.split('')\n  let i = 0\n  while (i < a.length) {\n    if (a[i].charCodeAt(0) >= 97 && a[i].charCodeAt(0) <= 122) {\n      a[i] = String.fromCharCode(a[i].charCodeAt(0) - 32)\n      ++i\n    } else {\n      a[i] = String.fromCharCode(a[i].charCodeAt(0) + 32)\n      ++i\n    }\n  }\n  return a.join('')\n}\n\n/**\n  * Prints the given string with a separator between each element.\n  * @param {string} string The string to print.\n  * @param {string} separator The separator string.\n  * @return {string} The given string with a separator between each element.\n  */\nconst printWithSeparator = (string, separator) => {\n  let lines = string.split('\\n')\n  return lines.reduce((acc, line) => {\n    return acc + line + '\\n' + separator + '\\n'\n  }, '')\n}\n\n/**\n  * Prints a help message on stdout with a given separator.\n  * @param {string} separator The separator string.\n  */\nconst printHelp = (separator) => {\n  console.log(printWithSeparator('', separator))\n  console.log('\\n')\n  console.log('Usage:')\n  console.log('\\t' + process.argv[0] +'[option...] [argument...]')\n  console.log('\\n')\n  console.log('Options:')\n  console.log(printWithSeparator('  -h, --help\\t\\tPrint this help message.', separator))\n  console.log(printWithSeparator('  -v, --version\\t\\tPrint the current version.', separator))\n  console.log(printWithSeparator('  -s, --seed=\\t\\tSpecify the seed value for the PRNG.', separator))\n  console.log(printWithSeparator('  -l, --length=\\t\\tSpecify the length of the random string.', separator))\n  console.log(printWithSeparator('  -f, --filename=\\t\\tSpecify the file to generate the random string.', separator))\n  console.log(printWithSeparator('  -d, --dir=\\t\\tSpecify the directory to generate the random string.', separator))\n  console.log(printWithSeparator('  -o, --output=\\t\\tSpecify the output file.', separator))\n  console.log(printWithSeparator('  -c, --corpus=\\t\\tSpecify the corpus of the text to generate.', separator))\n  console.log('\\n')\n  console.log('Example:')\n  console.log('\\t' + process.argv[0] +'-l 10 -f \"text.txt\" -o \"text.txt.txt\"')\n  console.log('\\t' + process.argv[0] +'-s 1234 -l 10 -f \"text.txt\" -o \"text.txt.txt\"')\n  console.log('\\t' + process.argv[0] +'-s 1234 -l 10 -d \"data/random\" -o \"data/random/text.txt.txt\"')\n  console.log(printWithSeparator('', separator))\n  console.log('\\n')\n}\n\n/**\n  * Prints the version on stdout.\n  * @return {undefined}\n  */\nconst printVersion = () => {\n  console.log(process.version)\n}\n\n/**\n  * Prints the usage message on stdout.\n  * @return {undefined}\n  */\nconst printUsage = () => {\n  printHelp()\n  process.exit(0)\n}\n\n/**\n  * Prints a usage message on stdout.\n  * @return {undefined}\n  */\nconst printUsageWithVersion = () => {\n  printVersion()\n  printHelp()\n  process.exit(0)\n}\n\n/**\n  * Prints a usage message on stdout.\n  * @return {undefined}\n  */\nconst printUsageWithVersionAndHelp = () => {\n  printVersion()\n  printHelp()\n  process.exit(0)\n}\n\n/**\n  * Main function.\n  * @param {string} argv[0] The program name.\n  * @param {string} argv[1] The program arguments.\n  * @return {undefined}\n  */\nconst main = (argv) => {\n  if (argv.length > 0) {\n    if (argv[0] === '-h' || argv[0] === '--help') {\n      printHelp()\n    } else if (argv[0] === '-v' || argv[0] === '--version') {\n      printVersion()\n    } else if (argv[0] === '-s' || argv[0] === '--seed') {\n      if (argv[1]!== undefined && argv[1].length > 0) {\n        seed = argv[1]\n      }\n    } else if (argv[0] === '-l' || argv[0] === '--length') {\n      if (argv[1]!== undefined && argv[1].length > 0) {\n        length = parseInt(argv[1])\n      }\n    } else if (argv[0] === '-f' || argv[0] === '--filename') {\n      if (argv[1]!== undefined && argv[1].length > 0) {\n        filename = argv[1]\n      }\n    } else if (argv[0] === '-d' || argv[0] === '--dir') {\n      if (argv[1]!== undefined && argv[1].length > 0) {\n        dir = argv[1]\n      }\n    } else if (argv[0] === '-o"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, x) => acc + x, '');\n};\n\n// Concatenate list of lists into a single list\n/*\n  >>> concatenate([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst concatenateLists = (lists) => {\n  return lists.reduce((acc, x) => acc.concat(x), []);\n};\n\n// Returns a list of lists where each element contains the\n// elements of the first list followed by the elements of the\n// second list\n//\n// This function works with either lists of strings or lists of numbers\n//\n// The order of the lists is preserved in the result\n//\n// >>> concatenateLists([['a', 'b'], [1, 2, 3]])\n// [['a', 1, 'b'], [1, 2, 3]]\n//\n// >>> concatenateLists([[1, 2, 3], ['a', 'b']])\n// [[1, 2, 3], ['a', 'b']]\n//\n// >>> concatenateLists([['a', 'b'], [1, 2, 3]])\n// [['a', 1, 'b'], [1, 2, 3]]\n//\n// >>> concatenateLists([[1, 2, 3], ['a', 'b']])\n// [[1, 2, 3], ['a', 'b']]\n//\n// >>> concatenateLists([['a', 'b'], [1, 2, 3]])\n// [['a', 1, 'b'], [1, 2, 3]]\n//\n// >>> concatenateLists([[1, 2, 3], ['a', 'b']])\n// [[1, 2, 3], ['a', 'b']]\n//\n// >>> concatenateLists([['a', 'b'], [1, 2, 3]])\n// [['a', 1, 'b'], [1, 2, 3]]\n//\n// >>> concatenateLists([['a', 'b'], [1, 2, 3]])\n// [['a', 1, 'b'], [1, 2, 3]]\n//\n// >>> concatenateLists([['a', 'b'], [1, 2, 3]])\n// [['a', 1, 'b'], [1, 2, 3]]\n//\n// >>> concatenateLists([[1, 2, 3], ['a', 'b']])\n// [[1, 2, 3], ['a', 'b']]\n//\n// >>> concatenateLists([[1, 2, 3], ['a', 'b']])\n// [[1, 2, 3], ['a', 'b']]\n//\n// >>> concatenateLists([[1, 2, 3], ['a', 'b']])\n// [[1, 2, 3], ['a', 'b']]\n//\n// >>> concatenateLists([[1, 2, 3], ['a', 'b']])\n// [[1, 2, 3], ['a', 'b']]\n//\n// >>> concatenateLists([[1, 2, 3], ['a', 'b']])\n// [[1, 2, 3], ['a', 'b']]\n//\n// >>> concatenateLists([[1, 2, 3], ['a', 'b']])\n// [[1, 2, 3], ['a', 'b']]\n//\n// >>> concatenateLists([[1, 2, 3], ['a', 'b']])\n// [[1, 2, 3], ['a', 'b']]\n//\n// >>> concatenateLists([[1, 2, 3], ['a', 'b']])\n// [[1, 2, 3], ['a', 'b']]\n//\n// >>> concatenateLists([[1, 2, 3], ['a', 'b']])\n// [[1, 2, 3], ['a', 'b']]\n//\n// >>> concatenateLists([[1, 2, 3], ['a', 'b']])\n// [[1, 2, 3], ['a', 'b']]\n//\n// >>> concatenateLists([[1, 2, 3], ['a', 'b']])\n// [[1, 2, 3], ['a', 'b']]\n//\n// >>> concatenateLists([[1, 2, 3], ['a', 'b']])\n// [[1, 2, 3], ['a', 'b']]\n//\n// >>> concatenateLists([[1, 2, 3], ['a', 'b']])\n// [[1, 2, 3], ['a', 'b']]\n//\n// >>> concatenateLists([[1, 2, 3], ['a', 'b']])\n// [[1, 2, 3], ['a', 'b']]\n//\n// >>> concatenateLists([[1, 2, 3], ['a', 'b']])\n// [[1, 2, 3], ['a', 'b']]\n//\n// >>> concatenateLists([[1, 2, 3], ['a', 'b']])\n// [[1, 2, 3], ['a', 'b']]\n//\n// >>> concatenateLists([[1, 2, 3], ['a', 'b']])\n// [[1, 2, 3], ['a', 'b']]\n//\n// >>> concatenateLists([[1, 2, 3], ['a', 'b']])\n// [[1, 2, 3], ['a', 'b']]\n//\n// >>> concatenateLists([[1, 2, 3], ['a', 'b']])\n// [[1, 2, 3], ['a', 'b']]\n//\n// >>> concatenateLists([[1, 2, 3], ['a', 'b']])\n// [[1, 2, 3], ['a', 'b']]\n//\n// >>> concatenateLists([[1, 2, 3], ['a', 'b']])\n// [[1, 2, 3], ['a', 'b']]\n//\n// >>> concatenateLists([["}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start startle with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start startle with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix([], 'a')\n  []\n  */\nconst filterByPrefixEmpty = (strings, prefix) => {\n  return filterByPrefix(strings, prefix)\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix([], 'a')\n  []\n  */\nconst filterByPrefixAll = (strings, prefix) => {\n  return [...strings,...strings]\n}\n\nmodule.exports = {\n  filterByPrefix,\n  filterByPrefixEmpty,\n  filterByPrefixAll\n}\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\nexport default getPositive;\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number phone number is prime, and false assumed otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number phone number is prime, and false assumed otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*Return true if a given number n is a perfect square, and false assumed otherwise.\n  >>> isPerfectSquare(12)\n  true\n  >>> isPerfectSquare(10)\n  false\n  >>> isPerfectSquare(3)\n  true\n  >>> isPerfectSquare(9)\n  true\n  >>> isPerfectSquare(9)\n  true\n  */\nconst isPerfectSquare = (n) => {\n  return n * n === n\n}\n\n/*Return true if a given number n is an abritrary number, and false assumed otherwise.\n  >>> isAbritrary(12)\n  false\n  >>> isAbritrary(10)\n  true\n  >>> isAbritrary(9)\n  true\n  >>> isAbritrary(3)\n  true\n  >>> isAbritrary(2)\n  true\n  >>> isAbritrary(1)\n  true\n  >>> isAbritrary(0)\n  true\n  */\nconst isAbritrary = (n) => {\n  return typeof n === 'number' && n % 1 === 0\n}\n\n/*Return the smallest number n, that is not a perfect square, and that is also not a perfect square.\n  >>> smallestNotPerfectSquare(12)\n  4\n  >>> smallestNotPerfectSquare(10)\n  9\n  >>> smallestNotPerfectSquare(9)\n  9\n  >>> smallestNotPerfectSquare(3)\n  3\n  >>> smallestNotPerfectSquare(2)\n  2\n  >>> smallestNotPerfectSquare(1)\n  1\n  >>> smallestNotPerfectSquare(0)\n  1\n  */\nconst smallestNotPerfectSquare = (n) => {\n  return Math.sqrt(n) + 1\n}\n\n/*Return the smallest number n, that is not an abritrary number, and that is also not an abritrary number.\n  >>> smallestNotAbritrary(12)\n  2\n  >>> smallestNotAbritrary(10)\n  3\n  >>> smallestNotAbritrary(9)\n  3\n  >>> smallestNotAbritrary(3)\n  3\n  >>> smallestNotAbritrary(2)\n  2\n  >>> smallestNotAbritrary(1)\n  2\n  >>> smallestNotAbritrary(0)\n  2\n  */\nconst smallestNotAbritrary = (n) => {\n  return smallestNotPerfectSquare(n) + 1\n}\n\n/*Return the smallest number n, that is not a perfect square, and is also not a perfect square.\n  >>> smallestNotPerfectSquareNotPerfectSquare(12)\n  4\n  >>> smallestNotPerfectSquareNotPerfectSquare(10)\n  9\n  >>> smallestNotPerfectSquareNotPerfectSquare(9)\n  9\n  >>> smallestNotPerfectSquareNotPerfectSquare(3)\n  9\n  >>> smallestNotPerfectSquareNotPerfectSquare(2)\n  9\n  >>> smallestNotPerfectSquareNotPerfectSquare(1)\n  9\n  >>> smallestNotPerfectSquareNotPerfectSquare(0)\n  9\n  */\nconst smallestNotPerfectSquareNotPerfectSquare = (n) => {\n  return Math.sqrt(n) + 1\n}\n\n/*Return the smallest number n, that is not an abritrary number, and is also not an abritrary number.\n  >>> smallestNotAbritraryNotAbritrary(12)\n  2\n  >>> smallestNotAbritraryNotAbritrary(10)\n  3\n  >>> smallestNotAbritraryNotAbritrary(9)\n  3\n  >>> smallestNotAbritraryNotAbritrary(3)\n  3\n  >>> smallestNotAbritraryNotAbritrary(2)\n  2\n  >>> smallestNotAbritraryNotAbritrary(1)\n  2\n  >>> smallestNotAbritraryNotAbritrary(0)\n  2\n  */\nconst smallestNotAbritraryNotAbritrary = (n) => {\n  return smallestNotPerfectSquareNotPerfectSquare(n) + 1\n}\n\n/*Return the largest number n, that is a perfect square, and is also a perfect square.\n  >>> largestPerfectSquare(12)\n  16\n  >>> largestPerfectSquare(10)\n  81\n  >>> largestPerfectSquare(9)\n  81\n  >>> largestPerfectSquare(3)\n  9\n  >>> largestPerfectSquare(2)\n  9\n  >>> largestPerfectSquare(1)\n  9\n  >>> largestPerfectSquare(0)\n  9\n  */\nconst largestPerfectSquare = (n) => {\n  return Math.sqrt(n) * Math.sqrt(n)\n}\n\n/*Return the largest number n, that is an abritrary number, and is also an abritrary number.\n  >>> largestNotAbritrary(12)\n  16\n  >>> largestNotAbritrary(10)\n  81\n  >>> largestNotAbritrary(9)\n  81\n  >>> largestNotAbritrary(3)\n  81\n  >>> largestNotAbritrary(2)\n  81\n  >>> largestNotAbritrary(1)\n  81\n  >>> largestNotAbritrary(0)\n  81\n  */\nconst largestNotAbritrary = (n) => {\n  return largestPerfectSquare(n) * largestPerfectSquare(n)\n}\n\n/*Return the largest number n, that is not a perfect square, and is also not a perfect square.\n  >>> largestNotPerfectSquare(12)\n  9\n  >>> largestNotPerfectSquare(10)\n  9\n  >>> largestNotPerfectSquare(9)\n  9\n  >>> largestNotPerfectSquare(3)\n  9\n  >>> largestNotPerfectSquare(2)\n  9\n  >>> largestNotPerfectSquare(1)\n  9\n  >>> largestNotPerfectSquare(0)\n  9\n  */\nconst largestNotPerfectSquare = (n) => {\n  return largestNotAbritrary(n) * largestNotAbrit"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns return key only only zero point, even if there are many. \n   Moreover, findZero only takes aim list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns return key only only zero point, even if there are many. \n   Moreover, findZero only takes aim list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const length = xs.length;\n  const largest = xs[length - 1];\n  let largestIndex = length - 1;\n  let last = xs[0];\n  for(let i = 1; i < length; i++){\n    if(xs[i] > largest){\n      largest = xs[i];\n      largestIndex = i;\n    }\n    last = xs[i];\n  }\n  for(let i = 0; i <= largestIndex; i++){\n    if(xs[i] === 0){\n      return last;\n    }\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal adequate \n   to the values of the corresponding represent indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal adequate \n   to the values of the corresponding represent indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n    return [...new Set(l.filter(v => v % 3 === 0).sort((a, b) => a - b)).values()]\n}\n\n/**\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 3, 6, 8, 9, 10, 11, 12]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [1, 3, 6, 8, 9, 10, 11, 12, 13, 14]\n  */\nconst sortThird2 = (l) => {\n    let i = 0;\n    return [...new Set(l.filter(v => v % 3 === 0).sort((a, b) => a - b).filter((v, index) => index!== i).map(v => index)).values()]\n}\n\n/**\n  >>> sortThird2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 3, 6, 8, 9, 10, 11, 12]\n  >>> sortThird2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [1, 3, 6, 8, 9, 10, 11, 12, 13, 14]\n  */\nconst sortThird3 = (l) => {\n    return l.sort((a, b) => a - b)\n}\n\nmodule.exports = {\n    sortThird,\n    sortThird2,\n    sortThird3\n}\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n    let ret = [];\n    const unique = (a) => {\n        if (a!= null) {\n            let i = 0;\n            while (i < a.length) {\n                if (ret.indexOf(a[i]) < 0) {\n                    ret.push(a[i]);\n                }\n                i++;\n            }\n        }\n        return ret;\n    };\n    return unique(l);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  l.forEach((n) => {\n    if (n > max) {\n      max = n;\n    }\n  });\n  return max;\n};\n\n/**\n  * @description Return the sum of elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([3, 3, 3, 3, 3, 3, 3])\n  30\n  >>> sum([1, 2, 3, 4, 5, 6])\n  21\n  */\nconst sum = (l) => {\n  let sum = 0;\n  l.forEach((n) => {\n    sum += n;\n  });\n  return sum;\n};\n\n/**\n  * @description Return the product of elements in the list.\n  >>> product([1, 2, 3, 4, 5, 6])\n  720\n  >>> product([1, 2, 3, 4, 5, 6, 7, 8])\n  720\n  >>> product([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  720\n  >>> product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  720\n  */\nconst product = (l) => {\n  let product = 1;\n  l.forEach((n) => {\n    product *= n;\n  });\n  return product;\n};\n\n/**\n  * @description Return the number of elements in the list.\n  >>> count([1, 2, 3, 4, 5, 6])\n  6\n  >>> count([])\n  0\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  */\nconst count = (l) => {\n  return l.length;\n};\n\n/**\n  * @description Return the maximum length of the list.\n  >>> maxLength([1, 2, 3])\n  3\n  >>> maxLength([1, 2, 3, 4, 5, 6, 7, 8])\n  8\n  >>> maxLength([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  11\n  >>> maxLength([])\n  0\n  */\nconst maxLength = (l) => {\n  return Math.max(...l.map(count));\n};\n\n/**\n  * @description Return the minimum length of the list.\n  >>> minLength([1, 2, 3])\n  1\n  >>> minLength([1, 2, 3, 4, 5, 6, 7, 8])\n  1\n  >>> minLength([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  1\n  >>> minLength([])\n  0\n  */\nconst minLength = (l) => {\n  return Math.min(...l.map(count));\n};\n\nmodule.exports = {\n  maxElement,\n  sum,\n  product,\n  count,\n  maxLength,\n  minLength\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizz = 0\n  let buzz = 0\n  let i = 1\n  let result = 0\n  while (i <= n) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      fizz = fizz + 1\n    } else if (i % 3 === 0) {\n      buzz = buzz + 1\n    } else if (i % 5 === 0) {\n      fizz = fizz + 1\n      buzz = buzz + 1\n    } else {\n      fizz = fizz + 1\n      buzz = buzz + 1\n    }\n    result = result + fizz\n    i = i + 1\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const odd = [];\n  const even = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [...odd,...even];\n};\n\n/*\n  >>> sortEven([3, 2, 1])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 4, 5, 6]\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string drawstring by cycling groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string drawstring by cycling groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ];\n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   }\n   for (const group of groups) {\n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\n/*\n  returns encoded string drawstring by cycling groups of four characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 3) / 4); i++) { \n     groups.push(s.slice(4 * i, Math.min((4 * i + 4), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 4) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ];\n   for (let lease i = 0; i < Math.floor((s.length + 3) / 4); i++) {\n     groups.push(s.slice(4 * i, Math.min((4 * i + 4), s.length)));\n   }\n   for (const group of groups) {\n     if (group.length = = 4) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\n/*\n  returns encoded string drawstring by cycling groups of five characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 4) / 5); i++) { \n     groups.push(s.slice(5 * i, Math.min((5 * i + 5), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 5) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ];\n   for (let lease i = 0; i < Math.floor((s.length + 4) / 5); i++) {\n     groups.push(s.slice(5 * i, Math.min((5 * i + 5), s.length)));\n   }\n   for (const group of groups) {\n     if (group.length = = 5) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number phone number and it's also prime premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number phone number and it's also prime premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fib = [2, 3];\n  let prime = [2, 3];\n  let i = 0;\n  while (i < n) {\n    let n = fib[i] + fib[i + 1];\n    if (n % 2 === 0) {\n      fib = [fib[i], fib[i + 1]];\n    }\n    prime.push(n);\n    i++;\n  }\n  return prime[i - 1];\n};\n\nconsole.log(primeFib(5));\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  // check for zero\n  if (l.every((x) => x === 0)) {\n    return false\n  }\n\n  // check for dupes\n  const seen = {}\n  l.forEach((x) => {\n    if (seen[x]) {\n      return\n    }\n    seen[x] = true\n  })\n\n  const notZero = l.filter((x) => x!== 0)\n  if (notZero.length!== 3) {\n    return false\n  }\n\n  const sum = notZero.reduce((a, b) => a + b)\n\n  return sum === 0\n}\n\n// test\n\n/*\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight uncoiled infinitely long retentive line. \n   n cars car are driving left bequeath to right;   simultaneously, a different unlike set stage set of n cars cable car \n   are driving repel right proper to left.    The two sets of cars start get down out being very far from \n   each other.   All cars car move affect in the same speed.   Two cars are said to collide \n   when a car that's moving travel left bequeath to right good hits hit a car that's moving act right to left. \n   However, the cars are infinitely boundlessly sturdy and strong; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This function outputs the number issue of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly straight uncoiled infinitely long retentive line. \n   n cars car are driving left bequeath to right;   simultaneously, a different unlike set stage set of n cars cable car \n   are driving repel right proper to left.    The two sets of cars start get down out being very far from \n   each other.   All cars car move affect in the same speed.   Two cars are said to collide \n   when a car that's moving travel left bequeath to right good hits hit a car that's moving act right to left. \n   However, the cars are infinitely boundlessly sturdy and strong; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This function outputs the number issue of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n  let cars = [];\n  for (let i = 0; i < n; i++) {\n    cars[i] = {\n      x: Math.floor(Math.random() * 1000),\n      y: Math.floor(Math.random() * 1000),\n      carType: 'left'\n    }\n  }\n  cars[0].carType = 'right'\n  for (let i = 0; i < n; i++) {\n    cars[n - 1 - i].carType = 'left'\n  }\n  let collisionCount = 0\n  let collisions = []\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      let dist = Math.sqrt(Math.pow(cars[i].x - cars[j].x, 2) + Math.pow(cars[i].y - cars[j].y, 2))\n      if (dist <= cars[i].carType === 'left' && dist <= cars[j].carType === 'right') {\n        collisions.push(cars[i].x + cars[j].x + cars[i].y + cars[j].y)\n        collisionCount++\n      }\n    }\n  }\n  return collisions\n}\n\nconst carRaceCollision = (n) = > {\n  let cars = [];\n  for (let i = 0; i < n; i++) {\n    cars[i] = {\n      x: Math.floor(Math.random() * 1000),\n      y: Math.floor(Math.random() * 1000),\n      carType: 'left'\n    }\n  }\n  cars[0].carType = 'right'\n  for (let i = 0; i < n; i++) {\n    cars[n - 1 - i].carType = 'left'\n  }\n  let collisions = []\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      let dist = Math.sqrt(Math.pow(cars[i].x - cars[j].x, 2) + Math.pow(cars[i].y - cars[j].y, 2))\n      if (dist <= cars[i].carType === 'left' && dist <= cars[j].carType === 'right') {\n        collisions.push(cars[i].x + cars[j].x + cars[i].y + cars[j].y)\n        collisionCount++\n      }\n    }\n  }\n  return collisions\n}\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const list = [...l]\n  list.unshift(1)\n  return list\n}\n\n/**\n  * Return list with elements decremented by 1.\n  *\n  * @param {Array} l - list\n  * @returns {Array}\n  * @example\n  * /*Return list with elements decremented by 1.\n  * >>> decrList([1, 2, 3])\n  * [2, 3, 2]\n  * >>> decrList([6, 4, 6, 3, 4, 4, 10, 1, 124])\n  * [5, 4, 6, 3, 4, 4, 9, 1, 123]\n  * */\nconst decrList = (l) => {\n  const list = [...l]\n  list.pop()\n  return list\n}\n\n/**\n  * Return list with elements incremented by 1.\n  *\n  * @param {Array} l - list\n  * @returns {Array}\n  * @example\n  * /*Return list with elements incremented by 1.\n  * >>> incrList([1, 2, 3])\n  * [2, 3, 4]\n  * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  * */\nconst decrList = (l) => {\n  const list = [...l]\n  list.unshift(1)\n  return list\n}\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  if (l.length === 0) return false\n  const p = l.reduce((p, c) => {\n    if (c === 0) return p\n    return c > 0? p + [c] : p + [Math.abs(c)]\n  }, [])\n  const unique = new Set(p)\n  return p.length!== unique.size\n}\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number phone number x to base.\n   return string representation theatrical performance after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number phone number x to base.\n   return string representation theatrical performance after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n    let newBase = x + 1;\n    let newValue = x + 1;\n    let newBaseStr = '0';\n    while (newBase > base) {\n        newBaseStr += (newBase - base) % base;\n        newBase -= (newBase - base) % base;\n        newValue += 1;\n    }\n    let result = newBaseStr + newValue;\n    return result;\n}\n\n/*\n  Given a number x, and a string base, return a string representing the number x in base base.\n  base numbers are less than 10.\n  >>> changeBase(8, '8')\n  '14'\n  >>> changeBase(8, '9')\n  '10'\n  >>> changeBase(7, '9')\n  '1'\n  >>> changeBase(1, '11')\n  '1'\n  >>> changeBase(1, '12')\n  '1'\n  >>> changeBase(1, '13')\n  '1'\n  >>> changeBase(1, '14')\n  '1'\n  >>> changeBase(1, '15')\n  '1'\n  >>> changeBase(1, '16')\n  '1'\n  >>> changeBase(1, '17')\n  '1'\n  >>> changeBase(1, '18')\n  '1'\n  >>> changeBase(1, '19')\n  '1'\n  >>> changeBase(1, '20')\n  '1'\n  >>> changeBase(1, '21')\n  '1'\n  >>> changeBase(1, '22')\n  '1'\n  >>> changeBase(1, '23')\n  '1'\n  >>> changeBase(1, '24')\n  '1'\n  >>> changeBase(1, '25')\n  '1'\n  >>> changeBase(1, '26')\n  '1'\n  >>> changeBase(1, '27')\n  '1'\n  >>> changeBase(1, '28')\n  '1'\n  >>> changeBase(1, '29')\n  '1'\n  >>> changeBase(1, '30')\n  '1'\n  >>> changeBase(1, '31')\n  '1'\n  >>> changeBase(1, '32')\n  '1'\n  >>> changeBase(1, '33')\n  '1'\n  >>> changeBase(1, '34')\n  '1'\n  >>> changeBase(1, '35')\n  '1'\n  >>> changeBase(1, '36')\n  '1'\n  >>> changeBase(1, '37')\n  '1'\n  >>> changeBase(1, '38')\n  '1'\n  >>> changeBase(1, '39')\n  '1'\n  >>> changeBase(1, '40')\n  '1'\n  >>> changeBase(1, '41')\n  '1'\n  >>> changeBase(1, '42')\n  '1'\n  >>> changeBase(1, '43')\n  '1'\n  >>> changeBase(1, '44')\n  '1'\n  >>> changeBase(1, '45')\n  '1'\n  >>> changeBase(1, '46')\n  '1'\n  >>> changeBase(1, '47')\n  '1'\n  >>> changeBase(1, '48')\n  '1'\n  >>> changeBase(1, '49')\n  '1'\n  >>> changeBase(1, '50')\n  '1'\n  >>> changeBase(1, '51')\n  '1'\n  >>> changeBase(1, '52')\n  '1'\n  >>> changeBase(1, '53')\n  '1'\n  >>> changeBase(1, '54')\n  '1'\n  >>> changeBase(1, '55')\n  '1'\n  >>> changeBase(1, '56')\n  '1'\n  >>> changeBase(1, '57')\n  '1'\n  >>> changeBase(1, '58')\n  '1'\n  >>> changeBase(1, '59')\n  '1'\n  >>> changeBase(1, '60')\n  '1'\n  >>> changeBase(1, '61')\n  '1'\n  >>> changeBase(1, '62')\n  '1'\n  >>> changeBase(1, '63')\n  '1'\n  >>> changeBase(1, '64')\n  '1'\n  >>> changeBase(1, '65')\n  '1'\n  >>> changeBase(1, '66')\n  '1'\n  >>> changeBase(1, '67')\n  '1'\n  >>> changeBase(1, '68')\n  '1'\n  >>> changeBase(1, '69')\n  '1'\n  >>> changeBase(1, '70')\n  '1'\n  >>> changeBase(1, '71')\n  '1'\n  >>> changeBase(1, '72')\n  '1'\n  >>> changeBase(1, '73')\n  '1'\n  >>> changeBase(1, '74')\n  '1'\n  >>> changeBase(1, '75')\n  '1'\n  >>> changeBase(1, '76')\n  '1'\n  >>> changeBase(1, '77')\n  '1'\n  >>> changeBase(1, '78')\n  '1'\n  >>> changeBase(1, '79')\n  '1'\n  >>> changeBase(1, '80')\n  '1'\n  >>> changeBase(1, '81')\n  '1'\n  >>> changeBase(1, '82')\n  '1'\n  >>> changeBase(1, '83')\n  '1'\n  >>> changeBase(1, '84')\n  '1'\n  >>> changeBase(1, '85')\n  '1'\n  >>> changeBase(1, '86')\n  '1'\n  >>> changeBase(1, '87')\n  '1'\n  >>> changeBase(1, '88')\n  '1'\n  >>> changeBase(1, '89')\n  "}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high gamey return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high gamey return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high gamey return area for a triangle traingle\n  >>> triangleArea(5, 4)\n  21\n  */\nconst triangleArea2 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea3 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea4 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea5 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea6 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea7 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea8 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea9 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea10 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea11 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea12 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea13 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea14 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea15 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea16 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea17 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea18 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea19 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea20 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea21 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea22 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea23 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea24 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea25 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea26 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea27 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea28 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea29 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea30 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea31 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea32 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea33 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea34 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea35 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea36 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea37 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea38 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea39 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea40 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea41 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea42 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea43 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea44 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea45 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea46 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea47 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea48 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea49 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea50 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea51 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea52 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea53 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea54 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst triangleArea55 = (a"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write compose a function to efficiently compute calculate the n-th element of the fib4 number act sequence succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write compose a function to efficiently compute calculate the n-th element of the fib4 number act sequence succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if(n === 0) {\n    return 0;\n  } else if(n === 1) {\n    return 1;\n  } else {\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n  }\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  const n = sorted.length;\n  if (n % 2 === 1) {\n    return sorted[(n - 1) / 2];\n  }\n  const i = n / 2;\n  return (sorted[i - 1] + sorted[i]) / 2;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string drawstring is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if given string drawstring is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    if (text.length === 0) return true\n    return text.split('').reverse().join('') === text\n}\n\n/*\n  Calculates the length of the longest palindrome in the string\n  >>> longestPalindrome('aba')\n  3\n  >>> longestPalindrome('aaabb')\n  3\n  >>> longestPalindrome('aabbb')\n  3\n  >>> longestPalindrome('abc')\n  1\n  >>> longestPalindrome('abcd')\n  2\n  >>> longestPalindrome('ab')\n  1\n  >>> longestPalindrome('abca')\n  4\n  >>> longestPalindrome('abcd')\n  4\n  >>> longestPalindrome('abcde')\n  5\n  >>> longestPalindrome('abcdef')\n  6\n  >>> longestPalindrome('abcdefg')\n  7\n  >>> longestPalindrome('abcdefg')\n  7\n  >>> longestPalindrome('abcdefga')\n  7\n  >>> longestPalindrome('abcdefga')\n  7\n  >>> longestPalindrome('abcdefgba')\n  7\n  >>> longestPalindrome('abcdefgba')\n  7\n  >>> longestPalindrome('abcdefgab')\n  7\n  >>> longestPalindrome('abcdefgab')\n  7\n  >>> longestPalindrome('abcdefgabc')\n  7\n  >>> longestPalindrome('abcdefgabc')\n  7\n  >>> longestPalindrome('abcdefgacb')\n  7\n  >>> longestPalindrome('abcdefgacb')\n  7\n  >>> longestPalindrome('abcdefgacba')\n  7\n  >>> longestPalindrome('abcdefgacba')\n  7\n  >>> longestPalindrome('abcdefgacbab')\n  7\n  >>> longestPalindrome('abcdefgacbab')\n  7\n  >>> longestPalindrome('abcdefgacbab')\n  7\n  >>> longestPalindrome('abcdefgacbab')\n  7\n  >>> longestPalindrome('abcdefgacbab')\n  7\n  >>> longestPalindrome('abcdefgacbabc')\n  7\n  >>> longestPalindrome('abcdefgacbabc')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  >>> longestPalindrome('abcdefgacbabcd')\n  7\n  "}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": false, "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let result = n % p;\n  if (result < 0) {\n    result += p;\n  }\n  return result;\n};\n\n/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp2 = (n, p) => {\n  let result = n % p;\n  if (result < 0) {\n    result += p;\n  }\n  return result;\n};\n\n/*Return p^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp3 = (n, p) => {\n  let result = n % p;\n  if (result < 0) {\n    result += p;\n  }\n  return result;\n};\n\n/*Return p^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp4 = (n, p) => {\n  let result = n % p;\n  if (result < 0) {\n    result += p;\n  }\n  return result;\n};\n\n/*Return p^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp5 = (n, p) => {\n  let result = n % p;\n  if (result < 0) {\n    result += p;\n  }\n  return result;\n};\n\n/*Return p^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp6 = (n, p) => {\n  let result = n % p;\n  if (result < 0) {\n    result += p;\n  }\n  return result;\n};\n\n/*Return p^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp7 = (n, p) => {\n  let result = n % p;\n  if (result < 0) {\n    result += p;\n  }\n  return result;\n};\n\n/*Return p^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp8 = (n, p) => {\n  let result = n % p;\n  if (result < 0) {\n    result += p;\n  }\n  return result;\n};\n\n/*Return p^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp9 = (n, p) => {\n  let result = n % p;\n  if (result < 0) {\n    result += p;\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string drawstring by shifting every character quality by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes aim as input string bowed stringed instrument encoded with encode_shift function affair. Returns reappearance decoded decode string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string drawstring by shifting every character quality by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes aim as input string bowed stringed instrument encoded with encode_shift function affair. Returns reappearance decoded decode string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n  return decode( encodeShift(s) );\n } \n*/<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string drawstring and returns string drawstring without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string drawstring and returns string drawstring without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = ['a','e','i','o','u','A','E','I','O','U']\n  let consonants = [...text.split('')]\n  let consonantIndex = 0\n  let vowelIndex = 0\n  while (vowelIndex < consonants.length) {\n    if (vowels.includes(consonants[consonantIndex])) {\n      consonants.splice(consonantIndex, 1)\n    } else {\n      consonantIndex++\n    }\n  }\n  return consonants.join('')\n}\n\n/*\n  dictionary is a function that takes string text and returns dictionary with text as keys and the length of each word as value.\n  >>> dictionary('')\n  {}\n  >>> dictionary('abcdef')\n  {'abc': 4}\n  >>> dictionary('aaaaa')\n  {'aaa': 1}\n  >>> dictionary('aaBAA')\n  {'aB': 1}\n  >>> dictionary('zbcd')\n  {'zb': 2, 'cd': 2}\n  */\nconst dictionary = (text) => {\n  let dictionary = {}\n  let words = text.split(' ')\n  for (let word of words) {\n    dictionary[word] = word.length\n  }\n  return dictionary\n}\n\n/*\n  getWords is a function that takes string text and returns list of words.\n  >>> getWords('')\n  []\n  >>> getWords('abcdef')\n  ['abc', 'def']\n  >>> getWords('aaaaa')\n  ['aaa']\n  >>> getWords('aaBAA')\n  ['aB', 'AA']\n  >>> getWords('zbcd')\n  ['zb', 'cd']\n  */\nconst getWords = (text) => {\n  let words = []\n  let words = text.split(' ')\n  return words\n}\n\n/*\n  getSortedDictionary is a function that takes dictionary dictionary and returns dictionary sorted by length.\n  >>> getSortedDictionary({})\n  {}\n  >>> getSortedDictionary({'abc': 4})\n  {'abc': 4}\n  >>> getSortedDictionary({'zb': 2, 'cd': 2})\n  {'cd': 2, 'zb': 2}\n  */\nconst getSortedDictionary = (dictionary) => {\n  let sortedDictionary = {}\n  for (let [key, value] of dictionary.entries()) {\n    sortedDictionary[value] = key\n  }\n  return sortedDictionary\n}\n\n/*\n  countWordLength is a function that takes string text and returns number of words.\n  >>> countWordLength('')\n  0\n  >>> countWordLength('abcdef')\n  4\n  >>> countWordLength('aaaaa')\n  1\n  >>> countWordLength('aaBAA')\n  2\n  >>> countWordLength('zbcd')\n  3\n  */\nconst countWordLength = (text) => {\n  let words = getWords(text)\n  return words.length\n}\n\n/*\n  countVowelLength is a function that takes string text and returns number of vowels.\n  >>> countVowelLength('')\n  0\n  >>> countVowelLength('abcdef')\n  1\n  >>> countVowelLength('aaaaa')\n  1\n  >>> countVowelLength('aaBAA')\n  1\n  >>> countVowelLength('zbcd')\n  1\n  */\nconst countVowelLength = (text) => {\n  let vowels = ['a','e','i','o','u','A','E','I','O','U']\n  let words = getWords(text)\n  let vowelCount = 0\n  for (let word of words) {\n    if (vowels.includes(word)) {\n      vowelCount++\n    }\n  }\n  return vowelCount\n}\n\n/*\n  countConsonantLength is a function that takes string text and returns number of consonants.\n  >>> countConsonantLength('')\n  0\n  >>> countConsonantLength('abcdef')\n  3\n  >>> countConsonantLength('aaaaa')\n  2\n  >>> countConsonantLength('aaBAA')\n  2\n  >>> countConsonantLength('zbcd')\n  2\n  */\nconst countConsonantLength = (text) => {\n  let consonants = ['a','e','i','o','u','A','E','I','O','U']\n  let words = getWords(text)\n  let consonantCount = 0\n  for (let word of words) {\n    if (!consonants.includes(word)) {\n      consonantCount++\n    }\n  }\n  return consonantCount\n}\n\n/*\n  removeDuplicateLetters is a function that takes string text and returns string text without repeated letters.\n  >>> removeDuplicateLetters('')\n  ''\n  >>> removeDuplicateLetters('abcdef')\n  'abcdef'\n  >>> removeDuplicateLetters('aaBAA')\n  'aBAA'\n  >>> removeDuplicateLetters('zbcd')\n  'zbcd'\n  */\nconst removeDuplicateLetters = (text) => {\n  let words = text.split(' ')\n  let dictionary = {}\n  for (let word of words) {\n    if (dictionary[word] === undefined) {\n      dictionary[word] = 1\n    } else {\n      dictionary[word] = dictionary[word] + 1\n    }\n  }\n  return dictionary.keys().sort().join(' ')\n}\n\n/*\n  removeVowels is a function that takes string text and returns string text without vowels.\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  'aaaa'\n  >>> remove"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold brink t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l are below threshold brink t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every((n) => n <= t)\n}\n\nmodule.exports = {\n  range,\n  concat,\n  drop,\n  dropWhile,\n  dropLast,\n  dropRight,\n  dropLastWhile,\n  dropRightWhile,\n  dropRightLast,\n  dropRightLastWhile,\n  dropRightWhile,\n  dropWhile,\n  filter,\n  find,\n  findLast,\n  findLastIndex,\n  findLastIndexOf,\n  findLastIndexOfIn,\n  findLastIndexOfInR,\n  findLastIndexOfR,\n  findLastLastIndexOf,\n  findLastLastIndexOfIn,\n  findLastLastIndexOfInR,\n  findLastLastIndexOfR,\n  findLastLastIndexOfRIn,\n  findLastLastIndexOfRInR,\n  findLastLastIndexOfRInRIn,\n  findLastLastIndexOfRInRInR,\n  findLastLastIndexOfRInRInRIn,\n  findLastLastIndexOfRInRInRInR,\n  findLastLastIndexOfRInRInRInRIn,\n  findLastLastIndexOfRInRInRInRInRIn,\n  findLastLastIndexOfRInRInRInRInRInRIn,\n  findLastLastIndexOfRInRInRInRInRInRInRIn,\n  findLastLastIndexOfRInRInRInRInRInRInRInRIn,\n  findLastLastIndexOfRInRInRInRInRInRInRInRInRIn,\n  findLastLastIndexOfRInRInRInRInRInRInRInRInRInRIn,\n  findLastLastIndexOfRInRInRInRInRInRInRInRInRInRInRIn,\n  findLastLastIndexOfRInRInRInRInRInRInRInRInRInRInRInRIn,\n  findLastLastIndexOfRInRInRInRInRInRInRInRInRInRInRInRInRIn,\n  findLastLastIndexOfRInRInRInRInRInRInRInRInRInRInRInRInRInRIn,\n  findLastLastIndexOfRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRIn,\n  findLastLastIndexOfRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRIn,\n  findLastLastIndexOfRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRIn,\n  findLastLastIndexOfRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRIn,\n  findLastLastIndexOfRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRIn,\n  findLastLastIndexOfRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRIn,\n  findLastLastIndexOfRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInRInR"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\nexport default add;\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters quality.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same characters quality.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  let i = 0\n  let len0 = s0.length\n  let len1 = s1.length\n  while (i < len0 && i < len1) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  Check if two strings are anagrams.\n  >>> sameChars('eabcd', 'abcd')\n  false\n  >>> sameChars('abcd', 'abce')\n  false\n  >>> sameChars('abce', 'abcd')\n  true\n  >>> sameChars('abcd', 'abce')\n  true\n  >>> sameChars('aabbcc', 'aaabcc')\n  true\n  >>> sameChars('aabbcc', 'aabbcc')\n  true\n  >>> sameChars('aabbcc', 'bbccaa')\n  true\n  >>> sameChars('aabbcc', 'cccaa')\n  false\n  */\nconst sameAnagram = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false\n  }\n  let result = true\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      result = false\n      break\n    }\n  }\n  return result\n}\n\nexport default {\n  sameChars,\n  sameAnagram\n}\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n    if (n <= 1) return n;\n    else return fib(n - 1) + fib(n - 2);\n}\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    const stack = [];\n    for (let i = 0; i < brackets.length; i++) {\n        stack.push(brackets[i]);\n        if (stack[stack.length - 1] === '<') {\n            stack.pop();\n            if (stack[stack.length - 1]!== '>') {\n                return false;\n            }\n        }\n        else if (stack[stack.length - 1] === '>') {\n            stack.pop();\n            if (stack[stack.length - 1]!== '<') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n/*\n  find the longest string that is a prefix of all brackets in brackets.\n  if there is no such string, return null.\n\n  >>> longestPrefix(\"<>\")\n  '<>'\n  >>> longestPrefix(\"<<>\")\n  '<>'\n  >>> longestPrefix(\"<<><>\")\n  '<>'\n  >>> longestPrefix(\"<\")\n  null\n  >>> longestPrefix(\"\")\n  null\n  */\nconst longestPrefix = (brackets) => {\n    let longest = null;\n    for (let i = 0; i < brackets.length; i++) {\n        let prefix = brackets.slice(0, i + 1);\n        if (prefix === \"\") {\n            continue;\n        }\n        if (longest === null) {\n            longest = prefix;\n        }\n        else {\n            if (longest.length < prefix.length) {\n                longest = prefix;\n            }\n        }\n    }\n    return longest;\n}\n\n/*\n  find the longest string that is a suffix of all brackets in brackets.\n  if there is no such string, return null.\n\n  >>> longestSuffix(\"<>\")\n  '<>'\n  >>> longestSuffix(\"<<>\")\n  '<>'\n  >>> longestSuffix(\"<<><>\")\n  '<>'\n  >>> longestSuffix(\"<\")\n  null\n  >>> longestSuffix(\"\")\n  null\n  */\nconst longestSuffix = (brackets) => {\n    let longest = null;\n    for (let i = 0; i < brackets.length; i++) {\n        let suffix = brackets.slice(i);\n        if (suffix === \"\") {\n            continue;\n        }\n        if (longest === null) {\n            longest = suffix;\n        }\n        else {\n            if (longest.length < suffix.length) {\n                longest = suffix;\n            }\n        }\n    }\n    return longest;\n}\n\n// This is a \"cheatsheet\" for the solution\nconst correctBracketing = (brackets) => {\n    const stack = [];\n    for (let i = 0; i < brackets.length; i++) {\n        stack.push(brackets[i]);\n        if (stack[stack.length - 1] === '<') {\n            stack.pop();\n            if (stack[stack.length - 1]!== '>') {\n                return false;\n            }\n        }\n        else if (stack[stack.length - 1] === '>') {\n            stack.pop();\n            if (stack[stack.length - 1]!== '<') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nconst longestPrefix = (brackets) => {\n    let longest = null;\n    for (let i = 0; i < brackets.length; i++) {\n        let prefix = brackets.slice(0, i + 1);\n        if (prefix === \"\") {\n            continue;\n        }\n        if (longest === null) {\n            longest = prefix;\n        }\n        else {\n            if (longest.length < prefix.length) {\n                longest = prefix;\n            }\n        }\n    }\n    return longest;\n}\n\nconst longestSuffix = (brackets) => {\n    let longest = null;\n    for (let i = 0; i < brackets.length; i++) {\n        let suffix = brackets.slice(i);\n        if (suffix === \"\") {\n            continue;\n        }\n        if (longest === null) {\n            longest = suffix;\n        }\n        else {\n            if (longest.length < suffix.length) {\n                longest = suffix;\n            }\n        }\n    }\n    return longest;\n}\n\nmodule.exports = {\n    findLongest,\n    findLongestPrefix,\n    findLongestSuffix,\n    correctBracketing,\n    longestPrefix,\n    longestSuffix\n};\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n    if (!l.length) return false;\n    const p = l.slice(1);\n    const last = l[0];\n    return (l[0] <= last)? (p.every((v) => v <= last)) : (p.every((v) => v >= last));\n}\n\n// Export\nmodule.exports = monotonic;<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements element for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elements element for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const common = [];\n  const i = 0;\n  const j = 0;\n  const a = l1.length;\n  const b = l2.length;\n\n  while (i < a && j < b) {\n    if (l1[i] === l2[j]) {\n      common.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n\n  return common;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  const factors = primeFactors(n);\n  const max = Math.max(...factors);\n  return max;\n};\n\nexport default largestPrimeFactor;\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers issue from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that sums numbers issue from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconsole.log(sumToN(30));\nconsole.log(sumToN(100));\nconsole.log(sumToN(5));\nconsole.log(sumToN(10));\nconsole.log(sumToN(1));\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let closing = 0\n  let opening = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n      opening++\n    } else if (brackets[i] === ')') {\n      closing++\n    }\n  }\n\n  if (opening > closing) {\n    return false\n  } else if (opening === closing) {\n    return true\n  } else {\n    return correctBracketing(brackets.slice(closing, brackets.length))\n  }\n}\n\nmodule.exports = correctBracketing\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return restitution derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return restitution derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const derivative = [];\n  for (let i = 1; i < xs.length; i++) {\n    derivative.push(0);\n  }\n  for (let i = 1; i < xs.length; i++) {\n    derivative[i] = xs[i] * (xs[i] + 1) / 2;\n  }\n  return derivative;\n};\n\n/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return coefficient of this polynomial in the same form.\n  >>> coefficient([1, 2, 3])\n  2\n  >>> coefficient([3, 1, 2, 4, 5])\n  6\n  */\nconst coefficient = (xs) => {\n  let coefficient = 1;\n  for (let i = 0; i < xs.length; i++) {\n    coefficient *= xs[i];\n  }\n  return coefficient;\n};\n\n/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return square of this polynomial.\n  >>> square([1, 2, 3])\n  12\n  >>> square([3, 1, 2, 4, 5])\n  30\n  */\nconst square = (xs) => {\n  return xs.map((x) => x * x);\n};\n\nconst isZero = (x) => {\n  return x === 0;\n};\n\n/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return square of this polynomial.\n  >>> square([1, 2, 3])\n  12\n  >>> square([3, 1, 2, 4, 5])\n  30\n  */\nconst power = (x, n) => {\n  if (isZero(x)) {\n    return 0;\n  }\n  if (n === 1) {\n    return x;\n  }\n  return x * power(x, n - 1);\n};\n\nconst isPrime = (x) => {\n  if (x < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i * i <= x) {\n    if (x % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return square of this polynomial.\n  >>> square([1, 2, 3])\n  12\n  >>> square([3, 1, 2, 4, 5])\n  30\n  >>> isPrime(15)\n  true\n  >>> isPrime(13)\n  false\n  */\nconst factorial = (x) => {\n  if (x === 0) {\n    return 1;\n  }\n  return x * factorial(x - 1);\n};\n\n/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return square of this polynomial.\n  >>> square([1, 2, 3])\n  12\n  >>> square([3, 1, 2, 4, 5])\n  30\n  >>> isPrime(15)\n  true\n  >>> isPrime(13)\n  false\n  */\nconst sqrt = (x) => {\n  if (x === 0) {\n    return 0;\n  }\n  let a = 0;\n  let b = x;\n  while (b!== 0) {\n    a = a + b;\n    b = b / 2;\n  }\n  return a;\n};\n\nconst eulerPhi = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return n * (n + 1) / 2 * eulerPhi(n - 1);\n};\n\nconst eulerPhiPrime = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return n * eulerPhi(n - 1) / (n - 1);\n};\n\nconst primeFactors = (n) => {\n  if (n === 1) {\n    return [1];\n  }\n  let factors = [];\n  let i = 2;\n  while (i < n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\nconst isPrime = (x) => {\n  if (x === 1 || x === 2) {\n    return true;\n  }\n  let i = 2;\n  while (i < x) {\n    if (x % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst numberOfPrimeFactors = (n) => {\n  let primeFactors = primeFactors(n);\n  return primeFactors.length;\n};\n\nconst numberOfPrimes = (n) => {\n  let count = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst primeCount = (n) => {\n  let count = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst sumOfPrimes = (n) => {\n  let sum = 0;"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write compose a function to efficiently compute calculate the n-th element of the fibfib number act sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write compose a function to efficiently compute calculate the n-th element of the fibfib number act sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 1;\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\n// const fibfib = (n) => {\n//     if (n === 0) return 0;\n//     if (n === 1) return 0;\n//     if (n === 2) return 1;\n//     if (n < 0) {\n//         throw new Error('Invalid argument');\n//     }\n//     return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n// };\n\n// const fibfib = (n) => {\n//     if (n === 0) return 0;\n//     if (n === 1) return 0;\n//     if (n === 2) return 1;\n//     if (n < 0) {\n//         throw new Error('Invalid argument');\n//     }\n//     return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n// };\n\n// const fibfib = (n) => {\n//     if (n === 0) return 0;\n//     if (n === 1) return 0;\n//     if (n === 2) return 1;\n//     if (n < 0) {\n//         throw new Error('Invalid argument');\n//     }\n//     return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n// };\n\nconst fibfib = (n) => {\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 1;\n    if (n < 0) {\n        throw new Error('Invalid argument');\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\n// const fibfib = (n) => {\n//     if (n === 0) return 0;\n//     if (n === 1) return 0;\n//     if (n === 2) return 1;\n//     if (n < 0) {\n//         throw new Error('Invalid argument');\n//     }\n//     return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n// };\n\nconst fibfib = (n) => {\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 1;\n    if (n < 0) {\n        throw new Error('Invalid argument');\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 1;\n    if (n < 0) {\n        throw new Error('Invalid argument');\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 1;\n    if (n < 0) {\n        throw new Error('Invalid argument');\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 1;\n    if (n < 0) {\n        throw new Error('Invalid argument');\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 1;\n    if (n < 0) {\n        throw new Error('Invalid argument');\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 1;\n    if (n < 0) {\n        throw new Error('Invalid argument');\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 1;\n    if (n < 0) {\n        throw new Error('Invalid argument');\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 1;\n    if (n < 0) {\n        throw new Error('Invalid argument');\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string drawstring representing \n   a word parole as input and returns hark back the number of vowels in the string bowed stringed instrument. \n   Vowels in this case event are' a',' e vitamin e',' i',' o',' u uracil'. Here,' y' is also besides a \n   vowel, but only when it is at the end goal of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which takes a string drawstring representing \n   a word parole as input and returns hark back the number of vowels in the string bowed stringed instrument. \n   Vowels in this case event are' a',' e vitamin e',' i',' o',' u uracil'. Here,' y' is also besides a \n   vowel, but only when it is at the end goal of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n    const vowels = ['a', 'e', 'i', 'o', 'u']\n    let count = 0\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.indexOf(s[i]) > -1) {\n            count += 1\n        }\n    }\n    return count\n}\n\n/*Write a function consonantCount which takes a string consonants and returns a number count of consonants in the given string. \n   Here consonants are consonants' a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z and consonantCount is a function which returns the number of consonants in the given string.\n\n   Example:\n  >>> consonantCount(\"hay\")\n  1\n  >>> consonantCount(\"cacat\")\n  4\n  */\nconst consonantCount = (s) => {\n    const consonants = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    let count = 0\n    for (let i = 0; i < s.length; i++) {\n        if (consonants.indexOf(s[i]) > -1) {\n            count += 1\n        }\n    }\n    return count\n}\n\n/*Write a function allVowels which takes a string s and returns a boolean value of true if all the vowels in the given string are in the vowels array, false otherwise. \n   All vowels are 'a', 'e', 'i', 'o', 'u', 'y' here.\n\n   Example:\n  >>> allVowels(\"a\")\n  true\n  >>> allVowels(\"ab\")\n  false\n  >>> allVowels(\"ab\")\n  false\n  >>> allVowels(\"ac\")\n  false\n  */\nconst allVowels = (s) => {\n    const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.indexOf(s[i]) === -1) {\n            return false\n        }\n    }\n    return true\n}\n\n/*Write a function consonantsCount which takes a string consonants and returns a number count of consonants in the given string. \n   Here consonants are consonants' a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z and consonantCount is a function which returns the number of consonants in the given string.\n\n   Example:\n  >>> consonantCount(\"hay\")\n  1\n  >>> consonantCount(\"cacat\")\n  4\n  */\nconst consonantCount = (s) => {\n    const consonants = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    let count = 0\n    for (let i = 0; i < s.length; i++) {\n        if (consonants.indexOf(s[i]) > -1) {\n            count += 1\n        }\n    }\n    return count\n}\n\n/*Write a function allConsonants which takes a string consonants and returns a boolean value of true if all the consonants in the given string are in the consonants array, false otherwise. \n   All consonants are consonants' a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z here.\n\n   Example:\n  >>> allConsonants(\"a\")\n  true\n  >>> allConsonants(\"ab\")\n  false\n  >>> allConsonants(\"ab\")\n  false\n  >>> allConsonants(\"ac\")\n  false\n  */\nconst allConsonants = (s) => {\n    const consonants = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for (let i = 0; i < s.length; i++) {\n        if (consonants.indexOf(s[i]) === -1) {\n            return false\n        }\n    }\n    return true\n}\n\n/*Write a function consonantsCount which takes a string consonants and returns a number count of consonants in the given string. \n   Here consonants are consonants' a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z here.\n\n   Example:\n  >>> consonantCount(\"hay\")\n  1\n  >>> consonantCount(\"cacat\")\n  4\n  */\nconst consonantCount = (s) => {\n    const consonants = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', '"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right proper by shift\n   and return the result as a string drawstring. \n   If shift > number of digits finger, return digits reversed change by reversal.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right proper by shift\n   and return the result as a string drawstring. \n   If shift > number of digits finger, return digits reversed change by reversal.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n    let n = x.toString().length;\n    let s = x.toString().split('').reverse();\n    if (n > shift) {\n        return s.reverse().join('');\n    } else {\n        return s.slice(0, n - shift).reverse().join('');\n    }\n}\n\nconst isPalindrome = (n) => {\n    let rev = circularShift(n, 1);\n    return n === rev;\n}\n\nconst isPalindromePrime = (n) => {\n    let i = 1;\n    let iPrime = 2;\n    let c = 0;\n    while (i < n) {\n        if (n % iPrime === 0) {\n            c++;\n        }\n        iPrime += 1;\n    }\n    return c % 2 === 0;\n}\n\nconst factorial = (n) => {\n    return (Math.pow(2, n) - 1) / (Math.pow(2, n - 1) - 1);\n}\n\n/*\n  >>> isPalindrome(12)\n  true\n  >>> isPalindrome(13)\n  false\n  >>> isPalindrome(14)\n  true\n  >>> isPalindrome(15)\n  false\n  >>> isPalindrome(16)\n  true\n  >>> isPalindrome(17)\n  false\n  >>> isPalindrome(18)\n  true\n  >>> isPalindrome(19)\n  false\n  >>> isPalindrome(20)\n  true\n  >>> isPalindrome(21)\n  false\n  >>> isPalindrome(22)\n  true\n  >>> isPalindrome(23)\n  false\n  >>> isPalindrome(24)\n  true\n  >>> isPalindrome(25)\n  false\n  >>> isPalindrome(26)\n  true\n  >>> isPalindrome(27)\n  false\n  >>> isPalindrome(28)\n  true\n  >>> isPalindrome(29)\n  false\n  >>> isPalindrome(30)\n  true\n  >>> isPalindrome(31)\n  false\n  >>> isPalindrome(32)\n  true\n  >>> isPalindrome(33)\n  false\n  >>> isPalindrome(34)\n  true\n  >>> isPalindrome(35)\n  false\n  >>> isPalindrome(36)\n  true\n  >>> isPalindrome(37)\n  false\n  >>> isPalindrome(38)\n  true\n  >>> isPalindrome(39)\n  false\n  >>> isPalindrome(40)\n  true\n  >>> isPalindrome(41)\n  false\n  >>> isPalindrome(42)\n  true\n  >>> isPalindrome(43)\n  false\n  >>> isPalindrome(44)\n  true\n  >>> isPalindrome(45)\n  false\n  >>> isPalindrome(46)\n  true\n  >>> isPalindrome(47)\n  false\n  >>> isPalindrome(48)\n  true\n  >>> isPalindrome(49)\n  false\n  >>> isPalindrome(50)\n  true\n  >>> isPalindrome(51)\n  false\n  >>> isPalindrome(52)\n  true\n  >>> isPalindrome(53)\n  false\n  >>> isPalindrome(54)\n  true\n  >>> isPalindrome(55)\n  false\n  >>> isPalindrome(56)\n  true\n  >>> isPalindrome(57)\n  false\n  >>> isPalindrome(58)\n  true\n  >>> isPalindrome(59)\n  false\n  >>> isPalindrome(60)\n  true\n  >>> isPalindrome(61)\n  false\n  >>> isPalindrome(62)\n  true\n  >>> isPalindrome(63)\n  false\n  >>> isPalindrome(64)\n  true\n  >>> isPalindrome(65)\n  false\n  >>> isPalindrome(66)\n  true\n  >>> isPalindrome(67)\n  false\n  >>> isPalindrome(68)\n  true\n  >>> isPalindrome(69)\n  false\n  >>> isPalindrome(70)\n  true\n  >>> isPalindrome(71)\n  false\n  >>> isPalindrome(72)\n  true\n  >>> isPalindrome(73)\n  false\n  >>> isPalindrome(74)\n  true\n  >>> isPalindrome(75)\n  false\n  >>> isPalindrome(76)\n  true\n  >>> isPalindrome(77)\n  false\n  >>> isPalindrome(78)\n  true\n  >>> isPalindrome(79)\n  false\n  >>> isPalindrome(80)\n  true\n  >>> isPalindrome(81)\n  false\n  >>> isPalindrome(82)\n  true\n  >>> isPalindrome(83)\n  false\n  >>> isPalindrome(84)\n  true\n  >>> isPalindrome(85)\n  false\n  >>> isPalindrome(86)\n  true\n  >>> isPalindrome(87)\n  false\n  >>> isPalindrome(88)\n  true\n  >>> isPalindrome(89)\n  false\n  >>> isPalindrome(90)\n  true\n  >>> isPalindrome(91)\n  false\n  >>> isPalindrome(92)\n  true\n  >>> isPalindrome(93)\n  false\n  >>> isPalindrome(94)\n  true\n  >>> isPalindrome(95)\n  false\n  >>> isPalindrome(96)\n  true\n  >>> isPalindrome(97)\n  false\n  >>> isPalindrome(98)\n  true\n  >>> isPalindrome(99)\n  false\n  >>> isPalindrome(100)\n  true\n  >>> isPalindrome(101)\n  false\n  >>> isPalindrome(102)\n  true\n  >>> isPalindrome(103)\n  false\n  >>>"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function routine that takes a string drawstring as input and returns hark back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   Write a function routine that takes a string drawstring as input and returns hark back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n    const result = 0;\n    for (let i = 0; i < s.length; i++) {\n        const char = s.charAt(i);\n        result += char.charCodeAt(0);\n    }\n    return result;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string drawstring that represents a number phone number of apples and oranges orange \n   that are distributed in a basket of fruit yield this basket contains \n   apples apple, oranges orange, and mango fruits. Given the string bowed stringed instrument that represents represent the total number of \n   the oranges and apples apple and an integer that represent act the total full number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a string drawstring that represents a number phone number of apples and oranges orange \n   that are distributed in a basket of fruit yield this basket contains \n   apples apple, oranges orange, and mango fruits. Given the string bowed stringed instrument that represents represent the total number of \n   the oranges and apples apple and an integer that represent act the total full number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n    // Complete this function\n    let sum = 0\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < s.length; j++) {\n            if (s[j] === \"apple\") {\n                sum += i\n            }\n        }\n    }\n    return sum\n}\n*/\n\nconst fruitDistribution = (s, n) => {\n    let sum = 0\n    let count = 0\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < s.length; j++) {\n            if (s[j] === \"apple\") {\n                sum += i\n            }\n        }\n    }\n    return sum\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges orange \", 19))\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3))\nconsole.log(fruitDistribution(\"2 apples apple and 3 oranges orange \", 100))\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120))<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch arm of a tree that has non - negative integer nodes lymph node \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node lymph node with the smallest even tied value. \n   If multiple nodes node with the same smallest even value are found determine return the node lymph node that has smallest index. \n\n   The plucked node should be returned fall in a list, [ smalest_value, its index exponent ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" Given an array representing a branch arm of a tree that has non - negative integer nodes lymph node \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node lymph node with the smallest even tied value. \n   If multiple nodes node with the same smallest even value are found determine return the node lymph node that has smallest index. \n\n   The plucked node should be returned fall in a list, [ smalest_value, its index exponent ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const even = (x) => x % 2 === 0;\n  let min = Number.MAX_SAFE_INTEGER;\n  let minIdx = -1;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (even(arr[i])) {\n      if (arr[i] < min) {\n        min = arr[i];\n        minIdx = i;\n      }\n    }\n    if (arr[i] === min) {\n      index = i;\n    }\n  }\n  return [min, index];\n}\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of positive integers integer. Return the greatest bang-up integer that is greater than \n   zero, and has a frequency greater capital than or equal to the value of the integer itself. \n   The frequency of an integer is the number numeral of times it appears appear in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non - empty list of positive integers integer. Return the greatest bang-up integer that is greater than \n   zero, and has a frequency greater capital than or equal to the value of the integer itself. \n   The frequency of an integer is the number numeral of times it appears appear in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const [head, tail] = lst.sort().reverse()\n  let max = 0\n  for (let i = 0; i < tail.length; i++) {\n    max = Math.max(max, tail[i])\n  }\n  return Math.max(head || 0, max)\n}\n\nconst test = (answer, test) => {\n  console.log(`Test #${test} passed. The answer is ${answer}.`)\n}\n\n//Tests\ntest(search([4, 1, 2, 2, 3, 1]), 2)\ntest(search([1, 2, 2, 3, 3, 3, 4, 4, 4]), 3)\ntest(search([5, 5, 4, 4, 4]), -1)\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange foreign order. \n   Strange foreign sorting, is when you start begin with the minimum value, \n   then maximum utmost of the remaining integers integer, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange foreign order. \n   Strange foreign sorting, is when you start begin with the minimum value, \n   then maximum utmost of the remaining integers integer, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const list = [...lst];\n\n  if (!list.length) {\n    return [];\n  }\n\n  const max = list[0];\n  const min = list[list.length - 1];\n  const half = Math.floor(list.length / 2);\n\n  const sorted = [...list.slice(0, half)];\n\n  sorted.push(max);\n\n  for (let i = half; i < list.length; i++) {\n    if (list[i] > max) {\n      sorted.push(list[i]);\n    } else if (list[i] < min) {\n      sorted.push(list[i]);\n    } else if (list[i] > max) {\n      sorted.push(list[i]);\n    } else {\n      sorted.push(min);\n    }\n  }\n\n  return sorted;\n};\n\nconsole.log(strangeSortList([1, 2, 3, 4]));\nconsole.log(strangeSortList([5, 5, 5, 5]));\nconsole.log(strangeSortList([]));\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides side of a triangle. Return reelect the area of \n   the triangle rounded round to 2 decimal points if the three sides slope form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides side of a triangle. Return reelect the area of \n   the triangle rounded round to 2 decimal points if the three sides slope form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  return ((Math.pow(b, 2) - Math.pow(a, 2) - Math.pow(c, 2)) / 2).toFixed(2);\n}\n\n/*\n  Given the lengths of the three sides side of a triangle. Return the perimeter of \n   the triangle rounded round to 2 decimal points if the three sides slope form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side.\n  Example:\n  trianglePerimeter(3, 4, 5) == 11.00\n  trianglePerimeter(1, 2, 10) == -1\n  */\nconst trianglePerimeter = (a, b, c) => {\n  return ((Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(a, 2)) / 2).toFixed(2);\n}\n\n/*\n  Given the lengths of the three sides side of a triangle. Return the area of \n   the triangle rounded round to 2 decimal points if the three sides slope form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  return ((Math.pow(b, 2) - Math.pow(a, 2) - Math.pow(c, 2)) / 2).toFixed(2);\n}\n\n//Tests\nconst triangleArea = (a, b, c) => {\n  return ((Math.pow(b, 2) - Math.pow(a, 2) - Math.pow(c, 2)) / 2).toFixed(2);\n}\n\nconst triangleArea = (a, b, c) => {\n  return ((Math.pow(b, 2) - Math.pow(a, 2) - Math.pow(c, 2)) / 2).toFixed(2);\n}\n\nconst triangleArea = (a, b, c) => {\n  return ((Math.pow(b, 2) - Math.pow(a, 2) - Math.pow(c, 2)) / 2).toFixed(2);\n}\n\nconst triangleArea = (a, b, c) => {\n  return ((Math.pow(b, 2) - Math.pow(a, 2) - Math.pow(c, 2)) / 2).toFixed(2);\n}\n\nconst triangleArea = (a, b, c) => {\n  return ((Math.pow(b, 2) - Math.pow(a, 2) - Math.pow(c, 2)) / 2).toFixed(2);\n}\n\nconst triangleArea = (a, b, c) => {\n  return ((Math.pow(b, 2) - Math.pow(a, 2) - Math.pow(c, 2)) / 2).toFixed(2);\n}\n\nconst triangleArea = (a, b, c) => {\n  return ((Math.pow(b, 2) - Math.pow(a, 2) - Math.pow(c, 2)) / 2).toFixed(2);\n}\n\nconst triangleArea = (a, b, c) => {\n  return ((Math.pow(b, 2) - Math.pow(a, 2) - Math.pow(c, 2)) / 2).toFixed(2);\n}\n\nconst triangleArea = (a, b, c) => {\n  return ((Math.pow(b, 2) - Math.pow(a, 2) - Math.pow(c, 2)) / 2).toFixed(2);\n}\n\nconst triangleArea = (a, b, c) => {\n  return ((Math.pow(b, 2) - Math.pow(a, 2) - Math.pow(c, 2)) / 2).toFixed(2);\n}\n\nconst triangleArea = (a, b, c) => {\n  return ((Math.pow(b, 2) - Math.pow(a, 2) - Math.pow(c, 2)) / 2).toFixed(2);\n}\n\nconst triangleArea = (a, b, c) => {\n  return ((Math.pow(b, 2) - Math.pow(a, 2) - Math.pow(c, 2)) / 2).toFixed(2);\n}\n\nconst triangleArea = (a, b, c) => {\n  return ((Math.pow(b, 2) - Math.pow(a, 2) - Math.pow(c, 2)) / 2).toFixed(2);\n}\n\nconst triangleArea = (a, b, c) => {\n  return ((Math.pow(b, 2) - Math.pow(a, 2) - Math.pow(c, 2)) / 2).toFixed(2);\n}\n\nconst triangleArea = (a, b, c) => {\n  return ((Math.pow(b, 2) - Math.pow(a, 2) - Math.pow(c, 2)) / 2).toFixed(2);\n}\n\nconst triangleArea = (a, b, c) => {\n  return ((Math.pow(b, 2) - Math.pow(a, 2) - Math.pow(c, 2)) / 2).toFixed(2);\n}\n\nconst triangleArea = (a, b, c) => {\n  return ((Math.pow(b, 2) - Math.pow(a, 2) - Math.pow(c, 2)) / 2).toFixed(2);\n}\n\nconst triangleArea = (a,"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns come back true if the object aim q will fly, and false fake otherwise. \n   The object aim q will fly if it's balanced (it is a palindromic list) and the sum union of its elements component is less than or equal the maximum maximal possible potential weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns come back true if the object aim q will fly, and false fake otherwise. \n   The object aim q will fly if it's balanced (it is a palindromic list) and the sum union of its elements component is less than or equal the maximum maximal possible potential weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let pal = isPalindrome(q)\n  let sum = 0\n  q.forEach(x => { sum += x })\n  return sum <= w\n}\n\nexport default willItFly\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find discover the minimum number phone number of elements that \n   need want to be changed to make create the array palindromic. A palindromic array is an array that \n   is read the same backwards backward and forwards ahead. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find discover the minimum number phone number of elements that \n   need want to be changed to make create the array palindromic. A palindromic array is an array that \n   is read the same backwards backward and forwards ahead. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n    let i = 0;\n    let j = arr.length - 1;\n    let min = arr[i];\n    let change = 0;\n    while (i < j) {\n        while (arr[i] < min) {\n            min = arr[i];\n            i++;\n        }\n        while (arr[j] > min) {\n            min = arr[j];\n            j--;\n        }\n        if (arr[i] == arr[j]) {\n            change++;\n            i++;\n            j--;\n        }\n    }\n    return change;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 2, 3, 4, 3, 2, 2, 3, 4, 3, 2, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts accept two lists of strings chain and returns the list that has \n   total entire number of chars char in the all strings of the list less than the other list.\n\n   if the two lists tilt have the same number numeral of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts accept two lists of strings chain and returns the list that has \n   total entire number of chars char in the all strings of the list less than the other list.\n\n   if the two lists tilt have the same number numeral of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (!lst1 ||!lst2) return []\n  if (lst1.length === lst2.length) return lst1\n  if (lst1.length === 1) return lst2.filter(v => lst1[0] === v)\n  if (lst2.length === 1) return lst1.filter(v => lst2[0] === v)\n  return lst1.reduce((a, b) => {\n    if (a.length > b.length) return b\n    if (a.length === b.length) return b.find(v => a.includes(v))\n    return a\n  }, [])\n}\n\nconst lst = [\n  [4, 1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 5, 6, 7]\n]\n\nconsole.log(totalMatch(lst[0], lst[1]))\nconsole.log(totalMatch(lst[0], lst[2]))\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true on-key if the given number phone number is the multiplication of 3 prime choice numbers \n   and false fake otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns true on-key if the given number phone number is the multiplication of 3 prime choice numbers \n   and false fake otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const primes = getPrimes()\n  const i = parseInt(a)\n  let k = 1\n  let n = 1\n  let result = 0\n  let prime\n  while (prime = primes[k]) {\n    while (prime <= Math.sqrt(n) && n <= Math.pow(2, prime)) {\n      n *= prime\n      result += 1\n    }\n    k += 1\n  }\n  return (i === result)\n}\n\nconst getPrimes = () => {\n  let primes = []\n  for (let i = 2; i < Math.pow(2, 100); i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconst isPrime = (a) => {\n  let i = 2\n  while (i < a) {\n    if (a % i === 0) {\n      return false\n    }\n    i += 1\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function routine that returns true on-key if a number x is a simple bare \n   power of n and false in other cases casing. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function routine that returns true on-key if a number x is a simple bare \n   power of n and false in other cases casing. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n    if (x < 1 || x % 1!== 0 || n < 1) {\n        return false;\n    }\n    return x === (n * (n - 1)) / 2;\n}\n\nconsole.log(isSimplePower(4, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes claim an integer a and returns true on-key \n   if this ingeger is a cube of some integer number act. \n   Note: you may assume simulate the input is always constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes claim an integer a and returns true on-key \n   if this ingeger is a cube of some integer number act. \n   Note: you may assume simulate the input is always constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  // console.log(`${a} is cube`)\n  let i = 0\n  let isValid = true\n  while (isValid && i < a) {\n    let cube = (a * a * a)\n    if (cube > a) {\n      isValid = false\n    }\n    i++\n  }\n  return isValid\n}\n\nconst getCube = (a) => {\n  let cube = a * a * a\n  return cube\n}\n\nconst isCube = (a) => {\n  let isCube = false\n  if (a > 0) {\n    let cube = getCube(a)\n    if (cube === a) {\n      isCube = true\n    }\n  }\n  return isCube\n}\n\nmodule.exports = { iscube, isCube }\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function routine that receives \n   a hexadecimal number phone number as a string and counts count the number of hexadecimal \n   digits finger that are primes (prime number=== or a prime=== is a natural lifelike number numeral \n   greater than 1 that is not a product of two smaller belittled natural lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So thus you have to determine decide a number of the following succeed digits finger: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note bill: you may assume the input stimulation is always constantly correct or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a function routine that receives \n   a hexadecimal number phone number as a string and counts count the number of hexadecimal \n   digits finger that are primes (prime number=== or a prime=== is a natural lifelike number numeral \n   greater than 1 that is not a product of two smaller belittled natural lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So thus you have to determine decide a number of the following succeed digits finger: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note bill: you may assume the input stimulation is always constantly correct or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n    let ret = 0;\n    if (num.length === 0) {\n        return ret;\n    }\n    for (let i = 0; i < num.length; i++) {\n        let s = num[i];\n        if (s === \"A\" || s === \"B\" || s === \"C\" || s === \"D\" || s === \"E\" || s === \"F\") {\n            ret += 2;\n        } else if (s === \"2\" || s === \"3\" || s === \"5\" || s === \"7\" || s === \"B\") {\n            ret += 1;\n        } else if (s === \"0\" || s === \"1\" || s === \"4\" || s === \"6\") {\n            ret += 0;\n        } else {\n            return 0;\n        }\n    }\n    return ret;\n};\n\nconst checkPrime = (num) => {\n    let ret = false;\n    if (num > 1) {\n        for (let i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i === 0) {\n                ret = false;\n            }\n        }\n        if (ret) {\n            ret = true;\n        }\n    } else {\n        ret = false;\n    }\n    return ret;\n};\n\nconst getPrimes = (num) => {\n    let ret = [];\n    for (let i = 2; i <= num; i++) {\n        if (checkPrime(i)) {\n            ret.push(i);\n        }\n    }\n    return ret;\n};\n\nconst getPrimeFingers = (num) => {\n    let ret = [];\n    let primes = getPrimes(num);\n    for (let i = 0; i < primes.length; i++) {\n        let finger = hexKey(primes[i].toString());\n        if (finger === 11 || finger === 13) {\n            ret.push(primes[i]);\n        }\n    }\n    return ret;\n};\n\nconsole.log(getPrimeFingers(\"ABED1A33\"));<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form shape and your task is to convert change it to \n   binary format. The function should return a string bowed stringed instrument, with each character representing present a binary \n   number. Each character fictional character in the string chain will be' 0' or' 1'. \n\n   There will be an extra excess couple of characters fictional character' db' at the beginning and at the end goal of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal form shape and your task is to convert change it to \n   binary format. The function should return a string bowed stringed instrument, with each character representing present a binary \n   number. Each character fictional character in the string chain will be' 0' or' 1'. \n\n   There will be an extra excess couple of characters fictional character' db' at the beginning and at the end goal of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const extra = new Array(10);\n  let binary = '0b';\n  while (decimal > 0) {\n    let digit = decimal % 2;\n    decimal = Math.floor(decimal / 2);\n    binary = `${extra[digit]}${binary}`;\n  }\n  return `${binary}db`;\n};\n\n// console.log(decimalToBinary(15));\n// console.log(decimalToBinary(32));\n\n// function decimalToBinary(decimal) {\n//   const extra = new Array(10);\n//   let binary = '0b';\n//   while (decimal > 0) {\n//     let digit = decimal % 2;\n//     decimal = Math.floor(decimal / 2);\n//     binary = `${extra[digit]}${binary}`;\n//   }\n//   return `${binary}db`;\n// }\n\nconst decimalToBinary = (decimal) => {\n  const extra = new Array(10);\n  let binary = '0b';\n  while (decimal > 0) {\n    let digit = decimal % 2;\n    decimal = Math.floor(decimal / 2);\n    binary = `${digit}${binary}`;\n  }\n  return `${binary}db`;\n};\n\nconst decimalToBinary = (decimal) => {\n  const extra = new Array(10);\n  let binary = '0b';\n  while (decimal > 0) {\n    let digit = decimal % 2;\n    decimal = Math.floor(decimal / 2);\n    binary = `${extra[digit]}${binary}`;\n  }\n  return `${binary}db`;\n};\n\nconst decimalToBinary = (decimal) => {\n  const extra = new Array(10);\n  let binary = '0b';\n  while (decimal > 0) {\n    let digit = decimal % 2;\n    decimal = Math.floor(decimal / 2);\n    binary = `${extra[digit]}${binary}`;\n  }\n  return `${binary}db`;\n};\n\nconst decimalToBinary = (decimal) => {\n  const extra = new Array(10);\n  let binary = '0b';\n  while (decimal > 0) {\n    let digit = decimal % 2;\n    decimal = Math.floor(decimal / 2);\n    binary = `${extra[digit]}${binary}`;\n  }\n  return `${binary}db`;\n};\n\nconst decimalToBinary = (decimal) => {\n  const extra = new Array(10);\n  let binary = '0b';\n  while (decimal > 0) {\n    let digit = decimal % 2;\n    decimal = Math.floor(decimal / 2);\n    binary = `${extra[digit]}${binary}`;\n  }\n  return `${binary}db`;\n};\n\nconst decimalToBinary = (decimal) => {\n  const extra = new Array(10);\n  let binary = '0b';\n  while (decimal > 0) {\n    let digit = decimal % 2;\n    decimal = Math.floor(decimal / 2);\n    binary = `${extra[digit]}${binary}`;\n  }\n  return `${binary}db`;\n};\n\nconst decimalToBinary = (decimal) => {\n  const extra = new Array(10);\n  let binary = '0b';\n  while (decimal > 0) {\n    let digit = decimal % 2;\n    decimal = Math.floor(decimal / 2);\n    binary = `${extra[digit]}${binary}`;\n  }\n  return `${binary}db`;\n};\n\nconst decimalToBinary = (decimal) => {\n  const extra = new Array(10);\n  let binary = '0b';\n  while (decimal > 0) {\n    let digit = decimal % 2;\n    decimal = Math.floor(decimal / 2);\n    binary = `${extra[digit]}${binary}`;\n  }\n  return `${binary}db`;\n};\n\nconst decimalToBinary = (decimal) => {\n  const extra = new Array(10);\n  let binary = '0b';\n  while (decimal > 0) {\n    let digit = decimal % 2;\n    decimal = Math.floor(decimal / 2);\n    binary = `${extra[digit]}${binary}`;\n  }\n  return `${binary}db`;\n};\n\nconst decimalToBinary = (decimal) => {\n  const extra = new Array(10);\n  let binary = '0b';\n  while (decimal > 0) {\n    let digit = decimal % 2;\n    decimal = Math.floor(decimal / 2);\n    binary = `${extra[digit]}${binary}`;\n  }\n  return `${binary}db`;\n};\n\nconst decimalToBinary = (decimal) => {\n  const extra = new Array(10);\n  let binary = '0b';\n  while (decimal > 0) {\n    let digit = decimal % 2;\n    decimal = Math.floor(decimal / 2);\n    binary = `${extra[digit]}${binary}`;\n  }\n  return `${binary}db`;\n};\n\nconst decimalToBinary = (decimal) => {\n  const extra = new Array(10);\n  let binary = '0b';\n  while (decimal > 0) {\n    let digit = decimal % 2;\n    decimal = Math.floor(decimal / 2);\n    binary = `${extra[digit]}${binary}`;\n  }\n  return `${binary}db`;\n};\n\nconst decimal"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task undertaking is to check if the string drawstring is happy or not. \n   A string bowed stringed instrument is happy if its length distance is at least 3 and every 3 consecutive letters letter are distinct discrete\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   Your task undertaking is to check if the string drawstring is happy or not. \n   A string bowed stringed instrument is happy if its length distance is at least 3 and every 3 consecutive letters letter are distinct discrete\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const num = new Map()\n  let sum = 0\n  for (let i = 0; i < len; i += 1) {\n    const char = s[i]\n    const numStr = char.charCodeAt(0)\n    if (num.has(numStr)) {\n      num.delete(numStr)\n      sum -= numStr\n    } else {\n      num.set(numStr, 1)\n      sum += numStr\n    }\n  }\n  return sum >= 3 && num.size === 0\n}\n\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('xyy'))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give grant the grades\n   to students. The teacher has been making produce her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used practice for grading. \n   She has given sacrifice you a list of GPAs for some students and you have to write \n   a function affair that can output a list of letter grades using the following table mesa: \n            GPA        |     Letter grade degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester and the teacher has to give grant the grades\n   to students. The teacher has been making produce her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used practice for grading. \n   She has given sacrifice you a list of GPAs for some students and you have to write \n   a function affair that can output a list of letter grades using the following table mesa: \n            GPA        |     Letter grade degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  if(!grades) {\n    return [];\n  }\n\n  const max = grades.reduce((a, b) => a > b? a : b);\n  const min = grades.reduce((a, b) => a < b? a : b);\n  let letterGradeDegree = (max - min) / 5;\n  if (max - min < 5) {\n    let finalGrade = min + letterGradeDegree;\n    return [finalGrade];\n  }\n\n  let finalGrade = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  let maxIndex = grades.length - 1;\n  let minIndex = 0;\n  let i = 0;\n  let j = 0;\n\n  while (i <= maxIndex) {\n    while (j <= maxIndex && grades[j] < finalGrade[j]) {\n      j += 1;\n    }\n\n    if (j < maxIndex) {\n      finalGrade[j] = grades[j];\n      j += 1;\n    }\n    else {\n      finalGrade[j] = grades[j];\n    }\n\n    i += 1;\n  }\n\n  for (i = 0; i < grades.length; i += 1) {\n    finalGrade[i] = finalGrade[i] > grades[i]? finalGrade[i] : grades[i];\n  }\n\n  return finalGrade;\n};\n\nmodule.exports = numericalLetterGrade;<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns come back true if the string\n   length duration is a prime number act or false otherwise differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a string and returns come back true if the string\n   length duration is a prime number act or false otherwise differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const chars = '0123456789'\n  let total = 0\n  const checkPrime = (num) => {\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) {\n        return false\n      }\n    }\n    return true\n  }\n\n  for (let i = 0; i < string.length; i++) {\n    total += chars.indexOf(string[i])\n  }\n  if (total % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i < Math.sqrt(total); i += 2) {\n    if (checkPrime(total) === false) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(primeLength('Hello'))\nconsole.log(primeLength('abcdcba'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('orange'))\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers issue of n-digit\n   positive integers integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers issue of n-digit\n   positive integers integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n  const MAX = 10;\n  const MAX_N = 10;\n  const MIN_N = 2;\n  const MAX_POWER = 10;\n  const MIN_POWER = 2;\n  const startN = (MAX - MIN_N + 1) / (MAX_N - MIN_N) + 1;\n  const endN = MAX / (MAX_N - MIN_N) + 1;\n  const startPower = (MAX_POWER - MIN_POWER + 1) / (MAX_POWER - MIN_POWER) + 1;\n  const endPower = MAX / (MAX_POWER - MIN_POWER) + 1;\n  const isPower = (i) = > {\n    return (i == startPower || i == endPower);\n  };\n  const isOne = (i) = > {\n    return (i == 1 || i == MAX);\n  };\n  const isPositive = (i) = > {\n    return (i > 0);\n  };\n  const isNegative = (i) = > {\n    return (i < 0);\n  };\n  const isPositiveOrZero = (i) = > {\n    return (i > 0 || i == 0);\n  };\n  const isNegativeOrZero = (i) = > {\n    return (i < 0 || i == 0);\n  };\n  const isPositiveOrNegative = (i) = > {\n    return (i > 0 && i < 0);\n  };\n  const isNegativeOrPositive = (i) = > {\n    return (i < 0 && i > 0);\n  };\n  const isPositiveOrNegativeOrZero = (i) = > {\n    return (i > 0 || i < 0 || i == 0);\n  };\n  const isNegativeOrPositiveOrZero = (i) = > {\n    return (i < 0 || i > 0 || i == 0);\n  };\n  const isPositiveOrNegativeOrZeroOrOne = (i) = > {\n    return (i > 0 || i < 0 || i == 0 || i == 1);\n  };\n  const isNegativeOrPositiveOrZeroOrOne = (i) = > {\n    return (i < 0 || i > 0 || i == 0 || i == 1);\n  };\n  const isNegativeOrZero = (i) = > {\n    return (i < 0 || i == 0);\n  };\n  const isZero = (i) = > {\n    return (i == 0);\n  };\n  const isOne = (i) = > {\n    return (i == 1);\n  };\n  const isEven = (i) = > {\n    return (i % 2 == 0);\n  };\n  const isOdd = (i) = > {\n    return (i % 2!= 0);\n  };\n  const isEvenOrOdd = (i) = > {\n    return (i % 2 == 0 || i % 2!= 0);\n  };\n  const isPositiveOrZero = (i) = > {\n    return (i > 0 || i == 0);\n  };\n  const isNegativeOrZero = (i) = > {\n    return (i < 0 || i == 0);\n  };\n  const isPositiveOrNegative = (i) = > {\n    return (i > 0 && i < 0);\n  };\n  const isNegativeOrPositive = (i) = > {\n    return (i < 0 && i > 0);\n  };\n  const isPositiveOrNegativeOrZero = (i) = > {\n    return (i > 0 || i < 0 || i == 0);\n  };\n  const isNegativeOrPositiveOrZero = (i) = > {\n    return (i < 0 || i > 0 || i == 0);\n  };\n  const isPositiveOrNegativeOrZeroOrOne = (i) = > {\n    return (i > 0 || i < 0 || i == 0 || i == 1);\n  };\n  const isNegativeOrPositiveOrZeroOrOne = (i) = > {\n    return (i < 0 || i > 0 || i == 0 || i == 1);\n  };\n  const isNegativeOrZeroOrOne = (i) = > {\n    return (i < 0 || i == 0 || i == 1);\n  };\n  const isZeroOrOne = (i) = > {\n    return (i == 0 || i == 1);\n  };\n  const isPositiveOrOne = (i) = > {\n    return (i > 0 || i == 1);\n  };\n  const isNegativeOrOne = (i) = > {\n    return (i < 0 || i == 1);\n  };\n  const isPositiveOrNegativeOrOne = (i) = > {\n    return (i > 0 && i < 0 || i == 1);\n  };\n  const isNegativeOrPositiveOrOne = (i) = > {\n    return (i < 0 && i > 0 || i == 1);\n  };\n  const isNegativeOrZeroOrOne = (i) = > {\n    return (i < 0 || i == 0 || i == 1);\n  };\n  const isNegativeOrPositiveOrZeroOrOne = (i) = > {\n    return (i < 0 || i > 0 || i == 0 || i == 1);\n  };\n  const isNegativeOrZeroOrOne = (i) = > {\n    return (i < 0 || i == 0 || i == 1);\n  };\n  const isZeroOrOne = (i) = > {\n    return (i == 0 || i == 1);\n  };\n  const isNegativeOrOne = (i) = > {\n    return (i < 0 || i == 1);\n  };\n  const isPositiveOrOne = (i) = > {\n    return (i > 0 || i == 1);\n  };\n  const isPositiveOrNegativeOrOne = (i) = > {\n    return (i > 0 && i < 0 || i == 1);\n  };\n  const isNegativeOrPositiveOrOne = (i) = > {\n    return (i < 0 && i > 0 || i == 1);\n  };\n  const isPositiveOrNegativeOrZeroOrOne = (i) = > {\n    return (i > 0 || i <"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const result = [];\n  for (let i = N; i > 0; i--) {\n    let r = 0;\n    for (let j = N; j > i; j--) {\n      r += parseInt(String(j).charAt(i - 1));\n    }\n    result.push(r);\n  }\n  let sum = 0;\n  for (let i = 0; i < result.length; i++) {\n    sum += result[i];\n  }\n  return sum;\n};\n\nmodule.exports = solve;<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers lst. add the even elements element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integers lst. add the even elements element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n\n/*Given a non - empty list of integers lst. remove the element at index i and return the resulting non - empty list.*/\nconst remove = (lst, i) => {\n    let result = [];\n    for (let j = 0; j < lst.length; j++) {\n        if (j!== i) {\n            result.push(lst[j]);\n        }\n    }\n    return result;\n}\n\n/*Given a non - empty list of integers lst. remove the even elements element that are at odd indices index..\n\n\n  Examples:\n      remove([4, 2, 6, 7], 2) ==> [6, 7]\n  */\nconst removeEven = (lst, i) => {\n    let result = [];\n    for (let j = 0; j < lst.length; j++) {\n        if (j!== i && j % 2 === 0) {\n            result.push(lst[j]);\n        }\n    }\n    return result;\n}\n\n/*Given a non - empty list of integers lst. remove the element at index i and return the resulting non - empty list.*/\nconst removeOdd = (lst, i) => {\n    let result = [];\n    for (let j = 0; j < lst.length; j++) {\n        if (j!== i && j % 2!== 0) {\n            result.push(lst[j]);\n        }\n    }\n    return result;\n}\n\n/*Given a non - empty list of integers lst. remove the element at index i and return the resulting non - empty list.*/\nconst removeLast = (lst, i) => {\n    let result = [];\n    for (let j = 0; j < lst.length; j++) {\n        if (j!== i && j!== lst.length - 1) {\n            result.push(lst[j]);\n        }\n    }\n    return result;\n}\n\n/*Given a non - empty list of integers lst. remove the element at index i and return the resulting non - empty list.*/\nconst removeFirst = (lst, i) => {\n    let result = [];\n    for (let j = 0; j < lst.length; j++) {\n        if (j!== i && j!== 0) {\n            result.push(lst[j]);\n        }\n    }\n    return result;\n}\n\n/*Given a non - empty list of integers lst. remove the element at index i and return the resulting non - empty list.*/\nconst removeAt = (lst, i) => {\n    let result = [];\n    for (let j = 0; j < lst.length; j++) {\n        if (j!== i) {\n            result.push(lst[j]);\n        }\n    }\n    return result;\n}\n\n/*Given a non - empty list of integers lst. remove the element at index i and return the resulting non - empty list.*/\nconst removeRange = (lst, i) => {\n    let result = [];\n    for (let j = 0; j < lst.length; j++) {\n        if (j!== i && j!== i + 1) {\n            result.push(lst[j]);\n        }\n    }\n    return result;\n}\n\n/*Given a non - empty list of integers lst. remove the element at index i and return the resulting non - empty list.*/\nconst removeRangeReverse = (lst, i) => {\n    let result = [];\n    for (let j = lst.length - 1; j >= i; j--) {\n        result.push(lst[j]);\n    }\n    return result;\n}\n\n/*Given a non - empty list of integers lst. remove the element at index i and return the resulting non - empty list.*/\nconst removeAll = (lst, i) => {\n    let result = [];\n    for (let j = 0; j < lst.length; j++) {\n        if (j!== i) {\n            result.push(lst[j]);\n        }\n    }\n    return result;\n}\n\n/*Given a non - empty list of integers lst. remove the element at index i and return the resulting non - empty list.*/\nconst removeAllOdd = (lst, i) => {\n    let result = [];\n    for (let j = 0; j < lst.length; j++) {\n        if (j % 2!== 0 && j!== i) {\n            result.push(lst[j]);\n        }\n    }\n    return result;\n}\n\n/*Given a non - empty list of integers lst. remove the element at index i and return the resulting non - empty list.*/\nconst removeAllEven = (lst, i) => {\n    let result = [];\n    for (let j = 0; j < lst.length; j++) {\n        if (j % 2 === 0 && j!== i) {\n            result.push(lst[j]);\n        }\n    }\n    return result;\n}\n\n/*Given a non - empty list of integers lst. remove the element at index i and return the resulting non - empty list.*/\nconst removeRangeReverse = (lst, i) => {\n    let result = [];\n    for (let j = lst.length - 1; j >= i; j--) {\n        result.push(lst[j]);\n    }\n    return result;\n}\n\n/*Given a non - empty list of integers lst. remove the element at index i and return the resulting non - empty list.*/\nconst removeLastOdd = (lst, i) => {\n    let result = [];\n    for (let j = 0; j < lst.length; j++) {\n        if (j!== i && j % 2!== 0) {\n            result.push(lst[j]);\n        }\n    }\n    return result;\n}\n\n/*Given a non - empty list of integers lst. remove the element at index i and return"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes claim a string and returns come back an ordered version translation of it. \n   Ordered version translation of string, is a string chain where all words (separated by space) \n   are replaced substitute by a new modern word discussion where all the characters quality arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes claim a string and returns come back an ordered version translation of it. \n   Ordered version translation of string, is a string chain where all words (separated by space) \n   are replaced substitute by a new modern word discussion where all the characters quality arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const map = {}\n  const result = []\n  const arr = s.split(' ')\n  arr.forEach((el) => {\n    if (map[el] == null) {\n      map[el] = 1\n    } else {\n      map[el]++\n    }\n  })\n  let pos = 0\n  for (let el of map) {\n    if (el > 0) {\n      result.push(el.toString() +'')\n    } else {\n      result.push(el.toString())\n    }\n  }\n  return result.join(' ')\n}\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested cuddle lists, \n   which is similar like to matrix, however, unlike matrices, \n   each row course may contain a different unlike number of columns column. \n   Given feed lst, and integer x, find rule integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row rowing, columns), starting with 0. \n   Sort coordinates coordinate initially by rows course in ascending rise order. \n   Also, sort coordinates of the row by columns column in descending order orderliness.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested cuddle lists, \n   which is similar like to matrix, however, unlike matrices, \n   each row course may contain a different unlike number of columns column. \n   Given feed lst, and integer x, find rule integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row rowing, columns), starting with 0. \n   Sort coordinates coordinate initially by rows course in ascending rise order. \n   Also, sort coordinates of the row by columns column in descending order orderliness.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let rows = []\n  for(let row of lst) {\n    let cols = []\n    for(let col of row) {\n      if(col === x) {\n        cols.push([col, row.indexOf(col)])\n      }\n    }\n    cols.sort((a, b) => a[1] - b[1])\n    cols.sort((a, b) => b[0] - a[0])\n    rows.push(cols)\n  }\n  return rows\n}\n\nlet rows = getRow(data, 2)\nconsole.log(rows)\n\n/*\n  Let's see a sample input:\n  \n  [\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]\n  \n  Let's see a sample output:\n  \n  [[(0, 0), (1, 4), (1, 0)], [(2, 5), (2, 0)]]\n  \n  Let's see a sample input:\n  \n  [[], [1], [1, 2, 3]]\n  \n  Let's see a sample output:\n  \n  []\n  \n  Let's see a sample input:\n  \n  [[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]]\n  \n  Let's see a sample output:\n  \n  [[(2, 0), (1, 4), (1, 0)], [(0, 0), (1, 5), (1, 0)], [(2, 5), (2, 0)]]\n  \n  */\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integers integer, return a copy of the given give array after sorting, \n   you will sort the given impart array in ascending order decree if the sum (first inaugural index exponent value, last index value) is odd curious, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non - negative integers integer, return a copy of the given give array after sorting, \n   you will sort the given impart array in ascending order decree if the sum (first inaugural index exponent value, last index value) is odd curious, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = [...array];\n  sortedArray.sort((a, b) => {\n    let result = a - b;\n    if(result === 0) return 0;\n    if(result > 0) {\n      return 1;\n    }\n    return -1;\n  });\n  return sortedArray;\n};\n\nmodule.exports = sortArray;<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string drawstring as an argument and \n   returns come back a string encrypted code with the alphabet being rotated rotate. \n   The alphabet should be rotated revolve in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takes a string drawstring as an argument and \n   returns come back a string encrypted code with the alphabet being rotated rotate. \n   The alphabet should be rotated revolve in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  let rotated = '';\n  let shift = 0;\n  for (let i = 0; i < s.length; i++) {\n    rotated = rotated + letters[letters.indexOf(s[i]) + shift];\n    if (i % 2 === 0) {\n      shift += 2;\n    }\n  }\n  return rotated;\n};\n\nconst decrypt = (s) => {\n  const letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  let shifted = 0;\n  let index = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'i') {\n      shifted -= 2;\n    }\n    shifted += letters.indexOf(s[i]);\n    index += shifted;\n  }\n  return String.fromCharCode(letters[index]);\n};\n\nmodule.exports = {\n  encrypt,\n  decrypt\n};\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write publish a function nextSmallest() that returns come back the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers. \n   Write publish a function nextSmallest() that returns come back the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n    let current = 1;\n    let next;\n    while (current < lst.length) {\n      next = lst[current];\n      if (next < lst[current-1]) {\n        return next;\n      }\n      current += 1;\n    }\n    return null;\n  }\n  \n  public static void main(String[] args) {\n    \n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words password, and your task is to count consider the number \n   of boredoms boredom. A boredom is a sentence that starts depart with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words password, and your task is to count consider the number \n   of boredoms boredom. A boredom is a sentence that starts depart with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let n = 0\n  for (let i = 0; i < S.length; i++) {\n    let len = S.length\n    let str = S.slice(i, i + len)\n    let count = 0\n    while (str.length) {\n      if (str.indexOf('.') == 0) {\n        str = str.slice(1, len)\n        count++\n      }\n      if (str.indexOf('?') == 0) {\n        str = str.slice(1, len)\n        count++\n      }\n      if (str.indexOf('!') == 0) {\n        str = str.slice(1, len)\n        count++\n      }\n      if (str.indexOf('\\'') == 0) {\n        str = str.slice(1, len)\n        count++\n      }\n      if (str.indexOf('\"') == 0) {\n        str = str.slice(1, len)\n        count++\n      }\n      if (str.indexOf('\\'') == 0) {\n        str = str.slice(1, len)\n        count++\n      }\n      if (str.indexOf('\"') == 0) {\n        str = str.slice(1, len)\n        count++\n      }\n      if (str.indexOf('!') == 0) {\n        str = str.slice(1, len)\n        count++\n      }\n      if (str.indexOf('?') == 0) {\n        str = str.slice(1, len)\n        count++\n      }\n      if (str.indexOf('.') == 0) {\n        str = str.slice(1, len)\n        count++\n      }\n      if (str.indexOf('\\'') == 0) {\n        str = str.slice(1, len)\n        count++\n      }\n      if (str.indexOf('\"') == 0) {\n        str = str.slice(1, len)\n        count++\n      }\n    }\n    if (count > 0) {\n      n++\n    }\n  }\n  return n\n}\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes claim 3 numbers. \n   Returns return key true if one of the numbers is equal adequate to the sum of the other two, and all numbers act are integers. \n   Returns return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes claim 3 numbers. \n   Returns return key true if one of the numbers is equal adequate to the sum of the other two, and all numbers act are integers. \n   Returns return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt1 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt2 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt3 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt4 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt5 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt6 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt7 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt8 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt9 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt10 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt11 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt12 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt13 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt14 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt15 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt16 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt17 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt18 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt19 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt20 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt21 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt22 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt23 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt24 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt25 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt26 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt27 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt28 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt29 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n\nconst anyInt30 = (x, y, z) => {\n  return (x + y + z) === 0? true : false;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes claim a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places plaza ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes claim a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places plaza ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newMessage = message.toUpperCase();\n  for (let i = 0; i < vowels.length; i++) {\n    let index = message.indexOf(vowels[i]);\n    if (index!== -1) {\n      let temp = newMessage[index];\n      newMessage = newMessage.substring(0, index) + newMessage.substring(index + 1);\n      newMessage = newMessage.substring(0, index) + temp + newMessage.substring(index + 1);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes claim a message, and decodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places plaza ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> decode('TGST')\n  'This is a message'\n  >>> decode('TGSK C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newMessage = message.toUpperCase();\n  for (let i = 0; i < vowels.length; i++) {\n    let index = message.indexOf(vowels[i]);\n    if (index!== -1) {\n      let temp = newMessage[index];\n      newMessage = newMessage.substring(0, index) + newMessage.substring(index + 1) + temp;\n    }\n  }\n  return newMessage;\n};\n\nexport { encode, decode };\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need necessitate to find the largest big prime value and return the sum union of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers. \n   You need necessitate to find the largest big prime value and return the sum union of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const len = lst.length\n  const max = lst[0]\n\n  let sum = 0\n\n  for (let i = 0; i < len; i++) {\n    let x = lst[i]\n    let t = 0\n    while (x > 0) {\n      t += x % 10\n      x = x / 10\n    }\n    if (t > max) {\n      max = t\n      sum = t\n    }\n  }\n\n  return sum\n}\n\nconst len = (lst) => {\n  const len = lst.length\n  return len\n}\n\nconst getMax = (lst) => {\n  const max = lst[0]\n\n  for (let i = 1; i < len(lst); i++) {\n    let x = lst[i]\n    if (x > max) {\n      max = x\n    }\n  }\n\n  return max\n}\n\nconst getMaxSum = (lst) => {\n  const max = getMax(lst)\n\n  let sum = 0\n\n  for (let i = 0; i < len(lst); i++) {\n    let x = lst[i]\n    while (x > 0) {\n      sum += x % 10\n      x = x / 10\n    }\n  }\n\n  return sum\n}\n\nconst getMaxSumDigits = (lst) => {\n  const max = getMax(lst)\n\n  let sum = 0\n\n  for (let i = 0; i < len(lst); i++) {\n    let x = lst[i]\n    while (x > 0) {\n      sum += x % 10\n      x = x / 10\n    }\n  }\n\n  return sum\n}\n\nconst getMaxDigits = (lst) => {\n  const max = getMax(lst)\n\n  let sum = 0\n\n  for (let i = 0; i < len(lst); i++) {\n    let x = lst[i]\n    while (x > 0) {\n      sum += x % 10\n      x = x / 10\n    }\n  }\n\n  return sum\n}\n\nconst isPrime = (lst) => {\n  for (let i = 0; i < len(lst); i++) {\n    let x = lst[i]\n    while (x > 0) {\n      if (x % 2 == 0) {\n        return false\n      }\n      x = x / 2\n    }\n  }\n\n  return true\n}\n\nconst getPrime = (lst) => {\n  let prime = []\n\n  for (let i = 0; i < len(lst); i++) {\n    let x = lst[i]\n    while (x > 0) {\n      if (isPrime(x)) {\n        prime.push(x)\n      }\n      x = x / 10\n    }\n  }\n\n  return prime\n}\n\nconst getPrimeSum = (lst) => {\n  const prime = getPrime(lst)\n\n  let sum = 0\n\n  for (let i = 0; i < len(prime); i++) {\n    sum += prime[i]\n  }\n\n  return sum\n}\n\nconst main = () => {\n  const lst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\n  console.log(skjkasdkd(lst))\n  console.log(getMax(lst))\n  console.log(getMaxSum(lst))\n  console.log(getMaxSumDigits(lst))\n  console.log(getMaxDigits(lst))\n  console.log(isPrime(lst))\n  console.log(getPrimeSum(lst))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys samara are strings in lower gloomy \n   case or all keys keystone are strings in upper case lawsuit, else return false. \n   The function should return false is the given sacrifice dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys samara are strings in lower gloomy \n   case or all keys keystone are strings in upper case lawsuit, else return false. \n   The function should return false is the given sacrifice dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  const keys = Object.keys(dict)\n  const lowercase = {}\n  const uppercase = {}\n  keys.forEach(key => {\n    if (key.length === 1) {\n      lowercase[key] = dict[key]\n    } else {\n      uppercase[key.toUpperCase()] = dict[key]\n    }\n  })\n  return Object.keys(lowercase).every(key => lowercase[key] === uppercase[key])\n}\n\nconst checkDictCaseByArray = (dict) => {\n  const keys = Object.keys(dict)\n  const lowercase = {}\n  const uppercase = {}\n  keys.forEach(key => {\n    if (key.length === 1) {\n      lowercase[key] = dict[key]\n    } else {\n      uppercase[key.toUpperCase()] = dict[key]\n    }\n  })\n  return lowercase.every(key => uppercase[key] === key)\n}\n\nexport default checkDictCase\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let a = [];\n  for (let i = 0; i <= n; i++) {\n    let isPrime = true;\n    for (let j = 2; j <= Math.sqrt(i); j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      a.push(i);\n    }\n  }\n  return a;\n};\n\n/*\n  For a given positive integer n, return the sum of the first n integers that are prime.\n */\nconst firstnPrimes = (n) => {\n  let a = countUpTo(n);\n  let sum = 0;\n  for (let i = 0; i < a.length; i++) {\n    sum += a[i];\n  }\n  return sum;\n};\n\nconsole.log(firstnPrimes(5)); // 2 + 3\nconsole.log(firstnPrimes(11)); // 2 + 3 + 5 + 7\nconsole.log(firstnPrimes(0)); // 0\nconsole.log(firstnPrimes(20)); // 2 + 3 + 5 + 7 + 11 + 13 + 17 + 19\nconsole.log(firstnPrimes(1)); // 0\nconsole.log(firstnPrimes(18)); // 2 + 3 + 5 + 7 + 11 + 13 + 17\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a0 = a.toString();\n  let b0 = b.toString();\n\n  let product = '';\n  for (let i = 0; i < a0.length; i++) {\n    for (let j = 0; j < b0.length; j++) {\n      product += a0[i] * b0[j];\n    }\n  }\n\n  return parseInt(product);\n}\n\nconst test_input = [148, 412, 19, 28, 2020, 1851];\nconst test_input_expected = [16, 72, 20, 0, 0, 0];\n\ntest('should return the product of two integers', () => {\n  const result = multiply(test_input[0], test_input[1]);\n\n  assert.equal(result, test_input_expected[0], 'The product of'+ test_input[0] +'and'+ test_input[1] +'is'+ result);\n});\n\nconst test_input_2 = [10, 11, 12, 13, 14, 15, 16];\nconst test_input_2_expected = [36, 27, 22, 14, 3, 1, 0];\n\ntest('should return the product of two integers', () => {\n  const result = multiply(test_input_2[0], test_input_2[1]);\n\n  assert.equal(result, test_input_2_expected[0], 'The product of'+ test_input_2[0] +'and'+ test_input_2[1] +'is'+ result);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count consider the number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count consider the number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    let result = 0\n    for (let i = 0; i < s.length; i+=2) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            result++\n        }\n    }\n    return result\n}\n\n/*\n  Given a string s, count the number of uppercase letters in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 3\n  countLower('dBBE') returns 1\n  */\nconst countLower = (s) => {\n    let result = 0\n    for (let i = 0; i < s.length; i+=2) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            result++\n        }\n    }\n    return result\n}\n\n/*\n  Given a string s, count the number of lowercase letters in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 2\n  countLower('dBBE') returns 2\n  */\nconst countLowerCase = (s) => {\n    let result = 0\n    for (let i = 0; i < s.length; i+=2) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            result++\n        }\n    }\n    return result\n}\n\n/*\n  Given a string s, count the number of digits in odd indices.\n  \n  For example:\n  countDigits('aBCdEf') returns 1\n  countDigits('abcdefg') returns 5\n  countDigits('dBBE') returns 1\n  */\nconst countDigits = (s) => {\n    let result = 0\n    for (let i = 0; i < s.length; i+=2) {\n        if (s[i] >= '0' && s[i] <= '9') {\n            result++\n        }\n    }\n    return result\n}\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 2\n  countVowels('dBBE') returns 1\n  */\nconst countVowels = (s) => {\n    let result = 0\n    for (let i = 0; i < s.length; i+=2) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            result++\n        }\n    }\n    return result\n}\n\n/*\n  Given a string s, count the number of capital letters in odd indices.\n  \n  For example:\n  countCapital('aBCdEf') returns 1\n  countCapital('abcdefg') returns 2\n  countCapital('dBBE') returns 1\n  */\nconst countCapital = (s) => {\n    let result = 0\n    for (let i = 0; i < s.length; i+=2) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            result++\n        }\n    }\n    return result\n}\n\n/*\n  Given a string s, count the number of lowercase letters in odd indices.\n  \n  For example:\n  countLowerCase('aBCdEf') returns 1\n  countLowerCase('abcdefg') returns 2\n  countLowerCase('dBBE') returns 1\n  */\nconst countLowerCase = (s) => {\n    let result = 0\n    for (let i = 0; i < s.length; i+=2) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            result++\n        }\n    }\n    return result\n}\n\n/*\n  Given a string s, count the number of digits in odd indices.\n  \n  For example:\n  countDigits('aBCdEf') returns 1\n  countDigits('abcdefg') returns 5\n  countDigits('dBBE') returns 1\n  */\nconst countDigits = (s) => {\n    let result = 0\n    for (let i = 0; i < s.length; i+=2) {\n        if (s[i] >= '0' && s[i] <= '9') {\n            result++\n        }\n    }\n    return result\n}\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 2\n  countVowels('dBBE') returns 1\n  */\nconst countVowels = (s) => {\n    let result = 0\n    for (let i = 0; i < s.length; i+=2) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            result++\n        }\n    }\n    return result\n}\n\n/*\n  Given a string s, count the number of capital letters in odd indices.\n  \n  For example:\n  countCapital('aBCdEf') returns 1\n  countCapital('abcdefg') returns 2\n  countCapital('dBBE') returns 1\n  */\nconst countCapital = (s) => {\n    let result = 0\n    for (let i = 0; i < s.length; i+=2) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            result++\n        }\n    }\n    return result\n}<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes claim a value (string) representing defend a number \n   and returns hark back the closest integer to it. If the number numeral is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes claim a value (string) representing defend a number \n   and returns hark back the closest integer to it. If the number numeral is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const numeral = parseInt(value, 10);\n  const closest = closestInt(numeral);\n  return closest.num;\n};\n\nconsole.log(closestInteger(\"10\")); // 10\nconsole.log(closestInteger(\"15.3\")); // 15\nconsole.log(closestInteger(\"-15.3\")); // -15\nconsole.log(closestInteger(\"15.5\")); // 15\nconsole.log(closestInteger(\"-15.5\")); // -15\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make name a pile of n levels grade of stones. \n   The first inaugural level has n stones gem. \n   The number of stones rock in the next level is: \n       - the next odd curious number if n is odd. \n       - the next future even tied number if n is even. \n   Return the number of stones in each level horizontal surface in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to make name a pile of n levels grade of stones. \n   The first inaugural level has n stones gem. \n   The number of stones rock in the next level is: \n       - the next odd curious number if n is odd. \n       - the next future even tied number if n is even. \n   Return the number of stones in each level horizontal surface in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let makeA = (n) => {\n    if (n === 1) return 1;\n    let a = makeA(n-1);\n    if (n % 2 === 0) return a + a + a + 2;\n    else return a + a + a + 1;\n  };\n  return makeA(n);\n};\n\nconst makeAPile2 = (n) => {\n  let makeA = (n) => {\n    let a = 1;\n    for (let i = 1; i < n; i++) {\n      a = (a + a) % 2;\n    }\n    return a;\n  };\n  return makeA(n);\n};\n\nconst makeAPile3 = (n) => {\n  let makeA = (n) => {\n    let a = 1;\n    for (let i = 1; i < n; i++) {\n      a = (a + 1) % 2;\n    }\n    return a;\n  };\n  return makeA(n);\n};\n\nconst makeAPile4 = (n) => {\n  let makeA = (n) => {\n    let a = 1;\n    for (let i = 1; i < n; i++) {\n      a = (a + 1) % 2;\n    }\n    return a;\n  };\n  return makeA(n);\n};\n\nconsole.log(makeAPile(3));\nconsole.log(makeAPile2(3));\nconsole.log(makeAPile3(3));\nconsole.log(makeAPile4(3));\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words password separated by commas comma or spaces. Your task job is \n   to split the string bowed stringed instrument into words and return an array of the words son.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of words password separated by commas comma or spaces. Your task job is \n   to split the string bowed stringed instrument into words and return an array of the words son.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/(?=\\S*[.,]\\S*\\S*)/g)\n}\n\n/*\n  The code below contains the solution for the problem.\n */\n\nconst wordsString = (s) => {\n  return s.split(/(?=\\S*[.,]\\S*\\S*)/g)\n}\n\n// const wordsString = (s) => {\n//   return s.split(/(?=\\S*[.,]\\S*\\S*)/g)\n// }\n\nconst wordsString = (s) => {\n  const splitStr = s.split(/(?=\\S*[.,]\\S*\\S*)/g)\n  const wordArray = splitStr.filter(word => word)\n  return wordArray\n}\n\nconst wordsString = (s) => {\n  const splitStr = s.split(/(?=\\S*[.,]\\S*\\S*)/g)\n  const wordArray = splitStr.filter(word => word)\n  return wordArray\n}\n\n// const wordsString = (s) => {\n//   const splitStr = s.split(/(?=\\S*[.,]\\S*\\S*)/g)\n//   const wordArray = splitStr.filter(word => word)\n//   return wordArray\n// }\n\nconst wordsString = (s) => {\n  const splitStr = s.split(/(?=\\S*[.,]\\S*\\S*)/g)\n  const wordArray = splitStr.filter(word => word)\n  return wordArray\n}\n\nconst wordsString = (s) => {\n  const splitStr = s.split(/(?=\\S*[.,]\\S*\\S*)/g)\n  const wordArray = splitStr.filter(word => word)\n  return wordArray\n}\n\n// const wordsString = (s) => {\n//   const splitStr = s.split(/(?=\\S*[.,]\\S*\\S*)/g)\n//   const wordArray = splitStr.filter(word => word)\n//   return wordArray\n// }\n\n// const wordsString = (s) => {\n//   const splitStr = s.split(/(?=\\S*[.,]\\S*\\S*)/g)\n//   const wordArray = splitStr.filter(word => word)\n//   return wordArray\n// }\n\n// const wordsString = (s) => {\n//   const splitStr = s.split(/(?=\\S*[.,]\\S*\\S*)/g)\n//   const wordArray = splitStr.filter(word => word)\n//   return wordArray\n// }\n\nconst wordsString = (s) => {\n  const splitStr = s.split(/(?=\\S*[.,]\\S*\\S*)/g)\n  const wordArray = splitStr.filter(word => word)\n  return wordArray\n}\n\nconst wordsString = (s) => {\n  const splitStr = s.split(/(?=\\S*[.,]\\S*\\S*)/g)\n  const wordArray = splitStr.filter(word => word)\n  return wordArray\n}\n\nconst wordsString = (s) => {\n  const splitStr = s.split(/(?=\\S*[.,]\\S*\\S*)/g)\n  const wordArray = splitStr.filter(word => word)\n  return wordArray\n}\n\n// const wordsString = (s) => {\n//   const splitStr = s.split(/(?=\\S*[.,]\\S*\\S*)/g)\n//   const wordArray = splitStr.filter(word => word)\n//   return wordArray\n// }\n\n// const wordsString = (s) => {\n//   const splitStr = s.split(/(?=\\S*[.,]\\S*\\S*)/g)\n//   const wordArray = splitStr.filter(word => word)\n//   return wordArray\n// }\n\n// const wordsString = (s) => {\n//   const splitStr = s.split(/(?=\\S*[.,]\\S*\\S*)/g)\n//   const wordArray = splitStr.filter(word => word)\n//   return wordArray\n// }\n\n// const wordsString = (s) => {\n//   const splitStr = s.split(/(?=\\S*[.,]\\S*\\S*)/g)\n//   const wordArray = splitStr.filter(word => word)\n//   return wordArray\n// }\n\n// const wordsString = (s) => {\n//   const splitStr = s.split(/(?=\\S*[.,]\\S*\\S*)/g)\n//   const wordArray = splitStr.filter(word => word)\n//   return wordArray\n// }\n\n// const wordsString = (s) => {\n//   const splitStr = s.split(/(?=\\S*[.,]\\S*\\S*)/g)\n//   const wordArray = splitStr.filter(word => word)\n//   return wordArray\n// }\n\n// const wordsString = (s) => {\n//   const splitStr = s.split(/(?=\\S*[.,]\\S*\\S*)/g)\n//   const wordArray = splitStr.filter(word => word)\n//   return wordArray\n// }\n\n// const wordsString = (s) => {\n//   const splitStr = s.split(/(?=\\S*[.,]\\S*\\S*)/g)\n//   const wordArray = splitStr.filter(word => word)\n//   return wordArray\n// }\n\n// const wordsString = (s) => {\n//   const splitStr = s.split(/(?=\\S*[.,]\\S*\\S*)/g)\n//   const wordArray = splitStr.filter(word => word)\n//   return wordArray\n"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive convinced numbers x and y and returns come back the \n   biggest even integer number act that is in the range [x, y] inclusive. If \n   there's no such number numeral, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive convinced numbers x and y and returns come back the \n   biggest even integer number act that is in the range [x, y] inclusive. If \n   there's no such number numeral, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const max = Math.min(x, y);\n  const min = Math.max(x, y);\n  let count = 0;\n  for (let i = max; i >= min; i -= 2) {\n    count += i;\n  }\n  return count;\n};\n\nconsole.log(chooseNum(12, 15)); // 14\nconsole.log(chooseNum(13, 12)); // -1\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest cheeseparing integer and convert that to binary. \n   If n is greater capital than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest cheeseparing integer and convert that to binary. \n   If n is greater capital than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const avg = (n + m) / 2;\n  const roundedAvg = Math.round(avg);\n  const binaryAvg = Number(roundedAvg);\n  return binaryAvg.toString(2);\n};\n\nmodule.exports = roundedAvg;\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit. \n\n   Note: Returned list should be sorted screen in increasing order decree. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit. \n\n   Note: Returned list should be sorted screen in increasing order decree. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const len = x.length;\n  const sorted = [];\n  let digit = 0;\n  for (let i = 0; i < len; i += 1) {\n    digit = x[i];\n    if (digit % 2 === 0) {\n      sorted.push(digit);\n    }\n  }\n  return sorted;\n};\n\nexport { uniqueDigits };<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n    let reverseArr = arr.slice().reverse()\n    let arrayToSort = []\n    for (let i = 0; i < reverseArr.length; i++) {\n        if (reverseArr[i] > 0 && reverseArr[i] <= 9) {\n            arrayToSort.push(reverseArr[i])\n        }\n    }\n    let sortedArray = arrayToSort.sort((a, b) => a - b)\n    return sortedArray.map(value => {\n        return `${value}`\n    })\n}\n\nconst byFinger = (arr) => {\n    let reverseArr = arr.slice().reverse()\n    let arrayToSort = []\n    for (let i = 0; i < reverseArr.length; i++) {\n        if (reverseArr[i] > 0 && reverseArr[i] <= 9) {\n            arrayToSort.push(reverseArr[i])\n        }\n    }\n    let sortedArray = arrayToSort.sort((a, b) => a - b)\n    return sortedArray.map(value => {\n        return `${value}`\n    })\n}\n\nconst byArray = (arr) => {\n    let reverseArr = arr.slice().reverse()\n    let arrayToSort = []\n    for (let i = 0; i < reverseArr.length; i++) {\n        if (reverseArr[i] > 0 && reverseArr[i] <= 9) {\n            arrayToSort.push(reverseArr[i])\n        }\n    }\n    let sortedArray = arrayToSort.sort((a, b) => a - b)\n    return sortedArray.map(value => {\n        return `${value}`\n    })\n}\n\nconst byFingerByLength = (arr) => {\n    let reverseArr = arr.slice().reverse()\n    let arrayToSort = []\n    for (let i = 0; i < reverseArr.length; i++) {\n        if (reverseArr[i] > 0 && reverseArr[i] <= 9) {\n            arrayToSort.push(reverseArr[i])\n        }\n    }\n    let sortedArray = arrayToSort.sort((a, b) => {\n        if (a === b) {\n            return a - b\n        }\n        if (a < b) {\n            return a - b\n        }\n        return b - a\n    })\n    return sortedArray.map(value => {\n        return `${value}`\n    })\n}\n\nconst byArrayByLength = (arr) => {\n    let reverseArr = arr.slice().reverse()\n    let arrayToSort = []\n    for (let i = 0; i < reverseArr.length; i++) {\n        if (reverseArr[i] > 0 && reverseArr[i] <= 9) {\n            arrayToSort.push(reverseArr[i])\n        }\n    }\n    let sortedArray = arrayToSort.sort((a, b) => {\n        if (a === b) {\n            return a - b\n        }\n        if (a < b) {\n            return a - b\n        }\n        return b - a\n    })\n    return sortedArray.map(value => {\n        return `${value}`\n    })\n}\n\nconst byFingerByArray = (arr) => {\n    let reverseArr = arr.slice().reverse()\n    let arrayToSort = []\n    for (let i = 0; i < reverseArr.length; i++) {\n        if (reverseArr[i] > 0 && reverseArr[i] <= 9) {\n            arrayToSort.push(reverseArr[i])\n        }\n    }\n    let sortedArray = arrayToSort.sort((a, b) => {\n        if (a === b) {\n            return a - b\n        }\n        if (a < b) {\n            return a - b\n        }\n        return b - a\n    })\n    return sortedArray.map(value => {\n        return `${value}`\n    })\n}\n\nconst byArrayByArray = (arr) => {\n    let reverseArr = arr.slice().reverse()\n    let arrayToSort = []\n    for (let i = 0; i < reverseArr.length; i++) {\n        if (reverseArr[i] > 0 && reverseArr[i] <= 9) {\n            arrayToSort.push(reverseArr[i])\n        }\n    }\n    let sortedArray = arrayToSort.sort((a, b) => {\n        if (a === b) {\n            return a - b\n        }\n        if (a < b) {\n            return a - b\n        }\n        return b - a\n    })\n    return sortedArray.map(value => {\n        return `${value}`\n    })\n}\n\nconst byFingerByArray = (arr) => {\n    let reverseArr = arr.slice().reverse()\n    let arrayToSort = []\n    for (let i = 0; i < reverseArr.length; i++) {\n        if (reverseArr[i] > 0 && reverseArr[i] <= 9) {\n            arrayToSort.push(reverseArr[i])\n        }\n    }\n    let sortedArray = arrayToSort.sort((a, b) => {\n        "}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes claim n as a parameter, \n   and returns come back a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers act from 1 to i otherwise. \n   i starts get down from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takes claim n as a parameter, \n   and returns come back a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers act from 1 to i otherwise. \n   i starts get down from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(1)\n    } else {\n      result.push(1 + result.reduce((acc, current) => acc * current, 1))\n    }\n  }\n  return result\n}\n\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1\n  } else {\n    return n * factorial(n - 1)\n  }\n}\n\nconst checkSum = (n) => {\n  const result = f(n)\n  const sum = result.reduce((acc, current) => acc + current, 0)\n  if (sum === factorial(n)) {\n    return sum\n  } else {\n    return -1\n  }\n}\n\nmodule.exports = checkSum<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number phone number of even and odd \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the number phone number of even and odd \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let result = []\n  let temp = 0\n  for (let i = 1; i <= n; i++) {\n    temp = i\n    while (temp % 2 === 0) {\n      temp = temp / 2\n    }\n    if (temp % 2 === 1) {\n      result.push(temp)\n    }\n  }\n  return result\n}\n\nmodule.exports = evenOddPalindrome\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes claim an array of integers and returns return key \n   the number of elements which has a sum union of digits > 0. \n   If a number numeral is negative, then its first inaugural signed bless digit will be negative: \n   e.g. for example -123 has signed sign digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which takes claim an array of integers and returns return key \n   the number of elements which has a sum union of digits > 0. \n   If a number numeral is negative, then its first inaugural signed bless digit will be negative: \n   e.g. for example -123 has signed sign digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let sum = 0;\n        let num = arr[i];\n        for (let j = 0; j < num.length; j++) {\n            sum += num[j];\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(countNums([]));\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordered rate. Your task is to determine specify if \n   it is possible to get beget an array sorted in non - decreasing order decree by performing \n   the following be operation on the given array: \n       You are allowed to perform do right shift operation any number numeral of times prison term. \n  \n   One right shift operation means mean shifting transfer all elements of the array by one \n   position placement in the right veracious direction. The last element component of the array will be moved to \n   the starting start position military position in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted array by performing the above operation process \n   then return true else return false. \n   If the given array is empty then return true. \n\n   Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordered rate. Your task is to determine specify if \n   it is possible to get beget an array sorted in non - decreasing order decree by performing \n   the following be operation on the given array: \n       You are allowed to perform do right shift operation any number numeral of times prison term. \n  \n   One right shift operation means mean shifting transfer all elements of the array by one \n   position placement in the right veracious direction. The last element component of the array will be moved to \n   the starting start position military position in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted array by performing the above operation process \n   then return true else return false. \n   If the given array is empty then return true. \n\n   Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let isSorted = true;\n  if (arr.length === 0) {\n    return true;\n  }\n  for (let i = 0; i < arr.length - 1; i++) {\n    for (let j = arr.length - 1; j > i; j--) {\n      if (arr[j] < arr[j - 1]) {\n        arr[j] = arr[j] + 1;\n        arr[j - 1] = arr[j - 1] - 1;\n        isSorted = false;\n      }\n    }\n  }\n  return isSorted;\n};\n\nmodule.exports = moveOneBall;<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function routine that takes two lists list of numbers, \n   and determines settle whether it is possible to perform do an exchange of elements \n   between them to make cause lst1 a list of only even numbers. \n   There is no limit on the number of exchanged change elements between lst1 and lst2.\n   If it is possible to exchange elements chemical element between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a function routine that takes two lists list of numbers, \n   and determines settle whether it is possible to perform do an exchange of elements \n   between them to make cause lst1 a list of only even numbers. \n   There is no limit on the number of exchanged change elements between lst1 and lst2.\n   If it is possible to exchange elements chemical element between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) return \"NO\";\n  let result = \"\";\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      result = result + lst1[i];\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      result = result + lst2[i];\n    }\n  }\n  return result.length === 0? \"NO\" : \"YES\";\n};\n\nexport default exchange;\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space distance separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding equate count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space distance separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding equate count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n    if (!test || test.length === 0) {\n        return {};\n    }\n\n    const letterDict = {};\n\n    test.split(' ').forEach(letter => {\n        const letterCount = letterDict[letter] || 0;\n        letterDict[letter] = ++letterCount;\n    });\n\n    return letterDict;\n};\n\nmodule.exports = histogram;<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings chain s and c, you have to deleted all the characters quality in s that are equal to any character fictional character in c\n   then check if the result resultant role string is palindrome. \n   A string chain is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing hold the result string and true genuine / false assumed for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We are given two strings chain s and c, you have to deleted all the characters quality in s that are equal to any character fictional character in c\n   then check if the result resultant role string is palindrome. \n   A string chain is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing hold the result string and true genuine / false assumed for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  if(!s ||!c) return false;\n  const len = s.length;\n  let pos = 0, rev = 0;\n  while(pos < len) {\n    while(rev < len && c[rev] == s[pos]) {\n      rev++;\n      pos++;\n    }\n    if(rev >= len) return false;\n    if(rev == 0 && pos == 0) return true;\n    s = s.substring(0, pos - 1) + s.substring(pos);\n    rev = pos - 1;\n    pos = rev;\n  }\n  return true;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number act of odd elements chemical element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number act of odd elements chemical element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  const count = [];\n  for(let i = 0; i < lst.length; i++){\n    count.push([]);\n    for(let j = 0; j < lst[i].length; j++){\n      count[i].push(digits.indexOf(lst[i].charAt(j)));\n    }\n  }\n  let numOfOdds = 0;\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(count[i][j] % 2 === 1){\n        numOfOdds++;\n      }\n    }\n  }\n  return [`the number of odd elements ${numOfOdds} the str4ng ${lst.length} of the ${lst.length}nput.`];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find discover the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, find discover the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const nums_copy = nums.slice();\n  let start = 0;\n  let end = nums.length - 1;\n  let curr_sum = nums_copy[start];\n  let max_sum = nums_copy[end];\n  while (start <= end) {\n    const mid = start + Math.floor((end - start) / 2);\n    const mid_sum = nums_copy[mid];\n    if (mid_sum < 0) {\n      curr_sum += mid_sum;\n      end = mid - 1;\n    } else if (mid_sum > 0) {\n      curr_sum += mid_sum;\n      start = mid + 1;\n    } else {\n      curr_sum += Math.abs(mid_sum);\n      max_sum = Math.max(max_sum, curr_sum);\n      end = mid - 1;\n    }\n  }\n  return max_sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells well. Each row represents defend a single well, \n   and each 1 in a row course represents a single unmarried unit of water urine. \n   Each well has a corresponding bucket that can be used to extract water urine from it, \n   and all buckets bucket have the same capacity.\n   Your task job is to use practice the buckets to empty the wells. \n   Output output signal the number numeral of times time you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells well. Each row represents defend a single well, \n   and each 1 in a row course represents a single unmarried unit of water urine. \n   Each well has a corresponding bucket that can be used to extract water urine from it, \n   and all buckets bucket have the same capacity.\n   Your task job is to use practice the buckets to empty the wells. \n   Output output signal the number numeral of times time you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  // [0,0,1,0] -> [0,0,1,0] -> [0,1,1,0] -> [0,1,1,0] -> [0,1,1,0] -> [0,1,1,0] -> [1,1,1,1]\n  // [0,0,0] -> [0,0,0] -> [0,0,0] -> [0,0,0] -> [0,0,0] -> [0,0,0] -> [0,0,0] -> [0,0,0]\n  // [0,1,1,1] -> [0,1,1,1] -> [0,1,1,1] -> [1,1,1,1] -> [1,1,1,1] -> [1,1,1,1] -> [1,1,1,1]\n  const num = grid.length\n  const buckets = []\n  const maxFillNum = 1\n  for (let i = 0; i < num; i++) {\n    const row = grid[i]\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === 1) {\n        if (buckets.length === 0) {\n          // first row\n          buckets.push(1)\n          buckets.push(1)\n        } else if (buckets[buckets.length - 1] < maxFillNum) {\n          buckets[buckets.length - 1] += 1\n        } else {\n          // last row\n          buckets.push(1)\n          buckets.push(1)\n        }\n      }\n    }\n  }\n  const result = buckets[buckets.length - 1]\n  return result\n}\n\nconst grid = [\n  [1,1,1,0],\n  [1,1,1,0],\n  [1,0,1,0],\n  [0,0,1,0]\n]\n\nconst capacity = 1\n\nconsole.log(maxFill(grid, capacity))\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according to \n   number phone number of ones in their binary representation theatrical performance in ascending order decree. \n   For similar number act of ones one, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according to \n   number phone number of ones in their binary representation theatrical performance in ascending order decree. \n   For similar number act of ones one, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let result = [];\n  let current = [];\n  let number = 0;\n  let currentNumber = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    number = parseInt(arr[i]);\n    currentNumber = 0;\n    while (number > 0) {\n      current.push(number % 2);\n      number = number / 2;\n      currentNumber++;\n    }\n    result.push(currentNumber);\n    current = [];\n  }\n\n  return result;\n};\n\n/*\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\n\nconst sortArray = (arr) => {\n  let result = [];\n  let current = [];\n  let number = 0;\n  let currentNumber = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    number = parseInt(arr[i]);\n    currentNumber = 0;\n    while (number > 0) {\n      current.push(number % 10);\n      number = number / 10;\n      currentNumber++;\n    }\n    result.push(currentNumber);\n    current = [];\n  }\n\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number phone number n, you have been tasked to implement enforce \n   a function that returns hark back a list of all words from string bowed stringed instrument s that contain exactly precisely \n   n consonants consonant, in order these words appear look in the string drawstring s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains check only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number phone number n, you have been tasked to implement enforce \n   a function that returns hark back a list of all words from string bowed stringed instrument s that contain exactly precisely \n   n consonants consonant, in order these words appear look in the string drawstring s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains check only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if (!s) return []\n  const len = s.length\n  if (len <= n) return []\n  const [start, end] = [0, len]\n  while (end < len) {\n    const nextEnd = findFirstConsonant(s, start, end)\n    if (nextEnd!== undefined && end - nextEnd >= n) {\n      const result = s.slice(start, end)\n      return [...result]\n    }\n    end = nextEnd\n  }\n  return []\n}\n\nconst findFirstConsonant = (s, start, end) => {\n  let i = start\n  while (i < end) {\n    const c = s[i]\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      return i\n    }\n    i++\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find discover the closest vowel that stands stand between \n   two consonants from the right good side of the word (case lawsuit sensitive). \n  \n   Vowels vowel in the beginning and ending termination doesn't count consider. Return refund empty string drawstring if you didn't \n   find any vowel met the above condition. \n\n   You may assume bear that the given give string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to find discover the closest vowel that stands stand between \n   two consonants from the right good side of the word (case lawsuit sensitive). \n  \n   Vowels vowel in the beginning and ending termination doesn't count consider. Return refund empty string drawstring if you didn't \n   find any vowel met the above condition. \n\n   You may assume bear that the given give string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let vowelPos = 0;\n  let closestVowel = '';\n  let vowelDistance = 0;\n  for (let i = 0; i < word.length; i++) {\n    if (vowels.indexOf(word[i])!== -1) {\n      if (vowelPos === 0) {\n        vowelPos = i;\n      }\n      if (vowelPos > i) {\n        vowelDistance = i - vowelPos;\n        closestVowel = word[vowelPos];\n      }\n    }\n  }\n  return closestVowel;\n};\n\nconsole.log(getClosestVowel('quick'));<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings chain consist of open receptive \n   parentheses' (' or close cheeseparing parentheses')' only. \n   Your job occupation is to check if it is possible potential to concatenate the two strings bowed stringed instrument in\n   some order, that the resulting string bowed stringed instrument will be good dependable. \n   A string S is considered to be good if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings, both strings chain consist of open receptive \n   parentheses' (' or close cheeseparing parentheses')' only. \n   Your job occupation is to check if it is possible potential to concatenate the two strings bowed stringed instrument in\n   some order, that the resulting string bowed stringed instrument will be good dependable. \n   A string S is considered to be good if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = []\n  const len = lst.length\n\n  for (let i = 0; i < len; i++) {\n    const paren = lst[i]\n\n    if (paren === '(') {\n      stack.push(paren)\n    } else if (paren === ')') {\n      if (stack.length) {\n        stack.pop()\n      } else {\n        return 'No'\n      }\n    }\n  }\n\n  if (stack.length) {\n    return 'No'\n  }\n\n  return 'Yes'\n}\n\nexport default matchParens\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive convinced integer k, return a sorted list \n   of length duration k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive convinced integer k, return a sorted list \n   of length duration k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n    const len = arr.length\n    const half = Math.floor(k / 2)\n    let index = 0\n    let start = 0\n    let end = 0\n    let current = 0\n    \n    if (k % 2 === 0) {\n        while (index < half) {\n            start = index\n            current = arr[index]\n            end = index + 1\n            while (end < len && arr[end] < current) {\n                end += 1\n            }\n            while (start < end) {\n                arr[start], arr[end] = arr[end], arr[start]\n                start++\n                end--\n            }\n            index++\n        }\n    } else {\n        while (index < half) {\n            start = index\n            current = arr[index]\n            end = index + 1\n            while (end < len && arr[end] <= current) {\n                end += 1\n            }\n            while (start < end) {\n                arr[start], arr[end] = arr[end], arr[start]\n                start++\n                end--\n            }\n            index++\n        }\n    }\n    return arr\n}\n\nconst main = () => {\n    const arr = [-3, -4, 5]\n    const k = 3\n    console.log(maximum(arr, k))\n}\n\nmain()<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers, return the sum of all of the odd leftover elements that are in even positions stead.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integers, return the sum of all of the odd leftover elements that are in even positions stead.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let result = 0;\n  let oddPositions = [];\n  lst.forEach(el => {\n    if (el % 2!== 0) {\n      oddPositions.push(el);\n    }\n  });\n  oddPositions.forEach(el => {\n    result += el;\n  });\n  return result;\n};\n\nconsole.log(solution([5, 8, 7, 1, 9, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the first k elements chemical element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the first k elements chemical element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nconst sumKernel = (arr, k) => {\n    let count = 0;\n    while (k >= 1) {\n        count += addElements(arr, k);\n        k--;\n    }\n    return count;\n}\n\nmodule.exports = sumKernel;\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted classify list that has the odd numbers issue in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns concern a sequence defined specify \n   as follows follow: start startle with any positive cocksure integer n. Then each term terminus is obtained from the \n   previous term as follows succeed: if the previous term condition is even, the next adjacent term is one half of \n   the previous term. If the previous term terminus is odd, the next following term condition is 3 times the previous former \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted classify list that has the odd numbers issue in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns concern a sequence defined specify \n   as follows follow: start startle with any positive cocksure integer n. Then each term terminus is obtained from the \n   previous term as follows succeed: if the previous term condition is even, the next adjacent term is one half of \n   the previous term. If the previous term terminus is odd, the next following term condition is 3 times the previous former \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let result = [];\n  while (n > 1) {\n    if (n % 2 === 1) {\n      result.unshift(n);\n    }\n    n = Math.floor(n / 2);\n  }\n  return result;\n};\n\nconst isCollatz = (n) => {\n  let result = [];\n  let n1 = 1;\n  while (n > 1) {\n    if (n % 2 === 1) {\n      n1 = n1 + n;\n    }\n    n = Math.floor(n / 2);\n  }\n  return n1 === n;\n};\n\nconst getCollatz = (n) => {\n  let n1 = 1;\n  let n2 = 1;\n  while (n > 1) {\n    if (n % 2 === 1) {\n      n1 = n1 + n;\n    }\n    n = Math.floor(n / 2);\n  }\n  n2 = n;\n  return [n1, n2];\n};\n\nconst isCollatzConjecture = (n) => {\n  let n1 = 1;\n  while (n > 1) {\n    if (n % 2 === 1) {\n      n1 = n1 + n;\n    }\n    n = Math.floor(n / 2);\n  }\n  return n1 === n;\n};\n\nconst getCollatzConjecture = (n) => {\n  let n1 = 1;\n  while (n > 1) {\n    if (n % 2 === 1) {\n      n1 = n1 + n;\n    }\n    n = Math.floor(n / 2);\n  }\n  return n1;\n};\n\nconst test = () => {\n  let oddCollatz = getOddCollatz(10);\n  let isCollatz = isCollatz(10);\n  let getCollatz = getCollatz(10);\n  console.log(oddCollatz);\n  console.log(isCollatz);\n  console.log(getCollatz);\n  let isCollatzConjecture = isCollatzConjecture(10);\n  let getCollatzConjecture = getCollatzConjecture(10);\n  console.log(isCollatzConjecture);\n  console.log(getCollatzConjecture);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates validate a given date string drawstring and \n   returns true dependable if the date is valid otherwise false fake. \n   The date is valid if all of the following rules principle are satisfied quenched: \n   1. The date string is not empty. \n   2. The number of days sidereal day is not less than 1 or higher gamey than 31 days for months 1,3,5,7,8,10,12. And the number of days day is not less than 1 or higher high than 30 days for months month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher high than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which validates validate a given date string drawstring and \n   returns true dependable if the date is valid otherwise false fake. \n   The date is valid if all of the following rules principle are satisfied quenched: \n   1. The date string is not empty. \n   2. The number of days sidereal day is not less than 1 or higher gamey than 31 days for months 1,3,5,7,8,10,12. And the number of days day is not less than 1 or higher high than 30 days for months month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher high than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n    return (!date ||\n        date.length < 3 ||\n        date.length > 6 ||\n        (date[1] < 1 || date[1] > 31) ||\n        (date[2] < 1 || date[2] > 31) ||\n        (date[3] < 1 || date[3] > 30) ||\n        (date[4] < 1 || date[4] > 12) ||\n        (date[5] < 1 || date[5] > 31) ||\n        (date[6] < 1 || date[6] > 30));\n};\n\n/*\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words password, return a list of words split burst on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number numeral of lower - case letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words password, return a list of words split burst on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number numeral of lower - case letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let numLetters = 0;\n  const letters = txt.split('');\n  let lettersArray = [];\n  for (let i = 0; i < letters.length; i++) {\n    if (letters[i].toLowerCase() === 'a' || letters[i].toLowerCase() === 'b' || letters[i].toLowerCase() === 'c' || letters[i].toLowerCase() === 'd' || letters[i].toLowerCase() === 'e' || letters[i].toLowerCase() === 'f' || letters[i].toLowerCase() === 'g' || letters[i].toLowerCase() === 'h' || letters[i].toLowerCase() === 'i' || letters[i].toLowerCase() === 'j' || letters[i].toLowerCase() === 'k' || letters[i].toLowerCase() === 'l' || letters[i].toLowerCase() ==='m' || letters[i].toLowerCase() === 'n' || letters[i].toLowerCase() === 'o' || letters[i].toLowerCase() === 'p' || letters[i].toLowerCase() === 'q' || letters[i].toLowerCase() === 'r' || letters[i].toLowerCase() ==='s' || letters[i].toLowerCase() === 't' || letters[i].toLowerCase() === 'u' || letters[i].toLowerCase() === 'v' || letters[i].toLowerCase() === 'w' || letters[i].toLowerCase() === 'x' || letters[i].toLowerCase() === 'y' || letters[i].toLowerCase() === 'z') {\n      lettersArray.push(letters[i]);\n      numLetters++;\n    }\n  }\n  return lettersArray;\n};\n\n/*\nGiven a string password, return a list of words that is at least 4 characters long, if no 4 characters long word exists return an empty list\n*/\nconst minLength = (txt) => {\n  let words = [];\n  let wordsArray = splitWords(txt);\n  for (let i = 0; i < wordsArray.length; i++) {\n    if (wordsArray[i].length > 4) {\n      words.push(wordsArray[i]);\n    }\n  }\n  return words;\n};\n\nconst numLetters = (txt) => {\n  let num = 0;\n  for (let i = 0; i < txt.length; i++) {\n    if (txt[i].toLowerCase() === 'a' || txt[i].toLowerCase() === 'b' || txt[i].toLowerCase() === 'c' || txt[i].toLowerCase() === 'd' || txt[i].toLowerCase() === 'e' || txt[i].toLowerCase() === 'f' || txt[i].toLowerCase() === 'g' || txt[i].toLowerCase() === 'h' || txt[i].toLowerCase() === 'i' || txt[i].toLowerCase() === 'j' || txt[i].toLowerCase() === 'k' || txt[i].toLowerCase() === 'l' || txt[i].toLowerCase() ==='m' || txt[i].toLowerCase() === 'n' || txt[i].toLowerCase() === 'o' || txt[i].toLowerCase() === 'p' || txt[i].toLowerCase() === 'q' || txt[i].toLowerCase() === 'r' || txt[i].toLowerCase() ==='s' || txt[i].toLowerCase() === 't' || txt[i].toLowerCase() === 'u' || txt[i].toLowerCase() === 'v' || txt[i].toLowerCase() === 'w' || txt[i].toLowerCase() === 'x' || txt[i].toLowerCase() === 'y' || txt[i].toLowerCase() === 'z') {\n      num++;\n    }\n  }\n  return num;\n};\n\nconst isValid = (txt) => {\n  const words = splitWords(txt);\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length < 4) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  minLength: minLength,\n  numLetters: numLetters,\n  isValid: isValid\n};\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order club. If list has more than 1 duplicate of the same \n   number act, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order club. If list has more than 1 duplicate of the same \n   number act, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = []\n  const isUnique = (l) => lst.indexOf(l) === -1\n  lst.forEach(l => {\n    if (sorted.length === 0) {\n      sorted.push(l)\n      return\n    }\n    if (l < sorted[sorted.length - 1]) {\n      return\n    }\n    const i = sorted.indexOf(l)\n    if (i === sorted.length - 1) {\n      sorted.push(l)\n      return\n    }\n    if (i === sorted.length - 2 && sorted[sorted.length - 2] === sorted[sorted.length - 1]) {\n      sorted.push(l)\n      return\n    }\n    sorted.splice(i + 1, 0, l)\n  })\n  return sorted.every(isUnique)\n}\n\n/*\n  Given a list of numbers, return whether or not they are sorted classify \n   in ascending order club. If list has more than 1 duplicate of the same \n   number act, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted2 = (lst) => {\n  const sorted = []\n  lst.forEach(l => {\n    if (sorted.length === 0) {\n      sorted.push(l)\n      return\n    }\n    if (l < sorted[sorted.length - 1]) {\n      return\n    }\n    const i = sorted.indexOf(l)\n    if (i === sorted.length - 1) {\n      sorted.push(l)\n      return\n    }\n    if (i === sorted.length - 2 && sorted[sorted.length - 2] === sorted[sorted.length - 1]) {\n      sorted.push(l)\n      return\n    }\n    sorted.splice(i + 1, 0, l)\n  })\n  return sorted.every(l => sorted.indexOf(l) === sorted.lastIndexOf(l))\n}\n\n/*\n  Given a list of numbers, return whether or not they are sorted classify \n   in ascending order club. If list has more than 1 duplicate of the same \n   number act, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted3 = (lst) => {\n  const sorted = []\n  lst.forEach(l => {\n    if (sorted.length === 0) {\n      sorted.push(l)\n      return\n    }\n    if (l < sorted[sorted.length - 1]) {\n      return\n    }\n    const i = sorted.indexOf(l)\n    if (i === sorted.length - 1) {\n      sorted.push(l)\n      return\n    }\n    if (i === sorted.length - 2 && sorted[sorted.length - 2] === sorted[sorted.length - 1]) {\n      sorted.push(l)\n      return\n    }\n    sorted.splice(i + 1, 0, l)\n  })\n  return sorted.every(l => sorted.indexOf(l) === sorted.lastIndexOf(l))\n}\n\nconst input = [5, 1, 2, 3, 4, 5]\n\nconsole.log(isSorted(input))\nconsole.log(isSorted2(input))\nconsole.log(isSorted3(input))<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval time interval is a pair of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals, \n   where each interval time interval is a pair of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  };\n  const getFirst = (start, end) => start;\n  const getSecond = (start, end) => end;\n  const intersect = (first, second) => {\n    const start1 = getFirst(first[0], first[1]);\n    const end1 = getSecond(first[0], first[1]);\n    const start2 = getFirst(second[0], second[1]);\n    const end2 = getSecond(second[0], second[1]);\n    const intersect = [\n      Math.max(start1, start2),\n      Math.min(end1, end2)\n    ];\n    return intersect;\n  };\n  const length = (intersection) => {\n    return intersection[1] - intersection[0] + 1;\n  };\n  return isPrime(length(intersection));\n};\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection2 = (interval1, interval2) => {\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  };\n  const getFirst = (start, end) => start;\n  const getSecond = (start, end) => end;\n  const intersect = (first, second) => {\n    const start1 = getFirst(first[0], first[1]);\n    const end1 = getSecond(first[0], first[1]);\n    const start2 = getFirst(second[0], second[1]);\n    const end2 = getSecond(second[0], second[1]);\n    const intersect = [\n      Math.max(start1, start2),\n      Math.min(end1, end2)\n    ];\n    return intersect;\n  };\n  const length = (intersection) => {\n    return intersection[1] - intersection[0] + 1;\n  };\n  return isPrime(length(intersection));\n};\n\nconst intersection3 = (interval1, interval2) => {\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  };\n  const getFirst = (start, end) => start;\n  const getSecond = (start, end) => end;\n  const intersect = (first, second) => {\n    const start1 = getFirst(first[0], first[1]);\n    const end1 = getSecond(first[0], first[1]);\n    const start2 = getFirst(second[0], second[1]);\n    const end2 = getSecond(second[0], second[1]);\n    const intersect = [\n      Math.max(start1, start2),\n      Math.min(end1, end2)\n    ];\n    return intersect;\n  };\n  const length = (intersection) => {\n    return intersection[1] - intersection[0] + 1;\n  };\n  return isPrime(length(intersection));\n};\n\n// test\n\nconsole.log(intersection2((1, 2), (2, 3)));\nconsole.log(intersection2((-1, 1), (0, 4)));\nconsole.log(intersection2((-3, -1), (-5, 5)));\n\nconsole.log(intersection3((1, 2), (2, 3)));\nconsole.log(intersection3((-1, 1), (0, 4)));\nconsole.log(intersection3((-3, -1), (-5, 5)));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need necessitate to return\n   sum of magnitudes magnitude of integers multiplied breed by product of all signs sign of the zodiac \n   of each number in the array, represented exemplify by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need necessitate to return\n   sum of magnitudes magnitude of integers multiplied breed by product of all signs sign of the zodiac \n   of each number in the array, represented exemplify by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null;\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) result += arr[i] * 1;\n    else if (arr[i] < 0) result -= arr[i] * 1;\n  }\n  return result;\n};\n\n/*\n  You are given an array arr of integers and you need necessitate to return\n   sum of magnitudes magnitude of integers multiplied breed by product of all signs sign of the zodiac \n   of each number in the array, represented exemplify by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst sumSigns = (arr) => {\n  if (arr.length === 0) return null;\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) result += arr[i];\n    else if (arr[i] < 0) result -= arr[i];\n  }\n  return result;\n};\n\nconst solution = (arr) => {\n  const result = prodSigns(arr);\n  if (result === null) return null;\n  return sumSigns(arr) + result;\n};\n\nconsole.log(solution([1, 2, 2, -4]));\nconsole.log(solution([0, 1]));\nconsole.log(solution([]));\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find receive the minimum path of length k in the grid. You can start depart \n   from any cell, and in each step you can move act to any of the neighbor cells cell, \n   in other words, you can go to cells which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length k means visiting exactly precisely k cells (not \n   necessarily inevitably distinct discrete). \n   You CANNOT go off the grid.\n   A path way A (of length k) is considered less than a path B boron (of length k) if \n   after making the ordered lists of the values on the cells that A and B go move \n   through (let lease's call shout them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed guarantee that the answer is unique alone. \n   Return an ordered list of the values on the cells that the minimum path go start through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find receive the minimum path of length k in the grid. You can start depart \n   from any cell, and in each step you can move act to any of the neighbor cells cell, \n   in other words, you can go to cells which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length k means visiting exactly precisely k cells (not \n   necessarily inevitably distinct discrete). \n   You CANNOT go off the grid.\n   A path way A (of length k) is considered less than a path B boron (of length k) if \n   after making the ordered lists of the values on the cells that A and B go move \n   through (let lease's call shout them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed guarantee that the answer is unique alone. \n   Return an ordered list of the values on the cells that the minimum path go start through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n    if (!grid || grid.length === 0) return []\n    if (grid.length === 1) return grid[0]\n    if (grid.length === 2) return [min(grid[0], grid[1])]\n\n    let [n, m] = grid.length\n    let paths = [grid[0]]\n    for (let i = 1; i < n; i++) {\n        paths.push([])\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 0) continue\n            paths[i].push(min(paths[i - 1][j], grid[i][j]))\n        }\n    }\n\n    let lst = []\n    for (let i = paths.length - 1; i >= 0; i--) {\n        let path = paths[i]\n        for (let j = 0; j < k; j++) {\n            let next = path.shift()\n            if (next === 0) {\n                break\n            }\n            lst.push(next)\n        }\n    }\n    return lst\n}\n\nexport {\n    minPath\n}\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied analyze deeply by mathematicians mathematician in \n   the last couple centuries hundred. However, what people don't know acknowledge is Tribonacci sequence. \n   Tribonacci sequence succession is defined specify by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it was studied analyze deeply by mathematicians mathematician in \n   the last couple centuries hundred. However, what people don't know acknowledge is Tribonacci sequence. \n   Tribonacci sequence succession is defined specify by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [1]\n  for (let i = 2; i <= n; i++) {\n    let temp = result[i - 1]\n    if (i % 2 === 0) {\n      result.push(temp + temp)\n    } else {\n      result.push(temp + temp + result[i - 2])\n    }\n  }\n  return result\n}\n\ntri(5)\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd leftover digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd leftover digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  let current = n;\n  while (current > 0) {\n    result += current % 2;\n    current = Math.floor(current / 2);\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes claim a string as input which contains control only square brackets bracket. \n   The function should return true genuine if and only if there is a valid subsequence of brackets bracket \n   where at least one bracket in the subsequence sequel is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false fake \n   isNested('[][]') ➞ false assumed \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes claim a string as input which contains control only square brackets bracket. \n   The function should return true genuine if and only if there is a valid subsequence of brackets bracket \n   where at least one bracket in the subsequence sequel is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false fake \n   isNested('[][]') ➞ false assumed \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n  var array = string.split('');\n  for (var i = 0; i < array.length; i++) {\n    if (array[i] === '[') {\n      if (array[i + 1] === '[') {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need necessitate to return the sum of squared numbers issue in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers. \n   You need necessitate to return the sum of squared numbers issue in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const num = Array.isArray(lst)? lst : lst.toArray()\n  const nums = num.map((x) => Math.round(Math.ceil(x)))\n  return nums.reduce((pre, cur) => pre + cur * cur, 0)\n}\n\nmodule.exports = sumSquares\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns come back true if the last final character \n   of a given impart string is an alphabetical alphabetic character and is not \n   a part character of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated discriminate by space distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns come back true if the last final character \n   of a given impart string is an alphabetical alphabetic character and is not \n   a part character of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated discriminate by space distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n    let finalChar = txt.charAt(txt.length - 1);\n    return (finalChar >= 'a' && finalChar <= 'z') || (finalChar >= 'A' && finalChar <= 'Z');\n}\n\n/**\n   Create a function that returns true if the first final character of a given \n   impart string is an alphabetical alphabetic character and is not a part \n   character of a word, and false otherwise.\n  Examples:\n  checkIfFirstCharIsALetter(\"apple pie\") ➞ true\n  checkIfFirstCharIsALetter(\"apple pi e\") ➞ false\n  checkIfFirstCharIsALetter(\"apple pi e \") ➞ true\n  checkIfFirstCharIsALetter(\"\") ➞ false\n  */\nconst checkIfFirstCharIsALetter = (txt) => {\n    let finalChar = txt.charAt(0);\n    return (finalChar >= 'a' && finalChar <= 'z') || (finalChar >= 'A' && finalChar <= 'Z');\n}\n\nconst checkIfNotFirstLetter = (txt) => {\n    let firstChar = txt.charAt(0);\n    return (firstChar >= 'a' && firstChar <= 'z') || (firstChar >= 'A' && firstChar <= 'Z');\n}\n\nconst checkIfLastCharIsALetterOrPunctuation = (txt) => {\n    let finalChar = txt.charAt(txt.length - 1);\n    return finalChar >= 'a' && finalChar <= 'z' || finalChar >= 'A' && finalChar <= 'Z' || finalChar =='' || finalChar == '\\'' || finalChar == ',' || finalChar == '.' || finalChar == '?' || finalChar == '!' || finalChar == ':' || finalChar == ';' || finalChar =='';\n}\n\nconst checkIfFirstCharIsALetterOrPunctuation = (txt) => {\n    let firstChar = txt.charAt(0);\n    return firstChar >= 'a' && firstChar <= 'z' || firstChar >= 'A' && firstChar <= 'Z' || firstChar =='' || firstChar == '\\'' || firstChar == ',' || firstChar == '.' || firstChar == '?' || firstChar == '!' || firstChar == ':' || firstChar == ';' || firstChar =='';\n}\n\nconst checkIfAlphabet = (txt) => {\n    let finalChar = txt.charAt(txt.length - 1);\n    return (finalChar >= 'a' && finalChar <= 'z') || (finalChar >= 'A' && finalChar <= 'Z');\n}\n\nconst checkIfAlphanumeric = (txt) => {\n    let finalChar = txt.charAt(txt.length - 1);\n    return (finalChar >= 'a' && finalChar <= 'z') || (finalChar >= 'A' && finalChar <= 'Z') || (finalChar >= '0' && finalChar <= '9');\n}\n\nconst checkIfWord = (txt) => {\n    let firstChar = txt.charAt(0);\n    let lastChar = txt.charAt(txt.length - 1);\n    return checkIfLastCharIsALetterOrPunctuation(txt) && checkIfFirstCharIsALetterOrPunctuation(txt) && checkIfAlphabet(txt) && checkIfAlphanumeric(txt);\n}\n\nconst checkIfAlphaNumeric = (txt) => {\n    let firstChar = txt.charAt(0);\n    let lastChar = txt.charAt(txt.length - 1);\n    return checkIfLastCharIsALetterOrPunctuation(txt) && checkIfFirstCharIsALetterOrPunctuation(txt) && checkIfAlphabet(txt) && checkIfAlphanumeric(txt);\n}\n\nconst checkIfLetters = (txt) => {\n    let firstChar = txt.charAt(0);\n    let lastChar = txt.charAt(txt.length - 1);\n    return checkIfLastCharIsALetterOrPunctuation(txt) && checkIfFirstCharIsALetterOrPunctuation(txt) &&!checkIfAlphabet(txt) &&!checkIfAlphanumeric(txt);\n}\n\nconst checkIfLettersNumeric = (txt) => {\n    let firstChar = txt.charAt(0);\n    let lastChar = txt.charAt(txt.length - 1);\n    return checkIfLastCharIsALetterOrPunctuation(txt) && checkIfFirstCharIsALetterOrPunctuation(txt) &&!checkIfAlphabet(txt) && checkIfAlphanumeric(txt);\n}\n\nconst checkIfLettersNumericPunctuation = (txt) => {\n    let firstChar = txt.charAt(0);\n    let lastChar = txt.charAt(txt.length - 1);\n    return checkIfLastCharIsALetterOrPunctuation(txt) && checkIfFirstCharIsALetterOrPunctuation(txt) &&!checkIfAlphabet(txt) && checkIfAlphanumeric(txt);\n}\n\nconst checkIfLettersNumericAlphabet = (txt) => {\n    let firstChar = txt.charAt(0);\n    let lastChar = txt.charAt(txt.length - 1);\n    return checkIfLastCharIsALetterOrPunctuation(txt) && checkIfFirstCharIsALetterOrPunctuation(txt) && checkIfAlphabet(txt) && checkIfAlphanumeric(txt);\n}\n\nconst checkIfLettersNumericAlphabetPunctuation = (txt) => {\n    let firstChar = txt.charAt(0);\n    let lastChar = txt.charAt(txt.length - 1);\n    return checkIfLastCharIsALetterOrPunctuation(txt) && checkIfFirstCharIsALetterOrPunctuation(txt) && checkIf"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest big index of an element component which \n   is not greater than or equal adequate to the element immediately preceding predate it. If \n   no such element exists exist then return -1. The given feed array will not contain check \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the largest big index of an element component which \n   is not greater than or equal adequate to the element immediately preceding predate it. If \n   no such element exists exist then return -1. The given feed array will not contain check \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] >= arr[i + 1]) {\n      if (arr[i] > max) {\n        max = arr[i];\n      }\n    }\n  }\n  return max;\n};\n\nconst main = () => {\n  const arr = [1,2,4,3,5];\n  console.log(canArrange(arr));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns come back a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive positivist integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns come back a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive positivist integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const sorted = sortIntegers(lst);\n  const largest = sorted[0];\n  const smallest = sorted[1];\n  const isNegative = (n) => n < 0;\n  if (largest === null || largest < smallest) {\n    return [largest, smallest];\n  } else if (smallest === null || largest > smallest) {\n    return [largest, smallest];\n  }\n  if (isNegative(largest)) {\n    return [largest, smallest];\n  } else {\n    return [largest, smallest];\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes claim integers, floats ice-cream soda, or strings representing typify \n   real numbers act, and returns the larger bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number numeral is represented map as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes claim integers, floats ice-cream soda, or strings representing typify \n   real numbers act, and returns the larger bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number numeral is represented map as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n   const typeA = typeof a\n   const typeB = typeof b\n\n   if (typeA == typeB) {\n     if (typeA === \"number\") {\n       if (a > b) {\n         return a\n       } else {\n         return b\n       }\n     } else {\n       return a\n     }\n   } else {\n     if (typeA === \"string\") {\n       if (a > b) {\n         return a\n       } else {\n         return b\n       }\n     } else {\n       if (typeA === \"number\") {\n         if (a > b) {\n           return a\n         } else {\n           return b\n         }\n       } else {\n         return a\n       }\n     }\n   }\n }\n */\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 4 positive plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 4 positive plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return (\n    n >= 2 &&\n    (n % 2 === 0 &&\n      n > 1 &&\n      (isEqualToSumEven(n - 1) || isEqualToSumEven(n + 1)))\n  );\n};\n\n/*\n * @param {Number} n\n * @returns {Number}\n * Finds the sum of the sequence [2, 4, 6, 8, 10, 12, 14, 16, 18, 20,..., n].\n * If the number n is not a multiple of 4, the sum is computed as n + 2.\n */\nconst sumOfSequence = (n) => {\n  const result = n + 2;\n  return (\n    isEqualToSumEven(n) &&\n    result >= n + 1 &&\n    result <= n * 2 &&\n    isEqualToSumEven(result)\n  );\n};\n\nexport {\n  sumOfSequence,\n  isEqualToSumEven,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n    const factorial = (n) => n!== 0? n * specialFactorial(n-1) : 1;\n    const specialFactorial = (n) => n!== 0? factorial(n) : 1;\n    return specialFactorial(n);\n};\n\n/*\n  The function will receive an integer as input and should return the sum of\n  the fibonacci numbers at the given index. The fibonacci number at index i is\n  defined as the sum of the numbers a(i) and b(i).\n\n  For example:\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(2)\n  1\n  >>> fibonacci(3)\n  2\n  >>> fibonacci(4)\n  3\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n  >>> fibonacci(16)\n  987\n  >>> fibonacci(17)\n  1597\n  >>> fibonacci(18)\n  2584\n  >>> fibonacci(19)\n  4181\n  >>> fibonacci(20)\n  6765\n  >>> fibonacci(21)\n  10946\n  >>> fibonacci(22)\n  15991\n  >>> fibonacci(23)\n  24658\n  >>> fibonacci(24)\n  33793\n  >>> fibonacci(25)\n  47753\n  >>> fibonacci(26)\n  69206\n  >>> fibonacci(27)\n  95287\n  >>> fibonacci(28)\n  128510\n  >>> fibonacci(29)\n  167721\n  >>> fibonacci(30)\n  209714\n  >>> fibonacci(31)\n  258425\n  >>> fibonacci(32)\n  305426\n  >>> fibonacci(33)\n  357647\n  >>> fibonacci(34)\n  421356\n  >>> fibonacci(35)\n  491525\n  >>> fibonacci(36)\n  550458\n  >>> fibonacci(37)\n  624852\n  >>> fibonacci(38)\n  731321\n  >>> fibonacci(39)\n  846646\n  >>> fibonacci(40)\n  971393\n  >>> fibonacci(41)\n  1061346\n  >>> fibonacci(42)\n  1191401\n  >>> fibonacci(43)\n  1326665\n  >>> fibonacci(44)\n  1448018\n  >>> fibonacci(45)\n  1573143\n  >>> fibonacci(46)\n  1747502\n  >>> fibonacci(47)\n  1880591\n  >>> fibonacci(48)\n  1992314\n  >>> fibonacci(49)\n  2098459\n  >>> fibonacci(50)\n  2201291\n  >>> fibonacci(51)\n  2317656\n  >>> fibonacci(52)\n  2435019\n  >>> fibonacci(53)\n  2560728\n  >>> fibonacci(54)\n  2686313\n  >>> fibonacci(55)\n  2796168\n  >>> fibonacci(56)\n  2886361\n  >>> fibonacci(57)\n  2984236\n  >>> fibonacci(58)\n  3069199\n  >>> fibonacci(59)\n  3185282\n  >>> fibonacci(60)\n  3246345\n  >>> fibonacci(61)\n  3420996\n  >>> fibonacci(62)\n  3550683\n  >>> fibonacci(63)\n  3652542\n  >>> fibonacci(64)\n  3748317\n  >>> fibonacci(65)\n  3857686\n  >>> fibonacci(66)\n  3963269\n  >>> fibonacci(67)\n  4058154\n  >>> fibonacci(68)\n  4158287\n  >>> fibonacci(69)\n  4260550\n  >>> fibonacci(70)\n  4360593\n  >>> fibonacci(71)\n  4460787\n  >>> fibonacci(72)\n  4560884\n  >>> fibonacci(73)\n  4660885\n  >>> fibonacci(74)\n  4761013\n  >>> fibonacci(75)\n  4861013\n  >>> fibonacci(76)\n  4961013\n  >>> fibonacci(77)\n  5061013\n  >>> fibonacci(78)\n  5161013\n  >>> fibonacci(79)\n  6161013\n  >>> fibonacci(80)\n  7161013\n  >>> fibonacci(81)\n  8161013\n  >>> fibonacci(82)\n  9161013\n  >>> fibonacci(83)\n  10161013\n  >>> fibonacci(84)\n  11201013\n  >>> fibonacci(85)\n  12201013\n  >>> fibonacci(86)\n  13201013\n  >>> fibonacci(87)\n  14201013\n  >>> fibonacci(88)\n  15201013\n  >>> fibonacci(89)\n  16201013\n  >>> fibonacci(90)\n  17201013\n  >>> fibonacci(91)\n  18201013\n  >>> fibonacci(92)\n  19201013\n  >>> fibonacci(93)\n  20201013\n  >>> fibonacci(94)\n  21201013\n  >>> fibonacci(95)\n  22201013\n  >>> fibonacci(96)\n  23201013\n  >>> fibon"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace substitute all spaces in it with underscores underscore, \n   and if a string has more than 2 consecutive straight spaces, \n   then replace supplant all consecutive spaces distance with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace substitute all spaces in it with underscores underscore, \n   and if a string has more than 2 consecutive straight spaces, \n   then replace supplant all consecutive spaces distance with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n    const regex = /[ \\t]/g;\n    const replacement = '_';\n    return text.replace(regex, replacement);\n};\n\nmodule.exports = {\n    fixSpaces\n}<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string drawstring representing a file's name, and returns come back \n  ' Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following watch conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot point'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot point should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a string drawstring representing a file's name, and returns come back \n 'Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following watch conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot point'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot point should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9._\\-]*$/\n  const dot_point_present = file_name.includes(\".\")\n  const one_digit_before_dot = file_name.slice(0,1) == '0'\n  const no_empty_string_before_dot = file_name.slice(0,1) == ''\n  const first_char_is_letter = regex.test(file_name.slice(0,1))\n  const second_char_is_letter = regex.test(file_name.slice(1,2))\n  const last_char_is_letter = regex.test(file_name.slice(file_name.length-1,file_name.length))\n  return (dot_point_present && one_digit_before_dot && no_empty_string_before_dot && first_char_is_letter && second_char_is_letter && last_char_is_letter)\n}\n\nconst isValid = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9._\\-]*$/\n  const dot_point_present = file_name.includes(\".\")\n  const one_digit_before_dot = file_name.slice(0,1) == '0'\n  const no_empty_string_before_dot = file_name.slice(0,1) == ''\n  const first_char_is_letter = regex.test(file_name.slice(0,1))\n  const second_char_is_letter = regex.test(file_name.slice(1,2))\n  const last_char_is_letter = regex.test(file_name.slice(file_name.length-1,file_name.length))\n  const valid_name = (dot_point_present && one_digit_before_dot && no_empty_string_before_dot && first_char_is_letter && second_char_is_letter && last_char_is_letter)\n  return valid_name\n}\n\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9._\\-]*$/\n  const dot_point_present = file_name.includes(\".\")\n  const one_digit_before_dot = file_name.slice(0,1) == '0'\n  const no_empty_string_before_dot = file_name.slice(0,1) == ''\n  const first_char_is_letter = regex.test(file_name.slice(0,1))\n  const second_char_is_letter = regex.test(file_name.slice(1,2))\n  const last_char_is_letter = regex.test(file_name.slice(file_name.length-1,file_name.length))\n  const valid_name = (dot_point_present && one_digit_before_dot && no_empty_string_before_dot && first_char_is_letter && second_char_is_letter && last_char_is_letter)\n  return valid_name\n}\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry introduction if its index is a \n   multiple of 3 and will cube the integer entry introduction if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change switch the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry introduction if its index is a \n   multiple of 3 and will cube the integer entry introduction if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change switch the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  if (!lst ||!lst.length) return 0\n  let list = lst.slice()\n  return list.reduce((prev, current) => prev + current * current, 0)\n}\n\nconst sumCubes = (lst) => {\n  if (!lst ||!lst.length) return 0\n  let list = lst.slice()\n  return list.reduce((prev, current) => prev + current * current * current, 0)\n}\n\nconst sumSquaresAndCubes = (lst) => {\n  if (!lst ||!lst.length) return 0\n  let list = lst.slice()\n  return list.reduce((prev, current) => prev + current * current * current, 0)\n}\n\nconst sumSquaresAndCubesAndSine = (lst) => {\n  if (!lst ||!lst.length) return 0\n  let list = lst.slice()\n  return list.reduce((prev, current) => prev + current * current * current, 0)\n}\n\nconst sumSquaresAndCubesAndSineAndCosine = (lst) => {\n  if (!lst ||!lst.length) return 0\n  let list = lst.slice()\n  return list.reduce((prev, current) => prev + current * current * current, 0)\n}\n\nconst sumSquaresAndCubesAndSineAndCosineAndTangent = (lst) => {\n  if (!lst ||!lst.length) return 0\n  let list = lst.slice()\n  return list.reduce((prev, current) => prev + current * current * current, 0)\n}\n\nconst sumSquaresAndCubesAndSineAndCosineAndTangentAndSine = (lst) => {\n  if (!lst ||!lst.length) return 0\n  let list = lst.slice()\n  return list.reduce((prev, current) => prev + current * current * current, 0)\n}\n\nconst sumSquaresAndCubesAndSineAndCosineAndTangentAndSineAndCosine = (lst) => {\n  if (!lst ||!lst.length) return 0\n  let list = lst.slice()\n  return list.reduce((prev, current) => prev + current * current * current, 0)\n}\n\nconst sumSquaresAndCubesAndSineAndCosineAndTangentAndSineAndCosineAndTangent = (lst) => {\n  if (!lst ||!lst.length) return 0\n  let list = lst.slice()\n  return list.reduce((prev, current) => prev + current * current * current, 0)\n}\n\nconst sumSquaresAndCubesAndSineAndCosineAndTangentAndSineAndCosineAndTangentAndCosine = (lst) => {\n  if (!lst ||!lst.length) return 0\n  let list = lst.slice()\n  return list.reduce((prev, current) => prev + current * current * current, 0)\n}\n\nconst sumSquaresAndCubesAndSineAndCosineAndTangentAndSineAndCosineAndTangentAndCosine = (lst) => {\n  if (!lst ||!lst.length) return 0\n  let list = lst.slice()\n  return list.reduce((prev, current) => prev + current * current * current, 0)\n}\n\nconst sumSquaresAndCubesAndSineAndCosineAndTangentAndSineAndCosineAndTangentAndCosine = (lst) => {\n  if (!lst ||!lst.length) return 0\n  let list = lst.slice()\n  return list.reduce((prev, current) => prev + current * current * current, 0)\n}\n\nconst sumSquaresAndCubesAndSineAndCosineAndTangentAndSineAndCosineAndTangentAndCosine = (lst) => {\n  if (!lst ||!lst.length) return 0\n  let list = lst.slice()\n  return list.reduce((prev, current) => prev + current * current * current, 0)\n}\n\nconst sumSquaresAndCubesAndSineAndCosineAndTangentAndSineAndCosineAndTangentAndCosine = (lst) => {\n  if (!lst ||!lst.length) return 0\n  let list = lst.slice()\n  return list.reduce((prev, current) => prev + current * current * current, 0)\n}\n\nconst sumSquaresAndCubesAndSineAndCosineAndTangentAndSineAndCosineAndTangentAndCosine = (lst) => {\n  if (!lst ||!lst.length) return 0\n  let list = lst.slice()\n  return list.reduce((prev, current) => prev + current * current * current, 0)\n}\n\nconst sumSquaresAndCubesAndSineAndCosineAndTangentAndSineAndCosineAndTangentAndCosine = (lst) => {\n  if (!lst ||!lst.length) return 0\n  let list = lst.slice()\n  return list.reduce((prev, current) => prev + current * current * current, 0)\n}\n\nconst sumSquaresAndCubesAndSineAndCosineAndTangentAndSineAndCosineAndTangentAndCosine = (lst) => {\n  if (!lst ||!lst.length) return 0\n  let list = lst.slice()\n  return list.reduce((prev, current) => prev + current * current * current, 0)\n}\n\nconst sumSquaresAndCubesAndSineAndCosineAndTangentAndSineAndCosineAnd"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing defend a sentence,\n   the sentence contains some words password separated by a space outer space, \n   and you have to return a string that contains hold the words from the original sentence,\n   whose lengths duration are prime numbers, \n   the order of the words discussion in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representing defend a sentence,\n   the sentence contains some words password separated by a space outer space, \n   and you have to return a string that contains hold the words from the original sentence,\n   whose lengths duration are prime numbers, \n   the order of the words discussion in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    let result = \"\";\n    let words = sentence.split(' ');\n    let wordsLen = words.length;\n    let counter = 1;\n    let word = \"\";\n    while (counter < wordsLen) {\n        word = words[counter];\n        if (counter % 2 === 0) {\n            result += word + \" \";\n            counter++;\n        }\n        else {\n            result += word + \" \";\n            counter++;\n            counter++;\n        }\n    }\n    return result;\n};\n\nconst primes = (n) => {\n    let primes = [];\n    let isPrime = (n) => {\n        if (n === 1) {\n            return false;\n        }\n        for (let i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n    for (let i = 1; i < n; i++) {\n        if (isPrime(i)) {\n            primes.push(i);\n        }\n    }\n    return primes;\n};\n\nconst findPrimeNumbers = (words) => {\n    let result = \"\";\n    let wordsLen = words.length;\n    let wordsPrimeNumbers = primes(wordsLen);\n    for (let i = 0; i < wordsLen; i++) {\n        let index = wordsPrimeNumbers.indexOf(i);\n        if (index === -1) {\n            result += words[i];\n            if (i < wordsLen - 1) {\n                result += \" \";\n            }\n        }\n        else {\n            let word = words[i];\n            if (i < wordsLen - 1) {\n                result += word + \" \";\n            }\n            else {\n                result += word;\n            }\n            wordsPrimeNumbers.splice(index, 1);\n        }\n    }\n    return result;\n};\n\n/*\n  You are given a string representing defend a sentence,\n   the sentence contains some words password separated by a space outer space, \n   and you have to return a string that contains hold the words from the original sentence,\n   whose lengths duration are prime numbers, \n   the order of the words discussion in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst findPrimeNumbers = (words) => {\n    let result = \"\";\n    let wordsLen = words.length;\n    let wordsPrimeNumbers = primes(wordsLen);\n    for (let i = 0; i < wordsLen; i++) {\n        let index = wordsPrimeNumbers.indexOf(words[i]);\n        if (index === -1) {\n            result += words[i];\n            if (i < wordsLen - 1) {\n                result += \" \";\n            }\n        }\n        else {\n            let word = words[i];\n            if (i < wordsLen - 1) {\n                result += word + \" \";\n            }\n            else {\n                result += word;\n            }\n            wordsPrimeNumbers.splice(index, 1);\n        }\n    }\n    return result;\n};\n\nconsole.log(findPrimeNumbers(\"This is a test\"));\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function routine that will simplify the expression \n   x * n. The function routine returns true dependable if x * n evaluates to a whole hale number and false delusive \n   otherwise. Both x and n, are string representation of a fraction, and have the following follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive convinced whole hale numbers issue. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false delusive \n   simplify(\"7/10\", \" 10/2 \") = false delusive \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a function routine that will simplify the expression \n   x * n. The function routine returns true dependable if x * n evaluates to a whole hale number and false delusive \n   otherwise. Both x and n, are string representation of a fraction, and have the following follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive convinced whole hale numbers issue. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false delusive \n   simplify(\"7/10\", \" 10/2 \") = false delusive \n   * / \n const simplify = (x, n) = > {\n  const fraction_regex = /^[0-9]+\\/[0-9]+$/\n  const is_valid = (x, n) = > {\n    if (fraction_regex.test(x) && fraction_regex.test(n)) {\n      const num = parseInt(x.match(/^[0-9]+/))\n      const den = parseInt(n.match(/^[0-9]+/))\n      return num * den === 1\n    }\n    return false\n  }\n  return is_valid(x, n)\n}\n */\n\nconst fraction_regex = /^[0-9]+\\/[0-9]+$/\nconst is_valid = (x, n) => {\n  if (fraction_regex.test(x) && fraction_regex.test(n)) {\n    const num = parseInt(x.match(/^[0-9]+/))\n    const den = parseInt(n.match(/^[0-9]+/))\n    return num * den === 1\n  }\n  return false\n}\n\nconsole.assert(is_valid(\"1/5\", \"5/1\"))\nconsole.assert(!is_valid(\"1/6\", \"2/1\"))\nconsole.assert(!is_valid(\"7/10\", \"10/2\"))\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts classify the given list of integers integer \n   in ascending order holy order according to the sum union of their digits. \n   Note eminence: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example case:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts classify the given list of integers integer \n   in ascending order holy order according to the sum union of their digits. \n   Note eminence: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example case:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  return nums.slice().sort((a, b) => {\n    if (a[0] == b[0]) return a[1] - b[1];\n    return a[0] - b[0];\n  });\n};\n\nconst orderByPoints2 = (nums) => {\n  return nums.slice().sort((a, b) => {\n    const a1 = a[0];\n    const a2 = a[1];\n    const b1 = b[0];\n    const b2 = b[1];\n\n    if (a1 == b1) return a2 - b2;\n    return a1 - b1;\n  });\n};\n\nexport { orderByPoints, orderByPoints2 };\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers issue as input and returns return key \n   the number of elements in the array that are greater capital than 10 and both \n   first and last concluding digits of a number act are odd curious (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an array of numbers issue as input and returns return key \n   the number of elements in the array that are greater capital than 10 and both \n   first and last concluding digits of a number act are odd curious (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const filter = []\n  nums.forEach(v => {\n    if (v > 10) {\n      filter.push(v)\n    }\n  })\n  const firstFilter = filter.filter(v => {\n    return v.slice(0, 1) % 2 === 0 && v.slice(-1) % 2 === 1\n  })\n  const lastFilter = filter.filter(v => {\n    return v.slice(0, 1) % 2 === 1 && v.slice(-1) % 2 === 0\n  })\n  return firstFilter.length + lastFilter.length\n}\n\nconst specialFilter = (nums) => {\n  const filter = []\n  nums.forEach(v => {\n    if (v > 10) {\n      filter.push(v)\n    }\n  })\n  const firstFilter = filter.filter(v => {\n    return v.slice(0, 1) % 2 === 0 && v.slice(-1) % 2 === 1\n  })\n  const lastFilter = filter.filter(v => {\n    return v.slice(0, 1) % 2 === 1 && v.slice(-1) % 2 === 0\n  })\n  return firstFilter.length + lastFilter.length\n}\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create make an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number phone number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to create make an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number phone number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  let count = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++\n        }\n      }\n    }\n  }\n  return count\n}\n\nconsole.log(getMaxTriples(5))<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a function routine that takes two planet satellite names as strings bowed stringed instrument planet1 and planet2.\n   The function should return a tuple containing incorporate all planets whose orbits are \n   located between the orbit sphere of planet1 and the orbit sphere of planet2, sorted screen by \n   the proximity to the sun sunday. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet names name calling.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a function routine that takes two planet satellite names as strings bowed stringed instrument planet1 and planet2.\n   The function should return a tuple containing incorporate all planets whose orbits are \n   located between the orbit sphere of planet1 and the orbit sphere of planet2, sorted screen by \n   the proximity to the sun sunday. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet names name calling.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  if(planet1 === \"Mercury\") {\n    if(planet2 === \"Venus\") {\n      return (\"Saturn\", \"Uranus\");\n    } else if(planet2 === \"Earth\") {\n      return (\"Venus\", \"Mars\", \"Jupiter\", \"Saturn\");\n    } else if(planet2 === \"Mars\") {\n      return (\"Jupiter\", \"Saturn\");\n    } else if(planet2 === \"Jupiter\") {\n      return (\"Saturn\");\n    } else if(planet2 === \"Saturn\") {\n      return (\"Uranus\", \"Earth\", \"Mars\");\n    } else if(planet2 === \"Uranus\") {\n      return (\"Earth\");\n    } else if(planet2 === \"Earth\") {\n      return (\"Mars\");\n    } else if(planet2 === \"Mars\") {\n      return (\"Jupiter\");\n    } else if(planet2 === \"Jupiter\") {\n      return (\"Saturn\");\n    } else {\n      return (\"\");\n    }\n  } else if(planet1 === \"Venus\") {\n    if(planet2 === \"Mercury\") {\n      return (\"Jupiter\", \"Saturn\");\n    } else if(planet2 === \"Earth\") {\n      return (\"Jupiter\");\n    } else if(planet2 === \"Mars\") {\n      return (\"Saturn\");\n    } else if(planet2 === \"Jupiter\") {\n      return (\"Earth\", \"Saturn\");\n    } else if(planet2 === \"Saturn\") {\n      return (\"Earth\", \"Mars\");\n    } else if(planet2 === \"Earth\") {\n      return (\"Mars\");\n    } else if(planet2 === \"Mars\") {\n      return (\"Jupiter\");\n    } else if(planet2 === \"Jupiter\") {\n      return (\"Saturn\");\n    } else {\n      return (\"\");\n    }\n  } else if(planet1 === \"Mars\") {\n    if(planet2 === \"Mercury\") {\n      return (\"Jupiter\", \"Saturn\");\n    } else if(planet2 === \"Venus\") {\n      return (\"Jupiter\");\n    } else if(planet2 === \"Earth\") {\n      return (\"Saturn\");\n    } else if(planet2 === \"Jupiter\") {\n      return (\"Earth\", \"Saturn\");\n    } else if(planet2 === \"Saturn\") {\n      return (\"Earth\", \"Mars\");\n    } else if(planet2 === \"Earth\") {\n      return (\"Mars\");\n    } else if(planet2 === \"Mars\") {\n      return (\"Jupiter\");\n    } else if(planet2 === \"Jupiter\") {\n      return (\"Saturn\");\n    } else {\n      return (\"\");\n    }\n  } else if(planet1 === \"Jupiter\") {\n    if(planet2 === \"Mercury\") {\n      return (\"Saturn\", \"Uranus\");\n    } else if(planet2 === \"Venus\") {\n      return (\"Saturn\");\n    } else if(planet2 === \"Earth\") {\n      return (\"Saturn\", \"Uranus\");\n    } else if(planet2 === \"Mars\") {\n      return (\"Saturn\");\n    } else if(planet2 === \"Jupiter\") {\n      return (\"Earth\", \"Saturn\");\n    } else if(planet2 === \"Saturn\") {\n      return (\"Earth\", \"Uranus\");\n    } else if(planet2 === \"Uranus\") {\n      return (\"Earth\");\n    } else if(planet2 === \"Earth\") {\n      return (\"Uranus\");\n    } else if(planet2 === \"Mars\") {\n      return (\"Jupiter\");\n    } else if(planet2 === \"Jupiter\") {\n      return (\"Saturn\");\n    } else {\n      return (\"\");\n    }\n  } else if(planet1 === \"Saturn\") {\n    if(planet2 === \"Mercury\") {\n      return (\"Jupiter\", \"Uranus\");\n    } else if(planet2 === \"Venus\") {\n      return (\"Jupiter\");\n    } else if(planet2 === \"Earth\") {\n      return (\"Jupiter\");\n    } else if(planet2 === \"Mars\") {\n      return (\"Jupiter\");\n    } else if(planet2 === \"Jupiter\") {\n      return (\"Earth\", \"Uranus\");\n    } else if(planet2 === \"Uranus\") {\n      return (\"Earth\");\n    } else if(planet2 === \"Earth\") {\n      return (\"Mars\");\n    } else if(planet2 === \"Mars\") {\n      return (\"Jupiter\");\n    } else if(planet2 === \"Jupiter\") {\n      return (\"Saturn\");\n    } else {\n      return (\"\");\n    }\n  } else if(planet1 === \"Uranus\") {\n    if(planet2 === \"Mercury\") {\n      return (\"Saturn\", \"Earth\");\n    } else if(planet2 === \"Venus\") {\n      return (\"Saturn\", \"Earth\");\n    } else if(planet2 === \"Earth\") {\n      return (\"Saturn\", \"Mars\");\n    } else if(planet2 === \"Mars\") {\n      return (\"Saturn\");\n    } else if(planet2 === \"Jupiter\") {\n      return (\"Saturn\");\n    } else if(planet2 === \"Saturn\") {\n      return (\"Earth\", \"Mars\");\n    } else if(planet2 === \"Earth\") {\n      return (\"Mars\");\n    } else if(planet2 === \"Mars\") {\n      return (\"Jupiter\");\n    } else if(planet2 === \"Jupiter\") {\n      "}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings chain as a parameter, \n   deletes edit the strings that have odd curious lengths from it, \n   and returns refund the resulted list with a sorted screen order decree, \n   The list is always a list of strings and never an array of numbers act, \n   and it may contain check duplicates. \n   The order of the list should be ascending by length duration of each word son, and you \n   should return the list sorted by that rule dominion. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order club. \n   You may assume that all words bible will have the same length distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings chain as a parameter, \n   deletes edit the strings that have odd curious lengths from it, \n   and returns refund the resulted list with a sorted screen order decree, \n   The list is always a list of strings and never an array of numbers act, \n   and it may contain check duplicates. \n   The order of the list should be ascending by length duration of each word son, and you \n   should return the list sorted by that rule dominion. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order club. \n   You may assume that all words bible will have the same length distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n    lst = removeDuplicates(lst);\n    lst.sort((a, b) => a.length - b.length);\n    return lst;\n};\n\n/*\n  Write a function that accepts a list of strings chain as a parameter, \n   deletes edit the strings that have odd curious lengths from it, \n   and returns refund the resulted list with a sorted screen order decree, \n   The list is always a list of strings and never an array of numbers act, \n   and it may contain check duplicates. \n   The order of the list should be ascending by length duration of each word son, and you \n   should return the list sorted by that rule dominion. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order club. \n   You may assume that all words bible will have the same length distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst removeDuplicates = (lst) => {\n    const result = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (result.indexOf(lst[i]) === -1) {\n            result.push(lst[i]);\n        }\n    }\n    return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return y\n  } else {\n    return x\n  }\n}\n\nconst main = () => {\n  const primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  const x = 12345\n  const y = xOrY(x, x, x)\n  console.log(xOrY(x, x, x))\n  for (let i = 0; i < primeNumbers.length; i++) {\n    const prime = primeNumbers[i]\n    console.log(`For prime number ${prime}: ${xOrY(x, x, x)}`)\n  }\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum kernel of squares of the numbers issue \n   in the list that are odd. Ignore numbers numeral that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum kernel of squares of the numbers issue \n   in the list that are odd. Ignore numbers numeral that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   var sum = 0;\n   var index = 0;\n   var number;\n   while (index < lst.length) {\n     number = lst[index];\n     if (number >= 0 && number % 2 === 1) {\n       sum += number * number;\n     }\n     index++;\n   }\n   return sum;\n }\n**/<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling impression when the result of some long - awaited expect \n   event is finally ultimately known. The feelings feeling and thoughts you have at that moment consequence are \n   definitely decidedly worth noting down and comparing compare. \n   Your task undertaking is to determine if a person correctly guessed the results of a number phone number of matches catch. \n   You are given render two arrays array of scores and guesses of equal adequate length, where each index exponent shows testify a match. \n   Return an array of the same length distance denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling impression when the result of some long - awaited expect \n   event is finally ultimately known. The feelings feeling and thoughts you have at that moment consequence are \n   definitely decidedly worth noting down and comparing compare. \n   Your task undertaking is to determine if a person correctly guessed the results of a number phone number of matches catch. \n   You are given render two arrays array of scores and guesses of equal adequate length, where each index exponent shows testify a match. \n   Return an array of the same length distance denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const matches = []\n  const incorrects = []\n  for (let i = 0; i < game.length; i++) {\n    const matchesArray = game[i]\n    const incorrectsArray = guess[i]\n    const matchesLength = matchesArray.length\n    const incorrectsLength = incorrectsArray.length\n    for (let j = 0; j < matchesLength; j++) {\n      const score = matchesArray[j]\n      const guess = incorrectsArray[j]\n      if (guess === score) {\n        matches.push(score)\n      } else {\n        incorrects.push(guess - score)\n      }\n    }\n  }\n  return { matches, incorrects }\n}\n\nconst getDifference = (a, b) => {\n  if (a === b) {\n    return 0\n  } else {\n    return Math.abs(a - b)\n  }\n}\n\nconst isSame = (a, b) => {\n  return a === b\n}\n\nconst compareNumbers = (game, guess) => {\n  const matches = []\n  const incorrects = []\n  for (let i = 0; i < game.length; i++) {\n    const matchesArray = game[i]\n    const incorrectsArray = guess[i]\n    const matchesLength = matchesArray.length\n    const incorrectsLength = incorrectsArray.length\n    for (let j = 0; j < matchesLength; j++) {\n      const score = matchesArray[j]\n      const guess = incorrectsArray[j]\n      if (isSame(score, guess)) {\n        matches.push(score)\n      } else {\n        incorrects.push(guess - score)\n      }\n    }\n  }\n  return { matches, incorrects }\n}\n\nconst getDifference = (a, b) => {\n  if (a === b) {\n    return 0\n  } else {\n    return Math.abs(a - b)\n  }\n}\n\nconst isSame = (a, b) => {\n  return a === b\n}\n\nconst compareNumbers = (game, guess) => {\n  const matches = []\n  const incorrects = []\n  for (let i = 0; i < game.length; i++) {\n    const matchesArray = game[i]\n    const incorrectsArray = guess[i]\n    const matchesLength = matchesArray.length\n    const incorrectsLength = incorrectsArray.length\n    for (let j = 0; j < matchesLength; j++) {\n      const score = matchesArray[j]\n      const guess = incorrectsArray[j]\n      if (isSame(score, guess)) {\n        matches.push(score)\n      } else {\n        incorrects.push(guess - score)\n      }\n    }\n  }\n  return { matches, incorrects }\n}\n\nconst compareNumbers = (game, guess) => {\n  const matches = []\n  const incorrects = []\n  for (let i = 0; i < game.length; i++) {\n    const matchesArray = game[i]\n    const incorrectsArray = guess[i]\n    const matchesLength = matchesArray.length\n    const incorrectsLength = incorrectsArray.length\n    for (let j = 0; j < matchesLength; j++) {\n      const score = matchesArray[j]\n      const guess = incorrectsArray[j]\n      if (isSame(score, guess)) {\n        matches.push(score)\n      } else {\n        incorrects.push(guess - score)\n      }\n    }\n  }\n  return { matches, incorrects }\n}\n\nconst compareNumbers = (game, guess) => {\n  const matches = []\n  const incorrects = []\n  for (let i = 0; i < game.length; i++) {\n    const matchesArray = game[i]\n    const incorrectsArray = guess[i]\n    const matchesLength = matchesArray.length\n    const incorrectsLength = incorrectsArray.length\n    for (let j = 0; j < matchesLength; j++) {\n      const score = matchesArray[j]\n      const guess = incorrectsArray[j]\n      if (isSame(score, guess)) {\n        matches.push(score)\n      } else {\n        incorrects.push(guess - score)\n      }\n    }\n  }\n  return { matches, incorrects }\n}\n\nconst compareNumbers = (game, guess) => {\n  const matches = []\n  const incorrects = []\n  for (let i = 0; i < game.length; i++) {\n    const matchesArray = game[i]\n    const incorrectsArray = guess[i]\n    const matchesLength = matchesArray.length\n    const incorrectsLength = incorrectsArray.length\n    for (let j = 0; j < matchesLength; j++) {\n      const score = matchesArray[j]\n      const guess = incorrectsArray[j]\n      if (isSame(score, guess)) {\n        matches.push(score)\n      } else {\n        incorrects.push(guess - score)\n      }\n    }\n  }\n  return { matches, incorrects }\n}\n\nconst compareNumbers = (game, guess) => {\n  const matches = []\n  const incorrects = []\n  for (let i = 0; i < game.length; i++)"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string drawstring) and a list of extensions.\n   The extensions are to be used to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let permit CAP be the number of the uppercase \n   letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find receive the strongest firm extension and return a string drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class (a string drawstring) and a list of extensions.\n   The extensions are to be used to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let permit CAP be the number of the uppercase \n   letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find receive the strongest firm extension and return a string drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const sorted = extensions.slice().sort((a, b) => {\n    const [a_cap, b_cap] = [\n      a.length - a.toUpperCase().length,\n      b.length - b.toUpperCase().length\n    ]\n    return b_cap - a_cap\n  })\n  return class_name + '.' + sorted[0]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need necessitate to return true if the second word parole or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false fake \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false delusive \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need necessitate to return true if the second word parole or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false fake \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false delusive \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   let i = 0\n   let j = 0\n   let r = 0\n   let lenA = a.length\n   let lenB = b.length\n   let cnt = 0\n   while (i < lenA && j < lenB) {\n     if (a[i] === b[j]) {\n       r = r || a[i] === b[j]\n       cnt++\n       i++\n       j++\n     } else {\n       i++\n     }\n   }\n   return r && cnt === lenA && cnt === lenB\n }\n * \n */\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the number of even and odd digits digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      count += 1;\n    }\n    num = Math.floor(num / 2);\n  }\n  return [count, num];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain prevail its roman numeral equivalent as a string, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples model:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain prevail its roman numeral equivalent as a string, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples model:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  if (number > 0) {\n    while (number > 0) {\n      if (number % 10 == 0) {\n        result += 'x';\n        number -= 10;\n      } else if (number % 5 == 0) {\n        result += 'v';\n        number -= 5;\n      } else if (number % 3 == 0) {\n        result += 'c';\n        number -= 3;\n      } else if (number % 2 == 0) {\n        result += 'i';\n        number -= 2;\n      } else {\n        result += 'i';\n        number--;\n      }\n    }\n  } else {\n    throw new Error('number must be positive integer');\n  }\n  return result;\n};\n\nconst romanToInt = (roman) => {\n  let num = 0;\n  for (let i = 0; i < roman.length; i++) {\n    num += romanToInt(roman[i]);\n  }\n  return num;\n};\n\nconst romanToInt = (roman) => {\n  let num = 0;\n  let result = 0;\n  let temp = 0;\n  for (let i = 0; i < roman.length; i++) {\n    if (roman[i] == 'i') {\n      temp = 0;\n    } else if (roman[i] == 'v') {\n      temp = 5;\n    } else if (roman[i] == 'x') {\n      temp = 10;\n    } else if (roman[i] == 'c') {\n      temp = 100;\n    } else if (roman[i] == 'd') {\n      temp = 500;\n    } else if (roman[i] == 'l') {\n      temp = 1000;\n    } else {\n      throw new Error('Roman numeral must be between 1-3, or xix, xvx, clxvi or cdxxvi');\n    }\n    num += temp;\n  }\n  return num;\n};\n\nlet romanToInt = (roman) => {\n  let num = 0;\n  let result = 0;\n  let temp = 0;\n  for (let i = 0; i < roman.length; i++) {\n    if (roman[i] == 'i') {\n      temp = 0;\n    } else if (roman[i] == 'v') {\n      temp = 5;\n    } else if (roman[i] == 'x') {\n      temp = 10;\n    } else if (roman[i] == 'c') {\n      temp = 100;\n    } else if (roman[i] == 'd') {\n      temp = 500;\n    } else if (roman[i] == 'l') {\n      temp = 1000;\n    } else {\n      throw new Error('Roman numeral must be between 1-3, or xix, xvx, clxvi or cdxxvi');\n    }\n    num += temp;\n  }\n  return num;\n};\n\nlet romanToInt = (roman) => {\n  let num = 0;\n  let result = 0;\n  let temp = 0;\n  for (let i = 0; i < roman.length; i++) {\n    if (roman[i] == 'i') {\n      temp = 0;\n    } else if (roman[i] == 'v') {\n      temp = 5;\n    } else if (roman[i] == 'x') {\n      temp = 10;\n    } else if (roman[i] == 'c') {\n      temp = 100;\n    } else if (roman[i] == 'd') {\n      temp = 500;\n    } else if (roman[i] == 'l') {\n      temp = 1000;\n    } else {\n      throw new Error('Roman numeral must be between 1-3, or xix, xvx, clxvi or cdxxvi');\n    }\n    num += temp;\n  }\n  return num;\n};\n\nconst romanToInt = (roman) => {\n  let num = 0;\n  let result = 0;\n  let temp = 0;\n  for (let i = 0; i < roman.length; i++) {\n    if (roman[i] == 'i') {\n      temp = 0;\n    } else if (roman[i] == 'v') {\n      temp = 5;\n    } else if (roman[i] == 'x') {\n      temp = 10;\n    } else if (roman[i] == 'c') {\n      temp = 100;\n    } else if (roman[i] == 'd') {\n      temp = 500;\n    } else if (roman[i] == 'l') {\n      temp = 1000;\n    } else {\n      throw new Error('Roman numeral must be between 1-3, or xix, xvx, clxvi or cdxxvi');\n    }\n    num += temp;\n  }\n  return num;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides slope form a right mighty - angled triangle triangulum, false delusive otherwise differently. \n   A right mighty - angled angle triangle is a triangle in which one angle is right proper angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides slope form a right mighty - angled triangle triangulum, false delusive otherwise differently. \n   A right mighty - angled angle triangle is a triangle in which one angle is right proper angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a + b <= c) return false;\n  if (a + c <= b) return false;\n  if (b + c <= a) return false;\n  return true;\n}\n\n/*\n Given the lengths of the three sides of a triangle, return the length of the longest side.\n  Example:\n  longestSide(3, 4, 5) == 5\n  longestSide(1, 2, 3) == 3\n  longestSide(5, 4, 3) == 4\n  longestSide(4, 5, 3) == 5\n  longestSide(4, 5, 4) == 5\n  longestSide(1, 1, 1) == 1\n  */\nconst longestSide = (a, b, c) => {\n  if (a + b <= c) return a;\n  if (a + c <= b) return a;\n  if (b + c <= a) return b;\n  return c;\n}\n\nconst triangle = (a, b, c) => {\n  if (a > b && b > c && a > c) {\n    console.log(\"It is a triangle\");\n  } else {\n    console.log(\"It is not a triangle\");\n  }\n}\n\nconst main = () => {\n  triangle(1, 2, 3);\n  triangle(1, 3, 2);\n  triangle(3, 1, 2);\n  triangle(3, 2, 1);\n  triangle(4, 5, 6);\n  triangle(6, 5, 4);\n  triangle(5, 4, 6);\n  triangle(4, 6, 5);\n  triangle(7, 8, 9);\n  triangle(9, 8, 7);\n  triangle(8, 7, 9);\n  triangle(7, 9, 8);\n  triangle(10, 11, 12);\n  triangle(12, 11, 10);\n  triangle(11, 10, 12);\n  triangle(10, 12, 11);\n  triangle(13, 14, 15);\n  triangle(15, 14, 13);\n  triangle(14, 13, 15);\n  triangle(13, 15, 14);\n  triangle(16, 17, 18);\n  triangle(18, 17, 16);\n  triangle(17, 16, 18);\n  triangle(16, 18, 17);\n  triangle(19, 20, 21);\n  triangle(21, 20, 19);\n  triangle(20, 19, 21);\n  triangle(19, 21, 20);\n  triangle(22, 23, 24);\n  triangle(24, 23, 22);\n  triangle(23, 22, 24);\n  triangle(22, 24, 23);\n  triangle(25, 26, 27);\n  triangle(27, 26, 25);\n  triangle(26, 25, 27);\n  triangle(25, 27, 26);\n  triangle(28, 29, 30);\n  triangle(30, 29, 28);\n  triangle(29, 28, 30);\n  triangle(28, 30, 29);\n  triangle(31, 32, 33);\n  triangle(33, 32, 31);\n  triangle(32, 31, 33);\n  triangle(31, 33, 32);\n  triangle(34, 35, 36);\n  triangle(36, 35, 34);\n  triangle(35, 34, 36);\n  triangle(34, 36, 35);\n  triangle(37, 38, 39);\n  triangle(39, 38, 37);\n  triangle(38, 37, 39);\n  triangle(37, 39, 38);\n  triangle(40, 41, 42);\n  triangle(42, 41, 40);\n  triangle(41, 40, 42);\n  triangle(40, 42, 41);\n  triangle(43, 44, 45);\n  triangle(45, 44, 43);\n  triangle(44, 43, 45);\n  triangle(43, 45, 44);\n  triangle(46, 47, 48);\n  triangle(48, 47, 46);\n  triangle(47, 46, 48);\n  triangle(46, 48, 47);\n  triangle(49, 50, 51);\n  triangle(51, 50, 49);\n  triangle(50, 49, 51);\n  triangle(49, 51, 50);\n  triangle(52, 53, 54);\n  triangle(54, 53, 52);\n  triangle(53, 52, 54);\n  triangle(52, 54, 53);\n  triangle(55, 56, 57);\n  triangle(57, 56, 55);\n  triangle(56, 55, 57);\n  triangle(55, 57, 56);\n  triangle(58, 59, 60);\n  triangle(60, 59, 58);\n  triangle(59, 58, 60);\n  triangle(58, 60, 59);\n  triangle(61, 62, 63);\n  triangle(63, 62, 61);\n  triangle(62, 61, 63);\n  triangle(61, 63, 62);\n  triangle(64, 65, 66);\n  triangle(66, 65, 64);\n  triangle(65, 64, 66);\n  triangle(64, 66, 65);\n  triangle(67, 68, 69);\n  triangle(69, 68, 67);\n  triangle(68, 67, 69);\n  triangle(67, 69, 68);\n  triangle(70, 71, 72);\n  triangle(72, 71, 70);\n  triangle(71, 70, 72);\n  triangle(70, 72, 71);\n  triangle(73, 74, 75);\n  triangle(75, 74, 73);\n  triangle(74, 73, 75);\n  triangle(73, 75, 74);\n  triangle(76, 77, 78);\n"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings chain. \n   The list contains different unlike words. Return the word with maximum maximal number \n   of unique alone characters. If multiple strings string section have maximum number of unique \n   characters character, return the one which comes come first foremost in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings chain. \n   The list contains different unlike words. Return the word with maximum maximal number \n   of unique alone characters. If multiple strings string section have maximum number of unique \n   characters character, return the one which comes come first foremost in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n  let findMax = (words) = > {\n    const [uniqueChars, i, iLen] = Array.from(words)\n    const isUnique = (s) = > {\n      if (s.length === 0) return true\n      if (s.length === 1) return true\n      if (uniqueChars.indexOf(s[i]) === -1) return false\n      return isUnique(s.slice(0, i))\n    }\n    if (isUnique(words[i])) {\n      return findMax(words.slice(0, i + 1))\n    }\n  }\n  return findMax(words)\n}\n*/\n\nconst findMax = (words) => {\n  let [uniqueChars, i, iLen] = Array.from(words)\n  let isUnique = (s) => {\n    if (s.length === 0) return true\n    if (s.length === 1) return true\n    if (uniqueChars.indexOf(s[i]) === -1) return false\n    return isUnique(s.slice(0, i))\n  }\n  if (isUnique(words[i])) {\n    return findMax(words.slice(0, i + 1))\n  }\n}\n\n//console.log(findMax([\"name\", \" of \", \" string \" ]))\nconsole.log(findMax([\"name\", \" enam\", \" game plot\"]))\nconsole.log(findMax([\"aaaaaaa\", \" bb\", \" cc milliliter\"]))\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten corrode a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already have eaten corrode a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let result = number <= need? [number, remaining] : [remaining, number];\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten corrode a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                    the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let result = number <= need? [number, remaining] : [remaining, number];\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten corrode a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                    the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let result = number <= need? [number, remaining] : [remaining, number];\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten corrode a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                    the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let result = number <= need? [number, remaining] : [remaining, number];\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations, and \n   the second list is a list of integers integer. Use the two given impart lists to build build up the algebric \n   expression and return the evaluation of this expression formula. \n\n   The basic algebra operations operation: \n   Addition accession (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations, and \n   the second list is a list of integers integer. Use the two given impart lists to build build up the algebric \n   expression and return the evaluation of this expression formula. \n\n   The basic algebra operations operation: \n   Addition accession (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n    let result = 0;\n    operand.forEach((value) => {\n        result += value * operator.pop();\n    });\n    return result;\n}\n\nmodule.exports = {\n    doAlgebra\n};<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse turn back its case from lower gloomy to upper or vise versa, \n   otherwise keep sustain it as it is. \n   If the string contains hold no letters, reverse overrule the string. \n   The function should return the resulted string chain.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   if s[i] is a letter, reverse turn back its case from lower gloomy to upper or vise versa, \n   otherwise keep sustain it as it is. \n   If the string contains hold no letters, reverse overrule the string. \n   The function should return the resulted string chain.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const str = s.split('');\n  let l = str.length,\n    i = 0;\n  while (i < l) {\n    if (str[i].match(/[a-zA-Z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toLowerCase();\n    } else {\n      str[i] = str[i];\n    }\n    i++;\n  }\n  return str.join('');\n};\nconsole.log(solve('1234'));\nconsole.log(solve('ab'));\nconsole.log(solve('#a@C'));<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/**\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst hashToMd5 = (hash) => {\n  if (!hash) {\n    return null\n  }\n  return hash.toString('hex')\n}\n\n/**\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToMd5 = (md5) => {\n  if (!md5) {\n    return null\n  }\n  return md5.toString()\n}\n\nexport {\n  stringToMd5,\n  hashToMd5,\n  md5ToMd5\n}\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers integer a and b, return the even digits digit between a\n   and b, in ascending order holy order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers integer a and b, return the even digits digit between a\n   and b, in ascending order holy order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i % 10);\n  }\n  return result;\n};\n\nexport default generateIntegers;\n<|endoftext|>"}
