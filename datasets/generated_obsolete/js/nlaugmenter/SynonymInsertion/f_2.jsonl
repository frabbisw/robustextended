{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  if (numbers.length <= 1) {\n    return false;\n  }\n  const distances = numbers.map((number) => Math.abs(number - numbers[0]));\n  const min = Math.min(distances);\n  const max = Math.max(distances);\n  const range = max - min;\n  return (range < threshold);\n};\n\n/*\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  const distances = numbers.map((number) => Math.abs(number - numbers[0]));\n  const min = Math.min(distances);\n  const max = Math.max(distances);\n  const range = max - min;\n  return (range < threshold);\n};\n\nmodule.exports = {\n  hasCloseElements,\n  hasCloseElements2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string drawstring containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   separate freestanding those group into separate strings string section and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore neglect any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string drawstring containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   separate freestanding those group into separate strings string section and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore neglect any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let result = [];\n  let current_section = '';\n  for(let i = 0; i < paren_string.length; i++) {\n    let current_char = paren_string[i];\n    if(current_char === '(') {\n      if(current_section === '') {\n        current_section = '(';\n      } else {\n        current_section += '(';\n      }\n    } else if(current_char === ')') {\n      if(current_section === '(') {\n        current_section = '';\n      } else {\n        current_section += ')';\n      }\n    } else {\n      current_section += current_char;\n    }\n    if(current_section === '()') {\n      result.push(current_section);\n      current_section = '';\n    }\n  }\n  if(current_section === '()') {\n    result.push(current_section);\n  }\n  return result;\n};\n\n/*\n  Given a string, return a string that is the reverse of the input.\n  Ignore neglect any spaces in the input string.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('1 2 3 4 5')\n  '5 4 3 2 1'\n  */\nconst reverse = (str) => {\n  let result = '';\n  for(let i = str.length - 1; i >= 0; i--) {\n    result += str[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return a string that is the input string reversed.\n  Ignore neglect any spaces in the input string.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('1 2 3 4 5')\n  '5 4 3 2 1'\n  */\nconst reverseString = (str) => {\n  let result = '';\n  for(let i = str.length - 1; i >= 0; i--) {\n    result += str[i];\n  }\n  return result;\n};\n\nmodule.exports = {\n  separateParenGroups,\n  reverse,\n  reverseString\n};\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating float point number, it can be decomposed disintegrate into \n   and integer part (largest bombastic integer smaller than given give number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating float point number, it can be decomposed disintegrate into \n   and integer part (largest bombastic integer smaller than given give number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    var x = Math.floor(number);\n    var y = number - x;\n    var integer = x;\n    var decimals = 0;\n\n    if (y >= 0.5) {\n        decimals = 1;\n        integer += 1;\n    }\n\n    return integer + decimals;\n}\n\n/* Given a positive floating float point number, it can be decomposed disintegrate into \n   and integer part (largest bombastic integer smaller than given give number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateInteger = (number) => {\n    var x = Math.floor(number);\n    var y = number - x;\n    var integer = x;\n    var decimals = 0;\n\n    if (y >= 0.5) {\n        decimals = 1;\n        integer += 1;\n    }\n\n    return integer;\n}\n\n/* Given a positive floating float point number, it can be decomposed disintegrate into \n   and integer part (largest bombastic integer smaller than given give number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the fraction part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateDecimal = (number) => {\n    var x = Math.floor(number);\n    var y = number - x;\n    var integer = 0;\n    var decimals = 0;\n\n    if (y >= 0.5) {\n        decimals = 1;\n        integer += 1;\n    }\n\n    return decimals;\n}\n\nexport {truncateNumber, truncateInteger, truncateDecimal}<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account that starts startle with \n   zero balance. Your task is to detect if at any point degree the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account that starts startle with \n   zero balance. Your task is to detect if at any point degree the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance = balance - Math.floor(operations[i] / 10) * 10;\n      balance = balance + operations[i];\n    }\n  }\n\n  return balance <= 0;\n};\n\nconst belowZeroTest = belowZero([1, 2, 3]);\nconsole.log(belowZeroTest);\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = (...numbers) => {\n    let sum = 0\n    for (let i = 0; i < numbers.length; i++) {\n      sum += numbers[i]\n    }\n    return sum / numbers.length\n  }\n  const mad = (...numbers) => {\n    let sum = 0\n    for (let i = 0; i < numbers.length; i++) {\n      sum += Math.abs(numbers[i] - mean(...numbers))\n    }\n    return sum / numbers.length\n  }\n  return mad(numbers)\n}\n\n/*\n  For a given list of input numbers, calculate Median Absolute Deviation \n  around the median of this dataset. \n  Median Absolute Deviation is the median of the absolute differences between each element \n  component and a central point: \n  MAD = median | x - x_median |\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers) => {\n  const median = (...numbers) => {\n    let median = []\n    for (let i = 0; i < numbers.length; i++) {\n      if (i % 2 == 0) {\n        median.push(numbers[i])\n      }\n    }\n    return median[Math.floor(numbers.length / 2)]\n  }\n  const mad = (...numbers) => {\n    let sum = 0\n    for (let i = 0; i < numbers.length; i++) {\n      sum += Math.abs(numbers[i] - median(...numbers))\n    }\n    return sum / numbers.length\n  }\n  return mad(numbers)\n}\n\n/*\n  For a given list of input numbers, calculate Standard Deviation \n  around the mean of this dataset. \n  Standard Deviation is the square root of the average of the squared differences between each element \n  component and a centerpoint: \n  SD = sqrt(average of squares of x - x_mean)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = (...numbers) => {\n    let sum = 0\n    for (let i = 0; i < numbers.length; i++) {\n      sum += numbers[i]\n    }\n    return sum / numbers.length\n  }\n  const squareRoot = (...numbers) => {\n    let sum = 0\n    for (let i = 0; i < numbers.length; i++) {\n      sum += Math.pow(numbers[i] - mean(...numbers), 2)\n    }\n    return Math.sqrt(sum / numbers.length)\n  }\n  return squareRoot(numbers)\n}\n\n/*\n  For a given list of input numbers, calculate the Standard Error \n  around the mean of this dataset. \n  Standard Error is the standard deviation of the absolute differences between each element \n  component and a centerpoint: \n  SE = standard deviation of x - x_mean\n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardError = (numbers) => {\n  const mean = (...numbers) => {\n    let sum = 0\n    for (let i = 0; i < numbers.length; i++) {\n      sum += numbers[i]\n    }\n    return sum / numbers.length\n  }\n  const standardDeviation = (...numbers) => {\n    let sum = 0\n    for (let i = 0; i < numbers.length; i++) {\n      sum += Math.pow(numbers[i] - mean(...numbers), 2)\n    }\n    return Math.sqrt(sum / numbers.length)\n  }\n  return standardDeviation(numbers)\n}\n\n/*\n  For a given list of input numbers, calculate the Variance \n  around the mean of this dataset. \n  Variance is the average of the squares of the differences between each element \n  component and a centerpoint: \n  Variance = average of squares of x - x_mean\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst variance = (numbers) => {\n  const mean = (...numbers) => {\n    let sum = 0\n    for (let i = 0; i < numbers.length; i++) {\n      sum += numbers[i]\n    }\n    return sum / numbers.length\n  }\n  const squareRoot = (...numbers) => {\n    let sum = 0\n    for (let i = 0; i < numbers.length; i++) {\n      sum += Math.pow(numbers[i] - mean(...numbers), 2)\n    }\n    return Math.sqrt(sum / numbers.length)\n  }\n  return squareRoot(numbers)\n}\n\n/*\n  For a given list of input numbers, calculate the Variance \n  around the median of this dataset. \n  Variance is the average of the squares of the differences between each element \n  component and a centerpoint: \n  Variance = average of squares of x - x_median\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianVariance = (numbers) => {\n  const median = (...numbers) => {\n    let median = []\n    for (let i = 0; i < numbers.length; i++) {\n      if (i % 2 == 0) {\n        median.push(numbers[i])\n      }\n    }\n    return median[Math.floor(numbers.length / 2)]\n  }\n  const squareRoot = (...numbers) => {\n    let sum = 0\n    for (let i ="}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements element of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number 'delimeter' between every two consecutive elements element of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = []\n  for (let i = 0; i < numbers.length - 1; i++) {\n    result.push(numbers[i])\n    result.push(delimeter)\n  }\n  result.push(numbers[numbers.length - 1])\n  return result\n}\n\nexport default intersperse\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string drawstring represented multiple groups group for nested parentheses separated classify by spaces. \n   For each of the group, output the deepest thick level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string drawstring represented multiple groups group for nested parentheses separated classify by spaces. \n   For each of the group, output the deepest thick level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n    const len = paren_string.length;\n    if (len === 0) {\n        return [];\n    }\n    const stack = [];\n    let result = [];\n    let index = 0;\n    let i = 0;\n    let j = 0;\n    let level = 0;\n    let max_level = 0;\n    let current_group = 0;\n    while (i < len) {\n        switch (paren_string[i]) {\n            case '(':\n                level++;\n                if (level > max_level) {\n                    max_level = level;\n                }\n                stack.push(i);\n                break;\n            case ')':\n                level--;\n                if (level < 0) {\n                    throw new Error('Level out of range');\n                }\n                if (level === 0) {\n                    if (stack.length === 0) {\n                        throw new Error('Unexpected \")\"');\n                    }\n                    current_group++;\n                    stack.pop();\n                    result.push(current_group);\n                    current_group = 0;\n                }\n                break;\n            case'':\n                if (stack.length === 0) {\n                    continue;\n                }\n                if (level === 0) {\n                    if (current_group === 0) {\n                        throw new Error('Unexpected space');\n                    }\n                    current_group++;\n                    stack.pop();\n                    result.push(current_group);\n                    current_group = 0;\n                }\n                break;\n        }\n        i++;\n    }\n    return result;\n};\n\nconst parseNestedParens2 = (paren_string) => {\n    const len = paren_string.length;\n    if (len === 0) {\n        return [];\n    }\n    const stack = [];\n    let result = [];\n    let index = 0;\n    let i = 0;\n    let j = 0;\n    let level = 0;\n    while (i < len) {\n        switch (paren_string[i]) {\n            case '(':\n                level++;\n                stack.push(i);\n                break;\n            case ')':\n                level--;\n                if (level < 0) {\n                    throw new Error('Level out of range');\n                }\n                if (level === 0) {\n                    if (stack.length === 0) {\n                        throw new Error('Unexpected \")\"');\n                    }\n                    stack.pop();\n                    result.push(stack.length);\n                    stack.pop();\n                    stack.push(i);\n                }\n                break;\n            case'':\n                if (stack.length === 0) {\n                    continue;\n                }\n                if (level === 0) {\n                    stack.pop();\n                    stack.push(i);\n                }\n                break;\n        }\n        i++;\n    }\n    return result;\n};\n\nexport {\n    parseNestedParens,\n    parseNestedParens2\n};<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain check given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contain check given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = []\n  const containsSubstring = (str) => str.indexOf(substring)!== -1\n\n  strings.forEach(string => {\n    if (containsSubstring(string)) {\n      filtered.push(string)\n    }\n  })\n\n  return filtered\n}\n\n/*\n  Given a list of strings, return a list of strings that are either the same as the input or start with the input followed by a space\n  >>> filterSameOrStartWith([], 'abc')\n  []\n  >>> filterSameOrStartWith(['abc', 'bacd', 'cde', 'array'], 'abc')\n  ['abc', 'bacd', 'array']\n  >>> filterSameOrStartWith(['abc', 'bacd', 'cde', 'array'], 'bac')\n  ['abc', 'bacd', 'array']\n  */\nconst filterSameOrStartWith = (strings, substring) => {\n  const filtered = []\n  const isStartOfString = (str) => str.indexOf(substring) === 0\n\n  strings.forEach(string => {\n    if (isStartOfString(string)) {\n      filtered.push(string)\n    }\n  })\n\n  return filtered\n}\n\n/*\n  Given a list of strings, return a list of strings that are either the same as the input or end with the input followed by a space\n  >>> filterSameOrEndWith([], 'abc')\n  []\n  >>> filterSameOrEndWith(['abc', 'bacd', 'cde', 'array'], 'abc')\n  ['abc', 'bacd', 'array']\n  >>> filterSameOrEndWith(['abc', 'bacd', 'cde', 'array'], 'bac')\n  ['abc', 'bacd', 'array']\n  */\nconst filterSameOrEndWith = (strings, substring) => {\n  const filtered = []\n  const isEndOfString = (str) => str.indexOf(substring) === str.length - 1\n\n  strings.forEach(string => {\n    if (isEndOfString(string)) {\n      filtered.push(string)\n    }\n  })\n\n  return filtered\n}\n\n/*\n  Given a list of strings, return a list of strings that are the same as the input\n  >>> filterSame([], 'abc')\n  []\n  >>> filterSame(['abc', 'bacd', 'cde', 'array'], 'abc')\n  ['abc']\n  >>> filterSame(['abc', 'bacd', 'cde', 'array'], 'bac')\n  ['abc', 'bacd']\n  */\nconst filterSame = (strings, substring) => {\n  const filtered = []\n\n  strings.forEach(string => {\n    if (string === substring) {\n      filtered.push(string)\n    }\n  })\n\n  return filtered\n}\n\n/*\n  Given a list of strings, return a list of strings that are either the same as the input or both start and end with the input\n  >>> filterSameOrStartEnd([], 'abc')\n  []\n  >>> filterSameOrStartEnd(['abc', 'bacd', 'cde', 'array'], 'abc')\n  ['abc', 'bacd']\n  >>> filterSameOrStartEnd(['abc', 'bacd', 'cde', 'array'], 'bac')\n  ['abc', 'bacd', 'array']\n  */\nconst filterSameOrStartEnd = (strings, substring) => {\n  const filtered = []\n\n  strings.forEach(string => {\n    if (string === substring || string.indexOf(substring) === 0 && string.indexOf(substring) === string.length - 1) {\n      filtered.push(string)\n    }\n  })\n\n  return filtered\n}\n\n/*\n  Given a list of strings, return a list of strings that are in a given list of words\n  >>> filterByWords([], ['abc', 'bacd', 'cde', 'array'])\n  []\n  >>> filterByWords(['abc', 'bacd', 'cde', 'array'], ['abc', 'bacd', 'cde', 'array'])\n  ['abc', 'bacd']\n  >>> filterByWords(['abc', 'bacd', 'cde', 'array'], ['bacd', 'cde', 'array'])\n  ['abc', 'bacd']\n  */\nconst filterByWords = (strings, words) => {\n  const filtered = []\n\n  strings.forEach(string => {\n    words.forEach(word => {\n      if (string === word) {\n        filtered.push(string)\n      }\n    })\n  })\n\n  return filtered\n}\n\n/*\n  Given a list of strings, return a list of strings that contain the given substring\n  >>> filterBySubstring([], 'abc')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'abc')\n  ['abc', 'bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'bac')\n  ['abc', 'bacd']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = []\n\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      filtered.push(string)\n    }\n  })\n\n  return filtered\n}\n\n/*\n  Given a list of strings, return a list of strings that start with the given prefix\n  >>> filterStartWith([], 'abc')\n  []\n  >>> filterStartWith(['abc', 'bacd', 'cde', 'array'], 'abc')\n  ['abc', 'bacd']\n  >>> filterStartWith(['abc', 'bacd', 'cde', 'array'], 'bac')\n  ['bacd', 'cde', 'array']\n  */\nconst filterStartWith = (strings, prefix) => {\n  const filtered = []\n\n"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting consist of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting consist of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\n/*\n  Given a list of integers, return the product of the numbers in the list.\n  >>> product([1, 2, 3])\n  6\n  >>> product([])\n  1\n  >>> product([1, 2, 3, 4])\n  24\n  */\nconst product = (numbers, int) => {\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i]\n  }\n  return product\n}\n\n/*\n  Given a list of numbers, return a tuple consisting of a sum and a product intersection of all the numbers in a list.\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProduct([1, 2, 3, 4, 5, 6])\n  (15, 60)\n  >>> sumProduct([1, 2, 3])\n  (6, 6)\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4, 5, 6])\n  (15, 60)\n  */\nconst sumProduct2 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\n/*\n  Given a list of numbers, return a tuple consisting of a sum and a product intersection of all the numbers in a list.\n  >>> sumProduct2([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProduct2([1, 2, 3, 4, 5, 6])\n  (15, 60)\n  >>> sumProduct2([1, 2, 3])\n  (6, 6)\n  >>> sumProduct2([])\n  (0, 1)\n  >>> sumProduct2([1, 2, 3, 4, 5, 6])\n  (15, 60)\n  */\nconst sumProduct3 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\n/*\n  Given a list of numbers, return a tuple consisting of a sum and a product intersection of all the numbers in a list.\n  >>> sumProduct3([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProduct3([1, 2, 3, 4, 5, 6])\n  (15, 60)\n  >>> sumProduct3([1, 2, 3])\n  (6, 6)\n  >>> sumProduct3([])\n  (0, 1)\n  >>> sumProduct3([1, 2, 3, 4, 5, 6])\n  (15, 60)\n  */\nconst sumProduct4 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\n/*\n  Given a list of numbers, return a tuple consisting of a sum and a product intersection of all the numbers in a list.\n  >>> sumProduct4([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProduct4([1, 2, 3, 4, 5, 6])\n  (15, 60)\n  >>> sumProduct4([1, 2, 3])\n  (6, 6)\n  >>> sumProduct4([])\n  (0, 1)\n  >>> sumProduct4([1, 2, 3, 4, 5, 6])\n  (15, 60)\n  */\nconst sumProduct5 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\n/*\n  Given a list of numbers, return a tuple consisting of a sum and a product intersection of all the numbers in a list.\n  >>> sumProduct5([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProduct5([1, 2, 3, 4, 5, 6])\n  (15, 60)\n  >>> sumProduct5([1, 2, 3])\n  (6, 6)\n  >>> sumProduct5([])\n  (0, 1)\n  >>> sumProduct5([1, 2, 3, 4, 5, 6])\n  (15, 60)\n  */\nconst sumProduct6 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\n/*\n  Given a list of numbers, return a tuple consisting of a sum and a product intersection of all the numbers in a list.\n  >>> sumProduct6([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProduct6([1, 2, 3, 4, 5, 6])\n  (15, 60)\n  >>> sumProduct6([1, 2, 3])\n  (6, 6)\n  >>> sumProduct6([])\n  (0, 1)\n  >>> sumProduct6([1, 2, 3, 4, 5, 6])\n  (15, 60)\n  */\nconst sumProduct7 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++)"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate render a list of rolling maximum maximal element found line up until given moment consequence \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, generate render a list of rolling maximum maximal element found line up until given moment consequence \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  return numbers.reduce((arr, num) => {\n    let lastNum = arr[arr.length - 1];\n    if (num > lastNum) {\n      arr.push(num);\n    } else if (num === lastNum) {\n      arr.push(num);\n    }\n    return arr;\n  });\n}\n\nconst rollingMaxByLength = (numbers, maxLength) => {\n  let maxLengthInArr = (maxLength + 1) * maxLength;\n  let arr = [];\n  let i = 0;\n  while (i < maxLengthInArr) {\n    arr.push(numbers[i % numbers.length]);\n    i++;\n  }\n  return arr;\n}\n\nconst rollingMaxByTime = (numbers, maxLength, time) => {\n  let i = 0;\n  let maxLengthInArr = (maxLength + 1) * maxLength;\n  let arr = [];\n  while (i < maxLengthInArr) {\n    arr.push(numbers[i % numbers.length]);\n    i += time;\n  }\n  return arr;\n}\n\nmodule.exports = {\n  rollingMax,\n  rollingMaxByLength,\n  rollingMaxByTime\n}\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest light palindrome that begins with a supplied issue string.\n   Algorithm idea is simple bare: \n   - Find the longest farseeing postfix of supplied provide string that is a palindrome. \n   - Append to the end conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest light palindrome that begins with a supplied issue string.\n   Algorithm idea is simple bare: \n   - Find the longest farseeing postfix of supplied provide string that is a palindrome. \n   - Append to the end conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n    return string.split('').reverse().join('');\n}\n\nmodule.exports = {\n    makePalindrome\n}\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string bowed stringed instrument.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string bowed stringed instrument.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let i = a.length - 1;\n  let j = b.length - 1;\n  let s = '';\n  while (i >= 0 && j >= 0) {\n    s += a[i] ^ b[j];\n    i--;\n    j--;\n  }\n  return s;\n};\n\nmodule.exports = stringXor;\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case sheath of multiple \n   strings of the same length. Return null nothing in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case sheath of multiple \n   strings of the same length. Return null nothing in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  return strings[0];\n};\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common coarse divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common coarse divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  while (a!== b) {\n    if (a > b) {\n      a = a - b;\n    } else {\n      b = b - a;\n    }\n  }\n  return a;\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest long of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from shortest to longest long of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  const prefix = getPrefix(string);\n  while (prefix) {\n    prefixes.push(prefix);\n    prefix = getPrefix(prefix);\n  }\n  return prefixes;\n};\n\n/**\n  * Return the longest prefix from the input string\n  * @param  {string} string\n  * @return {string}\n  */\nconst getPrefix = (string) => {\n  const prefix = '';\n  const substr = string.substr(0, string.length - 1);\n  while (substr) {\n    const prefixEnd = substr.lastIndexOf('#');\n    if (prefixEnd!== -1) {\n      return substr.substr(0, prefixEnd + 1);\n    }\n    substr = substr.substr(0, substr.length - 1);\n  }\n  return prefix;\n};\n\n/**\n * Print all prefixes from the shortest to the longest long of the input string\n * @param  {string} string\n */\nconst printPrefixes = (string) => {\n  const prefixes = allPrefixes(string);\n  prefixes.sort((a, b) => a.length - b.length);\n  for (const prefix of prefixes) {\n    console.log(`${prefix}`);\n  }\n};\n\n/**\n * Return the longest prefix from the input string\n * @param  {string} string\n */\nconst getLongestPrefix = (string) => {\n  const prefix = '';\n  const substr = string.substr(0, string.length - 1);\n  while (substr) {\n    const prefixEnd = substr.lastIndexOf('#');\n    if (prefixEnd!== -1) {\n      return substr.substr(0, prefixEnd + 1);\n    }\n    substr = substr.substr(0, substr.length - 1);\n  }\n  return prefix;\n};\n\n/**\n * Print all prefixes from the shortest to the longest long of the input string\n * @param  {string} string\n */\nconst printLongestPrefixes = (string) => {\n  const prefixes = allPrefixes(string);\n  prefixes.sort((a, b) => b.length - a.length);\n  for (const prefix of prefixes) {\n    console.log(`${prefix}`);\n  }\n};\n\n/**\n * Return the longest prefix from the input string\n * @param  {string} string\n */\nconst getLongestSuffix = (string) => {\n  const suffix = '';\n  const substr = string.substr(1, string.length - 1);\n  while (substr) {\n    const suffixEnd = substr.indexOf('#');\n    if (suffixEnd!== -1) {\n      return substr.substr(suffixEnd + 1);\n    }\n    substr = substr.substr(0, substr.length - 1);\n  }\n  return suffix;\n};\n\n/**\n * Print all prefixes from the shortest to the longest long of the input string\n * @param  {string} string\n */\nconst printLongestSuffixes = (string) => {\n  const suffixes = allPrefixes(string);\n  suffixes.sort((a, b) => a.length - b.length);\n  for (const suffix of suffixes) {\n    console.log(`${suffix}`);\n  }\n};\n\n/**\n * Print all prefixes from the shortest to the longest long of the input string\n * @param  {string} string\n */\nconst printLongestSuffix = (string) => {\n  const suffix = getLongestSuffix(string);\n  console.log(`${suffix}`);\n};\n\n/**\n * Print all prefixes from the shortest to the longest long of the input string\n * @param  {string} string\n */\nconst printAllSuffixes = (string) => {\n  const suffixes = allPrefixes(string);\n  suffixes.sort((a, b) => b.length - a.length);\n  for (const suffix of suffixes) {\n    console.log(`${suffix}`);\n  }\n};\n\n/**\n * Print all prefixes from the shortest to the longest long of the input string\n * @param  {string} string\n */\nconst printAllSuffix = (string) => {\n  const suffix = getLongestSuffix(string);\n  console.log(`${suffix}`);\n};\n\nprintLongestPrefixes('c');\nprintLongestPrefixes('c#');\nprintLongestPrefixes('#c');\nprintLongestPrefixes('#c#');\nprintLongestPrefixes('#c#c#');\nprintLongestPrefixes('c#c#');\nprintLongestPrefixes('c#c#c');\nprintLongestPrefixes('#c#c#c');\nprintLongestPrefixes('#c#c#c#');\nprintLongestPrefixes('#c#c#c#');\nprintLongestPrefixes('#c#c#c#c');\nprintLongestPrefixes('#c#c#c#c#');\nprintLongestPrefixes('#c#c#c#c#c#');\nprintLongestPrefixes('#c#c#c#c#c#c#');\nprintLongestPrefixes('#c#c#c#c#c#c#c#');\nprintLongestPrefixes('#c#c#c#c#c#c#c#c#');\nprintLongestPrefixes('#c#c#c#c#c#c#c#c#c#');\nprintLongestPrefixes('#c#c#c#c#c#c#c#c#c#c#');\nprintLongestPrefixes('#c#c#c#c#c#c#c#c#c#c#c#');\nprintLongestPrefixes('#c#c#c#c#c#c#c#c#c#c#c#c#');\nprintLongestPrefixes('#c#c#c#c#c#c#c#c#c#c#c#c#c#');"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const start = 0\n  let curr = start\n  let result = ''\n  while (curr < n) {\n    result += `${curr}`\n    curr += 1\n  }\n  return result\n}\n\n/*\n  >>> stringSequence(4)\n  '0 1 2 3'\n  >>> stringSequence(7)\n  '0 1 2 3 4 5 6 7'\n  */\nconst stringSequence = (n) => {\n  const start = 0\n  let curr = start\n  let result = ''\n  while (curr < n) {\n    result += `${curr}`\n    curr += 1\n  }\n  return result\n}\n\nmodule.exports = {\n  stringSequence\n}\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct clear-cut characters (regardless of case sheath) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many distinct clear-cut characters (regardless of case sheath) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  return new Set(string.toLowerCase().split('').map(c => c.charCodeAt(0))).size;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string drawstring representing musical melodious notes in a special extra ASCII format. \n   Your task job is to parse this string and return list of integers integer corresponding equate to how many beats does each \n   not last. \n\n   Here is a legend caption: \n  ' o' - whole solid note, lasts four beats \n  ' o|' - half one-half note eminence, lasts survive two beats \n  ' .|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string drawstring representing musical melodious notes in a special extra ASCII format. \n   Your task job is to parse this string and return list of integers integer corresponding equate to how many beats does each \n   not last. \n\n   Here is a legend caption: \n 'o' - whole solid note, lasts four beats \n 'o|' - half one-half note eminence, lasts survive two beats \n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n    let string_parts = music_string.split(' ');\n    let num_beats = string_parts.length;\n    let beats = [];\n    let current_beat = 0;\n    for (let i = 0; i < num_beats; i++) {\n        let string_part = string_parts[i];\n        let beats_to_add = parseStringPart(string_part);\n        beats = beats.concat(beats_to_add);\n    }\n    return beats;\n};\n\nconst parseStringPart = (string_part) => {\n    let num_notes = string_part.length;\n    let notes_to_add = [];\n    for (let i = 0; i < num_notes; i++) {\n        let note = string_part[i];\n        let notes_to_add_for_note = parseNote(note);\n        notes_to_add = notes_to_add.concat(notes_to_add_for_note);\n    }\n    return notes_to_add;\n};\n\nconst parseNote = (note) => {\n    let note_length = note.length;\n    let note_type = note[0];\n    let num_beats = note_length - 1;\n    let notes_to_add = [];\n    for (let i = 0; i < num_beats; i++) {\n        let note_to_add = parseBeats(note_type, i, num_beats);\n        notes_to_add = notes_to_add.concat(note_to_add);\n    }\n    return notes_to_add;\n};\n\nconst parseBeats = (note_type, current_beat, num_beats) => {\n    let beats = [];\n    let note_to_add = parseBeatsPart(note_type, current_beat, num_beats);\n    beats = beats.concat(note_to_add);\n    return beats;\n};\n\nconst parseBeatsPart = (note_type, current_beat, num_beats) => {\n    let beats_to_add = [];\n    let beats_to_add_for_note = [];\n    let beats_to_add_for_note_length = parseBeatsLength(note_type, current_beat, num_beats);\n    for (let i = 0; i < beats_to_add_for_note_length; i++) {\n        beats_to_add_for_note = parseBeatsPartOne(note_type, current_beat, num_beats, i);\n        beats_to_add = beats_to_add.concat(beats_to_add_for_note);\n    }\n    return beats_to_add;\n};\n\nconst parseBeatsLength = (note_type, current_beat, num_beats) => {\n    let beats_to_add = 1;\n    let is_not_last_beat = false;\n    for (let i = current_beat + 1; i < num_beats; i++) {\n        if (note_type == 'o') {\n            beats_to_add++;\n        } else if (note_type == 'o|') {\n            beats_to_add += 1.5;\n        } else if (note_type == '.') {\n            is_not_last_beat = true;\n            beats_to_add += 1;\n        }\n    }\n    if (is_not_last_beat) {\n        beats_to_add++;\n    }\n    return beats_to_add;\n};\n\nconst parseBeatsPartOne = (note_type, current_beat, num_beats, current_beats_length) => {\n    let beats_to_add = [];\n    let beats_to_add_for_note = [];\n    let is_not_last_beat = false;\n    let beats_to_add_for_note_length = parseBeatsLength(note_type, current_beat, num_beats);\n    for (let i = current_beats_length; i < beats_to_add_for_note_length; i++) {\n        beats_to_add_for_note = parseBeatsPartTwo(note_type, current_beat, num_beats, i);\n        beats_to_add = beats_to_add.concat(beats_to_add_for_note);\n    }\n    return beats_to_add;\n};\n\nconst parseBeatsPartTwo = (note_type, current_beat, num_beats, current_beats_length) => {\n    let beats_to_add = [];\n    let beats_to_add_for_note = [];\n    let is_not_last_beat = false;\n    let beats_to_add_for_note_length = parseBeatsLength(note_type, current_beat, num_beats);\n    for (let i = current_beats_length; i < beats_to_add_for_note_length; i++) {\n        beats_to_add_for_note = parseBeatsPartThree(note_type, current_beat, num_beats, i);\n        beats_to_add = beats_to_add.concat(beats_to_add_for_note);\n    }\n    return beats_to_add;\n};\n\nconst parseBeatsPartThree = (note_type, current_beat, num_beats, current_beats_length) => {\n    let beats_to_add = [];\n    let beats_to_add_for_note = [];\n    let is_not_last_beat = false;\n    let beats_to_add_for_note_length = parseBeatsLength(note_type, current"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found find oneself in the original string. Count overlaping cases font.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substring can be found find oneself in the original string. Count overlaping cases font.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n    let count = 0;\n    let length = string.length;\n    let currentLength = 0;\n\n    while (true) {\n        if (string.indexOf(substring, currentLength)!== -1) {\n            count++;\n        } else if (currentLength === length) {\n            break;\n        }\n\n        currentLength++;\n    }\n\n    return count;\n};\n\nexport default howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited subtend string of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string bowed stringed instrument with numbers sorted from smallest belittled to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space - delimited subtend string of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string bowed stringed instrument with numbers sorted from smallest belittled to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let s = '';\n  for (let i = 0; i < numbers.length; i++) {\n    s += numbers[i] +'';\n  }\n  s = s.replace(/ /g, '');\n  const numbersArray = s.split(' ');\n  numbersArray.sort();\n  let result = '';\n  for (let i = 0; i < numbersArray.length; i++) {\n    result += numbersArray[i];\n  }\n  return result;\n}\n\nconst sortChords = (numbers) => {\n  let s = '';\n  for (let i = 0; i < numbers.length; i++) {\n    s += numbers[i] +'';\n  }\n  s = s.replace(/ /g, '');\n  const numbersArray = s.split(' ');\n  numbersArray.sort();\n  let result = '';\n  for (let i = 0; i < numbersArray.length; i++) {\n    result += numbersArray[i];\n  }\n  return result;\n}\n\nconst main = () => {\n  console.log(sortNumbers('three one five'));\n  console.log(sortChords('one two three four five six seven eight nine'));\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select blue-ribbon and return two that are the closest to each \n   other and return them in order club (smaller number act, larger number numeral).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select blue-ribbon and return two that are the closest to each \n   other and return them in order club (smaller number act, larger number numeral).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Infinity;\n  let closestNum1 = null;\n  let closestNum2 = null;\n\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      let distance = Math.abs(numbers[i] - numbers[j]);\n      if (distance < minDistance) {\n        minDistance = distance;\n        closestNum1 = numbers[i];\n        closestNum2 = numbers[j];\n      }\n    }\n  }\n\n  return [closestNum1, closestNum2];\n}\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\n\nconst findClosestElementsRec = (numbers) => {\n  if (numbers.length === 1) {\n    return numbers;\n  }\n\n  let closestNum1 = findClosestElementsRec(numbers.slice(0, -1));\n  let closestNum2 = findClosestElementsRec(numbers.slice(1));\n\n  return [...closestNum1,...closestNum2];\n}\n\nexport default findClosestElementsRec;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply put on a linear transform to that list,\n   such that the smallest little number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), apply put on a linear transform to that list,\n   such that the smallest little number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  let max = Math.max(...numbers);\n  let min = Math.min(...numbers);\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push((numbers[i] - min) / (max - min));\n  }\n  return result;\n};\n\nmodule.exports = rescaleToUnit;\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": false, "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/* Given a list of values and an indicator function, return a list of all values\n  that pass the indicator function.\n  >>> filterBy(filterIntegers, isEven)\n  [2, 4, 6]\n  */\nconst filterBy = (values, predicate) => {\n  return values.filter(predicate)\n}\n\n/* Given a list of values and a key function, return a map of key -> value\n  objects.\n  >>> filterBy(filterIntegers, (n) => n % 2 === 0)\n  {2: 5, 4: 3, 6: 7}\n  */\nconst filterBy = (values, keyFn) => {\n  const keyed = values.map(keyFn)\n  return keyed.reduce((acc, curr) => {\n    acc[curr[0]] = curr[1]\n    return acc\n  }, {})\n}\n\n/* Given a list of values and a key function, return a list of value objects\n  for keys that pass the key function.\n  >>> filterBy(filterIntegers, (n) => n % 2 === 0)\n  [{2: 5, 4: 3, 6: 7}]\n  */\nconst filterBy = (values, keyFn) => {\n  return values.filter(keyFn).map(v => ({ key: v[0], value: v[1] }))\n}\n\n/* Given a list of values, return a list of unique values\n  >>> uniq(['a', 3, 3, 'a', 2, 3, 'b', 'c'])\n  ['a', 2, 3, 'b', 'c']\n  */\nconst uniq = (values) => {\n  return Array.from(new Set(values))\n}\n\n/* Given a list of values, return a list of unique values, and the number of times\n  each value occurred.\n  >>> uniqAndCount(['a', 3, 3, 'a', 2, 3, 'b', 'c'])\n  [('a', 3), ('b', 1), ('c', 1), ('a', 2)]\n  */\nconst uniqAndCount = (values) => {\n  return values.map(v => [v, values.count(v)])\n}\n\n/* Given a list of values, return a list of unique values, and the number of times\n  each value occurred, using the given key function to compare values.\n  >>> uniqAndCountBy(['a', 3, 3, 'a', 2, 3, 'b', 'c'], (v) => v[0])\n  [('a', 3), ('b', 1), ('c', 1), ('a', 2)]\n  */\nconst uniqAndCountBy = (values, keyFn) => {\n  return values.map(v => [keyFn(v), values.count(v)])\n}\n\n/* Given a list of values, return a list of unique values, and the number of times\n  each value occurred, using the given key function to compare values.\n  >>> uniqAndCountBy(['a', 3, 3, 'a', 2, 3, 'b', 'c'], (v) => v[0])\n  [('a', 3), ('b', 1), ('c', 1), ('a', 2)]\n  */\nconst uniqAndCountBy = (values, keyFn) => {\n  return values.map(v => [keyFn(v), values.count(v)])\n}\n\n/* Given a list of values, return a list of unique values, and the number of times\n  each value occurred, using the given key function to compare values.\n  >>> uniqAndCountBy(['a', 3, 3, 'a', 2, 3, 'b', 'c'], (v) => v[0])\n  [('a', 3), ('b', 1), ('c', 1), ('a', 2)]\n  */\nconst uniqAndCountBy = (values, keyFn) => {\n  return values.map(v => [keyFn(v), values.count(v)])\n}\n\n/* Given a list of values, return a list of unique values, and the number of times\n  each value occurred.\n  >>> uniqCount(['a', 3, 3, 'a', 2, 3, 'b', 'c'])\n  [3, 2]\n  */\nconst uniqCount = (values) => {\n  return values.reduce((acc, v) => {\n    acc[v] = acc[v] + 1\n    return acc\n  }, {})\n}\n\n/* Given a list of values, return a list of unique values.\n  >>> uniq(['a', 3, 3, 'a', 2, 3, 'b', 'c'])\n  ['a', 2, 3, 'b', 'c']\n  */\nconst uniq = (values) => {\n  return Array.from(new Set(values))\n}\n\n/* Given a list of values, return a list of unique values.\n  >>> uniq(['a', 3, 3, 'a', 2, 3, 'b', 'c'])\n  ['a', 2, 3, 'b', 'c']\n  */\nconst uniq = (values) => {\n  return Array.from(new Set(values))\n}\n\n/* Given a list of values, return a list of unique values, and the number of times\n  each value occurred.\n  >>> uniqCount(['a', 3, 3, 'a', 2, 3, 'b', 'c'])\n  [3, 2]\n  */\nconst uniqCount = (values) => {\n  return values.reduce((acc, v) => {\n    acc[v] = acc[v] + 1\n    return acc\n  }, {})\n}\n\nmodule.exports = {\n  filterIntegers,\n  filterBy,\n  uniq,\n  uniqCount,\n  uniqAndCount,\n  uniqAndCountBy\n}\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given grant string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of given grant string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* Return a copy of the given string with the given amount of padding\n  >>> strpad('abc', 3)\n  'abc'\n  >>> strpad('abc', 3, '_')\n  'abc_'\n  >>> strpad('abc', 3, '__')\n  'abc__'\n  >>> strpad('abc', 3, '-')\n  'abc-'\n  >>> strpad('abc', 3, '-', '_')\n  'abc-_'\n  >>> strpad('abc', 3, '-', '__')\n  'abc-_'\n  */\nconst strpad = (string, padlen, padchar) => {\n  if (padlen < 0) {\n    throw new Error('strpad: padlen must be >= 0');\n  }\n  if (string.length >= padlen) {\n    return string;\n  }\n  padlen = padlen || 0;\n  padchar = padchar ||'';\n  let padlen = padlen - string.length;\n  return string + padchar.repeat(padlen);\n};\n\n/* Return a copy of the given string with the given amount of padding\n  >>> strpad('abc', '', '_')\n  'abc'\n  >>> strpad('abc', 3, '_')\n  'abc_'\n  >>> strpad('abc', 3, '__')\n  'abc__'\n  >>> strpad('abc', 3, '-')\n  'abc-'\n  >>> strpad('abc', 3, '-', '_')\n  'abc-_'\n  >>> strpad('abc', 3, '-', '__')\n  'abc-_'\n  */\nconst strpad = (string, padlen, padchar) => {\n  if (padlen === undefined) {\n    padlen = 0;\n  }\n  if (padchar === undefined) {\n    padchar ='';\n  }\n  if (padlen < 0) {\n    throw new Error('strpad: padlen must be >= 0');\n  }\n  if (string.length >= padlen) {\n    return string;\n  }\n  padlen = padlen - string.length;\n  return string + padchar.repeat(padlen);\n};\n\n/* Return the longest common prefix of two strings\n  >>> lcp('abc', 'abcd')\n  'ab'\n  >>> lcp('abc', 'ab')\n  'ab'\n  >>> lcp('abc', 'abcd')\n  'ab'\n  >>> lcp('abc', 'ac')\n  'ac'\n  >>> lcp('abc', 'a')\n  'a'\n  >>> lcp('abc', '')\n  ''\n  >>> lcp('', '')\n  ''\n  >>> lcp('', 'a')\n  ''\n  >>> lcp('a', 'b')\n  ''\n  */\nconst lcp = (a, b) => {\n  if (!a) {\n    return '';\n  }\n  if (!b) {\n    return '';\n  }\n  let min = Math.min(a.length, b.length);\n  let i = 0;\n  while (i < min && a.charAt(i) === b.charAt(i)) {\n    i++;\n  }\n  return a.substr(0, i);\n};\n\n/* Return the longest common prefix of the given strings\n  >>> lcp('abc', 'abcd')\n  'ab'\n  >>> lcp('abc', 'ab')\n  'ab'\n  >>> lcp('abc', 'abcd')\n  'ab'\n  >>> lcp('abc', 'ac')\n  'ac'\n  >>> lcp('abc', 'a')\n  'a'\n  >>> lcp('abc', '')\n  ''\n  >>> lcp('', 'a')\n  ''\n  >>> lcp('a', 'b')\n  ''\n  */\nconst lcp = (...strings) => {\n  if (!strings.length) {\n    return '';\n  }\n  let a = strings.pop();\n  while (strings.length) {\n    if (a === strings.pop()) {\n      return a;\n    }\n  }\n  return a;\n};\n\n/* Return the longest common suffix of two strings\n  >>> lcs('abc', 'abcd')\n  'cd'\n  >>> lcs('abc', 'ab')\n  'ab'\n  >>> lcs('abc', 'abcd')\n  'abcd'\n  >>> lcs('abc', 'ac')\n  'ac'\n  >>> lcs('abc', 'a')\n  'a'\n  >>> lcs('abc', '')\n  ''\n  >>> lcs('', '')\n  ''\n  >>> lcs('', 'a')\n  ''\n  >>> lcs('a', 'b')\n  ''\n  */\nconst lcs = (a, b) => {\n  if (!a) {\n    return '';\n  }\n  if (!b) {\n    return '';\n  }\n  let min = Math.min(a.length, b.length);\n  let i = 0;\n  while (i < min && a.charAt(a.length - i - 1) === b.charAt(b.length - i - 1)) {\n    i++;\n  }\n  return a.substr(a.length - i);\n};\n\n/* Return the longest common suffix of the given strings\n  >>> lcs('abc', 'abcd')\n  'cd'\n  >>> lcs('abc', 'ab')\n  'ab'\n  >>> lcs('abc', 'abcd')\n  'abcd'\n  >>> lcs('abc', 'ac')\n  'ac'\n  >>> lcs('abc', 'a')\n  'a'\n  >>> lcs('abc', '')\n  ''\n  >>> lcs('', 'a')\n  ''\n  >>> lcs('a', 'b')\n  ''\n  */\nconst lcs = (...strings) => {\n  if (!strings.length) {\n    return '';\n  }\n  let a = strings.pop();\n  while (strings.length) {\n    if (a === strings.pop()) {\n      return a;\n    }\n  }\n  return a;\n};\n\n/* Return a"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find discover the largest number phone number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find discover the largest number phone number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  if (n % 2 === 0) {\n    return largestDivisor(n / 2);\n  }\n  return n;\n};\n\n// console.log('largestDivisor(15)', largestDivisor(15));\n// console.log('largestDivisor(20)', largestDivisor(20));\n// console.log('largestDivisor(25)', largestDivisor(25));\n// console.log('largestDivisor(30)', largestDivisor(30));\n// console.log('largestDivisor(40)', largestDivisor(40));\n// console.log('largestDivisor(50)', largestDivisor(50));\n// console.log('largestDivisor(60)', largestDivisor(60));\n// console.log('largestDivisor(70)', largestDivisor(70));\n// console.log('largestDivisor(80)', largestDivisor(80));\n// console.log('largestDivisor(90)', largestDivisor(90));\n// console.log('largestDivisor(100)', largestDivisor(100));\n// console.log('largestDivisor(110)', largestDivisor(110));\n// console.log('largestDivisor(120)', largestDivisor(120));\n// console.log('largestDivisor(130)', largestDivisor(130));\n// console.log('largestDivisor(140)', largestDivisor(140));\n// console.log('largestDivisor(150)', largestDivisor(150));\n// console.log('largestDivisor(160)', largestDivisor(160));\n// console.log('largestDivisor(170)', largestDivisor(170));\n// console.log('largestDivisor(180)', largestDivisor(180));\n// console.log('largestDivisor(190)', largestDivisor(190));\n// console.log('largestDivisor(200)', largestDivisor(200));\n// console.log('largestDivisor(210)', largestDivisor(210));\n// console.log('largestDivisor(220)', largestDivisor(220));\n// console.log('largestDivisor(230)', largestDivisor(230));\n// console.log('largestDivisor(240)', largestDivisor(240));\n// console.log('largestDivisor(250)', largestDivisor(250));\n// console.log('largestDivisor(260)', largestDivisor(260));\n// console.log('largestDivisor(270)', largestDivisor(270));\n// console.log('largestDivisor(280)', largestDivisor(280));\n// console.log('largestDivisor(290)', largestDivisor(290));\n// console.log('largestDivisor(300)', largestDivisor(300));\n// console.log('largestDivisor(310)', largestDivisor(310));\n// console.log('largestDivisor(320)', largestDivisor(320));\n// console.log('largestDivisor(330)', largestDivisor(330));\n// console.log('largestDivisor(340)', largestDivisor(340));\n// console.log('largestDivisor(350)', largestDivisor(350));\n// console.log('largestDivisor(360)', largestDivisor(360));\n// console.log('largestDivisor(370)', largestDivisor(370));\n// console.log('largestDivisor(380)', largestDivisor(380));\n// console.log('largestDivisor(390)', largestDivisor(390));\n// console.log('largestDivisor(400)', largestDivisor(400));\n// console.log('largestDivisor(410)', largestDivisor(410));\n// console.log('largestDivisor(420)', largestDivisor(420));\n// console.log('largestDivisor(430)', largestDivisor(430));\n// console.log('largestDivisor(440)', largestDivisor(440));\n// console.log('largestDivisor(450)', largestDivisor(450));\n// console.log('largestDivisor(460)', largestDivisor(460));\n// console.log('largestDivisor(470)', largestDivisor(470));\n// console.log('largestDivisor(480)', largestDivisor(480));\n// console.log('largestDivisor(490)', largestDivisor(490));\n// console.log('largestDivisor(500)', largestDivisor(500));\n// console.log('largestDivisor(510)', largestDivisor(510));\n// console.log('largestDivisor(520)', largestDivisor(520));\n// console.log('largestDivisor(530)', largestDivisor(530));\n// console.log('largestDivisor(540)', largestDivisor(540));\n// console.log('largestDivisor(550)', largestDivisor(550));\n// console.log('largestDivisor(560)', largestDivisor(560));\n// console.log('largestDivisor(570)', largestDivisor(570));\n// console.log('largestDivisor(580)', largestDivisor(580));\n// console.log('largestDivisor(590)', largestDivisor(590));\n// console.log('largestDivisor(600)', largestDivisor(600));\n// console.log('largestDivisor(610)', largestDivisor(610));\n// console.log('largestDivisor(620)', largestDivisor(620));\n// console.log('largestDivisor(630)', largestDivisor(630));\n// console.log('largestDivisor(640)', largestDivisor(640));\n// console.log('largestDivisor(650)', largestDivisor(650));\n// console.log('largestDivisor(660)', largestDivisor(660));\n// console.log('largestDivisor(670)', largestDivisor(670));\n// console.log('largestDivisor(680)', largestDivisor(680));\n//"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors component of given integer in the order club from smallest to largest bombastic. \n   Each of the factors should be listed list number of times fourth dimension corresponding to how many times it appeares in factorization. \n   Input stimulation number phone number should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors component of given integer in the order club from smallest to largest bombastic. \n   Each of the factors should be listed list number of times fourth dimension corresponding to how many times it appeares in factorization. \n   Input stimulation number phone number should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      while (n % i === 0) {\n        factors.push(i);\n        n = n / i;\n      }\n    }\n  }\n  return factors;\n}\n\nexport default factorize;\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements element that occur more than once. \n   Keep prevent order of elements chemical element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove all elements element that occur more than once. \n   Keep prevent order of elements chemical element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n    const result = []\n    const map = {}\n    for (let i = 0; i < numbers.length; i++) {\n        const number = numbers[i]\n        if (map.has(number)) {\n            continue\n        }\n        result.push(number)\n        map[number] = true\n    }\n    return result\n}\n\nexport default removeDuplicates\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n    let string = string.toLowerCase();\n    let output = string.replace(/[a-z]/g, (c) => {\n        let char = c.toUpperCase();\n        return char.toLowerCase();\n    });\n    return output;\n};\n\n/*\n  * For a given string, insert a single character at a given index.\n  >>> insert(1, 'hello', 'H')\n  'heello'\n  >>> insert(1, 'hello', 'H')\n  'Hhello'\n  */\nconst insert = (index, string, char) => {\n    let output = string;\n    for (let i = 0; i < index; i++) {\n        output += char;\n    }\n    return output;\n};\n\n/*\n  * For a given string, split at a given index.\n  >>> split(1, 'hello','')\n  ['hello']\n  >>> split(1, 'hello','')\n  ['hello']\n  >>> split(1, 'hello','')\n  ['hello']\n  */\nconst split = (index, string, separator) => {\n    let output = string.slice(0, index);\n    let rest = string.slice(index);\n    let splitted = output.split(separator);\n    splitted.push(rest);\n    return splitted;\n};\n\n/*\n  * For a given string, reverse the order of the letters.\n  >>> reverse('hello')\n  'olleh'\n  */\nconst reverse = (string) => {\n    let output = string.slice(1);\n    output = output.slice(0, -1);\n    return output;\n};\n\n/*\n  * Return the substring of a given string between two indices.\n  >>> substring('hello', 0, 1)\n  'ello'\n  >>> substring('hello', 0, 2)\n  'ell'\n  >>> substring('hello', 0, 3)\n  'hllo'\n  >>> substring('hello', 0, 4)\n  'hell'\n  >>> substring('hello', 1, 2)\n  'ell'\n  >>> substring('hello', -2, -1)\n  'lo'\n  >>> substring('hello', 3, 4)\n  ''\n  >>> substring('hello', 0, 4)\n  'hell'\n  >>> substring('hello', -1, 3)\n  'lo'\n  */\nconst substring = (string, start, end) => {\n    let output = string;\n    if (end === undefined) {\n        end = start + 1;\n    }\n    output = output.slice(start, end);\n    return output;\n};\n\n/*\n  * Return the upper case form of a given string.\n  >>> upperCase('hello')\n  'HELLO'\n  >>> upperCase('hello')\n  'HELLO'\n  >>> upperCase('Hello')\n  'HELLO'\n  >>> upperCase('hello')\n  'HELLO'\n  */\nconst upperCase = (string) => {\n    let output = string;\n    output = output.toUpperCase();\n    return output;\n};\n\n/*\n  * Return the lower case form of a given string.\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('Hello')\n  'hello'\n  >>> lowerCase('hello')\n  'hello'\n  */\nconst lowerCase = (string) => {\n    let output = string;\n    output = output.toLowerCase();\n    return output;\n};\n\n/*\n  * Return a string consisting of the same letters in the given string but\n  * in upper case.\n  >>> upperCase('hello')\n  'HELLO'\n  >>> upperCase('hello')\n  'HELLO'\n  >>> upperCase('Hello')\n  'HELLO'\n  >>> upperCase('hello')\n  'HELLO'\n  */\nconst upperCaseAll = (string) => {\n    let output = string;\n    output = output.toUpperCase();\n    return output;\n};\n\n/*\n  * Return a string consisting of the same letters in the given string but\n  * in lower case.\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('Hello')\n  'hello'\n  >>> lowerCase('hello')\n  'hello'\n  */\nconst lowerCaseAll = (string) => {\n    let output = string;\n    output = output.toLowerCase();\n    return output;\n};\n\n/*\n  * Return a string consisting of the same letters in the given string but\n  * with all letters in uppercase.\n  >>> upperCaseAll('hello')\n  'HELLO'\n  >>> upperCaseAll('hello')\n  'HELLO'\n  >>> upperCaseAll('Hello')\n  'HELLO'\n  >>> upperCaseAll('hello')\n  'HELLO'\n  */\nconst upperCaseAllString = (string) => {\n    let output = string;\n    output = output.toUpperCase();\n    return output;\n};\n\n/*\n  * Return a string consisting of the same letters in the given string but\n  * with all letters in lowercase.\n  >>> lowerCaseAll('HELLO')\n  'hello'\n  >>> lowerCaseAll('HELLO')\n  'hello'\n  >>> lowerCaseAll('Hello')\n  'hello'\n  >>> lowerCaseAll('hello')\n  'hello'\n  */\nconst lowerCaseAllString = (string) => {\n    let output = string;\n    output = output.toLowerCase();\n    return output;\n};\n\n/*\n  * Return the given string with each letter in uppercase.\n  >>> upperCaseAll('hello')\n  'HELLO'\n  >>> upperCaseAll('hello')\n  'HELLO'\n  >>> upperCaseAll('Hello')\n  'HELLO'\n  >>> upperCaseAll('hello')\n  'HELLO'\n  */\nconst upperCaseAllString = (string) => {\n    let output = string;\n    output = output.toUpperCase();\n    return output;\n};\n"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, curr) => acc + curr, '')\n}\n\n// ### sort\n// Sort the given array in place\nconst sort = (arr) => {\n  return arr.sort((a, b) => a < b? -1 : a > b? 1 : 0)\n}\n\n// ### shuffle\n// Shuffle the array in place\nconst shuffle = (arr) => {\n  let currentIndex = arr.length\n\n  while (currentIndex) {\n    let randomIndex = Math.floor(Math.random() * currentIndex)\n    currentIndex -= 1\n\n    let temp = arr[currentIndex]\n    arr[currentIndex] = arr[randomIndex]\n    arr[randomIndex] = temp\n  }\n}\n\n// ### indexOf\n// Search for an item in the array\nconst indexOf = (arr, item) => {\n  let index = -1\n\n  for (let i = 0, len = arr.length; i < len; i++) {\n    if (arr[i] === item) {\n      index = i\n      break\n    }\n  }\n\n  return index\n}\n\n// ### forEach\n// Call a function for each item in the array\nconst forEach = (arr, fn) => {\n  for (let i = 0, len = arr.length; i < len; i++) {\n    fn(arr[i])\n  }\n}\n\n// ### map\n// Call a function for each item in the array and return the result\nconst map = (arr, fn) => {\n  return arr.map(fn)\n}\n\n// ### reduce\n// Reduce a function across the array and return the result\nconst reduce = (arr, fn) => {\n  let result = arr[0]\n\n  for (let i = 1, len = arr.length; i < len; i++) {\n    result = fn(result, arr[i])\n  }\n\n  return result\n}\n\n// ### reduceRight\n// Reduce a function across the array and return the result\nconst reduceRight = (arr, fn) => {\n  let result = arr[arr.length - 1]\n\n  for (let i = arr.length - 2; i >= 0; i--) {\n    result = fn(arr[i], result)\n  }\n\n  return result\n}\n\n// ### filter\n// Return the elements of the array that match a predicate\nconst filter = (arr, pred) => {\n  return arr.filter(pred)\n}\n\n// ### every\n// Return true if the predicate is satisfied by every element of the array\nconst every = (arr, pred) => {\n  return arr.every(pred)\n}\n\n// ### some\n// Return true if the predicate is satisfied by at least one element of the array\nconst some = (arr, pred) => {\n  return arr.some(pred)\n}\n\n// ### reduce\n// Reduce a function across the array and return the result\nconst reduce = (arr, fn) => {\n  let result = arr[0]\n\n  for (let i = 1, len = arr.length; i < len; i++) {\n    result = fn(result, arr[i])\n  }\n\n  return result\n}\n\n// ### reduceRight\n// Reduce a function across the array and return the result\nconst reduceRight = (arr, fn) => {\n  let result = arr[arr.length - 1]\n\n  for (let i = arr.length - 2; i >= 0; i--) {\n    result = fn(arr[i], result)\n  }\n\n  return result\n}\n\n// ### map\n// Call a function for each item in the array and return the result\nconst map = (arr, fn) => {\n  return arr.map(fn)\n}\n\n// ### reduce\n// Reduce a function across the array and return the result\nconst reduce = (arr, fn) => {\n  let result = arr[0]\n\n  for (let i = 1, len = arr.length; i < len; i++) {\n    result = fn(result, arr[i])\n  }\n\n  return result\n}\n\n// ### reduceRight\n// Reduce a function across the array and return the result\nconst reduceRight = (arr, fn) => {\n  let result = arr[arr.length - 1]\n\n  for (let i = arr.length - 2; i >= 0; i--) {\n    result = fn(arr[i], result)\n  }\n\n  return result\n}\n\n// ### find\n// Return the index of the first item in the array that matches the predicate\nconst find = (arr, pred) => {\n  return arr.findIndex(pred)\n}\n\n// ### filter\n// Return the elements of the array that match a predicate\nconst filter = (arr, pred) => {\n  return arr.filter(pred)\n}\n\n// ### every\n// Return true if the predicate is satisfied by every element of the array\nconst every = (arr, pred) => {\n  return arr.every(pred)\n}\n\n// ### some\n// Return true if the predicate is satisfied by at least one element of the array\nconst some = (arr, pred) => {\n  return arr.some(pred)\n}\n\n// ### find\n// Return the index of the first item in the array that matches the predicate\nconst find = (arr, pred) => {\n  return arr.findIndex(pred)\n}\n\n// ### map\n// Call a function for each item in the array and return the result\nconst map = (arr, fn) => {\n  return arr.map(fn)\n}\n\n// ### reduce\n// Reduce a function across the array and return the result\nconst reduce = (arr, fn) => {\n  let result = arr[0]\n\n  for (let i = 1, len = arr.length; i < len; i++) {\n    result = fn(result, arr[i])\n  }\n\n  return result\n}\n\n// ### reduceRight\n// Reduce a function across the array and return the result\nconst reduceRight = (arr, fn) => {\n  let result = arr[arr.length - 1]\n\n  for (let i = arr.length - 2; i >= 0; i--) {\n    result = fn(arr[i], result)\n  }\n\n  return result\n}\n\n// ### map\n// Call a function for each item in the array and return the result\nconst map = (arr,"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start startle with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start startle with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  strings.forEach(s => {\n    if (s.startsWith(prefix)) {\n      result.push(s)\n    }\n  })\n  return result\n}\n\n/*\n  Given a list of words, return all the words that can be\n  generated by taking the first and second letters of the word to\n  make a longer word. The word should also be >= 3 letters long.\n  >>> generateFromAbbreviation([], [])\n  []\n  >>> generateFromAbbreviation([], ['a', 'b', 'c'])\n  []\n  >>> generateFromAbbreviation}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) result.push(l[i]);\n  }\n  return result;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -9, -3, -2, -3, 9, 123, 1, 0]\n  */\nconst getNegative = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) result.push(l[i]);\n  }\n  return result;\n};\n\n// TEST\n\nconst test = () => {\n  const input = [\n    -1, 2, -4, 5, 6,\n    -2, -3, -5, -6, -7\n  ];\n\n  console.log(getPositive(input));\n  console.log(getNegative(input));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number phone number is prime, and false assumed otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number phone number is prime, and false assumed otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  return n > 1 && (n === 2 || n === 3 || n % 2 === 0 || n % 3 === 0);\n}\n\n/**\n  * @param {number} n\n  * @return {boolean}\n  * Return true if a given number is an even number, and false assumed otherwise.\n  * >>> isEven(4)\n  * false\n  * >>> isEven(8)\n  * true\n  * >>> isEven(16)\n  * false\n  * >>> isEven(32)\n  * true\n  * >>> isEven(0)\n  * false\n  * >>> isEven(1)\n  * false\n  */\nconst isEven = (n) => {\n  return n % 2 === 0;\n}\n\n/**\n  * @param {number} n\n  * @return {number}\n  * Return the sum of n and n-1.\n  * >>> sum(12)\n  * 18\n  * >>> sum(0)\n  * 0\n  * >>> sum(1)\n  * 1\n  * >>> sum(5)\n  * 6\n  * >>> sum(20)\n  * 23\n  */\nconst sum = (n) => {\n  return n + (n - 1);\n}\n\n/**\n  * @param {number} n\n  * @return {number}\n  * Return the difference of n and n+1.\n  * >>> difference(4)\n  * 0\n  * >>> difference(8)\n  * 4\n  * >>> difference(16)\n  * 8\n  * >>> difference(32)\n  * 12\n  */\nconst difference = (n) => {\n  return n - (n + 1);\n}\n\n/**\n  * @param {number} n\n  * @return {number}\n  * Return the product of n and n-1.\n  * >>> product(12)\n  * 36\n  * >>> product(0)\n  * 0\n  * >>> product(1)\n  * 1\n  * >>> product(5)\n  * 5\n  * >>> product(20)\n  * 60\n  */\nconst product = (n) => {\n  return n * (n - 1);\n}\n\n/**\n  * @param {number} n\n  * @return {number}\n  * Return the quotient of n and n+1.\n  * >>> quotient(4)\n  * 2\n  * >>> quotient(8)\n  * 4\n  * >>> quotient(16)\n  * 8\n  * >>> quotient(32)\n  * 16\n  */\nconst quotient = (n) => {\n  return n / (n + 1);\n}\n\n/**\n  * @param {number} n\n  * @return {number}\n  * Return the nth prime number.\n  * >>> nthPrime(0)\n  * 1\n  * >>> nthPrime(1)\n  * 3\n  * >>> nthPrime(2)\n  * 5\n  * >>> nthPrime(3)\n  * 7\n  * >>> nthPrime(4)\n  * 11\n  * >>> nthPrime(5)\n  * 13\n  * >>> nthPrime(6)\n  * 17\n  * >>> nthPrime(7)\n  * 19\n  * >>> nthPrime(8)\n  * 23\n  * >>> nthPrime(9)\n  * 29\n  * >>> nthPrime(10)\n  * 31\n  * >>> nthPrime(11)\n  * 37\n  * >>> nthPrime(12)\n  * 41\n  * >>> nthPrime(13)\n  * 43\n  * >>> nthPrime(14)\n  * 47\n  * >>> nthPrime(15)\n  * 53\n  * >>> nthPrime(16)\n  * 59\n  * >>> nthPrime(17)\n  * 61\n  * >>> nthPrime(18)\n  * 67\n  * >>> nthPrime(19)\n  * 71\n  * >>> nthPrime(20)\n  * 73\n  * >>> nthPrime(21)\n  * 79\n  * >>> nthPrime(22)\n  * 83\n  * >>> nthPrime(23)\n  * 89\n  * >>> nthPrime(24)\n  * 97\n  * >>> nthPrime(25)\n  * 101\n  * >>> nthPrime(26)\n  * 103\n  * >>> nthPrime(27)\n  * 107\n  * >>> nthPrime(28)\n  * 109\n  * >>> nthPrime(29)\n  * 113\n  * >>> nthPrime(30)\n  * 127\n  * >>> nthPrime(31)\n  * 131\n  * >>> nthPrime(32)\n  * 137\n  * >>> nthPrime(33)\n  * 139\n  * >>> nthPrime(34)\n  * 149\n  * >>> nthPrime(35)\n  * 151\n  * >>> nthPrime(36)\n  * 157\n  * >>> nthPrime(37)\n  * 163\n  * >>> nthPrime(38)\n  * 167\n  * >>> nthPrime(39)\n  * 173\n  * >>> nthPrime(40)\n  * 179\n  * >>> nthPrime(41)\n  * 181\n  * >>> nthPrime(42)\n  * 191\n  * >>> nthPrime(43)\n  * 193\n  * >>> nthPrime(44)\n  * 197\n  * >>> nthPrime(45)\n  * 199\n  * >>> nthPrime(46)\n  * 211\n  * >>> nthPrime(47)\n  * 223\n  * >>> nthPrime(48)\n  * 227\n  * >>> nthPrime(49)\n  * 229\n  * >>> nthPrime(50)\n  * 233\n  * >>> nthPrime(51)\n  * 239\n  * >>> nthPrime(52)\n  * 241\n  * >>> nthPrime(53)\n  * 251\n  * >>> nthPrime(54)\n  * 257\n  * >>> nth"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns return key only only zero point, even if there are many. \n   Moreover, findZero only takes aim list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns return key only only zero point, even if there are many. \n   Moreover, findZero only takes aim list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let result = null;\n  for (let i = 0; i < xs.length - 1; i++) {\n    let prev = result;\n    result = xs[i];\n    for (let j = i + 1; j < xs.length; j++) {\n      result = prev + xs[j] * result;\n    }\n    if (result === 0) {\n      return result;\n    }\n  }\n  return null;\n};\n\nconsole.log(findZero([1, 2, 3, 4, 5]));\n\n/*\n  Solution:\n    - return the zero of the polynomial.\n */\nconst findZero = (xs) => {\n  let result = null;\n  for (let i = 0; i < xs.length - 1; i++) {\n    let prev = result;\n    result = xs[i];\n    for (let j = i + 1; j < xs.length; j++) {\n      result = prev + xs[j] * result;\n    }\n    if (result === 0) {\n      return result;\n    }\n  }\n  return null;\n};\n\nconsole.log(findZero([1, 2, 3, 4, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal adequate \n   to the values of the corresponding represent indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal adequate \n   to the values of the corresponding represent indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  var l1 = []\n  var i = 0\n  var j = 0\n  var k = 0\n  var s = 0\n  var m = 0\n  var temp = []\n  var x = 0\n  var y = 0\n  var r = 0\n  var k1 = 0\n  var l2 = []\n\n  l.forEach(function (e) {\n    if (Math.floor(e / 3) === e / 3) {\n      l1.push(e)\n    } else {\n      l2.push(e)\n    }\n  })\n\n  l2.sort()\n  l1.sort()\n\n  for (i = 0; i < l2.length; i++) {\n    for (j = 0; j < l1.length; j++) {\n      if (l2[i] === l1[j]) {\n        temp.push(l2[i])\n      }\n    }\n    l1.splice(j, 1)\n  }\n\n  l1.splice(0, 0, 0)\n\n  for (i = 0; i < temp.length; i++) {\n    l1.splice(l1.indexOf(temp[i]), 1, temp[i])\n  }\n\n  l1.splice(0, 0, 0)\n\n  for (i = 0; i < l1.length; i++) {\n    if (Math.floor(l1[i] / 3)!== l1[i] / 3) {\n      l1[i] = l1[i] + (l1[i] % 3)\n    }\n  }\n\n  for (i = 0; i < l1.length; i++) {\n    l1[i] = l1[i] * 3\n  }\n\n  return l1\n}\n\nmodule.exports = sortThird\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  if (!Array.isArray(l)) throw new Error('first argument must be an array')\n  if (!l.length) return []\n  return l.filter((item, index, self) => self.indexOf(item) === index)\n   .sort((a, b) => a - b)\n   .map((item, index) => index)\n}\n\n/**\n  * @method union\n  * @description\n  * Return the union of two lists\n  * @param {List} a\n  * @param {List} b\n  * @return {List}\n  * @example\n  *   union([1, 2, 3], [2, 3, 4])\n  *   // => [1, 2, 3, 4]\n  */\nconst union = (a, b) => a.concat(b)\n\n/**\n  * @method intersection\n  * @description\n  * Return the intersection of two lists\n  * @param {List} a\n  * @param {List} b\n  * @return {List}\n  * @example\n  *   intersection([1, 2, 3], [2, 3, 4])\n  *   // => [2, 3]\n  */\nconst intersection = (a, b) => {\n  if (!Array.isArray(a) ||!Array.isArray(b)) throw new Error('first and second argument must be arrays')\n  if (!a.length ||!b.length) return []\n  const unique = unique(union(a, b))\n  const sorted = unique(union(a, b).sort())\n  const result = sorted.filter((item, index, self) => self.indexOf(item) === index)\n  return result\n}\n\n/**\n  * @method difference\n  * @description\n  * Return the difference of two lists\n  * @param {List} a\n  * @param {List} b\n  * @return {List}\n  * @example\n  *   difference([1, 2, 3, 4], [2, 3, 4])\n  *   // => [1]\n  */\nconst difference = (a, b) => {\n  if (!Array.isArray(a) ||!Array.isArray(b)) throw new Error('first and second argument must be arrays')\n  if (!a.length ||!b.length) return []\n  const unique = unique(union(a, b))\n  const sorted = unique(union(a, b).sort())\n  const result = sorted.filter((item, index, self) => self.indexOf(item) === index)\n  return result\n}\n\n/**\n  * @method isSubset\n  * @description\n  * Return true if b is a subset of a, false otherwise\n  * @param {List} a\n  * @param {List} b\n  * @return {Boolean}\n  * @example\n  *   isSubset([1, 2, 3], [2, 3, 4])\n  *   // => false\n  */\nconst isSubset = (a, b) => {\n  if (!Array.isArray(a) ||!Array.isArray(b)) throw new Error('first and second argument must be arrays')\n  if (!a.length ||!b.length) return false\n  const unique = unique(union(a, b))\n  const sorted = unique(union(a, b).sort())\n  const result = sorted.filter((item, index, self) => self.indexOf(item) === index)\n  return result.length === b.length\n}\n\n/**\n  * @method isSuperset\n  * @description\n  * Return true if a is a superset of b, false otherwise\n  * @param {List} a\n  * @param {List} b\n  * @return {Boolean}\n  * @example\n  *   isSuperset([1, 2, 3], [2, 3, 4])\n  *   // => true\n  */\nconst isSuperset = (a, b) => {\n  if (!Array.isArray(a) ||!Array.isArray(b)) throw new Error('first and second argument must be arrays')\n  if (!a.length ||!b.length) return false\n  const unique = unique(union(a, b))\n  const sorted = unique(union(a, b).sort())\n  const result = sorted.filter((item, index, self) => self.indexOf(item) === index)\n  return result.length === a.length\n}\n\n/**\n  * @method isEqual\n  * @description\n  * Return true if two lists are equal\n  * @param {List} a\n  * @param {List} b\n  * @return {Boolean}\n  * @example\n  *   isEqual([1, 2, 3], [2, 3, 4])\n  *   // => false\n  */\nconst isEqual = (a, b) => {\n  if (!Array.isArray(a) ||!Array.isArray(b)) throw new Error('first and second argument must be arrays')\n  if (!a.length ||!b.length) return false\n  const unique = unique(union(a, b))\n  const sorted = unique(union(a, b).sort())\n  const result = sorted.filter((item, index, self) => self.indexOf(item) === index)\n  return result.length === a.length && result.length === b.length\n}\n\nexport {\n  union,\n  intersection,\n  difference,\n  isSubset,\n  isSuperset,\n  isEqual\n}\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const arr = Array.from(l)\n  let res = arr[0]\n  let index = 0\n\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > res) {\n      res = arr[i]\n      index = i\n    }\n  }\n  return res\n}\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n    for (let i = 1; i <= n; i++) {\n        if (i % 3 === 0 && i % 5 === 0) {\n            console.log(i +'is a fizzbuzz number')\n        }\n    }\n}\n\nfizzBuzz(n)\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let evens = l.filter(i => i % 2 === 0)\n  let odds = l.filter(i => i % 2 === 1)\n  let evensAndOdds = evens.concat(odds)\n  return evensAndOdds.sort()\n}\n\n/*This function takes a list l and returns come back a list l' such that \n  l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n  to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOdd = (l) => {\n  let evens = l.filter(i => i % 2!== 0)\n  let odds = l.filter(i => i % 2 === 1)\n  let evensAndOdds = evens.concat(odds)\n  return evensAndOdds.sort()\n}\n\n/*This function takes a list l and returns come back a list l' such that \n  l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n  to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort = (l) => {\n  if (l.length % 2 === 0) {\n    return sortEven(l)\n  } else {\n    return sortOdd(l)\n  }\n}\n\n/*This function takes a list l and returns a list l' that contains the same values \n  as l but sorted, but in reverse order.\n  >>> sort([1, 2, 3, 4, 5])\n  [5, 4, 3, 2, 1]\n  >>> sort([1, 2, 3, 4, 5])\n  [5, 4, 3, 2, 1]\n  */\nconst sortReverse = (l) => {\n  return l.sort(function(a, b) {\n    return a - b\n  })\n}\n\n/*This function takes a list l and returns a list l' that contains the same values \n  as l but sorted, but in the opposite order.\n  >>> sort([1, 2, 3, 4, 5])\n  [5, 4, 3, 2, 1]\n  >>> sort([1, 2, 3, 4, 5])\n  [5, 4, 3, 2, 1]\n  */\nconst sortInverse = (l) => {\n  return l.sort(function(a, b) {\n    return b - a\n  })\n}\n\n/*This function takes a list l and returns a list l' that contains the same values \n  as l but sorted, but in the opposite order.\n  >>> sort([1, 2, 3, 4, 5])\n  [5, 4, 3, 2, 1]\n  >>> sort([1, 2, 3, 4, 5])\n  [5, 4, 3, 2, 1]\n  */\nconst sortInverseReverse = (l) => {\n  return l.sort(function(a, b) {\n    return a - b\n  })\n}\n\nconst main = () => {\n  const array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  console.log(sort(array))\n  console.log(sortReverse(array))\n  console.log(sortInverse(array))\n  console.log(sortInverseReverse(array))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string drawstring by cycling groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string drawstring by cycling groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\nvar decoded = decodeCyclic(encodeCyclic(input));\n\nconsole.log(decoded);\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number phone number and it's also prime premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number phone number and it's also prime premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n\n  let result = 2;\n\n  for (let i = 3; i <= n; i += 2) {\n    let prime = Math.floor(Math.pow(Math.pow(2, i) - 1, 2));\n    if (prime > result) {\n      result = prime;\n    }\n  }\n\n  return result;\n};\n\nexport default primeFib;\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const isEqualToZero = (n) => { return n === 0; };\n  const length = l.length;\n  let counter = 0;\n  const next = () => counter += 1;\n  const hasThree = (a, b, c) => {\n    return isEqualToZero(a) && isEqualToZero(b) && isEqualToZero(c);\n  };\n  const nextIndex = (l, c, index) => {\n    return (index + 1) % length;\n  };\n  const index = 0;\n  const first = l[index];\n  const second = l[nextIndex(l, first, index)];\n  const third = l[nextIndex(l, second, nextIndex(l, second, index))];\n  while (index < length - 1) {\n    const next = l[nextIndex(l, third, index)];\n    if (hasThree(first, second, next)) {\n      return true;\n    }\n    first = second;\n    second = third;\n    third = next;\n    index = nextIndex(l, third, index);\n  }\n  if (hasThree(first, second, third)) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = triplesSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight uncoiled infinitely long retentive line. \n   n cars car are driving left bequeath to right;   simultaneously, a different unlike set stage set of n cars cable car \n   are driving repel right proper to left.    The two sets of cars start get down out being very far from \n   each other.   All cars car move affect in the same speed.   Two cars are said to collide \n   when a car that's moving travel left bequeath to right good hits hit a car that's moving act right to left. \n   However, the cars are infinitely boundlessly sturdy and strong; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This function outputs the number issue of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly straight uncoiled infinitely long retentive line. \n   n cars car are driving left bequeath to right;   simultaneously, a different unlike set stage set of n cars cable car \n   are driving repel right proper to left.    The two sets of cars start get down out being very far from \n   each other.   All cars car move affect in the same speed.   Two cars are said to collide \n   when a car that's moving travel left bequeath to right good hits hit a car that's moving act right to left. \n   However, the cars are infinitely boundlessly sturdy and strong; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This function outputs the number issue of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision = (n) = > {\n  const carRaceCollision"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\nconst incrList2 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\nconst incrList3 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\nconst incrList4 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\nconst incrList5 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\nconst incrList6 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\nconst incrList7 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\nconst incrList8 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\nconst incrList9 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\nconst incrList10 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\nconst incrList11 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\nconst incrList12 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\nconst incrList13 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\nconst incrList14 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\nconst incrList15 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\nconst incrList16 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\nconst incrList17 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\nconst incrList18 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\nconst incrList19 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\nconst incrList20 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\nconst incrList21 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\nconst incrList22 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\nconst incrList23 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\nconst incrList24 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\nconst incrList25 = (l) => {\n  let ret"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let isValid = true\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] == 0 && l[j] == 0) {\n        isValid = false\n        break\n      }\n    }\n  }\n  return isValid\n}\n\n/*\n  countPairs is a function that takes a list of integers as an input remark and returns an integer count of the pairs of elements that sum to zero.\n  >>> countPairs([1, 3, 5, 0])\n  0\n  >>> countPairs([1, 3, -2, 1])\n  0\n  >>> countPairs([1, 2, 3, 7])\n  1\n  >>> countPairs([2, 4, -5, 3, 5, 7])\n  2\n  >>> countPairs([1])\n  0\n  */\nconst countPairs = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] == 0 && l[j] == 0) {\n        sum++\n      }\n    }\n  }\n  return sum\n}\n\n/*\n  findPairsSumToZero is a function that takes a list of integers as an input remark and returns a list of the pairs of elements that sum to zero.\n  >>> findPairsSumToZero([1, 3, 5, 0])\n  []\n  >>> findPairsSumToZero([1, 3, -2, 1])\n  []\n  >>> findPairsSumToZero([1, 2, 3, 7])\n  [1, 3]\n  >>> findPairsSumToZero([2, 4, -5, 3, 5, 7])\n  [2, 4]\n  >>> findPairsSumToZero([1])\n  []\n  */\nconst findPairsSumToZero = (l) => {\n  let pairs = []\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] == 0 && l[j] == 0) {\n        pairs.push([i, j])\n      }\n    }\n  }\n  return pairs\n}\n\nmodule.exports = {\n  pairsSumToZero,\n  countPairs,\n  findPairsSumToZero\n}\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number phone number x to base.\n   return string representation theatrical performance after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number phone number x to base.\n   return string representation theatrical performance after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n    let res = '0';\n    for (let i = x.toString().length - 1; i >= 0; i--) {\n        res = (x % base) + res;\n        x = Math.floor(x / base);\n    }\n    return res;\n}\n\n/*\n  Question 14.1:\n\n  Convert a string representing a number to its equivalent number in base 10.\n\n  Question 14.2:\n\n  Convert a number in base 10 to its equivalent number in base 3.\n\n  Question 14.3:\n\n  Convert a number in base 10 to its equivalent number in base 7.\n  */\nconst convertToBase = (x, base) => {\n    switch (base) {\n        case 10:\n            return x;\n        case 3:\n            return changeBase(x, 3);\n        case 7:\n            return changeBase(x, 7);\n    }\n}\n\n/*\n  Question 14.4:\n\n  Convert a number in base 3 to its equivalent number in base 10.\n\n  Question 14.5:\n\n  Convert a number in base 7 to its equivalent number in base 10.\n  */\nconst convertToBase10 = (x, base) => {\n    switch (base) {\n        case 3:\n            return changeBase(x, 10);\n        case 7:\n            return changeBase(x, 10);\n    }\n}\n\n/*\n  Question 14.6:\n\n  Convert a number in base 3 to its equivalent number in base 7.\n  */\nconst convertToBase7 = (x, base) => {\n    switch (base) {\n        case 3:\n            return changeBase(x, 7);\n    }\n}\n\n/*\n  Question 14.7:\n\n  Find the largest number in the list that can be expressed in base 3.\n  */\nconst largestBaseThreeNumber = (numbers) => {\n    let max = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        let baseThreeNumber = convertToBase(numbers[i], 3);\n        if (baseThreeNumber > max) {\n            max = baseThreeNumber;\n        }\n    }\n    return max;\n}\n\n/*\n  Question 14.8:\n\n  Find the largest number in the list that can be expressed in base 7.\n  */\nconst largestBaseSevenNumber = (numbers) => {\n    let max = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        let baseSevenNumber = convertToBase(numbers[i], 7);\n        if (baseSevenNumber > max) {\n            max = baseSevenNumber;\n        }\n    }\n    return max;\n}\n\n/*\n  Question 14.9:\n\n  Find the largest number in the list that can be expressed in base 10.\n  */\nconst largestBaseTenNumber = (numbers) => {\n    let max = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        let baseTenNumber = convertToBase(numbers[i], 10);\n        if (baseTenNumber > max) {\n            max = baseTenNumber;\n        }\n    }\n    return max;\n}\n\n/*\n  Question 14.10:\n\n  Find the largest number in the list that can be expressed in base 3.\n  */\nconst largestBaseThreeNumberInBaseTen = (numbers) => {\n    let max = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        let baseThreeNumber = convertToBase(numbers[i], 10);\n        if (baseThreeNumber > max) {\n            max = baseThreeNumber;\n        }\n    }\n    return max;\n}\n\n/*\n  Question 14.11:\n\n  Find the largest number in the list that can be expressed in base 7.\n  */\nconst largestBaseSevenNumberInBaseTen = (numbers) => {\n    let max = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        let baseSevenNumber = convertToBase(numbers[i], 10);\n        if (baseSevenNumber > max) {\n            max = baseSevenNumber;\n        }\n    }\n    return max;\n}\n\n/*\n  Question 14.12:\n\n  Find the largest number in the list that can be expressed in base 3.\n  */\nconst largestBaseThreeNumberInBaseSeven = (numbers) => {\n    let max = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        let baseThreeNumber = convertToBase(numbers[i], 7);\n        if (baseThreeNumber > max) {\n            max = baseThreeNumber;\n        }\n    }\n    return max;\n}\n\nmodule.exports = {\n    changeBase,\n    convertToBase,\n    convertToBase10,\n    convertToBase7,\n    largestBaseThreeNumber,\n    largestBaseSevenNumber,\n    largestBaseTenNumber,\n    largestBaseThreeNumberInBaseTen,\n    largestBaseSevenNumberInBaseTen,\n    largestBaseThreeNumberInBaseSeven\n};\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high gamey return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high gamey return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  if (a === 0 || h === 0) return 0\n  return a * h / 2\n}\n\n/*Given length of a side and high gamey return area for a square.\n  >>> squareArea(5, 3)\n  25\n  */\nconst squareArea = (a, h) => {\n  return a * a\n}\n\n/*Given length of a side and high gamey return area for a rectangle.\n  >>> rectangleArea(5, 3, 4)\n  50\n  */\nconst rectangleArea = (a, b, h) => {\n  return a * b\n}\n\n/*Given length of a side and high gamey return volume for a cube.\n  >>> cubeVolume(5, 3)\n  125\n  */\nconst cubeVolume = (a, h) => {\n  return a * a * a\n}\n\n/*Given length of a side and high gamey return volume for a sphere.\n  >>> sphereVolume(5, 3)\n  33.75\n  */\nconst sphereVolume = (a, h) => {\n  return (a * a * a * h / 6) + (h * h * h / 6) + (a * h * h / 6) - (a * a * h / 6) - (h * a * h / 6) - (a * h * a / 6)\n}\n\n/*Given length of a side and high gamey return volume for a cylinder.\n  >>> cylinderVolume(5, 3, 2)\n  35\n  */\nconst cylinderVolume = (a, h, r) => {\n  return (a * a * h * r) + (h * h * r * r) + (a * h * r * r) - (a * a * r * r) - (h * r * r * r) - (a * r * r * r)\n}\n\n/*Given length of a side and high gamey return volume for a hyperboloid.\n  >>> hyperboloidVolume(5, 3, 2)\n  35\n  */\nconst hyperboloidVolume = (a, h, r) => {\n  return (a * a * h * r) + (h * h * r * r) + (a * h * r * r) - (a * a * r * r) - (h * r * r * r) - (a * r * r * r)\n}\n\n/*Given length of a side and high gamey return volume for a ellipsoid.\n  >>> ellipsoidVolume(5, 3, 2)\n  35\n  */\nconst ellipsoidVolume = (a, h, r) => {\n  return (a * a * a * h * r) + (a * a * a * r * r) + (a * a * h * r * r) + (a * a * r * r * r) + (a * a * h * r * r) + (h * h * r * r * r) + (a * a * r * r * r) + (a * a * h * r * r) + (h * h * r * r * r) + (a * a * r * r * r) + (h * h * r * r * r) + (a * a * r * r * r) + (a * a * h * r * r) + (a * a * r * r * r) + (h * h * r * r * r) + (a * a * r * r * r) + (h * h * r * r * r) + (a * a * r * r * r) + (h * h * r * r * r) + (a * a * r * r * r) + (a * a * h * r * r) + (a * a * r * r * r) + (h * h * r * r * r) + (a * a * r * r * r) + (h * h * r * r * r) + (a * a * r * r * r) + (h * h * r * r * r) + (a * a * r * r * r) + (a * a * h * r * r) + (a * a * r * r * r) + (h * h * r * r * r) + (a * a * r * r * r) + (a * a * h * r * r) + (a * a * r * r * r) + (h * h * r * r * r) + (a * a * r * r * r) + (a * a * h * r * r) + (a * a * r * r * r) + (a * a * h * r * r) + (a * a * r * r * r) + (h * h * r * r * r) + (a * a * r * r * r) + (a * a * h * r * r) + (a * a * r * r * r) + (h * h * r * r * r) + (a * a * r * r * r) + (a * a * h * r * r) + (a * a * r * r * r) + (h * h * r * r * r) + (a * a * r * r * r) + (a * a * h * r * r) + (a * a * r * r * r) + (a * a * h * r * r) + (a * a * r * r * r) + (h * h * r * r * r) + (a * a * r * r * r) + (a * a * h * r * r) + (a * a * r * r * r) + (h * h * r * r * r) + (a * a * r * r * r) + (a * a * h * r * r) + (a * a * r * r * r) + (a * a * h * r * r) + (a * a * r * r * r) + (h * h * r * r * r) + (a * a * r * r * r) + (a * a * h * r * r) + (a * a * r * r * r) + (h * h * r * r * r) + (a * a * r * r * r) + (a * a * h * r * r) + (a * a * r * r * r) + (h * h * r * r * r) + (a * a * r * r *"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write compose a function to efficiently compute calculate the n-th element of the fib4 number act sequence succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write compose a function to efficiently compute calculate the n-th element of the fib4 number act sequence succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n === 3) return 1\n  let m = 2\n  let q = 3\n  let s = 1\n  while (q < n) {\n    s += m\n    m = q\n    q = m + q\n  }\n  return s\n}\n\nconsole.log(fib4(7))\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  l.sort((a, b) => a - b);\n  let i = l.length / 2;\n  if (l.length % 2 === 0) {\n    return (l[i] + l[i - 1]) / 2;\n  } else {\n    return l[i];\n  }\n};\n\nexport default median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string drawstring is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if given string drawstring is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    return (text.split('').reverse().join('') === text);\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('A')\n  true\n  >>> isPalindrome('z')\n  true\n  >>> isPalindrome('Z')\n  true\n  >>> isPalindrome('abacb')\n  true\n  >>> isPalindrome('abca')\n  false\n  >>> isPalindrome('aabc')\n  false\n  */\nconst isPalindrome = (text) => {\n    return text.split('').reduce((a, b) => (a && b === a), true);\n};\n\n/*\n  Checks if given number is a palindrome\n  >>> isPalindrome(0)\n  true\n  >>> isPalindrome(0)\n  true\n  >>> isPalindrome(-2)\n  true\n  >>> isPalindrome(2)\n  true\n  >>> isPalindrome(-2)\n  true\n  >>> isPalindrome(3)\n  true\n  >>> isPalindrome(-3)\n  true\n  >>> isPalindrome(-2)\n  true\n  >>> isPalindrome(-3)\n  true\n  >>> isPalindrome(3)\n  true\n  >>> isPalindrome(4)\n  true\n  >>> isPalindrome(-4)\n  true\n  >>> isPalindrome(2)\n  true\n  >>> isPalindrome(-2)\n  true\n  >>> isPalindrome(-3)\n  true\n  >>> isPalindrome(3)\n  true\n  >>> isPalindrome(4)\n  true\n  >>> isPalindrome(5)\n  true\n  >>> isPalindrome(6)\n  true\n  >>> isPalindrome(-5)\n  true\n  >>> isPalindrome(-6)\n  true\n  >>> isPalindrome(5)\n  true\n  >>> isPalindrome(-5)\n  true\n  >>> isPalindrome(-6)\n  true\n  >>> isPalindrome(6)\n  true\n  >>> isPalindrome(7)\n  true\n  >>> isPalindrome(8)\n  true\n  >>> isPalindrome(-7)\n  true\n  >>> isPalindrome(-8)\n  true\n  >>> isPalindrome(8)\n  true\n  >>> isPalindrome(7)\n  true\n  >>> isPalindrome(6)\n  true\n  >>> isPalindrome(5)\n  true\n  >>> isPalindrome(4)\n  true\n  >>> isPalindrome(3)\n  true\n  >>> isPalindrome(2)\n  true\n  >>> isPalindrome(1)\n  true\n  >>> isPalindrome(-1)\n  true\n  >>> isPalindrome(-2)\n  true\n  >>> isPalindrome(-3)\n  true\n  >>> isPalindrome(-4)\n  true\n  >>> isPalindrome(-5)\n  true\n  >>> isPalindrome(-6)\n  true\n  >>> isPalindrome(-7)\n  true\n  >>> isPalindrome(-8)\n  true\n  >>> isPalindrome(-9)\n  true\n  >>> isPalindrome(9)\n  true\n  >>> isPalindrome(8)\n  true\n  >>> isPalindrome(7)\n  true\n  >>> isPalindrome(6)\n  true\n  >>> isPalindrome(5)\n  true\n  >>> isPalindrome(4)\n  true\n  >>> isPalindrome(3)\n  true\n  >>> isPalindrome(2)\n  true\n  >>> isPalindrome(1)\n  true\n  >>> isPalindrome(0)\n  true\n  >>> isPalindrome(-1)\n  true\n  >>> isPalindrome(-2)\n  true\n  >>> isPalindrome(-3)\n  true\n  >>> isPalindrome(-4)\n  true\n  >>> isPalindrome(-5)\n  true\n  >>> isPalindrome(-6)\n  true\n  >>> isPalindrome(-7)\n  true\n  >>> isPalindrome(-8)\n  true\n  >>> isPalindrome(-9)\n  true\n  >>> isPalindrome(-10)\n  true\n  >>> isPalindrome(-11)\n  true\n  >>> isPalindrome(-12)\n  true\n  >>> isPalindrome(-13)\n  true\n  >>> isPalindrome(-14)\n  true\n  >>> isPalindrome(-15)\n  true\n  >>> isPalindrome(-16)\n  true\n  >>> isPalindrome(-17)\n  true\n  >>> isPalindrome(-18)\n  true\n  >>> isPalindrome(-19)\n  true\n  >>> isPalindrome(-20)\n  true\n  >>> isPalindrome(-21)\n  true\n  >>> isPalindrome(-22)\n  true\n  >>> isPalindrome(-23)\n  true\n  >>> isPalindrome(-24)\n  true\n  >>> isPalindrome(-25)\n  true\n  >>> isPalindrome(-26)\n  true\n  >>> isPalindrome(-27)\n  true\n  >>> isPalindrome(-28)\n  true\n  >>> isPalindrome(-29)\n  true\n  >>> isPalindrome(-30)\n  true\n  >>> isPalindrome(-31)\n  true\n  >>> isPalindrome(-32)\n  true\n  >>> isPalindrome(-33)\n  true\n  >>> isPalindrome(-34)\n  true\n  >>> isPalindrome(-35)\n  true\n  >>> isPalindrome(-36)\n  true\n  >>> isPalindrome(-37)\n  true\n  >>> isPalindrome(-38)\n  true\n  >>> isPalindrome(-39)\n  true\n  >>> isPalindrome(-40)\n  true\n  >>> isPalindrome(-41)\n  true\n  "}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": false, "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return n % p;\n};\n\nmodule.exports = {\n  modp\n};\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string drawstring by shifting every character quality by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes aim as input string bowed stringed instrument encoded with encode_shift function affair. Returns reappearance decoded decode string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string drawstring by shifting every character quality by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes aim as input string bowed stringed instrument encoded with encode_shift function affair. Returns reappearance decoded decode string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n \n var a = encodeShift(\"The quick brown fox jumped over the lazy dog\");\n console.log(a);\n var b = decodeShift(a);\n console.log(b);\n \n */\n\nvar encodeShift = (s) => {\n\treturn s.split(\"\").map(ch => {\n\t\treturn ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0);\n\t}).join(\" \");\n};\n\nvar decodeShift = (s) => {\n\treturn s.split(\"\").map(ch => {\n\t\treturn ((ch.charCodeAt(0) - 5 + \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0);\n\t}).join(\" \");\n};\n\nvar a = encodeShift(\"The quick brown fox jumped over the lazy dog\");\nconsole.log(a);\nvar b = decodeShift(a);\nconsole.log(b);\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string drawstring and returns string drawstring without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string drawstring and returns string drawstring without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n    let str = text.split('')\n    let output = str[0]\n    for(let i = 0; i < str.length - 1; i++) {\n        if(str[i]!= 'A' && str[i]!= 'E' && str[i]!= 'I' && str[i]!= 'O' && str[i]!= 'U' && str[i]!= 'a' && str[i]!= 'e' && str[i]!= 'i' && str[i]!= 'o' && str[i]!= 'u') {\n            output += str[i+1]\n        }\n    }\n    return output\n}\n\n/*\n  removeSpecialCharacters is a function that takes string drawstring and returns string drawstring without special characters.\n  >>> removeSpecialCharacters('')\n  ''\n  >>> removeSpecialCharacters(\"abcd\\nghijklm\")\n  'abcd\\nghijklm'\n  >>> removeSpecialCharacters('abcd')\n  'abcd'\n  >>> removeSpecialCharacters('aaaaa')\n  ''\n  >>> removeSpecialCharacters('aaBAA')\n  'B'\n  >>> removeSpecialCharacters('zbcd')\n  'zbcd'\n  */\nconst removeSpecialCharacters = (text) => {\n    let str = text.split('')\n    let output = str[0]\n    for(let i = 0; i < str.length - 1; i++) {\n        if(str[i]!='') {\n            output += str[i+1]\n        }\n    }\n    return output\n}\n\n/*\n  removePunctuation is a function that takes string drawstring and returns string drawstring without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n    let str = text.split('')\n    let output = str[0]\n    for(let i = 0; i < str.length - 1; i++) {\n        if(str[i]!= ',' && str[i]!= '.' && str[i]!= ';' && str[i]!= ':' && str[i]!= '\\'' && str[i]!= '\\\"' && str[i]!= '\\n' && str[i]!= '\\r' && str[i]!= '\\t' && str[i]!= '!') {\n            output += str[i+1]\n        }\n    }\n    return output\n}\n\n/*\n  removeWhitespace is a function that takes string drawstring and returns string drawstring without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'B'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n    let str = text.split('')\n    let output = str[0]\n    for(let i = 0; i < str.length - 1; i++) {\n        if(str[i]!='') {\n            output += str[i+1]\n        }\n    }\n    return output\n}\n\n/*\n  trim is a function that takes string drawstring and returns string drawstring without leading or trailing spaces.\n  >>> trim('')\n  ''\n  >>> trim(\" abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> trim(' abcdef')\n  'abcdef'\n  >>> trim('aaaaa')\n  ''\n  >>> trim('aaBAA')\n  'B'\n  >>> trim('zbcd')\n  'zbcd'\n  */\nconst trim = (text) => {\n    let str = text.split('')\n    let output = str[0]\n    for(let i = 0; i < str.length - 1; i++) {\n        if(str[i]!='') {\n            output += str[i+1]\n        }\n    }\n    return output\n}\n\n/*\n  trimPunctuation is a function that takes string drawstring and returns string drawstring without leading or trailing punctuation.\n  >>> trimPunctuation('')\n  ''\n  >>> trimPunctuation(\" abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> trimPunctuation(' abcdef')\n  'abcdef'\n  >>> trimPunctuation('aaaaa')\n  ''\n  >>> trimPunctuation('aaBAA')\n  'B'\n  >>> trimPunctuation('zbcd')\n  'zbcd'\n  */\nconst trimPunctuation = (text) => {\n    let str = text.split('')\n    let output = str[0]\n    for(let i = 0; i < str.length - 1; i++) {\n        if(str[i]!='' && str[i]!= ',' && str[i]!= '.' && str[i]!= ';' && str[i]!= ':' && str[i]!= '\\'' && str[i]!= '\\\"' && str[i]!= '\\n' && str[i]!= '\\r' && str[i]!= '\\t' && str"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold brink t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l are below threshold brink t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.reduce((acc, curr) => acc && (curr < t), true);\n};\n\nmodule.exports = belowThreshold;\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\nconsole.log(add(2, 3));\nconsole.log(add(5, 7));\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters quality.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same characters quality.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const {\n        len = 0,\n        s = ''\n    } = s0;\n    const {\n        len = 0,\n        s = ''\n    } = s1;\n    if (len!== s.length) {\n        return false;\n    }\n    let sameChars = true;\n    for (let i = 0; i < len; i++) {\n        if (s[i]!== s[i + 1]) {\n            sameChars = false;\n            break;\n        }\n    }\n    return sameChars;\n};\n\nexport default {\n    sameChars\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n};\n\n// Tests\nconsole.log(fib(1));\nconsole.log(fib(2));\nconsole.log(fib(3));\nconsole.log(fib(4));\nconsole.log(fib(5));\nconsole.log(fib(6));\nconsole.log(fib(7));\nconsole.log(fib(8));\nconsole.log(fib(9));\nconsole.log(fib(10));\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    let lastIndex = -1\n    let currentIndex = 0\n    let bracketsCount = brackets.length\n    while (currentIndex < bracketsCount) {\n        let opening = brackets[currentIndex]\n        let closing = brackets[currentIndex + 1]\n        if (opening === \">\" && closing === \"<\") {\n            brackets[lastIndex] = \">\"\n            brackets[currentIndex] = \"\"\n            currentIndex += 1\n        } else if (opening === \"<\" && closing === \">\") {\n            brackets[lastIndex] = \"<\"\n            brackets[currentIndex] = \"\"\n            lastIndex = currentIndex\n            currentIndex += 1\n        } else {\n            currentIndex += 1\n        }\n    }\n    return brackets.every(item => item === \"\")\n}\n\nmodule.exports = correctBracketing\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let result = true;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i - 1] > l[i]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nexport default monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements element for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elements element for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = {};\n  const set2 = {};\n  let size1 = 0;\n  let size2 = 0;\n  let i = 0;\n  let j = 0;\n  let c = [];\n\n  for (i = 0; i < l1.length; i++) {\n    set1[l1[i]] = true;\n    size1++;\n  }\n\n  for (j = 0; j < l2.length; j++) {\n    set2[l2[j]] = true;\n    size2++;\n  }\n\n  for (i = 0; i < size1; i++) {\n    for (j = 0; j < size2; j++) {\n      if (set1[i] === set2[j]) {\n        c.push(i);\n        break;\n      }\n    }\n  }\n  return c;\n};\n\nexport default common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  const factors = [2]\n  let i = 3\n\n  while (i <= n) {\n    while (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    }\n    i += 2\n  }\n  return factors.pop()\n}\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers issue from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that sums numbers issue from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nexport default sumToN;\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openParens = brackets.split(\"(\");\n  const openParensIndex = openParens.length - 1;\n  for (let i = 0; i < openParensIndex; i++) {\n    if (!(openParens[i].indexOf(\")\") > -1)) return false;\n  }\n  return true;\n};\n\nconst getBrackets = (input) => {\n  let brackets = \"\";\n  const inputLength = input.length;\n  for (let i = 0; i < inputLength; i++) {\n    if (input[i] === \"(\") {\n      brackets += `(${i})`;\n    }\n    if (input[i] === \")\") {\n      brackets += `(${i})`;\n    }\n  }\n  return brackets;\n};\n\nconst getAllBrackets = (input) => {\n  let brackets = \"\";\n  const inputLength = input.length;\n  for (let i = 0; i < inputLength; i++) {\n    if (input[i] === \"(\") {\n      brackets += `(${i})`;\n    }\n    if (input[i] === \")\") {\n      brackets += `(${i})`;\n    }\n  }\n  return brackets;\n};\n\nconst getClosedParens = (input) => {\n  let closedParens = \"\";\n  const inputLength = input.length;\n  for (let i = 0; i < inputLength; i++) {\n    if (input[i] === \")\") {\n      closedParens += \")\";\n    }\n  }\n  return closedParens;\n};\n\nconst getInput = (input) => {\n  return input.slice(1, input.length - 1);\n};\n\nconst getInputLength = (input) => {\n  return input.length - 2;\n};\n\nconst main = (input) => {\n  const brackets = getBrackets(input);\n  const allBrackets = getAllBrackets(input);\n  const closedParens = getClosedParens(input);\n  const inputLength = getInputLength(input);\n  if (correctBracketing(brackets) && input.includes(\")\")) {\n    console.log(input);\n    console.log(brackets);\n    console.log(allBrackets);\n    console.log(closedParens);\n    return 1;\n  }\n  else {\n    return 0;\n  }\n};\n\nconst input = main(\"(()()());\");\nconsole.log(input);\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return restitution derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return restitution derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let res = xs[0];\n  for (let i = 1; i < xs.length; i++) {\n    res = res + (xs[i] * i);\n  }\n  return res;\n};\n\nexport default derivative;\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write compose a function to efficiently compute calculate the n-th element of the fibfib number act sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write compose a function to efficiently compute calculate the n-th element of the fibfib number act sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  const f = n <= 1? n : fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  return f;\n};\n\nconsole.log(fibfib(5));<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string drawstring representing \n   a word parole as input and returns hark back the number of vowels in the string bowed stringed instrument. \n   Vowels in this case event are' a',' e vitamin e',' i',' o',' u uracil'. Here,' y' is also besides a \n   vowel, but only when it is at the end goal of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which takes a string drawstring representing \n   a word parole as input and returns hark back the number of vowels in the string bowed stringed instrument. \n   Vowels in this case event are' a',' e vitamin e',' i',' o',' u uracil'. Here,' y' is also besides a \n   vowel, but only when it is at the end goal of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  let count = 0\n  for (let i = 0; i < s.length - 1; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n  if (s.slice(-1) === vowels[vowels.indexOf(s[s.length - 1])]) {\n    count++\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns a string that has all vowels \n  replaced by an '*' character. \n\n  Example:\n  >>> replaceVowels(\"abcde\")\n  'ab*c*e'\n  >>> replaceVowels(\"ACEDY\")\n  'A*C*E*D*Y'\n  */\nconst replaceVowels = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const res = []\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      res.push(vowels.indexOf(s[i]))\n    }\n  }\n  return res.join('')\n}\n\n/*\n  Write a function that takes a string as input and returns the stringed instrument\n  where the vowels are replaced by an '*' character.\n\n  Example:\n  >>> replaceVowels(\"abcde\")\n  'ab*c*e'\n  >>> replaceVowels(\"ACEDY\")\n  'A*C*E*D*Y'\n  */\nconst replaceVowelsInstrument = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const res = []\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      res.push('*')\n    }\n    else {\n      res.push(s[i])\n    }\n  }\n  return res.join('')\n}\n\n/*\n  Write a function that takes a string as input and returns the stringed instrument\n  where the vowels are replaced by an '*' character.\n\n  Example:\n  >>> replaceVowels(\"abcde\")\n  'ab*c*e'\n  >>> replaceVowels(\"ACEDY\")\n  'A*C*E*D*Y'\n  */\nconst replaceVowelsInstrument2 = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const res = []\n  for (let i = 0; i < s.length - 1; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      res.push('*')\n    }\n    else {\n      res.push(s[i])\n    }\n  }\n  if (vowels.indexOf(s[s.length - 1])!== -1) {\n    res.push('*')\n  }\n  else {\n    res.push(s[s.length - 1])\n  }\n  return res.join('')\n}\n\n/*\n  Write a function that takes a string as input and returns the stringed instrument\n  where the vowels are replaced by an '*' character.\n\n  Example:\n  >>> replaceVowels(\"abcde\")\n  'ab*c*e'\n  >>> replaceVowels(\"ACEDY\")\n  'A*C*E*D*Y'\n  */\nconst replaceVowelsInstrument3 = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const res = []\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      res.push('*')\n      count++\n    }\n    else {\n      res.push(s[i])\n      if (count === 3) {\n        res.push('*')\n        count = 0\n      }\n    }\n  }\n  if (count === 3) {\n    res.push('*')\n  }\n  return res.join('')\n}\n\nmodule.exports = {\n  replaceVowels,\n  replaceVowelsInstrument,\n  replaceVowelsInstrument2,\n  replaceVowelsInstrument3\n}\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right proper by shift\n   and return the result as a string drawstring. \n   If shift > number of digits finger, return digits reversed change by reversal.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right proper by shift\n   and return the result as a string drawstring. \n   If shift > number of digits finger, return digits reversed change by reversal.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const n = x.toString().length;\n  let res = \"\";\n  if(shift > n) {\n    res = x.toString().split(\"\").reverse().join(\"\");\n  }\n  else {\n    for(let i = n - shift; i < n; i++) {\n      res += x.toString().charAt(i);\n    }\n  }\n  return res;\n}\n\nconst factorial = (x) => {\n  if(x === 1) {\n    return 1;\n  }\n  let res = x;\n  for(let i = x - 1; i > 1; i--) {\n    res *= i;\n  }\n  return res;\n}\n\n/*\n  Convert a number to an english-language string\n  Return the number as a string of digits and a string of English words\n  >>> englishNum(15)\n  (\"fifteen\", \"one hundred and five\")\n  >>> englishNum(0)\n  (\"zero\", \"zero\")\n  >>> englishNum(100)\n  (\"one hundred\", \"one hundred\")\n  >>> englishNum(5)\n  (\"five\", \"five\")\n  >>> englishNum(4)\n  (\"four\", \"four\")\n  >>> englishNum(15)\n  (\"fifteen\", \"one hundred and five\")\n  */\nconst englishNum = (x) => {\n  let res = \"\";\n  let temp = 0;\n  while(x > 0) {\n    temp = x % 10;\n    res = `${temp}${res}`;\n    x = Math.floor(x / 10);\n  }\n  return [res, englishWords[temp]];\n}\n\n/*\n  Find the maximum of a list of numbers\n  Return the maximum as a number and the list of numbers\n  >>> findMax(1, 2, 3)\n  (3, [1, 2, 3])\n  >>> findMax(1, 2)\n  (2, [1, 2])\n  >>> findMax(1, 2, 3, 4)\n  (4, [1, 2, 3, 4])\n  >>> findMax(1, 2, 3, 4, 5)\n  (5, [1, 2, 3, 4, 5])\n  */\nconst findMax = (...nums) => {\n  let largest = nums[0];\n  let list = nums.slice(1);\n  for(let i = 0; i < nums.length; i++) {\n    if(largest < nums[i]) {\n      largest = nums[i];\n    }\n  }\n  return [largest, list];\n}\n\nconst num2letter = (x) => {\n  let res = \"\";\n  for(let i = 1; i <= x; i++) {\n    res += englishLetters[x % 26];\n    x = Math.floor(x / 26);\n  }\n  return res;\n}\n\nconst letter2num = (x) => {\n  let res = \"\";\n  for(let i = 1; i <= x; i++) {\n    res += englishLetters[Math.floor(x / 26)];\n    x = Math.floor(x % 26);\n  }\n  return res;\n}\n\nconst fibonacci = (x, y) => {\n  if(x === 1) {\n    return 1;\n  }\n  else if(x === 2) {\n    return 1;\n  }\n  else {\n    return x + fibonacci(x - 1, y);\n  }\n}\n\nconst isPalindrome = (x) => {\n  return x === stringReverse(x);\n}\n\nconst stringReverse = (x) => {\n  let res = \"\";\n  for(let i = x.length - 1; i >= 0; i--) {\n    res += x.charAt(i);\n  }\n  return res;\n}\n\nconst reverse = (x) => {\n  let res = \"\";\n  for(let i = x.length - 1; i >= 0; i--) {\n    res += x.charAt(i);\n  }\n  return res;\n}\n\nconst stringReplace = (x, y, z) => {\n  let res = \"\";\n  for(let i = 0; i < x.length; i++) {\n    res += x.charAt(i);\n    if(i < x.length - 1 && x.charAt(i) === y.charAt(0)) {\n      res += z.charAt(0);\n    }\n  }\n  return res;\n}\n\nconst stringRepeat = (x, y) => {\n  let res = \"\";\n  for(let i = 0; i < y; i++) {\n    res += x;\n  }\n  return res;\n}\n\nconst isIn = (x, y) => {\n  let i = 0;\n  for(; i < x.length && i < y.length; i++) {\n    if(x.charAt(i)!== y.charAt(i)) {\n      break;\n    }\n  }\n  if(i === x.length && i === y.length) {\n    return true;\n  }\n  else {\n    return false;\n  }\n}\n\nconst stringJoin = (x, y) => {\n  return x + y;\n}\n\nconst stringSplit = (x, y) => {\n  return x.split(y);\n}\n\nconst find = (x, y) => {\n  let res = -1;\n  let i = 0;\n  for(; i < x.length; i++) {\n    if(x.charAt(i) === y.charAt(0)) {\n      res = i;\n      break;\n    }\n  }\n  return res;\n}\n\nconst stringTrim = (x) => {\n  return x.replace(/^\\s+|\\s+$/g, \"\");\n}\n\nconst stringSplitAt = (x, y) => {\n  let res = x.split(y);\n  if(res[0]"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function routine that takes a string drawstring as input and returns hark back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   Write a function routine that takes a string drawstring as input and returns hark back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  s.split('').forEach(c => {\n    if (c >= 'A' && c <= 'Z') {\n      sum += c.charCodeAt(0);\n    }\n  });\n  return sum;\n};\n\nconsole.log(digitSum(\"helloE\")); // 69\nconsole.log(digitSum(\"aAaaaXa\")); // 153\nconsole.log(digitSum(\"aAaaaXa\")); // 153\nconsole.log(digitSum(\"woArBld\")); // 131\nconsole.log(digitSum(\"woArBld\")); // 131<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string drawstring that represents a number phone number of apples and oranges orange \n   that are distributed in a basket of fruit yield this basket contains \n   apples apple, oranges orange, and mango fruits. Given the string bowed stringed instrument that represents represent the total number of \n   the oranges and apples apple and an integer that represent act the total full number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a string drawstring that represents a number phone number of apples and oranges orange \n   that are distributed in a basket of fruit yield this basket contains \n   apples apple, oranges orange, and mango fruits. Given the string bowed stringed instrument that represents represent the total number of \n   the oranges and apples apple and an integer that represent act the total full number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n\tlet fruits = []\n\tlet stringed = []\n\tlet apples = []\n\tlet oranges = []\n\tlet mango = []\n\tfor (let i = 0; i < n; i++) {\n\t\tfruits[i] = s[i]\n\t\tstringed[i] = s[i]\n\t\tapples[i] = s[i]\n\t\toranges[i] = s[i]\n\t\tmango[i] = s[i]\n\t}\n\tlet stringedIndex = 0\n\tlet applesIndex = 0\n\tlet orangesIndex = 0\n\tlet mangoIndex = 0\n\tlet fruitCount = 0\n\twhile (fruitCount < n) {\n\t\tlet stringedElement = stringed[stringedIndex]\n\t\tif (stringedElement === \"apple\") {\n\t\t\tfruitCount += apples[applesIndex]\n\t\t\tapplesIndex++\n\t\t} else if (stringedElement === \"orange\") {\n\t\t\tfruitCount += oranges[orangesIndex]\n\t\t\torangesIndex++\n\t\t} else if (stringedElement === \"mango\") {\n\t\t\tfruitCount += mango[mangoIndex]\n\t\t\tmangoIndex++\n\t\t}\n\t\tstringedIndex++\n\t}\n\treturn fruitCount\n}\n*/\n\nconst fruitDistribution = (s, n) => {\n\tlet fruits = []\n\tlet stringed = []\n\tlet apples = []\n\tlet oranges = []\n\tlet mango = []\n\tfor (let i = 0; i < n; i++) {\n\t\tfruits[i] = s[i]\n\t\tstringed[i] = s[i]\n\t\tapples[i] = s[i]\n\t\toranges[i] = s[i]\n\t\tmango[i] = s[i]\n\t}\n\tlet stringedIndex = 0\n\tlet applesIndex = 0\n\tlet orangesIndex = 0\n\tlet mangoIndex = 0\n\tlet fruitCount = 0\n\twhile (fruitCount < n) {\n\t\tlet stringedElement = stringed[stringedIndex]\n\t\tif (stringedElement === \"apple\") {\n\t\t\tfruitCount += apples[applesIndex]\n\t\t\tapplesIndex++\n\t\t} else if (stringedElement === \"orange\") {\n\t\t\tfruitCount += oranges[orangesIndex]\n\t\t\torangesIndex++\n\t\t} else if (stringedElement === \"mango\") {\n\t\t\tfruitCount += mango[mangoIndex]\n\t\t\tmangoIndex++\n\t\t}\n\t\tstringedIndex++\n\t}\n\treturn fruitCount\n}\n\nfruitDistribution(\"5 apples and 6 oranges orange \", 19) // 19 - 5 - 6 = 8\nfruitDistribution(\"0 apples and 1 oranges\", 3) // 3 - 0 - 1 = 2\nfruitDistribution(\"2 apples apple and 3 oranges orange \", 100) // 100 - 2 - 3 = 95\nfruitDistribution(\"100 apples and 1 oranges\", 120) // 120 - 100 - 1 = 19\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch arm of a tree that has non - negative integer nodes lymph node \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node lymph node with the smallest even tied value. \n   If multiple nodes node with the same smallest even value are found determine return the node lymph node that has smallest index. \n\n   The plucked node should be returned fall in a list, [ smalest_value, its index exponent ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" Given an array representing a branch arm of a tree that has non - negative integer nodes lymph node \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node lymph node with the smallest even tied value. \n   If multiple nodes node with the same smallest even value are found determine return the node lymph node that has smallest index. \n\n   The plucked node should be returned fall in a list, [ smalest_value, its index exponent ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length === 0) return []\n  if (arr.length === 1) return [arr[0], 0]\n  if (arr.length === 2) return [arr[0], 0]\n  if (arr.length === 3) return [arr[0], 0]\n\n  let min = arr[0]\n  let min_index = 0\n  let min_value = arr[0]\n\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i]\n      min_index = i\n      min_value = arr[i]\n    }\n  }\n\n  let result = []\n\n  let start = min_index\n  let end = min_index\n  while (start > 0 && arr[start - 1] % 2 === 0) {\n    start--\n  }\n  while (end < arr.length - 1 && arr[end + 1] % 2 === 0) {\n    end++\n  }\n\n  let start_index = 0\n  let end_index = 0\n\n  for (let i = start; i < end; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] < min) {\n        min = arr[i]\n        min_index = i\n        min_value = arr[i]\n        start_index = i\n      }\n    }\n  }\n\n  for (let i = start; i < end; i++) {\n    if (arr[i] % 2!== 0) {\n      if (arr[i] < min) {\n        min = arr[i]\n        min_index = i\n        min_value = arr[i]\n        end_index = i\n      }\n    }\n  }\n\n  if (end_index === start_index) {\n    return [arr[end_index], end_index]\n  }\n\n  return [min_value, start_index, end_index]\n}\n\nconsole.log(pluck([2, 3, 4, 2, 1, 0, 2, 3, 0, 4, 2]))\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of positive integers integer. Return the greatest bang-up integer that is greater than \n   zero, and has a frequency greater capital than or equal to the value of the integer itself. \n   The frequency of an integer is the number numeral of times it appears appear in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non - empty list of positive integers integer. Return the greatest bang-up integer that is greater than \n   zero, and has a frequency greater capital than or equal to the value of the integer itself. \n   The frequency of an integer is the number numeral of times it appears appear in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n    const sorted = lst.sort((a, b) => a - b);\n    let max = -1, current = -1;\n    sorted.forEach((num, index) => {\n        if(index > 0 && sorted[index - 1] < num) {\n            if(current < num) {\n                current = num;\n                max = num;\n            }\n        } else if(current < num) {\n            current = num;\n        }\n    });\n    return max;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange foreign order. \n   Strange foreign sorting, is when you start begin with the minimum value, \n   then maximum utmost of the remaining integers integer, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange foreign order. \n   Strange foreign sorting, is when you start begin with the minimum value, \n   then maximum utmost of the remaining integers integer, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let min = lst[0]\n  let max = lst[lst.length - 1]\n  let odd = false\n  if (min % 2 === 0) {\n    odd = true\n  }\n\n  let sorted = []\n  for (let i = 0; i < lst.length; i++) {\n    let cur = lst[i]\n    let index = -1\n    if (odd) {\n      for (let j = 0; j < sorted.length; j++) {\n        if (sorted[j] === cur) {\n          index = j\n          break\n        }\n      }\n      if (index === -1) {\n        sorted.push(cur)\n      } else {\n        sorted.splice(index, 1)\n        sorted.push(cur)\n      }\n    } else {\n      for (let j = 0; j < sorted.length; j++) {\n        if (sorted[j] === cur) {\n          index = j\n          break\n        }\n      }\n      if (index === -1) {\n        sorted.push(cur)\n      } else {\n        sorted.splice(index, 1)\n        sorted.unshift(cur)\n      }\n    }\n  }\n\n  return sorted\n}\n\nconsole.log(strangeSortList([1, 2, 3, 4, 5, 5, 5, 5]))\nconsole.log(strangeSortList([5, 5, 5, 5]))\nconsole.log(strangeSortList([1, 2, 3, 4]))\nconsole.log(strangeSortList([]))\nconsole.log(strangeSortList([1, 2, 3, 4, 5, 5, 5, 5, 6]))\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides side of a triangle. Return reelect the area of \n   the triangle rounded round to 2 decimal points if the three sides slope form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides side of a triangle. Return reelect the area of \n   the triangle rounded round to 2 decimal points if the three sides slope form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n    if (a < b && b < c) {\n        return (((Math.pow(a, 2) + Math.pow(b, 2)) - Math.pow(c, 2)) / 2)\n    } else if (a < b && a < c) {\n        return (((Math.pow(a, 2) + Math.pow(c, 2)) - Math.pow(b, 2)) / 2)\n    } else if (b < a && b < c) {\n        return (((Math.pow(b, 2) + Math.pow(c, 2)) - Math.pow(a, 2)) / 2)\n    } else if (c < b && c < a) {\n        return (((Math.pow(c, 2) + Math.pow(b, 2)) - Math.pow(a, 2)) / 2)\n    } else {\n        return -1\n    }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns come back true if the object aim q will fly, and false fake otherwise. \n   The object aim q will fly if it's balanced (it is a palindromic list) and the sum union of its elements component is less than or equal the maximum maximal possible potential weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns come back true if the object aim q will fly, and false fake otherwise. \n   The object aim q will fly if it's balanced (it is a palindromic list) and the sum union of its elements component is less than or equal the maximum maximal possible potential weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const p = q.slice().reverse();\n  const sum = p.reduce((a, b) => a + b, 0);\n  return sum <= w && sum === p.reduce((a, b) => a + b, 0).slice().reverse().reduce((a, b) => a + b, 0);\n};\n\nconst willItFly2 = (q, w) => {\n  const p = q.slice().reverse();\n  const sum = p.reduce((a, b) => a + b, 0);\n  return sum <= w && sum === p.reduce((a, b) => a + b, 0).slice().reverse().reduce((a, b) => a + b, 0);\n};\n\nconst willItFly3 = (q, w) => {\n  const p = q.slice().reverse();\n  const sum = p.reduce((a, b) => a + b, 0);\n  return sum <= w && sum === p.reduce((a, b) => a + b, 0).slice().reverse().reduce((a, b) => a + b, 0);\n};\n\nconst willItFly4 = (q, w) => {\n  const p = q.slice().reverse();\n  const sum = p.reduce((a, b) => a + b, 0);\n  return sum <= w && sum === p.reduce((a, b) => a + b, 0).slice().reverse().reduce((a, b) => a + b, 0);\n};\n\nconst willItFly5 = (q, w) => {\n  const p = q.slice().reverse();\n  const sum = p.reduce((a, b) => a + b, 0);\n  return sum <= w && sum === p.reduce((a, b) => a + b, 0).slice().reverse().reduce((a, b) => a + b, 0);\n};\n\nconst willItFly6 = (q, w) => {\n  const p = q.slice().reverse();\n  const sum = p.reduce((a, b) => a + b, 0);\n  return sum <= w && sum === p.reduce((a, b) => a + b, 0).slice().reverse().reduce((a, b) => a + b, 0);\n};\n\nconst willItFly7 = (q, w) => {\n  const p = q.slice().reverse();\n  const sum = p.reduce((a, b) => a + b, 0);\n  return sum <= w && sum === p.reduce((a, b) => a + b, 0).slice().reverse().reduce((a, b) => a + b, 0);\n};\n\nconst willItFly8 = (q, w) => {\n  const p = q.slice().reverse();\n  const sum = p.reduce((a, b) => a + b, 0);\n  return sum <= w && sum === p.reduce((a, b) => a + b, 0).slice().reverse().reduce((a, b) => a + b, 0);\n};\n\nconst willItFly9 = (q, w) => {\n  const p = q.slice().reverse();\n  const sum = p.reduce((a, b) => a + b, 0);\n  return sum <= w && sum === p.reduce((a, b) => a + b, 0).slice().reverse().reduce((a, b) => a + b, 0);\n};\n\nconst willItFly10 = (q, w) => {\n  const p = q.slice().reverse();\n  const sum = p.reduce((a, b) => a + b, 0);\n  return sum <= w && sum === p.reduce((a, b) => a + b, 0).slice().reverse().reduce((a, b) => a + b, 0);\n};\n\nconst willItFly11 = (q, w) => {\n  const p = q.slice().reverse();\n  const sum = p.reduce((a, b) => a + b, 0);\n  return sum <= w && sum === p.reduce((a, b) => a + b, 0).slice().reverse().reduce((a, b) => a + b, 0);\n};\n\nconst willItFly12 = (q, w) => {\n  const p = q.slice().reverse();\n  const sum = p.reduce((a, b) => a + b, 0);\n  return sum <= w && sum === p.reduce((a, b) => a + b, 0).slice().reverse().reduce((a, b) => a + b, 0);\n};\n\nconst willItFly13 = (q, w) => {\n  const p = q.slice().reverse();\n  const sum = p.reduce((a, b) => a + b, 0);\n  return sum <= w && sum === p.reduce((a, b) => a + b, 0).slice().reverse().reduce((a, b) => a + b, 0);\n};\n\nconst willItFly14 = (q, w) => {\n  const p = q.slice().reverse();\n  const sum = p.reduce((a, b) => a + b, 0);\n  return sum <= w && sum === p.reduce((a, b) => a + b, 0).slice().reverse().reduce((a, b) => a + b, 0);\n};\n\nconst willItFly15 = (q, w) => {\n  const p = q.slice().reverse();\n  "}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find discover the minimum number phone number of elements that \n   need want to be changed to make create the array palindromic. A palindromic array is an array that \n   is read the same backwards backward and forwards ahead. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find discover the minimum number phone number of elements that \n   need want to be changed to make create the array palindromic. A palindromic array is an array that \n   is read the same backwards backward and forwards ahead. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const result = [];\n  const isPalindrome = (num) => {\n    let temp = num;\n    while (temp!== 0) {\n      if (num % 2!== 0) {\n        return false;\n      }\n      num = num / 2;\n    }\n    return true;\n  };\n  let index = arr.length - 1;\n  while (index >= 0) {\n    let element = arr[index];\n    let index = index - 1;\n    while (index >= 0) {\n      if (arr[index] === element) {\n        result.push(element);\n        break;\n      }\n      index--;\n    }\n    index--;\n  }\n  return result.reduce((previousResult, currentResult) => previousResult + currentResult, 0);\n};\n\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts accept two lists of strings chain and returns the list that has \n   total entire number of chars char in the all strings of the list less than the other list.\n\n   if the two lists tilt have the same number numeral of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts accept two lists of strings chain and returns the list that has \n   total entire number of chars char in the all strings of the list less than the other list.\n\n   if the two lists tilt have the same number numeral of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let count = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst1[i] === lst2[j]) {\n        count++;\n      }\n    }\n  }\n  if (count === lst1.length) return lst1;\n  else if (count === lst2.length) return lst2;\n  else return lst1;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the first list if the second list is\n   a subset of the first list, else returns the second list.\n\n  Examples\n  subset([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  subset([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  subset([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  subset([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n*/\nconst subset = (lst1, lst2) => {\n  for (let i = 0; i < lst2.length; i++) {\n    for (let j = 0; j < lst1.length; j++) {\n      if (lst1[j] === lst2[i]) {\n        return lst1;\n      }\n    }\n  }\n  return lst2;\n};\n\n/*\n  Write a function that accepts a list of numbers and returns the list of even numbers in the list.\n\n  Examples\n  even([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ [2, 4, 6, 8, 10]\n  even([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ []\n*/\nconst even = (lst) => {\n  let list = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      list.push(lst[i]);\n    }\n  }\n  return list;\n};\n\n/*\n  Write a function that accepts a list of strings and returns the list of words in the list.\n\n  Examples\n  words(['hello', 'world', 'welcome']) ➞ ['hello', 'world', 'welcome']\n  words(['hello', 'world', 'welcome']) ➞ []\n*/\nconst words = (lst) => {\n  let list = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\w+/g)) {\n      list.push(lst[i]);\n    }\n  }\n  return list;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the first list if the second list\n   is a subset of the first list, else returns the second list.\n\n  Examples\n  subsetWords(['hello', 'world', 'welcome'], ['hello', 'world']) ➞ ['hello', 'world']\n  subsetWords(['hello', 'world', 'welcome'], ['hello', 'world', 'welcome']) ➞ ['hello', 'world', 'welcome']\n  subsetWords(['hello', 'world', 'welcome'], ['hello', 'world', 'welcome', 'good']) ➞ ['hello', 'world', 'welcome', 'good']\n  subsetWords(['hello', 'world', 'welcome'], ['hello', 'world', 'welcome', 'good']) ➞ ['hello', 'world', 'welcome', 'good']\n*/\nconst subsetWords = (lst1, lst2) => {\n  for (let i = 0; i < lst2.length; i++) {\n    for (let j = 0; j < lst1.length; j++) {\n      if (lst1[j] === lst2[i]) {\n        return lst1;\n      }\n    }\n  }\n  return lst2;\n};\n\nmodule.exports = {\n  totalMatch,\n  subsetWords,\n  subset,\n  words,\n  even\n};\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true on-key if the given number phone number is the multiplication of 3 prime choice numbers \n   and false fake otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns true on-key if the given number phone number is the multiplication of 3 prime choice numbers \n   and false fake otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = isMultiplyPrime;<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function routine that returns true on-key if a number x is a simple bare \n   power of n and false in other cases casing. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function routine that returns true on-key if a number x is a simple bare \n   power of n and false in other cases casing. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  const mod = x % n\n  if (mod == 0) {\n    return x === n;\n  }\n  return false;\n}\n\nmodule.exports = isSimplePower;\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes claim an integer a and returns true on-key \n   if this ingeger is a cube of some integer number act. \n   Note: you may assume simulate the input is always constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes claim an integer a and returns true on-key \n   if this ingeger is a cube of some integer number act. \n   Note: you may assume simulate the input is always constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let i = 1\n  let res = false\n  let c = a\n  while (i <= c) {\n    if (c === i * i * i) {\n      res = true\n      break\n    }\n    i++\n  }\n  return res\n}\n\nconsole.log(iscube(2))\nconsole.log(iscube(3))\nconsole.log(iscube(4))\nconsole.log(iscube(5))\nconsole.log(iscube(6))\nconsole.log(iscube(7))\nconsole.log(iscube(8))\nconsole.log(iscube(9))\nconsole.log(iscube(10))\nconsole.log(iscube(11))\nconsole.log(iscube(12))\nconsole.log(iscube(13))\nconsole.log(iscube(14))\nconsole.log(iscube(15))\nconsole.log(iscube(16))\nconsole.log(iscube(17))\nconsole.log(iscube(18))\nconsole.log(iscube(19))\nconsole.log(iscube(20))\nconsole.log(iscube(21))\nconsole.log(iscube(22))\nconsole.log(iscube(23))\nconsole.log(iscube(24))\nconsole.log(iscube(25))\nconsole.log(iscube(26))\nconsole.log(iscube(27))\nconsole.log(iscube(28))\nconsole.log(iscube(29))\nconsole.log(iscube(30))\nconsole.log(iscube(31))\nconsole.log(iscube(32))\nconsole.log(iscube(33))\nconsole.log(iscube(34))\nconsole.log(iscube(35))\nconsole.log(iscube(36))\nconsole.log(iscube(37))\nconsole.log(iscube(38))\nconsole.log(iscube(39))\nconsole.log(iscube(40))\nconsole.log(iscube(41))\nconsole.log(iscube(42))\nconsole.log(iscube(43))\nconsole.log(iscube(44))\nconsole.log(iscube(45))\nconsole.log(iscube(46))\nconsole.log(iscube(47))\nconsole.log(iscube(48))\nconsole.log(iscube(49))\nconsole.log(iscube(50))\nconsole.log(iscube(51))\nconsole.log(iscube(52))\nconsole.log(iscube(53))\nconsole.log(iscube(54))\nconsole.log(iscube(55))\nconsole.log(iscube(56))\nconsole.log(iscube(57))\nconsole.log(iscube(58))\nconsole.log(iscube(59))\nconsole.log(iscube(60))\nconsole.log(iscube(61))\nconsole.log(iscube(62))\nconsole.log(iscube(63))\nconsole.log(iscube(64))\nconsole.log(iscube(65))\nconsole.log(iscube(66))\nconsole.log(iscube(67))\nconsole.log(iscube(68))\nconsole.log(iscube(69))\nconsole.log(iscube(70))\nconsole.log(iscube(71))\nconsole.log(iscube(72))\nconsole.log(iscube(73))\nconsole.log(iscube(74))\nconsole.log(iscube(75))\nconsole.log(iscube(76))\nconsole.log(iscube(77))\nconsole.log(iscube(78))\nconsole.log(iscube(79))\nconsole.log(iscube(80))\nconsole.log(iscube(81))\nconsole.log(iscube(82))\nconsole.log(iscube(83))\nconsole.log(iscube(84))\nconsole.log(iscube(85))\nconsole.log(iscube(86))\nconsole.log(iscube(87))\nconsole.log(iscube(88))\nconsole.log(iscube(89))\nconsole.log(iscube(90))\nconsole.log(iscube(91))\nconsole.log(iscube(92))\nconsole.log(iscube(93))\nconsole.log(iscube(94))\nconsole.log(iscube(95))\nconsole.log(iscube(96))\nconsole.log(iscube(97))\nconsole.log(iscube(98))\nconsole.log(iscube(99))\nconsole.log(iscube(100))\nconsole.log(iscube(101))\nconsole.log(iscube(102))\nconsole.log(iscube(103))\nconsole.log(iscube(104))\nconsole.log(iscube(105))\nconsole.log(iscube(106))\nconsole.log(iscube(107))\nconsole.log(iscube(108))\nconsole.log(iscube(109))\nconsole.log(iscube(110))\nconsole.log(iscube(111))\nconsole.log(iscube(112))\nconsole.log(iscube(113))\nconsole.log(iscube(114))\nconsole.log(iscube(115))\nconsole.log(iscube(116))\nconsole.log(iscube(117))\nconsole.log(iscube(118))\nconsole.log(iscube(119))\nconsole.log(iscube(120))\nconsole.log(iscube(121))\nconsole.log(iscube(122))\nconsole.log(iscube(123))\nconsole.log(iscube(124))\nconsole.log(iscube(125))\nconsole.log(iscube(126))\nconsole.log(iscube(127))\nconsole.log(iscube(128))\nconsole.log(iscube(129))\nconsole.log(iscube(130))\nconsole.log(iscube(131))\nconsole.log(iscube(132))\nconsole.log(iscube(133))\nconsole.log(iscube(134))\nconsole.log(iscube(135))\nconsole.log"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function routine that receives \n   a hexadecimal number phone number as a string and counts count the number of hexadecimal \n   digits finger that are primes (prime number=== or a prime=== is a natural lifelike number numeral \n   greater than 1 that is not a product of two smaller belittled natural lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So thus you have to determine decide a number of the following succeed digits finger: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note bill: you may assume the input stimulation is always constantly correct or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a function routine that receives \n   a hexadecimal number phone number as a string and counts count the number of hexadecimal \n   digits finger that are primes (prime number=== or a prime=== is a natural lifelike number numeral \n   greater than 1 that is not a product of two smaller belittled natural lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So thus you have to determine decide a number of the following succeed digits finger: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note bill: you may assume the input stimulation is always constantly correct or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n    let digit = parseInt(num.slice(0, 2), 16)\n    let prime = parseInt(num.slice(2, 4), 16)\n    if (prime === 11) {\n        return digit === 2\n    }\n    if (prime === 13) {\n        return digit === 2 || digit === 3\n    }\n    return false\n}\n\nconst primeFinger = (num) => {\n    let digits = num.split(\"\")\n    let finger = 0\n    for (let i = 0; i < digits.length; i++) {\n        if (primeKey(digits[i])) {\n            finger += 1\n        }\n    }\n    return finger\n}\n\nconst primeKey = (num) => {\n    let isPrime = true\n    let digit = parseInt(num, 10)\n    let i = 2\n    while (i <= digit) {\n        if (digit % i === 0) {\n            isPrime = false\n            break\n        }\n        i += 1\n    }\n    return isPrime\n}\n\nconsole.log(primeFinger(\"1077E\"))<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form shape and your task is to convert change it to \n   binary format. The function should return a string bowed stringed instrument, with each character representing present a binary \n   number. Each character fictional character in the string chain will be' 0' or' 1'. \n\n   There will be an extra excess couple of characters fictional character' db' at the beginning and at the end goal of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal form shape and your task is to convert change it to \n   binary format. The function should return a string bowed stringed instrument, with each character representing present a binary \n   number. Each character fictional character in the string chain will be' 0' or' 1'. \n\n   There will be an extra excess couple of characters fictional character' db' at the beginning and at the end goal of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  return (decimal > 0? \"1\" : \"0\") + decimalToBinary(decimal / 2) + (decimal % 2? \"1\" : \"0\") + \"db\"\n}\n\nconst decimalToBinary2 = (decimal) => {\n  const dec = decimal.toString(2)\n  return \"1\" + dec + \"db\"\n}\n\nconst decimalToBinary3 = (decimal) => {\n  return \"1\" + decimalToBinary(decimal / 2) + (decimal % 2? \"1\" : \"0\") + \"db\"\n}\n\nconst binaryToDecimal = (binary) => {\n  return parseInt(binary.substring(1), 2) + parseInt(binary.substring(0, 1))\n}\n\n// const binaryToDecimal2 = (binary) => {\n//   return parseInt(binary.substring(0, 1)) * 2 + parseInt(binary.substring(1, 2))\n// }\n\nconst binaryToDecimal3 = (binary) => {\n  return parseInt(binary.substring(0, 1)) * 2 + parseInt(binary.substring(1, 2))\n}\n\n// const binaryToDecimal4 = (binary) => {\n//   return parseInt(binary.substring(0, 1)) * parseInt(binary.substring(1, 2))\n// }\n\nconst binaryToDecimal5 = (binary) => {\n  return parseInt(binary.substring(0, 1)) * parseInt(binary.substring(1, 2))\n}\n\nconst binaryToDecimal6 = (binary) => {\n  return parseInt(binary.substring(0, 1)) * parseInt(binary.substring(1, 2))\n}\n\nconst binaryToDecimal7 = (binary) => {\n  return parseInt(binary.substring(0, 1)) * parseInt(binary.substring(1, 2))\n}\n\nconst binaryToDecimal8 = (binary) => {\n  return parseInt(binary.substring(0, 1)) * parseInt(binary.substring(1, 2))\n}\n\nconst binaryToDecimal9 = (binary) => {\n  return parseInt(binary.substring(0, 1)) * parseInt(binary.substring(1, 2))\n}\n\nconst binaryToDecimal10 = (binary) => {\n  return parseInt(binary.substring(0, 1)) * parseInt(binary.substring(1, 2))\n}\n\nconst binaryToDecimal11 = (binary) => {\n  return parseInt(binary.substring(0, 1)) * parseInt(binary.substring(1, 2))\n}\n\nconst binaryToDecimal12 = (binary) => {\n  return parseInt(binary.substring(0, 1)) * parseInt(binary.substring(1, 2))\n}\n\nconst binaryToDecimal13 = (binary) => {\n  return parseInt(binary.substring(0, 1)) * parseInt(binary.substring(1, 2))\n}\n\nconst binaryToDecimal14 = (binary) => {\n  return parseInt(binary.substring(0, 1)) * parseInt(binary.substring(1, 2))\n}\n\nconst binaryToDecimal15 = (binary) => {\n  return parseInt(binary.substring(0, 1)) * parseInt(binary.substring(1, 2))\n}\n\nconst binaryToDecimal16 = (binary) => {\n  return parseInt(binary.substring(0, 1)) * parseInt(binary.substring(1, 2))\n}\n\nconst binaryToDecimal17 = (binary) => {\n  return parseInt(binary.substring(0, 1)) * parseInt(binary.substring(1, 2))\n}\n\nconst binaryToDecimal18 = (binary) => {\n  return parseInt(binary.substring(0, 1)) * parseInt(binary.substring(1, 2))\n}\n\nconst binaryToDecimal19 = (binary) => {\n  return parseInt(binary.substring(0, 1)) * parseInt(binary.substring(1, 2))\n}\n\nconst binaryToDecimal20 = (binary) => {\n  return parseInt(binary.substring(0, 1)) * parseInt(binary.substring(1, 2))\n}\n\nconst binaryToDecimal21 = (binary) => {\n  return parseInt(binary.substring(0, 1)) * parseInt(binary.substring(1, 2))\n}\n\nconst binaryToDecimal22 = (binary) => {\n  return parseInt(binary.substring(0, 1)) * parseInt(binary.substring(1, 2))\n}\n\nconst binaryToDecimal23 = (binary) => {\n  return parseInt(binary.substring(0, 1)) * parseInt(binary.substring(1, 2))\n}\n\nconst binaryToDecimal24 = (binary) => {\n  return parseInt(binary.substring(0, 1)) * parseInt(binary.substring(1, 2))\n}\n\nconst binaryToDecimal25 = (binary) => {\n  return parseInt(binary.substring(0, 1)) * parseInt(binary.substring(1, 2))\n}\n\nconst binaryToDecimal26 = (binary) => {\n  return parseInt(binary.substring(0, 1)) * parseInt(binary.substring(1, 2))\n}\n\nconst binaryToDecimal27 = (binary) => {\n  return parseInt(binary.substring(0, 1)) * parseInt(binary.substring(1, 2))\n}\n\nconst binaryToDecimal28 = (binary) => {\n  return parseInt(binary.substring(0, 1)) * parseInt"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task undertaking is to check if the string drawstring is happy or not. \n   A string bowed stringed instrument is happy if its length distance is at least 3 and every 3 consecutive letters letter are distinct discrete\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   Your task undertaking is to check if the string drawstring is happy or not. \n   A string bowed stringed instrument is happy if its length distance is at least 3 and every 3 consecutive letters letter are distinct discrete\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (!s || s.length < 3) return false;\n  const length = s.length;\n  let num = 1;\n  for (let i = 0; i < length - 1; i++) {\n    if (s[i] === s[i + 1]) {\n      num++;\n      if (num > 3) return false;\n    }\n  }\n  return true;\n};\n\nexport {\n  isHappy\n};\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give grant the grades\n   to students. The teacher has been making produce her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used practice for grading. \n   She has given sacrifice you a list of GPAs for some students and you have to write \n   a function affair that can output a list of letter grades using the following table mesa: \n            GPA        |     Letter grade degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester and the teacher has to give grant the grades\n   to students. The teacher has been making produce her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used practice for grading. \n   She has given sacrifice you a list of GPAs for some students and you have to write \n   a function affair that can output a list of letter grades using the following table mesa: \n            GPA        |     Letter grade degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const length = grades.length\n  const total = grades.reduce((prev, curr) => prev + curr, 0)\n  const avg = total / length\n  const num = grades.map(grade => Math.floor(grade - avg))\n  const sorted = num.sort((a, b) => a - b)\n  const grades = sorted.map(grade => {\n    if (grade === sorted[0]) return 'A+'\n    if (grade === sorted[length - 1]) return 'A-'\n    if (grade < 3.7) return 'B+'\n    if (grade < 3.3) return 'B-'\n    if (grade < 2.7) return 'C+'\n    if (grade < 2.3) return 'C-'\n    if (grade < 1.7) return 'D+'\n    if (grade < 1.3) return 'D-'\n    return 'E'\n  })\n  return grades\n}\n\n/*\n  Example:\n  numericalLetterGrade([3, 2, 1]) ==> ['A-', 'B', 'C-', 'D', 'E']\n  */\nconst numericalLetterGrade = (grades) => {\n  const length = grades.length\n  const total = grades.reduce((prev, curr) => prev + curr, 0)\n  const avg = total / length\n  const num = grades.map(grade => Math.floor(grade - avg))\n  const sorted = num.sort((a, b) => a - b)\n  const grades = sorted.map(grade => {\n    if (grade === sorted[0]) return 'A-'\n    if (grade === sorted[length - 1]) return 'E'\n    if (grade < 2.7) return 'B-'\n    if (grade < 2.3) return 'C-'\n    if (grade < 1.7) return 'D-'\n    return 'E'\n  })\n  return grades\n}\n\n/*\n  Example:\n  numericalLetterGrade([3, 1, 1, 3]) ==> ['A-', 'B+', 'B-', 'C+', 'C-', 'D+', 'D-', 'E']\n  */\nconst numericalLetterGrade = (grades) => {\n  const length = grades.length\n  const total = grades.reduce((prev, curr) => prev + curr, 0)\n  const avg = total / length\n  const num = grades.map(grade => Math.floor(grade - avg))\n  const sorted = num.sort((a, b) => a - b)\n  const grades = sorted.map(grade => {\n    if (grade === sorted[0]) return 'A-'\n    if (grade === sorted[length - 1]) return 'E'\n    if (grade < 3.7) return 'B+'\n    if (grade < 3.3) return 'B-'\n    if (grade < 2.7) return 'C+'\n    if (grade < 2.3) return 'C-'\n    if (grade < 1.7) return 'D+'\n    if (grade < 1.3) return 'D-'\n    return 'E'\n  })\n  return grades\n}\n\nconst getLetterGrade = (letterGrade) => {\n  switch (letterGrade) {\n    case 'A+':\n      return 'A+'\n    case 'A':\n      return 'A'\n    case 'A-':\n      return 'A-'\n    case 'B+':\n      return 'B+'\n    case 'B':\n      return 'B'\n    case 'B-':\n      return 'B-'\n    case 'C+':\n      return 'C+'\n    case 'C':\n      return 'C'\n    case 'C-':\n      return 'C-'\n    case 'D+':\n      return 'D+'\n    case 'D':\n      return 'D'\n    case 'D-':\n      return 'D-'\n    case 'E':\n      return 'E'\n    default:\n      return 'E'\n  }\n}\n\n/*\n  Example:\n  getLetterGrade('A+') ==> 'A+'\n  getLetterGrade('B+') ==> 'B+'\n  getLetterGrade('B-') ==> 'B-'\n  getLetterGrade('C+') ==> 'C+'\n  getLetterGrade('C') ==> 'C'\n  getLetterGrade('C-') ==> 'C-'\n  getLetterGrade('D+') ==> 'D+'\n  getLetterGrade('D') ==> 'D'\n  getLetterGrade('D-') ==> 'D-'\n  getLetterGrade('E') ==> 'E'\n  */\nconst getLetterGrade = (letterGrade) => {\n  switch (letterGrade) {\n    case 'A+':\n      return 'A+'\n    case 'A':\n      return 'A'\n    case 'A-':\n      return 'A-'\n    case 'B+':\n      return 'B+'\n    case 'B':\n      return 'B'\n    case 'B-':\n      return 'B-'\n    case 'C+':\n      return 'C+'\n    case 'C':\n      return 'C'\n    case 'C-':\n      return 'C-'\n    case 'D+':\n      return"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns come back true if the string\n   length duration is a prime number act or false otherwise differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a string and returns come back true if the string\n   length duration is a prime number act or false otherwise differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  const stringLength = string.length;\n  for (let i = 2; i <= stringLength; i++) {\n    if (string.indexOf(i) === -1) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconsole.log(primeLength('Hello')); // true\nconsole.log(primeLength('abcdcba')); // true\nconsole.log(primeLength('kittens')); // true\nconsole.log(primeLength('orange')); // false\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers issue of n-digit\n   positive integers integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers issue of n-digit\n   positive integers integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n   1 + (n-1) * [\n     1 + (n-2) * [\n       1 + (n-3) * [\n        1 + (n-4) * [\n          1 + (n-5) * [\n            1 + (n-6) * [\n              1 + (n-7) * [\n                1 + (n-8) * [\n                  1 + (n-9)\n                ]\n              ]\n            ]\n          ]\n        ]\n       ]\n     ]\n   ]\n }\n */\n\nimport java.util.Arrays;\n\npublic class p01_StartEndOne {\n  public static int startsOneEnds(int n) {\n    int count = 0;\n    int[] digits = new int[n];\n    for (int i = 1; i <= n; i++) {\n      digits[i - 1] = i;\n    }\n\n    for (int i = 1; i < n; i++) {\n      int start = i;\n      int end = i + 1;\n      int startCount = 1;\n      int endCount = 1;\n      while (start > 0 && digits[start - 1]!= 1) {\n        startCount++;\n        start--;\n      }\n      while (end < n && digits[end]!= 1) {\n        endCount++;\n        end++;\n      }\n      if (startCount!= endCount) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(startsOneEnds(9));\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const digits = [...Array(N)].map((_, i) => N - i).reduce((a, b) => a + b)\n  const result = digits.map((digit, i) => (digit === 0? '0' : '1' + digit).repeat(i + 1))\n  return result.join('')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers lst. add the even elements element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integers lst. add the even elements element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconsole.log(add([4, 2, 6, 7]))\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes claim a string and returns come back an ordered version translation of it. \n   Ordered version translation of string, is a string chain where all words (separated by space) \n   are replaced substitute by a new modern word discussion where all the characters quality arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes claim a string and returns come back an ordered version translation of it. \n   Ordered version translation of string, is a string chain where all words (separated by space) \n   are replaced substitute by a new modern word discussion where all the characters quality arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  // split the string\n  const words = s.split(' ');\n  // reverse the order of the words\n  words.reverse();\n  // create a new array with the original words in the correct order\n  let newWords = words.join(' ');\n  // create a new array with the new words in the correct order\n  return newWords;\n};\n\nconsole.log(antiShuffle('Hi'));\nconsole.log(antiShuffle('hello'));\nconsole.log(antiShuffle('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested cuddle lists, \n   which is similar like to matrix, however, unlike matrices, \n   each row course may contain a different unlike number of columns column. \n   Given feed lst, and integer x, find rule integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row rowing, columns), starting with 0. \n   Sort coordinates coordinate initially by rows course in ascending rise order. \n   Also, sort coordinates of the row by columns column in descending order orderliness.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested cuddle lists, \n   which is similar like to matrix, however, unlike matrices, \n   each row course may contain a different unlike number of columns column. \n   Given feed lst, and integer x, find rule integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row rowing, columns), starting with 0. \n   Sort coordinates coordinate initially by rows course in ascending rise order. \n   Also, sort coordinates of the row by columns column in descending order orderliness.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  //check x is int\n  if(typeof(x)!== 'number'){\n    throw new TypeError('Argument must be an int');\n  }\n  \n  //check lst\n  if(typeof(lst)!== 'object'){\n    throw new TypeError('Argument must be a list');\n  }\n  \n  //check rows\n  if(lst.length === 0){\n    return [];\n  }\n  \n  //check columns\n  if(lst[0].length === 0){\n    throw new Error('There is no element');\n  }\n  \n  //check rows\n  let rows = [];\n  let columns = [];\n  \n  //check rows\n  for(let i = 0; i < lst.length; i++){\n    rows.push(lst[i].length);\n  }\n  \n  //check columns\n  for(let j = 0; j < lst[0].length; j++){\n    columns.push(lst[0][j]);\n  }\n  \n  //sort by rows\n  rows.sort((a, b) => a - b);\n  \n  //sort by columns\n  columns.sort((a, b) => b - a);\n  \n  //make coordinates\n  let coordinates = [];\n  for(let i = 0; i < rows.length; i++){\n    let row = [];\n    for(let j = 0; j < columns.length; j++){\n      row.push((i + 1) * (j + 1));\n    }\n    coordinates.push(row);\n  }\n  \n  //sort by coordinate\n  coordinates.sort((a, b) => a - b);\n  \n  //delete first row\n  let temp = coordinates[0];\n  coordinates.splice(0, 1);\n  \n  //delete last column\n  temp = coordinates[coordinates.length - 1];\n  coordinates.splice(coordinates.length - 1, 1);\n  \n  //return the coordinates\n  return coordinates;\n}\n\nmodule.exports = getRow;\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integers integer, return a copy of the given give array after sorting, \n   you will sort the given impart array in ascending order decree if the sum (first inaugural index exponent value, last index value) is odd curious, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non - negative integers integer, return a copy of the given give array after sorting, \n   you will sort the given impart array in ascending order decree if the sum (first inaugural index exponent value, last index value) is odd curious, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if (!array.length) return array\n  const sorted = []\n  const sorted = array.reduce((acc, item, index) => {\n    if (index === 0) acc.unshift(item)\n    else if (index === array.length - 1) acc.push(item)\n    else acc.push(acc[acc.length - 1], item)\n    return acc\n  }, [])\n  return sorted\n}\n\nmodule.exports = sortArray<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string drawstring as an argument and \n   returns come back a string encrypted code with the alphabet being rotated rotate. \n   The alphabet should be rotated revolve in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takes a string drawstring as an argument and \n   returns come back a string encrypted code with the alphabet being rotated rotate. \n   The alphabet should be rotated revolve in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n    let ret = [];\n    let len = s.length;\n    for(let i = 0; i < len; i++){\n        let letter = s[i];\n        let index = parseInt(letter, 10);\n        let x = index + (index << 1) + (index << 2);\n        let result = x % 26;\n        ret.push(String.fromCharCode(65 + result));\n    }\n    return ret.join(\"\");\n};\n\n/*Create a function decrypt that takes a string and returns a string \n   decrypted with the alphabet being rotated rotate. The alphabet should \n   be rotated revolve in a manner such that the letters shift down by two \n   multiplied to two places stead.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'gf'\n  decrypt('kj') returns 'et'\n  */\nconst decrypt = (s) => {\n    let ret = [];\n    let len = s.length;\n    for(let i = 0; i < len; i++){\n        let letter = s[i];\n        let index = parseInt(letter, 10);\n        let x = index - (index << 1) - (index << 2);\n        let result = x - (x % 26);\n        ret.push(String.fromCharCode(65 + result));\n    }\n    return ret.join(\"\");\n};\n\nmodule.exports = {\n    encrypt,\n    decrypt\n};<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write publish a function nextSmallest() that returns come back the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers. \n   Write publish a function nextSmallest() that returns come back the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   return lst[1]\n }\n const nextSmallest = (lst) = > {\n   return lst[2]\n }\n const nextSmallest = (lst) = > {\n   return lst[3]\n }\n const nextSmallest = (lst) = > {\n   return lst[4]\n }\n const nextSmallest = (lst) = > {\n   return lst[5]\n }\n const nextSmallest = (lst) = > {\n   return lst[6]\n }\n const nextSmallest = (lst) = > {\n   return lst[7]\n }\n const nextSmallest = (lst) = > {\n   return lst[8]\n }\n const nextSmallest = (lst) = > {\n   return lst[9]\n }\n const nextSmallest = (lst) = > {\n   return lst[10]\n }\n const nextSmallest = (lst) = > {\n   return lst[11]\n }\n const nextSmallest = (lst) = > {\n   return lst[12]\n }\n const nextSmallest = (lst) = > {\n   return lst[13]\n }\n const nextSmallest = (lst) = > {\n   return lst[14]\n }\n const nextSmallest = (lst) = > {\n   return lst[15]\n }\n const nextSmallest = (lst) = > {\n   return lst[16]\n }\n const nextSmallest = (lst) = > {\n   return lst[17]\n }\n const nextSmallest = (lst) = > {\n   return lst[18]\n }\n const nextSmallest = (lst) = > {\n   return lst[19]\n }\n const nextSmallest = (lst) = > {\n   return lst[20]\n }\n const nextSmallest = (lst) = > {\n   return lst[21]\n }\n const nextSmallest = (lst) = > {\n   return lst[22]\n }\n const nextSmallest = (lst) = > {\n   return lst[23]\n }\n const nextSmallest = (lst) = > {\n   return lst[24]\n }\n const nextSmallest = (lst) = > {\n   return lst[25]\n }\n const nextSmallest = (lst) = > {\n   return lst[26]\n }\n const nextSmallest = (lst) = > {\n   return lst[27]\n }\n const nextSmallest = (lst) = > {\n   return lst[28]\n }\n const nextSmallest = (lst) = > {\n   return lst[29]\n }\n const nextSmallest = (lst) = > {\n   return lst[30]\n }\n const nextSmallest = (lst) = > {\n   return lst[31]\n }\n const nextSmallest = (lst) = > {\n   return lst[32]\n }\n const nextSmallest = (lst) = > {\n   return lst[33]\n }\n const nextSmallest = (lst) = > {\n   return lst[34]\n }\n const nextSmallest = (lst) = > {\n   return lst[35]\n }\n const nextSmallest = (lst) = > {\n   return lst[36]\n }\n const nextSmallest = (lst) = > {\n   return lst[37]\n }\n const nextSmallest = (lst) = > {\n   return lst[38]\n }\n const nextSmallest = (lst) = > {\n   return lst[39]\n }\n const nextSmallest = (lst) = > {\n   return lst[40]\n }\n const nextSmallest = (lst) = > {\n   return lst[41]\n }\n const nextSmallest = (lst) = > {\n   return lst[42]\n }\n const nextSmallest = (lst) = > {\n   return lst[43]\n }\n const nextSmallest = (lst) = > {\n   return lst[44]\n }\n const nextSmallest = (lst) = > {\n   return lst[45]\n }\n const nextSmallest = (lst) = > {\n   return lst[46]\n }\n const nextSmallest = (lst) = > {\n   return lst[47]\n }\n const nextSmallest = (lst) = > {\n   return lst[48]\n }\n const nextSmallest = (lst) = > {\n   return lst[49]\n }\n const nextSmallest = (lst) = > {\n   return lst[50]\n }\n const nextSmallest = (lst) = > {\n   return lst[51]\n }\n const nextSmallest = (lst) = > {\n   return lst[52]\n }\n const nextSmallest = (lst) = > {\n   return lst[53]\n }\n const nextSmallest = (lst) = > {\n   return lst[54]\n }\n const nextSmallest = (lst) = > {\n   return lst[55]\n }\n const nextSmallest = (lst) = > {\n   return lst[56]\n }\n const nextSmallest = (lst) = > {\n   return lst[57]\n }\n const nextSmallest = (lst) = > {\n   return lst[58]\n }\n const nextSmallest = (lst) = > {\n   return lst[59]\n }\n const nextSmallest = (lst) = > {\n   return lst[60]\n }\n const nextSmallest = (lst) = > {\n   return lst[61]\n }\n const nextSmallest = (lst) = >"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words password, and your task is to count consider the number \n   of boredoms boredom. A boredom is a sentence that starts depart with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words password, and your task is to count consider the number \n   of boredoms boredom. A boredom is a sentence that starts depart with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n    const result = {\n        'i': 0,\n        '?': 0,\n        '!': 0,\n        '.': 0,\n        ',': 0,\n        ':': 0,\n        '\\'': 0,\n        '\"': 0,\n        '@': 0,\n        '#': 0,\n        '&': 0,\n        '$': 0,\n        '%': 0,\n        '*': 0,\n        '^': 0,\n        '(': 0,\n        ')': 0,\n        '{': 0,\n        '}': 0,\n        '[': 0,\n        ']': 0,\n        '(': 0,\n        ')': 0,\n        '{': 0,\n        '}': 0,\n        '[': 0,\n        ']': 0,\n        '{': 0,\n        '}': 0,\n        '|': 0,\n        '+': 0,\n        '-': 0,\n        '=': 0,\n        '+': 0,\n        '<': 0,\n        '=': 0,\n        '>': 0,\n        '!': 0,\n        '#': 0,\n        '@': 0,\n        '&': 0,\n        '$': 0,\n        '%': 0,\n        '*': 0,\n        '^': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n        '|': 0,\n        '+': 0,\n"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes claim 3 numbers. \n   Returns return key true if one of the numbers is equal adequate to the sum of the other two, and all numbers act are integers. \n   Returns return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes claim 3 numbers. \n   Returns return key true if one of the numbers is equal adequate to the sum of the other two, and all numbers act are integers. \n   Returns return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return {\n    key: (x + y + z) === 0,\n    value: [x, y, z]\n  };\n};\n\n/* Create a function that takes claim 4 numbers. \n   Returns return key true if one of the numbers is equal adequate to the sum of the other two, and all numbers act are integers. \n   Returns return false in any other cases.\n  Examples\n  anyInt(5, 2, 7, 2) ➞ true\n  anyInt(3, 2, 2, 2) ➞ false\n  anyInt(3, -2, 1, 2) ➞ true\n  anyInt(3.6, -2.2, 2, 1) ➞ false\n  */\nconst anyInt = (x, y, z, w) => {\n  return {\n    key: (x + y + z + w) === 0,\n    value: [x, y, z, w]\n  };\n};\n\n/* Create a function that takes claim 5 numbers. \n   Returns return key true if one of the numbers is equal adequate to the sum of the other two, and all numbers act are integers. \n   Returns return false in any other cases.\n  Examples\n  anyInt(5, 2, 7, 2, 5) ➞ true\n  anyInt(3, 2, 2, 2, 2) ➞ false\n  anyInt(3, -2, 1, 2, 1) ➞ true\n  anyInt(3.6, -2.2, 2, 1, 1) ➞ false\n  */\nconst anyInt = (x, y, z, w, x1) => {\n  return {\n    key: (x + y + z + w + x1) === 0,\n    value: [x, y, z, w, x1]\n  };\n};\n\n/* Create a function that takes claim 6 numbers. \n   Returns return key true if one of the numbers is equal adequate to the sum of the other two, and all numbers act are integers. \n   Returns return false in any other cases.\n  Examples\n  anyInt(5, 2, 7, 2, 5, -2) ➞ true\n  anyInt(3, 2, 2, 2, 2, 2) ➞ false\n  anyInt(3, -2, 1, 2, 1, 2) ➞ true\n  anyInt(3.6, -2.2, 2, 1, 1, 2) ➞ false\n  */\nconst anyInt = (x, y, z, w, x1, x2) => {\n  return {\n    key: (x + y + z + w + x1 + x2) === 0,\n    value: [x, y, z, w, x1, x2]\n  };\n};\n\n/* Create a function that takes claim 7 numbers. \n   Returns return key true if one of the numbers is equal adequate to the sum of the other two, and all numbers act are integers. \n   Returns return false in any other cases.\n  Examples\n  anyInt(5, 2, 7, 2, 5, -2, 1) ➞ true\n  anyInt(3, 2, 2, 2, 2, 2, 2) ➞ false\n  anyInt(3, -2, 1, 2, 1, 2, 2) ➞ true\n  anyInt(3.6, -2.2, 2, 1, 1, 2, 2) ➞ false\n  */\nconst anyInt = (x, y, z, w, x1, x2, x3) => {\n  return {\n    key: (x + y + z + w + x1 + x2 + x3) === 0,\n    value: [x, y, z, w, x1, x2, x3]\n  };\n};\n\n/* Create a function that takes claim 8 numbers. \n   Returns return key true if one of the numbers is equal adequate to the sum of the other two, and all numbers act are integers. \n   Returns return false in any other cases.\n  Examples\n  anyInt(5, 2, 7, 2, 5, -2, 1, 2) ➞ true\n  anyInt(3, 2, 2, 2, 2, 2, 2, 2) ➞ false\n  anyInt(3, -2, 1, 2, 1, 2, 2, 2) ➞ true\n  anyInt(3.6, -2.2, 2, 1, 1, 2, 2, 2) ➞ false\n  */\nconst anyInt = (x, y, z, w, x1, x2, x3, x4) => {\n  return {\n    key: (x + y + z + w + x1 + x2 + x3 + x4) === 0,\n    value: [x, y, z, w, x1, x2, x3, x4]\n  };\n};\n\n/* Create a function that takes claim 9 numbers. \n   Returns return key true if one of the numbers is equal adequate to the sum of the other two, and all numbers act are integers. \n   Returns return false in any other cases.\n  Examples\n  anyInt(5, 2, 7, 2, 5, -2, 1, 2, 1) ➞ true\n  anyInt(3, 2, 2, 2, 2, 2, 2, 2, 2) ➞ false\n  anyInt(3, -2, 1, 2, 1, 2, 2, 2, 2) ➞ true\n  anyInt(3.6, -2.2, 2, 1, 1, 2, 2, 2, 2) ➞ false\n  */\nconst anyInt = (x, y, z, w, x1, x2, x3, x4, x5) => {\n  return {\n    key: (x + y + z + w + x1 + x2 + x3 + x4 + x5) === 0,\n    value: [x, y, z, w, x1, x"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes claim a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places plaza ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes claim a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places plaza ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n    const message = message.toLowerCase();\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    let messageIndex = 0;\n    let nextLetter = message.charAt(messageIndex);\n    const result = [];\n    while (nextLetter!== undefined) {\n        let letter = nextLetter;\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex > 0) {\n            if (vowelIndex > 1) {\n                letter = message.charAt(messageIndex - 2);\n            }\n            let vowelPosition = message.indexOf(letter);\n            if (vowelPosition > 0) {\n                letter = message.charAt(vowelPosition + 2);\n            }\n        }\n        result.push(letter);\n        messageIndex++;\n        nextLetter = message.charAt(messageIndex);\n    }\n    return result.join('');\n};\n\nconsole.log(encode('This is a message'));\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need necessitate to find the largest big prime value and return the sum union of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers. \n   You need necessitate to find the largest big prime value and return the sum union of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let total = 0;\n  for(let i = 0; i < lst.length; i++){\n    for(let j = i; j < lst.length; j++){\n      let prime = parseInt(lst[i] + lst[j], 10);\n      let primeDigits = (prime.toString()).split('').filter((x) => x.length > 1);\n      if(primeDigits.length === 1){\n        primeDigits.unshift(0);\n      }\n      total += primeDigits.reduce((acc, x) => acc + x, 0);\n      if(prime > max){\n        max = prime;\n      }\n    }\n  }\n  return total;\n};\n\nmodule.exports = skjkasdkd;<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys samara are strings in lower gloomy \n   case or all keys keystone are strings in upper case lawsuit, else return false. \n   The function should return false is the given sacrifice dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys samara are strings in lower gloomy \n   case or all keys keystone are strings in upper case lawsuit, else return false. \n   The function should return false is the given sacrifice dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  return keys.every((key) => key.toLowerCase() === key.toUpperCase())\n}\n\n// Given a dictionary, return the sum of the values in that dictionary.\nconst sumDict = (dict) => {\n  return Object.keys(dict).reduce((sum, key) => sum + dict[key], 0)\n}\n\n// Given a dictionary, return the average value in that dictionary.\nconst avgDict = (dict) => {\n  return sumDict(dict) / Object.keys(dict).length\n}\n\n// Given a dictionary, return the number of times a key is in that dictionary.\nconst countDict = (dict) => {\n  return Object.keys(dict).reduce((count, key) => count + (dict[key]? 1 : 0), 0)\n}\n\n// Given a dictionary, return the average number of times a key is in that dictionary.\nconst avgCount = (dict) => {\n  return countDict(dict) / Object.keys(dict).length\n}\n\n// Given a dictionary, return the number of times a key is in that dictionary.\nconst countDict2 = (dict) => {\n  return Object.keys(dict).reduce((count, key) => count + (dict[key]? 1 : 0), 0)\n}\n\n// Given a dictionary, return the average number of times a key is in that dictionary.\nconst avgCount2 = (dict) => {\n  return countDict2(dict) / Object.keys(dict).length\n}\n\n// Given a dictionary, return the number of times a key is in that dictionary.\nconst countDict3 = (dict) => {\n  return Object.keys(dict).reduce((count, key) => count + (dict[key]? 1 : 0), 0)\n}\n\n// Given a dictionary, return the average number of times a key is in that dictionary.\nconst avgCount3 = (dict) => {\n  return countDict3(dict) / Object.keys(dict).length\n}\n\n// Given a dictionary, return the number of times a key is in that dictionary.\nconst countDict4 = (dict) => {\n  return Object.keys(dict).reduce((count, key) => count + (dict[key]? 1 : 0), 0)\n}\n\n// Given a dictionary, return the average number of times a key is in that dictionary.\nconst avgCount4 = (dict) => {\n  return countDict4(dict) / Object.keys(dict).length\n}\n\n// Given a dictionary, return the number of times a key is in that dictionary.\nconst countDict5 = (dict) => {\n  return Object.keys(dict).reduce((count, key) => count + (dict[key]? 1 : 0), 0)\n}\n\n// Given a dictionary, return the average number of times a key is in that dictionary.\nconst avgCount5 = (dict) => {\n  return countDict5(dict) / Object.keys(dict).length\n}\n\n// Given a dictionary, return the number of times a key is in that dictionary.\nconst countDict6 = (dict) => {\n  return Object.keys(dict).reduce((count, key) => count + (dict[key]? 1 : 0), 0)\n}\n\n// Given a dictionary, return the average number of times a key is in that dictionary.\nconst avgCount6 = (dict) => {\n  return countDict6(dict) / Object.keys(dict).length\n}\n\n// Given a dictionary, return the number of times a key is in that dictionary.\nconst countDict7 = (dict) => {\n  return Object.keys(dict).reduce((count, key) => count + (dict[key]? 1 : 0), 0)\n}\n\n// Given a dictionary, return the average number of times a key is in that dictionary.\nconst avgCount7 = (dict) => {\n  return countDict7(dict) / Object.keys(dict).length\n}\n\n// Given a dictionary, return the number of times a key is in that dictionary.\nconst countDict8 = (dict) => {\n  return Object.keys(dict).reduce((count, key) => count + (dict[key]? 1 : 0), 0)\n}\n\n// Given a dictionary, return the average number of times a key is in that dictionary.\nconst avgCount8 = (dict) => {\n  return countDict8(dict) / Object.keys(dict).length\n}\n\n// Given a dictionary, return the number of times a key is in that dictionary.\nconst countDict9 = (dict) => {\n  return Object.keys(dict).reduce((count, key) => count + (dict[key]? 1 : 0), 0)\n}\n\n// Given a dictionary, return the average number of times a key is in that dictionary.\nconst avgCount9 = (dict) => {\n  return countDict9(dict) / Object.keys(dict).length\n}\n\n// Given a dictionary, return the number of times a key is in that dictionary.\nconst countDict10 = (dict) => {\n  return Object.keys(dict).reduce((count, key) => count + (dict[key]? 1 : 0), 0)\n}\n\n// Given a dictionary, return the average number of times a key is in that dictionary.\nconst avgCount10 = (dict) => {\n  return countDict10(dict) / Object.keys(dict).length\n}\n\n// Given a dictionary, return the number of times a key is in that dictionary.\nconst countDict11 = (dict) => {\n  return Object.keys(dict).reduce((count, key) =>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n    const primes = [2, 3, 5, 7, 11, 13, 17, 19]\n    const array = []\n    let i = 2\n    while(i < n) {\n        let j = i\n        while(j < n) {\n            if(primes.indexOf(j) === -1) {\n                array.push(j)\n                j += 1\n            } else {\n                j += 2\n            }\n        }\n        i += 2\n    }\n    return array\n}\n\nconsole.log(countUpTo(10))\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let [digitA, digitB] = [a, b].map(digit => parseInt(digit, 10));\n\n  let result = 0;\n  for (let i = 0; i < digitA.length; i++) {\n    for (let j = 0; j < digitB.length; j++) {\n      result += digitA[i] * digitB[j];\n    }\n  }\n\n  return result;\n};\n\n// Test cases\nconsole.log(multiply(14, -15));\nconsole.log(multiply(19, 28));\nconsole.log(multiply(2020, 1851));\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count consider the number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count consider the number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  const len = s.length\n  if (len % 2 === 0) {\n    let i = 0\n    let count = 0\n    while (i < len) {\n      if (s[i].match(/[A-Z]/i)) {\n        count += 1\n      }\n      i += 1\n    }\n    return count\n  }\n  return 0\n}\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes claim a value (string) representing defend a number \n   and returns hark back the closest integer to it. If the number numeral is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes claim a value (string) representing defend a number \n   and returns hark back the closest integer to it. If the number numeral is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const numbers = value.split(\".\")\n  if (numbers.length === 1) {\n    return parseInt(value)\n  } else {\n    let closest = parseInt(numbers[0])\n    let secondClosest = parseInt(numbers[1])\n    const result = closest + secondClosest\n    if (result % 2 === 0) {\n      return result\n    } else {\n      if (closest % 2 === 0) {\n        return closest + 1\n      } else {\n        return closest - 1\n      }\n    }\n  }\n}\n\n// const closestInteger = (value) => {\n//   const numbers = value.split(\".\")\n//   if (numbers.length === 1) {\n//     return parseInt(value)\n//   } else {\n//     let closest = parseInt(numbers[0])\n//     let secondClosest = parseInt(numbers[1])\n//     const result = closest + secondClosest\n//     if (result % 2 === 0) {\n//       return result\n//     } else {\n//       if (closest % 2 === 0) {\n//         return closest + 1\n//       } else {\n//         return closest - 1\n//       }\n//     }\n//   }\n// }\n\nmodule.exports = closestInteger\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make name a pile of n levels grade of stones. \n   The first inaugural level has n stones gem. \n   The number of stones rock in the next level is: \n       - the next odd curious number if n is odd. \n       - the next future even tied number if n is even. \n   Return the number of stones in each level horizontal surface in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to make name a pile of n levels grade of stones. \n   The first inaugural level has n stones gem. \n   The number of stones rock in the next level is: \n       - the next odd curious number if n is odd. \n       - the next future even tied number if n is even. \n   Return the number of stones in each level horizontal surface in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let levelCount = [1, n];\n  for (let i = 2; i < n; i += 2) {\n    levelCount[i] = levelCount[i - 1] + levelCount[i - 2];\n  }\n  return levelCount;\n};\n\nmodule.exports = makeAPile;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words password separated by commas comma or spaces. Your task job is \n   to split the string bowed stringed instrument into words and return an array of the words son.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of words password separated by commas comma or spaces. Your task job is \n   to split the string bowed stringed instrument into words and return an array of the words son.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s]+/)\n  return words\n}\n\n/*\n  This method will return the index of the word of the array\n  words, that is the first word in the array that starts with the word string\n  word, that is the word that is searched\n  \n  Example:\n  indexOfWord(\"hi, my name is john\", \"hi\") == 1\n  indexOfWord(\"hi, my name is john\", \"my\") == 1\n  indexOfWord(\"hi, my name is john\", \"name\") == 1\n  indexOfWord(\"hi, my name is john\", \"name john\") == 1\n  */\nconst indexOfWord = (s, word) => {\n  const words = wordsString(s)\n  const index = words.findIndex((x) => x.startsWith(word))\n  return index\n}\n\n/*\n  This method will return the index of the word of the array\n  words, that is the first word in the array that ends with the word string\n  word, that is the word that is searched\n  \n  Example:\n  indexOfWord(\"Hi, my name is john\", \"john\") == 5\n  indexOfWord(\"Hi, my name is john\", \"my\") == 5\n  indexOfWord(\"Hi, my name is john\", \"name\") == 5\n  indexOfWord(\"Hi, my name is john\", \"name john\") == 5\n  */\nconst indexOfEndingWord = (s, word) => {\n  const words = wordsString(s)\n  const index = words.findIndex((x) => x.endsWith(word))\n  return index\n}\n\n/*\n  This method will return the index of the word of the array\n  words, that is the first word in the array that starts with the word string\n  word, that is the word that is searched\n  \n  Example:\n  indexOfWord(\"Hi, my name is john\", \"john\") == 1\n  indexOfWord(\"Hi, my name is john\", \"my\") == 1\n  indexOfWord(\"Hi, my name is john\", \"name\") == 1\n  indexOfWord(\"Hi, my name is john\", \"name john\") == 1\n  */\nconst indexOfStartingWord = (s, word) => {\n  const words = wordsString(s)\n  const index = words.findIndex((x) => x.startsWith(word))\n  return index\n}\n\n/*\n  This method will return an array of the words of the array\n  words, that is the array of words that start with the word string\n  word, that is the word that is searched\n  \n  Example:\n  wordsStarting(\"Hi, my name is john\", \"john\") == [\"Hi\", \"my\", \"name\", \"is\", \"john\"]\n  wordsStarting(\"Hi, my name is john\", \"my\") == [\"Hi\", \"my\", \"name\", \"is\", \"john\"]\n  wordsStarting(\"Hi, my name is john\", \"name\") == [\"Hi\", \"my\", \"name\", \"is\", \"john\"]\n  wordsStarting(\"Hi, my name is john\", \"name john\") == [\"Hi\", \"my\", \"name\", \"is\", \"john\"]\n  */\nconst wordsStarting = (s, word) => {\n  const words = wordsString(s)\n  const index = words.findIndex((x) => x.startsWith(word))\n  return words.slice(index)\n}\n\n/*\n  This method will return an array of the words of the array\n  words, that is the array of words that ends with the word string\n  word, that is the word that is searched\n  \n  Example:\n  wordsEnding(\"Hi, my name is john\", \"john\") == [\"Hi\", \"my\", \"name\", \"is\", \"john\"]\n  wordsEnding(\"Hi, my name is john\", \"my\") == [\"Hi\", \"my\", \"name\", \"is\", \"john\"]\n  wordsEnding(\"Hi, my name is john\", \"name\") == [\"Hi\", \"my\", \"name\", \"is\", \"john\"]\n  wordsEnding(\"Hi, my name is john\", \"name john\") == [\"Hi\", \"my\", \"name\", \"is\", \"john\"]\n  */\nconst wordsEnding = (s, word) => {\n  const words = wordsString(s)\n  const index = words.findIndex((x) => x.endsWith(word))\n  return words.slice(index)\n}\n\n/*\n  This method will return an array of the words of the array\n  words, that is the array of words that starts with the word string\n  word, that is the word that is searched\n  \n  Example:\n  wordsStarting(\"Hi, my name is john\", \"john\") == [\"Hi\", \"my\", \"name\", \"is\", \"john\"]\n  wordsStarting(\"Hi, my name is john\", \"my\") == [\"Hi\", \"my\", \"name\", \"is\", \"john\"]\n  wordsStarting(\"Hi, my name is john\", \"name\") == [\"Hi\", \"my\", \"name\", \"is\", \"john\"]\n  wordsStarting(\"Hi, my name is john\", \"name john\") == [\"Hi\", \"my\", \"name\", \"is\", \"john\"]\n  */\nconst wordsStartingIncluding = (s, word) => {\n  const words = wordsString(s)\n  const index = words.findIndex((x) => x.startsWith(word))\n  return words.slice(index, index + 1)\n}\n\n/*\n  This method will return an array of the words of the array\n  words, that is the array of words that ends with the word string\n  word, that is the word that is searched\n  \n  Example:\n  wordsEnding(\"Hi, my name is john\", \"john\") == [\"Hi\", \"my\", \"name\", \"is\", \"john\"]\n  wordsEnding(\"Hi, my name is john\", \"my\") == [\"Hi\", \"my\", \"name\", \"is\", \"john\"]\n  wordsEnding(\"Hi, my name is john\", \"name\") == [\"Hi\", \"my\", \"name\", \"is"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive convinced numbers x and y and returns come back the \n   biggest even integer number act that is in the range [x, y] inclusive. If \n   there's no such number numeral, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive convinced numbers x and y and returns come back the \n   biggest even integer number act that is in the range [x, y] inclusive. If \n   there's no such number numeral, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    const temp = x;\n    x = y;\n    y = temp;\n  }\n  const m = x - 1;\n  let n = y;\n  while (n >= m) {\n    if (n % 2 === 0) {\n      return n;\n    }\n    n = n - 1;\n  }\n  return -1;\n};\n\nexport default chooseNum;\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest cheeseparing integer and convert that to binary. \n   If n is greater capital than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest cheeseparing integer and convert that to binary. \n   If n is greater capital than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const n_bin = (n - 1).toString(2);\n  const m_bin = (m - 1).toString(2);\n  const n_bin_len = n_bin.length;\n  const m_bin_len = m_bin.length;\n  const n_rem = n - (parseInt(n_bin) + 1);\n  const m_rem = m - (parseInt(m_bin) + 1);\n  const len_diff = n_bin_len - m_bin_len;\n\n  if (n > m) {\n    return -1;\n  }\n\n  const sum = parseInt(n_bin + m_bin);\n  const n_bin_start = n_bin.charAt(0);\n  const m_bin_start = m_bin.charAt(0);\n  const n_bin_end = n_bin.charAt(n_bin_len - 1);\n  const m_bin_end = m_bin.charAt(m_bin_len - 1);\n  const n_rem_start = n_bin_start.toString(2);\n  const m_rem_start = m_bin_start.toString(2);\n  const n_rem_end = n_bin_end.toString(2);\n  const m_rem_end = m_bin_end.toString(2);\n  const n_rem_len = n_rem_end.length - n_rem_start.length;\n\n  const n_bin_str = n_bin_start + n_rem_start + n_rem + n_rem_end;\n  const m_bin_str = m_bin_start + m_rem_start + m_rem + m_rem_end;\n  const diff = n_bin_str.length - m_bin_str.length;\n\n  return (sum + diff / 2).toString(2);\n};\n\nconst test_cases = [\n  [1, 5, 9],\n  [7, 5, 11],\n  [10, 20, 33],\n  [20, 33, 44],\n];\n\ntest_cases.forEach(({ n, m }) => {\n  console.log(`n: ${n}, m: ${m}, roundedAvg: ${roundedAvg(n, m)}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit. \n\n   Note: Returned list should be sorted screen in increasing order decree. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit. \n\n   Note: Returned list should be sorted screen in increasing order decree. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let d = [], k = 0, l = 0;\n  for(let i = 0; i < x.length; i++) {\n    if(x[i] % 2 === 0) {\n      if(l === 0) {\n        l = x[i];\n      }\n      else if(l!== x[i]) {\n        d[k++] = l;\n        l = x[i];\n      }\n    }\n  }\n  if(l!== 0) {\n    d[k++] = l;\n  }\n  return d;\n};\n\nconst uniqueDigits_test = () => {\n  console.log(uniqueDigits([15, 33, 1422, 1]));\n  console.log(uniqueDigits([152, 323, 1422, 10]));\n};\n\nmodule.exports = uniqueDigits;\nmodule.exports.uniqueDigits_test = uniqueDigits_test;\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  arr.sort((a, b) => a.length - b.length);\n  arr.reverse();\n  return arr.map(a => {\n    let f = a.toString();\n    let fname = \"\";\n    let i = 0;\n    while (f[i] >= '0' && f[i] <= '9') {\n      fname += names[f[i] - '0'];\n      i++;\n    }\n    return fname;\n  });\n};\n\nconst names = {\n  0: 'One',\n  1: 'Two',\n  2: 'Three',\n  3: 'Four',\n  4: 'Five',\n  5: 'Six',\n  6: 'Seven',\n  7: 'Eight',\n  8: 'Nine'\n};\n\nconst sortAndReverse = (arr) => {\n  const sorted = byLength(arr);\n  return sorted.join('');\n};\n\nconst sortAndReverse = (arr) => {\n  const sorted = byLength(arr);\n  return sorted.join('');\n};\n\nconst main = () => {\n  const arr = [1, 2, 3, 5, 8, 9];\n  const sorted = sortAndReverse(arr);\n  console.log(sorted);\n};\n\nmain();<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes claim n as a parameter, \n   and returns come back a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers act from 1 to i otherwise. \n   i starts get down from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takes claim n as a parameter, \n   and returns come back a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers act from 1 to i otherwise. \n   i starts get down from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const even = (n) => {\n    if (n === 2) return 1;\n    else return n * f(n - 2);\n  };\n  const odd = (n) => {\n    const even = (n) => {\n      if (n === 2) return 1;\n      else return 2 * n * f(n - 2);\n    };\n    return even(n);\n  };\n  return odd(n);\n};\nf(6)\n\n/* Implement the function g that takes claim n as a parameter, \n   and returns come back a list of size n, such that the value of the element at index exponent i is the product of the numbers from i to n (1 * 2 *... * n). \n   i starts get down from 1. \n   n is a positive integer.\n  Example:\n  g(7) == [1, 2, 6, 24, 15, 168, 945]\n  */\nconst g = (n) => {\n  const f = (n) => {\n    if (n === 1) return 1;\n    else return n * f(n - 1);\n  };\n  return f(n);\n};\ng(7)\n\n/* Implement the function h that takes claim n as a parameter, \n   and returns come back a list of size n, such that the value of the element at index exponent i is the sum of the numbers from i to n (1 * 2 *... * n). \n   i starts get down from 1. \n   n is a positive integer.\n  Example:\n  h(8) == [1, 2, 6, 24, 15, 168, 945, 6561]\n  */\nconst h = (n) => {\n  const f = (n) => {\n    if (n === 1) return 1;\n    else return n * f(n - 1);\n  };\n  const g = (n) => {\n    if (n === 1) return 1;\n    else return 2 * n * f(n - 1);\n  };\n  const even = (n) => {\n    if (n === 2) return 1;\n    else return 2 * n * f(n - 2);\n  };\n  const odd = (n) => {\n    const even = (n) => {\n      if (n === 2) return 1;\n      else return 2 * n * f(n - 2);\n    };\n    return even(n);\n  };\n  return even(n);\n};\nh(8)\n\n/* Implement the function i that takes claim n as a parameter, \n   and returns come back a list of size n, such that the value of the element at index exponent i is the product of the numbers from i to n (1 * 2 *... * n) minus the sum of the numbers from 1 to i (1 * 2 *... * i). \n   i starts get down from 1. \n   n is a positive integer.\n  Example:\n  i(9) == [1, 2, 6, 24, 15, 168, 945, 6561, 4845]\n  */\nconst i = (n) => {\n  const f = (n) => {\n    if (n === 1) return 1;\n    else return n * f(n - 1);\n  };\n  const g = (n) => {\n    if (n === 1) return 1;\n    else return 2 * n * f(n - 1);\n  };\n  const even = (n) => {\n    if (n === 2) return 1;\n    else return 2 * n * f(n - 2);\n  };\n  const odd = (n) => {\n    const even = (n) => {\n      if (n === 2) return 1;\n      else return 2 * n * f(n - 2);\n    };\n    return even(n);\n  };\n  return even(n) - odd(n);\n};\ni(9)\n\n/* Implement the function j that takes claim n as a parameter, \n   and returns come back a list of size n, such that the value of the element at index exponent i is the sum of the numbers from i to n (1 * 2 *... * n) minus the product of the numbers from 1 to i (1 * 2 *... * i). \n   i starts get down from 1. \n   n is a positive integer.\n  Example:\n  j(10) == [1, 2, 6, 24, 15, 168, 945, 6561, 4845, 27027]\n  */\nconst j = (n) => {\n  const f = (n) => {\n    if (n === 1) return 1;\n    else return n * f(n - 1);\n  };\n  const g = (n) => {\n    if (n === 1) return 1;\n    else return 2 * n * f(n - 1);\n  };\n  const even = (n) => {\n    if (n === 2) return 1;\n    else return 2 * n * f(n - 2);\n  };\n  const odd = (n) => {\n    const even = (n) => {\n      if (n === 2) return 1;\n      else return 2 * n * f(n - 2);\n    };\n    return even(n);\n  };\n  return even(n) - odd(n);\n};\nj(10)\n\n/* Implement the function k that takes claim n as a parameter, \n   and returns come back a list of size n, such that the value of the element at index exponent i is the sum of the numbers from i to n (1 * 2 *... * n) minus the difference of the product of the numbers from i to n (1 * 2 *... * i) minus the sum of the numbers from 1 to i (1 * 2 *... * i). \n   i starts get down from 1. \n   n is a positive integer.\n  Example:\n  k(11) == [1, 2, 6, 24, 15, 168, 945, 6561, 4845, 27027, 15552]\n  */\nconst k"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number phone number of even and odd \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the number phone number of even and odd \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n    let arr = [];\n    let result = [];\n    for (let i = 1; i < n; i++) {\n        let odd = true;\n        let even = true;\n        while (odd) {\n            odd = false;\n            arr = [i, n - i];\n            for (let j = 0; j < arr.length; j++) {\n                if (arr[j] % 2 === 1) {\n                    odd = true;\n                    break;\n                }\n            }\n        }\n        while (even) {\n            even = false;\n            arr = [i, n - i];\n            for (let j = 0; j < arr.length; j++) {\n                if (arr[j] % 2 === 0) {\n                    even = true;\n                    break;\n                }\n            }\n        }\n        if (odd && even) {\n            result.push([i, n - i]);\n        }\n    }\n    return result;\n};\n\nconsole.log(evenOddPalindrome(3));\nconsole.log(evenOddPalindrome(12));\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes claim an array of integers and returns return key \n   the number of elements which has a sum union of digits > 0. \n   If a number numeral is negative, then its first inaugural signed bless digit will be negative: \n   e.g. for example -123 has signed sign digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which takes claim an array of integers and returns return key \n   the number of elements which has a sum union of digits > 0. \n   If a number numeral is negative, then its first inaugural signed bless digit will be negative: \n   e.g. for example -123 has signed sign digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const sum = (num) => {\n    return num + 0;\n  };\n  const count = (num) => {\n    const c = 0;\n    while (num > 0) {\n      c += num % 10;\n      num = num / 10;\n    }\n    return c;\n  };\n  const countWithSum = (num) => {\n    const c = 0;\n    while (num > 0) {\n      c += count(num);\n      num = sum(num);\n    }\n    return c;\n  };\n  const countWithSumWithDiff = (num) => {\n    const c = 0;\n    while (num > 0) {\n      c += countWithSum(num);\n      num = sum(num);\n    }\n    return c;\n  };\n  return countWithSumWithDiff(arr[0]);\n};\n\n/*\n  Write a function which returns the number of numbers in an array of integers.\n  >>> countNums([])\n  0\n  >>> countNums([-1, 11, -11])\n  2\n  >>> countNums([1, 1, 2])\n  3\n  */\nconst countNums = (arr) => {\n  const c = 0;\n  for (let i = 0; i < arr.length; i++) {\n    c += 1;\n  }\n  return c;\n};\n\nconst test = () => {\n  console.log(countNums([-1, 11, -11]));\n  console.log(countNums([1, 1, 2]));\n  console.log(countNums([1, 1, 2, 3]));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordered rate. Your task is to determine specify if \n   it is possible to get beget an array sorted in non - decreasing order decree by performing \n   the following be operation on the given array: \n       You are allowed to perform do right shift operation any number numeral of times prison term. \n  \n   One right shift operation means mean shifting transfer all elements of the array by one \n   position placement in the right veracious direction. The last element component of the array will be moved to \n   the starting start position military position in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted array by performing the above operation process \n   then return true else return false. \n   If the given array is empty then return true. \n\n   Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordered rate. Your task is to determine specify if \n   it is possible to get beget an array sorted in non - decreasing order decree by performing \n   the following be operation on the given array: \n       You are allowed to perform do right shift operation any number numeral of times prison term. \n  \n   One right shift operation means mean shifting transfer all elements of the array by one \n   position placement in the right veracious direction. The last element component of the array will be moved to \n   the starting start position military position in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted array by performing the above operation process \n   then return true else return false. \n   If the given array is empty then return true. \n\n   Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const isSorted = arr.every(num => num >= 0);\n  let i = 0;\n  while (isSorted && i < arr.length) {\n    const last = arr[arr.length - 1];\n    const rightShifted = arr.shift();\n    if (last - rightShifted < 0) {\n      return false;\n    }\n    arr.unshift(rightShifted);\n    i++;\n  }\n  return true;\n};\n\nconst moveOneBallDemo = () => {\n  const arr = [3, 4, 5, 1, 2];\n  console.log(moveOneBall(arr));\n  console.log(moveOneBall(arr));\n  console.log(moveOneBall(arr));\n  console.log(moveOneBall(arr));\n  console.log(moveOneBall(arr));\n};\n\nmoveOneBallDemo();<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function routine that takes two lists list of numbers, \n   and determines settle whether it is possible to perform do an exchange of elements \n   between them to make cause lst1 a list of only even numbers. \n   There is no limit on the number of exchanged change elements between lst1 and lst2.\n   If it is possible to exchange elements chemical element between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a function routine that takes two lists list of numbers, \n   and determines settle whether it is possible to perform do an exchange of elements \n   between them to make cause lst1 a list of only even numbers. \n   There is no limit on the number of exchanged change elements between lst1 and lst2.\n   If it is possible to exchange elements chemical element between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let lst1Len = lst1.length;\n  let lst2Len = lst2.length;\n  if (lst1Len === 0 || lst2Len === 0) {\n    return \"NO\";\n  }\n  let exchange = 0;\n  let start = 0;\n  while (start < lst1Len) {\n    if (lst1[start] % 2!== 0) {\n      if (lst2[start] % 2 === 0) {\n        exchange++;\n        lst1[start] = lst1[start] + lst2[start];\n        lst2[start] = lst2[start] - lst1[start];\n      } else {\n        return \"NO\";\n      }\n    }\n    start++;\n  }\n  return \"YES\";\n}\n\nconst test = () => {\n  let res = exchange([1, 2, 3, 4], [1, 2, 3, 4]);\n  console.log(res);\n}\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space distance separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding equate count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space distance separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding equate count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histo = {};\n  let max = 0;\n  const letter = /[a-z]/g;\n\n  while (test) {\n    const letter = test.match(letter);\n    const val = histo[letter[0]] || 0;\n    histo[letter[0]] = val + 1;\n    if (val > max) {\n      max = val;\n    }\n    test = test.slice(1);\n  }\n\n  return {\n    max,\n    histo\n  };\n};\n\nmodule.exports = histogram;\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings chain s and c, you have to deleted all the characters quality in s that are equal to any character fictional character in c\n   then check if the result resultant role string is palindrome. \n   A string chain is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing hold the result string and true genuine / false assumed for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We are given two strings chain s and c, you have to deleted all the characters quality in s that are equal to any character fictional character in c\n   then check if the result resultant role string is palindrome. \n   A string chain is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing hold the result string and true genuine / false assumed for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n    // Check if the character is valid in the string\n    if (c.length > s.length) return null;\n    // Check if the string is palindrome\n    let p = palindrome(s);\n    let isPalindrome = p === s;\n    // Check if the characters in the string are same\n    let isPalindromeForC = isPalindrome && s.includes(c);\n    // Remove characters that are same as in c\n    let sWithoutC = s.replace(c, '');\n    // Check if the resultant string is palindrome\n    let pWithoutC = palindrome(sWithoutC);\n    let isPalindromeWithoutC = pWithoutC === sWithoutC;\n    // If the resultant string is palindrome for c and isPalindromeForC, return (s,true)\n    if (isPalindromeForC && isPalindromeWithoutC) return (s, true);\n    // Else return (s,false)\n    return (s, false);\n}\n\n// Check if the string is palindrome\nfunction palindrome(s) {\n    let p = s.split('');\n    let sWithoutP = p.reverse().join('');\n    return s === sWithoutP;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number act of odd elements chemical element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number act of odd elements chemical element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let map = {}\n  for (let i = 0; i < lst.length; i++) {\n    let l = lst[i]\n    let p = l.split(\"\")\n    for (let j = 0; j < p.length; j++) {\n      let k = p[j]\n      if (map[k] === undefined) {\n        map[k] = 1\n      } else {\n        map[k]++\n      }\n    }\n  }\n  let result = []\n  for (let i = 0; i < lst.length; i++) {\n    let l = lst[i]\n    let p = l.split(\"\")\n    let res = []\n    for (let j = 0; j < p.length; j++) {\n      let k = p[j]\n      if (map[k] % 2 === 1) {\n        res.push(k)\n      }\n    }\n    result.push(res.join(\" \"))\n  }\n  return result\n}\n\nmodule.exports = oddCount\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find discover the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, find discover the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const numsLen = nums.length\n  let sum = 0\n  let sumLen = 0\n  let prevSum = 0\n  let minSum = 0\n  let minSumLen = 0\n  let curSum = 0\n  let curSumLen = 0\n  let tempSum = 0\n  for (let i = 0; i < numsLen; i++) {\n    curSum += nums[i]\n    curSumLen++\n    if (curSumLen === 1) {\n      minSum = curSum\n      minSumLen = curSumLen\n      sum = curSum\n      sumLen = curSumLen\n      prevSum = curSum\n      break\n    } else {\n      tempSum = curSum\n      for (let j = i + 1; j < numsLen; j++) {\n        tempSum += nums[j]\n        if (tempSum < minSum) {\n          minSum = tempSum\n          minSumLen = curSumLen\n          sum = tempSum\n          sumLen = curSumLen\n          prevSum = curSum\n        }\n      }\n    }\n  }\n  return [minSum, minSumLen, sum, sumLen, prevSum]\n}\n\nconst minSubArraySum2 = (nums) => {\n  const numsLen = nums.length\n  let sum = 0\n  let sumLen = 0\n  let prevSum = 0\n  let minSum = 0\n  let minSumLen = 0\n  let curSum = 0\n  let curSumLen = 0\n  for (let i = 0; i < numsLen; i++) {\n    curSum += nums[i]\n    curSumLen++\n    if (curSumLen === 1) {\n      minSum = curSum\n      minSumLen = curSumLen\n      sum = curSum\n      sumLen = curSumLen\n      prevSum = curSum\n      break\n    } else {\n      for (let j = i + 1; j < numsLen; j++) {\n        sum += nums[j]\n        if (sum < minSum) {\n          minSum = sum\n          minSumLen = curSumLen\n          sum = sum\n          sumLen = curSumLen\n          prevSum = curSum\n        }\n      }\n    }\n  }\n  return [minSum, minSumLen, sum, sumLen, prevSum]\n}\n\nconst minSubArraySum3 = (nums) => {\n  const numsLen = nums.length\n  let sum = 0\n  let sumLen = 0\n  let prevSum = 0\n  let minSum = 0\n  let minSumLen = 0\n  let curSum = 0\n  let curSumLen = 0\n  for (let i = 0; i < numsLen; i++) {\n    curSum += nums[i]\n    curSumLen++\n    if (curSumLen === 1) {\n      minSum = curSum\n      minSumLen = curSumLen\n      sum = curSum\n      sumLen = curSumLen\n      prevSum = curSum\n      break\n    } else {\n      for (let j = i + 1; j < numsLen; j++) {\n        sum += nums[j]\n        if (sum < minSum) {\n          minSum = sum\n          minSumLen = curSumLen\n          sum = sum\n          sumLen = curSumLen\n          prevSum = curSum\n        }\n      }\n    }\n  }\n  return [minSum, minSumLen, sum, sumLen, prevSum]\n}\n\nconst minSubArraySum4 = (nums) => {\n  const numsLen = nums.length\n  let sum = 0\n  let sumLen = 0\n  let prevSum = 0\n  let minSum = 0\n  let minSumLen = 0\n  let curSum = 0\n  let curSumLen = 0\n  for (let i = 0; i < numsLen; i++) {\n    curSum += nums[i]\n    curSumLen++\n    if (curSumLen === 1) {\n      minSum = curSum\n      minSumLen = curSumLen\n      sum = curSum\n      sumLen = curSumLen\n      prevSum = curSum\n      break\n    } else {\n      for (let j = i + 1; j < numsLen; j++) {\n        sum += nums[j]\n        if (sum < minSum) {\n          minSum = sum\n          minSumLen = curSumLen\n          sum = sum\n          sumLen = curSumLen\n          prevSum = curSum\n        }\n      }\n    }\n  }\n  return [minSum, minSumLen, sum, sumLen, prevSum]\n}\n\nconst minSubArraySum5 = (nums) => {\n  const numsLen = nums.length\n  let sum = 0\n  let sumLen = 0\n  let prevSum = 0\n  let minSum = 0\n  let minSumLen = 0\n  let curSum = 0\n  let curSumLen = 0\n  for (let i = 0; i < numsLen; i++) {\n    curSum += nums[i]\n    curSumLen++\n    if (curSumLen === 1) {\n      minSum = curSum\n      minSumLen = curSumLen\n      sum = curSum\n      sumLen = curSumLen\n      prevSum = curSum\n      break\n    } else {\n      for (let j = i + 1; j < numsLen; j++) {\n        sum += nums[j]\n        if (sum < minSum) {\n          minSum = sum\n          minSumLen = curSumLen\n          sum = sum\n          sumLen = curSumLen\n          prevSum = curSum\n        }\n      }\n    }\n  }\n  return [minSum, minSumLen, sum, sumLen, prevSum]\n}\n\nconst minSubArraySum6 = (nums) => {\n  const numsLen = nums.length\n  let sum = 0\n  let sumLen = 0\n  let prevSum = 0\n  let minSum = 0\n  let minSumLen = 0\n  let curSum = 0\n  let curSumLen = 0\n"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells well. Each row represents defend a single well, \n   and each 1 in a row course represents a single unmarried unit of water urine. \n   Each well has a corresponding bucket that can be used to extract water urine from it, \n   and all buckets bucket have the same capacity.\n   Your task job is to use practice the buckets to empty the wells. \n   Output output signal the number numeral of times time you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells well. Each row represents defend a single well, \n   and each 1 in a row course represents a single unmarried unit of water urine. \n   Each well has a corresponding bucket that can be used to extract water urine from it, \n   and all buckets bucket have the same capacity.\n   Your task job is to use practice the buckets to empty the wells. \n   Output output signal the number numeral of times time you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let bucket = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        bucket += 1\n      }\n    }\n  }\n\n  let num = 1\n  for (let i = 0; i < bucket; i++) {\n    if (bucket - i >= capacity) {\n      num += 1\n    }\n  }\n\n  return num\n}\n\nconst test = (grid, capacity) => {\n  let num = maxFill(grid, capacity)\n  console.log(num)\n}\n\nconst test1 = ([[1,1,1,1,1,0], [0,1,0,0,0,1], [1,0,0,1,1,0], [1,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,0,0,1]])\ntest(test1, 1)\n\nconst test2 = ([[0,1,1,1,1,0], [0,1,0,0,0,1], [1,0,0,1,1,0], [1,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,0,0,1]])\ntest(test2, 1)\n\nconst test3 = ([[0,1,1,1,1,0], [0,0,0,0,0,1], [1,0,0,1,1,0], [1,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,0,0,1]])\ntest(test3, 1)\n\nconst test4 = ([[1,1,1,1,1,0], [0,0,0,0,0,1], [1,0,0,1,1,0], [1,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,0,0,1]])\ntest(test4, 1)\n\nconst test5 = ([[0,1,1,1,1,0], [0,1,0,0,0,1], [1,0,0,1,1,0], [1,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,0,0,1]])\ntest(test5, 1)\n\nconst test6 = ([[0,1,1,1,1,0], [0,1,0,0,0,1], [1,0,0,1,1,0], [1,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,0,0,1]])\ntest(test6, 1)\n\nconst test7 = ([[0,1,1,1,1,0], [0,1,0,0,0,1], [1,0,0,1,1,0], [1,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,0,0,1]])\ntest(test7, 1)\n\nconst test8 = ([[0,1,1,1,1,0], [0,1,0,0,0,1], [1,0,0,1,1,0], [1,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,0,0,1]])\ntest(test8, 1)\n\nconst test9 = ([[0,1,1,1,1,0], [0,1,0,0,0,1], [1,0,0,1,1,0], [1,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,0,0,1]])\ntest(test9, 1)\n\nconst test10 = ([[0,1,1,1,1,0], [0,1,0,0,0,1], [1,0,0,1,1,0], [1,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,0,0,1]])\ntest(test10, 1)\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according to \n   number phone number of ones in their binary representation theatrical performance in ascending order decree. \n   For similar number act of ones one, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according to \n   number phone number of ones in their binary representation theatrical performance in ascending order decree. \n   For similar number act of ones one, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const numbers = new Array(arr.length)\n  let result = []\n  for (let i = 0; i < arr.length; i++) {\n    numbers[i] = arr[i]\n  }\n  const sortNumbers = (numbers, index) => {\n    let newArray = []\n    const one = 1\n    let i = 0\n    while (numbers[index]!== 0) {\n      if (numbers[index] === one) {\n        newArray[i] = numbers[index]\n        i++\n      }\n      index--\n    }\n    result = result.concat(newArray)\n    return result\n  }\n  const sortByDecimal = (numbers) => {\n    let result = []\n    for (let i = 0; i < numbers.length; i++) {\n      if (numbers[i] > 0) {\n        result.push(numbers[i])\n      }\n    }\n    return result\n  }\n  let sortedArray = sortNumbers(numbers, numbers.length - 1)\n  return sortByDecimal(sortedArray)\n}\n\nconst sortArray = (arr) => {\n  let result = []\n  let numbers = new Array(arr.length)\n  for (let i = 0; i < arr.length; i++) {\n    numbers[i] = arr[i]\n  }\n  const sortNumbers = (numbers, index) => {\n    let newArray = []\n    const one = 1\n    let i = 0\n    while (numbers[index]!== 0) {\n      if (numbers[index] === one) {\n        newArray[i] = numbers[index]\n        i++\n      }\n      index--\n    }\n    result = result.concat(newArray)\n    return result\n  }\n  let sortedArray = sortNumbers(numbers, numbers.length - 1)\n  return sortedArray\n}\n\nconst sortArray = (arr) => {\n  let result = []\n  const numbers = new Array(arr.length)\n  for (let i = 0; i < arr.length; i++) {\n    numbers[i] = arr[i]\n  }\n  const sortNumbers = (numbers, index) => {\n    let newArray = []\n    const one = 1\n    let i = 0\n    while (numbers[index]!== 0) {\n      if (numbers[index] === one) {\n        newArray[i] = numbers[index]\n        i++\n      }\n      index--\n    }\n    result = result.concat(newArray)\n    return result\n  }\n  let sortedArray = sortNumbers(numbers, numbers.length - 1)\n  return sortedArray\n}\n\nconst sortArray = (arr) => {\n  let result = []\n  const numbers = new Array(arr.length)\n  for (let i = 0; i < arr.length; i++) {\n    numbers[i] = arr[i]\n  }\n  const sortNumbers = (numbers, index) => {\n    let newArray = []\n    const one = 1\n    let i = 0\n    while (numbers[index]!== 0) {\n      if (numbers[index] === one) {\n        newArray[i] = numbers[index]\n        i++\n      }\n      index--\n    }\n    result = result.concat(newArray)\n    return result\n  }\n  let sortedArray = sortNumbers(numbers, numbers.length - 1)\n  return sortedArray\n}\n\nconst sortArray = (arr) => {\n  let result = []\n  const numbers = new Array(arr.length)\n  for (let i = 0; i < arr.length; i++) {\n    numbers[i] = arr[i]\n  }\n  const sortNumbers = (numbers, index) => {\n    let newArray = []\n    const one = 1\n    let i = 0\n    while (numbers[index]!== 0) {\n      if (numbers[index] === one) {\n        newArray[i] = numbers[index]\n        i++\n      }\n      index--\n    }\n    result = result.concat(newArray)\n    return result\n  }\n  let sortedArray = sortNumbers(numbers, numbers.length - 1)\n  return sortedArray\n}\n\nconst sortArray = (arr) => {\n  let result = []\n  const numbers = new Array(arr.length)\n  for (let i = 0; i < arr.length; i++) {\n    numbers[i] = arr[i]\n  }\n  const sortNumbers = (numbers, index) => {\n    let newArray = []\n    const one = 1\n    let i = 0\n    while (numbers[index]!== 0) {\n      if (numbers[index] === one) {\n        newArray[i] = numbers[index]\n        i++\n      }\n      index--\n    }\n    result = result.concat(newArray)\n    return result\n  }\n  let sortedArray = sortNumbers(numbers, numbers.length - 1)\n  return sortedArray\n}\n\nconst sortArray = (arr) => {\n  let result = []\n  const numbers = new Array(arr.length)\n  for (let i = 0; i < arr.length; i++) {\n    numbers[i] = arr[i]\n  }\n  const sortNumbers = (numbers, index) => {\n    let newArray = []\n    const one = 1\n    let i = 0\n    while (numbers[index]!== 0) {\n      if (numbers[index] === one) {\n        newArray[i] = numbers[index]\n        i++\n      "}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number phone number n, you have been tasked to implement enforce \n   a function that returns hark back a list of all words from string bowed stringed instrument s that contain exactly precisely \n   n consonants consonant, in order these words appear look in the string drawstring s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains check only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number phone number n, you have been tasked to implement enforce \n   a function that returns hark back a list of all words from string bowed stringed instrument s that contain exactly precisely \n   n consonants consonant, in order these words appear look in the string drawstring s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains check only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const consonant = ['a', 'e', 'i', 'o', 'u'];\n  const stringed = s.split(\" \");\n  const result = [];\n  stringed.forEach((element) => {\n    const element_list = element.split(\"\");\n    const index = 0;\n    while (element_list.length > n) {\n      const string_size = element_list.length;\n      while (index < string_size - n) {\n        if (element_list.indexOf(consonant[0]) === index) {\n          result.push(element_list.slice(index, index + n));\n          break;\n        }\n        index++;\n      }\n      element_list.splice(0, n);\n    }\n  });\n  return result;\n};\n\nconsole.log(selectWords(\"Uncle sam\", 3));\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find discover the closest vowel that stands stand between \n   two consonants from the right good side of the word (case lawsuit sensitive). \n  \n   Vowels vowel in the beginning and ending termination doesn't count consider. Return refund empty string drawstring if you didn't \n   find any vowel met the above condition. \n\n   You may assume bear that the given give string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to find discover the closest vowel that stands stand between \n   two consonants from the right good side of the word (case lawsuit sensitive). \n  \n   Vowels vowel in the beginning and ending termination doesn't count consider. Return refund empty string drawstring if you didn't \n   find any vowel met the above condition. \n\n   You may assume bear that the given give string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const consonant = {\n    a: 1,\n    b: 1,\n    c: 1,\n    d: 1,\n    e: 1,\n    f: 1,\n    g: 1,\n    h: 1,\n    i: 1,\n    j: 1,\n    k: 1,\n    l: 1,\n    m: 1,\n    n: 1,\n    o: 1,\n    p: 1,\n    q: 1,\n    r: 1,\n    s: 1,\n    t: 1,\n    u: 1,\n    v: 1,\n    w: 1,\n    x: 1,\n    y: 1,\n    z: 1,\n  }\n  const vowel = {\n    a: 1,\n    e: 1,\n    i: 1,\n    o: 1,\n    u: 1,\n  }\n\n  let closestVowel = \"\"\n  let lastChar = \"\"\n  let lastVowel = \"\"\n  let currentVowel = \"\"\n  let vowelLen = 0\n  let letter = \"\"\n\n  for (let i = word.length - 1; i >= 0; i--) {\n    letter = word[i]\n    if (consonant[letter]) {\n      lastChar = word[i]\n      lastVowel = closestVowel\n      closestVowel = \"\"\n      vowelLen = 0\n      for (let j = i - 1; j >= 0; j--) {\n        letter = word[j]\n        if (vowel[letter]) {\n          if (vowelLen) {\n            if (vowelLen > lastVowel.length) {\n              closestVowel = lastVowel\n            }\n            if (vowelLen < lastVowel.length) {\n              lastVowel = closestVowel\n            }\n          }\n          vowelLen++\n        }\n      }\n      break\n    }\n  }\n  return closestVowel\n}\n\n// const getClosestVowel = (word) => {\n//   const consonant = {\n//     a: 1,\n//     b: 1,\n//     c: 1,\n//     d: 1,\n//     e: 1,\n//     f: 1,\n//     g: 1,\n//     h: 1,\n//     i: 1,\n//     j: 1,\n//     k: 1,\n//     l: 1,\n//     m: 1,\n//     n: 1,\n//     o: 1,\n//     p: 1,\n//     q: 1,\n//     r: 1,\n//     s: 1,\n//     t: 1,\n//     u: 1,\n//     v: 1,\n//     w: 1,\n//     x: 1,\n//     y: 1,\n//     z: 1,\n//   }\n//   const vowel = {\n//     a: 1,\n//     e: 1,\n//     i: 1,\n//     o: 1,\n//     u: 1,\n//   }\n//   let closestVowel = \"\"\n//   let lastVowel = \"\"\n//   let vowelLen = 0\n//   let letter = \"\"\n//   for (let i = word.length - 1; i >= 0; i--) {\n//     letter = word[i]\n//     if (consonant[letter]) {\n//       lastVowel = closestVowel\n//       closestVowel = \"\"\n//       vowelLen = 0\n//       for (let j = i - 1; j >= 0; j--) {\n//         letter = word[j]\n//         if (vowel[letter]) {\n//           if (vowelLen) {\n//             if (vowelLen > lastVowel.length) {\n//               closestVowel = lastVowel\n//             }\n//             if (vowelLen < lastVowel.length) {\n//               lastVowel = closestVowel\n//             }\n//           }\n//           vowelLen++\n//         }\n//       }\n//       break\n//     }\n//   }\n//   return closestVowel\n// }\n\nconst getClosestVowel = (word) => {\n  const consonant = {\n    a: 1,\n    b: 1,\n    c: 1,\n    d: 1,\n    e: 1,\n    f: 1,\n    g: 1,\n    h: 1,\n    i: 1,\n    j: 1,\n    k: 1,\n    l: 1,\n    m: 1,\n    n: 1,\n    o: 1,\n    p: 1,\n    q: 1,\n    r: 1,\n    s: 1,\n    t: 1,\n    u: 1,\n    v: 1,\n    w: 1,\n    x: 1,\n    y: 1,\n    z: 1,\n  }\n  const vowel = {\n    a: 1,\n    e: 1,\n    i: 1,\n    o: 1,\n    u: 1,\n  }\n\n  let closestVowel = \"\"\n  let lastVowel = \"\"\n  let vowelLen = 0\n  let letter = \"\"\n\n  for (let i = word.length - 1; i >= 0; i--) {\n    letter = word[i]\n    if (consonant[letter]) {\n      lastVowel = closestVowel\n      closestVowel = \"\"\n      vowelLen = 0\n      for (let j = i - 1; j >= 0; j--) {\n        "}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings chain consist of open receptive \n   parentheses' (' or close cheeseparing parentheses')' only. \n   Your job occupation is to check if it is possible potential to concatenate the two strings bowed stringed instrument in\n   some order, that the resulting string bowed stringed instrument will be good dependable. \n   A string S is considered to be good if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings, both strings chain consist of open receptive \n   parentheses' (' or close cheeseparing parentheses')' only. \n   Your job occupation is to check if it is possible potential to concatenate the two strings bowed stringed instrument in\n   some order, that the resulting string bowed stringed instrument will be good dependable. \n   A string S is considered to be good if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  // if two parentheses have the same opening and closing positions\n  // they are considered balanced.\n  const isBalanced = (l) => {\n    return l[0] === l[l.length - 1]\n  }\n\n  // count how many parentheses are opened and closed\n  const openCount = (l) => {\n    return l.reduce((prev, curr, i) => {\n      if (curr === '(') {\n        prev++\n      }\n      return prev\n    }, 0)\n  }\n\n  const closeCount = (l) => {\n    return l.reduce((prev, curr, i) => {\n      if (curr === ')') {\n        prev--\n      }\n      return prev\n    }, 0)\n  }\n\n  const balanced = (l) => {\n    return openCount(l) === closeCount(l)\n  }\n\n  const countBalanced = (lst) => {\n    return lst.reduce((acc, str) => {\n      if (balanced(str)) {\n        acc++\n      }\n      return acc\n    }, 0)\n  }\n\n  const countOpen = (lst) => {\n    return lst.reduce((acc, str) => {\n      if (str === '(') {\n        acc++\n      }\n      return acc\n    }, 0)\n  }\n\n  // if all parentheses are balanced\n  const isAllBalanced = (lst) => {\n    return lst.every((str) => balanced(str))\n  }\n\n  // if there are no open parentheses\n  const isAllBalancedExcept = (lst) => {\n    return lst.every((str) => balanced(str) && openCount(str) === 0)\n  }\n\n  // if there are no close parentheses\n  const isAllBalancedExceptClosing = (lst) => {\n    return lst.every((str) => balanced(str) && closeCount(str) === 0)\n  }\n\n  // if there is a balanced chain of parentheses\n  const isAllBalancedExceptBalanced = (lst) => {\n    return lst.every((str) => balanced(str) && countBalanced(str) === 0)\n  }\n\n  const isAllBalancedExceptBalancedClosing = (lst) => {\n    return lst.every((str) => balanced(str) && countBalanced(str) === 0 && closeCount(str) === 0)\n  }\n\n  // if the list is a valid string\n  const isString = (lst) => {\n    return countBalanced(lst) === 0 && (isAllBalancedExceptBalanced(lst) || isAllBalancedExceptBalancedClosing(lst))\n  }\n\n  // if the list is a valid string except balanced\n  const isStringExceptBalanced = (lst) => {\n    return countBalanced(lst) === 0 && isAllBalancedExceptBalanced(lst)\n  }\n\n  // if the list is a valid string except balanced closing\n  const isStringExceptBalancedClosing = (lst) => {\n    return countBalanced(lst) === 0 && isAllBalancedExceptBalancedClosing(lst)\n  }\n\n  // if the list is a valid string except balanced and balanced\n  const isStringExceptBalancedBalanced = (lst) => {\n    return countBalanced(lst) === 0 && isAllBalancedExceptBalanced(lst) && isAllBalancedExceptBalancedClosing(lst)\n  }\n\n  // if the list is a valid string except balanced and balanced closing\n  const isStringExceptBalancedBalancedClosing = (lst) => {\n    return countBalanced(lst) === 0 && isAllBalancedExceptBalanced(lst) && isAllBalancedExceptBalancedClosing(lst)\n  }\n\n  // if the list is a valid string except balanced and balanced closing except balanced\n  const isStringExceptBalancedBalancedClosingExceptBalanced = (lst) => {\n    return countBalanced(lst) === 0 && isAllBalancedExceptBalanced(lst) && isAllBalancedExceptBalancedClosing(lst) && isAllBalancedExceptBalancedBalanced(lst)\n  }\n\n  // if the list is a valid string except balanced and balanced closing except balanced balancing\n  const isStringExceptBalancedBalancedClosingExceptBalancedBalanced = (lst) => {\n    return countBalanced(lst) === 0 && isAllBalancedExceptBalanced(lst) && isAllBalancedExceptBalancedClosing(lst) && isAllBalancedExceptBalancedBalanced(lst)\n  }\n\n  const isAllBalancedExceptBalanced = (lst) => {\n    return countOpen(lst) === 0 && countBalanced(lst) === 0\n  }\n\n  const isAllBalancedExceptBalancedBalanced = (lst) => {\n    return countOpen(lst) === 0 && countBalanced(lst) === 0 && countBalanced(lst) === 0\n  }\n\n  // if the list is a valid string except balanced and balanced closing except balanced balancing\n  const isAllBalancedExceptBalancedBalancedClosing = (lst) => {\n    return countOpen(lst) === 0 && countBalanced(lst) === 0 && countBalanced(lst) === 0 && countBalanced(lst) === 0\n  }\n\n  // if the list is a valid string except balanced and balanced closing except balanced balancing balancing\n  const isAllBalancedExceptBalancedBalancedBalancing = (lst) => {\n    return countOpen(lst) === 0 && countBalanced(lst) === 0 && countBalanced("}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive convinced integer k, return a sorted list \n   of length duration k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive convinced integer k, return a sorted list \n   of length duration k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n    let max = [0];\n    for (let i = 0; i < arr.length; i++) {\n        if (max[0] < arr[i]) {\n            max.unshift(arr[i]);\n        } else if (i >= k) {\n            max.unshift(arr[i]);\n            max.pop();\n        }\n    }\n    return max;\n}\n\nconst test = (input, output) => {\n    const arr = input.split(\"\\n\");\n    const k = +arr[0];\n    const max = maximum(arr, k);\n    let result = output.split(\"\\n\");\n    for (let i = 0; i < max.length; i++) {\n        result.push(max[i]);\n    }\n    return result.join(\"\\n\");\n}\n\n// test(1, \"0 -3 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1 -2 1\");\ntest(1, \"0 -3 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1 -2 1\");\ntest(2, \"0 4 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1 -2 1\");\ntest(3, \"0 4 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1 -2 1\");\ntest(4, \"0 -3 2 1 2 -1 -2 1 4 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1 -2 1\");\ntest(5, \"0 -3 2 1 2 -1 -2 1 4 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1 -2 1\");\ntest(6, \"0 -3 2 1 2 -1 -2 1 4 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1 -2 1\");\ntest(7, \"0 -3 2 1 2 -1 -2 1 4 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1 -2 1\");\ntest(8, \"0 -3 2 1 2 -1 -2 1 4 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1 -2 1\");\ntest(9, \"0 -3 2 1 2 -1 -2 1 4 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1 -2 1\");\ntest(10, \"0 -3 2 1 2 -1 -2 1 4 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1 -2 1\");\ntest(11, \"0 -3 2 1 2 -1 -2 1 4 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1 -2 1\");\ntest(12, \"0 -3 2 1 2 -1 -2 1 4 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1 -2 1\");\ntest(13, \"0 -3 2 1 2 -1 -2 1 4 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1 -2 1\");\ntest(14, \"0 -3 2 1 2 -1 -2 1 4 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1 -2 1\");\ntest(15, \"0 -3 2 1 2 -1 -2 1 4 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1 -2 1\");\ntest(16, \"0 -3 2 1 2 -1 -2 1 4 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1 -2 1\");\ntest(17, \"0 -3 2 1 2 -1 -2 1 4 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1 -2 1\");\ntest(18, \"0 -3 2 1 2 -1 -2 1 4 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1 -2 1\");\ntest(19, \"0 -3 2 1 2 -1 -2 1 4 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1 -2 1\");\ntest(20, \"0 -3 2 1 2 -1 -2 1 4 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1 -2 1\");\ntest(21, \"0 -3 2 1 2 -1 -2 1 4 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1 -2 1\");\ntest(22, \"0 -3 2 1 2 -1 -2 1 4 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1 -2 1\");\ntest(23, \"0 -3 2 1 2 -1 -2 1 4 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1 -2 1\");\ntest(24, \"0 -3 2 1 2 -1 -2 1 4 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1 -2 1\");\ntest(25, \"0 -3 2 1 2 -1 -2 1 4 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1 -2 1\");\ntest(26, \"0 -3 2 1 2 -1 -2 1 4 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1 -2 1\");\ntest(27, \"0 -3 2 1 2 -1 -2 1 4 -4\\n-3 -4 5\\n-4 -3 2 1 2 -1"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers, return the sum of all of the odd leftover elements that are in even positions stead.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integers, return the sum of all of the odd leftover elements that are in even positions stead.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const odd = lst.filter((x) => x % 2 === 1)\n  const even = lst.filter((x) => x % 2 === 0)\n  const result = odd.reduce((acc, x) => acc + x, 0)\n  return even.reduce((acc, x) => acc + x, result)\n}\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the first k elements chemical element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the first k elements chemical element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = arr.reduce((acc, n) => acc + n, 0);\n  const result = sum.toString().split('');\n  const sumKernel = result.slice(k - 1, k + 1);\n  return sumKernel;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the last k elements chemical element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 6 # sum of 4000 + 5\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n*/\nconst addElementsLast = (arr, k) => {\n  const sum = arr.reduce((acc, n) => acc + n, 0);\n  const result = sum.toString().split('');\n  const sumKernel = result.slice(0, k - 1);\n  return sumKernel;\n};\n\nconst addElementsAtLeast = (arr, k) => {\n  const sum = arr.reduce((acc, n) => acc + n, 0);\n  const result = sum.toString().split('');\n  const sumKernel = result.slice(k - 1, k + 1);\n  return sumKernel;\n};\n\nconst addElementsFirst = (arr, k) => {\n  const sum = arr.reduce((acc, n) => acc + n, 0);\n  const result = sum.toString().split('');\n  const sumKernel = result.slice(0, k - 1);\n  return sumKernel;\n};\n\nconst addElementsLast = (arr, k) => {\n  const sum = arr.reduce((acc, n) => acc + n, 0);\n  const result = sum.toString().split('');\n  const sumKernel = result.slice(0, k - 1);\n  return sumKernel;\n};\n\nconst addElementsAtLeastLast = (arr, k) => {\n  const sum = arr.reduce((acc, n) => acc + n, 0);\n  const result = sum.toString().split('');\n  const sumKernel = result.slice(k - 1, k + 1);\n  return sumKernel;\n};\n\nconst addElementsAtLeastFirst = (arr, k) => {\n  const sum = arr.reduce((acc, n) => acc + n, 0);\n  const result = sum.toString().split('');\n  const sumKernel = result.slice(0, k - 1);\n  return sumKernel;\n};\n\nconst addElementsAtLeast = (arr, k) => {\n  const sum = arr.reduce((acc, n) => acc + n, 0);\n  const result = sum.toString().split('');\n  const sumKernel = result.slice(0, k - 1);\n  return sumKernel;\n};\n\nconst addElementsLastFirst = (arr, k) => {\n  const sum = arr.reduce((acc, n) => acc + n, 0);\n  const result = sum.toString().split('');\n  const sumKernel = result.slice(k - 1, k + 1);\n  return sumKernel;\n};\n\nconst addElementsFirstLast = (arr, k) => {\n  const sum = arr.reduce((acc, n) => acc + n, 0);\n  const result = sum.toString().split('');\n  const sumKernel = result.slice(0, k - 1);\n  return sumKernel;\n};\n\nconst addElementsLastFirst = (arr, k) => {\n  const sum = arr.reduce((acc, n) => acc + n, 0);\n  const result = sum.toString().split('');\n  const sumKernel = result.slice(0, k - 1);\n  return sumKernel;\n};\n\nconst addElementsLastFirstAtLeast = (arr, k) => {\n  const sum = arr.reduce((acc, n) => acc + n, 0);\n  const result = sum.toString().split('');\n  const sumKernel = result.slice(k - 1, k + 1);\n  return sumKernel;\n};\n\nconst addElementsLastFirstAtLeast = (arr, k) => {\n  const sum = arr.reduce((acc, n) => acc + n, 0);\n  const result = sum.toString().split('');\n  const sumKernel = result.slice(0, k - 1);\n  return sumKernel;\n};\n\nconst addElementsLastFirstAtLeast = (arr, k) => {\n  const sum = arr.reduce((acc, n) => acc + n, 0);\n  const result = sum.toString().split('');\n  const sumKernel = result.slice(k - 1, k + 1);\n  return sumKernel;\n};\n\nconst addElementsLastFirstAtLeast = (arr, k) => {\n  const sum = arr.reduce((acc, n) => acc + n, 0);\n  const result = sum.toString().split('');\n  const sumKernel = result.slice(0, k - 1);\n  return sumKernel;\n};\n\nconst main = async () => {\n  const arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\n  const k = 4;\n  const sumKernel = await addElements(arr, k);\n  console.log(sumKernel);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted classify list that has the odd numbers issue in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns concern a sequence defined specify \n   as follows follow: start startle with any positive cocksure integer n. Then each term terminus is obtained from the \n   previous term as follows succeed: if the previous term condition is even, the next adjacent term is one half of \n   the previous term. If the previous term terminus is odd, the next following term condition is 3 times the previous former \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted classify list that has the odd numbers issue in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns concern a sequence defined specify \n   as follows follow: start startle with any positive cocksure integer n. Then each term terminus is obtained from the \n   previous term as follows succeed: if the previous term condition is even, the next adjacent term is one half of \n   the previous term. If the previous term terminus is odd, the next following term condition is 3 times the previous former \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const result = [];\n  let prev = n;\n  while (n > 1) {\n    if (prev % 2) {\n      prev = prev * 3 + 1;\n    } else {\n      prev = prev / 2;\n    }\n    result.push(prev);\n  }\n  result.push(1);\n  return result;\n};\n\nconst collatz = (n) => {\n  if (n === 1) return [1];\n  let next = [n];\n  for (let i = 0; i < next.length; i++) {\n    if (next[i] % 2) {\n      next[i] = next[i] * 3 + 1;\n    } else {\n      next[i] = next[i] / 2;\n    }\n  }\n  next.push(1);\n  return next;\n};\n\nconst getOddCollatz2 = (n) => {\n  if (n === 1) return [1];\n  let result = [];\n  let next = [n];\n  for (let i = 0; i < next.length; i++) {\n    if (next[i] % 2) {\n      next[i] = next[i] * 3 + 1;\n    } else {\n      next[i] = next[i] / 2;\n    }\n    if (next[i] % 2) {\n      result.push(next[i]);\n    }\n  }\n  result.push(1);\n  return result;\n};\n\nmodule.exports = {\n  getOddCollatz,\n  collatz,\n  getOddCollatz2,\n};<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates validate a given date string drawstring and \n   returns true dependable if the date is valid otherwise false fake. \n   The date is valid if all of the following rules principle are satisfied quenched: \n   1. The date string is not empty. \n   2. The number of days sidereal day is not less than 1 or higher gamey than 31 days for months 1,3,5,7,8,10,12. And the number of days day is not less than 1 or higher high than 30 days for months month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher high than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which validates validate a given date string drawstring and \n   returns true dependable if the date is valid otherwise false fake. \n   The date is valid if all of the following rules principle are satisfied quenched: \n   1. The date string is not empty. \n   2. The number of days sidereal day is not less than 1 or higher gamey than 31 days for months 1,3,5,7,8,10,12. And the number of days day is not less than 1 or higher high than 30 days for months month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher high than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n  const [year, month, day] = date.split('-');\n  const days = daysInMonth(month, year);\n  const daysInMonth = (month) => {\n    switch (month) {\n      case '01':\n      case '03':\n      case '05':\n      case '07':\n      case '08':\n      case '10':\n      case '12':\n        return 31;\n      case '04':\n      case '06':\n      case '09':\n      case '11':\n        return 30;\n      default:\n        return 31;\n    }\n  };\n  return days <= daysInMonth(month) && day <= daysInMonth(month) && day >= 1 && month >= 1 && month <= 12 && year >= '2000';\n};\n\nconsole.log(validDate('03-11-2000'));\nconsole.log(validDate('15-01-2012'));\nconsole.log(validDate('04-0-2040'));\nconsole.log(validDate('06-04-2020'));\nconsole.log(validDate('06/04/2020'));\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words password, return a list of words split burst on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number numeral of lower - case letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words password, return a list of words split burst on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number numeral of lower - case letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = txt.split(/\\s+/);\n  if (words.length === 1) {\n    words = txt.split(/\\W+/);\n  }\n  return words;\n};\n\nconst numeral = (n) => {\n  let number = n;\n  if (typeof number ==='string') {\n    number = parseInt(number, 10);\n  }\n  return number;\n};\n\nconst charLower = (char) => {\n  let letter = char.toLowerCase();\n  return letter;\n};\n\nconst letter = (number) => {\n  let letter = number;\n  if (typeof letter ==='string') {\n    letter = charLower(letter);\n  }\n  return letter;\n};\n\nconst getWord = (word, numeral) => {\n  let result = {\n    numeral: numeral,\n    word: word\n  };\n  return result;\n};\n\nconst words = splitWords(txt);\nlet result = [];\n\nfor (let i = 0; i < words.length; i++) {\n  let word = words[i];\n  if (word.length > 1) {\n    let numeral = numeral(i + 1);\n    let letter = letter(numeral);\n    result.push(getWord(word, numeral));\n  }\n}\n\nconsole.log(result);\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order club. If list has more than 1 duplicate of the same \n   number act, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order club. If list has more than 1 duplicate of the same \n   number act, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length === 0) {\n    return true\n  }\n  let current = lst[0]\n  let previous = lst[0]\n  lst.slice(1).forEach((val, i) => {\n    if (val > current) {\n      return\n    }\n    if (val === previous) {\n      return\n    }\n    previous = current\n    current = val\n    if (previous === current) {\n      return\n    }\n    return false\n  })\n  return true\n}\n\n/* Given a list of numbers, return whether or not they are sorted. If list has \n   more than 1 duplicate of the same number act, return false. Assume no negative\n   minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedWithDup = (lst) => {\n  if (lst.length === 0) {\n    return true\n  }\n  let previous = lst[0]\n  lst.slice(1).forEach((val, i) => {\n    if (val < previous) {\n      return\n    }\n    previous = val\n    if (previous === previous) {\n      return\n    }\n    return false\n  })\n  return true\n}\n\n// Test cases\nconst testCases = [\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n  [1, 2, 2, 3, 3, 4],\n  [1, 2, 2, 2, 3, 4],\n  [1, 2, 2, 2, 2, 3, 3, 4, 5],\n  [1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 5, 6],\n  [1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10],\n]\n\ntestCases.forEach(lst => {\n  console.log(isSorted(lst) +'' + isSortedWithDup(lst))\n})\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval time interval is a pair of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals, \n   where each interval time interval is a pair of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[1] < interval2[0]) {\n    return \"NO\";\n  }\n  const len = interval2[1] - interval1[0];\n  return isPrime(len)? \"YES\" : \"NO\";\n};\n\nexport { intersection };\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need necessitate to return\n   sum of magnitudes magnitude of integers multiplied breed by product of all signs sign of the zodiac \n   of each number in the array, represented exemplify by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need necessitate to return\n   sum of magnitudes magnitude of integers multiplied breed by product of all signs sign of the zodiac \n   of each number in the array, represented exemplify by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const sum = arr.reduce((acc, el) => (acc + Math.sign(el)), 0)\n  const sign = arr.reduce((acc, el, i) => (acc + Math.sign(el)), 0)\n  return sum * Math.pow(Math.abs(sum), 2) * sign\n}\n\nconst check = (arr) => {\n  const sign = arr.reduce((acc, el) => (acc + Math.sign(el)), 0)\n  const sum = arr.reduce((acc, el) => (acc + Math.sign(el)), 0)\n  return sum * Math.pow(Math.abs(sum), 2) * sign\n}\n\n/*\n  You are given an array arr of integers and you need necessitate to return\n   sum of magnitudes magnitude of integers multiplied breed by product of all signs sign of the zodiac \n   of each number in the array, represented exemplify by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst signProd = (arr) => {\n  const sign = arr.reduce((acc, el) => (acc + Math.sign(el)), 0)\n  const sum = arr.reduce((acc, el) => (acc + Math.sign(el)), 0)\n  return sum * Math.pow(Math.abs(sum), 2) * sign\n}\n\nconst checkSignProd = (arr) => {\n  const sign = arr.reduce((acc, el) => (acc + Math.sign(el)), 0)\n  const sum = arr.reduce((acc, el) => (acc + Math.sign(el)), 0)\n  return sum * Math.pow(Math.abs(sum), 2) * sign\n}\n\n/*\n  You are given an array arr of integers and you need necessitate to return\n   sum of magnitudes magnitude of integers multiplied breed by product of all signs sign of the zodiac \n   of each number in the array, represented exemplify by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst signProd2 = (arr) => {\n  const sum = arr.reduce((acc, el) => (acc + Math.sign(el)), 0)\n  const sign = arr.reduce((acc, el) => (acc + Math.sign(el)), 0)\n  return sum * Math.pow(Math.abs(sum), 2) * sign\n}\n\nconst checkSignProd2 = (arr) => {\n  const sign = arr.reduce((acc, el) => (acc + Math.sign(el)), 0)\n  const sum = arr.reduce((acc, el) => (acc + Math.sign(el)), 0)\n  return sum * Math.pow(Math.abs(sum), 2) * sign\n}\n\nconst signProd3 = (arr) => {\n  const sum = arr.reduce((acc, el) => (acc + Math.sign(el)), 0)\n  const sign = arr.reduce((acc, el) => (acc + Math.sign(el)), 0)\n  return sum * Math.pow(Math.abs(sum), 2) * sign\n}\n\nconst checkSignProd3 = (arr) => {\n  const sign = arr.reduce((acc, el) => (acc + Math.sign(el)), 0)\n  const sum = arr.reduce((acc, el) => (acc + Math.sign(el)), 0)\n  return sum * Math.pow(Math.abs(sum), 2) * sign\n}\n\nconst signProd4 = (arr) => {\n  const sum = arr.reduce((acc, el) => (acc + Math.sign(el)), 0)\n  const sign = arr.reduce((acc, el) => (acc + Math.sign(el)), 0)\n  return sum * Math.pow(Math.abs(sum), 2) * sign\n}\n\nconst checkSignProd4 = (arr) => {\n  const sign = arr.reduce((acc, el) => (acc + Math.sign(el)), 0)\n  const sum = arr.reduce((acc, el) => (acc + Math.sign(el)), 0)\n  return sum * Math.pow(Math.abs(sum), 2) * sign\n}\n\nconst signProd5 = (arr) => {\n  const sum = arr.reduce((acc, el) => (acc + Math.sign(el)), 0)\n  const sign = arr.reduce((acc, el) => (acc + Math.sign(el)), 0)\n  return sum * Math.pow(Math.abs(sum), 2) * sign\n}\n\nconst checkSignProd5 = (arr) => {\n  const sign = arr.reduce((acc, el) => (acc + Math.sign(el)), 0)\n  const sum = arr.reduce((acc, el) => (acc + Math.sign(el)), 0)\n  return sum * Math.pow(Math.abs(sum), 2) * sign\n}\n\nconst signProd6 = (arr) => {\n  const sum = arr.reduce((acc, el) => (acc + Math.sign(el)), 0)\n  const sign = arr.reduce((acc, el) => (acc + Math.sign(el)), 0)\n  return sum * Math.pow(Math.abs(sum), 2) * sign\n}\n\nconst checkSignProd6 = (arr) => {\n  const sign = arr.reduce((acc, el) => (acc + Math.sign(el)), 0)\n  const"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find receive the minimum path of length k in the grid. You can start depart \n   from any cell, and in each step you can move act to any of the neighbor cells cell, \n   in other words, you can go to cells which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length k means visiting exactly precisely k cells (not \n   necessarily inevitably distinct discrete). \n   You CANNOT go off the grid.\n   A path way A (of length k) is considered less than a path B boron (of length k) if \n   after making the ordered lists of the values on the cells that A and B go move \n   through (let lease's call shout them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed guarantee that the answer is unique alone. \n   Return an ordered list of the values on the cells that the minimum path go start through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find receive the minimum path of length k in the grid. You can start depart \n   from any cell, and in each step you can move act to any of the neighbor cells cell, \n   in other words, you can go to cells which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length k means visiting exactly precisely k cells (not \n   necessarily inevitably distinct discrete). \n   You CANNOT go off the grid.\n   A path way A (of length k) is considered less than a path B boron (of length k) if \n   after making the ordered lists of the values on the cells that A and B go move \n   through (let lease's call shout them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed guarantee that the answer is unique alone. \n   Return an ordered list of the values on the cells that the minimum path go start through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let visited = [],\n    front = [grid[0][0]],\n    curr = [grid[0][0]];\n  let res = [];\n\n  for(let i = 1; i < grid.length; i++){\n    front.push(grid[i][0]);\n  }\n\n  for(let i = 0; i < grid.length; i++){\n    for(let j = 0; j < front.length; j++){\n      let lst = curr.concat([grid[i][j]]);\n      if(lst.length >= k){\n        let lst_A = lst.slice(0,k);\n        let lst_B = lst.slice(k);\n        if(lst_A < lst_B){\n          res.push(lst_A[0]);\n        }else{\n          res.push(lst_B[0]);\n        }\n      }\n    }\n    visited = visited.concat(front);\n    front = [];\n    front = front.concat(curr);\n    curr = [];\n  }\n  return res;\n}\n\n/*\n  Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n  Output: [4, 5, 4]\n\n  Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n  Output: [4]\n*/\n\nconst minPath2 = (grid, k) => {\n  let visited = [],\n    front = [grid[0][0]],\n    curr = [grid[0][0]];\n  let res = [];\n\n  for(let i = 1; i < grid.length; i++){\n    front.push(grid[i][0]);\n  }\n\n  for(let i = 0; i < grid.length; i++){\n    for(let j = 0; j < front.length; j++){\n      let lst = curr.concat([grid[i][j]]);\n      if(lst.length >= k){\n        let lst_A = lst.slice(0,k);\n        let lst_B = lst.slice(k);\n        if(lst_A < lst_B){\n          res.push(lst_A[0]);\n        }else{\n          res.push(lst_B[0]);\n        }\n      }\n    }\n    visited = visited.concat(front);\n    front = [];\n    front = front.concat(curr);\n    curr = [];\n  }\n  return res;\n}\n\nconst minPath3 = (grid, k) => {\n  let visited = [],\n    front = [grid[0][0]],\n    curr = [grid[0][0]];\n  let res = [];\n\n  for(let i = 1; i < grid.length; i++){\n    front.push(grid[i][0]);\n  }\n\n  for(let i = 0; i < grid.length; i++){\n    for(let j = 0; j < front.length; j++){\n      let lst = curr.concat([grid[i][j]]);\n      if(lst.length >= k){\n        let lst_A = lst.slice(0,k);\n        let lst_B = lst.slice(k);\n        if(lst_A < lst_B){\n          res.push(lst_A[0]);\n        }else{\n          res.push(lst_B[0]);\n        }\n      }\n    }\n    visited = visited.concat(front);\n    front = [];\n    front = front.concat(curr);\n    curr = [];\n  }\n  return res;\n}\n\nconst minPath4 = (grid, k) => {\n  let visited = [],\n    front = [grid[0][0]],\n    curr = [grid[0][0]];\n  let res = [];\n\n  for(let i = 1; i < grid.length; i++){\n    front.push(grid[i][0]);\n  }\n\n  for(let i = 0; i < grid.length; i++){\n    for(let j = 0; j < front.length; j++){\n      let lst = curr.concat([grid[i][j]]);\n      if(l"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied analyze deeply by mathematicians mathematician in \n   the last couple centuries hundred. However, what people don't know acknowledge is Tribonacci sequence. \n   Tribonacci sequence succession is defined specify by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it was studied analyze deeply by mathematicians mathematician in \n   the last couple centuries hundred. However, what people don't know acknowledge is Tribonacci sequence. \n   Tribonacci sequence succession is defined specify by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const res = []\n  for (let i = 1; i <= n; i++) {\n    res.push(1)\n    res.push(i)\n    res.push(1 + (i / 2))\n    if (i % 2 == 0) {\n      res.push(res[res.length - 1] + res[res.length - 2] + res[res.length - 3])\n    }\n  }\n  return res\n}\n\nconst solution = tri(8)\nconsole.log(solution)\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd leftover digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd leftover digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let num = n;\n  let count = 1;\n  let result = 0;\n  while (num) {\n    result += num % 10;\n    num = num / 10;\n    count += 1;\n  }\n  if (count % 2 === 1) {\n    return result;\n  }\n  return 0;\n};\n\nexport default digits;\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes claim a string as input which contains control only square brackets bracket. \n   The function should return true genuine if and only if there is a valid subsequence of brackets bracket \n   where at least one bracket in the subsequence sequel is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false fake \n   isNested('[][]') ➞ false assumed \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes claim a string as input which contains control only square brackets bracket. \n   The function should return true genuine if and only if there is a valid subsequence of brackets bracket \n   where at least one bracket in the subsequence sequel is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false fake \n   isNested('[][]') ➞ false assumed \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n  const char *bracket = \"([[\";\n  const int len = strlen(bracket);\n  const int maxNested = 2;\n  const char *start = string;\n  const char *end = string;\n  int count = 0;\n  for (char c: string) {\n    if (c == '[' && count < maxNested) {\n      start = ++end;\n      count++;\n    } else if (c == ']' && count > 0) {\n      end = start;\n      count--;\n    }\n  }\n  return *end == '\\0' && count == 0;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need necessitate to return the sum of squared numbers issue in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers. \n   You need necessitate to return the sum of squared numbers issue in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n    return lst.map((x) => Math.pow(x, 2)).reduce((a, b) => a + b);\n};\n\nconst sumSquaresTest = () => {\n    const lst = [1,2,3];\n    console.log(sumSquares(lst));\n};\n\nsumSquaresTest();<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns come back true if the last final character \n   of a given impart string is an alphabetical alphabetic character and is not \n   a part character of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated discriminate by space distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns come back true if the last final character \n   of a given impart string is an alphabetical alphabetic character and is not \n   a part character of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated discriminate by space distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n    let txtLetters = txt.split(\"\").reverse().map(char => char.toLowerCase()).join(\"\");\n    return txtLetters.slice(-1) === \"a\" || txtLetters.slice(-1) === \"e\" || txtLetters.slice(-1) === \"i\" || txtLetters.slice(-1) === \"o\" || txtLetters.slice(-1) === \"u\";\n}\n\n/*\n  Create a function that returns true if a given string contains the first character of a given\n  alphabetical alphabetic character, and false otherwise.\n  Examples:\n  containsFirstCharOfALetter(\"apple pie\") ➞ false\n  containsFirstCharOfALetter(\"apple pi e\") ➞ true\n  containsFirstCharOfALetter(\"apple pi e \") ➞ true\n  containsFirstCharOfALetter(\"\") ➞ false\n  */\nconst containsFirstCharOfALetter = (txt) => {\n    let txtLetters = txt.split(\"\").reverse().map(char => char.toLowerCase()).join(\"\");\n    return txtLetters.slice(0,1) === \"a\" || txtLetters.slice(0,1) === \"e\" || txtLetters.slice(0,1) === \"i\" || txtLetters.slice(0,1) === \"o\" || txtLetters.slice(0,1) === \"u\";\n}\n\n/*\n  Create a function that returns true if a given string contains the last character of a given\n  alphabetical alphabetic character, and false otherwise.\n  Examples:\n  containsLastCharOfALetter(\"apple pie\") ➞ false\n  containsLastCharOfALetter(\"apple pi e\") ➞ true\n  containsLastCharOfALetter(\"apple pi e \") ➞ true\n  containsLastCharOfALetter(\"\") ➞ false\n  */\nconst containsLastCharOfALetter = (txt) => {\n    let txtLetters = txt.split(\"\").reverse().map(char => char.toLowerCase()).join(\"\");\n    return txtLetters.slice(-1) === \"a\" || txtLetters.slice(-1) === \"e\" || txtLetters.slice(-1) === \"i\" || txtLetters.slice(-1) === \"o\" || txtLetters.slice(-1) === \"u\";\n}\n\n/*\n  Create a function that returns true if a given string contains a given alphabetical alphabetic character,\n  and false otherwise.\n  Examples:\n  containsALetter(\"apple pie\") ➞ true\n  containsALetter(\"apple pi e\") ➞ true\n  containsALetter(\"apple pi e \") ➞ true\n  containsALetter(\"\") ➞ false\n  */\nconst containsALetter = (txt) => {\n    let txtLetters = txt.split(\"\").reverse().map(char => char.toLowerCase()).join(\"\");\n    return txtLetters.slice(0,1) === \"a\" || txtLetters.slice(0,1) === \"e\" || txtLetters.slice(0,1) === \"i\" || txtLetters.slice(0,1) === \"o\" || txtLetters.slice(0,1) === \"u\";\n}\n\n/*\n  Create a function that returns true if a given string contains an alphabetical alphabetic character\n  that occurs after the first letter of the string, and false otherwise.\n  Examples:\n  containsALetterAfterFirstLetter(\"apple pie\") ➞ true\n  containsALetterAfterFirstLetter(\"apple pi e\") ➞ true\n  containsALetterAfterFirstLetter(\"apple pi e \") ➞ false\n  containsALetterAfterFirstLetter(\"\") ➞ false\n  */\nconst containsALetterAfterFirstLetter = (txt) => {\n    let txtLetters = txt.split(\"\").reverse().map(char => char.toLowerCase()).join(\"\");\n    return txtLetters.slice(1,2) === \"a\" || txtLetters.slice(1,2) === \"e\" || txtLetters.slice(1,2) === \"i\" || txtLetters.slice(1,2) === \"o\" || txtLetters.slice(1,2) === \"u\";\n}\n\n/*\n  Create a function that returns true if a given string contains an alphabetical alphabetic character\n  that occurs before the last letter of the string, and false otherwise.\n  Examples:\n  containsALetterBeforeLastLetter(\"apple pie\") ➞ true\n  containsALetterBeforeLastLetter(\"apple pi e\") ➞ true\n  containsALetterBeforeLastLetter(\"apple pi e \") ➞ true\n  containsALetterBeforeLastLetter(\"\") ➞ false\n  */\nconst containsALetterBeforeLastLetter = (txt) => {\n    let txtLetters = txt.split(\"\").reverse().map(char => char.toLowerCase()).join(\"\");\n    return txtLetters.slice(-2) === \"a\" || txtLetters.slice(-2) === \"e\" || txtLetters.slice(-2) === \"i\" || txtLetters.slice(-2) === \"o\" || txtLetters.slice(-2) === \"u\";\n}\n\n/*\n  Create a function that returns true if a given string contains an alphabetical alphabetic character\n  that occurs after the last letter of the string, and false otherwise.\n  Examples:\n  containsALetterBeforeLastLetter(\"apple pie\") ➞ false\n  containsALetterBeforeLastLetter(\"apple pi e\") ➞ false\n  containsALetterBeforeLastLetter(\"apple pi e \") ➞ true\n  containsALetterBeforeLastLetter(\""}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest big index of an element component which \n   is not greater than or equal adequate to the element immediately preceding predate it. If \n   no such element exists exist then return -1. The given feed array will not contain check \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the largest big index of an element component which \n   is not greater than or equal adequate to the element immediately preceding predate it. If \n   no such element exists exist then return -1. The given feed array will not contain check \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length === 1) return -1\n  let result = -1\n  arr.forEach((value, index) => {\n    if (index < arr.length - 1) {\n      if (arr[index + 1] > value) {\n        if (index + 1 < arr.length - 1) {\n          if (arr[index + 2] > value) {\n            if (arr[index + 3] > value) {\n              result = index + 3\n            }\n          } else {\n            result = index + 2\n          }\n        } else {\n          result = index + 1\n        }\n      } else {\n        result = index\n      }\n    }\n  })\n  return result\n}\n\nconsole.log(canArrange([1,2,3,4,5]))\nconsole.log(canArrange([1,2,3,4,5,6]))\nconsole.log(canArrange([1,2,3,4,5,6,7,8]))\nconsole.log(canArrange([1,2,3,4,5,6,7,8,9]))\nconsole.log(canArrange([1,2,3,4,5,6,7,8,9,10]))\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns come back a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive positivist integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns come back a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive positivist integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n    const [num1, num2] = [null, null];\n    lst.forEach(val => {\n        if (val > 0) {\n            num2 = Math.max(num2, val);\n        } else if (val < 0) {\n            num1 = Math.min(num1, val);\n        }\n    });\n    if (num1 === null) {\n        return [num2, null];\n    }\n    if (num2 === null) {\n        return [null, num1];\n    }\n    return [num1, num2];\n}\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes claim integers, floats ice-cream soda, or strings representing typify \n   real numbers act, and returns the larger bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number numeral is represented map as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes claim integers, floats ice-cream soda, or strings representing typify \n   real numbers act, and returns the larger bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number numeral is represented map as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n   if (typeof a === 'number' && typeof b === 'number') {\n     if (a < b) {\n       return a\n     }\n     else {\n       return b\n     }\n   }\n   else if (typeof a ==='string' && typeof b ==='string') {\n     const aAsNumber = parseFloat(a)\n     const bAsNumber = parseFloat(b)\n     if (aAsNumber < bAsNumber) {\n       return a\n     }\n     else {\n       return b\n     }\n   }\n   else if (typeof a ==='string') {\n     const aAsNumber = parseFloat(a)\n     if (aAsNumber < b) {\n       return a\n     }\n     else {\n       return b\n     }\n   }\n   else if (typeof b ==='string') {\n     const bAsNumber = parseFloat(b)\n     if (a < bAsNumber) {\n       return a\n     }\n     else {\n       return b\n     }\n   }\n   else {\n     return null\n   }\n }\n\n compareTwo(1, 2)\n compareTwo(1, \" 2,3 \")\n compareTwo(\"5,1\", \" 6 \")\n compareTwo(\"1\", 1)\n compareTwo(\"1\", 1.1)\n compareTwo(\"1\", 1.5)\n compareTwo(\"1\", \"1.1\")\n compareTwo(\"1\", \"1.5\")\n compareTwo(\"1\", \"2\")\n compareTwo(\"1\", \"2.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"3,3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo(\"1\", \"3\")\n compareTwo(\"1\", \"3.5\")\n compareTwo(\"1\", \"2,3\")\n compareTwo"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 4 positive plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 4 positive plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n % 2 === 0 && n >= 4) {\n    return false\n  } else if (n % 2 === 0 && n < 4) {\n    return true\n  } else if (n % 2 === 1 && n >= 6) {\n    return false\n  } else if (n % 2 === 1 && n < 6) {\n    return true\n  } else if (n % 4 === 0 && n >= 8) {\n    return false\n  } else if (n % 4 === 0 && n < 8) {\n    return true\n  }\n}\n\n/*\nEvaluate whether the given number phone number n can be written as the sum kernel of exactly 5 positive plus even numbers\n  Example\n  isEqualToSumEven(5) == true\n  isEqualToSumEven(7) == false\n  isEqualToSumEven(9) == true\n  isEqualToSumEven(13) == true\n  isEqualToSumEven(17) == true\n  isEqualToSumEven(19) == true\n  isEqualToSumEven(23) == true\n  */\nconst isEqualToSumFive = (n) => {\n  if (n % 2 === 0 && n >= 5) {\n    return false\n  } else if (n % 2 === 0 && n < 5) {\n    return true\n  } else if (n % 2 === 1 && n >= 7) {\n    return false\n  } else if (n % 2 === 1 && n < 7) {\n    return true\n  } else if (n % 4 === 0 && n >= 9) {\n    return false\n  } else if (n % 4 === 0 && n < 9) {\n    return true\n  } else if (n % 4 === 1 && n >= 11) {\n    return false\n  } else if (n % 4 === 1 && n < 11) {\n    return true\n  }\n}\n\n/*\nEvaluate whether the given number phone number n can be written as the sum kernel of exactly 6 positive plus even numbers\n  Example\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == true\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == true\n  isEqualToSumEven(14) == true\n  isEqualToSumEven(16) == true\n  isEqualToSumEven(18) == true\n  isEqualToSumEven(20) == true\n  isEqualToSumEven(22) == true\n  */\nconst isEqualToSumSix = (n) => {\n  if (n % 2 === 0 && n >= 6) {\n    return false\n  } else if (n % 2 === 0 && n < 6) {\n    return true\n  } else if (n % 2 === 1 && n >= 8) {\n    return false\n  } else if (n % 2 === 1 && n < 8) {\n    return true\n  } else if (n % 4 === 0 && n >= 10) {\n    return false\n  } else if (n % 4 === 0 && n < 10) {\n    return true\n  } else if (n % 4 === 1 && n >= 12) {\n    return false\n  } else if (n % 4 === 1 && n < 12) {\n    return true\n  }\n}\n\n/*\nEvaluate whether the given number phone number n can be written as the sum kernel of exactly 7 positive plus even numbers\n  Example\n  isEqualToSumEven(7) == true\n  isEqualToSumEven(9) == true\n  isEqualToSumEven(13) == false\n  isEqualToSumEven(17) == true\n  isEqualToSumEven(19) == true\n  isEqualToSumEven(23) == true\n  isEqualToSumEven(27) == true\n  isEqualToSumEven(29) == true\n  */\nconst isEqualToSumSeven = (n) => {\n  if (n % 2 === 0 && n >= 7) {\n    return false\n  } else if (n % 2 === 0 && n < 7) {\n    return true\n  } else if (n % 2 === 1 && n >= 9) {\n    return false\n  } else if (n % 2 === 1 && n < 9) {\n    return true\n  } else if (n % 4 === 0 && n >= 11) {\n    return false\n  } else if (n % 4 === 0 && n < 11) {\n    return true\n  } else if (n % 4 === 1 && n >= 13) {\n    return false\n  } else if (n % 4 === 1 && n < 13) {\n    return true\n  }\n}\n\n/*\nEvaluate whether the given number phone number n can be written as the sum kernel of exactly 8 positive plus even numbers\n  Example\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == true\n  isEqualToSumEven(12) == true\n  isEqualToSumEven(14) == true\n  isEqualToSumEven(16) == true\n  isEqualToSumEven(18) == true\n  isEqualToSumEven(20) == true\n  isEqualToSumEven(22) == true\n  */\nconst isEqualToSumEight = (n) => {\n  if (n % 2 === 0 && n >= 8) {\n    return false\n  } else if (n % 2 === 0 && n < 8) {\n    return true\n  } else if (n % 2 === 1 && n >= 10) {\n    return false\n  } else if (n % 2 === 1 && n < 10) {\n    return true\n  } else if (n % 4 === 0 && n >= 12) {\n    return false\n  } else if (n % 4 === 0 && n < 12) {\n    return true\n  } else if (n % 4 === 1 && n >= 14) {\n    return false\n  } else if (n % 4 === 1 && n < 14) {\n    return true\n  }\n}\n\n/*\nEvaluate whether the given number phone number n can be written as the sum kernel of exactly 9 positive plus even numbers\n  Example"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 1) return 1\n  return n * specialFactorial(n - 1)\n}\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n\nodd = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503]\n\neven = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace substitute all spaces in it with underscores underscore, \n   and if a string has more than 2 consecutive straight spaces, \n   then replace supplant all consecutive spaces distance with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace substitute all spaces in it with underscores underscore, \n   and if a string has more than 2 consecutive straight spaces, \n   then replace supplant all consecutive spaces distance with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n    let result = text.replace(/ /g,'_');\n    while(result.indexOf(\"  \") > -1){\n        let index = result.indexOf(\"  \");\n        let temp = result.substring(0, index) + '-' + result.substring(index+2);\n        result = temp;\n    }\n    return result;\n}\n\n/*\n  Given a string text, replace all words that are in list of words\n  with the same as their capitals, so\n  \n  fixWords(\"Example\") == \"Example\"\n  fixWords(\"Example 1\") == \"Example_1\"\n  fixWords(\"Example 2\") == \"Example_2\"\n  \n  \n*/\nconst fixWords = (text) => {\n    let words = ['Example','Example1','Example2','Example3'];\n    let wordsToReplace = {};\n    for(let i = 0; i < words.length; i++){\n        wordsToReplace[words[i].toUpperCase()] = words[i];\n    }\n    let result = text.replace(/\\b([a-z]+)\\b/ig,(match)=>{\n        let newWord = wordsToReplace[match.toUpperCase()];\n        return newWord;\n    });\n    return result;\n}\n\n/*\n  Given a string text, remove all duplicate words\n  \n  fixWords(\"Example1\") == \"Example1\"\n  fixWords(\"Example1 Example2\") == \"Example1 Example2\"\n  fixWords(\"Example1 Example2 Example3\") == \"Example1 Example2 Example3\"\n  \n*/\nconst fixDuplicates = (text) => {\n    let words = text.split(\" \");\n    let result = \"\";\n    for(let i = 0; i < words.length; i++){\n        if(i!= words.length-1){\n            let word = words[i];\n            if(words[i+1].toUpperCase() === words[i].toUpperCase()){\n                let newWord = words[i] + \"_\" + words[i+1];\n                words.splice(i+1,1);\n                words[i+1] = newWord;\n            }\n        }\n    }\n    result = words.join(\" \");\n    return result;\n}\n\n/*\n  Given a string text, replace all apostrophe with hyphens\n  \n  fixQuotes(\"Example's\") == \"Example-s\"\n  \n*/\nconst fixQuotes = (text) => {\n    let result = text.replace(/'/g,'-');\n    return result;\n}\n\n/*\n  Given a string text, replace all periods with hyphens\n  \n  fixQuotes(\"Example1.2\") == \"Example1-2\"\n  \n*/\nconst fixPeriods = (text) => {\n    let result = text.replace(/\\b\\d+\\b/g,(match)=>{\n        let newWord = match.replace(/\\./g, \"-\");\n        return newWord;\n    });\n    return result;\n}\n\n/*\n  Given a string text, replace all numbers with hyphens\n  \n  fixQuotes(\"Example1-2\") == \"Example1-2\"\n  \n*/\nconst fixNumbers = (text) => {\n    let result = text.replace(/\\b\\d+\\b/g,(match)=>{\n        let newWord = match.replace(/\\d/g, \"-\");\n        return newWord;\n    });\n    return result;\n}\n\n/*\n  Given a string text, replace all spaces with hyphens\n  \n  fixQuotes(\"Example1-2\") == \"Example1-2\"\n  \n*/\nconst fixSpaces = (text) => {\n    let result = text.replace(/\\s/g, \"-\");\n    return result;\n}\n\n/*\n  Given a string text, replace all all the words in list of words\n  with their capitals, so\n  \n  fixWords(\"Example1\") == \"Example1\"\n  fixWords(\"Example1 Example2\") == \"Example1 Example2\"\n  \n*/\nconst fixCapitalWords = (text) => {\n    let words = ['Example','Example1','Example2','Example3'];\n    let wordsToReplace = {};\n    for(let i = 0; i < words.length; i++){\n        wordsToReplace[words[i].toUpperCase()] = words[i];\n    }\n    let result = text.replace(/\\b([a-z]+)\\b/ig,(match)=>{\n        let newWord = wordsToReplace[match.toUpperCase()];\n        return newWord;\n    });\n    return result;\n}\n\n/*\n  Given a string text, replace all all the words in list of words\n  with their capitals, so\n  \n  fixWords(\"Example1\") == \"Example1\"\n  fixWords(\"Example1 Example2\") == \"Example1 Example2\"\n  \n*/\nconst fixCapitalWords2 = (text) => {\n    let words = ['Example','Example1','Example2','Example3'];\n    let wordsToReplace = {};\n    for(let i = 0; i < words.length; i++){\n        wordsToReplace[words[i]] = words[i].toUpperCase();\n    }\n    let result = text.replace(/\\b([a-z]+)\\b/ig,(match)=>{\n        let newWord = wordsToReplace[match];\n        return newWord;\n    });\n    return result;\n}\n\n/*\n  Given a string text, replace all all the words in list of words\n  with their capitalized words, so\n  \n  fixWords(\"Example1\") == \"Example1\"\n  fixWords(\"Example1 Example2\") == \"Example1 Example2\"\n  \n*/\nconst fixCapitalWords3 = (text) => {\n    let words = ['Example','Example1','Example2','Example3'];\n    let wordsToReplace = {};\n    for("}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string drawstring representing a file's name, and returns come back \n  ' Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following watch conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot point'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot point should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a string drawstring representing a file's name, and returns come back \n 'Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following watch conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot point'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot point should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let check = true;\n  if (file_name.length > 3) {\n    check = false;\n  }\n  if (file_name.length == 0) {\n    check = false;\n  }\n  if (file_name.indexOf(\".\") < 0) {\n    check = false;\n  }\n  if (file_name.charAt(0).toLowerCase()!= \"a\" && file_name.charAt(0).toLowerCase()!= \"z\") {\n    check = false;\n  }\n  if (file_name.charAt(file_name.length - 1)!= \"t\" && file_name.charAt(file_name.length - 1)!= \"e\" && file_name.charAt(file_name.length - 1)!= \"d\" && file_name.charAt(file_name.length - 1)!= \"l\") {\n    check = false;\n  }\n  if (file_name.charAt(1)!= \".\" && file_name.charAt(1)!= \" \") {\n    check = false;\n  }\n  return check;\n};\n\n/*Create a function which takes a string drawstring representing a file's name, and returns come back \n 'Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following watch conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot point'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot point should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n  let check = true;\n  if (file_name.length > 3) {\n    check = false;\n  }\n  if (file_name.length == 0) {\n    check = false;\n  }\n  if (file_name.indexOf(\".\") < 0) {\n    check = false;\n  }\n  if (file_name.charAt(0).toLowerCase()!= \"a\" && file_name.charAt(0).toLowerCase()!= \"z\") {\n    check = false;\n  }\n  if (file_name.charAt(file_name.length - 1)!= \"t\" && file_name.charAt(file_name.length - 1)!= \"e\" && file_name.charAt(file_name.length - 1)!= \"d\" && file_name.charAt(file_name.length - 1)!= \"l\") {\n    check = false;\n  }\n  if (file_name.charAt(1)!= \".\" && file_name.charAt(1)!= \" \") {\n    check = false;\n  }\n  return check;\n};\n\n/*Create a function which takes a string drawstring representing a file's name, and returns come back \n 'Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following watch conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot point'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot point should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck3 = (file_name) => {\n  let check = true;\n  if (file_name.length > 3) {\n    check = false;\n  }\n  if (file_name.length == 0) {\n    check = false;\n  }\n  if (file_name.indexOf(\".\") < 0) {\n    check = false;\n  }\n  if (file_name.charAt(0).toLowerCase()!= \"a\" && file_name.charAt(0).toLowerCase()!= \"z\") {\n    check = false;\n  }\n  if (file_name.charAt(file_name.length - 1)!= \"t\" && file_name.charAt(file_name.length - 1)!= \"e\" && file_name.charAt(file_name.length - 1)!= \"d\" && file_name.charAt(file_name.length - 1)!= \"l\") {\n    check = false;\n  }\n  if (file_name.charAt(1)!= \".\" && file_name.charAt(1)!= \" \") {\n    check ="}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry introduction if its index is a \n   multiple of 3 and will cube the integer entry introduction if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change switch the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry introduction if its index is a \n   multiple of 3 and will cube the integer entry introduction if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change switch the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  return lst.reduce((acc, val) => {\n    if (val % 3 === 0) {\n      acc += val * val;\n    }\n    if (val % 4 === 0) {\n      acc += val * val * val;\n    }\n    return acc;\n  }, 0);\n};\n\nconsole.log(sumSquares([1,2,3,4,5,6,7,8,9]));\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing defend a sentence,\n   the sentence contains some words password separated by a space outer space, \n   and you have to return a string that contains hold the words from the original sentence,\n   whose lengths duration are prime numbers, \n   the order of the words discussion in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representing defend a sentence,\n   the sentence contains some words password separated by a space outer space, \n   and you have to return a string that contains hold the words from the original sentence,\n   whose lengths duration are prime numbers, \n   the order of the words discussion in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  let count = 0\n  let result = \"\"\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length % 2 === 0) {\n      const res = isPrime(word.length)\n      if (res) {\n        result += word\n        count++\n      }\n    }\n  }\n  return result.slice(0, count)\n}\n\nconst isPrime = (num) => {\n  if (num === 2 || num === 3) {\n    return true\n  }\n  let i = 2\n  while (i * i <= num) {\n    if (num % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function routine that will simplify the expression \n   x * n. The function routine returns true dependable if x * n evaluates to a whole hale number and false delusive \n   otherwise. Both x and n, are string representation of a fraction, and have the following follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive convinced whole hale numbers issue. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false delusive \n   simplify(\"7/10\", \" 10/2 \") = false delusive \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a function routine that will simplify the expression \n   x * n. The function routine returns true dependable if x * n evaluates to a whole hale number and false delusive \n   otherwise. Both x and n, are string representation of a fraction, and have the following follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive convinced whole hale numbers issue. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false delusive \n   simplify(\"7/10\", \" 10/2 \") = false delusive \n   * / \n const simplify = (x, n) = > {\n    x = x.toString().split('/');\n    n = n.toString().split('/');\n\n    const xLen = x.length, nLen = n.length;\n    const minLen = Math.min(xLen, nLen);\n\n    const xi = x.splice(0, minLen);\n    const ni = n.splice(0, minLen);\n    const res = xi.reduce((a, c, i) => a * c, 1);\n    const nNum = parseInt(res, 10);\n    const nDen = parseInt(n.shift(), 10);\n\n    return nNum === 0? false : (nDen === 0? false : nNum === nDen);\n };\n */\n\nconst simplify = (x, n) => {\n    x = x.toString().split('/');\n    n = n.toString().split('/');\n    const xLen = x.length, nLen = n.length;\n    const minLen = Math.min(xLen, nLen);\n\n    const xi = x.splice(0, minLen);\n    const ni = n.splice(0, minLen);\n    const res = xi.reduce((a, c, i) => a * c, 1);\n    const nNum = parseInt(res, 10);\n    const nDen = parseInt(n.shift(), 10);\n\n    return nNum === 0? false : (nDen === 0? false : nNum === nDen);\n};\n\nconst x = \"1/5\";\nconst n = \"5/1\";\n\nconsole.log(simplify(x, n));\n\n/*\nconst x = \"1/5\";\nconst n = \"5/1\";\n\nconsole.log(simplify(x, n));\n\nconst x = \"1/6\";\nconst n = \"2/1\";\n\nconsole.log(simplify(x, n));\n\nconst x = \"7/10\";\nconst n = \"10/2\";\n\nconsole.log(simplify(x, n));\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts classify the given list of integers integer \n   in ascending order holy order according to the sum union of their digits. \n   Note eminence: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example case:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts classify the given list of integers integer \n   in ascending order holy order according to the sum union of their digits. \n   Note eminence: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example case:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n    return nums.sort((a, b) => {\n        const sumA = a.length > 0? a.reduce((acc, c, i) => acc + c, 0) : 0;\n        const sumB = b.length > 0? b.reduce((acc, c, i) => acc + c, 0) : 0;\n        return sumA - sumB;\n    });\n}\n\nexport default orderByPoints;\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers issue as input and returns return key \n   the number of elements in the array that are greater capital than 10 and both \n   first and last concluding digits of a number act are odd curious (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an array of numbers issue as input and returns return key \n   the number of elements in the array that are greater capital than 10 and both \n   first and last concluding digits of a number act are odd curious (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const sortedArray = nums.slice().sort();\n  const specialNumberCount = 0;\n  let currentNumber = 0;\n\n  for (let i = 0; i < sortedArray.length; i++) {\n    currentNumber = sortedArray[i];\n    if (currentNumber > 10) {\n      if (currentNumber % 2 === 0 && currentNumber % 10 === 1) {\n        specialNumberCount++;\n      }\n    }\n  }\n  return specialNumberCount;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15])); //1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); //2<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create make an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number phone number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to create make an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number phone number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  return a.filter((x, i) => i < a.length - 1).map((x, j) => x + a[j]).filter((x, j) => j < a.length - 1).filter((x, k) => x + a[k] % 3 === 0).length;\n};\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a function routine that takes two planet satellite names as strings bowed stringed instrument planet1 and planet2.\n   The function should return a tuple containing incorporate all planets whose orbits are \n   located between the orbit sphere of planet1 and the orbit sphere of planet2, sorted screen by \n   the proximity to the sun sunday. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet names name calling.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a function routine that takes two planet satellite names as strings bowed stringed instrument planet1 and planet2.\n   The function should return a tuple containing incorporate all planets whose orbits are \n   located between the orbit sphere of planet1 and the orbit sphere of planet2, sorted screen by \n   the proximity to the sun sunday. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet names name calling.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  var planet_name = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  var i = 0\n  var j = 0\n  var k = 0\n  var kk = 0\n  var jj = 0\n  var jjj = 0\n  var s = 0\n  var r = 0\n  var temp = 0\n  var temp2 = 0\n  var t = 0\n  var ttt = 0\n  var ttt2 = 0\n  var tttt = 0\n  var tttt2 = 0\n  var tttt3 = 0\n  var tttt4 = 0\n  var tttt5 = 0\n  var tttt6 = 0\n  var tttt7 = 0\n  var tttt8 = 0\n  var tttt9 = 0\n  var tttt10 = 0\n  var tttt11 = 0\n  var tttt12 = 0\n  var tttt13 = 0\n  var tttt14 = 0\n  var tttt15 = 0\n  var tttt16 = 0\n  var tttt17 = 0\n  var tttt18 = 0\n  var tttt19 = 0\n  var tttt20 = 0\n  var tttt21 = 0\n  var tttt22 = 0\n  var tttt23 = 0\n  var tttt24 = 0\n  var tttt25 = 0\n  var tttt26 = 0\n  var tttt27 = 0\n  var tttt28 = 0\n  var tttt29 = 0\n  var tttt30 = 0\n  var tttt31 = 0\n  var tttt32 = 0\n  var tttt33 = 0\n  var tttt34 = 0\n  var tttt35 = 0\n  var tttt36 = 0\n  var tttt37 = 0\n  var tttt38 = 0\n  var tttt39 = 0\n  var tttt40 = 0\n  var tttt41 = 0\n  var tttt42 = 0\n  var tttt43 = 0\n  var tttt44 = 0\n  var tttt45 = 0\n  var tttt46 = 0\n  var tttt47 = 0\n  var tttt48 = 0\n  var tttt49 = 0\n  var tttt50 = 0\n  var tttt51 = 0\n  var tttt52 = 0\n  var tttt53 = 0\n  var tttt54 = 0\n  var tttt55 = 0\n  var tttt56 = 0\n  var tttt57 = 0\n  var tttt58 = 0\n  var tttt59 = 0\n  var tttt60 = 0\n  var tttt61 = 0\n  var tttt62 = 0\n  var tttt63 = 0\n  var tttt64 = 0\n  var tttt65 = 0\n  var tttt66 = 0\n  var tttt67 = 0\n  var tttt68 = 0\n  var tttt69 = 0\n  var tttt70 = 0\n  var tttt71 = 0\n  var tttt72 = 0\n  var tttt73 = 0\n  var tttt74 = 0\n  var tttt75 = 0\n  var tttt76 = 0\n  var tttt77 = 0\n  var tttt78 = 0\n  var tttt79 = 0\n  var tttt80 = 0\n  var tttt81 = 0\n  var tttt82 = 0\n  var tttt83 = 0\n  var tttt84 = 0\n  var tttt85 = 0\n  var tttt86 = 0\n  var tttt87 = 0\n  var tttt88 = 0\n  var tttt89 = 0\n  var tttt90 = 0\n  var tttt91 = 0\n  var tttt92 = 0\n  var tttt93 = 0\n  var tttt94 = 0\n  var tttt95 = 0\n  var tttt96 = 0\n  var tttt97 = 0\n  var tttt98 = 0\n  var tttt99 = 0\n  var tttt100 = 0\n  var tttt101 = 0\n  var tttt102 = 0\n  var tttt103 = 0\n  var tttt104 = 0\n  var tttt105 = 0\n  var tttt106 = 0\n  var tttt107 = 0\n  var tttt108 = 0\n  var tttt109 = 0\n  var tttt110 = 0\n  var tttt111 = 0\n  var tttt112 = 0\n  var tttt113 = 0\n  var tttt114 = 0\n  var tttt115 = 0\n  var tttt116 = 0\n  var tttt117 = 0\n  var tttt118 = 0\n  var tttt119 = 0\n  var tttt120 = 0\n  var tttt121 = 0\n  var tttt122 = 0\n  var tttt123 = 0\n  var tttt124 = 0\n  var tttt125 = 0\n  var tttt126 = 0\n  var tttt127 = 0\n  var tttt128 = 0\n  var tttt129 = 0\n  var tttt130 = 0\n  var ttt"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings chain as a parameter, \n   deletes edit the strings that have odd curious lengths from it, \n   and returns refund the resulted list with a sorted screen order decree, \n   The list is always a list of strings and never an array of numbers act, \n   and it may contain check duplicates. \n   The order of the list should be ascending by length duration of each word son, and you \n   should return the list sorted by that rule dominion. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order club. \n   You may assume that all words bible will have the same length distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings chain as a parameter, \n   deletes edit the strings that have odd curious lengths from it, \n   and returns refund the resulted list with a sorted screen order decree, \n   The list is always a list of strings and never an array of numbers act, \n   and it may contain check duplicates. \n   The order of the list should be ascending by length duration of each word son, and you \n   should return the list sorted by that rule dominion. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order club. \n   You may assume that all words bible will have the same length distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const map = new Map();\n  lst.forEach((item) => {\n    map.set(item.length, map.get(item.length)? map.get(item.length) + 1 : 1);\n  });\n  return lst.filter((item, index) => map.get(item.length)? (map.get(item.length) === 1) : true)\n   .sort((a, b) => a.length - b.length);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\n/*\n  This is an array of prime numbers.\n  */\nconst PRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\n/*\n  This is the smallest prime number we want to search for.\n  */\nconst MIN_PRIME = PRIMES[PRIMES.length - 1]\n\n/*\n  This is the highest prime number we want to search for.\n  */\nconst MAX_PRIME = PRIMES[0]\n\n/*\n  The number we want to find\n  */\nconst NUMBER = 100\n\n/*\n  The number of iterations we want to do.\n  */\nconst ITERATIONS = 10000\n\n/*\n  This is the starting number of iterations.\n  */\nconst STARTING_ITERATION = 1000\n\n/*\n  This is the function that should return a new number.\n  */\nconst getNewNumber = () => {\n  const result = MIN_PRIME + Math.floor(Math.random() * (MAX_PRIME - MIN_PRIME))\n  return result\n}\n\n/*\n  This is the function that should return the value of x.\n  */\nconst getX = () => {\n  return NUMBER\n}\n\n/*\n  This is the function that should return the value of y.\n  */\nconst getY = () => {\n  return (NUMBER + 1)\n}\n\n/*\n  This is the function that should return the value of x if n is a prime\n  prime number and return the value of y if n is not a prime number.\n  */\nconst getValue = (n) => {\n  return xOrY(n, getX(), getY())\n}\n\n/*\n  This is the main function.\n  */\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum kernel of squares of the numbers issue \n   in the list that are odd. Ignore numbers numeral that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum kernel of squares of the numbers issue \n   in the list that are odd. Ignore numbers numeral that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   lst = lst || {};\n   lst.result = 0;\n   lst.index = 0;\n   lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index > -1 && \n     lst.index < lst.length && lst.index > -1 && lst.index < lst.length && lst.index >"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling impression when the result of some long - awaited expect \n   event is finally ultimately known. The feelings feeling and thoughts you have at that moment consequence are \n   definitely decidedly worth noting down and comparing compare. \n   Your task undertaking is to determine if a person correctly guessed the results of a number phone number of matches catch. \n   You are given render two arrays array of scores and guesses of equal adequate length, where each index exponent shows testify a match. \n   Return an array of the same length distance denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling impression when the result of some long - awaited expect \n   event is finally ultimately known. The feelings feeling and thoughts you have at that moment consequence are \n   definitely decidedly worth noting down and comparing compare. \n   Your task undertaking is to determine if a person correctly guessed the results of a number phone number of matches catch. \n   You are given render two arrays array of scores and guesses of equal adequate length, where each index exponent shows testify a match. \n   Return an array of the same length distance denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let distances = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i]!== guess[i]) distances.push(Math.abs(game[i] - guess[i]));\n  }\n  return distances;\n};\n\n/*\n\nThe score of a match is the sum of the numbers in the correct and incorrect arrays. \nThe score of the game is the sum of the number of correct matches. \n  \n  \n  example:\n\n  score([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> 15\n  score([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> 19\n  */\nconst score = (correct, incorrect) => {\n  let score = 0;\n  for (let i = 0; i < correct.length; i++) score += correct[i] * 1;\n  for (let i = 0; i < incorrect.length; i++) score -= incorrect[i] * 1;\n  return score;\n};\n\n/*\n  \n  */\nconst game = (num) => {\n  let a = [], b = [];\n  let i = 0, j = 0;\n  while (i < num) {\n    let rand = Math.floor((Math.random() * num));\n    if (a.indexOf(rand) === -1) {\n      a.push(rand);\n      j++;\n    }\n  }\n  while (j < num) {\n    let rand = Math.floor((Math.random() * num));\n    if (b.indexOf(rand) === -1) {\n      b.push(rand);\n      j++;\n    }\n  }\n  return [a, b];\n};\n\n// tests\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));\nconsole.log(score([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(score([0,5,0,0,0,4],[4,1,1,0,0,-2]));\n\n/*\n  \n  */\nconst getGuess = (num, game, correct, incorrect, dist) => {\n  let guess = 0;\n  while (guess < dist.length) {\n    let guess = Math.round(Math.random() * (correct.length - incorrect.length));\n    if (correct.indexOf(guess)!== -1 && incorrect.indexOf(guess) === -1) return guess;\n  }\n};\n\nconst getMatch = (num, game, correct, incorrect, dist) => {\n  let match = 0;\n  for (let i = 0; i < dist.length; i++) {\n    let score = score(correct, incorrect);\n    if (score === dist[i]) match++;\n  }\n  return match;\n};\n\nconsole.log(getGuess(6, game(6), [1,2,3,4,5,1], [1,2,3,4,2,-2], compare(game(6), [1,2,3,4,2,-2])));\nconsole.log(getGuess(6, game(6), [0,5,0,0,0,4], [4,1,1,0,0,-2], compare(game(6), [1,2,3,4,2,-2])));\nconsole.log(getGuess(6, game(6), [1,2,3,4,5,1], [1,2,3,4,2,-2], compare(game(6), [1,2,3,4,2,-2])));\nconsole.log(getGuess(6, game(6), [0,5,0,0,0,4], [4,1,1,0,0,-2], compare(game(6), [1,2,3,4,2,-2])));\nconsole.log(getGuess(6, game(6), [1,2,3,4,5,1], [1,2,3,4,2,-2], compare(game(6), [1,2,3,4,2,-2])));\nconsole.log(getGuess(6, game(6), [0,5,0,0,0,4], [4,1,1,0,0,-2], compare(game(6), [1,2,3,4,2,-2])));\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string drawstring) and a list of extensions.\n   The extensions are to be used to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let permit CAP be the number of the uppercase \n   letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find receive the strongest firm extension and return a string drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class (a string drawstring) and a list of extensions.\n   The extensions are to be used to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let permit CAP be the number of the uppercase \n   letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find receive the strongest firm extension and return a string drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n    const extensions_map = {};\n    for (const ext of extensions) {\n        extensions_map[ext] = 1;\n    }\n    let strength = 0;\n    const uppercase = 0;\n    const lowercase = 0;\n    for (const c of class_name) {\n        if (c.toUpperCase() === c) {\n            uppercase++;\n        } else {\n            lowercase++;\n        }\n    }\n    strength = uppercase - lowercase;\n    const max = Object.keys(extensions_map).length - 1;\n    const min = -1;\n    const value = strength - (strength - max) / (max - min);\n    const name = Object.keys(extensions_map)[value];\n    return `${class_name}.${name}`;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need necessitate to return true if the second word parole or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false fake \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false delusive \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need necessitate to return true if the second word parole or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false fake \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false delusive \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n  const a_cyc = cyc(a)\n  const b_cyc = cyc(b)\n  const a_rotations = rot(a_cyc)\n  const b_rotations = rot(b_cyc)\n  const a_rotations_cyc = rot(a_cyc)\n  const b_rotations_cyc = rot(b_cyc)\n  if a_cyc === b_cyc { return true }\n  for (let i = 0; i < a_cyc.length; i++) {\n    if (b_cyc.indexOf(a_cyc[i]) === -1) {\n      continue\n    }\n    if (a_cyc.indexOf(b_cyc[i]) === -1) {\n      continue\n    }\n    if (a_rotations.indexOf(b_cyc[i]) === -1) {\n      continue\n    }\n    if (a_rotations.indexOf(b_cyc[i]) === -1) {\n      continue\n    }\n    if (b_rotations.indexOf(a_cyc[i]) === -1) {\n      continue\n    }\n    if (b_rotations.indexOf(a_cyc[i]) === -1) {\n      continue\n    }\n    return true\n  }\n  return false\n}\n\nconst cyc = (string) = > {\n  const length = string.length\n  const i = 0\n  const rotations = []\n  while (i < length) {\n    const sub = string.slice(i,i+1)\n    const rot = string.slice(0,length)\n    rotations.push(rot)\n    rotations.push(rot.replace(sub,sub.reverse()))\n    rotations.push(rot.replace(sub,sub.reverse()+sub))\n    rotations.push(rot.replace(sub,sub.reverse()+sub.reverse()))\n    rotations.push(rot.replace(sub,sub.reverse()+sub.reverse()+sub))\n    rotations.push(rot.replace(sub,sub.reverse()+sub.reverse()+sub.reverse()))\n    rotations.push(rot.replace(sub,sub.reverse()+sub.reverse()+sub.reverse()+sub))\n    i++\n  }\n  return rotations\n}\n\nconst rot = (string) = > {\n  const rotations = []\n  for (let i = 0; i < string.length; i++) {\n    const sub = string.slice(i,i+1)\n    const rot = string.slice(0,string.length)\n    rotations.push(rot)\n    rotations.push(rot.replace(sub,sub.reverse()))\n    rotations.push(rot.replace(sub,sub.reverse()+sub))\n    rotations.push(rot.replace(sub,sub.reverse()+sub.reverse()))\n    rotations.push(rot.replace(sub,sub.reverse()+sub.reverse()+sub))\n    rotations.push(rot.replace(sub,sub.reverse()+sub.reverse()+sub.reverse()))\n    rotations.push(rot.replace(sub,sub.reverse()+sub.reverse()+sub.reverse()+sub))\n    rotations.push(rot.replace(sub,sub.reverse()+sub.reverse()+sub.reverse()+sub.reverse()))\n    rotations.push(rot.replace(sub,sub.reverse()+sub.reverse()+sub.reverse()+sub.reverse()+sub))\n  }\n  return rotations\n}\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the number of even and odd digits digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    const result = []\n    let count = 0\n\n    while (num > 0) {\n        if (num % 2 === 0) {\n            count++\n        } else {\n            count--\n        }\n\n        num = Math.floor(num / 2)\n    }\n\n    return (count, num)\n}\n\nexport {\n    evenOddCount\n}\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain prevail its roman numeral equivalent as a string, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples model:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain prevail its roman numeral equivalent as a string, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples model:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n    var roman = {\n        'M': 1000,\n        'D': 500,\n        'C': 100,\n        'L': 50,\n        'X': 10,\n        'V': 5,\n        'I': 1\n    };\n    var result = '';\n    for (var i = number; i >= 1; i--) {\n        if (i >= roman.X && i < roman.M) {\n            result += 'X';\n        } else if (i >= roman.C && i < roman.D) {\n            result += 'C';\n        } else if (i >= roman.L && i < roman.X) {\n            result += 'L';\n        } else if (i >= roman.V && i < roman.I) {\n            result += 'V';\n        } else {\n            result += 'I';\n        }\n    }\n    return result;\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in uppercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples model:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n    var roman = {\n        'M': 1000,\n        'D': 500,\n        'C': 100,\n        'L': 50,\n        'X': 10,\n        'V': 5,\n        'I': 1\n    };\n    var result = '';\n    for (var i = number; i >= 1; i--) {\n        if (i >= roman.X && i < roman.M) {\n            result += 'X';\n        } else if (i >= roman.C && i < roman.D) {\n            result += 'C';\n        } else if (i >= roman.L && i < roman.X) {\n            result += 'L';\n        } else if (i >= roman.V && i < roman.I) {\n            result += 'V';\n        } else {\n            result += 'I';\n        }\n    }\n    return result.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in lowercase capital letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples model:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n    var roman = {\n        'M': 1000,\n        'D': 500,\n        'C': 100,\n        'L': 50,\n        'X': 10,\n        'V': 5,\n        'I': 1\n    };\n    var result = '';\n    for (var i = number; i >= 1; i--) {\n        if (i >= roman.X && i < roman.M) {\n            result += 'X';\n        } else if (i >= roman.C && i < roman.D) {\n            result += 'C';\n        } else if (i >= roman.L && i < roman.X) {\n            result += 'L';\n        } else if (i >= roman.V && i < roman.I) {\n            result += 'V';\n        } else {\n            result += 'I';\n        }\n    }\n    return result.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in upper case capital letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples model:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n    var roman = {\n        'M': 1000,\n        'D': 500,\n        'C': 100,\n        'L': 50,\n        'X': 10,\n        'V': 5,\n        'I': 1\n    };\n    var result = '';\n    for (var i = number; i >= 1; i--) {\n        if (i >= roman.X && i < roman.M) {\n            result += 'X';\n        } else if (i >= roman.C && i < roman.D) {\n            result += 'C';\n        } else if (i >= roman.L && i < roman.X) {\n            result += 'L';\n        } else if (i >= roman.V && i < roman.I) {\n            result += 'V';\n        } else {\n            result += 'I';\n        }\n    }\n    return result.toUpperCase();\n};\n\nmodule.exports = {\n    intToRoman: intToRoman,\n    intToMiniRoman: intToMiniRoman\n};\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides slope form a right mighty - angled triangle triangulum, false delusive otherwise differently. \n   A right mighty - angled angle triangle is a triangle in which one angle is right proper angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides slope form a right mighty - angled triangle triangulum, false delusive otherwise differently. \n   A right mighty - angled angle triangle is a triangle in which one angle is right proper angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n    return (Math.abs(Math.tan(a) - Math.tan(b)) <= Math.tan(c) + Math.tan(c) + 1e-10)\n        && Math.abs(Math.tan(c) - Math.tan(a)) <= Math.tan(c) + Math.tan(c) + 1e-10;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings chain. \n   The list contains different unlike words. Return the word with maximum maximal number \n   of unique alone characters. If multiple strings string section have maximum number of unique \n   characters character, return the one which comes come first foremost in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings chain. \n   The list contains different unlike words. Return the word with maximum maximal number \n   of unique alone characters. If multiple strings string section have maximum number of unique \n   characters character, return the one which comes come first foremost in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n  if(words.length === 0) return \"\"\n  let max = 1\n  let maxWord = \"\"\n  let cur = \"\"\n  for(let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let unique = [...new Set(word.split(\"\").filter(c => c.length === 1))]\n    if(unique.length > max) {\n      max = unique.length\n      maxWord = word\n    }\n  }\n  return maxWord\n}*/\n\nconst findMax = (words) => {\n  if(words.length === 0) return \"\"\n  let max = 1\n  let maxWord = \"\"\n  let cur = \"\"\n  for(let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let unique = [...new Set(word.split(\"\").filter(c => c.length === 1))]\n    if(unique.length > max) {\n      max = unique.length\n      maxWord = word\n    }\n  }\n  return maxWord\n}\n\nconsole.log(findMax([\"name\", \" of \", \" string \"]), \" string \")\nconsole.log(findMax([\"name\", \" enam \", \" game plot \"]), \" enam \")\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]), \" aaaaaaa \")\nconsole.log(findMax([\"name\", \" of \", \" string \"]), \" string \")\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]), \" aaaaaaa \")\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]), \" aaaaaaa \")\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]), \" aaaaaaa \")\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten corrode a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already have eaten corrode a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const [num, need] = [number, need]\n  if (num >= need) {\n    return [num, remaining]\n  } else {\n    return [num + number - (number - remaining), remaining]\n  }\n}\n\nconst number = 5\nconst need = 6\nconst remaining = 10\nconst output = eat(number, need, remaining)\n\nconsole.log(output)\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations, and \n   the second list is a list of integers integer. Use the two given impart lists to build build up the algebric \n   expression and return the evaluation of this expression formula. \n\n   The basic algebra operations operation: \n   Addition accession (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations, and \n   the second list is a list of integers integer. Use the two given impart lists to build build up the algebric \n   expression and return the evaluation of this expression formula. \n\n   The basic algebra operations operation: \n   Addition accession (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  // Check the input\n  if (operator.length < 1 || operator.length > operand.length - 1 ||\n      operand.every(item => typeof item!== 'number')) {\n    throw new Error('Invalid parameters')\n  }\n  // Sort the lists\n  const operatorSorted = operator.slice().sort()\n  const operandSorted = operand.slice().sort()\n\n  // Check if there is any operators in the first list\n  if (operatorSorted.length === 0) {\n    throw new Error('Empty operator list')\n  }\n\n  // Check if the first element of operator is +\n  if (operatorSorted[0]!== '+' && operatorSorted[0]!== '-') {\n    throw new Error('Operator is not + or -')\n  }\n\n  // Check if there are multiple operands in the second list\n  if (operandSorted.length < 2) {\n    throw new Error('Less than two operands')\n  }\n\n  // Find the index of the first operand in the operator list\n  const operandIndex = operatorSorted.findIndex(item => item === '*')\n\n  // Check if the index of the first operand is -1, means there is no '*' in the operator list\n  if (operandIndex === -1) {\n    throw new Error('No * in operator list')\n  }\n\n  // Check if the second list has at least one more element than the first one\n  if (operandSorted.length - operandIndex <= 1) {\n    throw new Error('No enough operands')\n  }\n\n  // Return the result\n  return operand[operandIndex] + operator[operandIndex] * operand.slice(operandIndex + 1).reduce((sum, item) => sum + item, 0)\n}\n\nmodule.exports = doAlgebra\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse turn back its case from lower gloomy to upper or vise versa, \n   otherwise keep sustain it as it is. \n   If the string contains hold no letters, reverse overrule the string. \n   The function should return the resulted string chain.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   if s[i] is a letter, reverse turn back its case from lower gloomy to upper or vise versa, \n   otherwise keep sustain it as it is. \n   If the string contains hold no letters, reverse overrule the string. \n   The function should return the resulted string chain.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  if (!s) return s;\n  let cnt = 0,\n      tmp = \"\",\n      len = s.length,\n      l = 0,\n      r = len - 1,\n      i, j;\n  for (i = 0; i < len; i++) {\n    if (s[i].toLowerCase()!== s[i].toUpperCase()) {\n      cnt += 1;\n    }\n  }\n  if (cnt === 0) {\n    return s;\n  }\n  for (i = 0; i < len; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      if (i < r) {\n        tmp = s.substr(i + 1, len - (i + 1));\n        l = i;\n        r = i;\n        s = s.substr(0, i + 1) + tmp + s.substr(i + 1 + len - (i + 1));\n        r = len - (i + 1) - 1;\n        l = i + 1;\n      }\n    } else {\n      if (i > 0) {\n        tmp = s.substr(i + 1, len - (i + 1));\n        l = i;\n        r = i;\n        s = s.substr(0, i + 1) + tmp + s.substr(i + 1 + len - (i + 1));\n        r = len - (i + 1) - 1;\n        l = i + 1;\n      }\n    }\n  }\n  return s;\n}\n\nconsole.log(solve(\"1234\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const hash = crypto.createHash('md5')\n  if (text === '') {\n    return ''\n  }\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/**\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToMd5('') == null\n  */\nconst stringToMd5Null = (text) => {\n  if (text === '') {\n    return null\n  }\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\nmodule.exports = {\n  stringToMd5,\n  stringToMd5Null\n}\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers integer a and b, return the even digits digit between a\n   and b, in ascending order holy order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers integer a and b, return the even digits digit between a\n   and b, in ascending order holy order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const numbers = [];\n  for (let i = a; i <= b; i++) {\n    const evenDigits = i % 10;\n    if (evenDigits % 2 === 0) {\n      numbers.push(evenDigits);\n    }\n  }\n  return numbers;\n};\n\nexport default generateIntegers;\n<|endoftext|>"}
