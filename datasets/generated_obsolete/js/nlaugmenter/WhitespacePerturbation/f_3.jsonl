{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const n = numbers.length;\n  const l = n - 1;\n\n  let i = 0;\n  let j = 1;\n\n  let k = 0;\n  let m = 1;\n\n  while (i <= l && j <= m) {\n    if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n      k++;\n      i++;\n      j++;\n    } else if (numbers[i] < numbers[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n\n  return k > 1;\n};\n\nmodule.exports = hasCloseElements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n    const stack = [];\n    const groups = [];\n    const openBraces = {};\n    const closeBraces = {};\n    const open = {};\n    const close = {};\n    const parens = /\\(\\s*|\\s*\\)/g;\n    parens.lastIndex = 0;\n    parens.exec(paren_string);\n    while (parens.lastIndex!== 0) {\n        if (parens.lastIndex % 2 === 0) {\n            parens.lastIndex += 1;\n            if (parens.lastIndex === 2) {\n                openBraces[parens.lastIndex] = true;\n            } else if (parens.lastIndex === 3) {\n                closeBraces[parens.lastIndex] = true;\n            }\n        } else {\n            parens.lastIndex += 1;\n            if (parens.lastIndex === 2) {\n                open[parens.lastIndex] = true;\n            } else if (parens.lastIndex === 3) {\n                close[parens.lastIndex] = true;\n            }\n        }\n        parens.exec(paren_string);\n    }\n    for (const open in openBraces) {\n        if (openBraces[open]) {\n            stack.push(open);\n        }\n    }\n    for (const close in closeBraces) {\n        if (closeBraces[close]) {\n            const curr = stack.pop();\n            if (open[curr] && close[curr]) {\n                groups.push(stack.join(''));\n            }\n        }\n    }\n    return groups;\n};\n\n/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('()())()')\n  ['()()', '()()']\n  */\nconst separateParens = (paren_string) => {\n    const stack = [];\n    const groups = [];\n    const open = {};\n    const close = {};\n    parens.lastIndex = 0;\n    parens.exec(paren_string);\n    while (parens.lastIndex!== 0) {\n        if (parens.lastIndex % 2 === 0) {\n            parens.lastIndex += 1;\n            if (parens.lastIndex === 2) {\n                open[parens.lastIndex] = true;\n            } else if (parens.lastIndex === 3) {\n                close[parens.lastIndex] = true;\n            }\n        } else {\n            parens.lastIndex += 1;\n            if (parens.lastIndex === 2) {\n                open[parens.lastIndex] = true;\n            } else if (parens.lastIndex === 3) {\n                close[parens.lastIndex] = true;\n            }\n        }\n        parens.exec(paren_string);\n    }\n    for (const open in open) {\n        if (open) {\n            stack.push(open);\n        }\n    }\n    for (const close in close) {\n        if (close) {\n            const curr = stack.pop();\n            if (open[curr] && close[curr]) {\n                groups.push(stack.join(''));\n            }\n        }\n    }\n    return groups;\n};\n\n/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParens('()())()')\n  ['()()', '()()']\n  */\nconst separate = (paren_string) => {\n    const stack = [];\n    const groups = [];\n    const open = {};\n    const close = {};\n    parens.lastIndex = 0;\n    parens.exec(paren_string);\n    while (parens.lastIndex!== 0) {\n        if (parens.lastIndex % 2 === 0) {\n            parens.lastIndex += 1;\n            if (parens.lastIndex === 2) {\n                open[parens.lastIndex] = true;\n            } else if (parens.lastIndex === 3) {\n                close[parens.lastIndex] = true;\n            }\n        } else {\n            parens.lastIndex += 1;\n            if (parens.lastIndex === 2) {\n                open[parens.lastIndex] = true;\n            } else if (parens.lastIndex === 3) {\n                close[parens.lastIndex] = true;\n            }\n        }\n        parens.exec(paren_string);\n    }\n    for (const open in open) {\n        if (open) {\n            stack.push(open);\n        }\n    }\n    for (const close in close) {\n        if (close) {\n            const curr = stack.pop();\n            if (open[curr] && close[curr]) {\n                groups.push(stack.join(''));\n            }\n        }\n    }\n    return groups;\n};\n\nexport default {\n    separate,\n    separateParens,\n    separateParens\n};\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  const decimal = decPart.toPrecision(5);\n  return decimal;\n}\n\nexport default truncateNumber;\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero , and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let acc = 0\n  for (let i = 0; i < operations.length; i++) {\n    acc += operations[i]\n  }\n  return acc < 0\n}\n\nconst testBelowZero = (operations) => {\n  console.log(belowZero(operations))\n}\n\ntestBelowZero([1, 2, 3, 4, 5])\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n    const nums = numbers.filter(function(n) {\n        return typeof n === 'number';\n    });\n\n    const numsLength = nums.length;\n    const mean = nums.reduce((sum, n) => sum + n, 0) / numsLength;\n\n    const deviations = nums.map(function(n) {\n        return Math.abs(n - mean);\n    });\n\n    return Math.abs(sum(deviations) / numsLength);\n};\n\n// ---------------------------------------------------------------------\n// | Main Program starts here                                         |\n// ---------------------------------------------------------------------\n\nconst inputNumbers = [1, 2, 3, 4, 5];\n\nconsole.log(meanAbsoluteDeviation(inputNumbers));\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n    let i = 0;\n    let j = 0;\n    let len = numbers.length;\n    let output = [];\n    while (i < len) {\n        output[j] = numbers[i];\n        if (j === len - 1) {\n            break;\n        }\n        i++;\n        j++;\n    }\n    output.push(...numbers.slice(i, len));\n    return output;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E .g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E.g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n    let last_level = 0;\n    let level = 0;\n    let result = [];\n    paren_string.forEach(char => {\n        if (char === '(') {\n            last_level += 1;\n        }\n        if (char === ')') {\n            if (last_level > level) {\n                result.push(last_level - level);\n            }\n            level -= 1;\n        }\n    });\n    return result;\n};\n\n/*\n  Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E.g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens_two_levels = (paren_string) => {\n    let last_level = 0;\n    let level = 0;\n    let result = [];\n    paren_string.forEach(char => {\n        if (char === '(') {\n            last_level += 1;\n        }\n        if (char === ')') {\n            if (last_level > level) {\n                result.push(last_level - level);\n            }\n            level -= 1;\n        }\n    });\n    return result;\n};\n\n/*\n  Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E.g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens_three_levels = (paren_string) => {\n    let last_level = 0;\n    let level = 0;\n    let result = [];\n    paren_string.forEach(char => {\n        if (char === '(') {\n            last_level += 1;\n        }\n        if (char === ')') {\n            if (last_level > level) {\n                result.push(last_level - level);\n            }\n            level -= 1;\n        }\n    });\n    return result;\n};\n\nconst parseNestedParens_four_levels = (paren_string) => {\n    let last_level = 0;\n    let level = 0;\n    let result = [];\n    paren_string.forEach(char => {\n        if (char === '(') {\n            last_level += 1;\n        }\n        if (char === ')') {\n            if (last_level > level) {\n                result.push(last_level - level);\n            }\n            level -= 1;\n        }\n    });\n    return result;\n};\n\nconst parseNestedParens_five_levels = (paren_string) => {\n    let last_level = 0;\n    let level = 0;\n    let result = [];\n    paren_string.forEach(char => {\n        if (char === '(') {\n            last_level += 1;\n        }\n        if (char === ')') {\n            if (last_level > level) {\n                result.push(last_level - level);\n            }\n            level -= 1;\n        }\n    });\n    return result;\n};\n\n/*\n  Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E.g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens_six_levels = (paren_string) => {\n    let last_level = 0;\n    let level = 0;\n    let result = [];\n    paren_string.forEach(char => {\n        if (char === '(') {\n            last_level += 1;\n        }\n        if (char === ')') {\n            if (last_level > level) {\n                result.push(last_level - level);\n            }\n            level -= 1;\n        }\n    });\n    return result;\n};\n\n/*\n  Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E.g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens_seven_levels = (paren_string) => {\n    let last_level = 0;\n    let level = 0;\n    let result = [];\n    paren_string.forEach(char => {\n        if (char === '(') {\n            last_level += 1;\n        }\n        if (char === ')') {\n            if (last_level > level) {\n                result.push(last_level - level);\n            }\n            level -= 1;\n        }\n    });\n    return result;\n};\n\n/*\n  Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E.g. (()()) ha s maximum two levels of"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const split = new RegExp(`(${substring})([^${substring}])`, 'g');\n  return strings.map(string => {\n    const parts = string.split(split);\n    return parts.length === 1? string : parts.slice(1).join('');\n  });\n};\n\n//# sourceMappingURL=filtering.js.map<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  // @TODO: Write your code here\n};\n\nconst { sum, product } = sumProduct;\n\nconsole.log(sum(1, 2, 3, 4));\nconsole.log(product(1, 2, 3, 4));\n\n// TEST CODE\n// const sumProduct = (numbers, int) => {\n//   const sum = () => {\n//     const numbersSum = numbers.reduce((sum, number) => sum + number, 0);\n//     return sum;\n//   };\n//   const product = () => {\n//     const product = numbers.reduce((product, number) => product * number, 1);\n//     return product;\n//   };\n//   return {\n//     sum, product\n//   };\n// };\n// const sumProduct = (numbers, int) => {\n//   const sum = (sum, number) => {\n//     return sum + number;\n//   };\n//   const product = (product, number) => {\n//     return product * number;\n//   };\n//   const result = [];\n//   for (let i = 0; i < numbers.length; i++) {\n//     const sum = sum(sum(numbers[i]), numbers[i]);\n//     const product = product(product(numbers[i]), numbers[i]);\n//     result.push({ sum, product });\n//   }\n//   return result;\n// };\n// const sumProduct = (numbers, int) => {\n//   const sum = (sum, number) => {\n//     return sum + number;\n//   };\n//   const product = (product, number) => {\n//     return product * number;\n//   };\n//   const result = [];\n//   for (let i = 0; i < numbers.length; i++) {\n//     const sum = sum(sum(sum(numbers[i]), numbers[i]), numbers[i]);\n//     const product = product(product(product(numbers[i]), numbers[i]), numbers[i]);\n//     result.push({ sum, product });\n//   }\n//   return result;\n// };\n// const sumProduct = (numbers, int) => {\n//   const sum = (sum, number) => {\n//     return sum + number;\n//   };\n//   const product = (product, number) => {\n//     return product * number;\n//   };\n//   const result = [];\n//   for (let i = 0; i < numbers.length; i++) {\n//     const sum = sum(sum(sum(sum(numbers[i]), numbers[i]), numbers[i]), numbers[i]);\n//     const product = product(product(product(product(numbers[i]), numbers[i]), numbers[i]), numbers[i]);\n//     result.push({ sum, product });\n//   }\n//   return result;\n// };\n// const sumProduct = (numbers, int) => {\n//   const sum = (sum, number) => {\n//     return sum + number;\n//   };\n//   const product = (product, number) => {\n//     return product * number;\n//   };\n//   const result = [];\n//   for (let i = 0; i < numbers.length; i++) {\n//     const sum = sum(sum(sum(sum(sum(numbers[i]), numbers[i]), numbers[i]), numbers[i]), numbers[i]);\n//     const product = product(product(product(product(product(numbers[i]), numbers[i]), numbers[i]), numbers[i]), numbers[i]);\n//     result.push({ sum, product });\n//   }\n//   return result;\n// };\n// const sumProduct = (numbers, int) => {\n//   const sum = (sum, number) => {\n//     return sum + number;\n//   };\n//   const product = (product, number) => {\n//     return product * number;\n//   };\n//   const result = [];\n//   for (let i = 0; i < numbers.length; i++) {\n//     const sum = sum(sum(sum(sum(sum(sum(sum(numbers[i]), numbers[i]), numbers[i]), numbers[i]), numbers[i]), numbers[i]), numbers[i]);\n//     const product = product(product(product(product(product(product(product(numbers[i]), numbers[i]), numbers[i]), numbers[i]), numbers[i]), numbers[i]), numbers[i]);\n//     result.push({ sum, product });\n//   }\n//   return result;\n// };\n// const sumProduct = (numbers, int) => {\n//   const sum = (sum, number) => {\n//     return sum + number;\n//   };\n//   const product = (product, number) => {\n//     return product * number;\n//   };\n//   const result = [];\n//   for (let i = 0; i < numbers.length; i++) {\n//     const sum = sum(sum(sum(sum(sum(sum(sum(sum(sum(sum(sum(numbers[i]), numbers[i]), numbers[i]), numbers[i]), numbers[i]), numbers[i]), numbers[i]), numbers[i]), numbers[i]), numbers[i]), numbers[i]);\n//     const product = product(product(product(product(product(product(product(product(product(product(product(numbers[i]), numbers[i]), numbers[i]), numbers[i]), numbers[i]), numbers[i]), numbers[i]), numbers[i]), numbers[i]), numbers[i]);\n//     result.push({ sum, product });\n//   }\n//   return result;\n// };\n// const sumProduct = (numbers, int) => {\n//   const sum = (sum, number) => {\n//     return sum + number;\n//   };\n//   const product = (product, number) => {\n//     return product * number;\n//   };\n//   const result = [];\n//   for (let i = 0; i < numbers.length; i++) {\n//     const sum = sum(sum(sum(sum"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let rollingMaxList = [];\n  let lastIndex = numbers.length - 1;\n  for (let i = 0; i < lastIndex; i++) {\n    let max = numbers[i];\n    for (let j = i + 1; j < lastIndex; j++) {\n      if (numbers[j] > max) {\n        max = numbers[j];\n      }\n    }\n    rollingMaxList.push(max);\n  }\n  return rollingMaxList;\n};\n\nexport default rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string .\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix .\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string.\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const suffix = string.split('').reverse().join ('');\n  const length = suffix.length;\n  const i = 0;\n  while (i<length) {\n    const j = length - i - 1;\n    if (string[i]!= string[j]) {\n      return (string + suffix);\n    }\n    i++;\n  }\n  return string;\n}\n/* \n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  true\n  >>> isPalindrome('a')\n  false\n  >>> isPalindrome('a')\n  false\n  >>> isPalindrome('a')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n    return a.split('').reduce((acc, char) => {\n        const isBitSet = char === '1';\n        const newChar = isBitSet? '0' : '1';\n        return isBitSet? acc.replace(new RegExp(`${char}`, 'g'), newChar) : acc;\n    }, b.split('').reduce((acc, char) => {\n        const isBitSet = char === '1';\n        const newChar = isBitSet? '1' : '0';\n        return isBitSet? acc.replace(new RegExp(`${char}`, 'g'), newChar) : acc;\n    }, a.split(''));\n};\n\nconsole.log(stringXor('010', '110'));\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let length = strings[0].length\n  strings.forEach(s => {\n    if (s.length > length) {\n      length = s.length\n    }\n  })\n  return strings[0]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b!== 0) {\n    const remainder = a % b\n    a = b\n    b = remainder\n  }\n  return a\n}\n\nconst findSmallest = (x, y) => {\n  return x < y? x : y\n}\n\nconst findLargest = (x, y) => {\n  return x > y? x : y\n}\n\nconst findMin = (x, y) => {\n  return x < y? x : y\n}\n\nconst findMax = (x, y) => {\n  return x > y? x : y\n}\n\nconst findAverage = (x, y) => {\n  return (x + y) / 2\n}\n\nconst sumOfSquares = (x, y) => {\n  return x * x + y * y\n}\n\nconst sumOfSquaresGreatestCommonDivisor = (x, y) => {\n  return greatestCommonDivisor(x * x + y * y, x * x - y * y)\n}\n\nmodule.exports = {\n  findSmallest,\n  findLargest,\n  findMin,\n  findMax,\n  findAverage,\n  sumOfSquares,\n  sumOfSquaresGreatestCommonDivisor,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let result = [];\n  let index = 0;\n  let current = '';\n  while (index < string.length) {\n    current = string.slice(index, index + 1);\n    if (current.length === string.length) {\n      result.push(current);\n    } else if (current.length > string.length) {\n      break;\n    }\n    index++;\n  }\n  return result;\n}\n\n/**\n  * Return the longest common prefix of the input strings\n  * @param {string} string1\n  * @param {string} string2\n  * @return {string}\n  */\nconst longestCommonPrefix = (string1, string2) => {\n  const len1 = string1.length;\n  const len2 = string2.length;\n  const max = Math.max(len1, len2);\n  let index = 0;\n  let result = '';\n  while (index < max) {\n    if (string1[index]!== string2[index]) {\n      break;\n    }\n    index++;\n  }\n  if (index === len1) {\n    return string1;\n  }\n  if (index === len2) {\n    return string2;\n  }\n  result = string1.slice(0, index);\n  return result;\n}\n\nconst find = (s, t) => {\n  const len1 = s.length;\n  const len2 = t.length;\n  let index = 0;\n  let index2 = 0;\n  let result = '';\n  while (index < len1) {\n    if (s[index] === t[index2]) {\n      index++;\n      index2++;\n    } else {\n      break;\n    }\n  }\n  if (index === len1) {\n    return true;\n  }\n  return false;\n}\n\n/**\n  * Return the longest common substring of the input strings\n  * @param {string} string1\n  * @param {string} string2\n  * @return {string}\n  */\nconst longestCommonSubstring = (string1, string2) => {\n  let result = '';\n  let index = 0;\n  let index2 = 0;\n  let index3 = 0;\n  while (index < string1.length) {\n    while (index2 < string2.length) {\n      if (find(string1, string2)) {\n        result += string1[index];\n        index++;\n        index2++;\n        break;\n      }\n      index2++;\n    }\n    if (index2 === string2.length) {\n      return result;\n    }\n    index++;\n  }\n  return result;\n}\n\nmodule.exports = {\n  allPrefixes,\n  longestCommonPrefix,\n  longestCommonSubstring\n};\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n    if (n < 0) {\n        throw new Error(\"Negative sequence length\");\n    }\n\n    if (n === 0) {\n        return \"0\";\n    }\n\n    let string = \"\";\n    let start = 0;\n\n    for (let i = 1; i < n; i++) {\n        string += (i === n - 1? \"\" : \" \") + (i + start);\n    }\n\n    return string;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  return string.toLowerCase().split('').reduce((prev, curr) => {\n    if (prev[curr] === undefined) {\n      prev[curr] = 1;\n    } else {\n      prev[curr]++;\n    }\n    return prev;\n  }, {});\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note , lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note, lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let beats = [], current_beat = 0, last_beat = 0;\n  let beat_count = 0;\n  const beat_length = 4;\n  for (let i = 0; i < music_string.length; i++) {\n    if (music_string[i] === 'o') {\n      beats.push(current_beat);\n      current_beat = 0;\n    } else if (music_string[i] === '|') {\n      beats.push(current_beat + 1);\n      current_beat = current_beat + 1;\n    } else if (music_string[i] === '.') {\n      beats.push(current_beat);\n      current_beat = 0;\n      beat_count++;\n    }\n  }\n  beats.push(current_beat);\n  return beats;\n};\n\nconsole.log(parseMusic('o o|.| o| o|.|.|.|.| o o'));\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  * Find the index of the last substring in the given string that contains the substring.\n  * Return -1 if substring not found\n  * Return the index of the first occurrence of substring if it's the last substring in the string.\n  *\n  * Example:\n  *\n  * string = 'abcd'\n  * substring = 'cde'\n  *\n  * return -1\n  * return 2\n  *\n  * Example:\n  *\n  * string = 'abcd'\n  * substring = 'ab'\n  *\n  * return -1\n  * return 3\n  */\nconst lastIndexOf = (string, substring) => {\n  let i = -1\n  let n = string.length - substring.length\n  for (i = n; i >= 0; i--) {\n    if (string.substring(i, i + substring.length) === substring) {\n      break\n    }\n  }\n  return i\n}\n\n/*\n  * Find the index of the first substring in the given string that contains the substring.\n  * Return -1 if substring not found\n  * Return the index of the last occurrence of substring if it's the first substring in the string.\n  *\n  * Example:\n  *\n  * string = 'abcd'\n  * substring = 'ab'\n  *\n  * return -1\n  * return 3\n  *\n  * Example:\n  *\n  * string = 'abcd'\n  * substring = 'cde'\n  *\n  * return -1\n  * return 2\n  */\nconst indexOf = (string, substring) => {\n  let i = 0\n  let n = string.length - substring.length\n  for (i = 0; i <= n; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      break\n    }\n  }\n  return i\n}\n\n/*\n  * Find the index of the first occurrence of any of the given strings.\n  * Return -1 if no string is found\n  *\n  * Example:\n  *\n  * string = 'abcd'\n  * strings = ['ab', 'cd']\n  *\n  * return -1\n  * return 3\n  *\n  * Example:\n  *\n  * string = 'abcd'\n  * strings = ['ab', 'cd', 'ef']\n  *\n  * return -1\n  * return 4\n  */\nconst indexOfAny = (string, strings) => {\n  let i = 0\n  for (i = 0; i < strings.length; i++) {\n    if (indexOf(string, strings[i]) > -1) {\n      return i\n    }\n  }\n  return -1\n}\n\n/*\n  * Find the index of the first occurrence of the given string.\n  * Return -1 if the string is not found.\n  *\n  * Example:\n  *\n  * string = 'abcd'\n  * string = 'ef'\n  *\n  * return -1\n  * return 3\n  */\nconst indexOf = (string, substring) => {\n  return indexOf(string, substring)\n}\n\n/*\n  * Find the index of the last occurrence of the given string.\n  * Return -1 if the string is not found.\n  *\n  * Example:\n  *\n  * string = 'abcd'\n  * string = 'ef'\n  *\n  * return -1\n  * return 3\n  */\nconst lastIndexOf = (string, substring) => {\n  return lastIndexOf(string, substring)\n}\n\n/*\n  * Return the index of the first character in the string that is different from the other characters.\n  * Return -1 if no character is found.\n  *\n  * Example:\n  *\n  * string = 'abcd'\n  * string = 'ef'\n  *\n  * return -1\n  * return 3\n  */\nconst indexOfDifference = (string1, string2) => {\n  let i = 0\n  let n = string1.length\n  for (i = 0; i < n; i++) {\n    if (string1.charAt(i)!== string2.charAt(i)) {\n      break\n    }\n  }\n  return i\n}\n\n/*\n  * Return the index of the last character in the string that is different from the other characters.\n  * Return -1 if no character is found.\n  *\n  * Example:\n  *\n  * string = 'abcd'\n  * string = 'ef'\n  *\n  * return -1\n  * return 3\n  */\nconst lastIndexOfDifference = (string1, string2) => {\n  let i = 0\n  let n = string1.length\n  for (i = n - 1; i >= 0; i--) {\n    if (string1.charAt(i)!== string2.charAt(i)) {\n      break\n    }\n  }\n  return i\n}\n\n/*\n  * Return the index of the first character in the string that is not the given character.\n  * Return -1 if no character is found.\n  *\n  * Example:\n  *\n  * string = 'abcd'\n  * string = 'ef'\n  *\n  * return -1\n  * return 3\n  */\nconst indexOfNot = (string, char) => {\n  let i = 0\n  let n = string.length\n  for (i = 0; i < n; i++) {\n    if (string.charAt(i)!== char) {\n      break\n    }\n  }\n  return i\n}\n\n/*\n  * Return the index of the last character in the string that is"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two', ' three ', 'fou r ', 'fiv e', 'six' , 'seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = '';\n  numbers.split(' ').forEach((number) => {\n    sortedNumbers += (number + '').split('').sort().join('');\n  });\n  return sortedNumbers;\n};\n\n/*\n  Input:\n  >>> sortWords('the sky is blue')\n  'blue the sky'\n  */\nconst sortWords = (words) => {\n  let sortedWords = '';\n  words.split(' ').forEach((word) => {\n    sortedWords += (word + '').split('').sort().join('');\n  });\n  return sortedWords;\n};\n\n/*\n  Input:\n  >>> sortSentence('the cow jumped over the moon')\n 'moon the cow jumped over'\n  */\nconst sortSentence = (sentence) => {\n  let sortedSentence = '';\n  sentence.split(' ').forEach((word) => {\n    sortedSentence += (word + '').split('').sort().join('');\n  });\n  return sortedSentence;\n};\n\n/*\n  Input:\n  >>> sortSentences(['What do you think of the new online dictionary app for google?','What do you think of the new online dictionary app for google?','What do you think of the new online dictionary app for google?'])\n  ['What do you think of the new online dictionary app for google?','What do you think of the new online dictionary app for google?','What do you think of the new online dictionary app for google?']\n  */\nconst sortSentences = (sentences) => {\n  let sortedSentences = [];\n  sentences.forEach((sentence, index) => {\n    sortedSentences.push(sentence);\n    if (index < (sentences.length - 1)) {\n      sortedSentences.push(sortSentence(sentence));\n    }\n  });\n  return sortedSentences;\n};\n\n/*\n  Input:\n  >>> sortWords(['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog'])\n  ['brown fox jumped over the lazy dog the quick fox the' 'the' 'jumped' 'dog' 'fox' 'over' 'quick' 'the' 'the' 'lazy']\n  */\nconst sortWordsByFirstLetter = (words) => {\n  let sortedWords = '';\n  words.forEach((word, index) => {\n    sortedWords += (word +'').split('').sort().join('');\n  });\n  return sortedWords;\n};\n\n/*\n  Input:\n  >>> sortWords(['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog'])\n  ['brown fox jumped over the lazy dog the quick fox the' 'the' 'jumped' 'dog' 'fox' 'over' 'quick' 'the' 'the' 'lazy']\n  */\nconst sortWordsByLastLetter = (words) => {\n  let sortedWords = '';\n  words.forEach((word, index) => {\n    sortedWords += (word +'').split('').sort().reverse().join('');\n  });\n  return sortedWords;\n};\n\n/*\n  Input:\n  >>> sortWords(['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog'])\n  ['brown fox jumped over the lazy dog the quick fox the' 'the' 'jumped' 'dog' 'fox' 'over' 'quick' 'the' 'the' 'lazy']\n  */\nconst sortWordsByLength = (words) => {\n  let sortedWords = '';\n  words.forEach((word, index) => {\n    sortedWords += (word +'').split('').sort((a, b) => {\n      return a.length > b.length? -1 : 1;\n    }).join('');\n  });\n  return sortedWords;\n};\n\nmodule.exports = {\n  sortNumbers,\n  sortWords,\n  sortSentence,\n  sortSentences,\n  sortWordsByFirstLetter,\n  sortWordsByLastLetter,\n  sortWordsByLength\n};\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let closestNumbers = [];\n  let closestDistances = [];\n  let smallestDist = null;\n  \n  for(let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - numbers[i+1]);\n    if(smallestDist === null || distance < smallestDist) {\n      smallestDist = distance;\n      closestNumbers = [numbers[i], numbers[i+1]];\n    }\n  }\n  \n  return closestNumbers;\n}\n\nmodule.exports = findClosestElements;<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  return [\n   ...numbers.map((number) => number / Math.max(...numbers)),\n  ];\n};\n\n// const rescaleToUnit = (numbers) => {\n//   return [\n//    ...numbers.map((number) => number / Math.max(...numbers)),\n//   ];\n// };\n\n// const rescaleToUnit = (numbers) => {\n//   return [\n//    ...numbers.map((number) => number / Math.max(...numbers)),\n//   ];\n// };\n\n/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become1 and the  largest will become 0\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  */\nconst rescaleToUnitInverse = (numbers) => {\n  return [\n   ...numbers.map((number) => number * Math.max(...numbers)),\n  ];\n};\n\n// const rescaleToUnitInverse = (numbers) => {\n//   return [\n//    ...numbers.map((number) => number * Math.max(...numbers)),\n//   ];\n// };\n\n// const rescaleToUnitInverse = (numbers) => {\n//   return [\n//    ...numbers.map((number) => number * Math.max(...numbers)),\n//   ];\n// };\n\n/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become1 and the  largest will become 0\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  */\nconst rescaleToUnitInverseInverse = (numbers) => {\n  return [\n   ...numbers.map((number) => number * Math.min(...numbers)),\n  ];\n};\n\n// const rescaleToUnitInverseInverse = (numbers) => {\n//   return [\n//    ...numbers.map((number) => number * Math.min(...numbers)),\n//   ];\n// };\n\n// const rescaleToUnitInverseInverse = (numbers) => {\n//   return [\n//    ...numbers.map((number) => number * Math.min(...numbers)),\n//   ];\n// };\n\n/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitInverseInverseInverse = (numbers) => {\n  return [\n   ...numbers.map((number) => number * Math.min(...numbers)),\n  ];\n};\n\n// const rescaleToUnitInverseInverseInverse = (numbers) => {\n//   return [\n//    ...numbers.map((number) => number * Math.min(...numbers)),\n//   ];\n// };\n\n// const rescaleToUnitInverseInverseInverse = (numbers) => {\n//   return [\n//    ...numbers.map((number) => number * Math.min(...numbers)),\n//   ];\n// };\n\n// const rescaleToUnitInverseInverseInverse = (numbers) => {\n//   return [\n//    ...numbers.map((number) => number * Math.min(...numbers)),\n//   ];\n// };\n\n/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitInverseInverseInverseInverse = (numbers) => {\n  return [\n   ...numbers.map((number) => number * Math.max(...numbers)),\n  ];\n};\n\n// const rescaleToUnitInverseInverseInverseInverse = (numbers) => {\n//   return [\n//    ...numbers.map((number) => number * Math.max(...numbers)),\n//   ];\n// };\n\n// const rescaleToUnitInverseInverseInverseInverse = (numbers) => {\n//   return [\n//    ...numbers.map((number) => number * Math.max(...numbers)),\n//   ];\n// };\n\n// const rescaleToUnitInverseInverseInverseInverse = (numbers) => {\n//   return [\n//    ...numbers.map((number) => number * Math.max(...numbers)),\n//   ];\n// };\n\n// const rescaleToUnitInverseInverseInverseInverse = (numbers) => {\n//   return [\n//    ...numbers.map((number) => number * Math.max(...numbers)),\n//   ];\n// };\n\n// const rescaleToUnitInverseInverseInverseInverse = (numbers) => {\n//   return [\n//    ...numbers.map((number) => number * Math.max(...numbers)),\n//   ];\n// };\n\n// const rescaleToUnitInverseInverseInverseInverse = (numbers) => {\n//   return [\n//    ...numbers.map((number) => number * Math.max(...numbers)),\n//"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isFinite(v));\n};\n\n/**\n  * Filter given list of any python value on ly for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n * Filter given list of any python value on ly for functions\n * @param {Array} values\n * @returns {Array}\n */\nconst filterFunctions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/**\n * Filter given list of any python value on ly for objects\n * @param {Array} values\n * @returns {Array}\n */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n * Filter given list of any python value on ly for empty\n * @param {Array} values\n * @returns {Array}\n */\nconst filterEmpty = (values) => {\n  return values.filter(v =>!v);\n};\n\n/**\n * Filter given list of any python value on ly for any string\n * @param {Array} values\n * @returns {Array}\n */\nconst filterAnyString = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n * Filter given list of any python value on ly for any integer\n * @param {Array} values\n * @returns {Array}\n */\nconst filterAnyInteger = (values) => {\n  return values.filter(v => typeof v === 'number' && isFinite(v));\n};\n\n/**\n * Filter given list of any python value on ly for any function\n * @param {Array} values\n * @returns {Array}\n */\nconst filterAnyFunction = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/**\n * Filter given list of any python value on ly for any object\n * @param {Array} values\n * @returns {Array}\n */\nconst filterAnyObject = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n * Filter given list of any python value on ly for any empty\n * @param {Array} values\n * @returns {Array}\n */\nconst filterAnyEmpty = (values) => {\n  return values.filter(v =>!v);\n};\n\nexport {\n  filterEmpty,\n  filterStrings,\n  filterFunctions,\n  filterObjects,\n  filterIntegers,\n  filterAnyString,\n  filterAnyInteger,\n  filterAnyFunction,\n  filterAnyObject,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": false, "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (typeof string!=='string') {\n    throw new TypeError('Expected a string');\n  }\n  return string.length;\n};\n\n/**\n  * Return index of a given character in a given string\n  * @param {string} string - input string\n  * @param {char} character - character to search for\n  * @return {number} index of given character in given string\n  * @example\n  * // Return index of \"abc\" at character \"a\"\n  * strindex(\"abc\", \"a\")\n  * // -> 1\n  */\nconst strindex = (string, character) => {\n  if (typeof string!=='string') {\n    throw new TypeError('Expected a string');\n  }\n  if (typeof character!=='string') {\n    throw new TypeError('Expected a string');\n  }\n  return string.indexOf(character);\n};\n\n/**\n  * Return index of a given string in a given string\n  * @param {string} string - input string\n  * @param {string} substr - string to search for\n  * @return {number} index of given string in given string\n  * @example\n  * // Return index of \"abc\" in \"abc\"\n  * strindex(\"abc\", \"abc\")\n  * // -> 0\n  */\nconst strindex = (string, substr) => {\n  if (typeof string!=='string') {\n    throw new TypeError('Expected a string');\n  }\n  if (typeof substr!=='string') {\n    throw new TypeError('Expected a string');\n  }\n  return string.indexOf(substr);\n};\n\n/**\n  * Return a new string that contains the characters of a given string\n  * @param {string} string - input string\n  * @return {string} new string that contains the characters of a given string\n  * @example\n  * // Return \"abc\"\n  * strchars(\"abc\")\n  * // -> \"abc\"\n  */\nconst strchars = (string) => {\n  if (typeof string!=='string') {\n    throw new TypeError('Expected a string');\n  }\n  return string.split('');\n};\n\n/**\n  * Return a new string that contains the characters of a given string\n  * @param {string} string - input string\n  * @param {string} substr - characters to search for\n  * @return {string} new string that contains the characters of a given string\n  * @example\n  * // Return \"abc\"\n  * strchars(\"abc\", \"a\")\n  * // -> \"c\"\n  */\nconst strchars = (string, substr) => {\n  if (typeof string!=='string') {\n    throw new TypeError('Expected a string');\n  }\n  if (typeof substr!=='string') {\n    throw new TypeError('Expected a string');\n  }\n  return string.split(substr).join('');\n};\n\n/**\n  * Return the characters of a given string\n  * @param {string} string - input string\n  * @return {string} characters of a given string\n  * @example\n  * // Return \"abc\"\n  * strchars(\"abc\")\n  * // -> \"abc\"\n  */\nconst strchars = (string) => {\n  if (typeof string!=='string') {\n    throw new TypeError('Expected a string');\n  }\n  return string;\n};\n\nmodule.exports = {\n  strlen,\n  strindex,\n  strchars,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let i = 1;\n  while (i < n) {\n    let remainder = n % i;\n    if (remainder === 0) return i;\n    i++;\n  }\n  return n;\n};\n\n/*\n  Find the smallest st nubmer that divides n\n  >>> smallestDivisor(15)\n  5\n  >>> smallestDivisor(19)\n  7\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let i = 1;\n  while (i < n) {\n    let remainder = n % i;\n    if (remainder === 0) return i;\n    i++;\n  }\n  return n;\n};\n\n/*\n  Find the largest st number that divides n evenly\n  >>> largestDivisible(15)\n  5\n  >>> largestDivisible(19)\n  7\n  >>> largestDivisible(15)\n  5\n  */\nconst largestDivisible = (n) => {\n  let i = 1;\n  while (i < n) {\n    let remainder = n % i;\n    if (remainder === 0) return i;\n    i++;\n  }\n  return n;\n};\n\n/*\n  Find the smallest st number that divides n evenly\n  >>> smallestDivisible(15)\n  5\n  >>> smallestDivisible(19)\n  7\n  >>> smallestDivisible(15)\n  5\n  */\nconst smallestDivisible = (n) => {\n  let i = 1;\n  while (i < n) {\n    let remainder = n % i;\n    if (remainder === 0) return i;\n    i++;\n  }\n  return n;\n};\n\n/*\n  Find the largest st number that divides n evenly\n  >>> largestRemainder(15)\n  5\n  >>> largestRemainder(19)\n  1\n  >>> largestRemainder(15)\n  5\n  */\nconst largestRemainder = (n) => {\n  let i = 1;\n  while (i < n) {\n    let remainder = n % i;\n    if (remainder === 0) return i;\n    i++;\n  }\n  return n;\n};\n\n/*\n  Find the smallest st number that divides n evenly\n  >>> smallestRemainder(15)\n  5\n  >>> smallestRemainder(19)\n  1\n  >>> smallestRemainder(15)\n  5\n  */\nconst smallestRemainder = (n) => {\n  let i = 1;\n  while (i < n) {\n    let remainder = n % i;\n    if (remainder === 0) return i;\n    i++;\n  }\n  return n;\n};\n\nconst sum = (n) => {\n  return largestDivisor(n) * largestDivisible(n) * largestRemainder(n) * smallestDivisible(n) * smallestRemainder(n);\n};\n\nconst largest = (n) => {\n  let largest = 1;\n  let num = largestDivisor(n);\n  while (num < n) {\n    if (n % num === 0) largest = num;\n    num = largestDivisor(n);\n  }\n  return largest;\n};\n\nconst smallest = (n) => {\n  let smallest = largestDivisor(n);\n  while (n % smallest === 0) smallest = largestDivisor(n);\n  return smallest;\n};\n\nconst smallestInverse = (n) => {\n  let s = 1 / largest(n);\n  let p = largest(n);\n  while (p!= 1) {\n    let t = s;\n    s = largestRemainder(n) * s + largestRemainder(p);\n    p = largest(p);\n    while (p!= 1) {\n      if (p % largest(n) === 0) largest(n) = largest(p);\n      p = largest(p);\n    }\n  }\n  return s;\n};\n\nconst st = (n) => {\n  let st = 1;\n  let num = largest(n);\n  while (num < n) {\n    if (n % num === 0) st = num;\n    num = largest(n);\n  }\n  return st;\n};\n\nconst largestProduct = (n) => {\n  let largest = 1;\n  let largestProduct = 1;\n  let num = largest(n);\n  while (num < n) {\n    if (n % num === 0) largest = num;\n    if (n % largest === 0) largestProduct = largest;\n    num = largest(n);\n  }\n  return largestProduct;\n};\n\nconst smallestProduct = (n) => {\n  let smallest = largest(n);\n  let smallestProduct = 1;\n  let num = largest(n);\n  while (num < n) {\n    if (n % num === 0) smallest = num;\n    if (n % smallest === 0) smallestProduct = smallest;\n    num = largest(n);\n  }\n  return smallestProduct;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) return false;\n  if (n % 2 === 0) return false;\n  let largest = largestProduct(n);\n  let smallest = largest(n);\n  let product = largestProduct(smallest);\n  let result = false;\n  while (product <= n) {\n    if (n % product === 0) result = true;\n    if (product === largestProduct(smallest)) {\n      result = false;\n      break;\n    }\n    product = largestProduct(smallest);\n  }\n  return result;\n};\n\nconst isPrimeNumber = (n) => {\n  if (n < 2) return false;\n  if (n === 1 || n === 2) return true;\n  if (isPrime(n)) return true;\n  return false;\n};\n\n/*\n  Find the largest st number that divides n evenly\n  >>> largestPrimeNumber(15)\n  5\n  >>> largestPrimeNumber(19)\n  7\n  >>> largestPrimeNumber(15)\n  5\n  */\nconst largestPrimeNumber = (n) => {\n  let largestPrime = 1;\n  let largestPrimeProduct = 1;\n  let largestPrimeNumber ="}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization .\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const primeFactors = []\n\n  for (let i = 1; i <= Math.sqrt(n); i++) {\n    let j = 2\n    while (n % j === 0) {\n      primeFactors.push(j)\n      n /= j\n    }\n  }\n\n  if (n > 1) {\n    primeFactors.push(n)\n  }\n\n  return primeFactors\n}\n\nmodule.exports = factorize\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t .\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n    let ret = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (ret.indexOf(numbers[i]) === -1) {\n            ret.push(numbers[i]);\n        }\n    }\n    return ret;\n}\n\n/**\n  * Return the smallest of the elements in a list.\n  *\n  * @param {Array} list\n  * @returns {any}\n  *\n  * @example\n  *\n  *   min([1, 2, 3])\n  *   // => 1\n  *\n  *   min(['A', 'B', 'C'])\n  *   // => 'A'\n  */\nconst min = (list) => {\n    let min = list[0];\n    for (let i = 1; i < list.length; i++) {\n        if (min > list[i]) {\n            min = list[i];\n        }\n    }\n    return min;\n}\n\n/**\n  * Return the largest of the elements in a list.\n  *\n  * @param {Array} list\n  * @returns {any}\n  *\n  * @example\n  *\n  *   max([1, 2, 3])\n  *   // => 3\n  *\n  *   max(['A', 'B', 'C'])\n  *   // => 'C'\n  */\nconst max = (list) => {\n    let max = list[0];\n    for (let i = 1; i < list.length; i++) {\n        if (max < list[i]) {\n            max = list[i];\n        }\n    }\n    return max;\n}\n\n/**\n  * Return the sum of the elements in a list.\n  *\n  * @param {Array} list\n  * @returns {number}\n  *\n  * @example\n  *\n  *   sum([1, 2, 3])\n  *   // => 6\n  *\n  *   sum(['A', 'B', 'C'])\n  *   // => 'ABC'\n  */\nconst sum = (list) => {\n    let sum = 0;\n    for (let i = 0; i < list.length; i++) {\n        sum += list[i];\n    }\n    return sum;\n}\n\n/**\n  * Return the mean of the elements in a list.\n  *\n  * @param {Array} list\n  * @returns {number}\n  *\n  * @example\n  *\n  *   mean([1, 2, 3])\n  *   // => 2\n  *\n  *   mean(['A', 'B', 'C'])\n  *   // => 'AB'\n  */\nconst mean = (list) => {\n    return sum(list) / list.length;\n}\n\n/**\n  * Return the median of the elements in a list.\n  *\n  * @param {Array} list\n  * @returns {number}\n  *\n  * @example\n  *\n  *   median([1, 2, 3])\n  *   // => 2\n  *\n  *   median(['A', 'B', 'C'])\n  *   // => 'A'\n  */\nconst median = (list) => {\n    let sorted = sort(list);\n    let middle = Math.floor(list.length / 2);\n    return list[sorted[middle]];\n}\n\n/**\n  * Return the mode of the elements in a list.\n  *\n  * @param {Array} list\n  * @returns {Array}\n  *\n  * @example\n  *\n  *   mode([1, 2, 3])\n  *   // => [1, 2, 3]\n  *\n  *   mode(['A', 'B', 'C'])\n  *   // => ['A', 'B', 'C']\n  */\nconst mode = (list) => {\n    let modes = [];\n    for (let i = 0; i < list.length; i++) {\n        let count = 0;\n        for (let j = 0; j < list.length; j++) {\n            if (list[j] === list[i]) {\n                count++;\n            }\n        }\n        if (count > 1) {\n            modes.push(list[i]);\n        }\n    }\n    return modes;\n}\n\n/**\n  * Return the mode of the elements in a list.\n  *\n  * @param {Array} list\n  * @returns {Array}\n  *\n  * @example\n  *\n  *   mode([1, 2, 3])\n  *   // => [1, 2, 3]\n  *\n  *   mode(['A', 'B', 'C'])\n  *   // => ['A', 'B', 'C']\n  */\nconst mode2 = (list) => {\n    let modes = [];\n    for (let i = 0; i < list.length; i++) {\n        let count = 0;\n        for (let j = 0; j < list.length; j++) {\n            if (list[j] === list[i]) {\n                count++;\n            }\n        }\n        if (count > 1) {\n            modes.push(list[i]);\n        }\n    }\n    return modes;\n}\n\n/**\n  * Return the mode of the elements in a list.\n  *\n  * @param {Array} list\n  * @returns {Array}\n  *\n  * @example\n  *\n  *   mode([1, 2, 3])\n  *   // => [1, 2, 3]\n  *\n  *   mode(['A', 'B', 'C'])\n  *   // => ['A', 'B', 'C']\n  */\nconst mode3 = (list) => {\n    let modes = [];\n    for (let i = 0; i < list.length; i++) {\n        let count = 0;\n        for (let j = 0; j < list.length; j++) {\n            if (list[j] === list[i]) {\n                count++;\n            }"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, c => {\n    if (c === 'A') {\n      return 'Z';\n    } else if (c === 'a') {\n      return 'z';\n    } else if (c === 'L') {\n      return 'l';\n    } else if (c === 'l') {\n      return 'L';\n    }\n    return c.toUpperCase();\n  });\n};\n\n/*\n  # Concatenate two lists\n  >>> concat([1, 2, 3], [4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  */\nconst concat = (first, second) => {\n  return first.concat(second);\n};\n\n/*\n  # Return a new list containing the last element in the first list followed by all the elements in the second list.\n  >>> concat([1, 2, 3], [4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> concat([1, 2, 3], [])\n  [1, 2, 3]\n  */\nconst tail = (first, second) => {\n  return first.concat(second);\n};\n\n/*\n  # Given a list, create a new list where every even element has been replaced by its inverse.\n  >>> tail([1, 2, 3, 4, 5, 6], [2, 4, 6, 8, 10, 12])\n  [1, 3, 5, 7, 9, 11, 13]\n  */\nconst reverse = (list) => {\n  return list.slice().reverse();\n};\n\n/*\n  # Given a list, create a new list of its squares.\n  >>> square([1, 2, 3])\n  [1, 4, 9]\n  */\nconst square = (list) => {\n  return list.map(i => i * i);\n};\n\n/*\n  # Given a list, create a new list of its squares.\n  >>> square([1, 2, 3, 4, 5])\n  [1, 4, 9, 16, 25]\n  */\nconst squareOf = (list) => {\n  return list.map(i => i * i);\n};\n\n/*\n  # Given a list, create a new list of the first elements of its even-indexed elements.\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10, 12]\n  */\nconst evens = (list) => {\n  return list.filter(i => i % 2 === 0);\n};\n\n/*\n  # Given a list, create a new list of the first elements of its odd-indexed elements.\n  >>> odds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [3, 5, 7, 9, 11]\n  */\nconst odds = (list) => {\n  return list.filter(i => i % 2!== 0);\n};\n\n/*\n  # Given a list, create a new list of the first elements of its even-indexed elements.\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10, 12]\n  */\nconst odds = (list) => {\n  return list.filter(i => i % 2!== 0);\n};\n\n/*\n  # Given a list, create a new list of the first elements of its even-indexed elements.\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10, 12]\n  */\nconst odds = (list) => {\n  return list.filter(i => i % 2!== 0);\n};\n\n/*\n  # Given a list, create a new list of the first elements of its even-indexed elements.\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10, 12]\n  */\nconst evens = (list) => {\n  return list.filter(i => i % 2 === 0);\n};\n\n/*\n  # Given a list, create a new list of the first elements of its odd-indexed elements.\n  >>> odds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [3, 5, 7, 9, 11]\n  */\nconst odd = (list) => {\n  return list.filter(i => i % 2 === 1);\n};\n\nmodule.exports = {\n  concat,\n  flipCase,\n  concat,\n  tail,\n  reverse,\n  square,\n  squareOf,\n  evens,\n  odds,\n  odd,\n  evens\n};\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, cur) => acc + cur, '')\n}\n\n/* Returns the length of a string */\nconst length = (str) => {\n  return str.length\n}\n\n/* Converts the characters in a string to lower case */\nconst toLower = (str) => {\n  return str.toLowerCase()\n}\n\n/* Converts the characters in a string to upper case */\nconst toUpper = (str) => {\n  return str.toUpperCase()\n}\n\n/* Returns the index of a character in a string */\nconst indexOf = (str, chr) => {\n  return str.indexOf(chr)\n}\n\n/* Returns the index of a character in a string */\nconst lastIndexOf = (str, chr) => {\n  return str.lastIndexOf(chr)\n}\n\n/* Returns the index of a character in a string */\nconst substr = (str, start, end) => {\n  return str.substr(start, end)\n}\n\n/* Returns the index of a character in a string */\nconst substrAfter = (str, chr) => {\n  return str.substr(str.indexOf(chr) + 1)\n}\n\n/* Returns the index of a character in a string */\nconst substrBefore = (str, chr) => {\n  return str.substr(0, str.indexOf(chr))\n}\n\n/* Returns the index of a character in a string */\nconst substrFrom = (str, start) => {\n  return str.substr(start)\n}\n\n/* Returns the index of a character in a string */\nconst substrTo = (str, end) => {\n  return str.substr(0, end)\n}\n\n/* Returns the number of times a character occurs in a string */\nconst count = (str, chr) => {\n  return str.split(chr).length - 1\n}\n\n/* Returns the number of times a character occurs in a string */\nconst countAfter = (str, chr) => {\n  return str.split(chr).filter(str => str.length > 0).length\n}\n\n/* Returns the number of times a character occurs in a string */\nconst countBefore = (str, chr) => {\n  return str.split(chr).filter(str => str.length > 0).length - 1\n}\n\n/* Returns the number of times a character occurs in a string */\nconst countFrom = (str, start) => {\n  return str.split('').filter(str => str.length > start).length\n}\n\n/* Returns the number of times a character occurs in a string */\nconst countTo = (str, end) => {\n  return str.split('').filter(str => str.length > end).length\n}\n\n/* Returns a string that consists of the characters in a string */\nconst chars = (str) => {\n  return str.split('').join('')\n}\n\n/* Returns a string that consists of the characters in a string */\nconst charsAfter = (str, chr) => {\n  return str.split(chr).join('')\n}\n\n/* Returns a string that consists of the characters in a string */\nconst charsBefore = (str, chr) => {\n  return str.split(chr).reverse().join('')\n}\n\n/* Returns a string that consists of the characters in a string */\nconst charsFrom = (str, start) => {\n  return str.split('').slice(start).join('')\n}\n\n/* Returns a string that consists of the characters in a string */\nconst charsTo = (str, end) => {\n  return str.split('').slice(0, end).reverse().join('')\n}\n\n/* Returns a string that consists of the characters in a string */\nconst first = (str) => {\n  return str.split('').join('')\n}\n\n/* Returns a string that consists of the characters in a string */\nconst last = (str) => {\n  return str.split('').reverse().join('')\n}\n\n/* Returns a string that consists of the characters in a string */\nconst lastAfter = (str, chr) => {\n  return str.split(chr).reverse().join('')\n}\n\n/* Returns a string that consists of the characters in a string */\nconst lastBefore = (str, chr) => {\n  return str.split(chr).join('')\n}\n\n/* Returns a string that consists of the characters in a string */\nconst lastFrom = (str, start) => {\n  return str.split('').slice(start).join('')\n}\n\n/* Returns a string that consists of the characters in a string */\nconst lastTo = (str, end) => {\n  return str.split('').slice(0, end).reverse().join('')\n}\n\n/* Returns a string that consists of the characters in a string */\nconst middle = (str, start, end) => {\n  return str.split('').slice(start, end).reverse().join('')\n}\n\n/* Returns a string that consists of the characters in a string */\nconst middleAfter = (str, chr, start) => {\n  return str.split(chr).slice(start).join('')\n}\n\n/* Returns a string that consists of the characters in a string */\nconst middleBefore = (str, chr, start) => {\n  return str.split(chr).slice(0, start).reverse().join('')\n}\n\n/* Returns a string that consists of the characters in a string */\nconst middleFrom = (str, start) => {\n  return str.split('').slice(start).join('')\n}\n\n/* Returns a string that consists of the characters in a string */\nconst middleTo = (str, end) => {\n  return str.split('').slice(0, end).reverse().join('')\n}\n\n/* Returns a string that consists of the characters in a string */\nconst repeat = (str, count) => {\n  return str.repeat(count)\n}\n\n/* Returns a string that consists of the characters in a string */\nconst repeatAfter = (str, chr, count) => {\n  return str.split(chr).slice("}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (!strings) return []\n\n  return strings.filter(str => str.startsWith(prefix))\n}\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'ab')\n  ['abc']\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'cde')\n  ['array']\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  []\n  */\nconst filterByContains = (strings, substr) => {\n  if (!strings) return []\n\n  return strings.filter(str => str.includes(substr))\n}\n\n/* Remove an input list of strings that contain a given substring.\n  >>> removeByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde', 'array']\n  >>> removeByContains(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'cde', 'array']\n  >>> removeByContains(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['abc', 'bcd', 'array']\n  >>> removeByContains(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['abc', 'bcd', 'cde', 'array']\n  >>> removeByContains(['abc', 'bcd', 'cde', 'array'], 'array')\n  ['abc', 'bcd', 'cde']\n  */\nconst removeByContains = (strings, substr) => {\n  if (!strings) return []\n\n  return strings.filter(str =>!str.includes(substr))\n}\n\n/* Return a list of the first N unique elements of an input list of strings.\n  >>> unique([])\n  []\n  >>> unique([1, 2, 3])\n  [1, 2, 3]\n  >>> unique([1, 1, 1, 2, 2, 2, 3, 3, 3])\n  [1, 2, 3]\n  >>> unique([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst unique = (strings) => {\n  if (!strings) return []\n\n  let sorted = strings.sort()\n  let result = []\n  let i = 0\n\n  while (result.length < strings.length) {\n    if (i === sorted.length) break\n\n    if (sorted[i]!== result[result.length - 1]) {\n      result.push(sorted[i])\n    }\n\n    i++\n  }\n\n  return result\n}\n\n/* Return a list of the first N unique elements of an input list of strings.\n  >>> uniqueByLength([])\n  []\n  >>> uniqueByLength([1, 2, 3])\n  [1, 2, 3]\n  >>> uniqueByLength([1, 1, 1, 2, 2, 2, 3, 3, 3])\n  [1, 2, 3]\n  >>> uniqueByLength([1, 2, 3, 4, 5, 6, 7, 8, 9, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst uniqueByLength = (strings) => {\n  if (!strings) return []\n\n  let sorted = strings.sort((a, b) => a.length - b.length)\n  let result = []\n  let i = 0\n\n  while (result.length < strings.length) {\n    if (i === sorted.length) break\n\n    if (sorted[i].length!== result[result.length - 1].length) {\n      result.push(sorted[i])\n    }\n\n    i++\n  }\n\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n    let result = []\n    for (let i = 0; i < l.length; i++) {\n        let val = l[i]\n        if (val > 0) {\n            result.push(val)\n        }\n    }\n    return result\n}\n\n/*\n  >>> getAll([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> getAll([2, 3, 4, 5])\n  [2, 3, 4, 5]\n  >>> getAll([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> getAll([1, -2, 3, -4, 5])\n  [1, -2, 3, -4, 5]\n  >>> getAll([1, 2, 3, 4, 5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> getAll([-1, -2, -3, -4, -5])\n  [-1, -2, -3, -4, -5]\n  >>> getAll([1, -2, 3, -4, 5, 6, 7, 8])\n  [1, -2, 3, -4, 5, 6, 7, 8]\n  >>> getAll([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> getAll([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> getAll([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> getAll([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> getAll([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n  >>> getAll([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n  >>> getAll([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  >>> getAll([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> getAll([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n  >>> getAll([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n  >>> getAll([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n  >>> getAll([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> getAll([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n  >>> getAll([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n  >>> getAll([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]\n  >>> getAll([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false\n  if (n === 2) return true\n  if (n === 3) return false\n  if (n % 2 === 0) return false\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*\n  Return the number of prime numbers less than or equal to n\n  >>> countPrimes(100)\n  50\n  >>> countPrimes(1)\n  1\n  >>> countPrimes(2)\n  1\n  >>> countPrimes(3)\n  2\n  >>> countPrimes(5)\n  3\n  >>> countPrimes(7)\n  4\n  >>> countPrimes(11)\n  5\n  >>> countPrimes(13441)\n  53\n  >>> countPrimes(6)\n  1\n  >>> countPrimes(1)\n  1\n  */\nconst countPrimes = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Return the sum of all the primes below or equal to n\n  >>> sumPrimes(100)\n  50\n  >>> sumPrimes(1)\n  1\n  >>> sumPrimes(2)\n  1\n  >>> sumPrimes(3)\n  2\n  >>> sumPrimes(5)\n  3\n  >>> sumPrimes(7)\n  4\n  >>> sumPrimes(11)\n  5\n  >>> sumPrimes(13441)\n  53\n  >>> sumPrimes(6)\n  1\n  >>> sumPrimes(1)\n  1\n  */\nconst sumPrimes = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      sum += i\n    }\n  }\n  return sum\n}\n\n/*\n  >>> sumPrimes(100)\n  50\n  >>> sumPrimes(1)\n  1\n  >>> sumPrimes(2)\n  1\n  >>> sumPrimes(3)\n  2\n  >>> sumPrimes(5)\n  3\n  >>> sumPrimes(7)\n  4\n  >>> sumPrimes(11)\n  5\n  >>> sumPrimes(13441)\n  53\n  >>> sumPrimes(6)\n  1\n  >>> sumPrimes(1)\n  1\n  */\n\nconst sumPrimesRecursive = (n) => {\n  if (n <= 1) return 1\n  return sumPrimesRecursive(n - 1) + sumPrimesRecursive(n - 2)\n}\n\n/*\n  Return the number of prime numbers less than or equal to n\n  >>> countPrimesRecursive(100)\n  50\n  >>> countPrimesRecursive(1)\n  1\n  >>> countPrimesRecursive(2)\n  1\n  >>> countPrimesRecursive(3)\n  2\n  >>> countPrimesRecursive(5)\n  3\n  >>> countPrimesRecursive(7)\n  4\n  >>> countPrimesRecursive(11)\n  5\n  >>> countPrimesRecursive(13441)\n  53\n  >>> countPrimesRecursive(6)\n  1\n  >>> countPrimesRecursive(1)\n  1\n  */\nconst countPrimesRecursive = (n) => {\n  if (n <= 1) return 1\n  if (isPrime(n)) return 1\n  return countPrimesRecursive(n - 1) + countPrimesRecursive(n - 2)\n}\n\n/*\n  Return the sum of all the primes below or equal to n\n  >>> sumPrimesRecursive(100)\n  50\n  >>> sumPrimesRecursive(1)\n  1\n  >>> sumPrimesRecursive(2)\n  1\n  >>> sumPrimesRecursive(3)\n  2\n  >>> sumPrimesRecursive(5)\n  3\n  >>> sumPrimesRecursive(7)\n  4\n  >>> sumPrimesRecursive(11)\n  5\n  >>> sumPrimesRecursive(13441)\n  53\n  >>> sumPrimesRecursive(6)\n  1\n  >>> sumPrimesRecursive(1)\n  1\n  */\nconst sumPrimesRecursive = (n) => {\n  if (n <= 1) return 1\n  if (isPrime(n)) return n\n  return sumPrimesRecursive(n - 1) + sumPrimesRecursive(n - 2)\n}\n\nmodule.exports = {\n  isPrime,\n  countPrimes,\n  sumPrimesRecursive,\n  sumPrimes\n}\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const max = xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n  const min = xs.reduce((prev,  it em, index) =>{\n    returnprev - item * Math.pow(x,index);\n  }, 0);\n  return xs[0] * (min - xs[0]) / (max - xs[0]) + xs[0];\n}\n\nconst findX = (x, xs) => {\n  const coeff = oly(xs, x);\n  return findZero(xs);\n}\n\nconst findX2 = (x, xs) => {\n  const coeff = oly(xs, x);\n  return findZero(xs);\n}\n\n/* xs ar e coefficien ts ofa polynom ial.\n  findX finds the coefficien ts of a polynomial such that f(x) = 0.\n  findX2 finds the coefficien ts of a polynomial such that f(x) = 0.\n  findX returns all the coefficien ts of a polynomail, but takes in one x value only\n  findX2 returns all the coefficien ts of a polynomail, but takes in one x value only\n  */\nconst findX2 = (x, xs) => {\n  const coeff = oly(xs, x);\n  return coeff;\n}\n\n/* xs ar e coefficien ts ofa polynom ial.\n  findX2 finds the coefficien ts of a polynomail such that f(x) = 0.\n  findX2 finds the coefficien ts of a polynomail such that f(x) = 0.\n  findX2 finds the coefficien ts of a polynomail, but takes in one x value only\n  */\nconst findX3 = (x, xs) => {\n  const coeff = oly(xs, x);\n  return coeff;\n}\n\n/* xs ar e coefficien ts ofa polynom ial.\n  findX finds the coefficien ts of a polynomail such that f(x) = 0.\n  findX2 finds the coefficien ts of a polynomail such that f(x) = 0.\n  findX finds the coefficien ts of a polynomail, but takes in one x value only\n  findX2 finds the coefficien ts of a polynomail, but takes in one x value only\n  */\nconst findX4 = (x, xs) => {\n  const coeff = oly(xs, x);\n  return coeff;\n}\n\nconst findX5 = (x, xs) => {\n  const coeff = oly(xs, x);\n  return coeff;\n}\n\nconst findX6 = (x, xs) => {\n  const coeff = oly(xs, x);\n  return coeff;\n}\n\nconst findX7 = (x, xs) => {\n  const coeff = oly(xs, x);\n  return coeff;\n}\n\nconst findX8 = (x, xs) => {\n  const coeff = oly(xs, x);\n  return coeff;\n}\n\nconst findX9 = (x, xs) => {\n  const coeff = oly(xs, x);\n  return coeff;\n}\n\nconst findX10 = (x, xs) => {\n  const coeff = oly(xs, x);\n  return coeff;\n}\n\nconst findX11 = (x, xs) => {\n  const coeff = oly(xs, x);\n  return coeff;\n}\n\nconst findX12 = (x, xs) => {\n  const coeff = oly(xs, x);\n  return coeff;\n}\n\nconst findX13 = (x, xs) => {\n  const coeff = oly(xs, x);\n  return coeff;\n}\n\nconst findX14 = (x, xs) => {\n  const coeff = oly(xs, x);\n  return coeff;\n}\n\nconst findX15 = (x, xs) => {\n  const coeff = oly(xs, x);\n  return coeff;\n}\n\nconst findX16 = (x, xs) => {\n  const coeff = oly(xs, x);\n  return coeff;\n}\n\nconst findX17 = (x, xs) => {\n  const coeff = oly(xs, x);\n  return coeff;\n}\n\nconst findX18 = (x, xs) => {\n  const coeff = oly(xs, x);\n  return coeff;\n}\n\nconst findX19 = (x, xs) => {\n  const coeff = oly(xs, x);\n  return coeff;\n}\n\nconst findX20 = (x, xs) => {\n  const coeff = oly(xs, x);\n  return"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let len = l.length\n  let ret = []\n  let i = 0\n  while (i < len) {\n    let a = l[i]\n    let j = i + 1\n    while (j < len) {\n      let b = l[j]\n      if (a % 3 === b % 3) {\n        ret.push(a)\n        l.splice(j, 1)\n        len = l.length\n      } else if (a % 3 < b % 3) {\n        j++\n      } else {\n        l.splice(i, 1)\n        len = l.length\n      }\n    }\n    i++\n  }\n  return ret\n}\n\n/*This function takes a list l and returns the elements of l, which are multiples of 3,\n  but are not repeated.\n  >>> sortThird([1, 2, 3, 3, 3])\n  [3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [3, 6, 9]\n  */\nconst sortThird2 = (l) => {\n  let ret = []\n  let len = l.length\n  let i = 0\n  while (i < len) {\n    let a = l[i]\n    if (a % 3 === 0) {\n      ret.push(a)\n      l.splice(i, 1)\n      len = l.length\n    } else {\n      i++\n    }\n  }\n  return ret\n}\n\nmodule.exports = {\n  sortThird,\n  sortThird2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const res = []\n  for (let i = 0; i < l.length; i++) {\n    const el = l[i]\n    if (res.indexOf(el) === -1) {\n      res.push(el)\n    }\n  }\n  return res\n}\n\n/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique_v2 = (l) => {\n  const res = []\n  for (let i = 0; i < l.length; i++) {\n    const el = l[i]\n    if (res.indexOf(el) === -1) {\n      res.push(el)\n    }\n  }\n  return res\n}\n\n/* Return the largest element in a list\n  >>> largest([1, 2, 3, 4])\n  4\n  */\nconst largest = (l) => {\n  return Math.max.apply(Math, l)\n}\n\n/* Return the largest element in a list\n  >>> largest([1, 2, 3, 4])\n  4\n  */\nconst largest_v2 = (l) => {\n  return Math.max.apply(Math, l)\n}\n\n/* Return the largest element in a list\n  >>> largest([1, 2, 3, 4])\n  4\n  */\nconst largest_v3 = (l) => {\n  return l.reduce((a, b) => {\n    if (a > b) {\n      return a\n    } else {\n      return b\n    }\n  })\n}\n\n/* Return the largest element in a list\n  >>> largest([1, 2, 3, 4])\n  4\n  */\nconst largest_v4 = (l) => {\n  return l.reduce((a, b) => {\n    if (a > b) {\n      return a\n    } else {\n      return b\n    }\n  })\n}\n\n/* Return the largest element in a list\n  >>> largest([1, 2, 3, 4])\n  4\n  */\nconst largest_v5 = (l) => {\n  return largest(l.map(Number))\n}\n\n/* Return the largest element in a list\n  >>> largest([1, 2, 3, 4])\n  4\n  */\nconst largest_v6 = (l) => {\n  return largest(l.map(Number).filter(x => x!= null))\n}\n\n/* Return the largest element in a list\n  >>> largest([1, 2, 3, 4])\n  4\n  */\nconst largest_v7 = (l) => {\n  return largest(l.map(Number).filter(x => x!= null).map(Number))\n}\n\n/* Return the largest element in a list\n  >>> largest([1, 2, 3, 4])\n  4\n  */\nconst largest_v8 = (l) => {\n  return largest(l.map(Number).filter(x => x!= null).map(Number).filter(x => x!= null))\n}\n\n/* Return the largest element in a list\n  >>> largest([1, 2, 3, 4])\n  4\n  */\nconst largest_v9 = (l) => {\n  return largest(l.map(Number).filter(x => x!= null).map(Number).filter(x => x!= null).filter(x => x!= null))\n}\n\n/* Return the largest element in a list\n  >>> largest([1, 2, 3, 4])\n  4\n  */\nconst largest_v10 = (l) => {\n  return largest(l.map(Number).filter(x => x!= null).map(Number).filter(x => x!= null).filter(x => x!= null).filter(x => x!= null))\n}\n\n/* Return the largest element in a list\n  >>> largest([1, 2, 3, 4])\n  4\n  */\nconst largest_v11 = (l) => {\n  return largest(l.map(Number).filter(x => x!= null).map(Number).filter(x => x!= null).filter(x => x!= null).filter(x => x!= null).filter(x => x!= null))\n}\n\n/* Return the largest element in a list\n  >>> largest([1, 2, 3, 4])\n  4\n  */\nconst largest_v12 = (l) => {\n  return largest(l.map(Number).filter(x => x!= null).map(Number).filter(x => x!= null).filter(x => x!= null).filter(x => x!= null).filter(x => x!= null).filter(x => x!= null))\n}\n\n/* Return the largest element in a list\n  >>> largest([1, 2, 3, 4])\n  4\n  */\nconst largest_v13 = (l) => {\n  return largest(l.map(Number).filter(x => x!= null).map(Number).filter(x => x!= null).filter(x => x!= null).filter(x => x!= null).filter(x => x!= null).filter(x => x!= null).filter(x => x!= null))\n}\n\n/* Return the largest element in a list\n  >>> largest([1, 2, 3, 4])\n  4\n  */\nconst largest_v14 = (l) => {\n  return largest(l.map(Number).filter(x => x!= null).map(Number).filter(x => x!= null).filter(x => x!= null).filter(x => x!= null).filter(x => x!= null).filter(x => x!= null).filter(x => x!= null).filter(x => x!= null))\n}\n\n/* Return the largest element in a list\n  >>> largest([1, 2, 3, 4])\n  4\n  */\nconst largest_v15 = (l) => {\n  return largest(l.map(Number).filter(x => x!= null).map(Number).filter(x => x!= null).filter(x => x!= null).filter(x => x!= null).filter(x => x!= null).filter(x => x!= null).filter(x => x!= null).filter(x => x!= null).filter(x => x!= null)."}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return max\n}\n\n/*\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i]\n    }\n  }\n  return min\n}\n\n/*\n  >>> sort([1, 2, 3])\n  [1, 2, 3]\n  >>> sort([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-10, -3, -5, 0, 1, 2, 3, 3, 9, 123, 5]\n  */\nconst sort = (l) => {\n  return l.sort((a, b) => a - b)\n}\n\n/*\n  >>> shuffle([1, 2, 3])\n  [1, 2, 3]\n  >>> shuffle([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-10, -3, -5, 0, 1, 2, 3, 3, 9, 123, 5]\n  */\nconst shuffle = (l) => {\n  let shuffled = []\n  for (let i = 0; i < l.length; i++) {\n    shuffled.push(l[i])\n  }\n  shuffled = shuffle(shuffled)\n  return shuffled\n}\n\n/*\n  >>> reverse([1, 2, 3])\n  [3, 2, 1]\n  >>> reverse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [9, 0, 123, 1, -10, -3, -5, 2, 3, 3, 9]\n  */\nconst reverse = (l) => {\n  return l.reverse()\n}\n\n/*\n  >>> sortBy(sort([1, 2, 3]), (x) => x)\n  [1, 2, 3]\n  >>> sortBy(sort([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), (x) => x)\n  [-10, -3, -5, 0, 1, 2, 3, 3, 9, 123, 5]\n  */\nconst sortBy = (l, f) => {\n  return l.sort((x, y) => f(x) - f(y))\n}\n\n/*\n  >>> sortByDescending(sort([1, 2, 3]), (x) => x)\n  [3, 2, 1]\n  >>> sortByDescending(sort([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), (x) => x)\n  [9, 0, 123, 1, -10, -3, -5, 2, 3, 3, 9]\n  */\nconst sortByDescending = (l, f) => {\n  return l.sort((x, y) => f(y) - f(x))\n}\n\n/*\n  >>> take(3, [1, 2, 3])\n  [1, 2, 3]\n  >>> take(3, [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5]\n  >>> take(3, [1, 2, 3, 4, 5, 6])\n  []\n  */\nconst take = (n, l) => {\n  return l.slice(0, n)\n}\n\n/*\n  >>> drop(3, [1, 2, 3])\n  [3, 2, 1]\n  >>> drop(3, [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [9, 0, 123, 1, -10, -3, -5, 2, 3]\n  >>> drop(3, [1, 2, 3, 4, 5, 6])\n  []\n  */\nconst drop = (n, l) => {\n  return l.slice(n)\n}\n\n/*\n  >>> concat([1, 2, 3], [4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> concat([1, 2, 3], [4, 5, 6], [7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst concat = (...l) => {\n  return l.concat(l)\n}\n\n/*\n  >>> filter(isEven, [1, 2, 3, 4, 5, 6])\n  [2, 4, 6]\n  >>> filter(isEven, [1, 2, 3, 4, 5, 6], [7, 8, 9])\n  [2, 4, 6]\n  */\nconst filter = (f, l) => {\n  return l.filter(f)\n}\n\n/*\n  >>> partition(isEven, [1, 2, 3, 4, 5, 6])\n  [\n    [1, 2, 3, 4, 5, 6],\n    [2, 4, 6]\n  ]\n  >>> partition(isEven, [1, 2, 3, 4, 5, 6], [7, 8, 9])\n  [\n    [1, 2, 3, 4, 5, 6],\n    [7, 8, 9]\n  ]\n  */\nconst partition = (f, l) => {\n  let [p, q] = [0, l.length]\n  while (p < q) {\n    let [n] = partition(f, l[p:q])\n    p += n[0]\n    q += n["}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n    return n\n       .toString()\n       .split('')\n       .map(num => {\n            const numDigits = num.length;\n            const numStr = num.toString();\n            const divisors = [2, 3, 5, 7, 11, 13];\n\n            const divisible = divisors\n               .filter(div => div > 0)\n               .every(div => numStr.includes(div.toString()));\n\n            if (divisible) {\n                return 1;\n            }\n\n            return numDigits;\n        });\n};\n\n/*\n  fizzBuzz(78)\n  => 2\n  >>> fizzBuzz(79)\n  3\n  >>> fizzBuzz(88)\n  4\n  >>> fizzBuzz(89)\n  5\n  >>> fizzBuzz(99)\n  6\n  >>> fizzBuzz(100)\n  7\n  >>> fizzBuzz(101)\n  8\n  >>> fizzBuzz(101)\n  8\n  >>> fizzBuzz(100)\n  8\n  >>> fizzBuzz(100)\n  8\n  >>> fizzBuzz(101)\n  9\n  >>> fizzBuzz(101)\n  9\n  >>> fizzBuzz(100)\n  9\n  >>> fizzBuzz(100)\n  9\n  >>> fizzBuzz(100)\n  9\n  >>> fizzBuzz(101)\n  10\n  >>> fizzBuzz(101)\n  10\n  >>> fizzBuzz(100)\n  10\n  >>> fizzBuzz(100)\n  10\n  >>> fizzBuzz(101)\n  11\n  >>> fizzBuzz(101)\n  11\n  >>> fizzBuzz(100)\n  11\n  >>> fizzBuzz(100)\n  11\n  >>> fizzBuzz(101)\n  12\n  >>> fizzBuzz(101)\n  12\n  >>> fizzBuzz(100)\n  12\n  >>> fizzBuzz(100)\n  12\n  >>> fizzBuzz(101)\n  13\n  >>> fizzBuzz(101)\n  13\n  >>> fizzBuzz(100)\n  13\n  >>> fizzBuzz(100)\n  13\n  >>> fizzBuzz(101)\n  14\n  >>> fizzBuzz(101)\n  14\n  >>> fizzBuzz(100)\n  14\n  >>> fizzBuzz(100)\n  14\n  >>> fizzBuzz(101)\n  15\n  >>> fizzBuzz(101)\n  15\n  >>> fizzBuzz(100)\n  15\n  >>> fizzBuzz(100)\n  15\n  >>> fizzBuzz(101)\n  16\n  >>> fizzBuzz(101)\n  16\n  >>> fizzBuzz(100)\n  16\n  >>> fizzBuzz(100)\n  16\n  >>> fizzBuzz(101)\n  17\n  >>> fizzBuzz(101)\n  17\n  >>> fizzBuzz(100)\n  17\n  >>> fizzBuzz(100)\n  17\n  >>> fizzBuzz(101)\n  18\n  >>> fizzBuzz(101)\n  18\n  >>> fizzBuzz(100)\n  18\n  >>> fizzBuzz(100)\n  18\n  >>> fizzBuzz(101)\n  19\n  >>> fizzBuzz(101)\n  19\n  >>> fizzBuzz(100)\n  19\n  >>> fizzBuzz(100)\n  19\n  >>> fizzBuzz(101)\n  20\n  >>> fizzBuzz(101)\n  20\n  >>> fizzBuzz(100)\n  20\n  >>> fizzBuzz(100)\n  20\n  >>> fizzBuzz(101)\n  21\n  >>> fizzBuzz(101)\n  21\n  >>> fizzBuzz(100)\n  21\n  >>> fizzBuzz(100)\n  21\n  >>> fizzBuzz(101)\n  22\n  >>> fizzBuzz(101)\n  22\n  >>> fizzBuzz(100)\n  22\n  >>> fizzBuzz(100)\n  22\n  >>> fizzBuzz(101)\n  23\n  >>> fizzBuzz(101)\n  23\n  >>> fizzBuzz(100)\n  23\n  >>> fizzBuzz(100)\n  23\n  >>> fizzBuzz(101)\n  24\n  >>> fizzBuzz(101)\n  24\n  >>> fizzBuzz(100)\n  24\n  >>> fizzBuzz(100)\n  24\n  >>> fizzBuzz(101)\n  25\n  >>> fizzBuzz(101)\n  25\n  >>> fizzBuzz(100)\n  25\n  >>> fizzBuzz(100)\n  25\n  >>> fizzBuzz(101)\n  26\n  >>> fizzBuzz(101)\n  26\n  >>> fizzBuzz(100)\n  26\n  >>> fizzBuzz(100)\n  26\n  >>> fizzBuzz(101)\n  27\n  >>> fizzBuzz(101)\n  27\n  >>> fizzBuzz(100)\n  27\n  >>> fizzBuzz(100)\n  27\n  >>> fizzBuzz(101)\n  28\n  >>> fizzBuzz(101)\n  28\n  >>> fizzBuzz(100)\n  28\n  >>> fizzBuzz(100)\n  28\n  >>> fizzBuzz(101)\n  29\n  >>> fizzBuzz(101)\n  29\n  >>> fizzBuzz(100)\n  29\n  >>> fizzBuzz(100)\n  29\n  >>> fizzBuzz(101)\n  30\n  >>> fizzBuzz(101)\n  30\n  >>> fizzBuzz(100)\n  30\n  >>> fizzBuzz(100)\n  30\n  >>> fizzBuzz(101)\n  31\n  >>> fizzBuzz(101)\n  31\n  >>> fizzBuzz(100)\n  31\n  >>> fizzBuzz(100)\n  31\n  >>> fizzBuzz(101)\n  32\n  >>> fizzBuzz(101)\n  32\n  >>> fizzBuzz(100)\n  32\n  >>> fizzBuzz(100)\n  32\n  >>> fizzBuzz(101)\n  33\n  >>> fizzBuzz(101)\n  33\n  >>> fizzBuzz(100)\n  33\n  >>> fizz"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let a = [...l];\n  let b = a;\n  let temp;\n  let i;\n  for(i = 0; i < a.length; i += 2){\n    temp = a[i];\n    a[i] = a[i + 1];\n    a[i + 1] = temp;\n  }\n  return b;\n};\n\nmodule.exports = sortEven;\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math .min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n  var groups2 = [ ], group = '', groups = [ ];\n  for(leti = 0; i < s.len g th; i++) {\n    groups2.push(group + s.slice(3 * i, Math.min(3 * i + 3, s.len g th))); \n  }\n  for(constgroup ofgroups2) {\n    groups. push(group.slice(1) + group [0]);\n  }\n  return groups;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    let i = 1;\n    let f = 2;\n    while(i < n) {\n        f = f + i;\n        i++;\n    }\n    return f;\n};\n\nconst isPrime = (n) => {\n    let i = 2;\n    while(i < n) {\n        if(n % i == 0) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\nconst fib = (n) => {\n    let result = 2;\n    let isPrime = false;\n    if(n < 2) {\n        return 1;\n    }\n    if(isPrime(n)) {\n        return n;\n    }\n    while(true) {\n        if(isPrime(result)) {\n            return result;\n        }\n        result = result + fib(n-result);\n    }\n}\n\nmodule.exports = fib;\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    const set = new Set()\n    l.forEach((element) => {\n        if (!set.has(element)) {\n            set.add(element)\n            const sum = 0 - element\n            if (set.has(sum)) {\n                return true\n            }\n        }\n    })\n    return false\n}\n\nconst sumToZero = (l) => {\n    const set = new Set()\n    l.forEach((element) => {\n        if (!set.has(element)) {\n            set.add(element)\n            const sum = 0 - element\n            if (set.has(sum)) {\n                return true\n            }\n        }\n    })\n    return false\n}\n\nconst count = (l) => {\n    const set = new Set()\n    l.forEach((element) => {\n        if (!set.has(element)) {\n            set.add(element)\n            const sum = 0 - element\n            if (set.has(sum)) {\n                return true\n            }\n        }\n    })\n    return false\n}\n\nconst removeDuplicates = (l) => {\n    const set = new Set()\n    l.forEach((element) => {\n        if (!set.has(element)) {\n            set.add(element)\n            const sum = 0 - element\n            if (set.has(sum)) {\n                return true\n            }\n        }\n    })\n    return false\n}\n\nconst isSorted = (l) => {\n    const sorted = l.slice(0).sort()\n    return l.every((element) => {\n        return sorted.includes(element)\n    })\n}\n\nconst isUnique = (l) => {\n    const set = new Set()\n    l.forEach((element) => {\n        if (!set.has(element)) {\n            set.add(element)\n            const sum = 0 - element\n            if (set.has(sum)) {\n                return true\n            }\n        }\n    })\n    return false\n}\n\nconst allSumsAreEqual = (l) => {\n    const sum = 0 - l[0]\n    return l.every((element) => {\n        return sum === 0 - element\n    })\n}\n\nconst hasDuplicates = (l) => {\n    const set = new Set()\n    l.forEach((element) => {\n        if (!set.has(element)) {\n            set.add(element)\n            const sum = 0 - element\n            if (set.has(sum)) {\n                return true\n            }\n        }\n    })\n    return false\n}\n\nconst hasDuplicatesSorted = (l) => {\n    const set = new Set()\n    l.forEach((element) => {\n        if (!set.has(element)) {\n            set.add(element)\n            const sum = 0 - element\n            if (set.has(sum)) {\n                return true\n            }\n        }\n    })\n    return false\n}\n\nconst hasDuplicatesNoSorted = (l) => {\n    const set = new Set()\n    l.forEach((element) => {\n        if (!set.has(element)) {\n            set.add(element)\n            const sum = 0 - element\n            if (set.has(sum)) {\n                return true\n            }\n        }\n    })\n    return false\n}\n\nconst isSubset = (l, sublist) => {\n    return l.every((element) => {\n        return sublist.includes(element)\n    })\n}\n\nconst isSuperset = (l, sublist) => {\n    return sublist.every((element) => {\n        return l.includes(element)\n    })\n}\n\nconst contains = (l, elem) => {\n    return l.includes(elem)\n}\n\nconst containsAll = (l, sublist) => {\n    return l.every((element) => {\n        return sublist.includes(element)\n    })\n}\n\nconst isSubsetNoDuplicates = (l, sublist) => {\n    return l.every((element) => {\n        return sublist.includes(element) &&!contains(l, element)\n    })\n}\n\nconst isSupersetNoDuplicates = (l, sublist) => {\n    return sublist.every((element) => {\n        return l.includes(element) &&!contains(l, element)\n    })\n}\n\nconst isSubsetSorted = (l, sublist) => {\n    return l.every((element) => {\n        return sublist.includes(element) && isSorted(sublist)\n    })\n}\n\nconst isSupersetSorted = (l, sublist) => {\n    return sublist.every((element) => {\n        return l.includes(element) && isSorted(l)\n    })\n}\n\nconst isUniqueSorted = (l) => {\n    return l.every((element) => {\n        return isSorted(l) && isUnique(l)\n    })\n}\n\nconst isContains = (l, sublist) => {\n    return l.every((element) => {\n        return sublist.includes(element)\n    })\n}\n\nconst containsNoDuplicates = (l, sublist) => {\n    return l.every((element) => {\n        return sublist.includes(element) &&!contains(l, element)\n    })\n}\n\nconst containsAllNoDuplicates = (l, sublist) => {\n    return l.every((element) => {\n        return sublist.includes(element) &&!contains(l, element) &&!contains(l, element)\n    })\n}\n\nconst containsAllSorted = (l, sublist) =>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n      int ncars = n;\n      int collisions = 0;\n      int x = 1;\n      int y = 1;\n      int a = ncars / 2;\n      int b = ncars - a;\n      int xm = x + a;\n      int ym = y + b;\n      int xn = x + b;\n      int yn = y + a;\n      while (xm < ncars && ym < ncars) {\n        if (xm!= xn && ym!= yn) {\n          if (xm < xn && ym < yn) {\n            if (xm < x && ym < y) {\n              collisions++;\n            }\n          } else if (xm > xn && ym < yn) {\n            if (xm > x && ym < y) {\n              collisions++;\n            }\n          } else if (xm < xn && ym > yn) {\n            if (xm < x && ym > y) {\n              collisions++;\n            }\n          } else if (xm > xn && ym > yn) {\n            if (xm > x && ym > y) {\n              collisions++;\n            }\n          }\n        }\n        xm++;\n        ym++;\n        xn++;\n        yn++;\n      }\n      return collisions;\n  };\n\n#include <cstdio>\n\nint main() {\n  int t;\n  scanf(\"%d\", &t);\n  while (t--) {\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", carRaceCollision(n));\n  }\n  return 0;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented  by 1 .\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result[i] = l[i] + 1;\n  }\n  return result;\n};\n\nconst l = [1, 2, 3, 4, 5, 6, 7, 8];\n\nconsole.log(incrList(l));\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let l = l.filter(x => x.length > 1)\n  let unique = l.map(x => [x[0], x[x.length - 1]]).filter((x, i, arr) => {\n    if (arr.indexOf(x)!== i) {\n      return true\n    } else {\n      return false\n    }\n  })\n  let sum = l.map(x => x.reduce((x, y) => x + y))\n  return unique.filter((x, i, arr) => {\n    return (sum[x[0]] - sum[x[1]]) < 0\n  })\n}\n\n/*\n  pairsSumToZero returns true if there are two distinct elements in the list that sum to 0, false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = l.reduce((x, y) => x + y)\n  return (sum === 0)\n}\n\n/*\n  pairsSumToZero returns true if the list contains an even number of pairs that sum to 0, false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = l.reduce((x, y) => x + y)\n  return (sum % 2 === 0)\n}\n\n/*\n  pairsSumToZero returns true if the list contains an odd number of pairs that sum to 0, false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  true\n  >>> pairsSumToZero([1, 3, -2, 1])\n  true\n  >>> pairsSumToZero([1, 2, 3, 7])\n  true\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  false\n  >>> pairsSumToZero([1])\n  true\n  */\nconst pairsSumToZero = (l) => {\n  let sum = l.reduce((x, y) => x + y)\n  return (sum % 2!== 0)\n}\n\n/*\n  pairsSumToZero takes a list of integers and returns true if the list contains any pairs that sum to 0.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  true\n  >>> pairsSumToZero([1, 3, -2, 1])\n  true\n  >>> pairsSumToZero([1, 2, 3, 7])\n  true\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = l.reduce((x, y) => x + y)\n  return (sum === 0)\n}\n\n/*\n  pairsSumToZero returns true if the list contains any pairs that sum to 0.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  true\n  >>> pairsSumToZero([1, 3, -2, 1])\n  true\n  >>> pairsSumToZero([1, 2, 3, 7])\n  true\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  true\n  */\nconst pairsSumToZero = (l) => {\n  let sum = l.reduce((x, y) => x + y)\n  return (sum % 2 === 0)\n}\n\n/*\n  pairsSumToZero returns true if the list contains any pairs that sum to 0.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  true\n  >>> pairsSumToZero([1, 3, -2, 1])\n  true\n  >>> pairsSumToZero([1, 2, 3, 7])\n  true\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  true\n  */\nconst pairsSumToZero = (l) => {\n  let sum = l.reduce((x, y) => x + y)\n  return (sum % 2!== 0)\n}\n\nmodule.exports = {\n  pairsSumToZero,\n  pairsSumToZero,\n  pairsSumToZero\n}\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let num = x,\n      str = '',\n      temp = num % base;\n\n  while (temp) {\n    str += (num - temp + base) % base;\n    num = temp;\n    temp = num % base;\n  }\n\n  return str + num;\n}\n\n/*\n  Convert a number represented as a string to base 10.\n  >>> numberToBase( '1000', 3 )\n  '8'\n  >>> numberToBase( '11', 2 )\n  '2'\n  >>> numberToBase( '10', 3 )\n  '1'\n  >>> numberToBase( '2', 5 )\n  '0'\n  >>> numberToBase( '10', 5 )\n  '2'\n  */\nconst numberToBase = (num, base) => {\n  let numStr = num,\n      baseStr = base;\n  while (numStr.length < baseStr.length) {\n    numStr = '0' + numStr;\n  }\n\n  return parseInt(numStr, base);\n}\n\n/*\n  Find the first common factor of two numbers.\n  >>> firstCommon( 2, 3 )\n  1\n  >>> firstCommon( 5, 7 )\n  5\n  >>> firstCommon( 10, 14 )\n  7\n  >>> firstCommon( 10, 8 )\n  10\n  >>> firstCommon( 1, 10 )\n  10\n  */\nconst firstCommon = (num1, num2) => {\n  let num1Str = num1,\n      num2Str = num2;\n  while (num1Str.length < num2Str.length) {\n    num1Str = '0' + num1Str;\n  }\n\n  while (num2Str.length < num1Str.length) {\n    num2Str = '0' + num2Str;\n  }\n\n  return parseInt(num1Str, 10) / parseInt(num2Str, 10);\n}\n\n/*\n  Find the number of trailing zeros in a number.\n  >>> trailingZeros( 3 )\n  2\n  >>> trailingZeros( 0 )\n  0\n  >>> trailingZeros( 1 )\n  1\n  >>> trailingZeros( 4 )\n  0\n  */\nconst trailingZeros = (num) => {\n  let str = num.toString();\n  return str.length - str.indexOf('.');\n}\n\n/*\n  Find the number of digits in a number.\n  >>> digits( 1 )\n  1\n  >>> digits( 2 )\n  1\n  >>> digits( 3 )\n  2\n  >>> digits( 4 )\n  2\n  */\nconst digits = (num) => {\n  let str = num.toString();\n  return str.length - str.indexOf('.');\n}\n\n/*\n  Find the number of trailing zeros in a number.\n  >>> trailingZeros( 3 )\n  2\n  >>> trailingZeros( 0 )\n  0\n  >>> trailingZeros( 1 )\n  1\n  >>> trailingZeros( 4 )\n  0\n  */\nconst trailingZeros = (num) => {\n  let str = num.toString();\n  return str.length - str.indexOf('.');\n}\n\n/*\n  Find the number of digits in a number.\n  >>> digits( 1 )\n  1\n  >>> digits( 2 )\n  1\n  >>> digits( 3 )\n  2\n  >>> digits( 4 )\n  2\n  */\nconst digits = (num) => {\n  let str = num.toString();\n  return str.length - str.indexOf('.');\n}\n\n/*\n  Calculate the number of trailing zeros in a number.\n  >>> trailingZeros( 3 )\n  2\n  >>> trailingZeros( 0 )\n  0\n  >>> trailingZeros( 1 )\n  1\n  >>> trailingZeros( 4 )\n  0\n  */\nconst trailingZeros = (num) => {\n  let str = num.toString();\n  return str.length - str.indexOf('.');\n}\n\n/*\n  Calculate the number of digits in a number.\n  >>> digits( 1 )\n  1\n  >>> digits( 2 )\n  1\n  >>> digits( 3 )\n  2\n  >>> digits( 4 )\n  2\n  */\nconst digits = (num) => {\n  let str = num.toString();\n  return str.length - str.indexOf('.');\n}\n\n/*\n  Find the number of trailing zeros in a number.\n  >>> trailingZeros( 3 )\n  2\n  >>> trailingZeros( 0 )\n  0\n  >>> trailingZeros( 1 )\n  1\n  >>> trailingZeros( 4 )\n  0\n  */\nconst trailingZeros = (num) => {\n  let str = num.toString();\n  return str.length - str.indexOf('.');\n}\n\n/*\n  Find the number of digits in a number.\n  >>> digits( 1 )\n  1\n  >>> digits( 2 )\n  1\n  >>> digits( 3 )\n  2\n  >>> digits( 4 )\n  2\n  */\nconst digits = (num) => {\n  let str = num.toString();\n  return str.length - str.indexOf('.');\n}\n\n/*\n  Find the number of trailing zeros in a number.\n  >>> trailingZeros( 3 )\n  2\n  >>> trailingZeros( 0 )\n  0\n  >>> trailingZeros( 1 )\n  1\n  >>> trailingZeros( 4 )\n  0\n  */\nconst trailingZeros = (num) => {\n  let str = num.toString();\n  return str.length - str.indexOf('.');\n}\n\n/*\n  Find the number of digits in a number.\n  >>> digits( 1 )\n  1\n  >>> digits( 2 )\n  1\n  >>> digits( 3 )\n  2\n  >>> digits( 4 )\n  2\n  */\nconst digits = (num) => {\n  let str = num.toString();\n  return str.length - str.indexOf('.');\n}\n\n/*\n"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n    const s = a * h / 2\n    return Math.sqrt(s * (s - a) * (s - h) * (s - a - h))\n}\n\n/* Given a triangle and the high side, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  7.5\n  >>> triangleArea(5, 5)\n  10\n  >>> triangleArea(5, 6)\n  12.5\n  >>> triangleArea(5, 7)\n  15.75\n  */\nconst triangleArea = (a, h) => {\n    const s = a * h / 2\n    return Math.sqrt(s * (s - a) * (s - h) * (s - a - h))\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(4, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n    const s = a * h / 2\n    return Math.sqrt(s * (s - a) * (s - h) * (s - a - h))\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(3, 4)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n    const s = a * h / 2\n    return Math.sqrt(s * (s - a) * (s - h) * (s - a - h))\n}\n\n/* Given a triangle and the high side, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  7.5\n  >>> triangleArea(5, 5)\n  10\n  >>> triangleArea(5, 6)\n  12.5\n  >>> triangleArea(5, 7)\n  15.75\n  */\nconst triangleArea = (a, h) => {\n    const s = a * h / 2\n    return Math.sqrt(s * (s - a) * (s - h) * (s - a - h))\n}\n\n/* Given a triangle and the high side, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  7.5\n  >>> triangleArea(5, 5)\n  10\n  >>> triangleArea(5, 6)\n  12.5\n  >>> triangleArea(5, 7)\n  15.75\n  */\nconst triangleArea = (a, h) => {\n    const s = a * h / 2\n    return Math.sqrt(s * (s - a) * (s - h) * (s - a - h))\n}\n\n/* Given a triangle and the high side, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  7.5\n  >>> triangleArea(5, 5)\n  10\n  >>> triangleArea(5, 6)\n  12.5\n  >>> triangleArea(5, 7)\n  15.75\n  */\nconst triangleArea = (a, h) => {\n    const s = a * h / 2\n    return Math.sqrt(s * (s - a) * (s - h) * (s - a - h))\n}\n\n/* Given a triangle and the high side, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  7.5\n  >>> triangleArea(5, 5)\n  10\n  >>> triangleArea(5, 6)\n  12.5\n  >>> triangleArea(5, 7)\n  15.75\n  */\nconst triangleArea = (a, h) => {\n    const s = a * h / 2\n    return Math.sqrt(s * (s - a) * (s - h) * (s - a - h))\n}\n\n/* Given a triangle and the high side, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  7.5\n  >>> triangleArea(5, 5)\n  10\n  >>> triangleArea(5, 6)\n  12.5\n  >>> triangleArea(5, 7)\n  15.75\n  */\nconst triangleArea = (a, h) => {\n    const s = a * h / 2\n    return Math.sqrt(s * (s - a) * (s - h) * (s - a - h))\n}\n\n/* Given a triangle and the high side, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  7.5\n  >>> triangleArea(5, 5)\n  10\n  >>> triangleArea(5, 6)\n  12.5\n  >>> triangleArea(5, 7)\n  15.75\n  */\nconst triangleArea = (a, h) => {\n    const s = a * h / 2\n    return Math.sqrt(s * (s - a) * (s - h) * (s - a - h))\n}\n\n/* Given a triangle and the high side, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  7.5\n  >>> triangleArea(5, 5)\n  10\n  >>> triangleArea(5, 6)\n  12.5\n  >>> triangleArea(5, 7)\n  15.75\n  */\nconst triangleArea = (a, h) => {\n    const s = a * h / 2\n    return Math.sqrt(s * (s - a) * (s - h) * (s - a - h))\n}\n\n/* Given a triangle and the high side, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  7.5\n  >>> triangleArea(5, 5)\n  10\n  >>> triangleArea(5, 6)\n  12.5\n  >>> triangleArea(5, 7)\n  15.75\n  */\nconst triangleArea = (a, h) => {\n    const s = a * h / 2\n    return Math.sqrt(s * (s - a) * (s - h) * (s - a - h))\n}\n\n/* Given a triangle and the high side, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  7.5\n  >>> triangleArea(5, 5)\n  10\n  >>> triangleArea(5, 6)\n  12.5\n  >>> triangleArea(5, 7)\n  15.75\n  */\n"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    if (n < 2) return n;\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nexport {fib4};\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  >>> average([1, 4, 3, 5, 6])\n  4.0\n  >>> average([3, 1, 2, 4, 5])\n  3.0\n  >>> average([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst average = (l) => {\n  const sum = l.reduce((acc, elem) => acc + elem, 0);\n  return sum / l.length;\n};\n\n/*\n  >>> sum([1, 4, 3, 5, 6])\n  15\n  >>> sum([3, 1, 2, 4, 5])\n  10\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  26\n  >>> sum([-10, 4, 6, -10, 4, -10, 6, -10, 6])\n  0\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  45\n  */\nconst sum = (l) => {\n  return l.reduce((acc, elem) => acc + elem, 0);\n};\n\n/*\n  >>> max([1, 4, 3, 5, 6])\n  6\n  >>> max([3, 1, 2, 4, 5])\n  5\n  >>> max([-10, 4, 6, 1000, 10, 20])\n  20\n  >>> max([-10, 4, 6, -10, 4, -10, 6, -10, 6])\n  -10\n  >>> max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  12\n  */\nconst max = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[sorted.length - 1];\n};\n\n/*\n  >>> min([1, 4, 3, 5, 6])\n  1\n  >>> min([3, 1, 2, 4, 5])\n  1\n  >>> min([-10, 4, 6, 1000, 10, 20])\n  -10\n  >>> min([-10, 4, 6, -10, 4, -10, 6, -10, 6])\n  -10\n  >>> min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  1\n  */\nconst min = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0];\n};\n\n/*\n  >>> average([1, 4, 3, 5, 6])\n  4.0\n  >>> average([3, 1, 2, 4, 5])\n  3.0\n  >>> average([-10, 4, 6, 1000, 10, 20])\n  8.0\n  >>> average([-10, 4, 6, -10, 4, -10, 6, -10, 6])\n  -10\n  >>> average([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  5.5\n  */\nconst average = (l) => {\n  const sum = l.reduce((acc, elem) => acc + elem, 0);\n  return sum / l.length;\n};\n\nmodule.exports = {\n  median,\n  average,\n  sum,\n  min,\n  max\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = '';\n    for (let i = text.length - 1; i >= 0; i--) {\n        reversed = reversed + text[i];\n    }\n    return text === reversed;\n}\n\n/*\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = '';\n    for (let i = text.length - 1; i >= 0; i--) {\n        reversed = reversed + text[i];\n    }\n    return text === reversed;\n}\n\n/*\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = '';\n    for (let i = text.length - 1; i >= 0; i--) {\n        reversed = reversed + text[i];\n    }\n    return text === reversed;\n}\n\n/*\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = '';\n    for (let i = text.length - 1; i >= 0; i--) {\n        reversed = reversed + text[i];\n    }\n    return text === reversed;\n}\n\n/*\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = '';\n    for (let i = text.length - 1; i >= 0; i--) {\n        reversed = reversed + text[i];\n    }\n    return text === reversed;\n}\n\n/*\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = '';\n    for (let i = text.length - 1; i >= 0; i--) {\n        reversed = reversed + text[i];\n    }\n    return text === reversed;\n}\n\n/*\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = '';\n    for (let i = text.length - 1; i >= 0; i--) {\n        reversed = reversed + text[i];\n    }\n    return text === reversed;\n}\n\n/*\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = '';\n    for (let i = text.length - 1; i >= 0; i--) {\n        reversed = reversed + text[i];\n    }\n    return text === reversed;\n}\n\n/*\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = '';\n    for (let i = text.length - 1; i >= 0; i--) {\n        reversed = reversed + text[i];\n    }\n    return text === reversed;\n}\n\n/*\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = '';\n    for (let i = text.length - 1; i >= 0; i--) {\n        reversed = reversed + text[i];\n    }\n    return text === reversed;\n}\n\n/*\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = '';\n    for (let i = text.length - 1; i >= 0; i--) {\n        reversed = reversed + text[i];\n    }\n    return text === reversed;\n}\n\n/*\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = '';\n    for (let i = text.length - 1; i >= 0; i--) {\n        reversed = reversed + text[i];\n    }\n    return text === reversed;\n}\n\n/*\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of nume rics) .\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (be aware of nume rics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n    let mod = n % p;\n    while (mod < 0) mod += p;\n    return mod;\n};\n\nmodule.exports = modp;\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n  return s.split(\"\").map(c h => \n    (((c.charCod eAt(0) - (c.ch arC odeAt(0) - \"a\".charCod eAt(0)) % 26) - 5) % 26) + \"a\"\n  ).join(\" \");\n}\n\n/*\n  returns string with the letter c at the position i\n*/\nconst getLetter =(s,i) => s.slice(0,i) + c.slice(0,1) + s.slice(i+1);\n\n/*\n  returns string with the letter c at the position i\n*/\nconst putLetter =(s,i,c) => s.slice(0,i) + c.slice(0,1) + s.slice(i+1);\n\n/*\n  returns true if the string s contains c, false if it doesn't\n*/\nconst contains = (s,c) => s.indexOf(c)!= -1;\n\n/*\n  returns true if the string s contains c, false if it doesn't\n*/\nconst containsLetters =(s,c) => s.split(c).length > 0;\n\n/*\n  returns the letter in the position i\n*/\nconst getLetter =(s,i) => s.charAt(i);\n\n/*\n  returns the position of the letter c in the string s\n*/\nconst getPos =(s,c) => s.indexOf(c);\n\n/*\n  returns true if the string s contains the letter c, false if it doesn't\n*/\nconst containsLetters =(s,c) => s.indexOf(c)!= -1;\n\n/*\n  returns true if the string s contains the letter c, false if it doesn't\n*/\nconst containsLetters =(s,c) => s.indexOf(c)!= -1;\n\n/*\n  returns true if the string s contains the letter c, false if it doesn't\n*/\nconst containsLetters =(s,c) => s.indexOf(c)!= -1;\n\n/*\n  returns true if the string s contains the letter c, false if it doesn't\n*/\nconst containsLetters =(s,c) => s.indexOf(c)!= -1;\n\n/*\n  returns true if the string s contains the letter c, false if it doesn't\n*/\nconst containsLetters =(s,c) => s.indexOf(c)!= -1;\n\n/*\n  returns true if the string s contains the letter c, false if it doesn't\n*/\nconst containsLetters =(s,c) => s.indexOf(c)!= -1;\n\n/*\n  returns true if the string s contains the letter c, false if it doesn't\n*/\nconst containsLetters =(s,c) => s.indexOf(c)!= -1;\n\n/*\n  returns true if the string s contains the letter c, false if it doesn't\n*/\nconst containsLetters =(s,c) => s.indexOf(c)!= -1;\n\n/*\n  returns true if the string s contains the letter c, false if it doesn't\n*/\nconst containsLetters =(s,c) => s.indexOf(c)!= -1;\n\n/*\n  returns true if the string s contains the letter c, false if it doesn't\n*/\nconst containsLetters =(s,c) => s.indexOf(c)!= -1;\n\n/*\n  returns true if the string s contains the letter c, false if it doesn't\n*/\nconst containsLetters =(s,c) => s.indexOf(c)!= -1;\n\n/*\n  returns true if the string s contains the letter c, false if it doesn't\n*/\nconst containsLetters =(s,c) => s.indexOf(c)!= -1;\n\n/*\n  returns true if the string s contains the letter c, false if it doesn't\n*/\nconst containsLetters =(s,c) => s.indexOf(c)!= -1;\n\n/*\n  returns true if the string s contains the letter c, false if it doesn't\n*/\nconst containsLetters =(s,c) => s.indexOf(c)!= -1;\n\n/*\n  returns true if the string s contains the letter c, false if it doesn't\n*/\nconst containsLetters =(s,c) => s.indexOf(c)!= -1;\n\n/*\n  returns true if the string s contains the letter c, false if it doesn't\n*/\nconst containsLetters =(s,c) => s.indexOf(c)!= -1;\n\n/*\n  returns true if the string s contains the letter c, false if it doesn't\n*/\nconst containsLetters =(s,c) => s.indexOf(c)!= -1;\n\n/*\n  returns true if the string s contains the letter c, false if it doesn't\n*/\nconst containsLetters =(s,c) => s.indexOf(c)!= -1;\n\n/*\n  returns true if the string s contains the letter c, false if it doesn't\n*/\nconst containsLetters =(s,c) => s.indexOf(c)!= -1;\n\n/*\n  returns true if the string s contains the letter c, false if it doesn't\n*/\nconst containsLetters =(s,c) => s.indexOf(c)!= -1;\n\n/*\n  returns true if the string s contains the letter c, false if it doesn't\n*/\nconst containsLetters =(s,c) => s.indexOf(c)!= -1;\n\n/*\n  returns true if the string s contains the letter c, false if it doesn't\n*/\nconst containsLetters =(s,c) => s.indexOf(c)!= -1;\n\n/*\n  returns true if the string s contains the letter"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n    let textArray = text.split(\"\");\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    for (let i = 0; i < textArray.length; i++) {\n        let letter = textArray[i];\n        for (let j = 0; j < vowels.length; j++) {\n            if (letter === vowels[j]) {\n                textArray[i] = \"\";\n                break;\n            }\n        }\n    }\n    return textArray.join(\"\");\n};\n\n/*\n  splitText is a function that takes s str ing and returns an array of strings\n  >>> splitText('')\n  []\n  >>> splitText(\"abcdef\\nghijklm\")\n  ['abcdef\\n', 'ghijklm']\n  >>> splitText('abcdef')\n  ['abcdef']\n  >>> splitText('aaaaa')\n  []\n  >>> splitText('aaBAA')\n  ['BAA']\n  >>> splitText('zbcd')\n  ['zbcd']\n  */\nconst splitText = (text) => {\n    let textArray = text.split(\"\");\n    let resultArray = [];\n    for (let i = 0; i < textArray.length; i++) {\n        let letter = textArray[i];\n        if (letter!== \"\") {\n            resultArray.push(letter);\n        }\n    }\n    return resultArray;\n};\n\n/*\n  isVowel is a function that take s str ing and returns true if the str is vowel\n  >>> isVowel(\"a\")\n  true\n  >>> isVowel(\"z\")\n  true\n  >>> isVowel(\"h\")\n  false\n  >>> isVowel(\"z\")\n  false\n  >>> isVowel(\"\")\n  false\n  */\nconst isVowel = (text) => {\n    return /[aeiou]/.test(text);\n};\n\n/*\n  isVowel is a function that take s str ing and returns true if the str is vowel\n  >>> isVowel(\"a\")\n  true\n  >>> isVowel(\"z\")\n  true\n  >>> isVowel(\"h\")\n  false\n  >>> isVowel(\"z\")\n  false\n  >>> isVowel(\"\")\n  false\n  */\nconst isVowel = (text) => {\n    return /[aeiou]/.test(text);\n};\n\n/*\n  letterCount is a function that takes s str ing and returns count of vowels in the str\n  >>> letterCount(\"\")\n  0\n  >>> letterCount(\"abcdef\")\n  2\n  >>> letterCount(\"aaaaa\")\n  0\n  >>> letterCount(\"aaBAA\")\n  1\n  >>> letterCount(\"zbcd\")\n  1\n  */\nconst letterCount = (text) => {\n    let letterCount = 0;\n    for (let i = 0; i < text.length; i++) {\n        if (isVowel(text[i])) {\n            letterCount++;\n        }\n    }\n    return letterCount;\n};\n\n/*\n  isOneLetter is a function that takes s str ing and returns true if str is one letter\n  >>> isOneLetter(\"\")\n  false\n  >>> isOneLetter(\"ab\")\n  true\n  >>> isOneLetter(\"a\")\n  true\n  >>> isOneLetter(\"z\")\n  false\n  >>> isOneLetter(\"z\")\n  false\n  >>> isOneLetter(\"\")\n  false\n  */\nconst isOneLetter = (text) => {\n    return text.length === 1;\n};\n\n/*\n  removeOneLetters is a function that takes s str ing and returns str without one letter\n  >>> removeOneLetters(\"\")\n  ''\n  >>> removeOneLetters(\"a\")\n  ''\n  >>> removeOneLetters(\"a\")\n  ''\n  >>> removeOneLetters(\"z\")\n  'z'\n  >>> removeOneLetters(\"z\")\n  'z'\n  >>> removeOneLetters(\"z\")\n  'z'\n  */\nconst removeOneLetters = (text) => {\n    let textArray = text.split(\"\");\n    for (let i = 0; i < textArray.length; i++) {\n        if (isOneLetter(textArray[i])) {\n            textArray[i] = \"\";\n        }\n    }\n    return textArray.join(\"\");\n};\n\n/*\n  removeOneLetters is a function that takes s str ing and returns str without one letter\n  >>> removeOneLetters(\"\")\n  ''\n  >>> removeOneLetters(\"a\")\n  ''\n  >>> removeOneLetters(\"a\")\n  ''\n  >>> removeOneLetters(\"z\")\n  'z'\n  >>> removeOneLetters(\"z\")\n  'z'\n  >>> removeOneLetters(\"z\")\n  'z'\n  */\nconst removeOneLetters = (text) => {\n    let textArray = text.split(\"\");\n    for (let i = 0; i < textArray.length; i++) {\n        if (isOneLetter(textArray[i])) {\n            textArray[i] = \"\";\n        }\n    }\n    return textArray.join(\"\");\n};\n\n/*\n  isOneLetter is a function that take s str ing and returns true if the str is one letter\n  >>> isOneLetter(\"\")\n  false\n  >>> isOneLetter(\"a\")\n  true\n  >>> isOneLetter(\"a\")\n  true\n  >>> isOneLetter(\"z\")\n  false\n  >>> isOneLetter(\"z\")\n  false\n  >>> isOneLetter(\"\")\n  false\n  */\nconst isOneLetter = (text) => {\n    return text.length === 1;\n};\n\n/*\n  getWordLength is a function that takes s str ing and"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  if (!l ||!l.length) return false\n  let ret = true\n  for (let i = 0, len = l.length; i < len; i++) {\n    if (l[i] > t) {\n      ret = false\n      break\n    }\n  }\n  return ret\n}\n\nexport default belowThreshold\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  if (x > y) {\n    return x + y\n  } else if (x < y) {\n    return x - y\n  } else {\n    return 0\n  }\n}\n\n/*Subtract two numbers x and y\n  >>> sub(2, 3)\n  -1\n  >>> sub(5, 7)\n  -4\n  */\nconst sub = (x, y) => {\n  if (x > y) {\n    return x - y\n  } else if (x < y) {\n    return y - x\n  } else {\n    return 0\n  }\n}\n\n/*Multiply two numbers x and y\n  >>> mul(2, 3)\n  6\n  >>> mul(5, 7)\n  35\n  */\nconst mul = (x, y) => {\n  return x * y\n}\n\n/*Divide two numbers x and y\n  >>> div(6, 2)\n  3\n  >>> div(35, 7)\n  5\n  */\nconst div = (x, y) => {\n  return x / y\n}\n\n/*Get the sum of two numbers\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5, 6])\n  21\n  */\nconst sum = (list) => {\n  let sum = 0\n  list.forEach(v => sum += v)\n  return sum\n}\n\n/*Get the difference of two numbers\n  >>> diff([1, 2, 3, 4, 5])\n  2\n  >>> diff([1, 2, 3, 4, 5, 6])\n  4\n  */\nconst diff = (list) => {\n  let diff = 0\n  list.forEach((v, i) => {\n    if (i > 0) {\n      diff += v - list[i - 1]\n    }\n  })\n  return diff\n}\n\n/*Get the product of two numbers\n  >>> prod([1, 2, 3])\n  6\n  >>> prod([1, 2, 3, 4, 5])\n  15\n  >>> prod([1, 2, 3, 4, 5, 6])\n  42\n  */\nconst prod = (list) => {\n  let prod = 1\n  list.forEach(v => prod *= v)\n  return prod\n}\n\n/*Get the quotient of two numbers\n  >>> quo([1, 2, 3, 4, 5])\n  2\n  >>> quo([1, 2, 3, 4, 5, 6])\n  2\n  */\nconst quo = (list) => {\n  let quotient = 1\n  list.forEach((v, i) => {\n    if (i > 0) {\n      quotient *= v\n    }\n  })\n  return quotient\n}\n\n/*Get the remainder of two numbers\n  >>> rem([1, 2, 3, 4, 5])\n  2\n  >>> rem([1, 2, 3, 4, 5, 6])\n  2\n  */\nconst rem = (list) => {\n  let remainder = 0\n  list.forEach((v, i) => {\n    if (i > 0) {\n      remainder += v % list[i - 1]\n    }\n  })\n  return remainder\n}\n\n/*Get the root of a number\n  >>> root(5)\n  2\n  >>> root(25)\n  5\n  */\nconst root = (number) => {\n  let root = number\n  while (root < number) {\n    root += number\n  }\n  return root\n}\n\n/*Get the square root of a number\n  >>> sqrt(5)\n  2\n  >>> sqrt(25)\n  5\n  */\nconst sqrt = (number) => {\n  let sqrt = number\n  while (sqrt * sqrt < number) {\n    sqrt += number\n  }\n  return sqrt\n}\n\n/*Get the cube root of a number\n  >>> cube(5)\n  5\n  >>> cube(25)\n  25\n  */\nconst cube = (number) => {\n  let cube = number\n  while (cube * cube < number) {\n    cube += number\n  }\n  return cube\n}\n\n/*Get the square of a number\n  >>> square(5)\n  25\n  >>> square(25)\n  25\n  */\nconst square = (number) => {\n  return number * number\n}\n\n/*Get the cube of a number\n  >>> cube(5)\n  125\n  >>> cube(25)\n  625\n  */\nconst cube = (number) => {\n  return number * number * number\n}\n\n/*Get the number of digits of a number\n  >>> digits(5)\n  1\n  >>> digits(25)\n  3\n  */\nconst digits = (number) => {\n  let count = 0\n  while (number > 0) {\n    number = number / 10\n    count += 1\n  }\n  return count\n}\n\n/*Get the absolute value of a number\n  >>> abs(5)\n  5\n  >>> abs(-5)\n  5\n  */\nconst abs = (number) => {\n  return number >= 0? number : -number\n}\n\n/*Get the sign of a number\n  >>> sign(5)\n  1\n  >>> sign(-5)\n  -1\n  */\nconst sign = (number) => {\n  return number >= 0? 1 : -1\n}\n\n/*Get the sign of a number\n  >>> sign(5)\n  1\n  >>> sign(-5)\n  -1\n  */\nconst sign = (number) => {\n  return number >= 0? 1 : -1\n}\n\n/*Get the max of two numbers\n  >>> max([1, 2, 3])\n  3\n  >>> max([1, 2, 3, 4, 5])\n  5\n  */\nconst max = (list) => {\n  let max = list[0]\n  list.forEach(v => {\n    if (v > max) {\n      max = v\n    }\n  })\n  return max\n}\n\n/*Get the min of two numbers\n  >>> min([1, 2, 3])\n  1\n  >>> min([1, 2, 3, 4, 5])"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0Arr = s0.split('')\n  const s1Arr = s1.split('')\n  return s0Arr.every((c, i) => s1Arr[i] === c)\n}\n\n// Test\nexport default sameChars<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  const a = 1\n  const b = 1\n  let c = 0\n\n  if (n === 1 || n === 2) {\n    return n\n  }\n\n  while (c < n) {\n    c += 1\n    a = b\n    b = a + b\n  }\n\n  return b\n}\n\nexport default fib\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = [];\n  for(let i = 0; i < brackets.length; i++) {\n    const char = brackets[i];\n    if(char === \"<\") {\n      stack.push(char);\n    } else if(char === \">\") {\n      if(stack.length === 0) {\n        return false;\n      }\n      const top = stack.pop();\n      if(top === \"<\") {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  * @param {string} brackets string of \"<\" and \">\".\n  * @return {boolean} true if the string contains any unmatched brackets.\n  */\nconst containsUnmatchedBrackets = (brackets) => {\n  const stack = [];\n  for(let i = 0; i < brackets.length; i++) {\n    const char = brackets[i];\n    if(char === \"<\") {\n      stack.push(char);\n    } else if(char === \">\") {\n      const top = stack.pop();\n      if(top === \"<\") {\n        return true;\n      }\n    }\n  }\n  return stack.length!== 0;\n};\n\nmodule.exports = {\n  correctBracketing: correctBracketing,\n  containsUnmatchedBrackets: containsUnmatchedBrackets\n};\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n    let count = 0;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] < l[i + 1]) {\n            count++;\n        }\n    }\n    return count % 2 === 0;\n}\n\nmodule.exports = monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l = []\n  for (let i = 0; i < l1.length; i++) {\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        l.push(l1[i])\n      }\n    }\n  }\n  return l\n}\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n <= 1) return 1\n  let d = 2\n  while (d * d <= n) {\n    if (n % d === 0) {\n      return d\n    }\n    d += 1\n  }\n}\n\n/**\n * Return the smallest prime factor of n.  Assu me n > 1 and is not a prime.\n *\n * @param {number} n\n * @return {number}\n */\nconst smallestPrimeFactor = (n) => {\n  if (n <= 1) return 1\n  let d = 2\n  while (d * d <= n) {\n    if (n % d === 0) {\n      return d\n    }\n    d += 1\n  }\n  return n\n}\n\nmodule.exports = {\n  largestPrimeFactor,\n  smallestPrimeFactor\n}\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n    return (s) => {\n        return (n <= s)? 1 : sumToN(n - s) + n - 1;\n    };\n};\n\nconsole.log(sumToN(20)(3)(4)(5)(7)(8)(9)(10)(12)(13)(14)(17)(18)(19)(20));\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = brackets.split(\"()\")\n  stack.forEach((element) => {\n    if (element!== \"(\" && element!== \")\") {\n      return false\n    }\n  })\n  return stack.every((element) => {\n    return stack.indexOf(element) > -1\n  })\n}\n\n/*\n  Given a string, return a list of its words.\n  The string may contain an apostrophe or a hyphen.\n  The apostrophe marks the word.\n  The hyphen marks the word.\n  Words may be of any length.\n  */\nconst wordList = (str) => {\n  let words = []\n  let lastIndex = 0\n  for (let index = 0; index < str.length; index++) {\n    let char = str[index]\n    if (char === \"'\" || char === \"-\" || char === \" \") {\n      if (index - lastIndex > 0) {\n        words.push(str.slice(lastIndex, index))\n      }\n      lastIndex = index + 1\n    }\n  }\n  if (lastIndex < str.length) {\n    words.push(str.slice(lastIndex))\n  }\n  return words\n}\n\n/*\n  Given a string, return a list of the indexes of all of the words in the string.\n  Words are delimited by \" \" and \",\".\n  Words may contain apostrophes and hyphens.\n  */\nconst wordIndexList = (str) => {\n  let indices = []\n  let lastIndex = 0\n  for (let index = 0; index < str.length; index++) {\n    let char = str[index]\n    if (char === \" \" || char === \",\") {\n      if (index - lastIndex > 0) {\n        indices.push(lastIndex)\n      }\n      lastIndex = index + 1\n    }\n  }\n  if (lastIndex < str.length) {\n    indices.push(lastIndex)\n  }\n  return indices\n}\n\n/*\n  Given a string, return a list of the indexes of all of the words in the string.\n  Words are delimited by \" \" and \",\".\n  Words may contain apostrophes and hyphens.\n  */\nconst wordIndexListWithHyphen = (str) => {\n  let indices = []\n  let lastIndex = 0\n  for (let index = 0; index < str.length; index++) {\n    let char = str[index]\n    if (char === \"-\" || char === \" \") {\n      if (index - lastIndex > 0) {\n        indices.push(lastIndex)\n      }\n      lastIndex = index + 1\n    }\n  }\n  if (lastIndex < str.length) {\n    indices.push(lastIndex)\n  }\n  return indices\n}\n\n/*\n  Given a string, return a list of the indexes of all of the words in the string.\n  Words are delimited by \" \" and \",\".\n  Words may contain apostrophes and hyphens.\n  */\nconst wordIndexListWithHyphenAndQuotes = (str) => {\n  let indices = []\n  let lastIndex = 0\n  for (let index = 0; index < str.length; index++) {\n    let char = str[index]\n    if (char === \" \" || char === \",\") {\n      if (index - lastIndex > 0) {\n        indices.push(lastIndex)\n      }\n      lastIndex = index + 1\n    }\n  }\n  if (lastIndex < str.length) {\n    indices.push(lastIndex)\n  }\n  return indices\n}\n\n/*\n  Given a string, return a list of the indexes of all of the words in the string.\n  Words are delimited by \" \" and \",\".\n  Words may contain apostrophes and hyphens.\n  */\nconst wordIndexListWithHyphenAndQuotesQuotes = (str) => {\n  let indices = []\n  let lastIndex = 0\n  for (let index = 0; index < str.length; index++) {\n    let char = str[index]\n    if (char === \"\\\"\" || char === \" \" || char === \",\") {\n      if (index - lastIndex > 0) {\n        indices.push(lastIndex)\n      }\n      lastIndex = index + 1\n    }\n  }\n  if (lastIndex < str.length) {\n    indices.push(lastIndex)\n  }\n  return indices\n}\n\n/*\n  Given a string, return a list of the indexes of all of the words in the string.\n  Words are delimited by \" \" and \",\".\n  Words may contain apostrophes and hyphens.\n  */\nconst wordIndexListWithQuotesQuotesQuotes = (str) => {\n  let indices = []\n  let lastIndex = 0\n  for (let index = 0; index < str.length; index++) {\n    let char = str[index]\n    if (char === \"\\\"\" || char === \" \" || char === \",\") {\n      if (index - lastIndex > 0) {\n        indices.push(lastIndex)\n      }\n      lastIndex = index + 1\n    }\n  }\n  if (lastIndex < str.length) {\n    indices.push(lastIndex)\n  }\n  return indices\n}\n\n/*\n  Given a string, return a list of the indexes of all of the words in the string.\n  Words are delimited by \" \" and \",\".\n  Words may contain apostrophes and hyphens.\n  */\nconst wordIndexListWithQuotesQuotesQuotesQuotes = (str) => {\n  let indices = []\n  let lastIndex = 0\n  for (let index = 0; index < str.length; index++) {\n    let char = str[index]\n    if (char === \"\\\"\" || char === \" \" || char === \",\") {\n      if (index - lastIndex > 0) {\n        indices.push(lastIndex)\n      }\n      lastIndex = index + 1\n    }\n  }\n  if (lastIndex < str.length"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polyn omial .\n  xs[0] +xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polyn omial.\n  xs[0] +xs[1] * x + xs[2] * x^2 +....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length;\n  const res = [];\n  for (let i = 1; i < len; i++) {\n    res[i] = xs[i] * (len - i);\n  }\n  return res;\n};\n\n// https://en.wikipedia.org/wiki/Linear_recurrence_of_polynomial\nconst polyRec = (p, xs) => {\n  const len = xs.length;\n  const res = [];\n  for (let i = 1; i < len; i++) {\n    res[i] = p[i] + (len - i) * xs[i - 1] * p[i - 1];\n  }\n  return res;\n};\n\n// https://en.wikipedia.org/wiki/Linear_recurrence_of_polynomial\nconst polyRecDer = (p, xs) => {\n  const len = xs.length;\n  const res = [];\n  for (let i = 1; i < len; i++) {\n    res[i] = p[i] + (len - i) * xs[i - 1] * p[i - 1];\n  }\n  return res;\n};\n\n// https://en.wikipedia.org/wiki/Linear_recurrence_of_polynomial\nconst polyRecDer2 = (p, xs) => {\n  const len = xs.length;\n  const res = [];\n  for (let i = 1; i < len; i++) {\n    res[i] = (len - i) * p[i] + xs[i - 1] * p[i - 1];\n  }\n  return res;\n};\n\n// https://en.wikipedia.org/wiki/Linear_recurrence_of_polynomial\nconst polyRecDer3 = (p, xs) => {\n  const len = xs.length;\n  const res = [];\n  for (let i = 1; i < len; i++) {\n    res[i] = (len - i) * p[i] + (2 * len - i) * xs[i - 1] * p[i - 1];\n  }\n  return res;\n};\n\n// https://en.wikipedia.org/wiki/Linear_recurrence_of_polynomial\nconst polyRecDer4 = (p, xs) => {\n  const len = xs.length;\n  const res = [];\n  for (let i = 1; i < len; i++) {\n    res[i] = (len - i) * p[i] + (4 * len - i) * xs[i - 1] * p[i - 1];\n  }\n  return res;\n};\n\n// https://en.wikipedia.org/wiki/Linear_recurrence_of_polynomial\nconst polyRecDer5 = (p, xs) => {\n  const len = xs.length;\n  const res = [];\n  for (let i = 1; i < len; i++) {\n    res[i] = (len - i) * p[i] + (6 * len - i) * xs[i - 1] * p[i - 1];\n  }\n  return res;\n};\n\n// https://en.wikipedia.org/wiki/Linear_recurrence_of_polynomial\nconst polyRecDer6 = (p, xs) => {\n  const len = xs.length;\n  const res = [];\n  for (let i = 1; i < len; i++) {\n    res[i] = (len - i) * p[i] + (8 * len - i) * xs[i - 1] * p[i - 1];\n  }\n  return res;\n};\n\n// https://en.wikipedia.org/wiki/Linear_recurrence_of_polynomial\nconst polyRecDer7 = (p, xs) => {\n  const len = xs.length;\n  const res = [];\n  for (let i = 1; i < len; i++) {\n    res[i] = (len - i) * p[i] + (10 * len - i) * xs[i - 1] * p[i - 1];\n  }\n  return res;\n};\n\n// https://en.wikipedia.org/wiki/Linear_recurrence_of_polynomial\nconst polyRecDer8 = (p, xs) => {\n  const len = xs.length;\n  const res = [];\n  for (let i = 1; i < len; i++) {\n    res[i] = (len - i) * p[i] + (12 * len - i) * xs[i - 1] * p[i - 1];\n  }\n  return res;\n};\n\n// https://en.wikipedia.org/wiki/Linear_recurrence_of_polynomial\nconst polyRecDer9 = (p, xs) => {\n  const len = xs.length;\n  const res = [];\n  for (let i = 1; i < len; i++) {\n    res[i] = (len - i) * p[i] + (14 * len - i) * xs[i - 1] * p[i - 1];\n  }\n  return res;\n};\n\n// https://en.wikipedia.org/wiki/Linear_recurrence_of_polynomial\nconst polyRecDer10 = (p, xs) => {\n  const len = xs.length;\n  const res = [];\n  for (let i = 1; i < len; i++) {\n    res[i] = (len - i) * p[i] + (16 * len - i) * xs[i - 1] * p[i - 1];\n  }\n  return res;\n};\n\n// https://en.wikipedia.org/wiki/Linear_recurrence_of_polynomial\nconst polyRecDer11 = (p, xs) => {\n  const len = xs.length;\n  const res = [];\n  for (let i"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n    let fib = [0, 1, 1];\n    let fibi = [0, 1];\n    if (n > 2) {\n        for (let i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fibi[i - 2];\n            fibi[i] = fibi[i - 1];\n        }\n    }\n    return fib[n];\n}\n\nconsole.log(fibfib(7));\n\n/*\n    The Fibonacci sequence is a sequence of nth order where the first two terms are 1 and 1, the next two are 1, 1 + the first two terms, the next is 1 + the first two terms + the first two terms, the nth is the first two terms + the nth term. \n    Pleasewrite a function to calculate the nth term of the Fibonacci sequence.\n    >>> fibonacci(3)\n    2\n    */\nconst fibonacci = (n) => {\n    if (n === 1) {\n        return 1;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    let fib = [1, 1];\n    let fibi = [1, 1];\n    for (let i = 2; i < n; i++) {\n        fib[i] = fib[i - 1] + fibi[i - 2];\n        fibi[i] = fibi[i - 1];\n    }\n    return fib[n - 1];\n}\n\nconsole.log(fibonacci(3));\n\n/*\n    The Fibonacci sequence is a sequence of nth order where the first two terms are 1 and 1, the next two are 1, 1 + the first two terms, the next is 1 + the first two terms + the first two terms, the nth is the first two terms + the nth term. \n    Pleasewrite a function to calculate the nth term of the Fibonacci sequence, n = 3.\n    >>> fibonacci(3)\n    2\n    */\nconst fibonacci3 = (n) => {\n    if (n === 1) {\n        return 1;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    if (n === 3) {\n        return 1 + fibonacci(2);\n    }\n    let fib = [1, 1];\n    let fibi = [1, 1];\n    for (let i = 2; i < n; i++) {\n        fib[i] = fib[i - 1] + fibi[i - 2];\n        fibi[i] = fibi[i - 1];\n    }\n    return fib[n - 1];\n}\n\nconsole.log(fibonacci3(3));\n\n/*\n    The Fibonacci sequence is a sequence of nth order where the first two terms are 1 and 1, the next two are 1, 1 + the first two terms, the next is 1 + the first two terms + the first two terms, the nth is the first two terms + the nth term. \n    Pleasewrite a function to calculate the nth term of the Fibonacci sequence, n = 8.\n    >>> fibonacci(8)\n    44\n    */\nconst fibonacci8 = (n) => {\n    if (n === 1) {\n        return 1;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    if (n === 3) {\n        return 1 + fibonacci(2);\n    }\n    if (n === 4) {\n        return 1 + fibonacci(2) + fibonacci(3);\n    }\n    if (n === 5) {\n        return 1 + fibonacci(2) + fibonacci(3) + fibonacci(4);\n    }\n    if (n === 6) {\n        return 1 + fibonacci(2) + fibonacci(3) + fibonacci(4) + fibonacci(5);\n    }\n    if (n === 7) {\n        return 1 + fibonacci(2) + fibonacci(3) + fibonacci(4) + fibonacci(5) + fibonacci(6);\n    }\n    if (n === 8) {\n        return 1 + fibonacci(2) + fibonacci(3) + fibonacci(4) + fibonacci(5) + fibonacci(6) + fibonacci(7);\n    }\n    let fib = [1, 1];\n    let fibi = [1, 1];\n    for (let i = 2; i < n; i++) {\n        fib[i] = fib[i - 1] + fibi[i - 2];\n        fibi[i] = fibi[i - 1];\n    }\n    return fib[n - 1];\n}\n\nconsole.log(fibonacci8(8));\n\n/*\n    The Fibonacci sequence is a sequence of nth order where the first two terms are 1 and 1, the next two are 1, 1 + the first two terms, the next is 1 + the first two terms + the first two terms, the nth is the first two terms + the nth term. \n    Pleasewrite a function to calculate the nth term of the Fibonacci sequence, n = 5.\n    >>> fibonacci(5)\n    7\n    */\nconst fibonacci5 = (n) => {\n    if (n === 1) {\n        return 1;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    if (n === 3) {\n        return 1 + fibonacci(2);\n    }\n    if (n === 4) {\n        return 1 + fibonacci(2) + fibonacci"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g .\n  Vow els in th is case are 'a', 'e', 'i', ' o',  'u'. Here, 'y ' is also a\n vowel, but only when it i s at the end of the giv e n word .\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g.\n  Vow els in th is case are 'a', 'e', 'i','o',  'u'. Here, 'y'is also a\n vowel, but only when it i s at the end of the giv e n word.\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let v = 0\n  s.split('').forEach((c) => {\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u')\n      v++\n  })\n  return v\n}\n\n/*Write a function that takes a string as input and reverses the\n  order of the characters.\n  Here, a palindrome is defined as a string which is equal to its\n  reverse.\n\n  Exampl e:\n  >>> isPalindrome(\"racecar\")\n  true\n  >>> isPalindrome(\"racer\")\n  false\n  >>> isPalindrome(\"A man, a plan, a canal- Panama\")\n  true\n  >>> isPalindrome(\"a man, a plan, a canal- Panama\")\n  false\n  */\nconst isPalindrome = (s) => {\n  return s === s.split('').reverse().join('')\n}\n\n/*Write a function that takes a string as input and returns the length of the\n  string.\n  Here, the length of a string is the number of letters in th e string.\n  Also, if the string is an empty string, return 0.\n  Examples:\n  >>> lengthOfString(\"racecar\")\n  7\n  >>> lengthOfString(\"racer\")\n  0\n  >>> lengthOfString(\"\")\n  0\n  */\nconst lengthOfString = (s) => {\n  return s.length || 0\n}\n\n/*Write a function that takes a string as input and return the number of times\n  the string appears in the input.\n  Examples:\n  >>> count(\"racecar\", \"racecar\")\n  2\n  >>> count(\"racecar\", \"racecar\")\n  2\n  >>> count(\"racecar\", \"racecar\")\n  2\n  >>> count(\"racecar\", \"racer\")\n  1\n  >>> count(\"racecar\", \"\")\n  0\n  */\nconst count = (s, t) => {\n  return s.split('').filter((c) => t.includes(c)).length\n}\n\n/*Write a function that takes two strings as input and returns a boolean\n  value.\n\n  The function should return true if one of the input strings is a\n  substring of the other and it should return false otherwise.\n\n  Examples:\n  >>> isSubString(\"racecar\", \"racecar\")\n  true\n  >>> isSubString(\"racecar\", \"racecar\")\n  true\n  >>> isSubString(\"racecar\", \"racer\")\n  false\n  >>> isSubString(\"racecar\", \"\")\n  false\n  >>> isSubString(\"racecar\", \"racecar\")\n  true\n  */\nconst isSubString = (s, t) => {\n  return t.indexOf(s) > -1\n}\n\n/*Write a function that takes two strings as input and returns a boolean\n  value.\n\n  The function should return true if one of the input strings is a\n  vowel and it should return false otherwise.\n\n  Examples:\n  >>> isVowel(\"a\")\n  true\n  >>> isVowel(\"\")\n  false\n  >>> isVowel(\"a\")\n  true\n  >>> isVowel(\"\")\n  false\n  >>> isVowel(\"e\")\n  true\n  >>> isVowel(\"\")\n  false\n  */\nconst isVowel = (s) => {\n  return s.includes('a') || s.includes('e') || s.includes('i') || s.includes('o') || s.includes('u')\n}\n\n/*Write a function that takes two strings as input and returns a boolean\n  value.\n\n  The function should return true if one of the input strings contains\n  all the vowels and it should return false otherwise.\n\n  Examples:\n  >>> containsAllVowels(\"racecar\")\n  true\n  >>> containsAllVowels(\"\")\n  false\n  >>> containsAllVowels(\"racecar\")\n  true\n  >>> containsAllVowels(\"\")\n  false\n  >>> containsAllVowels(\"racecar\")\n  true\n  >>> containsAllVowels(\"racecar\")\n  true\n  >>> containsAllVowels(\"racer\")\n  false\n  >>> containsAllVowels(\"\")\n  false\n  */\nconst containsAllVowels = (s) => {\n  return s.includes('a') || s.includes('e') || s.includes('i') || s.includes('o') || s.includes('u')\n}\n\n/*Write a function that takes two strings as input and returns a boolean\n  value.\n\n  The function should return true if one of the input strings is a\n  substring of the other and it should return false otherwise.\n\n  Examples:\n  >>> isSubString(\"racecar\", \"racecar\")\n  true\n  >>> isSubString(\"racecar\", \"racecar\")\n  true\n  >>> isSubString(\"racecar\", \"racecar\")\n  true\n  >>> isSubString(\"racecar\", \"racer\")\n  false\n  >>> isSubString(\"racecar\", \"\")\n  false\n  >>> isSubString(\"racecar\", \"racecar\")\n  true\n  */\nconst contains = (s, t) => {\n  return t.indexOf(s) > -1\n}\n\n/*Write a function that takes a string as input and returns a string\n  with each vowel in the input string replaced by the letter\n  corresponding to the position of the vowel in the string in\n  the alphabet, starting from 0.\n\n  Examples:\n  >>> vowelsReplaced(\"racecar\")\n  'racecar'\n  >>> vowelsReplaced(\"racecar\")\n  'racecar'\n  >>> vowelsReplaced(\"racer\")\n  'rcear'\n  >>> vowelsReplaced(\"racecar\")\n  'racecar'\n  >>> vowelsReplaced(\"\")\n  ''\n  >>> vowelsReplaced(\"racecar\")\n  'racecar'\n  */\nconst vowels"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the inte ger x , shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the inte ger x, shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n    const x2 = x.toString();\n    const x2Shifted = x2.slice(shift);\n    return x2Shifted.concat(x2.slice(0, shift));\n};\n\nconst isPalindrome = (x) => {\n    const x2 = x.toString();\n    return x2.slice(0, x.length / 2).toString() === x2.slice(x.length / 2).toString();\n};\n\n//console.log(circularShift(12, 1));\n//console.log(circularShift(12, 2));\n//console.log(circularShift(12, 3));\n//console.log(circularShift(12, 4));\n//console.log(circularShift(12, 5));\n//console.log(circularShift(12, 6));\n//console.log(circularShift(12, 7));\n//console.log(circularShift(12, 8));\n//console.log(circularShift(12, 9));\n//console.log(circularShift(12, 10));\n//console.log(circularShift(12, 11));\n//console.log(circularShift(12, 12));\n//console.log(circularShift(12, 13));\n//console.log(circularShift(12, 14));\n//console.log(circularShift(12, 15));\n//console.log(circularShift(12, 16));\n//console.log(circularShift(12, 17));\n//console.log(circularShift(12, 18));\n//console.log(circularShift(12, 19));\n//console.log(circularShift(12, 20));\n//console.log(circularShift(12, 21));\n//console.log(circularShift(12, 22));\n//console.log(circularShift(12, 23));\n//console.log(circularShift(12, 24));\n//console.log(circularShift(12, 25));\n//console.log(circularShift(12, 26));\n//console.log(circularShift(12, 27));\n//console.log(circularShift(12, 28));\n//console.log(circularShift(12, 29));\n//console.log(circularShift(12, 30));\n//console.log(circularShift(12, 31));\n//console.log(circularShift(12, 32));\n//console.log(circularShift(12, 33));\n//console.log(circularShift(12, 34));\n//console.log(circularShift(12, 35));\n//console.log(circularShift(12, 36));\n//console.log(circularShift(12, 37));\n//console.log(circularShift(12, 38));\n//console.log(circularShift(12, 39));\n//console.log(circularShift(12, 40));\n//console.log(circularShift(12, 41));\n//console.log(circularShift(12, 42));\n//console.log(circularShift(12, 43));\n//console.log(circularShift(12, 44));\n//console.log(circularShift(12, 45));\n//console.log(circularShift(12, 46));\n//console.log(circularShift(12, 47));\n//console.log(circularShift(12, 48));\n//console.log(circularShift(12, 49));\n//console.log(circularShift(12, 50));\n//console.log(circularShift(12, 51));\n//console.log(circularShift(12, 52));\n//console.log(circularShift(12, 53));\n//console.log(circularShift(12, 54));\n//console.log(circularShift(12, 55));\n//console.log(circularShift(12, 56));\n//console.log(circularShift(12, 57));\n//console.log(circularShift(12, 58));\n//console.log(circularShift(12, 59));\n//console.log(circularShift(12, 60));\n//console.log(circularShift(12, 61));\n//console.log(circularShift(12, 62));\n//console.log(circularShift(12, 63));\n//console.log(circularShift(12, 64));\n//console.log(circularShift(12, 65));\n//console.log(circularShift(12, 66));\n//console.log(circularShift(12, 67));\n//console.log(circularShift(12, 68));\n//console.log(circularShift(12, 69));\n//console.log(circularShift(12, 70));\n//console.log(circularShift(12, 71));\n//console.log(circularShift(12, 72));\n//console.log(circularShift(12, 73));\n//console.log(circularShift(12, 74));\n//console.log(circularShift(12, 75));\n//console.log(circularShift(12, 76));\n//console.log(circularShift(12, 77));\n//console.log(circularShift(12, 78));\n//console.log(circularShift(12, 79));\n//console.log(circularShift(12, 80));\n//console.log(circularShift(12, 81));\n//console.log(circularShift(12, 82));\n//console.log(circularShift(12, 83));\n//console.log(circularShift(12, 84));\n//console.log(circularShift(12, 85));\n//console.log(circularShift(12, 86));\n//console.log(circularShift(12, 87));\n//console.log(circularShift(12, 88));\n//console.log(circularShift(12, 89));\n//console.log(circularShift(12, 90));\n//console.log(circularShift(12, 91));\n//console.log(circularShift(12, 92));\n//console.log(circularShift(12, 93));\n//console.log(circularShift(12, 94));\n//console.log(circularShift(12, 95));\n//console.log"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const uppers = s.match(/[A-Z]/g);\n  return uppers.reduce((prev, curr) => prev + curr.charCodeAt(0), 0);\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges , a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges, a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n    const total = n + 1;\n    const count = s.split(/\\s+/).map(( str ) => {\n      const num = parseInt(str);\n      return num;\n    });\n    const countFruits = count.reduce((a, b) => a + b, 0);\n    const difference = total - countFruits;\n    return difference;\n  };\n  console.log(fruitDistribution(\"2 apples and 3 ora nge s\", 100));\n  console.log(fruitDistribution(\"1 apples and 3 oranges\", 3));\n  console.log(fruitDistribution(\"100 apples and1ora nges\", 1));\n  console.log(fruitDistribution(\"100 apples and1ora nges\", 0));\n  console.log(fruitDistribution(\"100 apples and1ora nges\", 1));\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index .\n\n  The plucked node s hould be returned in a list , [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index.\n\n  The plucked node s hould be returned in a list, [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = -1;\n  let minValue = 0;\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] < min) {\n        min = arr[i];\n        minIndex = i;\n        minValue = arr[i];\n      } else if (arr[i] === min) {\n        minValue = arr[i];\n      }\n    }\n  }\n  return [minValue, minIndex];\n};\n\nexport default pluck;\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let i = 0;\n  let len = lst.length;\n  while (i < len) {\n    if (lst[i] > 0) {\n      return Math.max(lst[i], search(lst.slice(0, i + 1)));\n    }\n    i++;\n  }\n  return -1;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1])); // 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // 3\nconsole.log(search([5, 5, 4, 4, 4])); // -1<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value ,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const arr = lst.slice(0)\n  const min = arr[0]\n  const max = arr[arr.length - 1]\n  const length = arr.length\n  const middle = Math.floor(length / 2)\n  let start = 0\n  let end = length - 1\n  const left = arr.slice(0, middle)\n  const right = arr.slice(middle, length)\n\n  while (left.length < length && right.length < length) {\n    if (left[left.length - 1] <= right[right.length - 1]) {\n      arr[start + left.length - 1] = left[left.length - 1]\n      arr[start + middle] = left[0]\n      start += left.length\n    } else {\n      arr[start + right.length - 1] = right[right.length - 1]\n      arr[start + middle] = right[0]\n      start += right.length\n    }\n  }\n\n  if (left.length < length) {\n    arr[start + left.length - 1] = left[left.length - 1]\n    arr[start + middle] = left[0]\n  } else {\n    arr[start + right.length - 1] = right[right.length - 1]\n    arr[start + middle] = right[0]\n  }\n  return arr\n}\n\nconsole.log(strangeSortList([1, 2, 3, 4]))\nconsole.log(strangeSortList([5, 5, 5, 5]))\nconsole.log(strangeSortList([1, 1, 1, 1, 1, 1]))\nconsole.log(strangeSortList([1, 2, 3, 4, 5]))\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  //console.log(a, b, c);\n  let p = 0;\n  if ((b + c) === 0) {\n    p = a * b / 2;\n  } else {\n    p = (a + b + c) / 2 * (a * b) / 4;\n  }\n  if (p > 0 && p < 1) {\n    return Math.round(p * 100) / 100;\n  } else {\n    return -1;\n  }\n};\n\nexport default triangleArea;\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const r = q.map(x => x.toString().replace(/\\d/g, ''))\n  const s = r.join('')\n  if (s.length === w) {\n    return true\n  }\n  return false\n}\n\nconst tests = [\n  [['1', '2'], 5],\n  [['3', '2', '3'], 1],\n  [['3'], 5],\n  [['3', '2', '3'], 9],\n  [['3', '2', '3'], 2],\n  [['3', '2', '3', '2'], 9],\n  [['3', '2', '3', '2', '3'], 1]\n]\n\ntests.forEach(test => {\n  console.log(`willItFly(${JSON.stringify(test[0])}, ${test[1]}) = ${willItFly(test[0], test[1])}`)\n})\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element .\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let arrLength = arr.length;\n  let currSum = 0;\n  let sum = 0;\n  let sum2 = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n\n  while (i < arrLength) {\n    currSum += arr[i];\n    i++;\n  }\n\n  sum = currSum;\n  while (j < arrLength) {\n    sum2 += arr[j];\n    j++;\n  }\n\n  if (sum!= sum2) {\n    return -1;\n  }\n\n  if (sum % 2 === 0) {\n    return -1;\n  }\n\n  for (i = 0; i < arrLength - 1; i++) {\n    if (arr[i] === arr[i + 1]) {\n      continue;\n    }\n    for (j = i + 2; j < arrLength; j++) {\n      if (arr[i] === arr[j]) {\n        arr[j] = arr[i + 1];\n        return j - i - 1;\n      }\n    }\n  }\n  return -1;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let l1 = lst1.length\n  let l2 = lst2.length\n  if (l1 === l2) {\n    return lst1\n  } else if (l1 > l2) {\n    return lst1\n  } else {\n    return lst2\n  }\n}\n\nmodule.exports = totalMatch\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  isMultiplyPrime\n};\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases .\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases.\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) {\n    return x === 1;\n  }\n  const base = Math.abs(x);\n  const base_n = Math.pow(base, n);\n  if (base_n === x) {\n    return true;\n  }\n  return false;\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a >= 0 && a <= 255 && Math.pow(2, 8 * a) == Math.pow(2, 8 * a);\n};\n\nexport default iscube;\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F .\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F.\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let charArr = num.split('');\n  const prime = [2, 3, 5, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11, 13, 1, 7, 11"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const intToBits = (int) => {\n    let i, bit, temp;\n    const bits = new Array(32);\n    for (i = 31; i >= 0; i--) {\n      temp = int.toString(2).charAt(i);\n      bit = parseInt(temp, 2);\n      bits[31 - i] = bit;\n    }\n    return bits;\n  };\n  const addExtraBits = (bits) => {\n    let i, bit;\n    const temp = 'db';\n    const extraBits = new Array(32);\n    for (i = 0; i < 32; i++) {\n      bit = parseInt(temp.charAt(i), 2);\n      extraBits[31 - i] = bit;\n    }\n    return extraBits;\n  };\n  return intToBits(decimal)\n   .map(addExtraBits)\n   .join('');\n};\n\nconst test = (testData) => {\n  const expected = testData.expected;\n  const actual = decimalToBinary(testData.decimal);\n  console.log('actual', actual);\n  console.log('expected', expected);\n  console.log('should be equal', actual === expected);\n};\n\ntest({\n  decimal: 15,\n  expected: 'db1111db'\n});\ntest({\n  decimal: 32,\n  expected: 'db100000db'\n});\n\n// Your task is to implement a function that accepts a number as a parameter and returns the binary representation of that number.\n// Your function should take a number in decimal form and convert it to a binary representation.\n// Each character of the returned string should be either 0 or 1.\n// The function should return a string of characters.\n// The extra characters should be in the form of 'db' at the beginning and end of the string.\n\n// Examples:\n// decimalToBinary(15)  # returns '11111111111111'\n// decimalToBinary(32)  # returns '100011111100100110001111110001100011100011111101000111111111101'\n// decimalToBinary(15)  # returns '11111111111111'\n// decimalToBinary(32)  # returns '100011111100100110001111110001100011100011111101000111111111101'\n\nconst binaryToDecimal = (binary) => {\n  const intToBits = (int) => {\n    let i, bit, temp;\n    const bits = new Array(32);\n    for (i = 31; i >= 0; i--) {\n      temp = int.toString(2).charAt(i);\n      bit = parseInt(temp, 2);\n      bits[31 - i] = bit;\n    }\n    return bits;\n  };\n  const removeExtraBits = (bits) => {\n    const temp = '11111111111111';\n    const extraBits = new Array(32);\n    for (i = 0; i < 32; i++) {\n      extraBits[31 - i] = parseInt(temp.charAt(i), 2);\n    }\n    return extraBits;\n  };\n  return intToBits(binary)\n   .map(removeExtraBits)\n   .join('');\n};\n\nconst test = (testData) => {\n  const expected = testData.expected;\n  const actual = binaryToDecimal(testData.binary);\n  console.log('actual', actual);\n  console.log('expected', expected);\n  console.log('should be equal', actual === expected);\n};\n\ntest({\n  binary: '11111111111111',\n  expected: '15'\n});\ntest({\n  binary: '100011111100100110001111110001100011100011111101000111111111101',\n  expected: '32'\n});\n\n// Your task is to implement a function that accepts a string as a parameter and returns the reverse string.\n// The function should take a string and reverse the order of the characters.\n// Example:\n// reverse('Hello') -> 'olleH'\n// reverse('Hello World') -> 'dlrow,olleH'\n\nconst reverse = (text) => {\n  const reversed = text.split('').reverse().join('');\n  return reversed;\n};\n\nconst test = (testData) => {\n  const expected = testData.expected;\n  const actual = reverse(testData.text);\n  console.log('actual', actual);\n  console.log('expected', expected);\n  console.log('should be equal', actual === expected);\n};\n\ntest({\n  text: 'Hello',\n  expected: 'olleH'\n});\ntest({\n  text: 'Hello World',\n  expected: 'dlrow,olleH'\n});\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let t = 0;\n  while (s.length > t) {\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    for (let i = 0; i < s.length; i++) {\n      x += s[i] == 'a'? 1 : 0;\n      y += s[i] == 'b'? 1 : 0;\n      z += s[i] == 'd'? 1 : 0;\n    }\n    if (x!= 0 && y!= 0 && z!= 0) {\n      let d = Math.sqrt(x*x + y*y + z*z);\n      if (d == Math.floor(d)) {\n        return true;\n      }\n    }\n    t++;\n  }\n  return false;\n};\n\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0 .7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0.7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const list = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 3.7) {\n      list.push('A+');\n    } else if (grades[i] >= 3.3) {\n      list.push('A-');\n    } else if (grades[i] >= 3.0) {\n      list.push('B+');\n    } else if (grades[i] >= 2.7) {\n      list.push('B-');\n    } else if (grades[i] >= 2.3) {\n      list.push('C-');\n    } else if (grades[i] >= 2.0) {\n      list.push('C+');\n    } else if (grades[i] >= 1.7) {\n      list.push('D+');\n    } else if (grades[i] >= 1.3) {\n      list.push('D-');\n    } else if (grades[i] >= 1.0) {\n      list.push('E');\n    } else {\n      list.push('F');\n    }\n  }\n  return list;\n};\n\n/*\n  It is the last week of the semester a nd th e teacher has to give the grades to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0.7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst letterGrade = (grades) => {\n  const list = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 3.7) {\n      list.push('A+');\n    } else if (grades[i] >= 3.3) {\n      list.push('A-');\n    } else if (grades[i] >= 3.0) {\n      list.push('B+');\n    } else if (grades[i] >= 2.7) {\n      list.push('B-');\n    } else if (grades[i] >= 2.3) {\n      list.push('C-');\n    } else if (grades[i] >= 2.0) {\n      list.push('C+');\n    } else if (grades[i] >= 1.7) {\n      list.push('D+');\n    } else if (grades[i] >= 1.3) {\n      list.push('D-');\n    } else if (grades[i] >= 1.0) {\n      list.push('E');\n    } else {\n      list.push('F');\n    }\n  }\n  return list;\n};\n\nexport default {\n  numericalLetterGrade,\n  letterGrade\n};\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const numbers = [];\n  const numberOfChars = string.length;\n  for (let i = 0; i < numberOfChars; i++) {\n    numbers[i] = string[i];\n  }\n\n  const numbers2 = numbers.filter(n => {\n    return!isNaN(parseInt(n, 10));\n  });\n\n  const numbers3 = numbers.filter(n => {\n    return isNaN(parseInt(n, 10));\n  });\n\n  return!(numbers2.length === numberOfChars && numbers3.length === 0);\n};\n\nexport { primeLength };\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n  const len = n - 1\n  return Math.floor((Math.pow(2, len) - 1) / 2)\n}\n\ncon s t end sOneEnds= (n) => {\n  const len = n - 1\n  return Math.ceil((Math.pow(2, len) - 1) / 2)\n}\n\ncon s t nums sOneEnds= (n) => {\n  const len = n - 1\n  return Math.ceil((Math.pow(2, len) - 1) / 2)\n}\n\ncon s t nums sOneEnds= (n) => {\n  const len = n - 1\n  return Math.floor((Math.pow(2, len) - 1) / 2)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const num = N.toString(2)\n  const res = []\n  \n  for (let i = 0; i < num.length; i++) {\n    const digit = parseInt(num[i], 2)\n    res.push(digit)\n  }\n  \n  return res.join('')\n}\n\nconsole.log(solve(100))\nconsole.log(solve(147))\nconsole.log(solve(1000))\nconsole.log(solve(1))\nconsole.log(solve(0))\nconsole.log(solve(1000000))\nconsole.log(solve(10000000))\nconsole.log(solve(100000000))\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const l = lst.length\n  const arr = Array.from(lst)\n  return arr.reduce((acc, elem) => {\n    return acc + elem\n  })\n}\n\nconsole.log(add([4, 2, 6, 7]))\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence .\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n    const newS = s.toLowerCase()\n    let currIndex = 0\n    let newIndex = 0\n    let charArray = newS.split('')\n    let newCharArray = newS.split('')\n\n    for (let i = 0; i < charArray.length; i++) {\n        if (newCharArray[i] ==='') {\n            newCharArray[currIndex] = charArray[i]\n            currIndex++\n            newIndex = currIndex\n        }\n    }\n    return newS\n}\n\nconst shuffle = (s) => {\n    let chars = s.split('')\n    let shuffledChars = []\n    let index = Math.floor(Math.random() * chars.length)\n    shuffledChars.push(chars[index])\n    shuffledChars.push(chars[Math.floor(Math.random() * chars.length)])\n\n    return shuffledChars.join('')\n}\n\nconst shuffle1 = (s) => {\n    let chars = s.split('')\n    let shuffledChars = []\n    let index = Math.floor(Math.random() * chars.length)\n    shuffledChars.push(chars[index])\n    shuffledChars.push(chars[Math.floor(Math.random() * chars.length)])\n\n    return shuffledChars.join('')\n}\n\nconst shuffle2 = (s) => {\n    let chars = s.split('')\n    let shuffledChars = []\n    let index = Math.floor(Math.random() * chars.length)\n    shuffledChars.push(chars[index])\n    shuffledChars.push(chars[Math.floor(Math.random() * chars.length)])\n\n    return shuffledChars.join('')\n}\n\nconst shuffle3 = (s) => {\n    let chars = s.split('')\n    let shuffledChars = []\n    let index = Math.floor(Math.random() * chars.length)\n    shuffledChars.push(chars[index])\n    shuffledChars.push(chars[Math.floor(Math.random() * chars.length)])\n\n    return shuffledChars.join('')\n}\n\nconst shuffle4 = (s) => {\n    let chars = s.split('')\n    let shuffledChars = []\n    let index = Math.floor(Math.random() * chars.length)\n    shuffledChars.push(chars[index])\n    shuffledChars.push(chars[Math.floor(Math.random() * chars.length)])\n\n    return shuffledChars.join('')\n}\n\nconst shuffle5 = (s) => {\n    let chars = s.split('')\n    let shuffledChars = []\n    let index = Math.floor(Math.random() * chars.length)\n    shuffledChars.push(chars[index])\n    shuffledChars.push(chars[Math.floor(Math.random() * chars.length)])\n\n    return shuffledChars.join('')\n}\n\nconst shuffle6 = (s) => {\n    let chars = s.split('')\n    let shuffledChars = []\n    let index = Math.floor(Math.random() * chars.length)\n    shuffledChars.push(chars[index])\n    shuffledChars.push(chars[Math.floor(Math.random() * chars.length)])\n\n    return shuffledChars.join('')\n}\n\nconst shuffle7 = (s) => {\n    let chars = s.split('')\n    let shuffledChars = []\n    let index = Math.floor(Math.random() * chars.length)\n    shuffledChars.push(chars[index])\n    shuffledChars.push(chars[Math.floor(Math.random() * chars.length)])\n\n    return shuffledChars.join('')\n}\n\nconst shuffle8 = (s) => {\n    let chars = s.split('')\n    let shuffledChars = []\n    let index = Math.floor(Math.random() * chars.length)\n    shuffledChars.push(chars[index])\n    shuffledChars.push(chars[Math.floor(Math.random() * chars.length)])\n\n    return shuffledChars.join('')\n}\n\nconst shuffle9 = (s) => {\n    let chars = s.split('')\n    let shuffledChars = []\n    let index = Math.floor(Math.random() * chars.length)\n    shuffledChars.push(chars[index])\n    shuffledChars.push(chars[Math.floor(Math.random() * chars.length)])\n\n    return shuffledChars.join('')\n}\n\nconst shuffle10 = (s) => {\n    let chars = s.split('')\n    let shuffledChars = []\n    let index = Math.floor(Math.random() * chars.length)\n    shuffledChars.push(chars[index])\n    shuffledChars.push(chars[Math.floor(Math.random() * chars.length)])\n\n    return shuffledChars.join('')\n}\n\nconst shuffle11 = (s) => {\n    let chars = s.split('')\n    let shuffledChars = []\n    let index = Math.floor(Math.random() * chars.length)\n    shuffledChars.push(chars[index])\n    shuffledChars.push(chars[Math.floor(Math.random() * chars.length)])"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples ,  [(x1,  y1), (x2,y2) ... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples,  [(x1,  y1), (x2,y2)... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const sorted = [...lst].sort((a, b) => {\n    const aRow = a[x];\n    const bRow = b[x];\n    if (aRow < bRow) {\n      return -1;\n    }\n    if (aRow > bRow) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted.map((x) => x[x.length - 1]);\n};\n\nconsole.log(getRow([\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 1, 6],\n  [1, 2, 3, 4, 5, 1]\n], 1));\n\n/*\n  Given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples,  [(x1,  y1), (x2,y2)... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 2) == [(1, 1), (2, 3), (2, 0), (3, 5), (4, 4)]\n  getRow([], 2) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 3)]\n  */\nconst getRow = (lst, x) => {\n  const sorted = [...lst].sort((a, b) => {\n    const aRow = a[x];\n    const bRow = b[x];\n    if (aRow < bRow) {\n      return -1;\n    }\n    if (aRow > bRow) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted.map((x) => x[x.length - 1]);\n};\n\nconsole.log(getRow([\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 1, 6],\n  [1, 2, 3, 4, 5, 1]\n], 2));\n\n/*\n  Given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples,  [(x1,  y1), (x2,y2)... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 3) == [(1, 1), (2, 3), (2, 0), (3, 5), (4, 4)]\n  getRow([], 3) == []\n  getRow([[], [1], [1, 2, 3]], 4) == [(1, 1), (2, 3), (2, 0)]\n  */\nconst getRow = (lst, x) => {\n  const sorted = [...lst].sort((a, b) => {\n    const aRow = a[x];\n    const bRow = b[x];\n    if (aRow < bRow) {\n      return -1;\n    }\n    if (aRow > bRow) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted.map((x) => x[x.length - 1]);\n};\n\nconsole.log(getRow([\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 1, 6],\n  [1, 2, 3, 4, 5, 1]\n], 3));\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let min = array[0], max = array[array.length - 1];\n  let mid = Math.floor((max - min) / 2);\n  let count = 0;\n  while (count <= mid) {\n    let sum = 0;\n    for (let i = 0; i < array.length; i++) {\n      sum += array[i];\n    }\n    if (sum % 2 === 0) {\n      array.sort((a, b) => a - b);\n    } else {\n      array.sort((a, b) => b - a);\n    }\n    count++;\n  }\n  return array;\n};\n\nconsole.log(sortArray([5, 4, 3, 0, 1, 5, 6]));\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const strLen = s.length\n  const alphabet = []\n  for (let i = 0; i < 26; i++) {\n    alphabet.push(i)\n  }\n  const arr = s.split('')\n  let newArr = []\n  let i = 0\n  while (i < strLen) {\n    newArr.push(arr[i])\n    i = i + 2\n  }\n  let j = 0\n  while (j < strLen) {\n    newArr[j] = alphabet[newArr[j] - 26]\n    j = j + 2\n  }\n  return newArr.join('')\n}\n\n/*Create a function decrypt that takes a str ing as an argument and\n  returns a string decrypted with the alphabet be ing r otated.\n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'gf'\n  decrypt('kj') returns 'et'\n  */\nconst decrypt = (s) => {\n  const strLen = s.length\n  const alphabet = []\n  for (let i = 0; i < 26; i++) {\n    alphabet.push(i)\n  }\n  const arr = s.split('')\n  let newArr = []\n  let i = 0\n  while (i < strLen) {\n    newArr.push(arr[i])\n    i = i + 2\n  }\n  let j = 0\n  while (j < strLen) {\n    newArr[j] = alphabet[newArr[j] - 26]\n    j = j + 2\n  }\n  return newArr.join('')\n}\n\n/* Create a function that returns a string of the same length with the\n  encryption of the input string.\n  For example:\n  encrypt('hi') returns 'lm'\n  */\nconst encryptor = (s) => {\n  const strLen = s.length\n  let newArr = []\n  let i = 0\n  while (i < strLen) {\n    newArr.push(s[i])\n    i = i + 2\n  }\n  return newArr.join('')\n}\n\n/*Create a function that returns a string of the same length with the\n  decryption of the input string.\n  For example:\n  decrypt('lm') returns 'hi'\n  */\nconst decryptor = (s) => {\n  const strLen = s.length\n  let newArr = []\n  let i = 0\n  while (i < strLen) {\n    newArr.push(s[i])\n    i = i + 2\n  }\n  return newArr.join('')\n}\n\nconst encrypt = (s) => {\n  const strLen = s.length\n  const alphabet = []\n  for (let i = 0; i < 26; i++) {\n    alphabet.push(i)\n  }\n  let newArr = []\n  let i = 0\n  while (i < strLen) {\n    newArr.push(s[i])\n    i = i + 2\n  }\n  let j = 0\n  while (j < strLen) {\n    newArr[j] = alphabet[newArr[j] - 26]\n    j = j + 2\n  }\n  return newArr.join('')\n}\n\nconst decrypt = (s) => {\n  const strLen = s.length\n  const alphabet = []\n  for (let i = 0; i < 26; i++) {\n    alphabet.push(i)\n  }\n  let newArr = []\n  let i = 0\n  while (i < strLen) {\n    newArr.push(s[i])\n    i = i + 2\n  }\n  let j = 0\n  while (j < strLen) {\n    newArr[j] = alphabet[newArr[j] - 26]\n    j = j + 2\n  }\n  return newArr.join('')\n}\n\nconst encryptor = (s) => {\n  const strLen = s.length\n  let newArr = []\n  let i = 0\n  while (i < strLen) {\n    newArr.push(s[i])\n    i = i + 2\n  }\n  return newArr.join('')\n}\n\nconst decryptor = (s) => {\n  const strLen = s.length\n  let newArr = []\n  let i = 0\n  while (i < strLen) {\n    newArr.push(s[i])\n    i = i + 2\n  }\n  return newArr.join('')\n}\n\nmodule.exports = { encrypt, decrypt, encryptor, decryptor }\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1 , 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1, 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n  return lst.length > 1? lst[1] : null\n}\nconstnextSmallest = (lst) => {\n  return tSmallest(lst)\n}\nconstnextSmallest.test = [1,2,3,4,5].map(nextSmallest)\nconsole.log(nextSmallest.test)<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n    if (!S || S.length === 0) return 0;\n\n    const charSet = '.,?! ';\n    const bood = new Set();\n\n    S.split('').forEach(c => {\n        if (charSet.indexOf(c)!== -1) bood.add(c);\n    });\n\n    return bood.size;\n};\n\nmodule.exports = isBored;\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two , and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const nums = [x, y, z];\n  const allInt = num =>!(isNaN(num) ||!isFinite(num));\n  const allInts = nums => nums.every(allInt);\n  const allIntsSum = sum => nums.reduce((acc, num) => acc + num, 0);\n  const isValid = nums => allInts(nums) && allIntsSum(nums) % 1 === 0;\n  return isValid(nums);\n};\n\nconst anyInts = [\n  [3, 2, 7],\n  [3, -2, 1],\n  [3.6, -2.2, 2]\n];\n\nconst anyIntsResult = anyInts.map(x => x[0] + x[1] + x[2]);\n\nconsole.log(anyIntsResult);\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters .  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters.  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  return message.replace(/\\s+/g, (match, index, a) => {\n    const prev = a[index - 1];\n    if(index > 0) {\n      return match.charAt(index) == prev.charAt(0)? prev : match;\n    }\n    return match;\n  });\n};\n\nconst decode = (message) => {\n  return message.replace(/(.)/g, (match, index, a) => {\n    const next = a[index + 1];\n    if(index < a.length - 1) {\n      return next == match.charAt(0)? next : match;\n    }\n    return match;\n  });\n};\n\nconsole.log(encode('This is a message'));\nconsole.log(decode('This is a message'));\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  let max = 0\n  let sum = 0\n  lst.forEach((item, index) => {\n    sum += sumDigits(primes.reduce((acc, p, index) => p * index, 0) + item)\n    if (sum > max) max = sum\n  })\n  return max\n}\n\nconst sumDigits = (num) => {\n  let sum = 0\n  while (num > 0) {\n    sum += num % 10\n    num = Math.floor(num / 10)\n  }\n  return sum\n}\n\nmodule.exports = skjkasdkd\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n    const keys = Object.keys(dict);\n    for (let i = 0; i < keys.length; i++) {\n        if (typeof dict[keys[i]]!== \"string\" ||!/[a-z]/.test(keys[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst checkForDuplicates = (dict) => {\n    const keys = Object.keys(dict);\n    let duplicate = false;\n    for (let i = 0; i < keys.length; i++) {\n        const value = dict[keys[i]];\n        for (let j = i + 1; j < keys.length; j++) {\n            if (dict[keys[j]] === value) {\n                duplicate = true;\n            }\n        }\n    }\n    return duplicate;\n}\n\nconst checkForDuplicateKeys = (dict) => {\n    const keys = Object.keys(dict);\n    let duplicate = false;\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        for (let j = i + 1; j < keys.length; j++) {\n            if (dict[key] === dict[keys[j]]) {\n                duplicate = true;\n            }\n        }\n    }\n    return duplicate;\n}\n\nconst checkForDuplicateValues = (dict) => {\n    const keys = Object.keys(dict);\n    let duplicate = false;\n    for (let i = 0; i < keys.length; i++) {\n        const value = dict[keys[i]];\n        for (let j = i + 1; j < keys.length; j++) {\n            if (dict[keys[j]] === value) {\n                duplicate = true;\n            }\n        }\n    }\n    return duplicate;\n}\n\nconst checkForDuplicateValues = (dict) => {\n    const keys = Object.keys(dict);\n    let duplicate = false;\n    for (let i = 0; i < keys.length; i++) {\n        const value = dict[keys[i]];\n        for (let j = i + 1; j < keys.length; j++) {\n            if (dict[keys[j]] === value) {\n                duplicate = true;\n            }\n        }\n    }\n    return duplicate;\n}\n\nconst checkForDuplicateValues = (dict) => {\n    const keys = Object.keys(dict);\n    let duplicate = false;\n    for (let i = 0; i < keys.length; i++) {\n        const value = dict[keys[i]];\n        for (let j = i + 1; j < keys.length; j++) {\n            if (dict[keys[j]] === value) {\n                duplicate = true;\n            }\n        }\n    }\n    return duplicate;\n}\n\nconst checkForDuplicateValues = (dict) => {\n    const keys = Object.keys(dict);\n    let duplicate = false;\n    for (let i = 0; i < keys.length; i++) {\n        const value = dict[keys[i]];\n        for (let j = i + 1; j < keys.length; j++) {\n            if (dict[keys[j]] === value) {\n                duplicate = true;\n            }\n        }\n    }\n    return duplicate;\n}\n\nconst checkForDuplicateValues = (dict) => {\n    const keys = Object.keys(dict);\n    let duplicate = false;\n    for (let i = 0; i < keys.length; i++) {\n        const value = dict[keys[i]];\n        for (let j = i + 1; j < keys.length; j++) {\n            if (dict[keys[j]] === value) {\n                duplicate = true;\n            }\n        }\n    }\n    return duplicate;\n}\n\nconst checkForDuplicateValues = (dict) => {\n    const keys = Object.keys(dict);\n    let duplicate = false;\n    for (let i = 0; i < keys.length; i++) {\n        const value = dict[keys[i]];\n        for (let j = i + 1; j < keys.length; j++) {\n            if (dict[keys[j]] === value) {\n                duplicate = true;\n            }\n        }\n    }\n    return duplicate;\n}\n\nconst checkForDuplicateValues = (dict) => {\n    const keys = Object.keys(dict);\n    let duplicate = false;\n    for (let i = 0; i < keys.length; i++) {\n        const value = dict[keys[i]];\n        for (let j = i + 1; j < keys.length; j++) {\n            if (dict[keys[j]] === value) {\n                duplicate = true;\n            }\n        }\n    }\n    return duplicate;\n}\n\nconst checkForDuplicateValues = (dict) => {\n    const keys = Object.keys(dict);\n    let duplicate = false;\n    for (let i = 0; i < keys.length; i++) {\n        const value = dict[keys[i]];\n        for (let j = i + 1; j < keys.length; j++) {\n            if (dict[keys[j]] === value) {\n                duplicate = true;\n            }\n        }\n    }\n    return duplicate;\n}\n\nconst checkForDuplicateValues = (dict) => {\n    const keys = Object.keys(dict);\n    let duplicate = false;\n    "}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst countUpToArray = (arr) => {\n  const res = []\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i])\n  }\n  return res\n}\n\nconst countUpToArray2 = (arr) => {\n  let res = []\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i])\n  }\n  return res\n}\n\nconst countUpToArray3 = (arr) => {\n  let res = []\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i])\n  }\n  return res\n}\n\nconst countUpToArray4 = (arr) => {\n  let res = []\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i])\n  }\n  return res\n}\n\nconst countUpToArray5 = (arr) => {\n  let res = []\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i])\n  }\n  return res\n}\n\nconst countUpToArray6 = (arr) => {\n  let res = []\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i])\n  }\n  return res\n}\n\nconst countUpToArray7 = (arr) => {\n  let res = []\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i])\n  }\n  return res\n}\n\nconst countUpToArray8 = (arr) => {\n  let res = []\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i])\n  }\n  return res\n}\n\nconst countUpToArray9 = (arr) => {\n  let res = []\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i])\n  }\n  return res\n}\n\nconst countUpToArray10 = (arr) => {\n  let res = []\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i])\n  }\n  return res\n}\n\nconst countUpToArray11 = (arr) => {\n  let res = []\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i])\n  }\n  return res\n}\n\nconst countUpToArray12 = (arr) => {\n  let res = []\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i])\n  }\n  return res\n}\n\nconst countUpToArray13 = (arr) => {\n  let res = []\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i])\n  }\n  return res\n}\n\nconst countUpToArray14 = (arr) => {\n  let res = []\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i])\n  }\n  return res\n}\n\nconst countUpToArray15 = (arr) => {\n  let res = []\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i])\n  }\n  return res\n}\n\nconst countUpToArray16 = (arr) => {\n  let res = []\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i])\n  }\n  return res\n}\n\nconst countUpToArray17 = (arr) => {\n  let res = []\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i])\n  }\n  return res\n}\n\nconst countUpToArray18 = (arr) => {\n  let res = []\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i])\n  }\n  return res\n}\n\nconst countUpToArray19 = (arr) => {\n  let res = []\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i])\n  }\n  return res\n}\n\nconst countUpToArray20 = (arr) => {\n  let res = []\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i])\n  }\n  return res\n}\n\nconst countUpToArray21 = (arr) => {\n  let res = []\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i])\n  }\n  return res\n}\n\nconst countUpToArray22 = (arr) => {\n  let res = []\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i])\n  }\n  return res\n}\n\nconst countUpToArray23 = (arr) => {\n  let res = []\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i])\n  }\n  return res\n}\n\nconst countUpToArray24 = (arr) => {\n  let res = []\n  for"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const num = a * b\n  let result = \"\"\n  while (num > 0) {\n    result = String.fromCharCode(num % 26 + 97) + result\n    num = Math.floor(num / 26)\n  }\n  return result\n}\n\nconsole.log(multiply(14, -15))<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for(let i=0; i<s.length; i+=2) {\n    if(s[i] >= 'A' && s[i] <= 'Z') count++;\n  }\n  return count;\n}\n\n/*\n  Given a string s, count the number of lowercase letters in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for(let i=0; i<s.length; i+=2) {\n    if(s[i] >= 'a' && s[i] <= 'z') count++;\n  }\n  return count;\n}\n\n/*\n  Given a string s, count the number of letters in even indices.\n  \n  For example:\n  countLetter('aBCdEf') returns 1\n  countLetter('abcdefg') returns 0\n  countLetter('dBBE') returns 0\n  */\nconst countLetter = (s) => {\n  let count = 0;\n  for(let i=0; i<s.length; i+=2) {\n    if(s[i] >= 'A' && s[i] <= 'Z') count++;\n  }\n  return count;\n}\n\n/*\n  Given a string s, count the number of alphabetic letters in even indices.\n  \n  For example:\n  countAlphabetic('aBCdEf') returns 1\n  countAlphabetic('abcdefg') returns 0\n  countAlphabetic('dBBE') returns 0\n  */\nconst countAlphabetic = (s) => {\n  let count = 0;\n  for(let i=0; i<s.length; i+=2) {\n    if(s[i] >= 'a' && s[i] <= 'z') count++;\n  }\n  return count;\n}\n\n/*\n  Given a string s, count the number of digits in even indices.\n  \n  For example:\n  countDigit('aBCdEf') returns 1\n  countDigit('abcdefg') returns 0\n  countDigit('dBBE') returns 0\n  */\nconst countDigit = (s) => {\n  let count = 0;\n  for(let i=0; i<s.length; i+=2) {\n    if(s[i] >= '0' && s[i] <= '9') count++;\n  }\n  return count;\n}\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  for(let i=0; i<s.length; i+=2) {\n    if(s[i] >= 'A' && s[i] <= 'Z' && s[i+1] >= 'A' && s[i+1] <= 'Z') count++;\n  }\n  return count;\n}\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant = (s) => {\n  let count = 0;\n  for(let i=0; i<s.length; i+=2) {\n    if(s[i] >= 'A' && s[i] <= 'Z' && s[i+1] >= 'a' && s[i+1] <= 'z') count++;\n  }\n  return count;\n}\n\n/*\n  Given a string s, count the number of vowels and consonants in even indices.\n  \n  For example:\n  countVowelConsonant('aBCdEf') returns 1\n  countVowelConsonant('abcdefg') returns 0\n  countVowelConsonant('dBBE') returns 0\n  */\nconst countVowelConsonant = (s) => {\n  let count = 0;\n  for(let i=0; i<s.length; i+=2) {\n    if(s[i] >= 'A' && s[i] <= 'Z' && s[i+1] >= 'A' && s[i+1] <= 'Z') count++;\n  }\n  return count;\n}\n\n/*\n  Given a string s, count the number of letters and digits in even indices.\n  \n  For example:\n  countLetterDigit('aBCdEf') returns 1\n  countLetterDigit('abcdefg') returns 0\n  countLetterDigit('dBBE') returns 0\n  */\nconst countLetterDigit = (s) => {\n  let count = 0;\n  for(let i=0; i<s.length; i+=2) {\n    if(s[i] >= 'A' && s[i] <= 'Z' && s[i+1] >= 'A' && s[i+1] <= 'Z') count++;\n  }\n  for(let i=0; i<s.length; i+=2) {\n    if(s[i] >= '0' && s[i] <= '9') count++;\n  }\n  return count;\n}\n\n/*\n  Given a string s, count the number of uppercase letters and lowercase letters\n  in even indices.\n  \n  For example:\n  countUpperLower('aBCdEf') returns 1\n  countUpperLower('abcdefg') returns 0\n  countUpperLower('dBBE') returns 0\n  */\nconst countUpperLower = (s) => {\n  let count = 0;\n  for(let i=0; i<s.length; i+=2) {\n    if(s[i] >= 'A"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let absValue = Math.abs(value);\n  let wholeNumber = Math.floor(absValue);\n  let decimal = absValue - wholeNumber;\n  let closestInteger = wholeNumber;\n  if (Math.abs(decimal) > 0.5) {\n    closestInteger = wholeNumber + 1;\n  }\n  return closestInteger;\n};\n\nconsole.log(closestInteger(\"10\"));\nconsole.log(closestInteger(\"15.3\"));\nconsole.log(closestInteger(\"-14.5\"));\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  if (n === 0) return [];\n  const result = [];\n  const nextLevel = n % 2;\n  for (let i = 0; i < n; i++) {\n    result.push(nextLevel);\n    nextLevel = nextLevel === 0? n - 1 : nextLevel + 1;\n  }\n  return result;\n};\n\nmodule.exports = makeAPile;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/[,]+/).filter(Boolean);\n}\n\n/*\n  Given an array of words, return a string where all the words are concatenated\n  into one line, separated by commas.\n  \n  For example:\n  wordsToString([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"One, two, three, four, five, six\"\n  wordsToString([\"hi\", \"my\", \"name\", \"is\", \"John\"]) == \"hi, my, name, is, John\"\n  */\nconst wordsToString = (words) => {\n  return words.reduce((prev, curr) => prev + \",\" + curr, \"\");\n}\n\n/*\n  Given a string of words, return a string of the words, separated by commas\n  except for the last word which is left in the same format as the original.\n  \n  For example:\n  wordsToLast([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"One, two, three, four, five, six\"\n  wordsToLast([\"hi\", \"my\", \"name\", \"is\", \"John\"]) == \"hi, my, name, is, John\"\n  */\nconst wordsToLast = (words) => {\n  return words.slice(0, -1).join(\",\") + words.slice(-1);\n}\n\n/*\n  Given a string of words, return a string of the words, separated by commas\n  except for the first word which is left in the same format as the original.\n  \n  For example:\n  wordsToFirst([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"One, two, three, four, five, six\"\n  wordsToFirst([\"hi\", \"my\", \"name\", \"is\", \"John\"]) == \"hi, my, name, is, John\"\n  */\nconst wordsToFirst = (words) => {\n  return words.slice(1).join(\",\") + words.slice(0, 1);\n}\n\n/*\n  Given a string of words, return a string of the words, except for the first\n  and last word, separated by commas.\n  \n  For example:\n  wordsToMiddle([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"two, three, four, five, six\"\n  wordsToMiddle([\"hi\", \"my\", \"name\", \"is\", \"John\"]) == \"hi, my, name, is, John\"\n  */\nconst wordsToMiddle = (words) => {\n  return words.slice(1, -1).join(\",\") + words.slice(-1);\n}\n\n/*\n  Given a string of words, return a string of the words, except for the last\n  and first word, separated by commas.\n  \n  For example:\n  wordsToBeginning([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"one, two, three, four, five, six\"\n  wordsToBeginning([\"hi\", \"my\", \"name\", \"is\", \"John\"]) == \"hi, my, name, is, John\"\n  */\nconst wordsToBeginning = (words) => {\n  return words.slice(0, -1).join(\",\") + words.slice(1);\n}\n\n/*\n  Given a string of words, return a string of the words, except for the first\n  and last word, separated by commas.\n  \n  For example:\n  wordsToEnding([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"one, two, three, four, five, six\"\n  wordsToEnding([\"hi\", \"my\", \"name\", \"is\", \"John\"]) == \"hi, my, name, is, John\"\n  */\nconst wordsToEnding = (words) => {\n  return words.slice(-1).join(\",\") + words.slice(0, -1);\n}\n\n/*\n  Given a string of words, return a string of the words, except for the first\n  word.\n  \n  For example:\n  wordsToFirst([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"two, three, four, five, six\"\n  wordsToFirst([\"hi\", \"my\", \"name\", \"is\", \"John\"]) == \"hi, my, name, is, John\"\n  */\nconst wordsToFirst = (words) => {\n  return words.slice(1);\n}\n\n/*\n  Given a string of words, return a string of the words, except for the last\n  word.\n  \n  For example:\n  wordsToLast([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"one, two, three, four, five, six\"\n  wordsToLast([\"hi\", \"my\", \"name\", \"is\", \"John\"]) == \"hi, my, name, is, John\"\n  */\nconst wordsToLast = (words) => {\n  return words.slice(0, -1);\n}\n\n/*\n  Given an array of words, return the number of words.\n  \n  For example:\n  wordsCount([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == 6\n  wordsCount([\"hi\", \"my\", \"name\", \"is\", \"John\"]) == 4\n  */\nconst wordsCount = (words) => {\n  return words.length;\n}\n\n/*\n  Given an array of words, return the number of unique words.\n  \n  For example:\n  wordsUniqueCount([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == 6\n  wordsUniqueCount([\"hi\", \"my\", \"name\", \"is\", \"John\"]) == 4\n  */\nconst wordsUniqueCount = (words) => {\n  return words.reduce((acc, curr"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    const temp = x;\n    x = y;\n    y = temp;\n  }\n  let result = x;\n  for (let i = x + 1; i <= y; i += 2) {\n    if (i === y) {\n      result = i;\n      break;\n    }\n    if (i % 2 === 0) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  This function takes an integer number n and the  possible values of n.\n  It returns the biggest number that is equal to n in the given range.\n\n  For example:\n  chooseNum(7, 10) = 9\n  chooseNum(8, 10) = 10\n  chooseNum(8, 15) = 15\n  */\nconst chooseNum = (n, arr) => {\n  const arrLength = arr.length;\n  const res = arr[arrLength - 1];\n  for (let i = arrLength - 2; i >= 0; i--) {\n    const curr = arr[i];\n    if (curr === n) {\n      return res;\n    }\n    if (curr > n) {\n      res = curr;\n      break;\n    }\n  }\n  return -1;\n};\n\nmodule.exports = {\n  chooseNum,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n    if (n > m) return -1;\n\n    let binary = \"\";\n    let average = 0;\n    let i = n;\n    while (i < m) {\n        binary += i;\n        average += i;\n        i += 1;\n    }\n    return binary;\n}\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const map = new Map()\n  let res = []\n  for (let i = 0; i < x.length; i++) {\n    if (map.has(x[i])) {\n      continue\n    }\n    map.set(x[i], true)\n    res.push(x[i])\n  }\n  return res\n}\n\nconst uniqueDigits2 = (x) => {\n  const map = new Map()\n  let res = []\n  for (let i = 0; i < x.length; i++) {\n    if (map.has(x[i])) {\n      continue\n    }\n    map.set(x[i], true)\n    res.push(x[i])\n  }\n  return res\n}\n\nconst uniqueDigits3 = (x) => {\n  const map = new Map()\n  let res = []\n  for (let i = 0; i < x.length; i++) {\n    if (map.has(x[i])) {\n      continue\n    }\n    map.set(x[i], true)\n    res.push(x[i])\n  }\n  return res\n}\n\nconst uniqueDigits4 = (x) => {\n  const map = new Map()\n  let res = []\n  for (let i = 0; i < x.length; i++) {\n    if (map.has(x[i])) {\n      continue\n    }\n    map.set(x[i], true)\n    res.push(x[i])\n  }\n  return res\n}\n\nconst uniqueDigits5 = (x) => {\n  const map = new Map()\n  let res = []\n  for (let i = 0; i < x.length; i++) {\n    if (map.has(x[i])) {\n      continue\n    }\n    map.set(x[i], true)\n    res.push(x[i])\n  }\n  return res\n}\n\nconst uniqueDigits6 = (x) => {\n  const map = new Map()\n  let res = []\n  for (let i = 0; i < x.length; i++) {\n    if (map.has(x[i])) {\n      continue\n    }\n    map.set(x[i], true)\n    res.push(x[i])\n  }\n  return res\n}\n\nconst uniqueDigits7 = (x) => {\n  const map = new Map()\n  let res = []\n  for (let i = 0; i < x.length; i++) {\n    if (map.has(x[i])) {\n      continue\n    }\n    map.set(x[i], true)\n    res.push(x[i])\n  }\n  return res\n}\n\nconst uniqueDigits8 = (x) => {\n  const map = new Map()\n  let res = []\n  for (let i = 0; i < x.length; i++) {\n    if (map.has(x[i])) {\n      continue\n    }\n    map.set(x[i], true)\n    res.push(x[i])\n  }\n  return res\n}\n\nconst uniqueDigits9 = (x) => {\n  const map = new Map()\n  let res = []\n  for (let i = 0; i < x.length; i++) {\n    if (map.has(x[i])) {\n      continue\n    }\n    map.set(x[i], true)\n    res.push(x[i])\n  }\n  return res\n}\n\nconst uniqueDigits10 = (x) => {\n  const map = new Map()\n  let res = []\n  for (let i = 0; i < x.length; i++) {\n    if (map.has(x[i])) {\n      continue\n    }\n    map.set(x[i], true)\n    res.push(x[i])\n  }\n  return res\n}\n\nconst uniqueDigits11 = (x) => {\n  const map = new Map()\n  let res = []\n  for (let i = 0; i < x.length; i++) {\n    if (map.has(x[i])) {\n      continue\n    }\n    map.set(x[i], true)\n    res.push(x[i])\n  }\n  return res\n}\n\nconst uniqueDigits12 = (x) => {\n  const map = new Map()\n  let res = []\n  for (let i = 0; i < x.length; i++) {\n    if (map.has(x[i])) {\n      continue\n    }\n    map.set(x[i], true)\n    res.push(x[i])\n  }\n  return res\n}\n\nconst uniqueDigits13 = (x) => {\n  const map = new Map()\n  let res = []\n  for (let i = 0; i < x.length; i++) {\n    if (map.has(x[i])) {\n      continue\n    }\n    map.set(x[i], true)\n    res.push(x[i])\n  }\n  return res\n}\n\nconst uniqueDigits14 = (x) => {\n  const map = new Map()\n  let res = []\n  for (let i = 0; i < x.length; i++) {\n    if (map.has(x[i])) {\n      continue\n    }\n    map.set(x[i], true)\n    res.push(x[i])\n  }\n  return res\n}\n\nconst uniqueDigits15 = (x) => {\n  const map = new Map()\n  let res = []\n  for (let i = 0; i < x.length; i++) {\n    if (map.has(x[i])) {\n      continue\n    }\n    map.set(x[i], true)\n    res.push(x[i])\n  "}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n    return arr.reduce((acc, i) => {\n        const length = i.toString().length;\n        if (length >= 2 && length <= 4) {\n            acc.push(i);\n        }\n        return acc;\n    }, []);\n};\n\nconst byName = (arr) => {\n    return arr.reduce((acc, i) => {\n        const name = i.toString().toUpperCase();\n        if (name.length === 1) {\n            acc.push(i);\n        }\n        return acc;\n    }, []);\n};\n\nconst reverse = (arr) => {\n    return arr.reverse();\n};\n\nconst sort = (arr) => {\n    if (!arr || arr.length === 0) {\n        return [];\n    }\n    const name = byName(arr);\n    const length = byLength(arr);\n    return name.concat(length).concat(reverse(arr));\n};\n\nmodule.exports = sort;\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2*  ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2* ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    let sum = 1;\n    for (let j = 1; j < i; j++) {\n      sum *= j;\n    }\n    list.push(sum);\n  }\n  return list;\n};\n\nconst fib = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst fib2 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib2(n - 1) + fib2(n - 2);\n};\n\nconst fib3 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib3(n - 1) + fib3(n - 2);\n};\n\nconst fib4 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib4(n - 1) + fib4(n - 2);\n};\n\nconst fib5 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib5(n - 1) + fib5(n - 2);\n};\n\nconst fib6 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib6(n - 1) + fib6(n - 2);\n};\n\nconst fib7 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib7(n - 1) + fib7(n - 2);\n};\n\nconst fib8 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib8(n - 1) + fib8(n - 2);\n};\n\nconst fib9 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib9(n - 1) + fib9(n - 2);\n};\n\nconst fib10 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib10(n - 1) + fib10(n - 2);\n};\n\nconst fib11 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib11(n - 1) + fib11(n - 2);\n};\n\nconst fib12 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib12(n - 1) + fib12(n - 2);\n};\n\nconst fib13 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib13(n - 1) + fib13(n - 2);\n};\n\nconst fib14 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib14(n - 1) + fib14(n - 2);\n};\n\nconst fib15 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib15(n - 1) + fib15(n - 2);\n};\n\nconst fib16 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib16(n - 1) + fib16(n - 2);\n};\n\nconst fib17 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib17(n - 1) + fib17(n - 2);\n};\n\nconst fib18 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib18(n - 1) + fib18(n - 2);\n};\n\nconst fib19 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib19(n - 1) + fib19(n - 2);\n};\n\nconst fib20 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib20(n - 1) + fib20(n - 2);\n};\n\nconst fib21 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib21(n - 1) + fib21(n - 2);\n};\n\nconst fib22 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib22(n - 1) + fib22(n - 2);\n};\n\nconst fib23 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib23(n - 1) + fib23(n - 2);\n};\n\nconst fib24 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib24(n - 1) + fib24(n - 2);\n};\n\nconst fib25 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib25(n - 1) + fib25(n - 2);\n};\n\nconst fib26 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib26(n - 1) + fib26(n - 2);\n};\n\nconst fib27 = (n) => {\n  if (n <= 1) {\n    return 1;\n"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n) , inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n), inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n    let sumEven = 0, sumOdd = 0;\n    for (let i = 1; i <= n; i++) {\n        let n = i;\n        while (n > 0) {\n            if (n % 2 === 0) {\n                sumEven++;\n            } else {\n                sumOdd++;\n            }\n            n = n / 2;\n        }\n    }\n    return [sumEven, sumOdd];\n};\n\nconsole.log(evenOddPalindrome(3));\nconsole.log(evenOddPalindrome(12));\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0 .\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const result = new Map();\n  for (const x of arr) {\n    if (x < 0) {\n      result.set(x, 0);\n      continue;\n    }\n    const currentSum = result.get(x) || 0;\n    result.set(x, currentSum + 1);\n  }\n  return result.size;\n};\n\n/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits <=0.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 2\n  >>> countNums([1, 1, 2]) == 2\n  */\nconst countNumsNegative = (arr) => {\n  const result = new Map();\n  for (const x of arr) {\n    if (x < 0) {\n      result.set(x, 0);\n      continue;\n    }\n    const currentSum = result.get(x) || 0;\n    result.set(x, currentSum - 1);\n  }\n  return result.size;\n};\n\nexport { countNums, countNumsNegative };\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integersarr[1 ], arr[2], ..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integersarr[1 ], arr[2],..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n    if (arr.length === 0) return true\n    let start = 0\n    let end = arr.length - 1\n    while (end - start > 1) {\n        if (arr[end] < arr[end - 1]) {\n            let t = arr[end]\n            arr[end] = arr[end - 1]\n            arr[end - 1] = t\n            start = end\n            end = start + 1\n        } else {\n            end -= 1\n        }\n    }\n    return (arr[start] >= arr[end])\n}\n\nconst moveTwoBall = (arr) => {\n    if (arr.length === 0) return true\n    let start = 0\n    let end = arr.length - 1\n    let i = 0\n    while (end - start > 1) {\n        if (arr[i] < arr[i + 1]) {\n            let t = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = t\n            start = end\n            end = start + 1\n        } else {\n            end -= 1\n        }\n        i += 1\n    }\n    return (arr[start] >= arr[end])\n}\n\nconst moveThreeBall = (arr) => {\n    if (arr.length === 0) return true\n    let start = 0\n    let end = arr.length - 1\n    let i = 0\n    while (end - start > 2) {\n        if (arr[i] < arr[i + 2]) {\n            let t = arr[i]\n            arr[i] = arr[i + 2]\n            arr[i + 2] = t\n            start = end\n            end = start + 1\n        } else {\n            end -= 1\n        }\n        i += 1\n    }\n    return (arr[start] >= arr[end])\n}\n\nconst moveFourBall = (arr) => {\n    if (arr.length === 0) return true\n    let start = 0\n    let end = arr.length - 1\n    let i = 0\n    while (end - start > 3) {\n        if (arr[i] < arr[i + 3]) {\n            let t = arr[i]\n            arr[i] = arr[i + 3]\n            arr[i + 3] = t\n            start = end\n            end = start + 1\n        } else {\n            end -= 1\n        }\n        i += 1\n    }\n    return (arr[start] >= arr[end])\n}\n\nconst moveFiveBall = (arr) => {\n    if (arr.length === 0) return true\n    let start = 0\n    let end = arr.length - 1\n    let i = 0\n    while (end - start > 4) {\n        if (arr[i] < arr[i + 4]) {\n            let t = arr[i]\n            arr[i] = arr[i + 4]\n            arr[i + 4] = t\n            start = end\n            end = start + 1\n        } else {\n            end -= 1\n        }\n        i += 1\n    }\n    return (arr[start] >= arr[end])\n}\n\nconst moveSixBall = (arr) => {\n    if (arr.length === 0) return true\n    let start = 0\n    let end = arr.length - 1\n    let i = 0\n    while (end - start > 5) {\n        if (arr[i] < arr[i + 5]) {\n            let t = arr[i]\n            arr[i] = arr[i + 5]\n            arr[i + 5] = t\n            start = end\n            end = start + 1\n        } else {\n            end -= 1\n        }\n        i += 1\n    }\n    return (arr[start] >= arr[end])\n}\n\nconst moveSevenBall = (arr) => {\n    if (arr.length === 0) return true\n    let start = 0\n    let end = arr.length - 1\n    let i = 0\n    while (end - start > 6) {\n        if (arr[i] < arr[i + 6]) {\n            let t = arr[i]\n            arr[i] = arr[i + 6]\n            arr[i + 6] = t\n            start = end\n            end = start + 1\n        } else {\n            end -= 1\n        }\n        i += 1\n    }\n    return (arr[start] >= arr[end])\n}\n\nconst moveEightBall = (arr) => {\n    if (arr.length === 0) return true\n    let start = 0\n    let end = arr.length - 1\n    let i = 0\n    while (end - start > 7) {\n        if (arr[i] < arr[i + 7]) {\n            let t = arr[i]\n            arr[i] = arr[i + 7]\n            arr[i + 7] = t\n            start = end\n            end = start + 1"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) return 'NO';\n  if (lst1.length!== lst2.length) return 'NO';\n  let result = 'NO';\n  for (let i = 0; i < lst1.length; i++) {\n    let lst1Value = lst1[i];\n    let lst2Value = lst2[i];\n    if (lst1Value % 2!== 0 && lst2Value % 2!== 0) return 'NO';\n  }\n  result = 'YES';\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const allLetters = new Set()\n  const result = {}\n  for (let i = 0; i < test.length; i++) {\n    const letter = test.charAt(i)\n    allLetters.add(letter)\n    result[letter] = (result[letter] || 0) + 1\n  }\n  return result\n}\n\n/*\nGiven a string representing a space s epara ted lowercase letters, return the\nfrequency of the letter.\n\nExample:\nfrequency('a b c') == 2\nfrequency('a b b a') == 1\nfrequency('b b b b a') == 3\nfrequency('') == 0\n\n*/\nconst frequency = (test) => {\n  const letters = new Set()\n  for (let i = 0; i < test.length; i++) {\n    const letter = test.charAt(i)\n    letters.add(letter)\n  }\n  return letters.size\n}\n\n/*\nGiven a string representing a space s epara ted lowercase letters, return\nthe number of unique letters.\n\nExample:\nunique('a b c') == 3\nunique('a b b a') == 3\nunique('b b b b a') == 1\nunique('') == 0\n\n*/\nconst unique = (test) => {\n  const letters = new Set()\n  for (let i = 0; i < test.length; i++) {\n    const letter = test.charAt(i)\n    if (letters.has(letter)) {\n      return 0\n    }\n    letters.add(letter)\n  }\n  return letters.size\n}\n\n/*\nGiven a string representing a space s epara ted lowercase letters, return\nthe letter with the largest number of repetitions in the string.\n\nExample:\nmaxRep('a b c') == 'c'\nmaxRep('a b b a') == 'a'\nmaxRep('b b b b a') == 'b'\nmaxRep('') == ''\n\n*/\nconst maxRep = (test) => {\n  let max = ''\n  let maxCount = 0\n  for (let i = 0; i < test.length; i++) {\n    const letter = test.charAt(i)\n    const count = frequency(test)\n    if (count > maxCount) {\n      max = letter\n      maxCount = count\n    }\n  }\n  return max\n}\n\n/*\nGiven a string representing a space s epara ted lowercase letters, return the\nletter with the smallest number of repetitions in the string.\n\nExample:\nminRep('a b c') == 'a'\nminRep('a b b a') == 'a'\nminRep('b b b b a') == 'b'\nminRep('') == ''\n\n*/\nconst minRep = (test) => {\n  let min = ''\n  let minCount = 0\n  for (let i = 0; i < test.length; i++) {\n    const letter = test.charAt(i)\n    const count = frequency(test)\n    if (count < minCount) {\n      min = letter\n      minCount = count\n    }\n  }\n  return min\n}\n\n/*\nGiven a string representing a space s epara ted lowercase letters, return\nthe letter with the most common letter in the string.\n\nExample:\nmaxLetter('a b c') == 'c'\nmaxLetter('a b b a') == 'a'\nmaxLetter('b b b b a') == 'b'\nmaxLetter('') == ''\n\n*/\nconst maxLetter = (test) => {\n  let max = ''\n  let maxCount = 0\n  for (let i = 0; i < test.length; i++) {\n    const letter = test.charAt(i)\n    const count = frequency(test)\n    if (count > maxCount) {\n      max = letter\n      maxCount = count\n    }\n  }\n  return max\n}\n\n/*\nGiven a string representing a space s epara ted lowercase letters, return\nthe letter with the least common letter in the string.\n\nExample:\nminLetter('a b c') == 'a'\nminLetter('a b b a') == 'b'\nminLetter('b b b b a') == 'a'\nminLetter('') == ''\n\n*/\nconst minLetter = (test) => {\n  let min = ''\n  let minCount = 0\n  for (let i = 0; i < test.length; i++) {\n    const letter = test.charAt(i)\n    const count = frequency(test)\n    if (count < minCount) {\n      min = letter\n      minCount = count\n    }\n  }\n  return min\n}\n\n/*\nGiven a string representing a space s epara ted lowercase letters, return\nthe letter with the highest occurence in the string.\n\nExample:\nmaxOccur('a b c') == 'b'\nmaxOccur('a b b a') == 'b'\nmaxOccur('b b b b a') == 'b'\nmaxOccur('') == ''\n\n*/\nconst maxOccur = (test) => {\n  let max = ''\n  let maxCount = 0\n  for (let i = 0; i < test.length; i++) {\n    const letter = test.charAt(i)\n    const count = frequency(test)\n    if (count > maxCount) {\n      max = letter\n      maxCount = count\n    }\n  }\n  return max\n}\n\n/*\nGiven a string representing a space s epara ted lowercase letters, return\nthe letter with the lowest occurence in the string.\n\nExample:\nminOccur('a b c') == 'a'\nminOccur('a b b a') == 'a'\nminOcc"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = []\n  for (let i = 0, len = s.length; i < len; i++) {\n    if (c.indexOf(s[i])!== -1) {\n      continue\n    }\n    result.push(s[i])\n  }\n  let resultString = result.join('')\n  return (resultString === s)? false : resultString\n}\n\nconsole.log(reverseDelete('abcdef', 'b'))\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  return lst.map(e => {\n    return e.split('').reduce((acc, c) => {\n      if (c.charCodeAt(0) % 2) {\n        acc += c;\n      }\n      return acc;\n    }, '');\n  });\n};\n\nmodule.exports = oddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n    const sum = [];\n    const max = nums[0];\n    let min = nums[0];\n    for (let i = 0; i < nums.length; i++) {\n        sum[i] = max;\n        min = Math.min(nums[i], min);\n        max = Math.max(nums[i], max);\n    }\n\n    const sumUp = sum.reduce((a, b) => a + b, 0);\n    return sumUp;\n};\n\nconst minSubArraySum = (nums) => {\n    const sum = [];\n    let minSum = nums[0];\n    let maxSum = nums[0];\n\n    for (let i = 0; i < nums.length; i++) {\n        const currentSum = sum.reduce((a, b) => a + b, 0);\n        minSum = Math.min(minSum, nums[i]);\n        maxSum = Math.max(maxSum, nums[i]);\n\n        const newSum = currentSum + nums[i];\n\n        if (newSum > maxSum) {\n            sum = [newSum];\n            maxSum = newSum;\n        } else if (newSum > minSum) {\n            sum = [newSum];\n            minSum = newSum;\n        } else {\n            sum.push(newSum);\n        }\n    }\n\n    return sum.reduce((a, b) => a + b, 0);\n};\n\nexport { minSubArraySum };\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid ofwells . Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water .\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets .\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid ofwells. Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water.\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const fill = {};\n  const row = grid.length;\n  const col = grid[0].length;\n  for (let i = 0; i < row; i++) {\n    fill[i] = {};\n    for (let j = 0; j < col; j++) {\n      fill[i][j] = grid[i][j];\n    }\n  }\n  let count = 0;\n  while (fill.some(([i, j], [k, l]) => fill[i][j] == 1 && fill[i - k][j - l] == 1)) {\n    count++;\n    fill[i][j] = 0;\n    for (let k = i - 1; k >= 0; k--) {\n      for (let l = j - 1; l >= 0; l--) {\n        if (fill[k][l] == 1) {\n          fill[k][l] = 0;\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconst grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\nconst capacity = 1;\nconsole.log(grid, maxFill(grid, capacity));\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sort = (a, b) => a > b? 1 : a < b? -1 : 0;\n  const sortArray = arr.slice(0).sort((a, b) => sort(a, b));\n  return sortArray;\n};\n\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const char = s.split('');\n  const words = [];\n  let word = '';\n  let num = 0;\n  for (let i = 0; i < char.length; i++) {\n    const c = char[i];\n    if (num === n) {\n      words.push(word);\n      num = 0;\n      word = '';\n      continue;\n    }\n    if (c ==='') {\n      continue;\n    }\n    word += c;\n    num++;\n    if (num === n) {\n      words.push(word);\n      num = 0;\n      word = '';\n      continue;\n    }\n  }\n  if (num > 0) {\n    words.push(word);\n  }\n  return words;\n}\n\n/*Given a string s and a natural number n, y ou have been tasked to implement a function that returns the first \n  occurrence of  the  occurence of the word \"tou\", in the string s. If the occurence of the word \"tou\" occurs \n  more than once, then the first occurence of the word \"tou\" is returned.\n  If the string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  firstOccurence(\"Mary had a little lamb\", \"tou\") ==> \"tou\"\n  firstOccurence(\"Mary had a little lamb\", \"hou\") ==> \"\"\n  firstOccurence(\"Uncle sam\", \"tou\") ==> \"tou\"\n  firstOccurence(\"Uncle sam\", \"hou\") ==> \"\"\n  firstOccurence(\"The dog ate the cat\", \"ate\") ==> \"ate\"\n  firstOccurence(\"The dog ate the cat\", \"e\") ==> \"e\"\n  firstOccurence(\"The dog ate the cat\", \"\") ==> \"\"\n  */\nconst firstOccurence = (s, word) => {\n  const char = s.split('');\n  const arr = [];\n  let wordOccured = false;\n  for (let i = 0; i < char.length; i++) {\n    const c = char[i];\n    if (c === word) {\n      if (wordOccured) {\n        return word;\n      }\n      wordOccured = true;\n      arr.push(i);\n    }\n  }\n  return '';\n}\n\nconst main = () => {\n  let s = 'The dog ate the cat';\n  let n = 'dog';\n  console.log(selectWords(s, n));\n  console.log(firstOccurence(s, n));\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let i = 0;\n    let j = 0;\n    let length = word.length;\n    let currentLetter = '';\n    let closestVowel = '';\n    while (i < length) {\n        currentLetter = word.charAt(i);\n        if (vowels.indexOf(currentLetter) > -1) {\n            j = i + 1;\n            while (j < length) {\n                if (vowels.indexOf(word.charAt(j)) > -1) {\n                    if (Math.abs(i - j) < Math.abs(i - closestVowel.length)) {\n                        closestVowel = word.substr(i, j - i);\n                    }\n                    break;\n                }\n                j++;\n            }\n            break;\n        }\n        i++;\n    }\n    return closestVowel;\n};\n\nmodule.exports = getClosestVowel;\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only .\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let i = 0\n  while (i < lst.length) {\n    if (lst[i] === ')') {\n      if (lst[i + 1] === '(') {\n        i += 1\n      } else {\n        return 'No'\n      }\n    } else if (lst[i] === '(') {\n      if (lst[i + 1] === ')') {\n        i += 1\n      } else {\n        return 'No'\n      }\n    } else {\n      return 'No'\n    }\n  }\n  return 'Yes'\n}\n\n// Test\n/*\nmatchParens(['()(', ')'])\nmatchParens(['())', ')'])\nmatchParens(['(())', ')()'])\nmatchParens(['(())', ')()'])\nmatchParens(['()()', '()'])\nmatchParens(['())()', '())'])\nmatchParens(['(())()', ')()'])\nmatchParens(['())()', '()'])\nmatchParens(['()', '()()'])\nmatchParens(['()()', '()'])\nmatchParens(['()', '()()'])\nmatchParens(['(())', '()()'])\nmatchParens(['(())', '()()'])\nmatchParens(['()', '()()'])\nmatchParens(['(())', '()()'])\nmatchParens(['())', '())()'])\nmatchParens(['()', '()()()'])\nmatchParens(['()', '()()()'])\nmatchParens(['()()', '()()()'])\nmatchParens(['()()', '()()()'])\nmatchParens(['()()', '()()()'])\nmatchParens(['()()', '()()()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())()', '())()'])\nmatchParens(['())"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r .\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let max = arr[0]\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n  }\n  return arr.slice(0, k).sort((a, b) => {\n    return a - b\n  })\n}\n\nconst solution = maximum\n\nconsole.log(solution([-3, -4, 5], 3))\nconsole.log(solution([4, -4, 4], 2))\nconsole.log(solution([-3, 2, 1, 2, -1, -2, 1], 1))\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const odd = lst.filter((x) => x % 2 == 1);\n  const even = lst.filter((x) => x % 2 == 0);\n  return odd.reduce((p, x) => p + x, 0) + even.reduce((p, x) => p + x, 0);\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  let max = arr.length;\n  for (let i = 0; i < k; i++) {\n    if (i < max) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\nconst main = () => {\n  let arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\n  let k = 4;\n  console.log(addElements(arr, k));\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let c = [n];\n  let l = [];\n  while (n) {\n    if (n % 2) {\n      l.push(n);\n      n = Math.floor(n / 2);\n    } else {\n      n = 3 * n + 1;\n    }\n    c.push(n);\n  }\n  c.sort((a, b) => a - b);\n  l = l.concat(c);\n  return l;\n};\n\nconst getEvenCollatz = (n) => {\n  let c = [n];\n  let l = [];\n  while (n) {\n    if (n % 2) {\n      l.push(n);\n      n = Math.floor(n / 2);\n    } else {\n      n = 3 * n;\n    }\n    c.push(n);\n  }\n  c.sort((a, b) => a - b);\n  l = l.concat(c);\n  return l;\n};\n\nconst getCollatz = (n) => {\n  if (n % 2) {\n    return getEvenCollatz(n);\n  } else {\n    return getOddCollatz(n);\n  }\n};\n\nconst evenCollatz = (n) => {\n  if (n % 2) {\n    return Math.floor(n / 2);\n  } else {\n    return 3 * n + 1;\n  }\n};\n\nconst oddCollatz = (n) => {\n  if (n % 2) {\n    return Math.floor(n / 2);\n  } else {\n    return n * 3 + 1;\n  }\n};\n\nconst oddCollatzRecursive = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n % 2) {\n    return oddCollatzRecursive(Math.floor(n / 2));\n  } else {\n    return oddCollatzRecursive(n * 3 + 1);\n  }\n};\n\nconst evenCollatzRecursive = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n % 2) {\n    return evenCollatzRecursive(Math.floor(n / 2));\n  } else {\n    return evenCollatzRecursive(n * 3);\n  }\n};\n\nconst oddCollatzRecursive = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n % 2) {\n    return oddCollatzRecursive(Math.floor(n / 2));\n  } else {\n    return oddCollatzRecursive(n * 3);\n  }\n};\n\nconst oddCollatzIter = (n) => {\n  const odd = 1;\n  while (n) {\n    if (n % 2) {\n      odd = odd * 3 + 1;\n      n = Math.floor(n / 2);\n    } else {\n      n = 3 * n + 1;\n    }\n  }\n  return odd;\n};\n\nconst evenCollatzIter = (n) => {\n  const even = 1;\n  while (n) {\n    if (n % 2) {\n      even = even * 3;\n      n = Math.floor(n / 2);\n    } else {\n      n = 3 * n;\n    }\n  }\n  return even;\n};\n\nconst oddCollatzIter = (n) => {\n  const odd = 1;\n  while (n) {\n    if (n % 2) {\n      odd = odd * 3 + 1;\n      n = Math.floor(n / 2);\n    } else {\n      n = 3 * n;\n    }\n  }\n  return odd;\n};\n\nconst evenCollatz = (n) => {\n  if (n % 2) {\n    return Math.floor(n / 2);\n  } else {\n    return n * 3 + 1;\n  }\n};\n\nconst oddCollatz = (n) => {\n  if (n % 2) {\n    return Math.floor(n / 2);\n  } else {\n    return n * 3;\n  }\n};\n\nconst oddCollatz = (n) => {\n  if (n % 2) {\n    return Math.floor(n / 2);\n  } else {\n    return n * 3;\n  }\n};\n\nconst oddCollatz = (n) => {\n  if (n % 2) {\n    return Math.floor(n / 2);\n  } else {\n    return n * 3;\n  }\n};\n\nconst oddCollatz = (n) => {\n  if (n % 2) {\n    return Math.floor(n / 2);\n  } else {\n    return n * 3;\n  }\n};\n\nconst oddCollatz = (n) => {\n  if (n % 2) {\n    return Math.floor(n / 2);\n  } else {\n    return n * 3;\n  }\n};\n\nconst oddCollatz = (n) => {\n  if (n % 2) {\n    return Math.floor(n / 2);\n  } else {\n    return n * 3;\n  }\n};\n\nconst oddCollatz = (n) => {\n  if (n % 2) {\n    return Math.floor(n / 2);\n  } else {\n"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4 .The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4.The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date === undefined) {\n    return false;\n  }\n\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[3], 10);\n\n  if (month > 12 || month < 1 || day < 1 || day > 31 || year < 1900 || year > 2100) {\n    return false;\n  }\n\n  if (month === 2) {\n    if (year % 4!== 0) {\n      return false;\n    }\n    if (year % 100 === 0 && year % 400!== 0) {\n      return false;\n    }\n  } else if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst parseDate = (date) => {\n  if (date === undefined) {\n    return false;\n  }\n  return new Date(date);\n};\n\nconst formatDate = (date) => {\n  if (date === undefined) {\n    return false;\n  }\n  return date.toISOString();\n};\n\nconst timeFormat = (time) => {\n  if (time === undefined) {\n    return false;\n  }\n  return time.toISOString();\n};\n\nconst isEmpty = (string) => {\n  if (string === undefined) {\n    return false;\n  }\n  return string.trim().length === 0;\n};\n\nconst isValidPhoneNumber = (phone) => {\n  if (phone === undefined) {\n    return false;\n  }\n  if (!isEmpty(phone)) {\n    if (phone.length > 10) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst getMonth = (date) => {\n  if (date === undefined) {\n    return false;\n  }\n  return date.getMonth() + 1;\n};\n\nconst getDay = (date) => {\n  if (date === undefined) {\n    return false;\n  }\n  return date.getDate();\n};\n\nconst getYear = (date) => {\n  if (date === undefined) {\n    return false;\n  }\n  return date.getFullYear();\n};\n\nconst isValidDate = (date) => {\n  if (date === undefined) {\n    return false;\n  }\n  return validDate(date);\n};\n\nconst getTime = (date) => {\n  if (date === undefined) {\n    return false;\n  }\n  return timeFormat(date);\n};\n\nconst formatDate = (date) => {\n  if (date === undefined) {\n    return false;\n  }\n  return formatDate(date);\n};\n\nmodule.exports = {\n  parseDate,\n  formatDate,\n  isValidDate,\n  getMonth,\n  getDay,\n  getYear,\n  isValidPhoneNumber,\n  getTime,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0 , ord('b')= 1, .. . ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const text = txt.trim();\n  const words = text.split(' ');\n  return words;\n};\n\n/* Given a list of words, return a list of the words, split on whitespace.\n  */\nconst splitWordsBySpace = (txt) => {\n  const text = txt.trim();\n  const words = text.split(' ');\n  return words;\n};\n\n/* Given a string, return the number of lower-case letters.\n  */\nconst numberOfLowerCaseLetters = (txt) => {\n  const text = txt.trim();\n  const textLen = text.length;\n  let count = 0;\n  for (let i = 0; i < textLen; i++) {\n    if (text[i].toLowerCase()!== text[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, return the number of lower-case letters, in odd order.\n  */\nconst numberOfLowerCaseLettersInOddOrder = (txt) => {\n  const text = txt.trim();\n  const textLen = text.length;\n  let count = 0;\n  for (let i = 0; i < textLen; i++) {\n    if (text[i].toLowerCase()!== text[i]) {\n      if (i % 2 === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string, return the number of lower-case letters, in even order.\n  */\nconst numberOfLowerCaseLettersInEvenOrder = (txt) => {\n  const text = txt.trim();\n  const textLen = text.length;\n  let count = 0;\n  for (let i = 0; i < textLen; i++) {\n    if (text[i].toLowerCase()!== text[i]) {\n      if (i % 2 === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string, return the number of lower-case letters, in odd order, that do not contain the letter 'l'.\n  */\nconst numberOfLowerCaseLettersOddOrderNoL = (txt) => {\n  const text = txt.trim();\n  const textLen = text.length;\n  let count = 0;\n  for (let i = 0; i < textLen; i++) {\n    if (text[i].toLowerCase()!== text[i]) {\n      if (i % 2 === 1 && text[i].toLowerCase()!== 'l') {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string, return the number of lower-case letters, in even order, that do not contain the letter 'l'.\n  */\nconst numberOfLowerCaseLettersEvenOrderNoL = (txt) => {\n  const text = txt.trim();\n  const textLen = text.length;\n  let count = 0;\n  for (let i = 0; i < textLen; i++) {\n    if (text[i].toLowerCase()!== text[i]) {\n      if (i % 2 === 0 && text[i].toLowerCase()!== 'l') {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string, return the number of lower-case letters, in odd order, that do not contain the letter 'l'.\n  */\nconst numberOfLowerCaseLettersOddOrderNoLInEvenOrder = (txt) => {\n  const text = txt.trim();\n  const textLen = text.length;\n  let count = 0;\n  for (let i = 0; i < textLen; i++) {\n    if (text[i].toLowerCase()!== text[i]) {\n      if (i % 2 === 1 && text[i].toLowerCase()!== 'l') {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string, return the number of lower-case letters, in even order, that do not contain the letter 'l'.\n  */\nconst numberOfLowerCaseLettersEvenOrderNoLInOddOrder = (txt) => {\n  const text = txt.trim();\n  const textLen = text.length;\n  let count = 0;\n  for (let i = 0; i < textLen; i++) {\n    if (text[i].toLowerCase()!== text[i]) {\n      if (i % 2 === 0 && text[i].toLowerCase()!== 'l') {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string, return the number of lower-case letters, in even order, that do not contain the letter 'l', and that do\nnot contain the letter 'o'.\n  */\nconst numberOfLowerCaseLettersOddOrderNoLoO = (txt) => {\n  const text = txt.trim();\n  const textLen = text.length;\n  let count = 0;\n  for (let i = 0; i < textLen; i++) {\n    if (text[i].toLowerCase()!== text[i]) {\n      if (i % 2 === 1 && text[i].toLowerCase()!== 'lo' && text[i].toLowerCase()!== 'lo') {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string, return the number of lower-case letters, in even order, that do not contain the letter 'l', and that do\nnot contain the letter 'o'.\n  */\nconst numberOfLowerCaseLettersEvenOrderNoLoO = (txt) => {\n  const text = txt.tr"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const lastElement = lst[lst.length - 1]\n  const nextElement = lst[lst.length - 2]\n  if (lastElement > nextElement) {\n    return false\n  }\n  return lst.every(x => x >= nextElement)\n}\n\nexport default isSorted\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const { start, end } = interval1\n  const { start, end } = interval2\n\n  if (start <= end) {\n    if (start >= end) return 'NO'\n    if (start === end) return 'YES'\n    if (Math.floor(start) === Math.floor(end)) return `${Math.floor(start)}`\n  }\n\n  return 'NO'\n}\n\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n < 5) return false\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return false\n  if (n === 1) return false\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n < 5) return false\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return false\n  if (n === 1) return false\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n < 5) return false\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return false\n  if (n === 1) return false\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n < 5) return false\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return false\n  if (n === 1) return false\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n < 5) return false\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return false\n  if (n === 1) return false\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n < 5) return false\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return false\n  if (n === 1) return false\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n < 5) return false\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return false\n  if (n === 1) return false\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n < 5) return false\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return false\n  if (n === 1) return false\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n < 5) return false\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return false\n  if (n === 1) return false\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n ==="}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (!arr) {\n    return null;\n  }\n\n  const len = arr.length\n  let sum = 0\n  let product = 1\n\n  for (let i = 0; i < len; i++) {\n    const num = arr[i]\n    if (num > 0) {\n      sum += num\n      product *= num\n    } else if (num < 0) {\n      sum -= num\n      product *= num\n    }\n  }\n  return sum * product\n}\n\nconsole.log(prodSigns([1, 2, 2, -4]))\nconsole.log(prodSigns([0, 1]))\nconsole.log(prodSigns([]))\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid . You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid. You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const [rows, cols] = grid.length\n\n  if(rows < 2 || cols < 2) {\n    throw new Error(\"grid length should be at least 2x2\")\n  }\n\n  if(k < 1) {\n    throw new Error(\"k must be at least 1\")\n  }\n\n  let visited = {}\n\n  const dfs = (row, col, k) => {\n    if(col < k) {\n      return {\n        value: grid[row][col],\n        left: dfs(row - 1, col + 1, k),\n        right: dfs(row + 1, col + 1, k)\n      }\n    }\n\n    const [row_min, col_min, row_max, col_max] = getRowColBound(row, col, k)\n\n    if(row_min in visited) {\n      return visited[row_min]\n    }\n\n    const [min_val, left_min, right_min] = getLeftRightBound(row_min, col_min, row_max, col_max, k)\n\n    const res = []\n\n    for(let i = col_min; i <= col_max; i++) {\n      const [val, left, right] = getLeftRightBound(row_min, i, row_max, col_max, k)\n\n      res.push(val)\n      res = res.concat(left)\n      res = res.concat(right)\n    }\n\n    res.push(min_val)\n\n    visited[row_min] = res\n\n    return res\n  }\n\n  return dfs(rows, 0, k)\n}\n\nconst getRowColBound = (row, col, k) => [row, col, row, col + 1]\n\nconst getLeftRightBound = (row_min, col_min, row_max, col_max, k) => [\n  Math.min(row_min, row_max, col_min),\n  Math.max(row_min, row_max, col_max),\n  Math.min(row_min, row_max, col_max),\n  Math.max(row_min, row_max, col_max + 1),\n  Math.min(row_min, row_max, col_max + 1),\n  Math.max(row_min, row_max, col_max + 1)\n]\n\nmodule.exports = minPath\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const [prev, next, curr] = [1, 2, 3]\n  const res = []\n  for (let i = 1; i <= n; i++) {\n    res.push(next)\n    next = prev + curr\n    prev = curr\n    curr = next\n  }\n  return res\n}\n\nconst fib = (n) => {\n  const [prev, next] = [1, 2]\n  const res = []\n  for (let i = 1; i <= n; i++) {\n    res.push(next)\n    next = prev + next\n    prev = next\n    next = prev\n  }\n  return res\n}\n\nconst fibo = (n) => {\n  let prev = 1\n  let next = 2\n  let curr = 3\n  let res = []\n  for (let i = 1; i <= n; i++) {\n    res.push(next)\n    next = prev + curr\n    prev = curr\n    curr = next\n  }\n  return res\n}\n\nconst test = (n) => {\n  const res = tri(n)\n  const f = fib(n)\n  const f2 = fibo(n)\n  if (res.length === f.length) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i]!== f[i] && res[i]!== f2[i]) {\n        return false\n      }\n    }\n  } else {\n    return false\n  }\n  return true\n}\n\nconst test2 = (n) => {\n  const res = tri(n)\n  const f = fib(n)\n  const f2 = fibo(n)\n  if (res.length === f.length) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i]!== f[i] && res[i]!== f2[i]) {\n        return false\n      }\n    }\n  } else {\n    return false\n  }\n  return true\n}\n\nconst test3 = (n) => {\n  const res = tri(n)\n  const f = fib(n)\n  const f2 = fibo(n)\n  if (res.length === f.length) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i]!== f[i] && res[i]!== f2[i]) {\n        return false\n      }\n    }\n  } else {\n    return false\n  }\n  return true\n}\n\nconst test4 = (n) => {\n  const res = tri(n)\n  const f = fib(n)\n  const f2 = fibo(n)\n  if (res.length === f.length) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i]!== f[i] && res[i]!== f2[i]) {\n        return false\n      }\n    }\n  } else {\n    return false\n  }\n  return true\n}\n\nconst test5 = (n) => {\n  const res = tri(n)\n  const f = fib(n)\n  const f2 = fibo(n)\n  if (res.length === f.length) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i]!== f[i] && res[i]!== f2[i]) {\n        return false\n      }\n    }\n  } else {\n    return false\n  }\n  return true\n}\n\nconst test6 = (n) => {\n  const res = tri(n)\n  const f = fib(n)\n  const f2 = fibo(n)\n  if (res.length === f.length) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i]!== f[i] && res[i]!== f2[i]) {\n        return false\n      }\n    }\n  } else {\n    return false\n  }\n  return true\n}\n\nconst test7 = (n) => {\n  const res = tri(n)\n  const f = fib(n)\n  const f2 = fibo(n)\n  if (res.length === f.length) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i]!== f[i] && res[i]!== f2[i]) {\n        return false\n      }\n    }\n  } else {\n    return false\n  }\n  return true\n}\n\nconst test8 = (n) => {\n  const res = tri(n)\n  const f = fib(n)\n  const f2 = fibo(n)\n  if (res.length === f.length) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i]!== f[i] && res[i]!== f2[i]) {\n        return false\n      }\n    }\n  } else {\n    return false\n  }\n  return true\n}\n\nconst test9 = (n) => {\n  const res = tri(n)\n  "}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let ans = 0;\n  while(n > 0){\n    ans += (n % 10) > 5? (n % 10) - 6 : n % 10;\n    n = n / 10;\n  }\n  return ans;\n};\n\nconst count = (n) => {\n  let count = 0;\n  while(n > 0){\n    if(n % 10 > 5){\n      count++;\n    }\n    n = n / 10;\n  }\n  return count;\n};\n\nconst isOdd = (n) => {\n  return count(n) > 0;\n};\n\nconsole.log(digits(1234));\nconsole.log(isOdd(1234));\nconsole.log(count(1234));\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]] ' ) ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]]') ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n  // const lis = str.split('').filter((char) => char.match(/\\[/))\n  const lis = str.split('').filter((char) => char.match(/\\[/))\n  if(lis.length === 0) return false\n  const arr = []\n  lis.forEach((element, index, arr) => {\n    let c = element\n    if(c === '['){\n      c = '['\n      arr[index] = c\n    }\n    if(c === ']'){\n      c = ']'\n      arr[index] = c\n    }\n    if(c === '[' || c === ']'){\n      arr.push(c)\n    }\n  })\n  let count = 0\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] === '[' && arr[i+1] === ']'){\n      count++\n    }\n  }\n  if(count === arr.length){\n    return true\n  }\n  return false\n}\n\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[]]') )\nconsole.log( isNe('[]]]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[][]') )\nconsole.log( isNe('[]["}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const {length} = lst\n  const sum = lst.reduce((a, b) => a + b, 0)\n  const squares = lst.map(i => i * i)\n  return sum * sum\n}\n\nexport default sumSquares\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  txt = txt.replace(/\\s/g, '');\n  if(txt.length > 1){\n    return txt.slice(-1).match(/[A-Za-z]/) &&!txt.slice(-2).match(/[A-Za-z]/)\n  }\n  return false;\n}\n\n/* Create a function that returns true if the last two letters in the string are consonants and false otherwise.\n  Examples:\n  checkIfLastTwoLettersAreConsonants(\"apple pie\") ➞ true\n  checkIfLastTwoLettersAreConsonants(\"apple pi e\") ➞ true\n  checkIfLastTwoLettersAreConsonants(\"apple pi\") ➞ false\n  checkIfLastTwoLettersAreConsonants(\"apple\") ➞ false\n  checkIfLastTwoLettersAreConsonants(\"\") ➞ false\n  */\nconst checkIfLastTwoLettersAreConsonants = (txt) => {\n  txt = txt.replace(/\\s/g, '');\n  if(txt.length > 2){\n    return txt.slice(-2).match(/[A-Za-z]/) && txt.slice(-1).match(/[A-Za-z]/)\n  }\n  return false;\n}\n\n/* Create a function that returns true if the last letter in the string is a consonant and false otherwise.\n  Examples:\n  checkIfLastLetterIsConsonant(\"apple pie\") ➞ true\n  checkIfLastLetterIsConsonant(\"apple pi e\") ➞ false\n  checkIfLastLetterIsConsonant(\"apple pi\") ➞ true\n  checkIfLastLetterIsConsonant(\"apple\") ➞ false\n  checkIfLastLetterIsConsonant(\"\") ➞ false\n  */\nconst checkIfLastLetterIsConsonant = (txt) => {\n  txt = txt.replace(/\\s/g, '');\n  if(txt.length > 1){\n    return txt.slice(-1).match(/[A-Za-z]/)\n  }\n  return false;\n}\n\n/* Create a function that returns true if the string is a palindrome and false otherwise.\n  Examples:\n  checkIfStringIsPalindrome(\"apple pie\") ➞ true\n  checkIfStringIsPalindrome(\"apple pi e\") ➞ false\n  checkIfStringIsPalindrome(\"apple pi\") ➞ false\n  checkIfStringIsPalindrome(\"apple\") ➞ true\n  checkIfStringIsPalindrome(\"\") ➞ false\n  */\nconst checkIfStringIsPalindrome = (txt) => {\n  txt = txt.replace(/\\s/g, '');\n  if(txt.length > 0){\n    var str = txt;\n    var str2 = str.slice(0, txt.length - 1);\n    return str === str2;\n  }\n  return false;\n}\n\n/* Create a function that returns true if the string has at least one letter in it and false otherwise.\n  Examples:\n  checkIfStringHasLetters(\"apple pie\") ➞ true\n  checkIfStringHasLetters(\"apple pi e\") ➞ true\n  checkIfStringHasLetters(\"apple pi\") ➞ false\n  checkIfStringHasLetters(\"apple\") ➞ false\n  checkIfStringHasLetters(\"\") ➞ false\n  */\nconst checkIfStringHasLetters = (txt) => {\n  txt = txt.replace(/\\s/g, '');\n  if(txt.length > 0){\n    return txt.match(/[A-Za-z]/)\n  }\n  return false;\n}\n\n/* Create a function that returns true if the string contains at least one letter and number in it and false otherwise.\n  Examples:\n  checkIfStringContainsNumbers(\"apple pie\") ➞ true\n  checkIfStringContainsNumbers(\"apple pi e\") ➞ true\n  checkIfStringContainsNumbers(\"apple pi\") ➞ true\n  checkIfStringContainsNumbers(\"apple\") ➞ false\n  checkIfStringContainsNumbers(\"\") ➞ false\n  */\nconst checkIfStringContainsNumbers = (txt) => {\n  txt = txt.replace(/\\s/g, '');\n  if(txt.length > 0){\n    return txt.match(/[A-Za-z0-9]/)\n  }\n  return false;\n}\n\n/* Create a function that returns true if the string contains at least one number and a letter in it and false otherwise.\n  Examples:\n  checkIfStringContainsNumbers(\"apple pie\") ➞ true\n  checkIfStringContainsNumbers(\"apple pi e\") ➞ true\n  checkIfStringContainsNumbers(\"apple pi\") ➞ true\n  checkIfStringContainsNumbers(\"apple\") ➞ false\n  checkIfStringContainsNumbers(\"\") ➞ false\n  */\nconst checkIfStringContainsLettersAndNumbers = (txt) => {\n  txt = txt.replace(/\\s/g, '');\n  if(txt.length > 0){\n    return txt.match(/[A-Za-z0-9]/)\n  }\n  return false;\n}\n\n/* Create a function that returns true if the string contains at least one of the characters 'a', 'e', 'i', 'o', 'u', 'y' in it and false otherwise.\n  Examples:\n  checkIfStringContainsVowels(\"apple pie\") ➞ true\n  checkIfStringContainsVowels(\"apple pi e\") ➞ true\n  checkIfStringContainsVowels(\"apple pi\") ➞ true\n  checkIfStringContainsVowels(\"apple\") ➞ false\n  checkIfStringContainsVowels(\"\") ➞ false\n  */"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  arr.sort();\n  let left = 0, right = arr.length - 1;\n  let mid;\n  while (left <= right) {\n    mid = Math.floor((right + left) / 2);\n    if (arr[mid] < arr[right]) {\n      right = mid - 1;\n    } else {\n      left = mid + 1;\n    }\n  }\n  return left;\n};\n\n/*\n  Given an array of integers, find the sum of the array and also count the number\n  of elements present in the array.\n\n  Examples:\n  sumOfArray([1,2,3,4,5]) = 15\n  sumOfArray([1,2,3,4,5,6,7,8,9,10]) = 55\n  sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) = 454\n  sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) = 986\n  */\nconst sumOfArray = (arr) => {\n  let sum = 0;\n  let count = 0;\n  arr.forEach((x) => {\n    sum += x;\n    count += 1;\n  });\n  return {sum, count};\n};\n\n/*\n  Given an array of integers, find the max value of the array and also count the number\n  of elements present in the array.\n\n  Examples:\n  maxValueArray([1,2,3,4,5]) = 5\n  maxValueArray([1,2,3,4,5,6,7,8,9,10]) = 10\n  maxValueArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) = 20\n  maxValueArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) = 100\n  */\nconst maxValueArray = (arr) => {\n  let max = arr[0];\n  let count = 1;\n  arr.forEach((x) => {\n    if (x > max) {\n      max = x;\n      count = 1;\n    } else if (x == max) {\n      count += 1;\n    }\n  });\n  return {max, count};\n};\n\n/*\n  Given a collection of strings, find the longest common prefix between them.\n\n  Examples:\n  longestCommonPrefix([\"hi\", \"hello\", \"hi\", \"goodbye\"]) = \"hi\"\n  longestCommonPrefix([\"hi\", \"hi\", \"hi\"]) = \"\"\n  longestCommonPrefix([\"hi\", \"hello\", \"hi\", \"goodbye\", \"goodbye\", \"hello\", \"hi\", \"hello\"]) = \"hi\"\n  */\nconst longestCommonPrefix = (arr) => {\n  let prefix = \"\";\n  let len = 0;\n  arr.forEach((x) => {\n    if (len == 0) {\n      prefix = x;\n      len = x.length;\n    } else if (x.length > len) {\n      len = x.length;\n      prefix = x;\n    } else if (x.length == len) {\n      prefix += x;\n    }\n  });\n  return prefix;\n};\n\n/*\n  Given a collection of strings, find the longest common suffix between them.\n\n  Examples:\n  longestCommonSuffix([\"hi\", \"hello\", \"hi\", \"goodbye\"]) = \"bye\"\n  longestCommonSuffix([\"hi\", \"hi\", \"hi\"]) = \"\"\n  longestCommonSuffix([\"hi\", \"hello\", \"hi\", \"goodbye\", \"goodbye\", \"hello\", \"hi\", \"hello\"]) = \"bye\"\n  */\nconst longestCommonSuffix = (arr) => {\n  let suffix = \"\";\n  let len = 0;\n  arr.forEach((x) => {\n    if (len == 0) {\n      suffix = x;\n      len = x.length;\n    } else if (x.length > len) {\n      len = x.length;\n      suffix = x;\n    } else if (x.length == len) {\n      suffix += x;\n    }\n  });\n  return suffix;\n};\n\nexport {\n  sumOfArray,\n  canAr"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tup le (a , b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers , return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns a tup le (a, b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n    const max = Math.max(...lst);\n    const min = Math.min(...lst);\n    return (max === min)? [min, min] :\n        (max < 0)? largestSmallestIntegers([max,...lst]) :\n        largestSmallestIntegers(lst.filter((x) => x > 0));\n}\n\nconst smallestIntegers = (lst) => {\n    return largestSmallestIntegers(lst).reverse();\n}\n\n// console.log(largestSmallestIntegers([0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\n\n// console.log(smallestIntegers([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\nconst largestSmallestIntegers = (lst) => {\n    const max = Math.max(...lst);\n    const min = Math.min(...lst);\n    return (max === min)? [min, min] :\n        (max < 0)? largestSmallestIntegers([max,...lst]) :\n        largestSmallestIntegers(lst.filter((x) => x > 0));\n}\n\nconst smallestIntegers = (lst) => {\n    return largestSmallestIntegers(lst).reverse();\n}\n\n// console.log(largestSmallestIntegers([0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\n// console.log(smallestIntegers([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or ,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        return a.localeCompare(b) > 0? b : a;\n    }\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconstcompareTwo = (a,  b) => {\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        return a.localeCompare(b) > 0? b : a;\n    }\n    if (a > b) {\n        return b;\n    } else {\n        return a;\n    }\n}\n\nconstcompareThree = (a,  b) => {\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        return a.localeCompare(b) > 0? b : a;\n    }\n    if (a > b) {\n        return b;\n    } else {\n        return a;\n    }\n}\n\nconstcompareFour = (a,  b) => {\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        return a.localeCompare(b) > 0? b : a;\n    }\n    if (a > b) {\n        return b;\n    } else {\n        return a;\n    }\n}\n\nconstcompareFive = (a,  b) => {\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        return a.localeCompare(b) > 0? b : a;\n    }\n    if (a > b) {\n        return b;\n    } else {\n        return a;\n    }\n}\n\nconstcompareSix = (a,  b) => {\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        return a.localeCompare(b) > 0? b : a;\n    }\n    if (a > b) {\n        return b;\n    } else {\n        return a;\n    }\n}\n\nconstcompareSeven = (a,  b) => {\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        return a.localeCompare(b) > 0? b : a;\n    }\n    if (a > b) {\n        return b;\n    } else {\n        return a;\n    }\n}\n\nconstcompareEight = (a,  b) => {\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        return a.localeCompare(b) > 0? b : a;\n    }\n    if (a > b) {\n        return b;\n    } else {\n        return a;\n    }\n}\n\nconstcompareNine = (a,  b) => {\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        return a.localeCompare(b) > 0? b : a;\n    }\n    if (a > b) {\n        return b;\n    } else {\n        return a;\n    }\n}\n\nconstcompareTen = (a,  b) => {\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        return a.localeCompare(b) > 0? b : a;\n    }\n    if (a > b) {\n        return b;\n    } else {\n        return a;\n    }\n}\n\nconstcompareEleven = (a,  b) => {\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        return a.localeCompare(b) > 0? b : a;\n    }\n    if (a > b) {\n        return b;\n    } else {\n        return a;\n    }\n}\n\nconstcompareTwelve = (a,  b) => {\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        return a.localeCompare(b) > 0? b : a;\n    }\n    if (a > b) {\n        return b;\n    } else {\n        return a;\n    }\n}\n\nconstcompareThirteen = (a,  b) => {\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        return a.localeCompare(b) > 0? b : a;\n    }\n    if (a > b) {\n        return b;\n    } else {\n        return a;\n    }\n}\n\nconstcompareFourteen = (a,  b) => {\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        return a.localeCompare(b) > 0? b : a;\n    }\n    if (a > b) {\n        return b;\n    } else {\n        return a;\n    }\n}\n\nconstcompareFifteen = (a,  b) => {\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        return a.localeCompare(b) > 0? b : a;\n    }\n    if (a > b) {\n        return b;\n    } else {\n        return a;\n    }\n}\n\nconstcompareSixteen = (a,  b) => {\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        return a.localeCompare(b) > 0? b : a;\n    }\n    if (a > b) {\n        return b;\n    } else {\n        return a;\n    }\n}\n\nconstcompareSeventeen = (a,  "}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const arr = [...Array(4), n, n + 1, n + 2, n + 3]\n  const sum = arr.reduce((a, b) => a + b)\n  return sum === n * 4 && arr.every(e => e % 2 === 0)\n}\n\nexport default isEqualToSumEven\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 0) {\n    throw new Error('specialFactorial expects an integer greater than 0');\n  }\n\n  const factorial = (n) => {\n    if (n == 0) {\n      return 1;\n    } else {\n      return n * factorial(n - 1);\n    }\n  };\n\n  return factorial(n);\n};\n\nconst test = () => {\n  specialFactorial(4).should.equal(288);\n  specialFactorial(1).should.equal(1);\n  specialFactorial(0).should.equal(1);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const fixed = text.replace(/[^0-9a-zA-Z_ ]/gi, '_');\n  const spaces = fixed.replace(/ /g, '-');\n  return spaces;\n}\n\nconst main = () => {\n  console.log(fixSpaces(\"Example 1\"));\n  console.log(fixSpaces(\"Example 2\"));\n  console.log(fixSpaces(\" Example 3\"));\n  console.log(fixSpaces(\"Example_1\"));\n  console.log(fixSpaces(\"Example-2\"));\n  console.log(fixSpaces(\"Example-3\"));\n}\n\nmain();<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file 's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d ' A'-'Z') .  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d'A'-'Z').  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  return /[\\S\\w\\d\\.]+$/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    && /[^\\.]\\.[^\\.]/.test(file_name)\n    "}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n    let sum = 0\n    for (let x of lst) {\n        if (x % 3 === 0) {\n            sum += x * x\n        }\n        if (x % 4 === 0) {\n            sum += x * x * x\n        }\n    }\n    return sum\n}\n\nconsole.log(sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\n/*\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n    let sum = 0\n    for (let x of lst) {\n        if (x % 3 === 0) {\n            sum += x * x\n        }\n        if (x % 4 === 0) {\n            sum += x * x * x\n        }\n    }\n    return sum\n}\n\nconsole.log(sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\n/*\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n    let sum = 0\n    for (let x of lst) {\n        if (x % 3 === 0) {\n            sum += x * x\n        }\n        if (x % 4 === 0) {\n            sum += x * x * x\n        }\n    }\n    return sum\n}\n\nconsole.log(sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\n/*\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n    let sum = 0\n    for (let x of lst) {\n        if (x % 3 === 0) {\n            sum += x * x\n        }\n        if (x % 4 === 0) {\n            sum += x * x * x\n        }\n    }\n    return sum\n}\n\nconsole.log(sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const sentenceArray = sentence.split(' ')\n  const sentenceArrayLen = sentenceArray.length\n  let prevWord = '',\n    nextWord = ''\n  const newSentence = sentenceArray.map((word) => {\n    const newWord = parseInt(word.length, 10)\n    if (newWord) {\n      if (newWord > prevWord) {\n        nextWord = prevWord\n      }\n      prevWord = newWord\n      return nextWord\n    }\n  })\n  const output = newSentence.join(' ')\n  return output\n}\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format , \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format, \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n\tif (x.charAt(x.length - 1) == '/' && n.charAt(0)!= '/') {\n\t\treturn false\n\t}\n\tif (x.charAt(0) == '/' && n.charAt(0) == '/') {\n\t\treturn false\n\t}\n\tconst x_d = x.split('/')\n\tconst n_d = n.split('/')\n\tif (x_d.length!= 2 || n_d.length!= 2) {\n\t\treturn false\n\t}\n\tif (x_d[0] == '0' && n_d[1] == '0') {\n\t\treturn false\n\t}\n\tif (x_d[0] == '0' && n_d[0] == '0') {\n\t\treturn false\n\t}\n\tif (x_d[1] == '0' && n_d[1] == '0') {\n\t\treturn false\n\t}\n\tif (x_d[1] == '0' && n_d[0] == '0') {\n\t\treturn false\n\t}\n\tif (x_d[0] == '0' && n_d[0] == '0') {\n\t\treturn false\n\t}\n\treturn true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits .\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sum = nums.reduce((acc, item) => acc + item, 0)\n  const arr = nums.slice(0)\n   .filter(item => item > 0)\n   .sort((a, b) => {\n      const sumA = a + b\n      const sumB = b + a\n      if (sumA === sum) {\n        return a - b\n      }\n      if (sumB === sum) {\n        return b - a\n      }\n      return sumA - sumB\n    })\n   .map(item => -item)\n   .sort((a, b) => a - b)\n  return arr\n}\n\nconst orderByPoints2 = (nums) => {\n  const arr = nums.slice(0)\n   .sort((a, b) => {\n      const sumA = a + b\n      const sumB = b + a\n      if (sumA === sum) {\n        return a - b\n      }\n      if (sumB === sum) {\n        return b - a\n      }\n      return sumA - sumB\n    })\n   .reverse()\n   .map(item => -item)\n   .sort((a, b) => a - b)\n  return arr\n}\n\nconst orderByPoints3 = (nums) => {\n  const arr = nums.slice(0)\n   .sort((a, b) => {\n      const sumA = a + b\n      const sumB = b + a\n      if (sumA === sum) {\n        return a - b\n      }\n      if (sumB === sum) {\n        return b - a\n      }\n      return sumA - sumB\n    })\n   .reverse()\n   .map(item => -item)\n   .sort((a, b) => a - b)\n  return arr\n}\n\nconst orderByPoints4 = (nums) => {\n  const arr = nums.slice(0)\n   .sort((a, b) => {\n      const sumA = a + b\n      const sumB = b + a\n      if (sumA === sum) {\n        return a - b\n      }\n      if (sumB === sum) {\n        return b - a\n      }\n      return sumA - sumB\n    })\n   .reverse()\n   .map(item => -item)\n   .sort((a, b) => a - b)\n  return arr\n}\n\nconst orderByPoints5 = (nums) => {\n  const arr = nums.slice(0)\n   .sort((a, b) => {\n      const sumA = a + b\n      const sumB = b + a\n      if (sumA === sum) {\n        return a - b\n      }\n      if (sumB === sum) {\n        return b - a\n      }\n      return sumA - sumB\n    })\n   .reverse()\n   .map(item => -item)\n   .sort((a, b) => a - b)\n  return arr\n}\n\nconst orderByPoints6 = (nums) => {\n  const arr = nums.slice(0)\n   .sort((a, b) => {\n      const sumA = a + b\n      const sumB = b + a\n      if (sumA === sum) {\n        return a - b\n      }\n      if (sumB === sum) {\n        return b - a\n      }\n      return sumA - sumB\n    })\n   .reverse()\n   .map(item => -item)\n   .sort((a, b) => a - b)\n  return arr\n}\n\nconst orderByPoints7 = (nums) => {\n  const arr = nums.slice(0)\n   .sort((a, b) => {\n      const sumA = a + b\n      const sumB = b + a\n      if (sumA === sum) {\n        return a - b\n      }\n      if (sumB === sum) {\n        return b - a\n      }\n      return sumA - sumB\n    })\n   .reverse()\n   .map(item => -item)\n   .sort((a, b) => a - b)\n  return arr\n}\n\nconst orderByPoints8 = (nums) => {\n  const arr = nums.slice(0)\n   .sort((a, b) => {\n      const sumA = a + b\n      const sumB = b + a\n      if (sumA === sum) {\n        return a - b\n      }\n      if (sumB === sum) {\n        return b - a\n      }\n      return sumA - sumB\n    })\n   .reverse()\n   .map(item => -item)\n   .sort((a, b) => a - b)\n  return arr\n}\n\nconst orderByPoints9 = (nums) => {\n  const arr = nums.slice(0)\n   .sort((a, b) => {\n      const sumA = a + b\n      const sumB = b + a\n      if (sumA === sum) {\n        return a - b\n      }\n      if (sumB === sum) {\n        return b - a\n      }\n      return sumA - sumB\n    })\n   .reverse()\n   .map(item => -item)\n   .sort((a, b) => a - b)\n  return arr\n}\n\nconst orderByPoints10 = (nums) => {\n  const arr = nums.slice(0)\n   .sort((a, b) => {\n      const sumA = a + b\n      const sumB = b + a\n      if (sumA === sum) {\n        return a - b\n      }\n      if (sumB === sum) {\n        return b - a\n      }\n      return sumA - sumB\n    })\n   .reverse()\n   .map(item => -item)\n   .sort((a, b) => a - b)\n  return arr"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n    const nums = Array.from(nums)\n    const even = []\n    const odd = []\n    for(let i=0; i<nums.length; i++){\n        if(nums[i]%10 === 1 || nums[i]%10 === 3 || nums[i]%10 === 5 || nums[i]%10 === 7 || nums[i]%10 === 9){\n            odd.push(nums[i])\n        }else{\n            even.push(nums[i])\n        }\n    }\n    const oddCount = even.length\n    const evenCount = odd.length\n    return oddCount+evenCount\n}\nconsole.log(specialFilter([15, -73, 14, -15]))\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]))\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k ,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let triple = [1, 3, 7, 13, 21]\n  let max = 0\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (triple[i] + triple[j] + triple[k] === (i + j + k) * (i + j + k) - (i + j) * (i + j) + (i + k) * (i + k) - i + 1 && triple[i] + triple[j] + triple[k] > max) {\n          max = triple[i] + triple[j] + triple[k]\n        }\n      }\n    }\n  }\n  return max\n}\n\n/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples2 = (n) => {\n  let a = [1, 3, 7, 13, 21]\n  let max = 0\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] === (i + j + k) * (i + j + k) - (i + j) * (i + j) + (i + k) * (i + k) - i + 1 && a[i] + a[j] + a[k] > max) {\n          max = a[i] + a[j] + a[k]\n        }\n      }\n    }\n  }\n  return max\n}\n\nconsole.log(getMaxTriples(5))\nconsole.log(getMaxTriples(6))\nconsole.log(getMaxTriples(7))\nconsole.log(getMaxTriples(8))\nconsole.log(getMaxTriples(9))\nconsole.log(getMaxTriples(10))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es .\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let ret = [],\n    temp1 = [],\n    temp2 = [],\n    temp = [];\n  let planet1_orb = new Orb(planet1);\n  let planet2_orb = new Orb(planet2);\n  let planet1_pos = planet1_orb.getPosition();\n  let planet2_pos = planet2_orb.getPosition();\n\n  // Get the names of the planets in our solar syst em\n  for (let i = 0; i < 8; i += 1) {\n    temp1.push(getPlanetName(i));\n  }\n\n  // Sort the names by distance from the sun\n  temp1.sort(function (a, b) {\n    return planet1_pos.distanceTo(getPlanetPosition(a)) - planet1_pos.distanceTo(getPlanetPosition(b));\n  });\n\n  // Now, loop through the sorted list and make a list of all of the  planets\n  // whose orbits are within the distance of the orbit of planet1\n  for (let i = 0; i < temp1.length; i += 1) {\n    temp2.push(getPlanetName(getPlanetPosition(temp1[i])));\n  }\n  temp2.sort(function (a, b) {\n    return planet2_pos.distanceTo(getPlanetPosition(a)) - planet2_pos.distanceTo(getPlanetPosition(b));\n  });\n\n  // Now, loop through the sorted list and add the names of the planets whose orbits are within the\n  // distance of the orbit of planet2\n  for (let i = 0; i < temp2.length; i += 1) {\n    if (temp1.indexOf(getPlanetPosition(temp2[i])) > -1) {\n      temp.push(temp2[i]);\n    }\n  }\n  ret = temp;\n  return ret;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n    const sorted = lst.slice().sort((a, b) => {\n        if (a.length === b.length) {\n            return a < b? -1 : 1;\n        }\n        return a.length < b.length? -1 : 1;\n    });\n    const sum = lst.reduce((a, b) => a + b, 0);\n    return sorted.map(x => x.length === 1? x : sum);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise .\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if(isPrime(n)){\n    return x;\n  }\n  else{\n    return y;\n  }\n}\n\nconst isPrime = n => {\n  var i = 2;\n  while(i<=Math.sqrt(n)){\n    if(n%i === 0){\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\n// console.log(xOrY(7, 34, 12));\n// console.log(xOrY(15, 8, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers .\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n    const len = lst.length;\n    let sum = 0;\n    for(let i = 0; i < len; i++) {\n        sum += (lst[i] * lst[i]);\n        if(lst[i] % 2 === 1) {\n            sum += (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n};\n\nconst sumOdd = (lst) => {\n    const len = lst.length;\n    let sum = 0;\n    for(let i = 0; i < len; i++) {\n        if(lst[i] % 2 === 1) {\n            sum += (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n};\n\nconst sumEven = (lst) => {\n    const len = lst.length;\n    let sum = 0;\n    for(let i = 0; i < len; i++) {\n        if(lst[i] % 2 === 0) {\n            sum += (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n};\n\nconst evenDiff = (lst) => {\n    const len = lst.length;\n    let sum = 0;\n    for(let i = 0; i < len; i++) {\n        if(lst[i] % 2 === 0) {\n            sum += (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n};\n\nconst oddDiff = (lst) => {\n    const len = lst.length;\n    let sum = 0;\n    for(let i = 0; i < len; i++) {\n        if(lst[i] % 2 === 1) {\n            sum += (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n};\n\nconst main = () => {\n    const len = lst.length;\n    let sum = 0;\n    for(let i = 0; i < len; i++) {\n        sum += (lst[i] * lst[i]);\n    }\n    console.log(sumOdd(lst));\n    console.log(sumEven(lst));\n    console.log(sumDiff(lst));\n    console.log(diffEvenOdd(lst));\n    console.log(diffOddEven(lst));\n    console.log(diffEvenOdd(lst));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0 ,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n    let ret = [], i = 0, j = 0, tmp;\n    while(i < game.length && j < guess.length) {\n        if(game[i] === guess[j]) {\n            ret[j] = 0;\n            i++;\n            j++;\n        } else if(game[i] < guess[j]) {\n            tmp = game[i];\n            game[i] = game[i+1];\n            game[i+1] = tmp;\n            i++;\n        } else {\n            tmp = game[i];\n            game[i] = guess[j];\n            guess[j] = tmp;\n            j++;\n        }\n    }\n    return ret;\n}\n\nmodule.exports = compare;<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName .  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName.  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = getStrength(class_name, extensions);\n  const extensionName = getExtensionName(class_name, extensions);\n  return `${class_name}.${extensionName}`;\n};\n\nconst getStrength = (class_name, extensions) => {\n  const cap = class_name.replace(/[a-z]/g, letter => {\n    return letter.toUpperCase();\n  });\n  const lower = class_name.replace(/[A-Z]/g, letter => {\n    return letter.toLowerCase();\n  });\n  const strength = cap.length - lower.length;\n  return strength;\n};\n\nconst getExtensionName = (class_name, extensions) => {\n  let index = 0;\n  for (let extension of extensions) {\n    const strength = getStrength(class_name, extensions);\n    if (strength === extensions[index].length) {\n      return extensions[index];\n    }\n    index++;\n  }\n};\n\nconsole.log(strongestExtension('MyClass', ['extensionA', 'extensionB', 'extensionC']));\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n  const n= a.length;\n  const m= b.length;\n  if (n<m) {\n    return false;\n  }\n  for (let i=0;i<=n-m;i++) {\n    let arr= [];\n    for (let j=0;j<m;j++) {\n      arr.push(a.charAt(i+j));\n    }\n    let rtn= true;\n    for (let j=0;j<m;j++) {\n      if (b.indexOf(arr[j])<0) {\n        rtn= false;\n        break;\n      }\n    }\n    if (rtn) {\n      return true;\n    }\n  }\n  return false;\n}\nconst rotater= (x) => {\n  if (x.length<=1) {\n    return [x];\n  }\n  let a= [x.charAt(0)];\n  for (let i=1;i<x.length;i++) {\n    a.push(x.charAt(x.length-1-i));\n  }\n  return a;\n}\nconst nCheck= (a, b) => {\n  const n= a.length;\n  const m= b.length;\n  if (n<m) {\n    return false;\n  }\n  for (let i=0;i<=n-m;i++) {\n    let arr= [];\n    for (let j=0;j<m;j++) {\n      arr.push(a.charAt(i+j));\n    }\n    let rtn= true;\n    for (let j=0;j<m;j++) {\n      if (b.indexOf(arr[j])<0) {\n        rtn= false;\n        break;\n      }\n    }\n    if (rtn) {\n      return true;\n    }\n  }\n  return false;\n}\nconst nCheck= (a, b) => {\n  const n= a.length;\n  const m= b.length;\n  if (n<m) {\n    return false;\n  }\n  for (let i=0;i<=n-m;i++) {\n    let arr= [];\n    for (let j=0;j<m;j++) {\n      arr.push(a.charAt(i+j));\n    }\n    let rtn= true;\n    for (let j=0;j<m;j++) {\n      if (b.indexOf(arr[j])<0) {\n        rtn= false;\n        break;\n      }\n    }\n    if (rtn) {\n      return true;\n    }\n  }\n  return false;\n}\nconst nCheck= (a, b) => {\n  const n= a.length;\n  const m= b.length;\n  if (n<m) {\n    return false;\n  }\n  for (let i=0;i<=n-m;i++) {\n    let arr= [];\n    for (let j=0;j<m;j++) {\n      arr.push(a.charAt(i+j));\n    }\n    let rtn= true;\n    for (let j=0;j<m;j++) {\n      if (b.indexOf(arr[j])<0) {\n        rtn= false;\n        break;\n      }\n    }\n    if (rtn) {\n      return true;\n    }\n  }\n  return false;\n}\nconst nCheck= (a, b) => {\n  const n= a.length;\n  const m= b.length;\n  if (n<m) {\n    return false;\n  }\n  for (let i=0;i<=n-m;i++) {\n    let arr= [];\n    for (let j=0;j<m;j++) {\n      arr.push(a.charAt(i+j));\n    }\n    let rtn= true;\n    for (let j=0;j<m;j++) {\n      if (b.indexOf(arr[j])<0) {\n        rtn= false;\n        break;\n      }\n    }\n    if (rtn) {\n      return true;\n    }\n  }\n  return false;\n}\nconst nCheck= (a, b) => {\n  const n= a.length;\n  const m= b.length;\n  if (n<m) {\n    return false;\n  }\n  for (let i=0;i<=n-m;i++) {\n    let arr= [];\n    for (let j=0;j<m;j++) {\n      arr.push(a.charAt(i+j));\n    }\n    let rtn= true;\n    for (let j=0;j<m;j++) {\n      if (b.indexOf(arr[j])<0) {\n        rtn= false;\n        break;\n      }\n    }\n    if (rtn) {\n      return true;\n    }\n  }\n  return false;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const arr = []\n  let counter = 0\n  let temp = 0\n  while (num > 0) {\n    temp = num % 10\n    num = num / 10\n    if (temp % 2 === 0) {\n      counter++\n    }\n    arr.push(temp)\n  }\n  return (counter, arr)\n}\n\nconsole.log(evenOddCount(12))\nconsole.log(evenOddCount(-12))\nconsole.log(evenOddCount(123))\nconsole.log(evenOddCount(-123))\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let num = number;\n  let str = '';\n  let i = 1;\n  while (num > 0) {\n    while (num % i === 0) {\n      str = str + (Math.pow(10, i - 1) - Math.pow(10, i)) + '';\n      num -= Math.pow(10, i);\n    }\n    i++;\n  }\n  return str.toLowerCase();\n};\n\nmodule.exports = intToMiniRoman;\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle , fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a + b > c && a + c > b && b + c > a)? true : false;\n};\n\nconst triangle = (a, b, c) => {\n  const [x, y] = [a, b];\n  const [x1, y1] = [c, b];\n  const [x2, y2] = [a, c];\n  const [x3, y3] = [c, a];\n\n  return [x, y, x1, y1, x2, y2, x3, y3];\n};\n\n/*\n Given the lengths of the three sides  of a  triangle,  return the area\n */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\n/*\n Given the lengths of the three sides  of a  triangle, return the perimeter\n */\nconst trianglePerimeter = (a, b, c) => {\n  return (2 * a + 2 * b + 2 * c);\n};\n\n/*\n Given the length of one side of a  triangle, return the other two sides\n */\nconst triangleSides = (a) => {\n  return [a, a, a];\n};\n\n/*\n Given the length of the three sides  of a  triangle, return the area\n */\nconst triangleArea = (a, b, c) => {\n  return triangleArea(triangleSides(a), triangleSides(b), triangleSides(c));\n};\n\n/*\n Given the length of the three sides  of a  triangle, return the perimeter\n */\nconst trianglePerimeter = (a, b, c) => {\n  return trianglePerimeter(triangleSides(a), triangleSides(b), triangleSides(c));\n};\n\nconst triangle = (a, b, c) => {\n  const [x, y] = [a, b];\n  const [x1, y1] = [c, b];\n  const [x2, y2] = [a, c];\n  const [x3, y3] = [c, a];\n\n  return [x, y, x1, y1, x2, y2, x3, y3];\n};\n\nconst triangle = (a, b, c) => {\n  return triangle(a, b, c);\n};\n\nconst triangle = (a, b, c) => {\n  return triangle(a, b, c);\n};\n\n/*\n Given the length of the three sides  of a  triangle, return the area\n */\nconst triangleArea = (a, b, c) => {\n  return triangleArea(triangle(a, b, c));\n};\n\nconst triangleArea = (a, b, c) => {\n  return triangleArea(triangle(a, b, c));\n};\n\nconst triangleArea = (a, b, c) => {\n  return triangleArea(triangle(a, b, c));\n};\n\n/*\n Given the length of the three sides  of a  triangle, return the perimeter\n */\nconst trianglePerimeter = (a, b, c) => {\n  return trianglePerimeter(triangle(a, b, c));\n};\n\nconst trianglePerimeter = (a, b, c) => {\n  return trianglePerimeter(triangle(a, b, c));\n};\n\nconst trianglePerimeter = (a, b, c) => {\n  return trianglePerimeter(triangle(a, b, c));\n};\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\" ,\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\",\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n    if(words.length===0) return undefined\n    var max= words[0];\n    var counter =0;\n    for(var i=0; i < words.length; i++){\n        if(words[i].length > max.length)\n            {\n            counter = 0;\n            max = words[i];\n        }\n        if(words[i].length === max.length)\n        {\n            if(words[i].includes(max) === false)\n            {\n                counter = 0;\n                max = words[i];\n            }\n            else{\n                counter++;\n            }\n        }\n    }\n    return max;\n}\n\nconsole.log(findMax([\n    \"na me\",\n    \"of\",\n    \"string\"\n]));\nconsole.log(findMax([\"name \", \"enam\", \"game\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\", \"cc\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    return [number + need, remaining - need];\n}\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operators = operator.split('')\n  const operands = operand.split('')\n  const result = []\n  operators.forEach(oper => {\n    if (operators.indexOf(oper) < operators.indexOf(operands[0])) {\n      const operand1 = operands[operators.indexOf(oper) - 1]\n      const operand2 = operands[operators.indexOf(oper) + 1]\n      result.push(operand1 + oper + operand2)\n    } else {\n      result.push(operands[operators.indexOf(oper) - 1] + oper + operands[operators.indexOf(oper) + 1])\n    }\n  })\n  return result.join('')\n}\n\nconst operatorList = ['+', '-', '*', '/', '//', '**']\nconst operandList = ['2', '3', '4', '5']\n\nconst test = (operator, operand) => {\n  console.log(doAlgebra(operator, operand))\n}\n\ntest('3+4', '4')\ntest('4-2', '10')\ntest('2*3', '6')\ntest('2/3', '2')\ntest('2//3', '0')\ntest('2**3', '8')\n\n/*\n\nThis is the final code\n\nconst doAlgebra = (operator, operand) => {\n  const operators = operator.split('')\n  const operands = operand.split('')\n  const result = []\n  operators.forEach(oper => {\n    if (operators.indexOf(oper) < operators.indexOf(operands[0])) {\n      const operand1 = operands[operators.indexOf(oper) - 1]\n      const operand2 = operands[operators.indexOf(oper) + 1]\n      result.push(operand1 + oper + operand2)\n    } else {\n      result.push(operands[operators.indexOf(oper) - 1] + oper + operands[operators.indexOf(oper) + 1])\n    }\n  })\n  return result.join('')\n}\n\nconst operatorList = ['+', '-', '*', '/', '//', '**']\nconst operandList = ['2', '3', '4', '5']\n\nconst test = (operator, operand) => {\n  console.log(doAlgebra(operator, operand))\n}\n\ntest('3+4', '4')\ntest('4-2', '10')\ntest('2*3', '6')\ntest('2/3', '2')\ntest('2//3', '0')\ntest('2**3', '8')\n\n */\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n    let rev = [...s];\n    for(let i = 0; i < rev.length; i++) {\n        if(s[i].toUpperCase() === s[i]) {\n            rev[i] = s[i].toLowerCase();\n        } else {\n            rev[i] = s[i].toUpperCase();\n        }\n    }\n    return rev.join(\"\");\n}\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n    if(text === '') {\n        return null;\n    }\n    let hash = crypto.createHash('md5');\n    hash.update(text);\n    return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithSalt = (text, salt) => {\n    if(text === '') {\n        return null;\n    }\n    let hash = crypto.createHash('md5');\n    hash.update(text + salt);\n    return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5WithSalt('Hello world','salt') == '6c8ce6b2a1e2b00d0a0d0a9085f5e0f'\n  */\nconst stringToMd5WithSaltAndSalt = (text, salt1, salt2) => {\n    if(text === '') {\n        return null;\n    }\n    let hash = crypto.createHash('md5');\n    hash.update(text + salt1 + salt2);\n    return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5WithSaltAndSalt('Hello world','salt1','salt2') == '9f9b4b9c9b4b5c8a6a2a2f8c2a2a1'\n  */\nconst stringToMd5WithSaltAndSaltAndSalt = (text, salt1, salt2, salt3) => {\n    if(text === '') {\n        return null;\n    }\n    let hash = crypto.createHash('md5');\n    hash.update(text + salt1 + salt2 + salt3);\n    return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5WithSaltAndSaltAndSalt('Hello world','salt1','salt2','salt3') == '5e0d5b4f5e0d5c9a6a2a2f9e0d5f5e0'\n  */\nconst stringToMd5WithSaltAndSaltAndSaltAndSalt = (text, salt1, salt2, salt3, salt4) => {\n    if(text === '') {\n        return null;\n    }\n    let hash = crypto.createHash('md5');\n    hash.update(text + salt1 + salt2 + salt3 + salt4);\n    return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5WithSaltAndSaltAndSaltAndSalt('Hello world','salt1','salt2','salt3','salt4') == '0b0d2f1d2f1d0d5b6a6a2a2f9e0d5f5e0'\n  */\nconst stringToMd5WithSaltAndSaltAndSaltAndSaltAndSalt = (text, salt1, salt2, salt3, salt4, salt5) => {\n    if(text === '') {\n        return null;\n    }\n    let hash = crypto.createHash('md5');\n    hash.update(text + salt1 + salt2 + salt3 + salt4 + salt5);\n    return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5WithSaltAndSaltAndSaltAndSaltAndSalt('Hello world','salt1','salt2','salt3','salt4','salt5') == '9a1f5d0f5d1d5b6a6a2a2f9e0d5f5e0'\n  */\nconst stringToMd5WithSaltAndSaltAndSaltAndSaltAndSaltAndSalt = (text, salt1, salt2, salt3, salt4, salt5, salt6) => {\n    if(text === '') {\n        return null;\n    }\n    let hash = crypto.createHash('md5');\n    hash.update(text + salt1 + salt2 + salt3 + salt4 + salt5 + salt6);\n    return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5WithSaltAndSaltAndSaltAndSaltAndSaltAndSalt('Hello world','salt1','salt2','salt3','salt4','salt5','salt6') == 'b0b9c4b6c4bc3a6a2a2f8c2a2a1'\n  */\nconst stringToMd5WithSaltAndSaltAndSaltAndSaltAndSaltAndSalt = (text, salt1, salt2, salt3, salt4, salt5, salt6, salt7) => {\n    if(text === '') {\n        return null;\n    }\n    let hash = crypto.createHash('md5');\n    hash.update(text + salt1 + salt2 + salt3 + salt4 + salt5 + salt6 + salt7);\n    return hash.digest('hex');\n};\n\nexport {\n    stringToMd5,\n    stringToMd5WithSalt,\n    stringToMd5WithSaltAndSalt,\n    "}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n    let arr = []\n    let i = a\n    while (i <= b) {\n        arr.push(i)\n        i += 1\n    }\n    return arr\n}\n\nconst generateEvenIntegers = generateIntegers(2, 1000)\n\nconst generateOddIntegers = generateIntegers(1, 1000)\n\nconst generateEvenOddIntegers = [...generateEvenIntegers,...generateOddIntegers]\n\nconst findMaxSum = (arr) => {\n    let sum = 0\n    let maxSum = 0\n    for (let i = 0; i < arr.length; i += 1) {\n        for (let j = i + 1; j < arr.length; j += 1) {\n            sum += arr[i] * arr[j]\n            if (sum > maxSum) {\n                maxSum = sum\n            }\n        }\n    }\n    return maxSum\n}\n\nconst findMaxSum2 = (arr) => {\n    let sum = 0\n    for (let i = 0; i < arr.length; i += 1) {\n        for (let j = i + 1; j < arr.length; j += 1) {\n            sum += arr[i] * arr[j]\n        }\n    }\n    return sum\n}\n\nconst findMaxSum3 = (arr) => {\n    let maxSum = 0\n    for (let i = 0; i < arr.length; i += 1) {\n        for (let j = i + 1; j < arr.length; j += 1) {\n            for (let k = j + 1; k < arr.length; k += 1) {\n                maxSum = maxSum + arr[i] * arr[j] * arr[k]\n            }\n        }\n    }\n    return maxSum\n}\n\nconst findMaxSum4 = (arr) => {\n    let maxSum = 0\n    for (let i = 0; i < arr.length; i += 1) {\n        for (let j = i + 1; j < arr.length; j += 1) {\n            for (let k = j + 1; k < arr.length; k += 1) {\n                for (let l = k + 1; l < arr.length; l += 1) {\n                    maxSum = maxSum + arr[i] * arr[j] * arr[k] * arr[l]\n                }\n            }\n        }\n    }\n    return maxSum\n}\n\nconst findMaxSum5 = (arr) => {\n    let maxSum = 0\n    for (let i = 0; i < arr.length; i += 1) {\n        for (let j = i + 1; j < arr.length; j += 1) {\n            for (let k = j + 1; k < arr.length; k += 1) {\n                for (let l = k + 1; l < arr.length; l += 1) {\n                    for (let m = l + 1; m < arr.length; m += 1) {\n                        maxSum = maxSum + arr[i] * arr[j] * arr[k] * arr[l] * arr[m]\n                    }\n                }\n            }\n        }\n    }\n    return maxSum\n}\n\nconst findMaxSum6 = (arr) => {\n    let maxSum = 0\n    for (let i = 0; i < arr.length; i += 1) {\n        for (let j = i + 1; j < arr.length; j += 1) {\n            for (let k = j + 1; k < arr.length; k += 1) {\n                for (let l = k + 1; l < arr.length; l += 1) {\n                    for (let m = l + 1; m < arr.length; m += 1) {\n                        for (let n = m + 1; n < arr.length; n += 1) {\n                            maxSum = maxSum + arr[i] * arr[j] * arr[k] * arr[l] * arr[m] * arr[n]\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return maxSum\n}\n\nconst findMaxSum7 = (arr) => {\n    let maxSum = 0\n    for (let i = 0; i < arr.length; i += 1) {\n        for (let j = i + 1; j < arr.length; j += 1) {\n            for (let k = j + 1; k < arr.length; k += 1) {\n                for (let l = k + 1; l < arr.length; l += 1) {\n                    for (let m = l + 1; m < arr.length; m += 1) {\n                        for (let n = m + 1; n < arr.length; n += 1) {\n                            for (let o = n + 1; o < arr.length; o += 1) {\n                                maxSum = maxSum + arr[i] * arr[j] * arr[k] * arr[l] * arr[m] * arr[n] * arr[o]\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return maxSum\n}\n\nconst findMaxSum8 = (arr) => {\n    let maxSum = 0\n    for (let i = 0; i < arr.length; i += 1) {\n        for (let j = i + 1; j < arr.length; j += 1) {\n            for (let k = j + 1; k < arr.length; k += 1) {\n                for (let l = k + 1; l < arr.length; l += 1) {\n                    for (let m = l + 1; m < arr.length; m += 1) {\n                        for (let n = m + 1; n < arr.length; n += 1) {\n                            for (let o = n + 1; o < arr.length; o += 1) {\n                                for (let p = o + 1; p < arr.length; p += 1) {\n                                    maxSum = maxSum + arr[i] * arr[j] * arr[k]"}
