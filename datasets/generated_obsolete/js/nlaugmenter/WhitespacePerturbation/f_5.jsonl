{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = [...numbers].sort((a, b) => Math.abs(a - b));\n\n  for (let i = 0; i < sortedNumbers.length - 1; i++) {\n    if (Math.abs(sortedNumbers[i + 1] - sortedNumbers[i]) <= threshold) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst numberOfDigits = (number) => {\n  const numberOfDigits = (number).toString().split(\"\").length;\n  return numberOfDigits;\n};\n\nconst hasNearElements = (numbers, threshold, numberOfDigits) => {\n  const sortedNumbers = [...numbers].sort((a, b) => Math.abs(a - b));\n\n  for (let i = 0; i < sortedNumbers.length - 1; i++) {\n    const a = sortedNumbers[i];\n    const b = sortedNumbers[i + 1];\n    if (Math.abs(a - b) <= threshold) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nmodule.exports = {\n  hasNearElements,\n  hasCloseElements,\n  numberOfDigits,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const all_paren_groups = []\n  const paren_groups = []\n  let open_brackets = 0\n  let close_brackets = 0\n  paren_string.forEach(char => {\n    if (char === '(') {\n      open_brackets += 1\n    }\n    if (char === ')') {\n      close_brackets += 1\n    }\n    if (open_brackets === close_brackets) {\n      paren_groups.push(paren_string.substring(0, char.length))\n      paren_string = paren_string.substring(char.length + 1)\n    }\n  })\n  paren_string.forEach(char => {\n    if (char === '(') {\n      open_brackets += 1\n    }\n    if (char === ')') {\n      close_brackets += 1\n    }\n    if (open_brackets === close_brackets) {\n      all_paren_groups.push(paren_string)\n      paren_string = ''\n    }\n  })\n  return all_paren_groups\n}\n\nmodule.exports = {\n  separateParenGroups\n}\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    const intPart = Math.floor(number);\n    const decPart = number - intPart;\n\n    if (decPart < 1e-10) {\n        return intPart;\n    } else {\n        return intPart + Math.round(decPart * 10) / 10;\n    }\n}\n\nconst removeDuplicates = (arr) => {\n    const newArr = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]!= newArr[newArr.length - 1]) {\n            newArr.push(arr[i]);\n        }\n    }\n    return newArr;\n}\n\nexport default {\n    addTwoNumbers,\n    truncateNumber,\n    removeDuplicates\n}<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero , and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let current = 0\n  for (let i = 0; i < operations.length; i += 1) {\n    current += operations[i]\n    if (current < 0) {\n      return true\n    }\n  }\n  return false\n}\n\nexport {\n  belowZero\n}\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const numberArray = [...numbers]\n  const mean = numberArray.reduce((p, c) => p + c, 0) / numberArray.length\n  const sum = numberArray.reduce((p, c) => p + c, 0)\n  const dev = numberArray.reduce((p, c, i) => (c - mean) ** 2, 0)\n  return Math.sqrt(dev / sum)\n}\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers) => {\n  const sortedArray = [...numbers].sort()\n  return (sortedArray.length / 2) + (sortedArray[sortedArray.length / 2 - 1] - sortedArray[sortedArray.length / 2])\n}\n\nconst meanAbsoluteDeviation = (numbers) => {\n  const numberArray = [...numbers]\n  const mean = numberArray.reduce((p, c) => p + c, 0) / numberArray.length\n  const sum = numberArray.reduce((p, c) => p + c, 0)\n  const dev = numberArray.reduce((p, c, i) => (c - mean) ** 2, 0)\n  return Math.sqrt(dev / sum)\n}\n\nconst medianAbsoluteDeviation = (numbers) => {\n  const sortedArray = [...numbers].sort()\n  return (sortedArray.length / 2) + (sortedArray[sortedArray.length / 2 - 1] - sortedArray[sortedArray.length / 2])\n}\n\nconst modeAbsoluteDeviation = (numbers) => {\n  const sortedArray = [...numbers].sort()\n  const mode = sortedArray.find((x) => x === sortedArray[0])\n  return (sortedArray.length / 2) + (mode - sortedArray[sortedArray.length / 2])\n}\n\nconst modeAbsoluteDeviation = (numbers) => {\n  const sortedArray = [...numbers].sort()\n  const mode = sortedArray.find((x) => x === sortedArray[0])\n  return (sortedArray.length / 2) + (mode - sortedArray[sortedArray.length / 2])\n}\n\nconst modeAbsoluteDeviation = (numbers) => {\n  const sortedArray = [...numbers].sort()\n  const mode = sortedArray.find((x) => x === sortedArray[0])\n  return (sortedArray.length / 2) + (mode - sortedArray[sortedArray.length / 2])\n}\n\nconst modeAbsoluteDeviation = (numbers) => {\n  const sortedArray = [...numbers].sort()\n  const mode = sortedArray.find((x) => x === sortedArray[0])\n  return (sortedArray.length / 2) + (mode - sortedArray[sortedArray.length / 2])\n}\n\nconst modeAbsoluteDeviation = (numbers) => {\n  const sortedArray = [...numbers].sort()\n  const mode = sortedArray.find((x) => x === sortedArray[0])\n  return (sortedArray.length / 2) + (mode - sortedArray[sortedArray.length / 2])\n}\n\nconst modeAbsoluteDeviation = (numbers) => {\n  const sortedArray = [...numbers].sort()\n  const mode = sortedArray.find((x) => x === sortedArray[0])\n  return (sortedArray.length / 2) + (mode - sortedArray[sortedArray.length / 2])\n}\n\nconst modeAbsoluteDeviation = (numbers) => {\n  const sortedArray = [...numbers].sort()\n  const mode = sortedArray.find((x) => x === sortedArray[0])\n  return (sortedArray.length / 2) + (mode - sortedArray[sortedArray.length / 2])\n}\n\nconst modeAbsoluteDeviation = (numbers) => {\n  const sortedArray = [...numbers].sort()\n  const mode = sortedArray.find((x) => x === sortedArray[0])\n  return (sortedArray.length / 2) + (mode - sortedArray[sortedArray.length / 2])\n}\n\nconst modeAbsoluteDeviation = (numbers) => {\n  const sortedArray = [...numbers].sort()\n  const mode = sortedArray.find((x) => x === sortedArray[0])\n  return (sortedArray.length / 2) + (mode - sortedArray[sortedArray.length / 2])\n}\n\nconst modeAbsoluteDeviation = (numbers) => {\n  const sortedArray = [...numbers].sort()\n  const mode = sortedArray.find((x) => x === sortedArray[0])\n  return (sortedArray.length / 2) + (mode - sortedArray[sortedArray.length / 2])\n}\n\nconst modeAbsoluteDeviation = (numbers) => {\n  const sortedArray = [...numbers].sort()\n  const mode = sortedArray.find((x) => x === sortedArray[0])\n  return (sortedArray.length / 2) + (mode - sortedArray[sortedArray.length / 2])\n}\n\nconst modeAbsoluteDeviation = (numbers) => {\n  const sortedArray = [...numbers].sort()\n  const mode = sortedArray.find((x) => x === sortedArray[0])\n  return (sortedArray.length / 2) + (mode - sortedArray[sortedArray.length / 2])\n}\n\nconst modeAbsoluteDeviation = (numbers) => {\n  const sortedArray"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n    var list = [].concat(numbers);\n    var num = 0;\n    var newlist = [];\n    var index = -1;\n    while (num < list.length) {\n        index++;\n        newlist.push(list[num]);\n        if (num + 1 < list.length) {\n            newlist.push(delimeter);\n        }\n        num++;\n    }\n    return newlist;\n};\n\n/*\n  Converts a list of strings to a list of integers\n  >>> strings2ints([1, '2', '3'])\n  [1, 2, 3]\n  >>> strings2ints([1, '2', '3', '4'])\n  [1, 2, 3, 4]\n  >>> strings2ints(['1', '2', '3'])\n  [1, 2, 3]\n  >>> strings2ints(['1', '2', '3', '4'])\n  [1, 2, 3, 4]\n  */\nconst strings2ints = (numbers) => {\n    var ints = [];\n    var number = 0;\n    while (number < numbers.length) {\n        ints.push(parseInt(numbers[number]));\n        number++;\n    }\n    return ints;\n};\n\n/*\n  Inserts a number 'delimeter' between every  two consecutive elements of inputlist `numbers'\n  >>> strings2ints([1, '2', '3'])\n  [1, 2, 3]\n  >>> strings2ints([1, '2', '3', '4'])\n  [1, 4, 2, 4, 3]\n  >>> strings2ints(['1', '2', '3'])\n  [1, 2, 3]\n  >>> strings2ints(['1', '2', '3', '4'])\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse2 = (numbers, delimeter) => {\n    var list = [].concat(numbers);\n    var num = 0;\n    var newlist = [];\n    var index = -1;\n    while (num < list.length) {\n        index++;\n        newlist.push(list[num]);\n        if (num + 1 < list.length) {\n            newlist.push(delimeter);\n        }\n        num++;\n    }\n    return newlist;\n};\n\n/*\n  Converts a list of strings to a list of integers\n  >>> strings2ints([1, '2', '3'])\n  [1, 2, 3]\n  >>> strings2ints([1, '2', '3', '4'])\n  [1, 2, 3, 4]\n  >>> strings2ints(['1', '2', '3'])\n  [1, 2, 3]\n  >>> strings2ints(['1', '2', '3', '4'])\n  [1, 2, 3, 4]\n  */\nconst strings2ints2 = (numbers) => {\n    var ints = [];\n    var number = 0;\n    while (number < numbers.length) {\n        ints.push(parseInt(numbers[number]));\n        number++;\n    }\n    return ints;\n};\n\n/*\n  Given a list of integers, return a new list with every two adjacent numbers concatenated\n  >>> intersperse2([1, 2, 3])\n  [1, 2, 3, 2, 3]\n  >>> intersperse2([1, 2, 3, 4])\n  [1, 2, 3, 4, 2, 3, 4]\n  >>> intersperse2([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5, 2, 3, 4, 5]\n  >>> intersperse2([1, 2, 3])\n  [1, 2, 3]\n  >>> intersperse2([1, 2, 3, 4])\n  [1, 2, 3, 4]\n  >>> intersperse2([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst intersperse3 = (numbers) => {\n    var list = [].concat(numbers);\n    var num = 0;\n    var newlist = [];\n    var index = -1;\n    while (num < list.length) {\n        index++;\n        newlist.push(list[num]);\n        if (num + 1 < list.length) {\n            newlist.push(list[num + 1]);\n        }\n        num++;\n    }\n    return newlist;\n};\n\n/*\n  Converts a list of strings to a list of integers\n  >>> strings2ints([1, '2', '3'])\n  [1, 2, 3]\n  >>> strings2ints([1, '2', '3', '4'])\n  [1, 4, 2, 4, 3]\n  >>> strings2ints(['1', '2', '3'])\n  [1, 2, 3]\n  >>> strings2ints(['1', '2', '3', '4'])\n  [1, 4, 2, 4, 3]\n  */\nconst strings2ints3 = (numbers) => {\n    var ints = [];\n    var number = 0;\n    while (number < numbers.length) {\n        ints.push(parseInt(numbers[number]));\n        number++;\n    }\n    return ints;\n};\n\nmodule.exports = {\n    intersperse, intersperse2, intersperse3, strings2ints, strings2ints2, strings2ints3\n};\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E .g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E.g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  paren_string = paren_string.replace(/\\s+/g, '');\n  let num_paren = 0;\n  let num_group = 0;\n  let depth = 0;\n  let group_level = 0;\n  let depth_string = '';\n  let group_string = '';\n  let temp_string = '';\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string.charAt(i) == '(') {\n      depth++;\n      depth_string += paren_string.charAt(i);\n    } else if (paren_string.charAt(i) == ')') {\n      depth--;\n      depth_string += paren_string.charAt(i);\n      if (depth == 0) {\n        if (group_level < 2) {\n          num_group++;\n          group_string += paren_string.charAt(i);\n          group_level++;\n          if (group_level == 2) {\n            if (num_paren < 2) {\n              num_paren++;\n            } else {\n              depth_string += ')';\n              num_group--;\n              group_string += ')';\n              num_paren--;\n            }\n          }\n        }\n      }\n    }\n  }\n  return [num_group, num_paren, depth, depth_string, group_string];\n};\n\nmodule.exports = parseNestedParens;\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const newStrings = []\n  strings.forEach(string => {\n    if (string.indexOf(substring) >= 0) {\n      newStrings.push(string)\n    }\n  })\n  return newStrings\n}\n\n/*\n  * Find the common prefix of all strings in an array\n  *\n  * @param {Array} strings - Array of strings\n  * @return {string} commonPrefix - Common prefix of all strings\n  *\n  * @example\n  * >>> commonPrefix(['abc', 'bacd', 'cde', 'array'])\n  * 'abc'\n  */\nconst commonPrefix = (strings) => {\n  if (!strings ||!strings.length) {\n    return ''\n  }\n  const max = strings[0].length\n  let common = ''\n  strings.forEach(string => {\n    if (string.length < max) {\n      common = string\n    } else {\n      return\n    }\n  })\n  return common\n}\n\n/*\n  * Find the common suffix of all strings in an array\n  *\n  * @param {Array} strings - Array of strings\n  * @return {string} commonSuffix - Common suffix of all strings\n  *\n  * @example\n  * >>> commonSuffix(['abc', 'bacd', 'cde', 'array'])\n  * 'd'\n  */\nconst commonSuffix = (strings) => {\n  if (!strings ||!strings.length) {\n    return ''\n  }\n  const min = strings[0].length\n  let common = ''\n  strings.forEach(string => {\n    if (string.length < min) {\n      common = string\n    } else {\n      return\n    }\n  })\n  return common\n}\n\n/*\n  * Find the common middle of all strings in an array\n  *\n  * @param {Array} strings - Array of strings\n  * @return {string} commonMiddle - Common middle of all strings\n  *\n  * @example\n  * >>> commonMiddle(['abc', 'bacd', 'cde', 'array'])\n  * 'bacd'\n  */\nconst commonMiddle = (strings) => {\n  if (!strings ||!strings.length) {\n    return ''\n  }\n  const max = strings[0].length\n  let common = ''\n  strings.forEach(string => {\n    if (string.length < max) {\n      common = string\n    } else {\n      return\n    }\n  })\n  return common\n}\n\n/*\n  * Return a string with a specified number of '*'s before the beginning of the\n  * string\n  *\n  * @param {number} length - Length of '*' to add\n  * @param {string} string - The string to insert '*'s into\n  * @return {string} pre-inserted '*'s\n  *\n  * @example\n  * >>> preInsert(2, 'abc')\n  * '***abc'\n  * >>> preInsert(4, 'abc')\n  * '******abc'\n  */\nconst preInsert = (length, string) => {\n  let preInserted = ''\n  for (let i = 0; i < length; i++) {\n    preInserted += '*'\n  }\n  preInserted += string\n  return preInserted\n}\n\n/*\n  * Return a string with a specified number of '*'s after the end of the string\n  *\n  * @param {number} length - Length of '*' to add\n  * @param {string} string - The string to insert '*'s into\n  * @return {string} post-inserted '*'s\n  *\n  * @example\n  * >>> postInsert(2, 'abc')\n  * 'abc***'\n  * >>> postInsert(4, 'abc')\n  * 'abc****'\n  */\nconst postInsert = (length, string) => {\n  let postInserted = string\n  for (let i = 0; i < length; i++) {\n    postInserted += '*'\n  }\n  return postInserted\n}\n\nmodule.exports = {\n  commonPrefix,\n  commonSuffix,\n  commonMiddle,\n  filterBySubstring,\n  preInsert,\n  postInsert\n}\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let result = [max];\n  let previous = max;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > previous) {\n      previous = max;\n      max = numbers[i];\n      result.push(max);\n    }\n    else if (numbers[i] == previous) {\n      previous = numbers[i];\n      result.push(max);\n    }\n  }\n  return result;\n};\n\nexport default rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string .\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix .\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string.\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n return (string.length > 0)\n   ? (string.charAt(0) == string.charAt(string.length - 1)\n     ? string.substring(0, string.length - 1) + string.slice(1)\n      : string.charAt(0) + makePalindrome(string.slice(1))\n    )\n    : string;\n}\n\n/* Test if a string is a palindrome */\nc isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n\n/* Find the smallest palindrome that ends with a character */\nc makePalindrome = (string) => {\n return (string.length > 0)\n   ? (string.charAt(0) == string.charAt(string.length - 1)\n     ? string.slice(0, string.length - 1) + string.slice(1)\n      : string.slice(0, string.length)\n    )\n    : string;\n}\n\n/* Test if a string is a palindrome */\nc isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n\n/* Find the smallest palindrome that ends with a character */\nc makePalindrome = (string) => {\n return (string.length > 0)\n   ? (string.charAt(0) == string.charAt(string.length - 1)\n     ? string.slice(0, string.length - 1) + string.slice(1)\n      : string.slice(0, string.length)\n    )\n    : string;\n}\n\n/* Test if a string is a palindrome */\nc isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n\n/* Find the smallest palindrome that ends with a character */\nc makePalindrome = (string) => {\n return (string.length > 0)\n   ? (string.charAt(0) == string.charAt(string.length - 1)\n     ? string.slice(0, string.length - 1) + string.slice(1)\n      : string.slice(0, string.length)\n    )\n    : string;\n}\n\n/* Test if a string is a palindrome */\nc isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n\n/* Find the smallest palindrome that ends with a character */\nc makePalindrome = (string) => {\n return (string.length > 0)\n   ? (string.charAt(0) == string.charAt(string.length - 1)\n     ? string.slice(0, string.length - 1) + string.slice(1)\n      : string.slice(0, string.length)\n    )\n    : string;\n}\n\n/* Test if a string is a palindrome */\nc isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n\n/* Find the smallest palindrome that ends with a character */\nc makePalindrome = (string) => {\n return (string.length > 0)\n   ? (string.charAt(0) == string.charAt(string.length - 1)\n     ? string.slice(0, string.length - 1) + string.slice(1)\n      : string.slice(0, string.length)\n    )\n    : string;\n}\n\n/* Test if a string is a palindrome */\nc isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n\n/* Find the smallest palindrome that ends with a character */\nc makePalindrome = (string) => {\n return (string.length > 0)\n   ? (string.charAt(0) == string.charAt(string.length - 1)\n     ? string.slice(0, string.length - 1) + string.slice(1)\n      : string.slice(0, string.length)\n    )\n    : string;\n}\n\n/* Test if a string is a palindrome */\nc isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n\n/* Find the smallest palindrome that ends with a character */\nc makePalindrome = (string) => {\n return (string.length > 0)\n   ? (string.charAt(0) == string.charAt(string.length - 1)\n     ? string.slice(0, string.length - 1) + string.slice(1)\n      : string.slice(0, string.length)\n    )\n    : string;\n}\n\n/* Test if a string is a palindrome */\nc isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n\n/* Find the smallest palindrome that ends with a character */\nc makePalindrome = (string) => {\n return (string.length > 0)\n   ? (string.charAt(0) == string.charAt(string.length - 1)\n     ? string.slice(0, string.length - 1) + string.slice(1)\n      : string.slice(0, string.length)\n    )\n    : string;\n}\n\n/* Test if a string is a palindrome */\nc isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n\n/* Find the smallest palindrome that ends with a character */\nc makePalindrome = (string"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n    if (a === b) return a;\n    return a + b.split('').map(bit => (parseInt(bit) ^ 1)).join('');\n};\n\nexport { stringXor };\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null;\n  let len = strings[0].length;\n  let max = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > len) {\n      len = strings[i].length;\n      max = strings[i];\n    }\n  }\n  return max;\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest(['aa', 'bbb', 'cccc'])\n  'cccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null;\n  let len = strings[0].length;\n  let max = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > len) {\n      len = strings[i].length;\n      max = strings[i];\n    }\n  }\n  return max;\n}\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n    while (b!== 0) {\n        const [t, n] = [a % b, b];\n        a = n;\n        b = t;\n    }\n    return a;\n}\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n    const list = []\n    let index = 0\n    while (index < string.length) {\n        const prefix = string.substr(0, index + 1)\n        list.push(prefix)\n        index = indexOf(string, '', index + 1)\n    }\n    return list\n}\n\n/* Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n    const list = []\n    let index = string.length - 1\n    while (index >= 0) {\n        const suffix = string.substr(index, string.length - index)\n        list.push(suffix)\n        index = indexOf(string, '', index - 1)\n    }\n    return list\n}\n\n/* Return list of all prefixes and suffixes from sho rtest  to longestof the input string\n  >>> allPrefixAndSuffixes('abc')\n  [['a', 'ab', 'abc'], ['b', 'bc', 'c']]\n  */\nconst allPrefixAndSuffixes = (string) => {\n    const list = []\n    const list1 = allPrefixes(string)\n    const list2 = allSuffixes(string)\n    list1.forEach((prefix) => {\n        list2.forEach((suffix) => {\n            list.push([prefix, suffix])\n        })\n    })\n    return list\n}\n\n/* Return longest of two strings\n  >>> longest('abc', 'abd')\n  'abd'\n  >>> longest('', 'abcd')\n  'abcd'\n  */\nconst longest = (string1, string2) => {\n    if (string1.length === 0 || string2.length === 0) {\n        return ''\n    } else if (string1.length > string2.length) {\n        return string1\n    } else {\n        return string2\n    }\n}\n\n/* Return shortest of two strings\n  >>> shortest('abc', 'abd')\n  'abc'\n  >>> shortest('', 'abcd')\n  ''\n  */\nconst shortest = (string1, string2) => {\n    if (string1.length === 0 || string2.length === 0) {\n        return ''\n    } else if (string1.length < string2.length) {\n        return string1\n    } else {\n        return string2\n    }\n}\n\n/* Return longest of three strings\n  >>> longest3('abc', 'abd', 'ab')\n  'abc'\n  >>> longest3('', 'abcd', 'ab')\n  'abc'\n  >>> longest3('ab', 'abc', 'ab')\n  'ab'\n  */\nconst longest3 = (string1, string2, string3) => {\n    const longest = longest(string1, string2)\n    if (longest === string1) {\n        return longest3(string2, string3, string1)\n    } else if (longest === string2) {\n        return longest3(string1, string3, string2)\n    } else {\n        return longest\n    }\n}\n\n/* Return shortest of two strings\n  >>> shortest3('abc', 'abd', 'ab')\n  'abc'\n  >>> shortest3('', 'abcd', 'ab')\n  'ab'\n  >>> shortest3('ab', 'abc', 'ab')\n  'ab'\n  */\nconst shortest3 = (string1, string2, string3) => {\n    const shortest = shortest(string1, string2)\n    if (shortest === string1) {\n        return shortest3(string2, string3, string1)\n    } else if (shortest === string2) {\n        return shortest3(string1, string3, string2)\n    } else {\n        return shortest\n    }\n}\n\n/* Return longest of three strings\n  >>> longest3('abc', 'abd', 'ab')\n  'abc'\n  >>> longest3('', 'abcd', 'ab')\n  'abc'\n  >>> longest3('ab', 'abc', 'ab')\n  'ab'\n  */\nconst longest4 = (string1, string2, string3) => {\n    const longest = longest(string1, string2)\n    if (longest === string1) {\n        return longest3(string2, string3, string1)\n    } else if (longest === string2) {\n        return longest3(string1, string3, string2)\n    } else {\n        return longest\n    }\n}\n\n/* Return shortest of two strings\n  >>> shortest3('abc', 'abd', 'ab')\n  'abc'\n  >>> shortest3('', 'abcd', 'ab')\n  'ab'\n  >>> shortest3('ab', 'abc', 'ab')\n  'ab'\n  */\nconst shortest4 = (string1, string2, string3) => {\n    const shortest = shortest(string1, string2)\n    if (shortest === string1) {\n        return shortest3(string2, string3, string1)\n    } else if (shortest === string2) {\n        return shortest3(string1, string3, string2)\n    } else {\n        return shortest\n    }\n}\n\n/* Return longest of three strings\n  >>> longest3('abc', 'abd', 'ab')\n  'abc'\n  >>> longest3('', 'abcd', 'ab')\n  'abc'\n  >>> longest3('ab', 'abc', 'ab')\n  'ab'\n  */\nconst longest5 = (string1, string2, string3) => {\n    const longest = longest(string1, string2)\n    if (longest === string1) {\n        return longest3(string2, string3, string1)\n    } else if (longest === string2) {\n        return longest3(string1, string3, string2)\n    } else {\n        return longest\n    }\n}\n\n/* Return shortest of two strings\n  >>> shortest3('abc', 'abd', 'ab')\n  'abc'\n  >>> shortest3('', 'abcd', 'ab')\n  'ab'\n  >>> shortest3('"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += (i + 1) +'';\n  }\n  return str;\n};\n\nexport default stringSequence;\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const counter = {};\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (counter[character] === undefined) {\n      counter[character] = 1;\n    } else {\n      counter[character]++;\n    }\n  }\n  return Object.keys(counter).length;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note , lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note, lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n    const notes = music_string.split(\" \")\n    const int_list = []\n    for (let i = 0; i < notes.length; i += 1) {\n        const note = notes[i]\n        if (note === \"o\" || note === \"o|\" || note === \".|\") {\n            int_list.push(1)\n        } else if (note === \"o|\" || note === \".\" || note === \"o\") {\n            int_list.push(2)\n        } else if (note === \".|\") {\n            int_list.push(3)\n        } else {\n            int_list.push(4)\n        }\n    }\n    return int_list\n}\n\n// test\n\nconst test_music_string = \"o o|.| o| o|.|.|.|.| o o\"\nconsole.log(parseMusic(test_music_string))\n\n// end\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while ((index = string.indexOf(substring, index))!= -1) {\n    count++;\n    index++;\n  }\n  return count;\n};\n\nconsole.log(howManyTimes('a', 'a'));\nconsole.log(howManyTimes('a', 'aa'));\nconsole.log(howManyTimes('aa', 'aa'));\nconsole.log(howManyTimes('aaaa', 'aa'));\nconsole.log(howManyTimes('aaa', 'aa'));\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two', ' three ', 'fou r ', 'fiv e', 'six' , 'seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  return numbers.split(\" \").sort().join(\"\");\n};\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers2 = (numbers) => {\n  const array = [...new Set(numbers.split(\" \"))];\n  return array.sort((a,b) => a - b).join(\"\");\n};\n\nconst sortNumbers3 = (numbers) => {\n  const array = [...new Set(numbers.split(\" \"))];\n  return array.sort((a,b) => a - b).join(\"\");\n};\n\nconst sortNumbers4 = (numbers) => {\n  const array = [...new Set(numbers.split(\" \"))];\n  return array.sort((a,b) => b - a).join(\"\");\n};\n\nconst sortNumbers5 = (numbers) => {\n  const array = [...new Set(numbers.split(\" \"))];\n  return array.sort((a,b) => a - b).join(\"\");\n};\n\nconst sortNumbers6 = (numbers) => {\n  const array = [...new Set(numbers.split(\" \"))];\n  return array.sort((a,b) => a * b).join(\"\");\n};\n\nconst sortNumbers7 = (numbers) => {\n  const array = [...new Set(numbers.split(\" \"))];\n  return array.sort((a,b) => b * a).join(\"\");\n};\n\nconst sortNumbers8 = (numbers) => {\n  const array = [...new Set(numbers.split(\" \"))];\n  return array.sort((a,b) => b / a).join(\"\");\n};\n\nconst sortNumbers9 = (numbers) => {\n  const array = [...new Set(numbers.split(\" \"))];\n  return array.sort((a,b) => b % a).join(\"\");\n};\n\nconst sortNumbers10 = (numbers) => {\n  const array = [...new Set(numbers.split(\" \"))];\n  return array.sort((a,b) => a % b).join(\"\");\n};\n\nconst sortNumbers11 = (numbers) => {\n  const array = [...new Set(numbers.split(\" \"))];\n  return array.sort((a,b) => a + b).join(\"\");\n};\n\nconst sortNumbers12 = (numbers) => {\n  const array = [...new Set(numbers.split(\" \"))];\n  return array.sort((a,b) => a - b).join(\"\");\n};\n\nconst sortNumbers13 = (numbers) => {\n  const array = [...new Set(numbers.split(\" \"))];\n  return array.sort((a,b) => a * b).join(\"\");\n};\n\nconst sortNumbers14 = (numbers) => {\n  const array = [...new Set(numbers.split(\" \"))];\n  return array.sort((a,b) => a / b).join(\"\");\n};\n\nconst sortNumbers15 = (numbers) => {\n  const array = [...new Set(numbers.split(\" \"))];\n  return array.sort((a,b) => a % b).join(\"\");\n};\n\nconst sortNumbers16 = (numbers) => {\n  const array = [...new Set(numbers.split(\" \"))];\n  return array.sort((a,b) => b % a).join(\"\");\n};\n\nconst sortNumbers17 = (numbers) => {\n  const array = [...new Set(numbers.split(\" \"))];\n  return array.sort((a,b) => a + b).join(\"\");\n};\n\nconst sortNumbers18 = (numbers) => {\n  const array = [...new Set(numbers.split(\" \"))];\n  return array.sort((a,b) => a - b).join(\"\");\n};\n\nconst sortNumbers19 = (numbers) => {\n  const array = [...new Set(numbers.split(\" \"))];\n  return array.sort((a,b) => a * b).join(\"\");\n};\n\nconst sortNumbers20 = (numbers) => {\n  const array = [...new Set(numbers.split(\" \"))];\n  return array.sort((a,b) => a / b).join(\"\");\n};\n\nconst sortNumbers21 = (numbers) => {\n  const array = [...new Set(numbers.split(\" \"))];\n  return array.sort((a,b) => a % b).join(\"\");\n};\n\nconst sortNumbers22 = (numbers) => {\n  const array = [...new Set(numbers.split(\" \"))];\n  return array.sort((a,b) => a - b).join(\"\");\n};\n\nconst sortNumbers23 = (numbers) => {\n  const array = [...new Set(numbers.split(\" \"))];\n  return array.sort((a,b) => a + b).join(\"\");\n};\n\nconst sortNumbers24 = (numbers) => {\n  const array = [...new Set(numbers.split(\" \"))];\n  return array.sort((a,b) => b - a).join(\"\");\n};\n\nconst sortNumbers25 = (numbers) => {\n  const array = [...new Set(numbers.split(\" \"))];\n  return array.sort((a,b) => b * a).join(\"\");\n};\n\nconst sortNumbers26 = (numbers) => {\n  const array = [...new Set(numbers.split(\" \"))];\n  return array.sort((a,b) => a / b).join(\"\");\n};\n\nconst sortNumbers27"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let closest_pair = [\n    Math.min.apply(null, numbers),\n    Math.max.apply(null, numbers)\n  ];\n  let closest_pair_distance = Math.sqrt(\n    Math.pow(closest_pair[0] - numbers[0], 2) +\n    Math.pow(closest_pair[1] - numbers[1], 2)\n  );\n\n  for (let i = 0; i < numbers.length; i++) {\n    let i_numbers = numbers.slice();\n    i_numbers.splice(i, 1);\n    let i_numbers_distance = Math.sqrt(\n      Math.pow(i_numbers[0] - numbers[0], 2) +\n      Math.pow(i_numbers[1] - numbers[1], 2)\n    );\n\n    if (i_numbers_distance < closest_pair_distance) {\n      closest_pair = [i_numbers[0], i_numbers[1]];\n      closest_pair_distance = i_numbers_distance;\n    }\n  }\n\n  return [closest_pair[0], closest_pair[1]];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n    let min = Number.MAX_VALUE;\n    let max = Number.MIN_VALUE;\n    for (let i = 0; i < numbers.length; i++) {\n        min = Math.min(min, numbers[i]);\n        max = Math.max(max, numbers[i]);\n    }\n    let factor = 1.0 / (max - min);\n    for (let i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min) * factor;\n    }\n};\n\n/**\n  * Given a list of numbers, return the list with the smallest value at the\n  * index 0 and largest at the index 1\n  *\n  * @param numbers\n  * @returns {*}\n  */\nconst sortByLargestFirst = (numbers) => {\n    let temp = [];\n    let largest = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > largest) {\n            largest = numbers[i];\n            temp.push(numbers[i]);\n        }\n    }\n    numbers = temp;\n    return numbers;\n};\n\n/**\n  * Given a list of numbers, return the list with the smallest value at the\n  * index 0 and largest at the index 1\n  *\n  * @param numbers\n  * @returns {*}\n  */\nconst sortBySmallestFirst = (numbers) => {\n    let temp = [];\n    let smallest = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] < smallest) {\n            smallest = numbers[i];\n            temp.push(numbers[i]);\n        }\n    }\n    numbers = temp;\n    return numbers;\n};\n\n/**\n  * Given a list of numbers, return the list with the largest value at the\n  * index 0 and smallest at the index 1\n  *\n  * @param numbers\n  * @returns {*}\n  */\nconst sortBySmallestFirstRev = (numbers) => {\n    let temp = [];\n    let smallest = 0;\n    for (let i = numbers.length - 1; i >= 0; i--) {\n        if (numbers[i] < smallest) {\n            smallest = numbers[i];\n            temp.push(numbers[i]);\n        }\n    }\n    numbers = temp;\n    return numbers;\n};\n\n/**\n  * Given a list of numbers, return the list with the smallest value at the\n  * index 0 and largest at the index 1\n  *\n  * @param numbers\n  * @returns {*}\n  */\nconst sortByLargestFirstRev = (numbers) => {\n    let temp = [];\n    let largest = 0;\n    for (let i = numbers.length - 1; i >= 0; i--) {\n        if (numbers[i] > largest) {\n            largest = numbers[i];\n            temp.push(numbers[i]);\n        }\n    }\n    numbers = temp;\n    return numbers;\n};\n\n/**\n  * Given a list of numbers, return the list with the largest value at the\n  * index 0 and smallest at the index 1\n  *\n  * @param numbers\n  * @returns {*}\n  */\nconst sortByLargestFirst_Rev = (numbers) => {\n    let temp = [];\n    let largest = 0;\n    for (let i = numbers.length - 1; i >= 0; i--) {\n        if (numbers[i] < largest) {\n            largest = numbers[i];\n            temp.push(numbers[i]);\n        }\n    }\n    numbers = temp;\n    return numbers;\n};\n\n/**\n  * Given a list of numbers, return the list with the smallest value at the\n  * index 0 and largest at the index 1\n  *\n  * @param numbers\n  * @returns {*}\n  */\nconst sortBySmallestFirst_Rev = (numbers) => {\n    let temp = [];\n    let smallest = 0;\n    for (let i = numbers.length - 1; i >= 0; i--) {\n        if (numbers[i] > smallest) {\n            smallest = numbers[i];\n            temp.push(numbers[i]);\n        }\n    }\n    numbers = temp;\n    return numbers;\n};\n\nmodule.exports = {\n    rescaleToUnit,\n    sortByLargestFirst,\n    sortBySmallestFirst,\n    sortBySmallestFirstRev,\n    sortByLargestFirstRev,\n    sortBySmallestFirst_Rev,\n    sortByLargestFirst_Rev,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    try {\n      return isInteger(value);\n    } catch (e) {\n      return false;\n    }\n  });\n};\n\nmodule.exports = filterIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": false, "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n    return string.length;\n};\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen2 = (string) => {\n    return string.length;\n};\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen3 = (string) => {\n    return string.length;\n};\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen4 = (string) => {\n    return string.length;\n};\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen5 = (string) => {\n    return string.length;\n};\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen6 = (string) => {\n    return string.length;\n};\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen7 = (string) => {\n    return string.length;\n};\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen8 = (string) => {\n    return string.length;\n};\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen9 = (string) => {\n    return string.length;\n};\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen10 = (string) => {\n    return string.length;\n};\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen11 = (string) => {\n    return string.length;\n};\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen12 = (string) => {\n    return string.length;\n};\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen13 = (string) => {\n    return string.length;\n};\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen14 = (string) => {\n    return string.length;\n};\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen15 = (string) => {\n    return string.length;\n};\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen16 = (string) => {\n    return string.length;\n};\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen17 = (string) => {\n    return string.length;\n};\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen18 = (string) => {\n    return string.length;\n};\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen19 = (string) => {\n    return string.length;\n};\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen20 = (string) => {\n    return string.length;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconsole.log(largestDivisor(15));\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization .\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n    if (n === 0) {\n        return []\n    }\n    const factors = []\n    const factor = Math.sqrt(n)\n    const factorize = (x) => {\n        if (x === 1) {\n            return []\n        }\n        if (x % factor === 0) {\n            return [factor]\n        }\n        let factors = []\n        for (let i = 2; i * i <= x; i++) {\n            if (x % i === 0) {\n                factors = factors.concat([i, x / i])\n            }\n        }\n        if (factors.length === 0) {\n            return []\n        }\n        return factors\n    }\n    const factors = factorize(n)\n    const primeFactors = factors.filter((f) => {\n        return f > 1\n    })\n    return primeFactors.reduce((prev, curr) => {\n        return prev.concat(curr)\n    }, [])\n}\n\nconsole.log(factorize(70))\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t .\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.filter(num => seen.add(num));\n};\n\nconst removeDuplicates2 = (numbers) => {\n  const seen = new Map();\n  return numbers.filter(num => seen.has(num)? seen.get(num) : seen.set(num, 1));\n};\n\nconst removeDuplicates3 = (numbers) => {\n  const seen = new Map();\n  return numbers.filter(num => seen.has(num)? seen.get(num) : seen.set(num, 1));\n};\n\nconst removeDuplicates4 = (numbers) => {\n  const seen = new Map();\n  return numbers.filter(num => seen.has(num)? seen.get(num) : seen.set(num, 1));\n};\n\nconst removeDuplicates5 = (numbers) => {\n  const seen = new Map();\n  return numbers.filter(num => seen.has(num)? seen.get(num) : seen.set(num, 1));\n};\n\nconst removeDuplicates6 = (numbers) => {\n  const seen = new Map();\n  return numbers.filter(num => seen.has(num)? seen.get(num) : seen.set(num, 1));\n};\n\nconst removeDuplicates7 = (numbers) => {\n  const seen = new Map();\n  return numbers.filter(num => seen.has(num)? seen.get(num) : seen.set(num, 1));\n};\n\nconst removeDuplicates8 = (numbers) => {\n  const seen = new Map();\n  return numbers.filter(num => seen.has(num)? seen.get(num) : seen.set(num, 1));\n};\n\nconst removeDuplicates9 = (numbers) => {\n  const seen = new Map();\n  return numbers.filter(num => seen.has(num)? seen.get(num) : seen.set(num, 1));\n};\n\nconst removeDuplicates10 = (numbers) => {\n  const seen = new Map();\n  return numbers.filter(num => seen.has(num)? seen.get(num) : seen.set(num, 1));\n};\n\nconst removeDuplicates11 = (numbers) => {\n  const seen = new Map();\n  return numbers.filter(num => seen.has(num)? seen.get(num) : seen.set(num, 1));\n};\n\nconst removeDuplicates12 = (numbers) => {\n  const seen = new Map();\n  return numbers.filter(num => seen.has(num)? seen.get(num) : seen.set(num, 1));\n};\n\nconst removeDuplicates13 = (numbers) => {\n  const seen = new Map();\n  return numbers.filter(num => seen.has(num)? seen.get(num) : seen.set(num, 1));\n};\n\nconst removeDuplicates14 = (numbers) => {\n  const seen = new Map();\n  return numbers.filter(num => seen.has(num)? seen.get(num) : seen.set(num, 1));\n};\n\nconst removeDuplicates15 = (numbers) => {\n  const seen = new Map();\n  return numbers.filter(num => seen.has(num)? seen.get(num) : seen.set(num, 1));\n};\n\nconst removeDuplicates16 = (numbers) => {\n  const seen = new Map();\n  return numbers.filter(num => seen.has(num)? seen.get(num) : seen.set(num, 1));\n};\n\nconst removeDuplicates17 = (numbers) => {\n  const seen = new Map();\n  return numbers.filter(num => seen.has(num)? seen.get(num) : seen.set(num, 1));\n};\n\nconst removeDuplicates18 = (numbers) => {\n  const seen = new Map();\n  return numbers.filter(num => seen.has(num)? seen.get(num) : seen.set(num, 1));\n};\n\nconst removeDuplicates19 = (numbers) => {\n  const seen = new Map();\n  return numbers.filter(num => seen.has(num)? seen.get(num) : seen.set(num, 1));\n};\n\nconst removeDuplicates20 = (numbers) => {\n  const seen = new Map();\n  return numbers.filter(num => seen.has(num)? seen.get(num) : seen.set(num, 1));\n};\n\nconst removeDuplicates21 = (numbers) => {\n  const seen = new Map();\n  return numbers.filter(num => seen.has(num)? seen.get(num) : seen.set(num, 1));\n};\n\nconst removeDuplicates22 = (numbers) => {\n  const seen = new Map();\n  return numbers.filter(num => seen.has(num)? seen.get(num) : seen.set(num, 1));\n};\n\nconst removeDuplicates23 = (numbers) => {\n  const seen = new Map();\n  return numbers.filter(num => seen.has(num)? seen.get(num) : seen.set(num, 1));\n};\n\nconst removeDuplicates24 = (numbers) => {\n  const seen = new Map();\n  return numbers.filter(num => seen.has(num)? seen.get(num) : seen.set(num, 1));\n};\n\nconst removeDuplicates25 = (numbers) => {\n  const seen = new Map();\n  return numbers.filter(num => seen.has(num)? seen.get(num) : seen.set(num, 1));\n};\n\nconst removeDuplicates26 = (numbers) => {\n  const seen = new Map();\n  return numbers.filter(num => seen.has(num)? seen.get(num) : seen.set(num, 1));\n};\n\nconst removeDuplicates27 = (numbers) => {\n  const seen = new Map();\n  return numbers.filter(num =>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]+/g, (str) => {\n    return str.toUpperCase();\n  });\n};\n\nconst main = () => {\n  const str = prompt(\"Please enter a string: \");\n  console.log(flipCase(str));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  const string = ''\n  strings.forEach( (string) => {\n    string = string.trim()\n    if (string) {\n      string = string.toLowerCase()\n      string = string.replace(/\\s+/g,'')\n      string = `${string} `\n    }\n    string = string.trim()\n    if (string) {\n      string = string.toLowerCase()\n      string = string.replace(/\\s+/g,'')\n      string = `${string}`\n    }\n  })\n  return string\n}\n\n/**\n *\n * @param {string} string\n * @returns {string}\n */\nconst lowercase = (string) => {\n  string = string.trim()\n  string = string.toLowerCase()\n  string = string.replace(/\\s+/g,'')\n  return string\n}\n\n/**\n *\n * @param {string} string\n * @returns {string}\n */\nconst trim = (string) => {\n  string = string.trim()\n  string = string.toLowerCase()\n  string = string.replace(/\\s+/g,'')\n  return string\n}\n\n/**\n *\n * @param {string} string\n * @returns {string}\n */\nconst uppercase = (string) => {\n  string = string.trim()\n  string = string.toUpperCase()\n  string = string.replace(/\\s+/g,'')\n  return string\n}\n\n/**\n *\n * @param {string} string\n * @returns {string}\n */\nconst truncate = (string, length) => {\n  string = string.trim()\n  string = string.toLowerCase()\n  string = string.replace(/\\s+/g,'')\n  return string.slice(0, length)\n}\n\n/**\n *\n * @param {string} string\n * @param {number} length\n * @returns {string}\n */\nconst word = (string, length) => {\n  string = string.trim()\n  string = string.toLowerCase()\n  string = string.replace(/\\s+/g,'')\n  return string.slice(0, length)\n}\n\nmodule.exports = {\n  concatenate,\n  lowercase,\n  trim,\n  uppercase,\n  truncate,\n  word\n}\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix))\n}\n\n/*\n  Create a function that returns a string of a given length.\n  >>> createStringOfLength(1)\n  '1'\n  >>> createStringOfLength(2)\n  '12'\n  >>> createStringOfLength(3)\n  '123'\n  >>> createStringOfLength(4)\n  '1234'\n  >>> createStringOfLength(5)\n  '12345'\n  >>> createStringOfLength(6)\n  '123456'\n  >>> createStringOfLength(7)\n  '1234567'\n  >>> createStringOfLength(8)\n  '12345678'\n  >>> createStringOfLength(9)\n  '123456789'\n  >>> createStringOfLength(10)\n  '1234567890'\n  */\nconst createStringOfLength = (length) => {\n  return Array(length + 1).join('0')\n}\n\n/*\n  Create a function that returns a function that returns a string of a given length.\n  >>> createStringLengthFunction = createStringOfLength\n  >>> createStringLengthFunction(1)(5)\n  '5'\n  >>> createStringLengthFunction(2)(6)\n  '56'\n  >>> createStringLengthFunction(3)(7)\n  '567'\n  >>> createStringLengthFunction(4)(8)\n  '5678'\n  >>> createStringLengthFunction(5)(9)\n  '56789'\n  >>> createStringLengthFunction(6)(10)\n  '567891'\n  >>> createStringLengthFunction(7)(10)\n  '5678910'\n  */\nconst createStringLengthFunction = (length) => (string) => {\n  return createStringOfLength(length)(string)\n}\n\n/*\n  >>> createStringLengthFunction(1)(5)\n  '5'\n  >>> createStringLengthFunction(2)(6)\n  '56'\n  >>> createStringLengthFunction(3)(7)\n  '567'\n  >>> createStringLengthFunction(4)(8)\n  '5678'\n  >>> createStringLengthFunction(5)(9)\n  '56789'\n  >>> createStringLengthFunction(6)(10)\n  '567891'\n  >>> createStringLengthFunction(7)(10)\n  '5678910'\n  */\nconst createStringLengthFunction2 = (length) => (string) => {\n  return createStringOfLength(length)(string)\n}\n\n/*\n  >>> createStringLengthFunction2(1)(5)\n  '5'\n  >>> createStringLengthFunction2(2)(6)\n  '56'\n  >>> createStringLengthFunction2(3)(7)\n  '567'\n  >>> createStringLengthFunction2(4)(8)\n  '5678'\n  >>> createStringLengthFunction2(5)(9)\n  '56789'\n  >>> createStringLengthFunction2(6)(10)\n  '567891'\n  >>> createStringLengthFunction2(7)(10)\n  '5678910'\n  */\nconst createStringLengthFunction3 = (length) => (string) => {\n  return createStringOfLength(length)(string)\n}\n\n/*\n  >>> createStringLengthFunction3(1)(5)\n  '5'\n  >>> createStringLengthFunction3(2)(6)\n  '56'\n  >>> createStringLengthFunction3(3)(7)\n  '567'\n  >>> createStringLengthFunction3(4)(8)\n  '5678'\n  >>> createStringLengthFunction3(5)(9)\n  '56789'\n  >>> createStringLengthFunction3(6)(10)\n  '567891'\n  >>> createStringLengthFunction3(7)(10)\n  '5678910'\n  */\nconst createStringLengthFunction4 = (length) => (string) => {\n  return createStringOfLength(length)(string)\n}\n\n/*\n  >>> createStringLengthFunction4(1)(5)\n  '5'\n  >>> createStringLengthFunction4(2)(6)\n  '56'\n  >>> createStringLengthFunction4(3)(7)\n  '567'\n  >>> createStringLengthFunction4(4)(8)\n  '5678'\n  >>> createStringLengthFunction4(5)(9)\n  '56789'\n  >>> createStringLengthFunction4(6)(10)\n  '567891'\n  >>> createStringLengthFunction4(7)(10)\n  '5678910'\n  */\nconst createStringLengthFunction5 = (length) => (string) => {\n  return createStringOfLength(length)(string)\n}\n\n/*\n  >>> createStringLengthFunction5(1)(5)\n  '5'\n  >>> createStringLengthFunction5(2)(6)\n  '56'\n  >>> createStringLengthFunction5(3)(7)\n  '567'\n  >>> createStringLengthFunction5(4)(8)\n  '5678'\n  >>> createStringLengthFunction5(5)(9)\n  '56789'\n  >>> createStringLengthFunction5(6)(10)\n  '567891'\n  >>> createStringLengthFunction5(7)(10)\n  '5678910'\n  */\nconst createStringLengthFunction6 = (length) => (string) => {\n  return createStringOfLength(length)(string)\n}\n\n/*\n  >>> createStringLengthFunction6(1)(5)\n  '5'\n  >>> createStringLengthFunction6(2)(6)\n  '56'\n  >>> createStringLengthFunction6(3)(7)\n  '567'\n  >>> createStringLengthFunction6(4)(8)\n  '5678'\n  >>> createStringLengthFunction6(5)(9)\n  '56789'\n  >>> createStringLengthFunction6(6)(10)\n  '567891'\n  >>> createStringLengthFunction6(7)(10)\n  '5678910'\n  */\nconst createStringLengthFunction7 = (length) => (string) => {\n  return createStringOfLength(length)(string"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((x) => x >= 0)\n}\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -9, 0, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter((x) => x < 0)\n}\n\n/*\n  >>> getMax([-1, 2, -4, 5, 6])\n  6\n  >>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  9\n  >>> getMax([-1, 2, -4, 5, 6, -7])\n  -7\n  >>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, -3])\n  -3\n  */\nconst getMax = (l) => {\n  return l.reduce((a, b) => {\n    return a > b? a : b\n  })\n}\n\n/*\n  >>> getMin([-1, 2, -4, 5, 6])\n  -1\n  >>> getMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  >>> getMin([-1, 2, -4, 5, 6, -7])\n  -7\n  >>> getMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, -3])\n  -3\n  */\nconst getMin = (l) => {\n  return l.reduce((a, b) => {\n    return a < b? a : b\n  })\n}\n\n/*\n  >>> getSorted([-1, 2, -4, 5, 6])\n  [-1, -4, -5, 2, 6]\n  >>> getSorted([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-1, -3, -4, -5, -10, 0, 1, 2, 3, 9, 123]\n  >>> getSorted([-1, 2, -4, 5, 6, -7])\n  [-1, -4, -5, -7, 2, 6]\n  >>> getSorted([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, -3])\n  [-1, -3, -4, -5, -10, -3, -7, 0, 1, 2, 3, 9, 123]\n  */\nconst getSorted = (l) => {\n  return getPositive(l).concat(getNegative(l)).sort((a, b) => a - b)\n}\n\n/*\n  >>> getUnique([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5, 6]\n  >>> getUnique([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-1, -3, -4, -5, -10, 0, 1, 2, 3, 9, 123]\n  >>> getUnique([-1, 2, -4, 5, 6, -7])\n  [-1, -4, -5, -7, 2, 6]\n  >>> getUnique([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, -3])\n  [-1, -3, -4, -5, -10, -3, -7, 0, 1, 2, 3, 9, 123]\n  */\nconst getUnique = (l) => {\n  return getSorted(l).filter((x, i, arr) => i === 0 || arr[i - 1]!= x)\n}\n\n/*\n  >>> getUnique([-1, 2, -4, 5, 6, -7])\n  [-1, -4, -5, -7, 2, 6]\n  >>> getUnique([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, -3])\n  [-1, -3, -4, -5, -10, -3, -7, 0, 1, 2, 3, 9, 123]\n  */\nconst getUnique2 = (l) => {\n  return getUnique(l.filter((x) => x > 0))\n}\n\n/*\n  >>> getUnique([-1, 2, -4, 5, 6, -7, -3, 5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, -3])\n  [-1, -3, -4, -5, -10, -3, -7, 0, 1, 2, 3, 9, 123]\n  */\nconst getUnique3 = (l) => {\n  return getUnique(l.filter((x) => x < 0))\n}\n\n/*\n  >>> getUnique([-1, 2, -4, 5, 6, -7, -3, 5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, -3])\n  [-1, -3, -4, -5, -10, -3, -7, 0, 1, 2, 3, 9, 123]\n  */\nconst getUnique4 = (l) => {\n  return getUnique(l.filter((x) => x >= 0))\n}\n\n/*\n  >>> getUnique([-1, 2, -4, 5, 6, -7, -3, 5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, -3])\n  [-1, -3, -4, -5, -10, -3"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  let i;\n  for (i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/* Return the largest prime smaller than n.\n  >>> largestPrime(12)\n  3\n  >>> largestPrime(15)\n  5\n  >>> largestPrime(3)\n  2\n  >>> largestPrime(1)\n  1\n  */\nconst largestPrime = (n) => {\n  let i, j, prime, primes = [];\n  for (i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  for (i = 0; i < primes.length; i++) {\n    for (j = i + 1; j < primes.length; j++) {\n      if (primes[i] * primes[j] > n) {\n        prime = Math.max(primes[i], primes[j]);\n        break;\n      }\n    }\n    if (prime!== undefined) {\n      break;\n    }\n  }\n  return prime;\n}\n\nexport { largestPrime, isPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largestPrime, largest"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n    const lngth = xs.length;\n    if (lngth % 2 === 1) {\n        return 0.5;\n    } else {\n        return xs.reduce((prev,  it em, index) =>{\n            return prev + (item * Math.pow(index,index))\n        }, 0) / (lngth / 2);\n    }\n}\n\n/* \n  polynomial fit is a polynomial  with coefficients  xs  and  y.\n  It is fit to xs and y  at point x,\n  returns f(x) = ys[0] + ys[1] * x + ys[2] * x^2 +.... ys[n] * x^n\n  */\nconst polyfit = (ys, xs, x) => {\n    return ys.reduce((prev,  it em, index) =>{\n        returnprev + it * Math.pow(x,index);\n    }, 0);\n}\n\n/*\n  given  coefficients  and  degree  n  it finds  coeffecients for  polynomial  at point x.\n  returns  polynomial with coefficien ts xs  at point x.\n  */ \nconst poly2d = (ys, xs, x) => {\n    return ys.reduce((prev,  it em, index) =>{\n        return prev + (it * Math.pow(x,index));\n    }, 0);\n}\n\n/*\n  Polynomial fit is a polynomial  with coefficients  ys and  degree  n.\n  It is fit to xs and y  at point x,\n  returns f(x) = ys[0] + ys[1] * x + ys[2] * x^2 +.... ys[n] * x^n\n  */\nconst pfit = (ys, xs, x) => {\n    return ys.reduce((prev,  it em, index) =>{\n        returnprev + it * Math.pow(x,index);\n    }, 0);\n}\n\n/*\n  polynomial fit is a polynomial  with coefficients  ys and  degree  n.\n  It is fit to xs and y  at point x,\n  returns f(x) = ys[0] + ys[1] * x + ys[2] * x^2 +.... ys[n] * x^n\n  */\nconst pfit2d = (ys, xs, x) => {\n    return ys.reduce((prev,  it em, index) =>{\n        returnprev + it * Math.pow(x,index);\n    }, 0);\n}\n\n/*\n  returns  polynomial  with coefficien ts xs  at point x.\n  */ \nconst pfit3d = (ys, xs, x) => {\n    return ys.reduce((prev,  it em, index) =>{\n        returnprev + it * Math.pow(x,index);\n    }, 0);\n}\n\n/*\n  Find  coefficien ts of a polynomail  at point x.\n  returns  ys[0] + ys[1] * x + ys[2] * x^2 +.... ys[n] * x^n\n  */ \nconst pfit3d = (ys, xs, x) => {\n    return ys.reduce((prev,  it em, index) =>{\n        returnprev + it * Math.pow(x,index);\n    }, 0);\n}\n\nconst pfit4d = (ys, xs, x) => {\n    return ys.reduce((prev,  it em, index) =>{\n        returnprev + it * Math.pow(x,index);\n    }, 0);\n}\n\n/*\n  Find  coefficien ts of a polynomail  at point x.\n  returns  ys[0] + ys[1] * x + ys[2] * x^2 +.... ys[n] * x^n\n  */ \nconst pfit4d = (ys, xs, x) => {\n    return ys.reduce((prev,  it em, index) =>{\n        returnprev + it * Math.pow(x,index);\n    }, 0);\n}\n\n\n\n/*\n  Find  coefficien ts of a polynomail  at point x.\n  returns  ys[0] + ys[1] * x + ys[2] * x^2 +.... ys[n] * x^n\n  */ \nconst pfit4d = (ys, xs, x) => {\n    return ys.reduce((prev,  it em, index) =>{\n        returnprev + it * Math.pow(x,index);\n    }, 0);\n}\n\n\n/*\n  Find  coefficien ts of a polynomail  at point x.\n  returns  ys[0] + ys[1] * x + ys[2] * x^2 +.... ys[n] * x^n"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const lCopy = Array.from(l);\n  const lAux = [...lCopy];\n  lAux.sort((a, b) => a - b);\n  const lCopyAux = lAux.map(x => x);\n  let i = 0;\n  while (i < l.length - 2) {\n    const t = lCopyAux[i];\n    const n = lCopyAux[i + 3];\n    const lCopyAuxCopy = lCopyAux.slice(0);\n    lCopyAuxCopy.splice(i, 3, t, n);\n    lCopyAux = lCopyAuxCopy;\n    i = i + 4;\n  }\n  l = lCopy.map(x => x);\n  return l;\n};\n\nmodule.exports = sortThird;<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nexport default maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizz = 0;\n  let buzz = 0;\n  while (n > 0) {\n    if (n % 3 === 0) {\n      fizz++;\n    }\n    if (n % 5 === 0) {\n      buzz++;\n    }\n    n--;\n  }\n  return fizz + buzz;\n};\n\nexport {fizzBuzz};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = l.filter(el => el % 2 === 0);\n  const odd = l.filter(el => el % 2!== 0);\n  const even_sorted = even.sort();\n  const odd_sorted = odd.sort();\n  const even_sorted_indexed = even_sorted.map(el => {\n    const index = even.indexOf(el);\n    return index;\n  });\n  const odd_sorted_indexed = odd_sorted.map(el => {\n    const index = odd.indexOf(el);\n    return index;\n  });\n  return even_sorted_indexed.concat(odd_sorted_indexed);\n};\n\nmodule.exports = sortEven;\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math .min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n  var deco = [], gr oups = [];\n  for (constgroup of groups) {\n    var group = s.slice(1, group.leng th).split('');\n    for (consto of group) {\n      deco. push(o);\n    }\n  }\n  for (constgroup of groups) {\n    if (group.leng th == 3) {\n      gr oups.push(deco.slice(3 * group.position, group.position + 3));\n      deco. slice(3 * group.position, group.position + 3);\n    }\n  }\n  return gr oups.join(' ');\n}\n\n/*\n  prints string with cyclic encoding.\n  */\nconst encode = (s) => {\n  console.log(encodeCyclic(s));\n}\n\n/*\n  prints string with cyclic decoding.\n  */\nconst decode = (s) => {\n  console.log(decodeC(s));\n}\n\n/*\n  prints all test strings.\n  */\nconst encode_decode = (s) => {\n  encode(s);\n  decodeC(s);\n  console.log('\\n\\n');\n}\n\nencode_decode('Hello World!');\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let f = 2;\n  let p = 3;\n  let p_1 = 2;\n  while (p < n) {\n    p_1 = p;\n    p *= 2;\n    f += p_1;\n  }\n  return f;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sortedList = l.sort((a, b) => {\n    return a - b;\n  });\n  let counter = 1;\n  let sum = 0;\n  for (let i = 0; i < sortedList.length - 2; i++) {\n    if (sortedList[i + 1] - sortedList[i] === 0) {\n      sum += sortedList[i];\n      counter++;\n    } else {\n      if (sum === 0) {\n        return true;\n      } else {\n        sum = 0;\n        counter = 1;\n      }\n    }\n  }\n  if (sum === 0) {\n    return true;\n  }\n  return false;\n};\n\nexport default triplesSumToZero;<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n    n > 1\n    n == 0\n    n > 0\n  }\n  */\n  int collisions = 0;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < n; j++) {\n      if (i!= j) {\n        if (carRaceCollis(i, j)) {\n          collisions++;\n        }\n      }\n    }\n  }\n  return collisions;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented  by 1 .\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let incrList = [];\n  for (let i = 0; i < l.length; i++) {\n    incrList.push(l[i] + 1);\n  }\n  return incrList;\n};\n\nmodule.exports = incrList;\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    let result = true;\n    l.forEach((x) => {\n        let y = l.filter((y) => x + y!== 0);\n        if (y.length === 2) {\n            result = false;\n        }\n    });\n    return result;\n};\n\n/*\n  findLargestSum takes a list of ints a s an input and returns the largest sum in the list.\n  >>> findLargestSum([1, 2, 3, 7])\n  13\n  >>> findLargestSum([-3, 4, -5, 3, 5, 7])\n  21\n  >>> findLargestSum([1, 2, 3, 7, 9, 9, 9])\n  27\n  >>> findLargestSum([1, 2, 3, 7, 9, 9, 9, 9])\n  27\n  >>> findLargestSum([1, 2, 3, 7, 9, 9, 9, 9, 9])\n  27\n  >>> findLargestSum([1, 2, 3, 7, 9, 9, 9, 9, 9, 9])\n  27\n  >>> findLargestSum([1, 2, 3, 7, 9, 9, 9, 9, 9, 9, 9])\n  27\n  >>> findLargestSum([1, 2, 3, 7, 9, 9, 9, 9, 9, 9, 9, 9])\n  27\n  >>> findLargestSum([1, 2, 3, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9])\n  27\n  >>> findLargestSum([1, 2, 3, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9])\n  27\n  >>> findLargestSum([1, 2, 3, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9])\n  27\n  >>> findLargestSum([1, 2, 3, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9])\n  27\n  >>> findLargestSum([1, 2, 3, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9])\n  27\n  >>> findLargestSum([1, 2, 3, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9])\n  27\n  */\nconst findLargestSum = (l) => {\n    let result = 0;\n    l.forEach((x) => {\n        result = x > result? x : result;\n    });\n    return result;\n};\n\nmodule.exports = {\n    pairsSumToZero,\n    findLargestSum\n};\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let s = \"\"\n  while (x > 0) {\n    s = `${x % base}${s}`\n    x = Math.floor(x / base)\n  }\n  return s\n}\n\n/*\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst convertToBase = (x, base) => {\n  if (x < base) {\n    return x\n  }\n  let i = 1\n  while (x > 0) {\n    x = x % base\n    i++\n  }\n  return i\n}\n\n// \n\n//\nconst base10 = (n) => {\n  if (n >= 0) {\n    return changeBase(n, 10)\n  } else {\n    return \"-\" + changeBase(-n, 10)\n  }\n}\n\n//\n\nconst base2 = (n) => {\n  return changeBase(n, 2)\n}\n\n//\n\nconst base16 = (n) => {\n  return changeBase(n, 16)\n}\n\n//\n\nconst base8 = (n) => {\n  return changeBase(n, 8)\n}\n\n//\n\nconst base4 = (n) => {\n  return changeBase(n, 4)\n}\n\n//\n\nconst base3 = (n) => {\n  return changeBase(n, 3)\n}\n\n//\n\nconst base7 = (n) => {\n  return changeBase(n, 7)\n}\n\n//\n\nconst base10toBase2 = (n) => {\n  if (n >= 0) {\n    return convertToBase(n, 2)\n  } else {\n    return \"-\" + convertToBase(-n, 2)\n  }\n}\n\n//\n\nconst base10toBase4 = (n) => {\n  if (n >= 0) {\n    return convertToBase(n, 4)\n  } else {\n    return \"-\" + convertToBase(-n, 4)\n  }\n}\n\n//\n\nconst base10toBase8 = (n) => {\n  if (n >= 0) {\n    return convertToBase(n, 8)\n  } else {\n    return \"-\" + convertToBase(-n, 8)\n  }\n}\n\n//\n\nconst base10toBase16 = (n) => {\n  if (n >= 0) {\n    return convertToBase(n, 16)\n  } else {\n    return \"-\" + convertToBase(-n, 16)\n  }\n}\n\n//\n\nconst base10toBase3 = (n) => {\n  if (n >= 0) {\n    return convertToBase(n, 3)\n  } else {\n    return \"-\" + convertToBase(-n, 3)\n  }\n}\n\n//\n\nconst base10toBase7 = (n) => {\n  if (n >= 0) {\n    return convertToBase(n, 7)\n  } else {\n    return \"-\" + convertToBase(-n, 7)\n  }\n}\n\n//\n\nconst base2toBase10 = (n) => {\n  if (n >= 0) {\n    return convertToBase(n, 10)\n  } else {\n    return \"-\" + convertToBase(-n, 10)\n  }\n}\n\n//\n\nconst base8toBase10 = (n) => {\n  if (n >= 0) {\n    return convertToBase(n, 10)\n  } else {\n    return \"-\" + convertToBase(-n, 10)\n  }\n}\n\n//\n\nconst base4toBase10 = (n) => {\n  if (n >= 0) {\n    return convertToBase(n, 10)\n  } else {\n    return \"-\" + convertToBase(-n, 10)\n  }\n}\n\n//\n\nconst base3toBase10 = (n) => {\n  if (n >= 0) {\n    return convertToBase(n, 10)\n  } else {\n    return \"-\" + convertToBase(-n, 10)\n  }\n}\n\n//\n\nconst base7toBase10 = (n) => {\n  if (n >= 0) {\n    return convertToBase(n, 10)\n  } else {\n    return \"-\" + convertToBase(-n, 10)\n  }\n}\n\n//\n\nconst base10toBase10 = (n) => {\n  if (n >= 0) {\n    return convertToBase(n, 10)\n  } else {\n    return \"-\" + convertToBase(-n, 10)\n  }\n}\n\n//\n\nconst base10toBase3 = (n) => {\n  if (n >= 0) {\n    return convertToBase(n, 3)\n  } else {\n    return \"-\" + convertToBase(-n, 3)\n  }\n}\n\n//\n\nconst base10toBase7 = (n) => {\n  if (n >= 0) {\n    return convertToBase(n, 7)\n  } else {\n    return \"-\" + convertToBase(-n, 7)\n  }\n}\n\n//\n\nconst base10toBase16 = (n) => {\n  if (n >= 0) {\n    return convertToBase(n, 16)\n  } else {\n    return \"-\" + convertToBase(-n, 16)\n  }\n}\n\n//\n\nconst base10toBase8 = (n) => {\n  if (n >= 0) {\n    return convertToBase(n, 8)\n  } else {\n    return \"-\" + convertToBase(-n, 8)\n  }\n}\n\n//\n\nconst base10toBase4 = (n) => {\n  if (n >= 0) {\n    return convertToBase(n, 4)\n  } else {\n    return \"-\" + convertToBase(-n, 4)\n  }\n}\n\n//\n\nconst base10toBase2 = (n) => {\n  if (n"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n}\n\n/*Given a triangle, the area of the triangle is calculated.\n  >>> triangleArea(1, 2, 3)\n  3.0\n  */\nconst triangleArea = (a, b, c) => {\n  return triangleArea(a + b, c) - triangleArea(a, b + c) + triangleArea(a + b, c + a) - triangleArea(a + b, b + c + a);\n}\n\n/*Given a triangle, the height of the triangle is calculated.\n  >>> triangleHeight(1, 2, 3)\n  2.0\n  */\nconst triangleHeight = (a, b, c) => {\n  return Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2) - 2 * b * c) / 2;\n}\n\n/*Given a triangle, the hypotenuse of the triangle is calculated.\n  >>> triangleHypotenuse(1, 2, 3)\n  3.0\n  */\nconst triangleHypotenuse = (a, b, c) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2));\n}\n\n/*Given two triangles, the distance between the two is calculated.\n  >>> distance(1, 2, 3, 4)\n  2.0\n  */\nconst distance = (a, b, c, d) => {\n  return Math.abs(triangleArea(a, b, c) + triangleArea(a, b, d) - triangleArea(a, b, c, d) - triangleArea(c, d, a) + triangleArea(c, d, b) - triangleArea(c, d, b, a)) / 4;\n}\n\n/*Given two triangles, the dihedral angle between the two is calculated.\n  >>> dihedralAngle(1, 2, 3, 4)\n  3.0\n  */\nconst dihedralAngle = (a, b, c, d) => {\n  return Math.acos((triangleArea(a, b, c) + triangleArea(a, b, d) - triangleArea(a, b, c, d) - triangleArea(c, d, a) + triangleArea(c, d, b)) / (2 * triangleArea(a, b, c) * triangleArea(c, d, a)));\n}\n\n/*Given two triangles, the altitude of the higher triangle is calculated.\n  >>> altitude(1, 2, 3, 4)\n  2.0\n  */\nconst altitude = (a, b, c, d) => {\n  return triangleHeight(a, b, c) + triangleHeight(a, b, d) - triangleHeight(c, d, a) - triangleHeight(c, d, b);\n}\n\n/*Given two triangles, the base of the higher triangle is calculated.\n  >>> base(1, 2, 3, 4)\n  4.0\n  */\nconst base = (a, b, c, d) => {\n  return triangleHypotenuse(a, b, c) + triangleHypotenuse(a, b, d) - triangleHypotenuse(c, d, a) - triangleHypotenuse(c, d, b);\n}\n\n/*Given two triangles, the area of the higher triangle is calculated.\n  >>> area(1, 2, 3, 4)\n  3.0\n  */\nconst area = (a, b, c, d) => {\n  return triangleArea(a, b, c) + triangleArea(c, d, a) + triangleArea(d, b, c);\n}\n\n/*Given two triangles, the overlap of the higher triangle is calculated.\n  >>> overlap(1, 2, 3, 4)\n  0.5\n  */\nconst overlap = (a, b, c, d) => {\n  return (area(a, b, c) - area(a, b, d) - area(c, d, a) + area(c, d, b)) / 2;\n}\n\n/*Given two triangles, the distance between the higher triangle is calculated.\n  >>> distance(1, 2, 3, 4)\n  2.0\n  */\nconst distance = (a, b, c, d) => {\n  return distance(a, b, c, d) + overlap(a, b, c, d);\n}\n\n/*Given two triangles, the dihedral angle between the higher triangle is calculated.\n  >>> dihedralAngle(1, 2, 3, 4)\n  0.0\n  */\nconst dihedralAngle = (a, b, c, d) => {\n  return dihedralAngle(a, b, c, d) + overlap(a, b, c, d);\n}\n\n/*Given two triangles, the altitude of the higher triangle is calculated.\n  >>> altitude(1, 2, 3, 4)\n  2.0\n  */\nconst altitude = (a, b, c, d) => {\n  return altitude(a, b, c, d) + overlap(a, b, c, d);\n}\n\n/*Given two triangles, the base of the higher triangle is calculated.\n  >>> base(1, 2, 3, 4)\n  4.0\n  */\nconst base = (a, b, c, d) => {\n  return base(a, b, c, d) + overlap(a, b, c, d);\n}\n\n/*Given two triangles, the area of the higher triangle is calculated.\n  >>> area(1, 2, 3, 4)\n  3.0\n  */\nconst area = (a, b, c, d) => {\n  return area(a, b, c, d) + overlap(a, b, c, d);\n}\n\n/*Given two triangles, the overlap of the higher triangle is calculated.\n  >>> overlap(1, 2, 3, 4)\n  0.5\n  */\nconst overlap = (a, b, c, d) => {\n  return overlap(a, b, c, d) + overlap(a, b, c, d);\n}\n\n/*Given two triangles, the distance between the higher triangle is calculated.\n  >>> distance(1, 2, 3, 4)\n  2.0\n  */\nconst distance = (a, b, c, d) => {\n  return distance(a"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconst fib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\nconst fib2 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\nconst fib3 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib3(n - 1) + fib3(n - 2) + fib3(n - 3)\n}\n\nconst fib5 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5)\n}\n\nconst fib6 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4) + fib6(n - 5) + fib6(n - 6)\n}\n\nconst fib7 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4) + fib7(n - 5) + fib7(n - 6) + fib7(n - 7)\n}\n\nconst fib8 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4) + fib8(n - 5) + fib8(n - 6) + fib8(n - 7) + fib8(n - 8)\n}\n\nconst fib9 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib9(n - 1) + fib9(n - 2) + fib9(n - 3) + fib9(n - 4) + fib9(n - 5) + fib9(n - 6) + fib9(n - 7) + fib9(n - 8) + fib9(n - 9)\n}\n\nconst fib10 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib10(n - 1) + fib10(n - 2) + fib10(n - 3) + fib10(n - 4) + fib10(n - 5) + fib10(n - 6) + fib10(n - 7) + fib10(n - 8) + fib10(n - 9) + fib10(n - 10)\n}\n\nconst fib11 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib11(n - 1) + fib11(n - 2) + fib11(n - 3) + fib11(n - 4) + fib11(n - 5) + fib11(n - 6) + fib11(n - 7) + fib11(n - 8) + fib11(n - 9) + fib11(n - 10) + fib11(n - 11)\n}\n\nconst fib12 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib12(n - 1) + fib12(n - 2) + fib12(n - 3) + fib12(n - 4) + fib12(n - 5) + fib12(n - 6) + fib12(n - 7) + fib12(n - 8) + fib12(n - 9) + fib12(n - 10) + fib12(n - 11) + fib12(n - 12)\n}\n\nconst fib13 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib13(n - 1) + fib13(n - 2) + fib13(n - 3) + fib13(n - 4) + fib13(n - 5) + fib13(n - 6) + fib13(n - 7) + fib13(n - 8) + fib13(n - 9) + fib13(n - 10) + fib13(n - 11) + fib13(n - 12) + fib13(n - 13)\n}\n\nconst fib14 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib14(n - 1) + fib14(n - 2) + fib14(n - 3) + fib14(n - 4) + fib14(n - 5) + fib14(n - 6) + fib14(n - 7) + fib14(n - 8) + fib14(n - 9) + fib14(n - 10) + fib14(n - 11) + fib14(n - 12) + fib14(n - 13) + fib14(n - 14)\n}\n\nconst fib15 = (n) =>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let half = Math.floor(l.length / 2);\n  return Math.floor((l[half] + l[l.length - 1]) / 2);\n};\n\n/*Return the smallest element of list l.\n  >>> smallest([4, 2, 3, 6, 3])\n  2\n  >>> smallest([5, 2, 1, 3])\n  1\n  >>> smallest([3, 2, 3])\n  2\n  */\nconst smallest = (l) => {\n  return l[0];\n};\n\n/*Return the largest element of list l.\n  >>> largest([4, 2, 3, 6, 3])\n  6\n  >>> largest([5, 2, 1, 3])\n  3\n  >>> largest([3, 2, 3])\n  3\n  */\nconst largest = (l) => {\n  return l[l.length - 1];\n};\n\nmodule.exports = {\n  average,\n  median,\n  smallest,\n  largest\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    if (text === undefined || text === '') {\n        return true;\n    }\n    var reversed = reverseString(text);\n    return (reversed === text);\n};\n\n/*\n  Reverse a given string\n  >>> reverseString('')\n  ''\n  >>> reverseString('abc')\n  'cba'\n  >>> reverseString('aa')\n  'aa'\n  >>> reverseString('aaaa')\n  'aaaa'\n  >>> reverseString('abcdefg')\n  'fgabcde'\n  */\nconst reverseString = (text) => {\n    if (text === undefined || text === '') {\n        return text;\n    }\n    var reversed = '';\n    for (var i = text.length - 1; i >= 0; i--) {\n        reversed += text[i];\n    }\n    return reversed;\n};\n\n/*\n  Check if given string is a palindromic in a given range\n  >>> isPalindrome('abc', 1, 3)\n  true\n  >>> isPalindrome('abc', 2, 3)\n  false\n  >>> isPalindrome('abc', 1, 2)\n  false\n  >>> isPalindrome('abc', 1, 3)\n  true\n  >>> isPalindrome('abca', 1, 3)\n  false\n  >>> isPalindrome('abca', 1, 4)\n  true\n  >>> isPalindrome('abca', 2, 4)\n  false\n  >>> isPalindrome('abca', 3, 4)\n  true\n  >>> isPalindrome('abca', 2, 5)\n  false\n  >>> isPalindrome('abc', 1, 2)\n  true\n  >>> isPalindrome('abc', 1, 3)\n  true\n  >>> isPalindrome('abc', 1, 4)\n  true\n  >>> isPalindrome('abc', 2, 5)\n  true\n  >>> isPalindrome('abc', 3, 5)\n  true\n  >>> isPalindrome('abc', 1, 3)\n  true\n  >>> isPalindrome('abc', 1, 4)\n  true\n  >>> isPalindrome('abc', 2, 5)\n  true\n  >>> isPalindrome('abc', 3, 5)\n  true\n  >>> isPalindrome('abca', 1, 4)\n  true\n  >>> isPalindrome('abca', 1, 5)\n  false\n  >>> isPalindrome('abca', 2, 5)\n  true\n  >>> isPalindrome('abca', 3, 5)\n  true\n  >>> isPalindrome('abca', 4, 5)\n  false\n  >>> isPalindrome('abca', 1, 6)\n  false\n  >>> isPalindrome('abca', 2, 6)\n  false\n  >>> isPalindrome('abca', 3, 6)\n  false\n  >>> isPalindrome('abc', 1, 2)\n  false\n  >>> isPalindrome('abc', 1, 3)\n  true\n  >>> isPalindrome('abc', 1, 4)\n  true\n  >>> isPalindrome('abc', 2, 5)\n  true\n  >>> isPalindrome('abc', 3, 5)\n  true\n  >>> isPalindrome('abca', 1, 5)\n  true\n  >>> isPalindrome('abca', 1, 6)\n  false\n  >>> isPalindrome('abca', 2, 6)\n  false\n  >>> isPalindrome('abca', 3, 6)\n  false\n  >>> isPalindrome('abca', 4, 6)\n  false\n  */\nconst isPalindromeInRange = (text, start, end) => {\n    if (text === undefined || text === '' || start > end || start < 0 || end > text.length || start > text.length || end < 0) {\n        return false;\n    }\n    var reversed = reverseString(text.slice(start, end + 1));\n    return (reversed === text);\n};\n\n/*\n  >>> isPalindrome('abc', 1, 2)\n  false\n  >>> isPalindrome('abc', 1, 3)\n  true\n  >>> isPalindrome('abc', 1, 4)\n  true\n  >>> isPalindrome('abc', 2, 5)\n  false\n  >>> isPalindrome('abca', 1, 4)\n  true\n  >>> isPalindrome('abca', 1, 5)\n  false\n  >>> isPalindrome('abca', 2, 5)\n  true\n  >>> isPalindrome('abca', 3, 5)\n  true\n  >>> isPalindrome('abca', 4, 5)\n  false\n  >>> isPalindrome('abca', 1, 6)\n  false\n  >>> isPalindrome('abca', 2, 6)\n  false\n  >>> isPalindrome('abca', 3, 6)\n  false\n  >>> isPalindrome('abca', 4, 6)\n  false\n  >>> isPalindrome('abc', 1, 3)\n  true\n  >>> isPalindrome('abc', 1, 4)\n  true\n  >>> isPalindrome('abc', 2, 5)\n  true\n  >>> isPalindrome('abc', 3, 5)\n  true\n  >>> isPalindrome('abca', 1, 5)\n  true\n  >>> isPalindrome('abca', 1, 6)\n  false\n  >>> isPalindrome('abca', 2, 6)\n  false\n  >>> isPalindrome('abca', 3, 6)\n  false\n  >>> isPalindrome('abca', 4, 6)\n  false\n  */\nconst isPalindrome = (text, start, end) => {\n    if (text === undefined || text === '' || start > end || start < 0 || end > text.length || start > text.length || end < 0) {\n        return false;\n    }\n    var reversed = reverseString(text.slice(start, end + 1));\n    return (reversed === text);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of nume rics) .\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (be aware of nume rics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n    const d = n % p;\n    return d? d >= p? d - p : d : d;\n};\n\n/**\n * Return the inverse of n modulo p\n *\n * @param n\n * @param p\n */\nconst invp = (n, p) => {\n    return modp(n, p)? modp(p - n, p) : n;\n};\n\nexport default { modp, invp };\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n  let cn = [];\n  s.split(\"\").forEach(\n    c => cn.push(\n      ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n    )\n  );\n  return \" \" + cn.join(\" \");\n}\n\nconst encode =(s) => {\n  let cn = [];\n  s.split(\"\").forEach(\n    c => cn.push(\n      ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n    )\n  );\n  return \" \" + cn.join(\" \");\n}\n\nconst decode =(s) =>{\n  let cn = [];\n  s.split(\"\").forEach(\n    c => cn.push(\n      ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n    )\n  );\n  return \" \" + cn.join(\" \");\n}\n\nconst decode_and_encode =(s) => {\n  let cn = [];\n  s.split(\"\").forEach(\n    c => cn.push(\n      ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n    )\n  );\n  return \" \" + cn.join(\" \");\n}\n\nconst decode_and_encode_shift =(s) => {\n  let cn = [];\n  s.split(\"\").forEach(\n    c => cn.push(\n      ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n    )\n  );\n  return \" \" + cn.join(\" \");\n}\n\nconst decode_and_encode_shift_2 =(s) => {\n  let cn = [];\n  s.split(\"\").forEach(\n    c => cn.push(\n      ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n    )\n  );\n  return \" \" + cn.join(\" \");\n}\n\nconst decode_and_encode_shift_3 =(s) => {\n  let cn = [];\n  s.split(\"\").forEach(\n    c => cn.push(\n      ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n    )\n  );\n  return \" \" + cn.join(\" \");\n}\n\nconst decode_and_encode_shift_4 =(s) => {\n  let cn = [];\n  s.split(\"\").forEach(\n    c => cn.push(\n      ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n    )\n  );\n  return \" \" + cn.join(\" \");\n}\n\nconst decode_and_encode_shift_5 =(s) => {\n  let cn = [];\n  s.split(\"\").forEach(\n    c => cn.push(\n      ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n    )\n  );\n  return \" \" + cn.join(\" \");\n}\n\nconst decode_and_encode_shift_6 =(s) => {\n  let cn = [];\n  s.split(\"\").forEach(\n    c => cn.push(\n      ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n    )\n  );\n  return \" \" + cn.join(\" \");\n}\n\nconst decode_and_encode_shift_7 =(s) => {\n  let cn = [];\n  s.split(\"\").forEach(\n    c => cn.push(\n      ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n    )\n  );\n  return \" \" + cn.join(\" \");\n}\n\nconst decode_and_encode_shift_8 =(s) => {\n  let cn = [];\n  s.split(\"\").forEach(\n    c => cn.push(\n      ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n    )\n  );\n  return \" \" + cn.join(\" \");\n}\n\nconst decode_and_encode_shift_9 =(s) => {\n  let cn = [];\n  s.split(\"\").forEach(\n    c => cn.push(\n      ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n    )\n  );\n  return \" \" + cn.join(\" \");\n}\n\nconst decode_and_encode_shift_10 =(s) => {\n  let cn = [];\n  s."}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let newText = text;\n  for (let i = 0; i < vowels.length; i++) {\n    newText = newText.replace(vowels[i], '');\n  }\n  return newText;\n};\n\n/*\n  reverse is a function that take a str ing and returns str ing reversed.\n  >>> reverse('')\n  ''\n  >>> reverse(\"abcdef\")\n  'fedcba'\n  >>> reverse(\"ABCDEF\")\n  'FEDCBA'\n  */\nconst reverse = (text) => {\n  return text.split('').reverse().join('');\n};\n\n/*\n  getLineNumber is a function that take a str ing and return int with number of line.\n  >>> getLineNumber('')\n  0\n  >>> getLineNumber('abcd\\nghij')\n  2\n  >>> getLineNumber('abcd\\nghij\\nklm')\n  3\n  >>> getLineNumber('abcd\\nghij\\nklm\\nmnp')\n  4\n  >>> getLineNumber('abcd\\nghij\\nklm\\nmnp\\nqrst')\n  5\n  >>> getLineNumber('abcd\\nghij\\nklm\\nmnp\\nqrst\\nuvw')\n  6\n  >>> getLineNumber('abcd\\nghij\\nklm\\nmnp\\nqrst\\nuvw\\nxzy')\n  7\n  >>> getLineNumber('abcdef')\n  1\n  */\nconst getLineNumber = (text) => {\n  let currentLine = 0;\n  const lines = text.split('\\n');\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length === 0) {\n      currentLine++;\n    }\n  }\n  return currentLine;\n};\n\n/*\n  getNumberOfLine is a function that take a str ing and return int with number of line.\n  >>> getNumberOfLine('')\n  0\n  >>> getNumberOfLine('abcd\\nghij\\nklm\\nmnp\\nqrst\\nuvw\\nxzy')\n  7\n  >>> getNumberOfLine('abcd\\nghij\\nklm\\nmnp\\nqrst\\nuvw')\n  6\n  >>> getNumberOfLine('abcd\\nghij\\nklm\\nmnp\\nqrst')\n  5\n  >>> getNumberOfLine('abcd\\nghij\\nklm\\nmnp')\n  4\n  >>> getNumberOfLine('abcd\\nghij\\nklm')\n  3\n  >>> getNumberOfLine('abcd\\nghij')\n  2\n  >>> getNumberOfLine('abcd')\n  1\n  */\nconst getNumberOfLine = (text) => {\n  let currentLine = 0;\n  const lines = text.split('\\n');\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length === 0) {\n      currentLine++;\n    }\n  }\n  return currentLine;\n};\n\n/*\n  stringIndex is a function that take a str ing and return int with index of char.\n  >>> stringIndex('abcd', 'c')\n  1\n  >>> stringIndex('abcd', 'z')\n  -1\n  >>> stringIndex('abcd', 'a')\n  0\n  >>> stringIndex('abcd', 'ab')\n  -1\n  >>> stringIndex('abcd', 'aa')\n  -1\n  >>> stringIndex('abcd', 'e')\n  1\n  >>> stringIndex('abcd', 'e')\n  1\n  >>> stringIndex('abcd', 'f')\n  2\n  >>> stringIndex('abcd', 'a', 1)\n  1\n  >>> stringIndex('abcd', 'e', 1)\n  1\n  >>> stringIndex('abcd', 'e', 2)\n  -1\n  >>> stringIndex('abcd', 'f', 2)\n  2\n  >>> stringIndex('abcd', 'a', 2)\n  2\n  >>> stringIndex('abcd', 'a', 3)\n  -1\n  >>> stringIndex('abcd', 'a', 4)\n  -1\n  */\nconst stringIndex = (text, char, index) => {\n  const charIndex = text.indexOf(char, index);\n  if (charIndex === -1) {\n    return -1;\n  } else {\n    return charIndex;\n  }\n};\n\n/*\n  getFirstOccur is a function that take a str ing and return int with index of char.\n  >>> getFirstOccur('abcd', 'a')\n  0\n  >>> getFirstOccur('abcd', 'c')\n  -1\n  >>> getFirstOccur('abcd', 'c')\n  1\n  >>> getFirstOccur('abcd', 'c')\n  1\n  >>> getFirstOccur('abcd', 'a')\n  0\n  >>> getFirstOccur('abcd', 'e')\n  -1\n  >>> getFirstOccur('abcd', 'e')\n  -1\n  >>> getFirstOccur('abcd', 'e')\n  1\n  >>> getFirstOccur('abcd', 'f')\n  2\n  >>> getFirstOccur('abcd', 'a', 1)\n  0\n  >>> getFirstOccur('abcd', 'e', 1)\n  1\n  >>> getFirstOccur('abcd', 'e', 2)\n  -1\n  >>> getFirstOccur('abcd', 'f', 2)\n  2\n  >>> getFirstOccur('abcd', '"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n    const i = l.length - 1\n    while (i >= 0 && l[i] <= t) {\n        i--\n    }\n    return i < 0\n}\n\n/* Return the nth largest number in the list.\n  >>> nthLargest([1, 3, 2, 1])\n  3\n  >>> nthLargest([1, 3, 2, 1, 2])\n  3\n  >>> nthLargest([1, 3, 2, 1, 2, 3])\n  3\n  >>> nthLargest([1, 3, 2, 1, 2, 3, 4])\n  4\n  */\nconst nthLargest = (l, n) => {\n    const size = l.length\n    const result = l.slice(0, n).sort((a, b) => b - a)[0]\n    if (size === 1) {\n        return result\n    }\n    const pivot = l.slice(n - 1, size).sort((a, b) => a - b)[0]\n    return belowThreshold(l, result)? pivot : result\n}\n\n/* Return the nth smallest number in the list.\n  >>> nthSmallest([1, 3, 2, 1])\n  1\n  >>> nthSmallest([1, 3, 2, 1, 2])\n  1\n  >>> nthSmallest([1, 3, 2, 1, 2, 3])\n  1\n  >>> nthSmallest([1, 3, 2, 1, 2, 3, 4])\n  1\n  */\nconst nthSmallest = (l, n) => {\n    const size = l.length\n    const result = l.slice(0, n).sort((a, b) => a - b)[n - 1]\n    if (size === 1) {\n        return result\n    }\n    const pivot = l.slice(n, size).sort((a, b) => b - a)[0]\n    return belowThreshold(l, result)? pivot : result\n}\n\n/* Return the number of numbers in the list that are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  2\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  0\n  */\nconst countBelowThreshold = (l, t) => {\n    const size = l.length\n    let count = 0\n    while (size--) {\n        if (l[size] <= t) {\n            count++\n        }\n    }\n    return count\n}\n\n/* Return the number of numbers in the list that are above threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  0\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  2\n  */\nconst countAboveThreshold = (l, t) => {\n    const size = l.length\n    let count = 0\n    while (size--) {\n        if (l[size] > t) {\n            count++\n        }\n    }\n    return count\n}\n\n/* Return the sum of the numbers in the list that are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  11\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  0\n  */\nconst sumBelowThreshold = (l, t) => {\n    const size = l.length\n    let sum = 0\n    while (size--) {\n        if (l[size] <= t) {\n            sum += l[size]\n        }\n    }\n    return sum\n}\n\n/* Return the sum of the numbers in the list that are above threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  0\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  100\n  */\nconst sumAboveThreshold = (l, t) => {\n    const size = l.length\n    let sum = 0\n    while (size--) {\n        if (l[size] > t) {\n            sum += l[size]\n        }\n    }\n    return sum\n}\n\n/* Return the average of the numbers in the list that are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  5.0\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  0.0\n  */\nconst averageBelowThreshold = (l, t) => {\n    const size = l.length\n    let sum = 0\n    while (size--) {\n        if (l[size] <= t) {\n            sum += l[size]\n        }\n    }\n    return sum / size\n}\n\n/* Return the average of the numbers in the list that are above threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  0.0\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  7.0\n  */\nconst averageAboveThreshold = (l, t) => {\n    const size = l.length\n    let sum = 0\n    while (size--) {\n        if (l[size] > t) {\n            sum += l[size]\n        }\n    }\n    return sum / size\n}\n\n/* Return the median of the numbers in the list that are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  4\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  10\n  */\nconst medianBelowThreshold = (l, t) => {\n    const size = l.length\n    let sum = 0\n    while (size--) {\n        if (l[size] <= t) {\n            sum += l[size]\n        }\n    }\n    return sum / (size + 1)\n}\n\n/* Return the median of the numbers in the list that are above threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  10\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  4\n  */\nconst medianAboveThreshold = (l, t) => {\n    const size"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y\n}\n\n/**\n  * Subtract two numbers x and y\n  >>> subtract(2, 3)\n  -1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  return x - y\n}\n\n/**\n  * Multiplies two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  21\n  */\nconst multiply = (x, y) => {\n  return x * y\n}\n\n/**\n  * Divides two numbers x and y\n  >>> divide(2, 3)\n  0.5\n  >>> divide(5, 7)\n  2.5\n  */\nconst divide = (x, y) => {\n  return x / y\n}\n\n/**\n  * Converts a number to a string\n  >>> to_string(2)\n  '2'\n  >>> to_string(5)\n  '5'\n  >>> to_string(0)\n  '0'\n  */\nconst to_string = (x) => {\n  return \"\" + x\n}\n\n/**\n  * Converts a string to a number\n  >>> to_number('2')\n  2\n  >>> to_number('3.5')\n  3.5\n  >>> to_number('0')\n  0\n  */\nconst to_number = (x) => {\n  return parseFloat(x)\n}\n\n/**\n  * Returns a random number\n  * @returns {number}\n  */\nconst random = () => {\n  return Math.random()\n}\n\n/**\n  * Returns a random int\n  * @returns {number}\n  */\nconst random_int = () => {\n  return Math.floor(Math.random() * 100)\n}\n\n/**\n  * Returns a random int\n  * @returns {number}\n  */\nconst random_int_between = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\n/**\n  * Returns a random string\n  * @returns {string}\n  */\nconst random_string = () => {\n  return Math.random().toString(36).substring(7)\n}\n\nmodule.exports = {\n  add, subtract, multiply, divide, to_string, to_number, random, random_int, random_int_between, random_string\n}\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const charSets = {\n    a: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n    b: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127],\n    c: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127],\n    d: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127],\n    e: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127],\n    f: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127]\n  }\n  const lenS0 = charSets.a.length\n  const lenS1 = charSets."}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1\n  } else {\n    return fib(n - 1) + fib(n - 2)\n  }\n}\n\nexport { fib }\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const brackets = brackets.split(\"\");\n  const length = brackets.length;\n  let i = 0;\n  while (i < length - 1) {\n    if (brackets[i] === \"<\" && brackets[i + 1] === \">\") {\n      i += 2;\n    } else if (brackets[i] === \"<\" && brackets[i + 1] === \"\") {\n      i += 1;\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  The function takes an opening bracket and returns the corresponding closing bracket. \n  Example: \n    >>> openBracket(\"<\")\n    \"<\"\n    >>> openBracket(\"<<>\")\n    \"<<>\"\n    >>> openBracket(\"<><\")\n    \"<>\"\n    >>> openBracket(\"<>\")\n    \"<>\"\n    >>> openBracket(\"<\")\n    \"<\"\n    >>> openBracket(\"\")\n    \"\"\n  */\nconst openBracket = (openingBracket) => {\n  const brackets = [\"<\", \">\"];\n  const length = brackets.length;\n  let i = 0;\n  while (i < length) {\n    if (brackets[i] === openingBracket) {\n      return brackets[i + 1];\n    }\n    i++;\n  }\n  return openingBracket;\n};\n\n/*\n  The function takes a pair of opening brackets and returns the corresponding pair of closing brackets. \n  Example: \n    >>> pairBrackets(\"<<<\")\n    \"<>\"\n    >>> pairBrackets(\"<<<\")\n    \"<>\"\n    >>> pairBrackets(\"<<<\")\n    \"<>\"\n    >>> pairBrackets(\"<<<\")\n    \"<>\"\n    >>> pairBrackets(\"<\")\n    \"<\"\n    >>> pairBrackets(\"\")\n    \"\"\n  */\nconst pairBrackets = (openingBrackets, closingBrackets) => {\n  const brackets = [\"<\", \">\"];\n  const length = brackets.length;\n  let i = 0;\n  while (i < length) {\n    if (brackets[i] === openingBrackets && brackets[i + 1] === closingBrackets) {\n      return brackets[i + 2];\n    }\n    i++;\n  }\n  return openingBrackets + closingBrackets;\n};\n\n/*\n  The function takes a pair of opening brackets and returns the corresponding pair of brackets. \n  Example: \n    >>> pairBrackets(\"<<<\")\n    \"<<<\"\n    >>> pairBrackets(\"<<<\")\n    \"<<<\"\n    >>> pairBrackets(\"<<<\")\n    \"<<<\"\n    >>> pairBrackets(\"<<<\")\n    \"<<<\"\n    >>> pairBrackets(\"<\")\n    \"<\"\n    >>> pairBrackets(\"\")\n    \"\"\n  */\nconst reverseBrackets = (openingBrackets, closingBrackets) => {\n  const brackets = [\"<\", \">\"];\n  const length = brackets.length;\n  let i = 0;\n  while (i < length) {\n    if (brackets[i] === closingBrackets && brackets[i + 1] === openingBrackets) {\n      return brackets[i + 2];\n    }\n    i++;\n  }\n  return openingBrackets + closingBrackets;\n};\n\n/*\n  The function takes a string and returns the length of the string. \n  Example: \n    >>> length(\"a\")\n    1\n    >>> length(\"abc\")\n    3\n    >>> length(\"\")\n    0\n  */\nconst length = (str) => {\n  return str.length;\n};\n\n/*\n  The function takes a string and returns the string reversed. \n  Example: \n    >>> reverse(\"abc\")\n    \"cba\"\n    >>> reverse(\"\")\n    \"\"\n  */\nconst reverse = (str) => {\n  return str.split('').reverse().join('');\n};\n\n/*\n  The function takes a string and returns the string reversed. \n  Example: \n    >>> reverse(\"abc\")\n    \"cba\"\n    >>> reverse(\"\")\n    \"\"\n  */\nconst reverseBrackets = (openingBrackets, closingBrackets) => {\n  const brackets = [\"<\", \">\"];\n  const length = brackets.length;\n  let i = 0;\n  while (i < length) {\n    if (brackets[i] === openingBrackets && brackets[i + 1] === closingBrackets) {\n      return reverse(brackets[i + 2]);\n    }\n    i++;\n  }\n  return openingBrackets + closingBrackets;\n};\n\n/*\n  The function takes a string and returns the number of opening brackets and closing brackets. \n  Example: \n    >>> brackets(\"<>\")\n    (2, 2)\n    >>> brackets(\"<\")\n    (1, 1)\n    >>> brackets(\"\")\n    (0, 0)\n  */\nconst brackets = (str) => {\n  let brackets = [];\n  let openingBracket = \"\";\n  let closingBracket = \"\";\n  let length = str.length;\n  for (let i = 0; i < length; i++) {\n    if (str[i] === \"<\") {\n      openingBracket = str[i];\n    } else if (str[i] === \">\") {\n      closingBracket = str[i];\n    } else {\n      brackets.push(openingBracket + str[i] + closingBracket);\n    }\n  }\n  return (length, length);\n};\n\n/*\n  The function takes a string and returns the string with brackets removed. \n  Example: \n    >>> removeBrackets(\"<><>\")\n    \"<> <> \"\n    >>> removeBrackets(\"<><>\")\n    \"<> <> \"\n    >>> removeBrackets(\"<><\")\n    \"<> <\"\n    >>> removeBrackets(\"<>\")\n    \"<\"\n    >>> removeBrackets(\"\")\n    \"\"\n  */\nconst removeBrackets = (str) => {\n  const"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n    return l.every(x => x >= 0) && l.every(x => x > 0? x - 1 > 0 : x - 1 < 0);\n};\n\n/**\n * Return true if list elements are mono tonic decreasing.\n *\n * @param {number[]} l\n * @return {boolean}\n */\nconst monoDecreasing = (l) => {\n    return monotonic(l) && l.every(x => x - 1 < 0);\n};\n\n/**\n * Return true if list elements are mono tonic increasing.\n *\n * @param {number[]} l\n * @return {boolean}\n */\nconst monoIncreasing = (l) => {\n    return monotonic(l) && l.every(x => x > 0? x - 1 > 0 : x - 1 < 0);\n};\n\n/**\n * Return true if list elements are monotonic.\n *\n * @param {number[]} l\n * @return {boolean}\n */\nconst monotonicAll = (l) => {\n    return monotonic(l) && monoDecreasing(l) && monoIncreasing(l);\n};\n\nmodule.exports = {\n    monotonic,\n    monotonicAll,\n    monoDecreasing,\n    monoIncreasing\n};<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let i = 0\n  let j = 0\n  const ans = []\n\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      ans.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] < l2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return ans\n}\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) return 1\n\n  let factor = 2\n  while (n % factor) {\n    factor++\n  }\n  while (factor * factor < n) {\n    if (n % factor === 0) {\n      return factor\n    }\n    factor++\n  }\n  return n\n}\n\nmodule.exports = largestPrimeFactor\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum = sum + i;\n  }\n  return sum;\n};\n\nconsole.log(sumToN(5));\nconsole.log(sumToN(10));\nconsole.log(sumToN(15));\nconsole.log(sumToN(30));\nconsole.log(sumToN(100));\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  if (!brackets) return false\n  if (brackets.length!== brackets.replace(/\\(/g, '').length) return false\n\n  const len = brackets.length\n  const bracketsArr = brackets.split('')\n  const bracketsArrArr = bracketsArr.map(char => char.charCodeAt(0))\n\n  const bracketsArrArrLength = bracketsArrArr.length\n\n  for (let i = 0; i < bracketsArrArrLength; i++) {\n    if (bracketsArrArr[i] === bracketsArrArr[bracketsArrArrLength - i - 1]) continue\n    return false\n  }\n\n  return true\n}\n\nmodule.exports = correctBracketing\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polyn omial .\n  xs[0] +xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polyn omial.\n  xs[0] +xs[1] * x + xs[2] * x^2 +....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  return [...xs.slice(1)].concat([xs[0] * xs[1]]);\n};\n\nconst _add = (x, y) => {\n  const result = x + y;\n  if (typeof result === 'number') {\n    return result;\n  }\n  return {\n    x: x,\n    y: y,\n    result: result\n  };\n};\n\nconst _multiply = (x, y) => {\n  const result = x * y;\n  if (typeof result === 'number') {\n    return result;\n  }\n  return {\n    x: x,\n    y: y,\n    result: result\n  };\n};\n\nconst _pow = (x, y) => {\n  const result = Math.pow(x, y);\n  if (typeof result === 'number') {\n    return result;\n  }\n  return {\n    x: x,\n    y: y,\n    result: result\n  };\n};\n\nconst _divide = (x, y) => {\n  const result = x / y;\n  if (typeof result === 'number') {\n    return result;\n  }\n  return {\n    x: x,\n    y: y,\n    result: result\n  };\n};\n\nconst add = (x, y) => {\n  if (typeof x === 'number') {\n    if (typeof y === 'number') {\n      return x + y;\n    }\n    return _add(x, y);\n  }\n  if (typeof y === 'number') {\n    return _add(y, x);\n  }\n  return _add(x, y);\n};\n\nconst multiply = (x, y) => {\n  if (typeof x === 'number') {\n    if (typeof y === 'number') {\n      return x * y;\n    }\n    return _multiply(x, y);\n  }\n  if (typeof y === 'number') {\n    return _multiply(y, x);\n  }\n  return _multiply(x, y);\n};\n\nconst pow = (x, y) => {\n  if (typeof x === 'number') {\n    if (typeof y === 'number') {\n      return Math.pow(x, y);\n    }\n    return _pow(x, y);\n  }\n  if (typeof y === 'number') {\n    return _pow(y, x);\n  }\n  return _pow(x, y);\n};\n\nconst divide = (x, y) => {\n  if (typeof x === 'number') {\n    if (typeof y === 'number') {\n      return x / y;\n    }\n    return _divide(x, y);\n  }\n  if (typeof y === 'number') {\n    return _divide(y, x);\n  }\n  return _divide(x, y);\n};\n\nexport {\n  add,\n  multiply,\n  pow,\n  divide\n};\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fib_1 = 0\n  let fib_2 = 1\n  let fib_3 = 0\n  for (let i = 1; i <= n; i++) {\n    fib_1 = fib_2\n    fib_2 = fib_3\n    fib_3 = fib_1 + fib_2\n  }\n  return fib_3\n}\n\n/*\nThe FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fib_1 = 0\n  let fib_2 = 1\n  let fib_3 = 0\n  for (let i = 1; i <= n; i++) {\n    fib_1 = fib_2\n    fib_2 = fib_3\n    fib_3 = fib_1 + fib_2\n  }\n  return fib_3\n}\n\n/*\nThe FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fib_1 = 0\n  let fib_2 = 1\n  let fib_3 = 0\n  for (let i = 1; i <= n; i++) {\n    fib_1 = fib_2\n    fib_2 = fib_3\n    fib_3 = fib_1 + fib_2\n  }\n  return fib_3\n}\n\n/*\nThe FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fib_1 = 0\n  let fib_2 = 1\n  let fib_3 = 0\n  for (let i = 1; i <= n; i++) {\n    fib_1 = fib_2\n    fib_2 = fib_3\n    fib_3 = fib_1 + fib_2\n  }\n  return fib_3\n}\n\n/*\nThe FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fib_1 = 0\n  let fib_2 = 1\n  let fib_3 = 0\n  for (let i = 1; i <= n; i++) {\n    fib_1 = fib_2\n    fib_2 = fib_3\n    fib_3 = fib_1 + fib_2\n  }\n  return fib_3\n}\n\n// test\n\nfunction fibfib(n) {\n  return fibfib(n)\n}\n\nfunction fibfib(n) {\n  return fibfib(n)\n}\n\nfunction fibfib(n) {\n  return fibfib(n)\n}\n\nfunction fibfib(n) {\n  return fibfib(n)\n}\n\nfunction fibfib(n) {\n  return fibfib(n)\n}\n\nfunction fibfib(n) {\n  return fibfib(n)\n}\n\nfunction fibfib(n) {\n  return fibfib(n)\n}\n\nfunction fibfib(n) {\n  return fibfib(n)\n}\n\nfunction fibfib(n) {\n  return fibfib("}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g .\n  Vow els in th is case are 'a', 'e', 'i', ' o',  'u'. Here, 'y ' is also a\n vowel, but only when it i s at the end of the giv e n word .\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g.\n  Vow els in th is case are 'a', 'e', 'i','o',  'u'. Here, 'y'is also a\n vowel, but only when it i s at the end of the giv e n word.\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!= -1) {\n      count += 1\n    }\n  }\n  return count\n}\n\nmodule.exports = vowelsCount\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the inte ger x , shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the inte ger x, shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (x == 0) {\n    return '0'\n  }\n  const digits = Array(x).fill(0)\n  const len = digits.length\n  const n = len - shift\n  const result = digits.slice(0, n).concat(\n    digits.slice(n).reverse()\n  )\n  return result.join('')\n}\n\nconsole.log(circularShift(10, 1))\nconsole.log(circularShift(10, 2))\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i).isUpperCase()) {\n      sum += s.charAt(i).toUpperCase().charCodeAt(0);\n    }\n  }\n  return sum;\n}\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges , a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges, a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n  let str = s.split(\" \");\n  let fruitCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    fruitCount += Number(str[i]);\n  }\n  return (fruitCount / n);\n};\n\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 9));<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index .\n\n  The plucked node s hould be returned in a list , [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index.\n\n  The plucked node s hould be returned in a list, [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const [min, idx] = minIndex(arr);\n  return [min, idx];\n};\n\nconst minIndex = (arr) => {\n  let min = arr[0];\n  let idx = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      idx = i;\n    }\n  }\n  return [min, idx];\n};\n\nexport { pluck };\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n    let max = 0;\n    let n = lst.length;\n    let curr = 0;\n    for (let i = 0; i < n; i++) {\n        curr = lst[i];\n        if (curr > 0 && curr > max) {\n            max = curr;\n        }\n    }\n    return max;\n};\n\nexport default search;<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value ,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  return lst.sort((a, b) => a - b)\n}\n\nmodule.exports = strangeSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a > b) {\n    return triangleArea(b, c, a);\n  }\n  if (b > c) {\n    return triangleArea(a, c, b);\n  }\n  if (c > a) {\n    return triangleArea(a, b, c);\n  }\n  return Math.abs(Math.sqrt(a * (a + b) * (a + b + c)));\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a > b) {\n    return triangleArea(b, c, a);\n  }\n  if (b > c) {\n    return triangleArea(a, c, b);\n  }\n  if (c > a) {\n    return triangleArea(a, b, c);\n  }\n  return Math.abs(Math.sqrt(a * (a + b) * (a + b + c)));\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a > b) {\n    return triangleArea(b, c, a);\n  }\n  if (b > c) {\n    return triangleArea(a, c, b);\n  }\n  if (c > a) {\n    return triangleArea(a, b, c);\n  }\n  return Math.abs(Math.sqrt(a * (a + b) * (a + b + c)));\n};\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const n = q.length;\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += q[i];\n  }\n  if (sum <= w) {\n    return true;\n  } else if (sum > w) {\n    return false;\n  }\n}\n\n/*\n  Write a function that takes in a list of integers and a value x, and returns the index of the largest number in the list that is less than or equal to x.\n\n  Example:\n  find( [1, 3, 4, 5, 6, 7, 8, 9], 4 ) ➞ 2\n  # 4 is less than or equal to 4, so it is the largest number in the list.\n  find( [1, 3, 4, 5, 6, 7, 8, 9], 11 ) ➞ 5\n  # 11 is greater than the largest number, so it is not the largest number in the list.\n  */\nconst find = (q, x) => {\n  const n = q.length;\n  let max = 0;\n  let index = 0;\n  for (let i = 0; i < n; i++) {\n    if (q[i] <= x && q[i] > max) {\n      max = q[i];\n      index = i;\n    }\n  }\n  return index;\n}\n\n/*\n  Write a function that takes in a list of integers and returns the index of the smallest number in the list that is greater than or equal to x.\n\n  Example:\n  findSmallest( [1, 3, 4, 5, 6, 7, 8, 9], 4 ) ➞ 5\n  # 4 is greater than or equal to 4, so it is the smallest number in the list.\n  findSmallest( [1, 3, 4, 5, 6, 7, 8, 9], 11 ) ➞ 0\n  # 11 is less than the smallest number, so it is not the smallest number in the list.\n  */\nconst findSmallest = (q, x) => {\n  const n = q.length;\n  let min = q[0];\n  let index = 0;\n  for (let i = 1; i < n; i++) {\n    if (q[i] >= x && q[i] < min) {\n      min = q[i];\n      index = i;\n    }\n  }\n  return index;\n}\n\n/*\n  Write a function that takes in a list of integers and a value x, and returns the index of the largest number in the list that is less than or equal to x.\n\n  Example:\n  find( [1, 3, 4, 5, 6, 7, 8, 9], 4 ) ➞ 2\n  # 4 is less than or equal to 4, so it is the largest number in the list.\n  find( [1, 3, 4, 5, 6, 7, 8, 9], 11 ) ➞ 5\n  # 11 is greater than the largest number, so it is not the largest number in the list.\n  */\nconst findLargest = (q, x) => {\n  const n = q.length;\n  let max = 0;\n  let index = 0;\n  for (let i = 0; i < n; i++) {\n    if (q[i] <= x && q[i] > max) {\n      max = q[i];\n      index = i;\n    }\n  }\n  return index;\n}\n\n/*\n  Write a function that takes in a list of integers and a value x, and returns the index of the smallest number in the list that is greater than or equal to x.\n\n  Example:\n  findSmallest( [1, 3, 4, 5, 6, 7, 8, 9], 4 ) ➞ 5\n  # 4 is greater than or equal to 4, so it is the smallest number in the list.\n  findSmallest( [1, 3, 4, 5, 6, 7, 8, 9], 11 ) ➞ 0\n  # 11 is less than the smallest number, so it is not the smallest number in the list.\n  */\nconst findSmallestGreaterThanOrEqual = (q, x) => {\n  const n = q.length;\n  let min = q[0];\n  let index = 0;\n  for (let i = 1; i < n; i++) {\n    if (q[i] >= x && q[i] < min) {\n      min = q[i];\n      index = i;\n    }\n  }\n  return index;\n}\n\n/*\n  Write a function that takes in a list of integers and a value x, and returns the index of the largest number in the list that is less than or equal to x.\n\n  Example:\n  find( [1, 3, 4, 5, 6, 7, 8, 9], 4 ) ➞ 2\n  # 4 is less than or equal to 4, so it is the largest number in the list.\n  find( [1, 3, 4, 5, 6, 7, 8, 9], 11 ) ➞ 5\n  # 11 is greater than the largest number, so it is not the largest number in the list.\n  */\nconst findLargestLessThanOrEqual = (q, x) => {\n  const n = q.length;\n  let max = 0;\n  let index = 0;\n  for (let i = 0; i < n; i++) {\n    if (q[i] <= x && q[i] > max) {\n      max = q[i];\n      "}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element .\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let result = 0;\n  let current = 0;\n  let max = Math.min(arr[0], arr[1]);\n  let min = Math.max(arr[0], arr[1]);\n  let temp = arr[0];\n\n  while (min < arr[1]) {\n    temp = arr[current];\n    while (temp < arr[1] && temp!= arr[current + 1]) {\n      temp++;\n    }\n    result += temp - arr[current];\n    current++;\n    if (current == arr.length) {\n      break;\n    }\n    max = Math.min(max, arr[current]);\n    min = Math.max(min, arr[current]);\n  }\n\n  return result;\n};\n\nmodule.exports = smallestChange;\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let result = lst1;\n  if (lst1.length > lst2.length) {\n    result = lst2;\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] === lst2[i]) {\n      continue;\n    }\n    return result;\n  }\n  return result;\n}\n\nmodule.exports = totalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2509, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2599, 2603, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases .\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases.\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n    let y = Math.pow(x, n);\n    return (y === x);\n}\n\n/*\n  Write a function that takes a string as input and convert it into a  \n  number\n  For example:\n  strToNumber('a1b2c3') => 1230\n  strToNumber('1a2b3c') => 1230\n  strToNumber('1a2b') => 12\n  strToNumber('abcd') => 0\n  */\nconst strToNumber = (s) => {\n    let str = s.split(\"\").reverse().join(\"\");\n    let num = 0;\n    for (let i = 0; i < str.length; i++) {\n        num = num * 10 + (str.charAt(i) - 48);\n    }\n    return num;\n}\n\nconst test1 = isSimplePower(1, 4);\nconsole.log(test1); // true\n\nconst test2 = isSimplePower(2, 2);\nconsole.log(test2); // true\n\nconst test3 = isSimplePower(8, 2);\nconsole.log(test3); // true\n\nconst test4 = isSimplePower(3, 2);\nconsole.log(test4); // false\n\nconst test5 = isSimplePower(3, 1);\nconsole.log(test5); // false\n\nconst test6 = isSimplePower(5, 3);\nconsole.log(test6); // false\n\nconst test7 = strToNumber(\"a1b2c3\");\nconsole.log(test7); // 1230\n\nconst test8 = strToNumber(\"1a2b3c\");\nconsole.log(test8); // 1230\n\nconst test9 = strToNumber(\"1a2b\");\nconsole.log(test9); // 12\n\nconst test10 = strToNumber(\"abcd\");\nconsole.log(test10); // 0\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a == 0) return true\n  const r = Math.sqrt(a)\n  return r * r == a\n}\n\nconst isprime = (a) => {\n  if (a == 1) return false\n  if (a == 0) return false\n  if (a % 2 == 0) return false\n  for (var i = 3; i <= Math.sqrt(a); i++) {\n    if (a % i == 0) return false\n  }\n  return true\n}\n\nconst isinteger = (a) => {\n  if (typeof a ==='string') return false\n  if (typeof a === 'number') return true\n  return a % 1 === 0\n}\n\nconst isfloat = (a) => {\n  if (typeof a ==='string') return false\n  if (typeof a === 'number') return true\n  return a % 1 === 0\n}\n\nconst islong = (a) => {\n  if (typeof a ==='string') return false\n  if (typeof a === 'number') return true\n  return a % 1 === 0\n}\n\nconst iscomplex = (a) => {\n  if (typeof a ==='string') return false\n  if (typeof a === 'number') return true\n  return a % 1 === 0\n}\n\nconst isintegercube = (a) => {\n  if (typeof a ==='string') return false\n  if (typeof a === 'number') return true\n  return a % 1 === 0\n}\n\nconst isfloatcube = (a) => {\n  if (typeof a ==='string') return false\n  if (typeof a === 'number') return true\n  return a % 1 === 0\n}\n\nconst islongcube = (a) => {\n  if (typeof a ==='string') return false\n  if (typeof a === 'number') return true\n  return a % 1 === 0\n}\n\nconst iscomplexcube = (a) => {\n  if (typeof a ==='string') return false\n  if (typeof a === 'number') return true\n  return a % 1 === 0\n}\n\nconst isprimecube = (a) => {\n  if (typeof a ==='string') return false\n  if (typeof a === 'number') return true\n  return a % 1 === 0\n}\n\nconst iscube(a) {\n  if (typeof a ==='string') return false\n  if (typeof a === 'number') return true\n  return a % 1 === 0\n}\n\nconst isintegercube(a) {\n  if (typeof a ==='string') return false\n  if (typeof a === 'number') return true\n  return a % 1 === 0\n}\n\nconst isfloatcube(a) {\n  if (typeof a ==='string') return false\n  if (typeof a === 'number') return true\n  return a % 1 === 0\n}\n\nconst islongcube(a) {\n  if (typeof a ==='string') return false\n  if (typeof a === 'number') return true\n  return a % 1 === 0\n}\n\nconst iscomplexcube(a) {\n  if (typeof a ==='string') return false\n  if (typeof a === 'number') return true\n  return a % 1 === 0\n}\n\nconst isprimecube(a) {\n  if (typeof a ==='string') return false\n  if (typeof a === 'number') return true\n  return a % 1 === 0\n}\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F .\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F.\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n    let count = 0;\n    for (let i = 0; i < num.length; i += 1) {\n        if (isPrime(parseInt(num.substr(i, 1), 16))) {\n            count += 1;\n        }\n    }\n    return count;\n}\n\nfunction isPrime(num) {\n    let i = 2;\n    while (i <= Math.sqrt(num)) {\n        if (num % i === 0) {\n            return false;\n        }\n        i += 1;\n    }\n    return true;\n}\n\n// console.log(hexKey(\"AB\"));\n// console.log(hexKey(\"1077E\"));\n// console.log(hexKey(\"ABED1A33\"));\n// console.log(hexKey(\"123456789ABCDEF0\"));\n// console.log(hexKey(\"2020\"));\n// console.log(hexKey(\"12A\"));\n// console.log(hexKey(\"12B\"));\n// console.log(hexKey(\"12C\"));\n// console.log(hexKey(\"12D\"));\n// console.log(hexKey(\"12E\"));\n// console.log(hexKey(\"12F\"));\n// console.log(hexKey(\"12G\"));\n// console.log(hexKey(\"12H\"));\n// console.log(hexKey(\"12I\"));\n// console.log(hexKey(\"12J\"));\n// console.log(hexKey(\"12K\"));\n// console.log(hexKey(\"12L\"));\n// console.log(hexKey(\"12M\"));\n// console.log(hexKey(\"12N\"));\n// console.log(hexKey(\"12O\"));\n// console.log(hexKey(\"12P\"));\n// console.log(hexKey(\"12Q\"));\n// console.log(hexKey(\"12R\"));\n// console.log(hexKey(\"12S\"));\n// console.log(hexKey(\"12T\"));\n// console.log(hexKey(\"12U\"));\n// console.log(hexKey(\"12V\"));\n// console.log(hexKey(\"12W\"));\n// console.log(hexKey(\"12X\"));\n// console.log(hexKey(\"12Y\"));\n// console.log(hexKey(\"12Z\"));\n// console.log(hexKey(\"13A\"));\n// console.log(hexKey(\"13B\"));\n// console.log(hexKey(\"13C\"));\n// console.log(hexKey(\"13D\"));\n// console.log(hexKey(\"13E\"));\n// console.log(hexKey(\"13F\"));\n// console.log(hexKey(\"13G\"));\n// console.log(hexKey(\"13H\"));\n// console.log(hexKey(\"13I\"));\n// console.log(hexKey(\"13J\"));\n// console.log(hexKey(\"13K\"));\n// console.log(hexKey(\"13L\"));\n// console.log(hexKey(\"13M\"));\n// console.log(hexKey(\"13N\"));\n// console.log(hexKey(\"13O\"));\n// console.log(hexKey(\"13P\"));\n// console.log(hexKey(\"13Q\"));\n// console.log(hexKey(\"13R\"));\n// console.log(hexKey(\"13S\"));\n// console.log(hexKey(\"13T\"));\n// console.log(hexKey(\"13U\"));\n// console.log(hexKey(\"13V\"));\n// console.log(hexKey(\"13W\"));\n// console.log(hexKey(\"13X\"));\n// console.log(hexKey(\"13Y\"));\n// console.log(hexKey(\"13Z\"));\n// console.log(hexKey(\"14A\"));\n// console.log(hexKey(\"14B\"));\n// console.log(hexKey(\"14C\"));\n// console.log(hexKey(\"14D\"));\n// console.log(hexKey(\"14E\"));\n// console.log(hexKey(\"14F\"));\n// console.log(hexKey(\"14G\"));\n// console.log(hexKey(\"14H\"));\n// console.log(hexKey(\"14I\"));\n// console.log(hexKey(\"14J\"));\n// console.log(hexKey(\"14K\"));\n// console.log(hexKey(\"14L\"));\n// console.log(hexKey(\"14M\"));\n// console.log(hexKey(\"14N\"));\n// console.log(hexKey(\"14O\"));\n// console.log(hexKey(\"14P\"));\n// console.log(hexKey(\"14Q\"));\n// console.log(hexKey(\"14R\"));\n// console.log(hexKey(\"14S\"));\n// console.log(hexKey(\"14T\"));\n// console.log(hexKey(\"14U\"));\n// console.log(hexKey(\"14V\"));\n// console.log(hexKey(\"14W\"));\n// console.log(hexKey(\"14X\"));\n// console.log(hexKey(\"14"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const result = []\n  let tmp = 0\n\n  for (let i = 0; i < decimal.length; i++) {\n    tmp = tmp * 2 + decimal[i]\n  }\n\n  while (tmp > 0) {\n    result.push(tmp % 2)\n    tmp = tmp / 2\n  }\n\n  return result.reverse().join(\"\")\n}\n\nexport default decimalToBinary\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n    const len = s.length;\n    if (len < 3) return false;\n    const counter = 0;\n    for (let i = 0; i < len; i++) {\n        counter += (s[i] === s[i + 1])? 1 : 0;\n    }\n    return counter >= 3;\n};\n\nconst test = (s) => {\n    console.log(isHappy(s));\n};\n\ntest(\"abcd\");\ntest(\"aabb\");\ntest(\"adb\");\ntest(\"xyy\");\ntest(\"abcd\");\ntest(\"aabb\");\ntest(\"adb\");\ntest(\"xyy\");\ntest(\"abcd\");\ntest(\"aabb\");\ntest(\"adb\");\ntest(\"xyy\");\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0 .7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0.7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n    const table = [\n        [4.0, 'A+'],\n        [3.7, 'A'],\n        [3.3, 'A-'],\n        [3.0, 'B+'],\n        [2.7, 'B'],\n        [2.3, 'B-'],\n        [2.0, 'C+'],\n        [1.7, 'C'],\n        [1.3, 'C-'],\n        [1.0, 'D+'],\n        [0.7, 'D'],\n        [0.3, 'D-'],\n        [0.0, 'E']\n    ]\n    const output = []\n    for (let i = 0; i < grades.length; i++) {\n        const grade = grades[i]\n        const index = findIndex(table, grade)\n        output.push(table[index][1])\n    }\n    return output\n}\n\nconst findIndex = (table, grade) => {\n    const result = table.findIndex((t) => t[0] >= grade)\n    return result\n}\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.7]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.3]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.0]))\nconsole.log"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length > 1) {\n    return isPrime(string.length)\n  } else {\n    return false\n  }\n}\n\nexport {primeLength}\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n\tlet oneEnds= (n) => {\n\t\treturn (Math.pow(10, n)-1)%10\n\t}\n\tlet ends= (n) => {\n\t\treturn Math.pow(10, n-1)%10\n\t}\n\tlet starts= (n) => {\n\t\treturn Math.pow(10, n)-1\n\t}\n\tlet one= (n) => {\n\t\treturn 1\n\t}\n\tlet all= (n) => {\n\t\treturn Math.pow(10, n)\n\t}\n\treturn [oneEnds(n), starts(n), ends(n), one(n), all(n)]\n}\n\ncon t start sOneEnds= (n) => {\n\tlet oneEnds= (n) => {\n\t\treturn (Math.pow(10, n)-1)%10\n\t}\n\tlet ends= (n) => {\n\t\treturn Math.pow(10, n-1)%10\n\t}\n\tlet starts= (n) => {\n\t\treturn Math.pow(10, n)-1\n\t}\n\tlet one= (n) => {\n\t\treturn 1\n\t}\n\tlet all= (n) => {\n\t\treturn Math.pow(10, n)\n\t}\n\treturn [oneEnds(n), starts(n), ends(n), one(n), all(n)]\n}\n\ncon t start sOneEnds= (n) => {\n\tlet oneEnds= (n) => {\n\t\treturn (Math.pow(10, n)-1)%10\n\t}\n\tlet ends= (n) => {\n\t\treturn Math.pow(10, n-1)%10\n\t}\n\tlet starts= (n) => {\n\t\treturn Math.pow(10, n)-1\n\t}\n\tlet one= (n) => {\n\t\treturn 1\n\t}\n\tlet all= (n) => {\n\t\treturn Math.pow(10, n)\n\t}\n\treturn [oneEnds(n), starts(n), ends(n), one(n), all(n)]\n}\n\ncon t start sOneEnds= (n) => {\n\tlet oneEnds= (n) => {\n\t\treturn (Math.pow(10, n)-1)%10\n\t}\n\tlet ends= (n) => {\n\t\treturn Math.pow(10, n-1)%10\n\t}\n\tlet starts= (n) => {\n\t\treturn Math.pow(10, n)-1\n\t}\n\tlet one= (n) => {\n\t\treturn 1\n\t}\n\tlet all= (n) => {\n\t\treturn Math.pow(10, n)\n\t}\n\treturn [oneEnds(n), starts(n), ends(n), one(n), all(n)]\n}\n\ncon t start sOneEnds= (n) => {\n\tlet oneEnds= (n) => {\n\t\treturn (Math.pow(10, n)-1)%10\n\t}\n\tlet ends= (n) => {\n\t\treturn Math.pow(10, n-1)%10\n\t}\n\tlet starts= (n) => {\n\t\treturn Math.pow(10, n)-1\n\t}\n\tlet one= (n) => {\n\t\treturn 1\n\t}\n\tlet all= (n) => {\n\t\treturn Math.pow(10, n)\n\t}\n\treturn [oneEnds(n), starts(n), ends(n), one(n), all(n)]\n}\n\ncon t start sOneEnds= (n) => {\n\tlet oneEnds= (n) => {\n\t\treturn (Math.pow(10, n)-1)%10\n\t}\n\tlet ends= (n) => {\n\t\treturn Math.pow(10, n-1)%10\n\t}\n\tlet starts= (n) => {\n\t\treturn Math.pow(10, n)-1\n\t}\n\tlet one= (n) => {\n\t\treturn 1\n\t}\n\tlet all= (n) => {\n\t\treturn Math.pow(10, n)\n\t}\n\treturn [oneEnds(n), starts(n), ends(n), one(n), all(n)]\n}\n\ncon t start sOneEnds= (n) => {\n\tlet oneEnds= (n) => {\n\t\treturn (Math.pow(10, n)-1)%10\n\t}\n\tlet ends= (n) => {\n\t\treturn Math.pow(10, n-1)%10\n\t}\n\tlet starts= (n) => {\n\t\treturn Math.pow(10, n)-1\n\t}\n\tlet one= (n) => {\n\t\treturn 1\n\t}\n\tlet all= (n) => {\n\t\treturn Math.pow(10, n)\n\t}\n\treturn [oneEnds(n), starts(n), ends(n), one(n), all(n)]\n}\n\ncon t start sOneEnds= (n) => {\n\tlet oneEnds= (n) => {\n\t\treturn (Math.pow(10, n)-1)%10\n\t}\n\tlet ends= (n) => {\n\t\treturn Math.pow(10, n-1)%10\n\t}\n\tlet starts= (n) => {\n\t\treturn Math.pow(10, n)-1\n\t}\n\tlet one= (n) => {\n\t\treturn 1\n\t}\n\tlet all= (n) => {\n\t\treturn Math.pow(10, n)\n\t}\n\treturn [oneEnds(n), starts(n), ends(n), one(n), all(n)]\n}\n\ncon t start sOneEnds= (n) => {\n\tlet oneEnds= (n) => {\n\t\treturn (Math.pow(10, n)-1)%10\n\t}\n\tlet ends= (n) => {\n\t\treturn Math.pow(10, n-1)%10\n\t}\n\tlet starts= (n) => {\n\t\treturn Math.pow(10, n)-1\n\t}\n\tlet one= (n) => {\n\t\treturn 1\n\t}\n\tlet all= ("}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let res = '';\n  for (let i = 1; i <= N; i++) {\n    res += '0' + Math.floor(N / i);\n  }\n  return res;\n};\n\nconst test = () => {\n  assert.equal(solve(1000), '1');\n  assert.equal(solve(150), '110');\n  assert.equal(solve(147), '1100');\n};\n\nconst main = () => {\n  test();\n  console.log(solve(9));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let odd = 0, even = 0, count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2) {\n      odd++;\n    } else {\n      even++;\n    }\n  }\n  return odd + even;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence .\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let re = /\\s/g;\n  let arr = s.split(re);\n  let newarr = arr.filter(w => w!='');\n  let i = newarr.length - 1;\n  let j = newarr.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (newarr[i] > newarr[j]) {\n      newarr[i] = newarr[i] + newarr[j];\n      newarr[j] = '';\n      i--;\n      j--;\n    } else {\n      i--;\n    }\n  }\n  return newarr.join(' ');\n};\n\nconsole.log(antiShuffle('Hi')); // 'Hi'\nconsole.log(antiShuffle('hello')); // 'ehllo'\nconsole.log(antiShuffle('Hello World!!!')); // 'Hello!!!Wdlor'<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples ,  [(x1,  y1), (x2,y2) ... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples,  [(x1,  y1), (x2,y2)... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const list = [];\n  for(let i = 0, len = lst.length; i < len; i++){\n    if(lst[i].length === x){\n      list.push([i, lst[i].length]);\n    }\n  }\n  const result = list.sort((a, b) => a[1] - b[1]);\n  result.sort((a, b) => b[0] - a[0]);\n  return result;\n}\n\nconst main = () => {\n  const lst = [\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ];\n  const x = 2;\n  console.log(getRow(lst, x));\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const len = array.length\n  const sort = (a, b) => {\n    if (a > b) {\n      return -1\n    } else if (a < b) {\n      return 1\n    } else {\n      return 0\n    }\n  }\n  let i = 0\n  let j = len - 1\n  let sum = 0\n  let tmp = []\n  while (i < j) {\n    sum = 0\n    for (let k = i; k <= j; k++) {\n      sum += array[k]\n    }\n    if (sum % 2) {\n      tmp.push(array[j])\n      j -= 1\n    } else {\n      tmp.push(array[i])\n      i += 1\n    }\n  }\n  tmp.push(array[j])\n  return tmp\n}\n\nconst sortArray = (array) => {\n  const len = array.length\n  let i = 0\n  let j = len - 1\n  let tmp = []\n  let sum = 0\n  let tmp2 = []\n  while (i < j) {\n    sum = 0\n    for (let k = i; k <= j; k++) {\n      sum += array[k]\n    }\n    if (sum % 2) {\n      tmp.push(array[j])\n      j -= 1\n    } else {\n      tmp.push(array[i])\n      i += 1\n    }\n  }\n  tmp.push(array[j])\n  return tmp\n}\n\nexport default sortArray\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alpha = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];\n  let r = (Math.floor(Math.random()*alpha.length)%alpha.length);\n  let alpha = alpha.slice(r,r+2);\n  let r = r+2;\n  let cipher = '';\n  for(let i=0;i<s.length;i++){\n    cipher += alpha[s.charCodeAt(i)-97]\n  }\n  return cipher;\n}\n\n//TODO: Write a function decrypt that takes a str and a string of chars \n//returns a string that is the decrypted version of the input\nconst decrypt = (s,alphabet) => {\n  let a = s.split('');\n  let i = 0;\n  let decrypted = '';\n  while(i<a.length){\n    decrypted += alphabet[a[i].charCodeAt(0)-97];\n    i++;\n  }\n  return decrypted;\n}\n\n//TODO: Write a function that takes a str and a list of words and \n//returns the number of words in the list that were found in the string.\nconst countWords = (s,words) => {\n  let words = words.split(' ');\n  let foundWords = 0;\n  for(let i=0;i<words.length;i++){\n    if(s.includes(words[i])){\n      foundWords++;\n    }\n  }\n  return foundWords;\n}\n\n//TODO: Write a function that takes a string and a list of words and \n//returns a string with the number of words in the list found in the string \n//as the first character of the string.\nconst addNumbers = (s,words) => {\n  let words = words.split(' ');\n  let foundWords = countWords(s,words);\n  let c = foundWords;\n  return c.toString();\n}\n\n//TODO: Write a function that takes a string and a list of words and \n//returns a string with the number of words in the list found in the string \n//as the last character of the string.\nconst addLetters = (s,words) => {\n  let words = words.split(' ');\n  let foundWords = countWords(s,words);\n  let c = foundWords;\n  return c.toString();\n}\n\n//TODO: Write a function that takes a string and a list of words and \n//returns a string with the number of words in the list found in the string \n//as the last two characters of the string.\nconst addNumbersAndLetters = (s,words) => {\n  let words = words.split(' ');\n  let foundWords = countWords(s,words);\n  let c = foundWords;\n  return c.toString();\n}\n\n//TODO: Write a function that takes a string and a list of words and \n//returns a string with the number of words in the list found in the string \n//as the last three characters of the string.\nconst addNumbersAndLettersAndNumbers = (s,words) => {\n  let words = words.split(' ');\n  let foundWords = countWords(s,words);\n  let c = foundWords;\n  return c.toString();\n}\n\n//TODO: Write a function that takes a string and a list of words and \n//returns a string with the number of words in the list found in the string \n//as the first character of the string.\nconst addNumbersAndLettersAndNumbers = (s,words) => {\n  let words = words.split(' ');\n  let foundWords = countWords(s,words);\n  let c = foundWords;\n  return c.toString();\n}\n\n//TODO: Write a function that takes a string and a list of words and \n//returns a string with the number of words in the list found in the string \n//as the last four characters of the string.\nconst addNumbersAndLettersAndNumbers = (s,words) => {\n  let words = words.split(' ');\n  let foundWords = countWords(s,words);\n  let c = foundWords;\n  return c.toString();\n}\n\n//TODO: Write a function that takes a string and a list of words and \n//returns a string with the number of words in the list found in the string \n//as the first five characters of the string.\nconst addNumbersAndLettersAndNumbers = (s,words) => {\n  let words = words.split(' ');\n  let foundWords = countWords(s,words);\n  let c = foundWords;\n  return c.toString();\n}\n\n//TODO: Write a function that takes a string and a list of words and \n//returns a string with the number of words in the list found in the string \n//as the last five characters of the string.\nconst addNumbersAndLettersAndNumbers = (s,words) => {\n  let words = words.split(' ');\n  let foundWords = countWords(s,words);\n  let c = foundWords;\n  return c.toString();\n}\n\n//TODO: Write a function that takes a string and a list of words and \n//returns a string with the number of words in the list found in the string \n//as the first six characters of the string.\nconst addNumbersAndLettersAndNumbers = (s,words) => {\n  let words = words.split(' ');\n  let foundWords = countWords(s,words);\n  let c = foundWords;\n  return c.toString();\n}\n\n//TODO: Write a function that takes a string and a list of words and \n"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1 , 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1, 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n  const len = lst.length\n  if (len === 0) {\n    return null\n  }\n  const mid = Math.floor(len / 2)\n  const min = lst[mid]\n  if (len === 1) {\n    return min\n  }\n  return Math.min(nextSmallest(lst.slice(0, mid)), nextSmallest(lst.slice(mid + 1, len)))\n}\n\n/*\n  nex tSmallest([1,2,3,4,5]) ==2\n  nextSmallest([1,2,3,4,5]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1, 1]) == null\n */\nconstnex nextSmallest = (lst) => {\n  const len = lst.length\n  if (len === 0) {\n    return null\n  }\n  const mid = Math.floor(len / 2)\n  const min = lst[mid]\n  if (len === 1) {\n    return min\n  }\n  return Math.min(nextSmallest(lst.slice(0, mid)), lst[mid + 1])\n}\n\nconst nex = (lst) => {\n  const len = lst.length\n  if (len === 0) {\n    return null\n  }\n  const mid = Math.floor(len / 2)\n  const min = lst[mid]\n  if (len === 1) {\n    return min\n  }\n  return Math.min(nex(lst.slice(0, mid)), lst[mid + 1])\n}\n\nconstnex tSmallest([1, 2, 3, 4, 5])\n\nconst nex([1, 2, 3, 4, 5])\n\nconstnex tSmallest([1, 2, 3, 4, 5])\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  return S.split('').filter(c => c!== '.' && c!== '?' && c!== '!').length === 0\n}\n\nmodule.exports = isBored\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two , and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n    return Math.floor(x) === x && Math.floor(y) === y && Math.floor(z) === z;\n};\n\nexport default anyInt;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters .  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters.  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodings = [];\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let index = 0;\n  while (index < message.length) {\n    let letter = message[index];\n    let isAlpha = alphabet.includes(letter);\n    if (isAlpha) {\n      let encodedLetter = letter.toUpperCase();\n      encodings.push(encodedLetter);\n    }\n    index++;\n  }\n  return encodings.join('');\n};\n\nencode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n// encode('This is a message');\n//"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let res = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 10) {\n      res += lst[i] - 9;\n    }\n    if (lst[i] > 9) {\n      res += (lst[i] - 9) * (lst[i] - 9);\n    }\n  }\n  return res;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let dictKey = Object.keys(dict);\n  let dictionary = Object.values(dict);\n  return dictionary.every(s => {\n    let key = s.toUpperCase();\n    let upper = key.toUpperCase();\n    return (key === upper) || (upper.toLowerCase() === key);\n  }) && dictKey.every(s => {\n    let key = s.toLowerCase();\n    return key.toLowerCase() === key;\n  })\n};\n\nconst checkDict = (dict) => {\n  let dictKey = Object.keys(dict);\n  let dictionary = Object.values(dict);\n  return dictionary.every(s => {\n    return s === dictKey;\n  })\n};\n\nconst dict = {\n  Name: \"John\",\n  Age: \"36\",\n  City: \"Houston\",\n  STATE: \"NC\",\n  ZIP: \"12345\"\n};\n\ncheckDictCase(dict);\nconsole.log(\"Is a dictionary in upper case\", checkDictCase(dict));\ncheckDictCase(dict);\nconsole.log(\"Is a dictionary in lower case\", checkDictCase(dict));\ncheckDictCase(dict);\nconsole.log(\"Is a dictionary in mixed case\", checkDictCase(dict));\ncheckDictCase(dict);\nconsole.log(\"Is a dictionary with an empty dictionary\", checkDictCase(dict));\ncheckDictCase(dict);\nconsole.log(\"Is a dictionary with one key\", checkDictCase(dict));\ncheckDictCase(dict);\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n === 0) return []\n  const res = []\n  const step = n > 0? 1 : -1\n  let i = 0\n  let a = 1\n  while (a <= n) {\n    res.push(a)\n    a += step\n  }\n  return res\n}\n\nmodule.exports = countUpTo\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a < 0 || b < 0) {\n    throw new Error('a and b should be non-negative.');\n  }\n\n  if (a < b) {\n    return multiply(b, a);\n  }\n\n  let result = 0;\n  let count = 0;\n\n  while (a > 0) {\n    let remainder = a % 10;\n    a = a / 10;\n\n    if (remainder > 0) {\n      result += remainder * b;\n      count++;\n    }\n\n    if (count === b) {\n      break;\n    }\n  }\n\n  return result;\n};\n\n// https://en.wikipedia.org/wiki/Multiply_%28mathematics%29#Multiply_in_the_Complex_Plane\nconst multiplyInComplexPlane = (a, b) => {\n  if (a < 0 || b < 0) {\n    throw new Error('a and b should be non-negative.');\n  }\n\n  let result = 0;\n  let count = 0;\n\n  while (a > 0) {\n    let remainder = a % 10;\n    a = a / 10;\n\n    if (remainder > 0) {\n      let temp = remainder * b;\n\n      if (temp < 0) {\n        temp = -temp;\n      }\n\n      result += temp;\n      count++;\n    }\n\n    if (count === b) {\n      break;\n    }\n  }\n\n  return result;\n};\n\nconst multiplyInComplexPlane_2 = (a, b) => {\n  if (a < 0 || b < 0) {\n    throw new Error('a and b should be non-negative.');\n  }\n\n  let result = 0;\n  let count = 0;\n\n  while (a > 0) {\n    let remainder = a % 10;\n    a = a / 10;\n\n    if (remainder > 0) {\n      let temp = remainder * b;\n\n      if (temp < 0) {\n        temp = -temp;\n      }\n\n      result += temp;\n      count++;\n    }\n\n    if (count === b) {\n      break;\n    }\n  }\n\n  return result;\n};\n\n// https://en.wikipedia.org/wiki/Multiply_%28mathematics%29#Multiply_in_the_Real_Plane\nconst multiplyInRealPlane = (a, b) => {\n  if (a < 0 || b < 0) {\n    throw new Error('a and b should be non-negative.');\n  }\n\n  let result = 0;\n  let count = 0;\n\n  while (a > 0) {\n    let remainder = a % 10;\n    a = a / 10;\n\n    if (remainder > 0) {\n      let temp = remainder * b;\n\n      if (temp < 0) {\n        temp = -temp;\n      }\n\n      result += temp;\n      count++;\n    }\n\n    if (count === b) {\n      break;\n    }\n  }\n\n  return result;\n};\n\nconst multiplyInRealPlane_2 = (a, b) => {\n  if (a < 0 || b < 0) {\n    throw new Error('a and b should be non-negative.');\n  }\n\n  let result = 0;\n  let count = 0;\n\n  while (a > 0) {\n    let remainder = a % 10;\n    a = a / 10;\n\n    if (remainder > 0) {\n      let temp = remainder * b;\n\n      if (temp < 0) {\n        temp = -temp;\n      }\n\n      result += temp;\n      count++;\n    }\n\n    if (count === b) {\n      break;\n    }\n  }\n\n  return result;\n};\n\n// https://en.wikipedia.org/wiki/Multiply_%28mathematics%29#Multiply_in_the_Euclidean_Plane\nconst multiplyInEuclideanPlane = (a, b) => {\n  if (a < 0 || b < 0) {\n    throw new Error('a and b should be non-negative.');\n  }\n\n  let result = 0;\n  let count = 0;\n\n  while (a > 0) {\n    let remainder = a % 10;\n    a = a / 10;\n\n    if (remainder > 0) {\n      let temp = remainder * b;\n\n      if (temp < 0) {\n        temp = -temp;\n      }\n\n      result += temp;\n      count++;\n    }\n\n    if (count === b) {\n      break;\n    }\n  }\n\n  return result;\n};\n\n// https://en.wikipedia.org/wiki/Multiply_%28mathematics%29#Multiply_in_the_Euclidean_Plane\nconst multiplyInEuclideanPlane_2 = (a, b) => {\n  if (a < 0 || b < 0) {\n    throw new Error('a and b should be non-negative.');\n  }\n\n  let result = 0;\n  let count = 0;\n\n  while (a > 0) {\n    let remainder = a % 10;\n    a = a / 10;\n\n    if (remainder > 0) {\n      let temp = remainder * b;\n\n      if (temp < 0) {\n        temp = -temp;\n      }\n\n      result += temp;\n      count++;\n    }\n\n    if (count === b) {\n      break;\n    }\n  }\n\n  return result;\n};\n\nconst multiplyInEuclideanPlane_3 = (a, b) => {\n  if (a < 0 || b < 0) {\n    throw new Error('a and b should be non-negative.');\n  }\n\n  let result = 0;\n  let count = 0;\n\n  while (a > 0) {\n    let remainder = a % 10;\n    a = a / 10;\n\n    if (remainder > 0) {\n      let temp = remainder * b;\n\n      if (temp < 0"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  return s.split('').map(x => {\n    if (x === x.toUpperCase()) {\n      return 1\n    } else {\n      return 0\n    }\n  }).reduce((a, b) => a + b)\n}\n\nexport default countUpper\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n    const intValue = parseInt(value);\n    const min = Math.min(intValue, Math.ceil(intValue));\n    const max = Math.max(intValue, Math.floor(intValue));\n    if (min!== intValue && min === max) {\n        return min;\n    }\n    return max;\n}\n\n/*\n  Find the smallest set of numbers that can be divided by\n  every other number to produce an even number.\n  Examples\n  >>> divisors(30)\n  [2, 3, 5, 6, 10, 15, 20, 30]\n  >>> divisors(1000)\n  [2, 3, 4, 5, 6, 8, 10, 12, 15, 20, 24, 30, 40, 60, 120]\n  >>> divisors(30**2)\n  [2, 6, 10, 12, 15, 18, 20, 24, 30, 36, 40, 45, 60, 90]\n  >>> divisors(3)\n  [1, 3]\n  >>> divisors(0)\n  []\n  >>> divisors(1)\n  []\n  >>> divisors(3)\n  [1, 3]\n  >>> divisors(9)\n  [1, 3, 5, 9]\n  >>> divisors(13)\n  [1, 3, 5, 9, 13]\n  >>> divisors(1000)\n  [2, 3, 4, 5, 6, 8, 10, 12, 15, 20, 24, 30, 40, 60, 120]\n  >>> divisors(10**12)\n  [2, 3, 4, 5, 6, 8, 10, 12, 15, 20, 24, 30, 40, 60, 120]\n  >>> divisors(1)\n  []\n  >>> divisors(2)\n  []\n  >>> divisors(3)\n  [1, 3]\n  >>> divisors(4)\n  [1, 2, 4]\n  >>> divisors(5)\n  [1, 2, 3, 5]\n  >>> divisors(6)\n  [1, 2, 3, 6]\n  >>> divisors(7)\n  [1, 2, 3, 4, 7]\n  >>> divisors(8)\n  [1, 2, 3, 4, 5, 8]\n  >>> divisors(9)\n  [1, 2, 3, 4, 5, 6, 9]\n  >>> divisors(10)\n  [1, 2, 3, 4, 5, 6, 10]\n  >>> divisors(11)\n  [1, 2, 3, 4, 5, 6, 9, 11]\n  >>> divisors(12)\n  [1, 2, 3, 4, 5, 6, 8, 9, 12]\n  >>> divisors(13)\n  [1, 2, 3, 4, 5, 6, 8, 9, 10, 13]\n  >>> divisors(14)\n  [1, 2, 3, 4, 7, 9, 10, 12, 14]\n  >>> divisors(15)\n  [1, 2, 3, 4, 7, 9, 10, 12, 15]\n  >>> divisors(16)\n  [1, 2, 3, 4, 7, 9, 10, 12, 15, 16]\n  >>> divisors(17)\n  [1, 2, 3, 4, 7, 9, 10, 12, 15, 17]\n  >>> divisors(18)\n  [1, 2, 3, 4, 7, 9, 10, 12, 15, 18]\n  >>> divisors(19)\n  [1, 2, 3, 4, 7, 9, 10, 12, 15, 19]\n  >>> divisors(20)\n  [1, 2, 3, 4, 7, 9, 10, 12, 15, 20]\n  >>> divisors(21)\n  [1, 2, 3, 4, 7, 9, 10, 12, 15, 21]\n  >>> divisors(22)\n  [1, 2, 3, 4, 7, 9, 10, 12, 15, 18, 22]\n  >>> divisors(23)\n  [1, 2, 3, 4, 7, 9, 10, 12, 15, 18, 21, 23]\n  >>> divisors(24)\n  [1, 2, 3, 4, 7, 9, 10, 12, 15, 18, 21, 24]\n  >>> divisors(25)\n  [1, 2, 3, 4, 7, 9, 10, 12, 15, 18, 21, 24, 25]\n  >>> divisors(30)\n  [2, 3, 5, 6, 10, 15, 20, 30]\n  >>> divisors(31)\n  [2, 3, 5, 6, 10, 15, 20, 30, 31]\n  >>> divisors(32)\n  [2, 3, 5, 6, 10, 15, 20, 30, 32]\n  >>> divisors(1000)\n  [2, 3, 4, 5, 6, 8, 10, 12, 15, 20, 24, 30, 40, 60, 120]\n  >>> divisors(2000)\n  [2, 3, 4, 5, 6, 8, 10, 12, 15, 20, 24, 30, 40, 60, 120, 2000]\n  >>> divisors(3000)\n  [2, 3, 4, 5, 6, 8, 10, 12, 15, 20, 24, 30, 40, 60, 120, 2000, 3000]\n  >>> divisors(10000)\n  [2, 3, 4, 5, 6, 8, 10, 12, 15, 20, 24, 30, 40, 60, 120, 2000, 3000, 10000]\n  >>> divisors(9999)\n  [2,"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPileEven = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPileOdd = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPileEvenOdd = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPileB = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i * 2)\n  }\n  return pile\n}\n\nconst makeAPileO = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i * 3)\n  }\n  return pile\n}\n\nconst makeAPileBO = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i * 4)\n  }\n  return pile\n}\n\nconst makeAPileBO = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i * 5)\n  }\n  return pile\n}\n\nconst makeAPileBOO = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i * 6)\n  }\n  return pile\n}\n\nconst makeAPileBOOT = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i * 7)\n  }\n  return pile\n}\n\nconst makeAPileBOB = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i * 8)\n  }\n  return pile\n}\n\nconst makeAPileBOBO = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i * 9)\n  }\n  return pile\n}\n\nconst makeAPileBOBOB = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i * 10)\n  }\n  return pile\n}\n\nconst makeAPileBOBOBO = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i * 11)\n  }\n  return pile\n}\n\nconst makeAPileBOBOBOB = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i * 12)\n  }\n  return pile\n}\n\nconst makeAPileBOBOBOBO = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i * 13)\n  }\n  return pile\n}\n\nconst makeAPileBOBOBOBOB = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i * 14)\n  }\n  return pile\n}\n\nconst makeAPileBOBOBOBOBO = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i * 15)\n  }\n  return pile\n}\n\nconst makeAPileBOBOBOBOBOB = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i * 16)\n  }\n  return pile\n}\n\nconst makeAPileBOBOBOBOBOBO = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i * 17)\n  }\n  return pile\n}\n\nconst makeAPileBOBOBOBOBOBOB = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i * 18)\n  }\n  return pile\n}\n\nconst makeAPileBOBOBOBOBOBOBOB = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i * 19)\n  }\n  return pile\n}\n\nconst makeAPileBOBOBOBOBOBOBOBOB = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i * 20)\n  }\n  return pile\n}\n\nconst makeAPileBOBOBOBOBOBOBOBOBOB = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i * 21)\n  }\n  return pile\n}\n\nconst makeAPileBOBOBOBOBOBOBOBOBOBOB"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/(?=[A-Z]|[^a-z])(?=\\S+[A-Z])/g);\n  return words;\n}\n\n/*\n  Split the input string of numbers into an array of numbers.\n  \n  For example:\n  splitNums(\"1,2,3,4,5\") == [1,2,3,4,5]\n  splitNums(\"1,2,3,4,5\") == [1,2,3,4,5]\n  splitNums(\"1,2,3,4,5,6,7,8,9,10,11\") == [1,2,3,4,5,6,7,8,9,10,11]\n  splitNums(\"1,2,3,4,5,6,7,8,9,10,11\") == [1,2,3,4,5,6,7,8,9,10,11]\n  splitNums(\"1,2,3,4,5,6,7,8,9,10,11,12\") == [1,2,3,4,5,6,7,8,9,10,11,12]\n  */\nconst splitNums = (s) => {\n  let nums = s.split(/,/g);\n  return nums;\n}\n\n/*\n  Return the number of unique words in the input string.\n  \n  For example:\n  uniqueWordCount(\"Hi, my name is John\") == 1\n  uniqueWordCount(\"Hi, my name is John\") == 1\n  uniqueWordCount(\"Hi, my name is John\") == 1\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is John, and I am also John\") == 2\n  uniqueWordCount(\"Hi, my name is"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let low = 1;\n  let high = y;\n  let mid = Math.floor((x + y) / 2);\n  let num = 0;\n\n  while (low <= high) {\n    num = mid;\n    if (isEven(num)) {\n      break;\n    }\n    if (isOdd(num)) {\n      high = num - 1;\n    } else {\n      low = num + 1;\n    }\n    mid = Math.floor((x + y) / 2);\n  }\n\n  return num;\n};\n\nexport default chooseNum;\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const nDigits = n.toString(2).length;\n  const mDigits = m.toString(2).length;\n  let average = 0;\n  for (let i = n; i <= m; i++) {\n    const number = i.toString(2);\n    const length = number.length;\n    const padded = number + '0';\n    const binary = padded.substring(length - nDigits, length - mDigits);\n    average += parseInt(binary, 2);\n  }\n  if (n > m) {\n    return -1;\n  }\n  return average / (n - m + 1);\n};\n\n/*\n * Given two positive integers n andm, return the  average of the integers from n\n * thro m in base 10.\n  Example:\n  roundedAvg(1, 5) => \"6\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"36\"\n  roundedAvg(20, 33) => \"1010\"\n  */\nconst roundedAvgInBase10 = (n, m) => {\n  const nDigits = n.toString(10).length;\n  const mDigits = m.toString(10).length;\n  let average = 0;\n  for (let i = n; i <= m; i++) {\n    const number = i.toString(10);\n    const length = number.length;\n    const padded = number + '0';\n    const binary = padded.substring(length - nDigits, length - mDigits);\n    average += parseInt(binary, 2);\n  }\n  if (n > m) {\n    return -1;\n  }\n  return average / (n - m + 1);\n};\n\nconst average = () => {\n  const n = prompt('Enter the first number');\n  const m = prompt('Enter the second number');\n  const roundedAvg = roundedAvg(n, m);\n  if (roundedAvg === -1) {\n    console.log('-1');\n  } else {\n    const roundedAvgInBase10 = roundedAvgInBase10(n, m);\n    if (roundedAvgInBase10 === -1) {\n      console.log('-1');\n    } else {\n      console.log(roundedAvg);\n      console.log(roundedAvgInBase10);\n    }\n  }\n};\n\naverage();\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n    if(x.length===0) return []\n    const a = x.sort((a,b)=>a-b)\n    const s = a.filter(x=>x%2===0).concat(a.filter(x=>x%2===1))\n    return s.sort((a,b)=>a-b).slice(1)\n}\n\n/*\nGiven a positive integer N, find the sum of all numbers that are equal to \nN, but are not in the list of given numbers.\n\nFor example:\n  >>> sumEqual([1,2,3,4,5,6,7,9,10,11,12,15,17,22,23,24])\n  22\n  >>> sumEqual([1,2,3,4,5,6,7,9,10,11,12,15,17,22,23,24,25])\n  22\n  >>> sumEqual([1,2,3,4,5,6,7,9,10,11,12,15,17,22,23,24,25,26])\n  24\n  >>> sumEqual([1,2,3,4,5,6,7,9,10,11,12,15,17,22,23,24,25,26,27])\n  27\n  */\nconst sumEqual = (n) => {\n    const d = uniqueDigits(n)\n    if(d.length===0) return n\n    const s = d.filter(d=>n===d)\n    return sumEqual(s)\n}\n\nconst nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n    arr.sort((a, b) => b.length - a.length)\n    return arr.reverse().map((num, index) => {\n        const n = index + 1\n        return `${n}${num}`\n    })\n}\n\nconst byName = (arr) => {\n    arr.sort((a, b) => a.localeCompare(b))\n    return arr.reverse().map((num, index) => {\n        const n = index + 1\n        return `${n}${num}`\n    })\n}\n\nexport const sort = (arr) => {\n    if (!arr) {\n        return []\n    }\n    const reverse = arr.reverse()\n    const len = arr.length\n    const isNumber = (num) => (num - 0) === num\n    const isAlphabet = (num) => /[A-Za-z]/.test(num)\n    const isNumberOrAlphabet = (num) => isNumber(num) || isAlphabet(num)\n    const byLength = (arr) => arr.sort((a, b) => b.length - a.length)\n    const byName = (arr) => arr.sort((a, b) => a.localeCompare(b))\n    const byNumber = (arr) => {\n        const sorted = byLength(arr)\n        const reversed = byName(reverse(sorted))\n        const names = reversed.map((num) => {\n            const n = parseInt(num, 10)\n            return names[n - 1]\n        })\n        return names\n    }\n    const byNumberOrAlphabet = (arr) => {\n        const sorted = byLength(arr)\n        const reversed = byName(reverse(sorted))\n        const names = reversed.map((num) => {\n            const n = parseInt(num, 10)\n            return names[n - 1]\n        })\n        return names\n    }\n    const names = byNumber(arr)\n    const namesOrAlphabet = byNumberOrAlphabet(arr)\n    return namesOrAlphabet\n}\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2*  ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2* ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n    let res = [];\n    for (let i = 1; i <= n; i++) {\n        let num = f(i);\n        if (i % 2 === 0) {\n            num.unshift(i);\n            res = res.concat(num);\n        }\n    }\n    return res;\n};\n\nmodule.exports = f;\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n) , inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n), inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let even = i;\n    let odd = i;\n    while (even % 2 === 0) {\n      even /= 2;\n    }\n    while (odd % 2 === 1) {\n      odd /= 2;\n    }\n    if (even === odd) {\n      result.push([even, odd]);\n    }\n  }\n  return result;\n};\n\nconst evenOddPalindrome = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let even = i;\n    let odd = i;\n    while (even % 2 === 0) {\n      even /= 2;\n    }\n    while (odd % 2 === 1) {\n      odd /= 2;\n    }\n    if (even === odd) {\n      result.push([even, odd]);\n    }\n  }\n  return result;\n};\n\nconst evenOddPalindrome = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    let a = i;\n    let b = i;\n    while (a % 2 === 0) {\n      a /= 2;\n    }\n    while (b % 2 === 1) {\n      b /= 2;\n    }\n    if (a === b) {\n      result.push([a, b]);\n    }\n    i++;\n  }\n  return result;\n};\n\nexport { evenOddPalindrome };\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0 .\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const arrLength = arr.length\n  const sum = arr.reduce((accum, curr) => accum + curr, 0)\n  const count = arr.reduce((accum, curr, index) => {\n    if (curr > 0) {\n      accum += 1\n    }\n    return accum\n  }, 0)\n  return count === arrLength? 0 : count\n}\n\n/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums2 = (arr) => {\n  const arrLength = arr.length\n  const sum = arr.reduce((accum, curr) => accum + curr, 0)\n  const count = arr.reduce((accum, curr, index) => {\n    if (curr > 0) {\n      accum += 1\n    }\n    return accum\n  }, 0)\n  return count === arrLength? 0 : count\n}\n\n/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums3 = (arr) => {\n  const arrLength = arr.length\n  const sum = arr.reduce((accum, curr) => accum + curr, 0)\n  const count = arr.reduce((accum, curr, index) => {\n    if (curr < 0) {\n      accum += 1\n    }\n    return accum\n  }, 0)\n  return count === arrLength? 0 : count\n}\n\nconst countNums4 = (arr) => {\n  const arrLength = arr.length\n  const sum = arr.reduce((accum, curr) => accum + curr, 0)\n  const count = arr.reduce((accum, curr, index) => {\n    if (curr > 0) {\n      accum += 1\n    }\n    return accum\n  }, 0)\n  return count === arrLength? 0 : count\n}\n\nconst countNums5 = (arr) => {\n  const arrLength = arr.length\n  const sum = arr.reduce((accum, curr) => accum + curr, 0)\n  const count = arr.reduce((accum, curr, index) => {\n    if (curr < 0) {\n      accum += 1\n    }\n    return accum\n  }, 0)\n  return count === arrLength? 0 : count\n}\n\nconst countNums6 = (arr) => {\n  const arrLength = arr.length\n  const sum = arr.reduce((accum, curr) => accum + curr, 0)\n  const count = arr.reduce((accum, curr, index) => {\n    if (curr === 0) {\n      accum += 1\n    }\n    return accum\n  }, 0)\n  return count === arrLength? 0 : count\n}\n\nconst countNums7 = (arr) => {\n  const arrLength = arr.length\n  const sum = arr.reduce((accum, curr) => accum + curr, 0)\n  const count = arr.reduce((accum, curr, index) => {\n    if (curr === -1) {\n      accum += 1\n    }\n    return accum\n  }, 0)\n  return count === arrLength? 0 : count\n}\n\nconst countNums8 = (arr) => {\n  const arrLength = arr.length\n  const sum = arr.reduce((accum, curr) => accum + curr, 0)\n  const count = arr.reduce((accum, curr, index) => {\n    if (curr === -2) {\n      accum += 1\n    }\n    return accum\n  }, 0)\n  return count === arrLength? 0 : count\n}\n\nconst countNums9 = (arr) => {\n  const arrLength = arr.length\n  const sum = arr.reduce((accum, curr) => accum + curr, 0)\n  const count = arr.reduce((accum, curr, index) => {\n    if (curr === -3) {\n      accum += 1\n    }\n    return accum\n  }, 0)\n  return count === arrLength? 0 : count\n}\n\nconst countNums10 = (arr) => {\n  const arrLength = arr.length\n  const sum = arr.reduce((accum, curr) => accum + curr, 0)\n  const count = arr.reduce((accum, curr, index) => {\n    if (curr === -4) {\n      accum += 1\n    }\n    return accum\n  }, 0)\n  return count === arrLength? 0 : count\n}\n\nconst countNums11 = (arr) => {\n  const arrLength = arr.length\n  const sum = arr.reduce((accum, curr) => accum + curr, 0)\n  const count = arr.reduce((accum, curr, index) => {\n    if (curr === -5) {\n      accum += 1\n    }\n"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integersarr[1 ], arr[2], ..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integersarr[1 ], arr[2],..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let ret = true;\n  for (let i = 0; i < arr.length - 1; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] < arr[i]) {\n        arr[i] += arr[j];\n        arr[j] = arr[i] - arr[j];\n        arr[i] = arr[i] - arr[j];\n        ret = false;\n      }\n    }\n  }\n  return ret;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return \"NO\";\n  }\n  if (lst1.length === 1) {\n    return \"NO\";\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== lst2[i] % 2) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let result = {}\n  let temp = {}\n  for (let i = 0; i < test.length; i++) {\n    let ch = test.charAt(i)\n    if (ch ==='') {\n      if (temp.hasOwnProperty(ch)) {\n        temp[ch] += 1\n      } else {\n        temp[ch] = 1\n      }\n    } else {\n      if (temp.hasOwnProperty(ch.toLowerCase())) {\n        temp[ch.toLowerCase()] += 1\n      } else {\n        temp[ch.toLowerCase()] = 1\n      }\n    }\n  }\n  for (let i in temp) {\n    if (result.hasOwnProperty(i)) {\n      result[i] += temp[i]\n    } else {\n      result[i] = temp[i]\n    }\n  }\n  return result\n}\n\n/*\n  Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram2 = (test) => {\n  let result = {}\n  for (let i = 0; i < test.length; i++) {\n    let ch = test.charAt(i)\n    if (ch ==='') {\n      if (result.hasOwnProperty(ch)) {\n        result[ch] += 1\n      } else {\n        result[ch] = 1\n      }\n    } else {\n      if (result.hasOwnProperty(ch.toLowerCase())) {\n        result[ch.toLowerCase()] += 1\n      } else {\n        result[ch.toLowerCase()] = 1\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram3 = (test) => {\n  let result = {}\n  for (let i = 0; i < test.length; i++) {\n    let ch = test.charAt(i)\n    if (ch ==='') {\n      if (result.hasOwnProperty(ch)) {\n        result[ch] += 1\n      } else {\n        result[ch] = 1\n      }\n    } else {\n      if (result.hasOwnProperty(ch.toLowerCase())) {\n        result[ch.toLowerCase()] += 1\n      } else {\n        result[ch.toLowerCase()] = 1\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram4 = (test) => {\n  let result = {}\n  for (let i = 0; i < test.length; i++) {\n    let ch = test.charAt(i)\n    if (ch ==='') {\n      if (result.hasOwnProperty(ch)) {\n        result[ch] += 1\n      } else {\n        result[ch] = 1\n      }\n    } else {\n      if (result.hasOwnProperty(ch.toLowerCase())) {\n        result[ch.toLowerCase()] += 1\n      } else {\n        result[ch.toLowerCase()] = 1\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n    const result = [];\n    const len = s.length;\n    let index = 0;\n    while (index < len) {\n        if (c.indexOf(s[index])!== -1) {\n            index += 1;\n        } else {\n            result.push(s[index]);\n            index += 1;\n        }\n    }\n    return result.reverse().join('');\n};\n\nconst reverseDelete_test = () => {\n    assert.equal(reverseDelete('abcdef', 'ae'), 'bcd');\n    assert.equal(reverseDelete('abcdef', 'b'), 'acdef');\n    assert.equal(reverseDelete('abcdedcba', 'ab'), 'cdedc');\n    assert.equal(reverseDelete('abcdef', 'c'), 'abcdef');\n    assert.equal(reverseDelete('abcdef', 'd'), 'abcdef');\n    assert.equal(reverseDelete('abcdef', 'e'), 'abcdef');\n    assert.equal(reverseDelete('abcdef', 'f'), 'abcdef');\n    assert.equal(reverseDelete('abcdef', 'g'), 'abcdef');\n    assert.equal(reverseDelete('abcdef', 'h'), 'abcdef');\n    assert.equal(reverseDelete('abcdef', 'i'), 'abcdef');\n    assert.equal(reverseDelete('abcdef', 'j'), 'abcdef');\n    assert.equal(reverseDelete('abcdef', 'k'), 'abcdef');\n    assert.equal(reverseDelete('abcdef', 'l'), 'abcdef');\n    assert.equal(reverseDelete('abcdef','m'), 'abcdef');\n    assert.equal(reverseDelete('abcdef', 'n'), 'abcdef');\n    assert.equal(reverseDelete('abcdef', 'o'), 'abcdef');\n    assert.equal(reverseDelete('abcdef', 'p'), 'abcdef');\n    assert.equal(reverseDelete('abcdef', 'q'), 'abcdef');\n    assert.equal(reverseDelete('abcdef', 'r'), 'abcdef');\n    assert.equal(reverseDelete('abcdef','s'), 'abcdef');\n    assert.equal(reverseDelete('abcdef', 't'), 'abcdef');\n    assert.equal(reverseDelete('abcdef', 'u'), 'abcdef');\n    assert.equal(reverseDelete('abcdef', 'v'), 'abcdef');\n    assert.equal(reverseDelete('abcdef', 'w'), 'abcdef');\n    assert.equal(reverseDelete('abcdef', 'x'), 'abcdef');\n    assert.equal(reverseDelete('abcdef', 'y'), 'abcdef');\n    assert.equal(reverseDelete('abcdef', 'z'), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''), 'abcdef');\n    assert.equal(reverseDelete('abcdef',''"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i].charAt(j) % 2 === 1) {\n        count += 1;\n      }\n    }\n    result.push(`the number of odd elements ${count} in the str4ng ${i + 1} of the ${lst.length}nput.`)\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    minSum = Math.min(nums[i], minSum + nums[i]);\n  }\n  return minSum;\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid ofwells . Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water .\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets .\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid ofwells. Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water.\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    let bucket = 0,\n        i = 0,\n        j = 0;\n\n    while (grid.length > 1) {\n        if (grid[i][j] === 1) {\n            bucket++;\n            grid[i][j] = 0;\n            if (bucket >= capacity) {\n                return bucket;\n            }\n        } else {\n            bucket = 0;\n            grid[i][j] = 1;\n        }\n        if (i + 1 < grid.length) {\n            i++;\n        } else {\n            grid.pop();\n            j++;\n        }\n    }\n    return bucket;\n};\n\nconst test = [\n    [\n        [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]],\n        1,\n        6\n    ],\n    [\n        [[0, 0, 0], [0, 0, 0]],\n        1,\n        0\n    ],\n    [\n        [[0, 0, 1, 1], [0, 0, 1, 1]],\n        2,\n        5\n    ],\n    [\n        [[0, 0, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0]],\n        5,\n        0\n    ],\n    [\n        [[0, 1, 1, 1, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0]],\n        2,\n        5\n    ]\n];\n\ntest.forEach(([grid, capacity, expected]) => {\n    console.log(`Test with capacity ${capacity}`);\n    console.log(`Expected ${expected}`);\n    console.log(`Actual: ${new Solution().emptyBuckets(grid, capacity)}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n    if (!Array.isArray(arr)) {\n        throw new Error(\"arr is not an array\");\n    }\n\n    const arrLen = arr.length;\n\n    if (arrLen === 0) {\n        return arr;\n    }\n\n    let sorted = arr;\n    let minCount = 1;\n\n    const getMinCount = (arr) => {\n        let minCount = arr[0];\n        for (let i = 1; i < arr.length; i++) {\n            if (arr[i] < minCount) {\n                minCount = arr[i];\n            }\n        }\n        return minCount;\n    };\n\n    while (minCount > 0) {\n        let arrNew = [];\n        let count = 0;\n        for (let i = 0; i < sorted.length; i++) {\n            if (minCount === sorted[i]) {\n                arrNew.push(sorted[i]);\n                count++;\n            }\n            if (count === minCount) {\n                break;\n            }\n        }\n        sorted = arrNew;\n        minCount = getMinCount(arrNew);\n    }\n\n    return sorted;\n};\n\nconst sortedArray = sortArray([-2, -3, -4, -5, -6]);\n\nconsole.log(sortedArray);\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let result = [];\n  let currentWord = \"\";\n  let index = 0;\n  let count = 0;\n  let length = s.length;\n  for (index = 0; index < length; index++) {\n    currentWord += s[index];\n    if (count === n) {\n      result.push(currentWord);\n      currentWord = \"\";\n      count = 0;\n    } else if (isVowel(s[index])) {\n      count++;\n    }\n  }\n  return result;\n};\n\nconst isVowel = c => {\n  return c === \"a\" || c === \"e\" || c === \"i\" || c === \"o\" || c === \"u\";\n};\n\nconsole.log(selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\nconsole.log(selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\"]\nconsole.log(selectWords(\"simple white space\", 2)); // []\nconsole.log(selectWords(\"Hello world\", 4)); // [\"world\"]\nconsole.log(selectWords(\"Uncle sam\", 3)); // [\"Uncle\"]\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  let startIndex = 0\n  let endIndex = 0\n  let closest = \"\"\n  for (let i = 0; i < word.length; i++) {\n    if (vowels.includes(word[i])) {\n      if (i > startIndex) {\n        if (word[i] < word[endIndex]) {\n          endIndex = i\n        }\n      } else {\n        startIndex = i\n      }\n    }\n  }\n  return (endIndex - startIndex > 0)? word.slice(startIndex, endIndex) : \"\"\n}\n\nconsole.log(getClosestVowel(\"yogurt\"))\nconsole.log(getClosestVowel(\"FULL\"))\nconsole.log(getClosestVowel(\"quick\"))\nconsole.log(getClosestVowel(\"ab\"))\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only .\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const isBalanced = (lst) => {\n    const len = lst.length\n    const sum = lst.reduce((acc, curr, i) => acc + curr.length, 0)\n    return sum === len\n  }\n  const check = (curr) => {\n    if (curr === '(') {\n      return isBalanced(curr)\n    }\n    if (curr === ')') {\n      return isBalanced(curr)\n    }\n    return false\n  }\n  const checker = (arr) => {\n    if (arr.length === 2) {\n      return check(arr[0]) && check(arr[1])\n    }\n    return check(arr[0]) && check(arr[1]) && check(arr[2])\n  }\n  return checker(lst)\n}\n\n/*\n  Find longest substring that matches a pattern.\n  */\nconst findLongest = (str, pat) => {\n  let longest = 0\n  let index = 0\n  let last = 0\n  let count = 0\n  let substr = ''\n  while (index < str.length) {\n    if (pat.test(str.substring(index, index + 1))) {\n      substr = str.substring(index)\n      count++\n      last = index\n      if (count > longest) {\n        longest = count\n        index = last + 1\n      }\n    }\n    index++\n  }\n  return substr\n}\n\n/*\n  Find longest substring that matches a pattern.\n  */\nconst findLongest2 = (str, pat) => {\n  let longest = 0\n  let index = 0\n  let last = 0\n  let count = 0\n  while (index < str.length) {\n    if (pat.test(str.substring(index, index + 1))) {\n      count++\n      last = index\n      if (count > longest) {\n        longest = count\n        index = last + 1\n      }\n    }\n    index++\n  }\n  return str.substring(0, longest)\n}\n\n/*\n  Find longest substring that matches a pattern.\n  */\nconst findLongest3 = (str, pat) => {\n  let longest = 0\n  let index = 0\n  let last = 0\n  let count = 0\n  while (index < str.length) {\n    if (pat.test(str.substring(index, index + 1))) {\n      count++\n      last = index\n      if (count > longest) {\n        longest = count\n        index = last + 1\n      }\n    }\n    index++\n  }\n  return str.substring(0, longest)\n}\n\n/*\n  Find longest substring that matches a pattern.\n  */\nconst findLongest4 = (str, pat) => {\n  let longest = 0\n  let index = 0\n  let last = 0\n  let count = 0\n  while (index < str.length) {\n    if (pat.test(str.substring(index, index + 1))) {\n      count++\n      last = index\n      if (count > longest) {\n        longest = count\n        index = last + 1\n      }\n    }\n    index++\n  }\n  return str.substring(0, longest)\n}\n\n/*\n  Find longest substring that matches a pattern.\n  */\nconst findLongest5 = (str, pat) => {\n  let longest = 0\n  let index = 0\n  let last = 0\n  let count = 0\n  while (index < str.length) {\n    if (pat.test(str.substring(index, index + 1))) {\n      count++\n      last = index\n      if (count > longest) {\n        longest = count\n        index = last + 1\n      }\n    }\n    index++\n  }\n  return str.substring(0, longest)\n}\n\n/*\n  Find longest substring that matches a pattern.\n  */\nconst findLongest6 = (str, pat) => {\n  let longest = 0\n  let index = 0\n  let last = 0\n  let count = 0\n  let substr = ''\n  while (index < str.length) {\n    if (pat.test(str.substring(index, index + 1))) {\n      substr = str.substring(index)\n      count++\n      last = index\n      if (count > longest) {\n        longest = count\n        index = last + 1\n      }\n    }\n    index++\n  }\n  return substr\n}\n\n/*\n  Find longest substring that matches a pattern.\n  */\nconst findLongest7 = (str, pat) => {\n  let longest = 0\n  let index = 0\n  let last = 0\n  let count = 0\n  let substr = ''\n  while (index < str.length) {\n    if (pat.test(str.substring(index, index + 1))) {\n      substr = str.substring(index)\n      count++\n      last = index\n      if (count > longest) {\n        longest = count\n        index = last + 1\n      }\n    }\n    index++\n  }\n  return substr\n}\n\n/*\n  Find longest substring that matches a pattern.\n  */\nconst findLongest8 = (str, pat) => {\n  let longest = 0\n  let index = 0\n  let last = 0\n  let count = 0\n  let substr = ''\n  while (index < str.length) {\n    if (pat.test(str.substring(index, index + 1))) {\n      "}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r .\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let index = 0\n  const arrLen = arr.length\n  const newArr = []\n  const max = arr[index]\n  for (let i = 0; i < arrLen; i++) {\n    if (arr[i] > max) {\n      newArr.push(max)\n      max = arr[i]\n      index = i\n    } else if (arr[i] === max) {\n      index = i\n    }\n    newArr.push(arr[i])\n    if (newArr.length === k) {\n      return newArr\n    }\n  }\n  newArr.push(max)\n  return newArr\n}\n\n// 测试\n// const arr = [-3, -4, 5]\n// console.log(maximum(arr, 3))\n// console.log(maximum(arr, 2))\n// console.log(maximum(arr, 1))\n\n// 答案\n// const arr = [-3, -4, 5]\n// console.log(maximum(arr, 3))\n// const arr = [4, -4, 4]\n// console.log(maximum(arr, 2))\n// const arr = [-3, 2, 1, 2, -1, -2, 1]\n// console.log(maximum(arr, 1))\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++) {\n        if(lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const twoDigit = (i, j) => (i + j) % 10 > 1;\n  const sum = (i, j) => arr[i] + arr[j];\n  let result = 0;\n  for (let i = 0; i <= k; i++) {\n    if (twoDigit(i, i + 1)) {\n      result += sum(i, i + 1);\n    }\n  }\n  return result;\n};\n\nmodule.exports = addElements;\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  return (collatz(n))\n}\n\nconst collatz = (n) => {\n  if (n === 1) {\n    return [1]\n  }\n  const oddCollatz = getOddCollatz(n)\n  const oddCollatzL = oddCollatz.length\n  const oddCollatzR = oddCollatz.length - 1\n  let next = oddCollatz[oddCollatzR]\n  while (next < n) {\n    const nextNext = oddCollatz[oddCollatzR + 1]\n    if (nextNext === 2 * next) {\n      next = next + 1\n    } else if (nextNext === 3 * next) {\n      next = next + 1\n    } else {\n      next = next\n    }\n  }\n  return oddCollatz.concat(next)\n}\n\n/*\n  Given a positive integer n, return a sorted list of its prime factors.\n */\nconst getPrimeFactors = (n) => {\n  const factors = []\n  const i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i = i + 1\n    }\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/*\n  Given a positive integer n, return the number of primes used to compose n.\n */\nconst getPrimeCount = (n) => {\n  const factors = getPrimeFactors(n)\n  let count = 0\n  for (let i = 0; i < factors.length; i++) {\n    const factor = factors[i]\n    for (let j = i + 1; j < factors.length; j++) {\n      const f1 = factors[i]\n      const f2 = factors[j]\n      if (f1 * f2 === n) {\n        count += 2\n      }\n    }\n  }\n  return count\n}\n\nmodule.exports = {\n  getOddCollatz,\n  collatz,\n  getPrimeFactors,\n  getPrimeCount\n}\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4 .The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4.The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n    //console.log(date);\n    if(date.length === 0) return false;\n    var dateParts = date.split(\"-\");\n    var month = parseInt(dateParts[1]);\n    var year = parseInt(dateParts[2]);\n    if(month < 1 || month > 12) return false;\n    if(month == 4 || month == 6 || month == 9 || month == 11) {\n        var day = parseInt(dateParts[0]);\n        if(day < 1 || day > 31) return false;\n    }\n    if(month == 2) {\n        var day = parseInt(dateParts[0]);\n        if(day < 1 || day > 29) return false;\n    }\n    if(year < 1000 || year > 2040) return false;\n    return true;\n}\n\nconst getStartDate = (year) => {\n    var month = 12;\n    var day = 31;\n    if(year % 4 === 0) {\n        if(year % 100 === 0) {\n            if(year % 400 === 0) {\n                month = 1;\n                day = 29;\n            } else {\n                month = 1;\n                day = 28;\n            }\n        } else {\n            month = 1;\n            day = 28;\n        }\n    } else {\n        month = 1;\n        day = 28;\n    }\n    return month + \"-\" + day + \"-\" + year;\n}\n\n/*\n * Function: getEndDate\n * Given a year, this function returns the end date of the given year.\n * @param {int} year: the year whose end date we are getting\n * @returns {string} the end date of the given year\n */\nconst getEndDate = (year) => {\n    var month = 12;\n    var day = 31;\n    if(year % 4 === 0) {\n        if(year % 100 === 0) {\n            if(year % 400 === 0) {\n                month = 1;\n                day = 29;\n            } else {\n                month = 1;\n                day = 28;\n            }\n        } else {\n            month = 1;\n            day = 28;\n        }\n    } else {\n        month = 1;\n        day = 28;\n    }\n    return month + \"-\" + day + \"-\" + year;\n}\n\nconst getNextMonth = (month) => {\n    if(month == 1) {\n        return 2;\n    } else if(month == 2) {\n        return 3;\n    } else if(month == 3) {\n        return 4;\n    } else if(month == 4) {\n        return 5;\n    } else if(month == 5) {\n        return 6;\n    } else if(month == 6) {\n        return 7;\n    } else if(month == 7) {\n        return 8;\n    } else if(month == 8) {\n        return 9;\n    } else if(month == 9) {\n        return 10;\n    } else if(month == 10) {\n        return 11;\n    } else if(month == 11) {\n        return 0;\n    }\n}\n\nconst getPreviousMonth = (month) => {\n    if(month == 0) {\n        return 11;\n    } else if(month == 1) {\n        return 10;\n    } else if(month == 2) {\n        return 9;\n    } else if(month == 3) {\n        return 8;\n    } else if(month == 4) {\n        return 7;\n    } else if(month == 5) {\n        return 6;\n    } else if(month == 6) {\n        return 5;\n    } else if(month == 7) {\n        return 4;\n    } else if(month == 8) {\n        return 3;\n    } else if(month == 9) {\n        return 2;\n    } else if(month == 10) {\n        return 1;\n    } else if(month == 11) {\n        return 0;\n    }\n}\n\nconst getNextYear = (year) => {\n    if(year % 4 === 0) {\n        if(year % 100 === 0) {\n            if(year % 400 === 0) {\n                return year + 1;\n            } else {\n                return year + 1;\n            }\n        } else {\n            return year + 1;\n        }\n    } else {\n        return year + 1;\n    }\n}\n\nconst getPreviousYear = (year) => {\n    if(year % 4 === 0) {\n        if(year % 100 === 0) {\n            if(year % 400 === 0) {\n                return year - 1;\n            } else {\n                return year - 1;\n            }\n        } else {\n            return year - 1;\n        }\n    } else {\n        return year - 1;\n    }\n}\n\nmodule.exports = {\n    getStartDate: getStartDate,\n    getEndDate: getEndDate,\n    getNextMonth: getNextMonth,\n    getPreviousMonth: getPreviousMonth,\n    getNextYear: getNextYear,\n    getPreviousYear: getPreviousYear,\n    validDate: validDate\n}\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0 , ord('b')= 1, .. . ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = txt.split(/\\s+/g);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let last = result[result.length - 1];\n    if (last && last[1] === words[i]) {\n      result[result.length - 1] = [last[0], last[1] + words[i]];\n    } else {\n      result.push([words[i], words[i]]);\n    }\n  }\n  return result;\n};\n\n/*\n * Given a list of words, return a list of unique words.\n * Assume the list of words are already deduplicated.\n */\nconst getUniqueWords = (words) => {\n  let unique = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (unique.indexOf(word) < 0) {\n      unique.push(word);\n    }\n  }\n  return unique;\n};\n\n/*\n * Given a string, return a list of its words.\n * A word is defined as a string that contains only letters (or digits).\n */\nconst getWords = (txt) => {\n  let words = txt.split(/\\s+/g);\n  let unique = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length >= 2 && /[a-zA-Z]/.test(word[0]) && /[a-zA-Z]/.test(word[word.length - 1])) {\n      unique.push(word);\n    }\n  }\n  return unique;\n};\n\n/*\n * Given a string, return the number of words.\n * A word is defined as a string that contains only letters (or digits).\n */\nconst countWords = (txt) => {\n  let words = txt.split(/\\s+/g);\n  return words.length;\n};\n\n/*\n * Given a string, return the number of lines.\n * A line is a string that ends with a space.\n */\nconst countLines = (txt) => {\n  return txt.split(/\\n/g).length;\n};\n\n/*\n * Given a string, return the number of characters.\n */\nconst countChars = (txt) => {\n  return txt.length;\n};\n\n/*\n * Given a string, return the number of lines.\n * A line is a string that ends with a space.\n */\nconst countSpaceChars = (txt) => {\n  return txt.split(/\\s/g).length;\n};\n\n/*\n * Given a string, return the number of spaces.\n */\nconst countSpaceChars = (txt) => {\n  return txt.split(/\\s/g).length;\n};\n\n/*\n * Given a string, return the number of words.\n * A word is defined as a string that contains only letters (or digits).\n */\nconst countWords = (txt) => {\n  return txt.split(/\\s+/g).length;\n};\n\n/*\n * Given a string, return the number of lines.\n * A line is a string that ends with a space.\n */\nconst countLines = (txt) => {\n  return txt.split(/\\n/g).length;\n};\n\n/*\n * Given a string, return the number of lines.\n * A line is a string that ends with a space.\n */\nconst countWords = (txt) => {\n  return txt.split(/\\s+/g).length;\n};\n\nmodule.exports = {\n  splitWords,\n  getUniqueWords,\n  getWords,\n  countWords,\n  countLines,\n  countChars,\n  countSpaceChars\n};<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const key = lst[i];\n    if (map.has(key)) {\n      return false;\n    }\n    map.set(key, i);\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let start = interval1[0];\n  let end = interval1[1];\n  let start2 = interval2[0];\n  let end2 = interval2[1];\n  if (start <= start2 && end >= end2) {\n    return 'YES';\n  }\n  return 'NO';\n};\n\n/*\n  [input/output] samples:\n  intersection((-3, -1), (-5, 5)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((1, 2), (2, 3)) ==> \"YES\"\n*/\nconst intersects = (interval1, interval2) => {\n  return (\n    (interval1[0] <= interval2[0] && interval1[1] >= interval2[1]) ||\n    (interval1[0] >= interval2[0] && interval1[1] <= interval2[1])\n  );\n};\n\nconst isPrime = (n) => {\n  let sqrt = Math.sqrt(n);\n  for (let i = 2; i <= sqrt; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  [input/output] samples:\n  isPrime(0) ==> false\n  isPrime(1) ==> true\n  isPrime(9) ==> true\n  isPrime(11) ==> true\n  isPrime(13) ==> false\n*/\nconst isPrimeNumber = (n) => {\n  return isPrime(n) && n > 1;\n};\n\nconst primeNumber = (n) => {\n  let p = 2;\n  while (p * p <= n) {\n    if (n % p === 0) {\n      return false;\n    }\n    p += 1;\n  }\n  return true;\n};\n\nconst numberToString = (n) => {\n  let s = '';\n  while (n > 0) {\n    s += n % 10;\n    n = n / 10;\n  }\n  return s;\n};\n\nconst stringToNumber = (s) => {\n  let n = 0;\n  for (let i = s.length - 1; i >= 0; i--) {\n    n += (s[i] - '0') * Math.pow(10, i);\n  }\n  return n;\n};\n\n/*\n  [input/output] samples:\n  numberToString(13) ==> \"13\"\n  numberToString(0) ==> \"0\"\n  numberToString(1) ==> \"1\"\n*/\nconst numberToString = (n) => {\n  return numberToString(n);\n};\n\nconst isPalindrome = (s) => {\n  let sCopy = s;\n  for (let i = 0, j = s.length - 1; i < j; i++, j--) {\n    if (sCopy[i]!== sCopy[j]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  [input/output] samples:\n  isPalindrome(\"abc\") ==> true\n  isPalindrome(\"ab\") ==> false\n  isPalindrome(\"a\") ==> true\n  isPalindrome(\"\") ==> true\n  isPalindrome(\"aa\") ==> false\n  isPalindrome(\"abcd\") ==> false\n*/\nconst isPalindrome = (s) => {\n  let sCopy = s;\n  return isPalindrome(sCopy.reverse());\n};\n\n/*\n  [input/output] samples:\n  reverse(\"abc\") ==> \"cba\"\n  reverse(\"\") ==> \"\"\n  reverse(\"abcde\") ==> \"edcb\"\n*/\nconst reverse = (s) => {\n  let sCopy = s;\n  let p = sCopy.length;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < p && j >= 0) {\n    let tmp = sCopy[i];\n    sCopy[i] = sCopy[j];\n    sCopy[j] = tmp;\n    i++;\n    j--;\n  }\n  return sCopy;\n};\n\n/*\n  [input/output] samples:\n  reverse(\"abc\") ==> \"cba\"\n  reverse(\"\") ==> \"\"\n  reverse(\"abcde\") ==> \"edcb\"\n*/\nconst reverse = (s) => {\n  let p = s.length;\n  let i = 0;\n  let j = p - 1;\n  while (i < p) {\n    let tmp = s[i];\n    s[i] = s[j];\n    s[j] = tmp;\n    i++;\n    j--;\n  }\n  return s;\n};\n\nconst sum = (a, b) => {\n  return a + b;\n};\n\n/*\n  [input/output] samples:\n  sum(0, 0) ==> 0\n  sum(1, 1) ==> 2\n  sum(1, 0) ==> 1\n  sum(0, 1) ==> 1\n*/\nconst sum = (a, b) => {\n  return a + b;\n};\n\nconst getPrimeNumbers = (start, end"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const signs = [];\n  const len = arr.length;\n  for (let i = 0; i < len; i++) {\n    const sign = prodSign(arr[i]);\n    if (sign) {\n      signs.push(sign);\n    }\n  }\n  return signs;\n};\n\nexport default prodSigns;\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid . You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid. You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const rows = grid.length\n  const cols = grid[0].length\n  const grid_data = grid[0].map(row => row.map(cell => cell))\n  let prev_row = grid_data[0]\n  let prev_col = grid_data[0][0]\n  let result = []\n  let visited = []\n  for (let i = 1; i <= rows; i++) {\n    for (let j = 1; j <= cols; j++) {\n      if (grid_data[i][j] === undefined) {\n        continue\n      }\n      for (let k = 1; k <= k; k++) {\n        if (prev_row[k - 1] === undefined) {\n          continue\n        }\n        if (prev_row[k - 1] === undefined) {\n          continue\n        }\n        if (prev_col[k - 1] === undefined) {\n          continue\n        }\n        if (prev_col[k - 1] === undefined) {\n          continue\n        }\n        let cell = prev_row[k - 1][prev_col[k - 1]]\n        if (visited.indexOf(cell) === -1) {\n          visited.push(cell)\n          if (k === k) {\n            result.push(cell)\n          }\n        }\n      }\n      prev_row[k - 1] = undefined\n      prev_col[k - 1] = undefined\n    }\n    prev_row = grid_data[i]\n    prev_col = grid_data[i][0]\n  }\n  return result\n}\n\nexport default minPath\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const arr = []\n  let p = 1\n  let q = 1\n  let k = 0\n  for (let i = 1; i <= n; i++) {\n    let cur = p + q\n    arr.push(cur)\n    if (i === 2) {\n      p = q\n      q = cur\n      k++\n    }\n  }\n  return arr\n}\n\nconst tri_2 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(tri(i))\n  }\n  return arr\n}\n\nconst tribonacci = (n) => {\n  const arr = []\n  let p = 1\n  let q = 1\n  let k = 0\n  for (let i = 1; i <= n; i++) {\n    let cur = p + q\n    arr.push(cur)\n    if (i === 2) {\n      p = q\n      q = cur\n      k++\n    }\n  }\n  return arr\n}\n\nconst tribonacci_2 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(tribonacci(i))\n  }\n  return arr\n}\n\nexport {tri, tri_2, tribonacci, tribonacci_2}\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  if (n % 2 === 0) return 0\n  return digits(n / 2) + n % 2\n}\n\nconsole.log(digits(1))\nconsole.log(digits(4))\nconsole.log(digits(235))\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]] ' ) ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]]') ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n  const chars = []\n  const result = []\n  let counter = 0\n  let currentChar = str[counter]\n  while (currentChar!== undefined) {\n    if (currentChar === '[') {\n      counter = counter + 1\n      chars.push(currentChar)\n      currentChar = str[counter]\n    } else if (currentChar === ']') {\n      if (chars.length > 0) {\n        const index = chars.indexOf(currentChar)\n        if (index === -1) {\n          result.push(false)\n        } else {\n          result.push(true)\n          chars.splice(index, 1)\n        }\n      } else {\n        result.push(false)\n      }\n      counter = counter + 1\n      currentChar = str[counter]\n    } else {\n      currentChar = ''\n    }\n  }\n  return result\n}\n\nconst str = '[]'\n\nconsole.log(isNe(str))\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for(let i = 0; i < lst.length; i++){\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nmodule.exports = sumSquares\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isALetter = /[a-zA-Z]/.test(lastChar);\n  return (isALetter &&!/[0-9]/.test(lastChar));\n}\n\n/*\n  Create a function that returns trueif th e first character  of a given string is a letter, and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfFirstCharIsALetter(\"apple pie\") ➞ true\n  checkIfFirstCharIsALetter(\"apple pi e\") ➞ false\n  checkIfFirstCharIsALetter(\"apple pi e \") ➞ false\n  checkIfFirstCharIsALetter(\"\") ➞ false\n  */\nconst checkIfFirstCharIsALetter = (txt) => {\n  let firstChar = txt.slice(0,1);\n  let isALetter = /[a-zA-Z]/.test(firstChar);\n  return (isALetter &&!/[0-9]/.test(firstChar));\n}\n\n/*\n  Create a function that returns trueif th e first character  of a given string is a letter, and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfFirstCharIsALetter(\"apple pie\") ➞ true\n  checkIfFirstCharIsALetter(\"apple pi e\") ➞ false\n  checkIfFirstCharIsALetter(\"apple pi e \") ➞ false\n  checkIfFirstCharIsALetter(\"\") ➞ false\n  */\nconst checkIfFirstCharIsALetter = (txt) => {\n  let firstChar = txt.slice(0,1);\n  let isALetter = /[a-zA-Z]/.test(firstChar);\n  return (isALetter &&!/[0-9]/.test(firstChar));\n}\n\n/*\n  Create a function that returns trueif th e first character  of a given string is a letter, and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfFirstCharIsALetter(\"apple pie\") ➞ true\n  checkIfFirstCharIsALetter(\"apple pi e\") ➞ false\n  checkIfFirstCharIsALetter(\"apple pi e \") ➞ false\n  checkIfFirstCharIsALetter(\"\") ➞ false\n  */\nconst checkIfFirstCharIsALetter = (txt) => {\n  let firstChar = txt.slice(0,1);\n  let isALetter = /[a-zA-Z]/.test(firstChar);\n  return (isALetter &&!/[0-9]/.test(firstChar));\n}\n\n/*\n  Create a function that returns trueif th e last character  of a given string is a letter, and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isALetter = /[a-zA-Z]/.test(lastChar);\n  return (isALetter &&!/[0-9]/.test(lastChar));\n}\n\n/*\n  Create a function that returns trueif th e first character  of a given string is a letter, and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfFirstCharIsALetter(\"apple pie\") ➞ true\n  checkIfFirstCharIsALetter(\"apple pi e\") ➞ false\n  checkIfFirstCharIsALetter(\"apple pi e \") ➞ false\n  checkIfFirstCharIsALetter(\"\") ➞ false\n  */\nconst checkIfFirstCharIsALetter = (txt) => {\n  let firstChar = txt.slice(0,1);\n  let isALetter = /[a-zA-Z]/.test(firstChar);\n  return (isALetter &&!/[0-9]/.test(firstChar));\n}\n\n/*\n  Create a function that returns trueif th e last character  of a given string is a letter, and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isALetter = /[a-zA-Z]/.test(lastChar);\n  return (isALetter &&!/[0-9]/.test(lastChar));\n}\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n    const arr2 = arr.slice();\n    let i = 0;\n    while (i < arr2.length - 1) {\n        const j = i + 1;\n        const k = i + 2;\n        while (j < arr2.length) {\n            if (arr2[j] >= arr2[i]) {\n                return j;\n            }\n            j++;\n        }\n        i++;\n    }\n    return -1;\n};\n\n/*\n  Create a function which returns the max of two values.\n  */\nconst max = (a, b) => {\n    if (a > b) {\n        return a;\n    }\n    return b;\n};\n\n/*\n  Create a function which returns the max of two values.\n  */\nconst min = (a, b) => {\n    if (a < b) {\n        return a;\n    }\n    return b;\n};\n\nconst sum = (arr) => {\n    const arr2 = arr.slice();\n    let i = 0;\n    while (i < arr2.length) {\n        let sum = 0;\n        for (let j = i; j < arr2.length; j++) {\n            sum += arr2[j];\n        }\n        if (sum > 0) {\n            return sum;\n        }\n        i++;\n    }\n    return 0;\n};\n\nconst product = (arr) => {\n    let product = 1;\n    let i = 0;\n    while (i < arr.length) {\n        product *= arr[i];\n        i++;\n    }\n    return product;\n};\n\nconst mean = (arr) => {\n    let sum = 0;\n    let i = 0;\n    while (i < arr.length) {\n        sum += arr[i];\n        i++;\n    }\n    return sum / arr.length;\n};\n\nconst median = (arr) => {\n    let sum = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    while (i < arr.length) {\n        sum += arr[i];\n        j++;\n        k++;\n        if (j > i) {\n            sum += arr[j];\n        }\n        i++;\n    }\n    return sum / 2;\n};\n\nconst standardDeviation = (arr) => {\n    let mean = mean(arr);\n    let sum = 0;\n    let i = 0;\n    while (i < arr.length) {\n        sum += (arr[i] - mean) * (arr[i] - mean);\n        i++;\n    }\n    return Math.sqrt(sum / arr.length);\n};\n\nconst mode = (arr) => {\n    let mode = [];\n    let max = 0;\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] > max) {\n            max = arr[i];\n            mode.push(arr[i]);\n        }\n        i++;\n    }\n    return mode;\n};\n\nconst modeInArray = (arr) => {\n    let max = 0;\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n        i++;\n    }\n    let mode = [];\n    let modeIndex = 0;\n    i = 0;\n    while (i < arr.length) {\n        if (arr[i] === max) {\n            mode.push(arr[i]);\n            modeIndex = i;\n        }\n        i++;\n    }\n    return [mode, modeIndex];\n};\n\nconst standardDeviationInArray = (arr) => {\n    let mean = meanInArray(arr);\n    let sum = 0;\n    let i = 0;\n    while (i < arr.length) {\n        sum += (arr[i] - mean) * (arr[i] - mean);\n        i++;\n    }\n    return Math.sqrt(sum / arr.length);\n};\n\nconst modeInArray2 = (arr) => {\n    let max = 0;\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n        i++;\n    }\n    let mode = [];\n    let modeIndex = 0;\n    i = 0;\n    while (i < arr.length) {\n        if (arr[i] === max) {\n            mode.push(arr[i]);\n            modeIndex = i;\n        }\n        i++;\n    }\n    return [mode, modeIndex];\n};\n\nconst modeInArray3 = (arr) => {\n    let max = 0;\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n        i++;\n    }\n    let mode = [];\n    let modeIndex = 0;\n    let sum = 0;\n    i = 0;\n    while (i < arr.length) {\n        if (arr[i] === max) {\n            mode.push(arr[i]);\n            modeIndex = i;\n        }\n        sum += (arr[i] - max) * (arr[i] - max);\n        i++;\n    }\n    return [mode, modeIndex];\n};\n\nconst modeInArray4 = (arr) => {\n    let max = 0;\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n        i++;\n    }\n    let mode = [];\n    let modeIndex = 0;\n    let sum = 0;\n    i = 0;\n    while (i < arr.length) {\n        if (arr[i] === max) {\n            mode.push(arr["}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tup le (a , b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers , return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns a tup le (a, b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const {min, max} = lst.reduce((acc, x) => ({\n   ...acc,\n    [x]: x\n  }), {\n   ...lst[0],\n   ...lst[lst.length - 1]\n  })\n  const isPositive = (x) => x >= 0\n  const isNegative = (x) => x < 0\n  const isNull = (x) => x === null\n\n  if (isNull(min) || isNull(max)) {\n    return null\n  }\n  if (isPositive(min) && isNegative(max)) {\n    return largestSmallestIntegers([min, -max])\n  }\n  if (isPositive(min) || isNegative(max)) {\n    return largestSmallestIntegers([max, min])\n  }\n  if (min === max) {\n    return largestSmallestIntegers([min, min])\n  }\n  return largestSmallestIntegers([min, max])\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const {min, max} = lst.reduce((acc, x) => ({\n   ...acc,\n    [x]: x\n  }), {\n   ...lst[0],\n   ...lst[lst.length - 1]\n  })\n  if (isNull(min) || isNull(max)) {\n    return null\n  }\n  if (isPositive(min) && isNegative(max)) {\n    return largestSmallestIntegers([min, -max])\n  }\n  if (isPositive(min) || isNegative(max)) {\n    return largestSmallestIntegers([max, min])\n  }\n  if (min === max) {\n    return largestSmallestIntegers([min, min])\n  }\n  return largestSmallestIntegers([min, max])\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const {min, max} = lst.reduce((acc, x) => ({\n   ...acc,\n    [x]: x\n  }), {\n   ...lst[0],\n   ...lst[lst.length - 1]\n  })\n  if (isNull(min) || isNull(max)) {\n    return null\n  }\n  if (isPositive(min) && isNegative(max)) {\n    return largestSmallestIntegers([min, -max])\n  }\n  if (isPositive(min) || isNegative(max)) {\n    return largestSmallestIntegers([max, min])\n  }\n  if (min === max) {\n    return largestSmallestIntegers([min, min])\n  }\n  return largestSmallestIntegers([min, max])\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const {min, max} = lst.reduce((acc, x) => ({\n   ...acc,\n    [x]: x\n  }), {\n   ...lst[0],\n   ...lst[lst.length - 1]\n  })\n  if (isNull(min) || isNull(max)) {\n    return null\n  }\n  if (isPositive(min) && isNegative(max)) {\n    return largestSmallestIntegers([min, -max])\n  }\n  if (isPositive(min) || isNegative(max)) {\n    return largestSmallestIntegers([max, min])\n  }\n  if (min === max) {\n    return largestSmallestIntegers([min, min])\n  }\n  return largestSmallestIntegers([min, max])\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const {min, max} = lst.reduce((acc, x) => ({\n   ...acc,\n    [x]: x\n  }), {\n   ...lst[0],\n   ...lst[lst.length - 1]\n  })\n  if (isNull(min) || isNull(max)) {\n    return null\n  }\n  if (isPositive(min) && isNegative(max)) {\n    return largestSmallestIntegers([min, -max])\n  }\n  if (isPositive(min) || isNegative(max)) {\n    return largestSmallestIntegers([max, min])\n  }\n  if (min === max) {\n    return largestSmallestIntegers([min, min])\n  }\n  return largestSmallestIntegers([min, max])\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const {min, max} = lst.reduce((acc, x) => ({\n   ...acc,\n    [x]: x\n  }), {\n   ...lst[0],\n   ...lst[lst.length - 1]\n  })\n  if (isNull(min) || isNull(max)) {\n    return null\n  }\n  if (isPositive(min) && isNegative(max)) {\n    return largestSmallestIntegers([min, -max])\n  }\n  if (isPositive(min) || isNegative(max)) {\n    return largestSmallestIntegers([max, min])\n  }\n  if (min === max) {\n    return largestSmallestIntegers([min, min])\n  }\n  return largestSmallestIntegers([min, max])\n}\n\nconst largestSmallestIntegers = (lst) => {\n  const {min, max} = lst.reduce((acc, x) => ({\n   ...acc,\n    [x]: x\n  }), {\n   ...lst[0],\n   ...lst[lst.length - 1]\n  })\n  if (isNull(min) || isNull(max)) {\n    return null\n  }\n  if (isPositive(min) &&"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or ,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n  const compare = function (a, b) {\n    if (a === b) return null\n    if (typeof a === 'number' && typeof b === 'number') {\n      return a > b? 1 : a < b? -1 : 0\n    } else if (typeof a ==='string' && typeof b ==='string') {\n      return a > b? 1 : a < b? -1 : 0\n    }\n    return null\n  }\n  return compare(a, b)\n}\n\nmodule.exports = compareOne\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n    return n > 1 && (n % 2 === 0) && (n % 4 === 0) && (n % 8 === 0);\n};\n\nconst addEvens = (n) => {\n    return n * (n + 1) / 2;\n};\n\nconst addOdds = (n) => {\n    return n * (3 * n + 1) / 2;\n};\n\nconst sumEvens = (n) => {\n    return addEvens(n) + addOdds(n);\n};\n\nconst sumOdds = (n) => {\n    return addOdds(n) + addOdds(n);\n};\n\nconst getSum = (n) => {\n    return isEqualToSumEven(n)? sumEvens(n) : sumOdds(n);\n};\n\nconsole.log(getSum(10));\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst brazillian_factorial = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * brazillian_factorial(n - 1);\n};\n\nconst factorial = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\nconst main = () => {\n  console.log(specialFactorial(4));\n  console.log(brazillian_factorial(4));\n  console.log(factorial(4));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n    var spaces = text.split(' ');\n    var newtext = text.replace(/\\s/g, '_');\n    if (spaces.length > 1) {\n        for (var i = 0; i < spaces.length - 1; i++) {\n            newtext = newtext.replace(spaces[i], spaces[i+1]);\n        }\n        newtext = newtext.replace(/\\s/g, '_');\n    }\n    return newtext;\n};\n\nconst spaces = fixSpaces(\"This is a space\");\nconsole.log(spaces); // This is a _space\nconsole.log(fixSpaces(\"This is a space\")); // This is a _space\n\nconst spaces2 = fixSpaces(\"This is a space 1\");\nconsole.log(spaces2); // This is a _space 1\nconsole.log(fixSpaces(\"This is a space 1\")); // This is a _space 1\n\nconst spaces3 = fixSpaces(\"This is a space 1 This is a space 2\");\nconsole.log(spaces3); // This is a _space 1 This is a _space 2\nconsole.log(fixSpaces(\"This is a space 1 This is a space 2\")); // This is a _space 1 This is a _space 2\n\nconst spaces4 = fixSpaces(\"This is a space 1 This is a space 2 This is a space 3\");\nconsole.log(spaces4); // This is a _space 1 This is a _space 2 This is a _space 3\nconsole.log(fixSpaces(\"This is a space 1 This is a space 2 This is a space 3\")); // This is a _space 1 This is a _space 2 This is a _space 3\n\nconst spaces5 = fixSpaces(\"This is a space 1 This is a space 2 This is a space 3 This is a space 4\");\nconsole.log(spaces5); // This is a _space 1 This is a _space 2 This is a _space 3 This is a _space 4\nconsole.log(fixSpaces(\"This is a space 1 This is a space 2 This is a space 3 This is a space 4\")); // This is a _space 1 This is a _space 2 This is a _space 3 This is a _space 4\n\nconst spaces6 = fixSpaces(\"This is a space 1 This is a space 2 This is a space 3 This is a space 4 This is a space 5\");\nconsole.log(spaces6); // This is a _space 1 This is a _space 2 This is a _space 3 This is a _space 4 This is a _space 5\nconsole.log(fixSpaces(\"This is a space 1 This is a space 2 This is a space 3 This is a space 4 This is a space 5\")); // This is a _space 1 This is a _space 2 This is a _space 3 This is a _space 4 This is a _space 5\n\nconst spaces7 = fixSpaces(\"This is a space 1 This is a space 2 This is a space 3 This is a space 4 This is a space 5 This is a space 6\");\nconsole.log(spaces7); // This is a _space 1 This is a _space 2 This is a _space 3 This is a _space 4 This is a _space 5 This is a _space 6\nconsole.log(fixSpaces(\"This is a space 1 This is a space 2 This is a space 3 This is a space 4 This is a space 5 This is a space 6\")); // This is a _space 1 This is a _space 2 This is a _space 3 This is a _space 4 This is a _space 5 This is a _space 6\n\nconst spaces8 = fixSpaces(\"This is a space 1 This is a space 2 This is a space 3 This is a space 4 This is a space 5 This is a space 6 This is a space 7\");\nconsole.log(spaces8); // This is a _space 1 This is a _space 2 This is a _space 3 This is a _space 4 This is a _space 5 This is a _space 6 This is a _space 7\nconsole.log(fixSpaces(\"This is a space 1 This is a space 2 This is a space 3 This is a space 4 This is a space 5 This is a space 6 This is a space 7\")); // This is a _space 1 This is a _space 2 This is a _space 3 This is a _space 4 This is a _space 5 This is a _space 6 This is a _space 7\n\nconst spaces9 = fixSpaces(\"This is a space 1 This is a space 2 This is a space 3 This is a space 4 This is a space 5 This is a space 6 This is a space 7 This is a space 8\");\nconsole.log(spaces9); // This is a _space 1 This is a _space 2 This is a _space 3 This is a _space 4 This is a _space 5 This is a _space 6 This is a _space 7 This is a _space 8\nconsole.log(fixSpaces(\"This is a space 1 This is a space 2 This is a space 3 This is a space 4 This is a space 5 This is a space 6 This is a space 7 This is a space 8\")); // This is a _space 1 This is a _space 2 This is a _space 3 This is a _space 4 This is a _space 5 This is a _space 6 This is a _space 7 This is a _space 8\n\nconst spaces10 = fixSpaces(\"This is a space 1 This is a space 2 This is a space 3 This is a space 4 This is a space 5 This is a space 6 This is a space 7 This is a space 8 This is a space 9\");\nconsole.log(spaces10); // This is a _space 1 This is a _space 2 This is a _space 3 This is a _space 4 This is a _space 5 This is a _space 6 This is a _space 7 This is a _space 8 This is a _space 9\nconsole.log(fixSpaces(\"This is a space 1 This is a space 2 This is a space 3 This is a space 4 This is a space 5 This is a space 6 This is a space 7 This is a space 8 This is a space 9\")); // This is a _space 1 This is a _space 2"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file 's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d ' A'-'Z') .  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d'A'-'Z').  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n    let check = false\n    let i = 0\n    while (i < file_name.length) {\n        if (file_name[i].match(/^[a-zA-Z]/)) {\n            check = true\n        } else {\n            check = false\n            break\n        }\n        i++\n    }\n    if (check) {\n        let name_end = file_name.indexOf('.')\n        if (name_end > 0) {\n            let ext = file_name.substring(name_end + 1, file_name.length)\n            if (ext === 'txt' || ext === 'exe' || ext === 'dll') {\n                check = true\n            } else {\n                check = false\n            }\n        } else {\n            check = false\n        }\n    }\n    return check\n}\n\nexport default fileNameCheck\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  const isNotMultipleOf3 = (index) => index % 3!== 0\n  const isNotMultipleOf4 = (index) => index % 4!== 0\n  const sum = (x) => x * x\n  const square = (x) => x * x\n  return lst.reduce((accum, current) => {\n    if (isNotMultipleOf3(current) && isNotMultipleOf4(current)) {\n      accum += square(current)\n    }\n    return accum\n  }, 0)\n}\n\n/*\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresRev = (lst) => {\n  const isNotMultipleOf3 = (index) => index % 3!== 0\n  const isNotMultipleOf4 = (index) => index % 4!== 0\n  const sum = (x) => x * x\n  const square = (x) => x * x\n  return lst.reduce((accum, current) => {\n    if (isNotMultipleOf3(current) && isNotMultipleOf4(current)) {\n      accum += square(current)\n    }\n    return accum\n  }, 0)\n}\n\n/*\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresRevRev = (lst) => {\n  const isNotMultipleOf3 = (index) => index % 3!== 0\n  const isNotMultipleOf4 = (index) => index % 4!== 0\n  const sum = (x) => x * x\n  const square = (x) => x * x\n  return lst.reduce((accum, current) => {\n    if (isNotMultipleOf3(current) && isNotMultipleOf4(current)) {\n      accum += square(current)\n    }\n    return accum\n  }, 0)\n}\n\n/*\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresRevRevRev = (lst) => {\n  const isNotMultipleOf3 = (index) => index % 3!== 0\n  const isNotMultipleOf4 = (index) => index % 4!== 0\n  const sum = (x) => x * x\n  const square = (x) => x * x\n  return lst.reduce((accum, current) => {\n    if (isNotMultipleOf3(current) && isNotMultipleOf4(current)) {\n      accum += square(current)\n    }\n    return accum\n  }, 0)\n}\n\nconst sumSquares = (lst) => {\n  const isNotMultipleOf3 = (index) => index % 3!== 0\n  const isNotMultipleOf4 = (index) => index % 4!== 0\n  const sum = (x) => x * x\n  const square = (x) => x * x\n  return lst.reduce((accum, current) => {\n    if (isNotMultipleOf3(current) && isNotMultipleOf4(current)) {\n      accum += square(current)\n    }\n    return accum\n  }, 0)\n}\n\n/*\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries."}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const words = [];\n    let currWord = \"\";\n    let i = 0;\n    while (i < sentence.length) {\n        if (sentence[i]!== \" \") {\n            currWord += sentence[i];\n        } else {\n            words.push(currWord);\n            currWord = \"\";\n        }\n        i++;\n    }\n    return words;\n};\n\nconst convertSentenceToPrime = (sentence) => {\n    const words = wordsInSentence(sentence);\n    const primeNumbers = [];\n    let currPrimeNumber = 1;\n    let currNumber = 1;\n    for (let i = 0; i < words.length; i++) {\n        if (words[i] === \"\") {\n            continue;\n        }\n        if (currNumber === currPrimeNumber) {\n            currPrimeNumber++;\n            primeNumbers.push(currNumber);\n            currNumber++;\n        } else {\n            currPrimeNumber++;\n            primeNumbers.push(currNumber);\n            currNumber++;\n        }\n    }\n    return primeNumbers;\n};\n\nconst isPrime = (number) => {\n    let currPrimeNumber = 1;\n    while (currPrimeNumber * currPrimeNumber <= number) {\n        if (number % currPrimeNumber === 0) {\n            return false;\n        }\n        currPrimeNumber++;\n    }\n    return true;\n};\n\nconst findNextPrime = (primeNumbers) => {\n    let nextPrimeNumber = 1;\n    let index = -1;\n    for (let i = 0; i < primeNumbers.length; i++) {\n        if (isPrime(primeNumbers[i] + 1)) {\n            nextPrimeNumber = primeNumbers[i] + 1;\n            index = i;\n            break;\n        }\n    }\n    return nextPrimeNumber;\n};\n\nconst getNextPrime = (primeNumbers) => {\n    let nextPrimeNumber = findNextPrime(primeNumbers);\n    return nextPrimeNumber;\n};\n\nconst printPrimeNumbers = (primeNumbers) => {\n    for (let i = 0; i < primeNumbers.length; i++) {\n        console.log(primeNumbers[i]);\n    }\n};\n\nconst getNextPrimeNumber = () => {\n    let primeNumbers = convertSentenceToPrime(\"This is a test\");\n    let nextPrimeNumber = findNextPrime(primeNumbers);\n    printPrimeNumbers(primeNumbers);\n    return nextPrimeNumber;\n};\n\ngetNextPrimeNumber();\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format , \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format, \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n    let frac = x.split('/');\n    let numerator = parseInt(frac[0]);\n    let denominator = parseInt(frac[1]);\n    if (numerator > denominator) return false;\n    else if (numerator == denominator) return true;\n    else return simplify(numerator, denominator);\n}\n\n//9/1\ncon test = (x, n) => {\n    let frac = x.split('/');\n    let numerator = parseInt(frac[0]);\n    let denominator = parseInt(frac[1]);\n    if (numerator > denominator) return false;\n    else if (numerator == denominator) return true;\n    else return test(numerator, denominator);\n}\n\n/* Your task is to implement a function that will return true if the expression x\n  can be simplified to a fraction, and false otherwise.\n  For example, the following expression is not a fraction.\n  \"8/2 + 3/4 + 9/5\"\n  \"1/3 + 7/2\"\n  \"5/4 + 7/3\"\n  \"4/5 + 3/7 + 7/1\"\n  \"10/3 + 8/2\"\n  \"3/2\"\n  \"1/3\"\n  \"3/1\"\n  \"4/5\"\n  \"4/5\"\n  \"3/5\"\n  \"5/1\"\n  \"1/1\"\n  \"2/1\"\n  \"3/2\"\n  \"4/4\"\n  \"5/3\"\n  \"5/3\"\n  \"3/3\"\n  \"1/5\"\n  \"2/2\"\n  \"7/3\"\n  \"3/7\"\n  \"7/2\"\n  \"7/1\"\n  \"1/2\"\n  \"1/2\"\n  \"7/4\"\n  \"7/2\"\n  \"3/2\"\n  \"5/4\"\n  \"2/5\"\n  \"2/2\"\n  \"2/4\"\n  \"2/5\"\n  \"3/1\"\n  \"2/3\"\n  \"2/5\"\n  \"1/3\"\n  \"5/3\"\n  \"3/3\"\n  \"3/3\"\n  \"3/4\"\n  \"3/5\"\n  \"3/6\"\n  \"4/5\"\n  \"4/6\"\n  \"2/5\"\n  \"2/6\"\n  \"3/5\"\n  \"3/6\"\n  \"4/6\"\n  \"5/6\"\n  \"4/7\"\n  \"5/7\"\n  \"3/6\"\n  \"5/7\"\n  \"4/7\"\n  \"5/7\"\n  \"3/7\"\n  \"3/7\"\n  \"4/7\"\n  \"5/7\"\n  \"3/7\"\n  \"4/7\"\n  \"3/7\"\n  \"4/7\"\n  \"5/7\"\n  \"3/7\"\n  \"5/7\"\n  \"4/7\"\n  \"3/7\"\n  \"5/7\"\n  \"3/7\"\n  \"5/7\"\n  \"4/7\"\n  \"5/7\"\n  \"3/7\"\n  \"5/7\"\n  \"4/7\"\n  \"5/7\"\n  \"3/7\"\n  \"5/7\"\n  \"4/7\"\n  \"5/7\"\n  \"3/7\"\n  \"5/7\"\n  \"4/7\"\n  \"5/7\"\n  \"3/7\"\n  \"5/7\"\n  \"4/7\"\n  \"5/7\"\n  \"3/7\"\n  \"5/7\"\n  \"4/7\"\n  \"5/7\"\n  \"3/7\"\n  \"5/7\"\n  \"4/7\"\n  \"5/7\"\n  \"3/7\"\n  \"5/7\"\n  \"4/7\"\n  \"5/7\"\n  \"3/7\"\n  \"5/7\"\n  \"4/7\"\n  \"5/7\"\n  \"3/7\"\n  \"5/7\"\n  \"4/7\"\n  \"5/7\"\n  \"3/7\"\n  \"5/7\"\n  \"4/7\"\n  \"5/7\"\n  \"3/7\"\n  \"5/7\"\n  \"4/7\"\n  \"5/7\"\n  \"3/7\"\n  \"5/7\"\n  \"4/7\"\n  \"5/7\"\n  \"3/7\"\n  \"5/7\"\n  \"4/7\"\n  \"5/7\"\n  \"3/7\"\n  \"5/7\"\n  \"4/7\"\n  \"5/7\"\n  \"3/7\"\n  \"5/7\"\n  \"4/7\"\n  \"5/7\"\n  \"3/7\"\n  \"5/7\"\n  \"4/7\"\n  \"5/7\"\n  \"3/7\"\n  \"5/7\"\n  \"4/7\"\n  \"5/7\"\n  \"3/7\"\n  \"5/7\"\n  \"4/7\"\n  \"5/7\"\n  \"3/7\"\n  \"5/7\"\n  \"4/7\"\n  \"5/7\"\n  \"3/7\"\n  \"5/7\""}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits .\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  if(!nums ||!Array.isArray(nums)){\n    return [];\n  }\n  return nums.sort((a, b) => a - b);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const arr = [];\n  nums.forEach(n => {\n    if (n.toString().charAt(0) === '-') {\n      arr.push(n);\n    }\n  });\n  let result = 0;\n  const odd = (a, b) => {\n    if (a % 2 === 1 && b % 2 === 1) {\n      result++;\n    }\n  };\n  arr.forEach(n => {\n    odd(n.toString().charAt(0), n.toString().charAt(n.toString().length - 1));\n  });\n  return result;\n};\n\n// specialFilter([15, -73, 14, -15]);\n// specialFilter([33, -2, -3, 45, 21, 109]);\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k ,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = new Array(n)\n  let k = 1\n  let i = 0\n  while (k <= n) {\n    while (i < k) {\n      a[i] = k * k - k + 1\n      k += 1\n    }\n    i += 1\n    while (i < k) {\n      a[i] = k * k - k + 1\n      k += 1\n    }\n    i += 1\n    while (i < k) {\n      a[i] = k * k - k + 1\n      k += 1\n    }\n    i += 1\n  }\n  const maxTriples = 0\n  for (let i = 0; i < n; i += 1) {\n    for (let j = i + 1; j < n; j += 1) {\n      for (let k = j + 1; k < n; k += 1) {\n        if (a[i] + a[j] + a[k] === a[i] * a[j] * a[k]) {\n          maxTriples += 1\n        }\n      }\n    }\n  }\n  return maxTriples\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es .\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n    const planetNames = [\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ];\n    const planet = [\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ];\n    const orbits = [\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ];\n    let index = 0;\n    while (index < 8) {\n        const orbit = orbits[index];\n        if (planet[index] === planet2) {\n            if (planet1 === orbit) {\n                break;\n            }\n            index++;\n        }\n        if (planet[index] === planet1) {\n            if (planet2 === orbits[index]) {\n                break;\n            }\n            index++;\n        }\n    }\n    return (planetNames[index], planetNames[index + 1]);\n};\n\nconst test = [\n    \"Jupiter\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n];\n\nconsole.log(bf(test[0], test[1]));\nconsole.log(bf(test[0], test[2]));\nconsole.log(bf(test[1], test[2]));\nconsole.log(bf(test[1], test[3]));\nconsole.log(bf(test[2], test[3]));\nconsole.log(bf(test[2], test[4]));\nconsole.log(bf(test[3], test[4]));\nconsole.log(bf(test[3], test[5]));\nconsole.log(bf(test[4], test[5]));\nconsole.log(bf(test[4], test[6]));\nconsole.log(bf(test[5], test[6]));\nconsole.log(bf(test[5], test[7]));\nconsole.log(bf(test[6], test[7]));\nconsole.log(bf(test[6], test[8]));\nconsole.log(bf(test[7], test[8]));\nconsole.log(bf(test[7], test[9]));\nconsole.log(bf(test[8], test[9]));\nconsole.log(bf(test[8], test[10]));\nconsole.log(bf(test[9], test[10]));\nconsole.log(bf(test[9], test[11]));\nconsole.log(bf(test[10], test[11]));\nconsole.log(bf(test[10], test[12]));\nconsole.log(bf(test[11], test[12]));\nconsole.log(bf(test[11], test[13]));\nconsole.log(bf(test[12], test[13]));\nconsole.log(bf(test[12], test[14]));\nconsole.log(bf(test[13], test[14]));\nconsole.log(bf(test[13], test[15]));\nconsole.log(bf(test[14], test[15]));\nconsole.log(bf(test[14], test[16]));\nconsole.log(bf(test[15], test[16]));\nconsole.log(bf(test[15], test[17]));\nconsole.log(bf(test[16], test[17]));\nconsole.log(bf(test[16], test[18]));\nconsole.log(bf(test[17], test[18]));\nconsole.log(bf(test[17], test[19]));\nconsole.log(bf(test[18], test[19]));\nconsole.log(bf(test[18], test[20]));\nconsole.log(bf(test[19], test[20]));\nconsole.log(bf(test[19], test[21]));\nconsole.log(bf(test[20], test[21]));\nconsole.log(bf(test[20], test[22]));\nconsole.log(bf(test[21], test[22]));\nconsole.log(bf(test[21], test[23]));\nconsole.log(bf(test[22], test[23]));\nconsole.log(bf(test[22], test[24]));\nconsole.log(bf(test[23], test[24]));\nconsole.log(bf(test[23], test[25]));\nconsole.log(bf(test[24], test[25]));\nconsole.log(bf(test[24], test[26]));\nconsole.log(bf(test[25], test[26]));\nconsole.log(bf(test[25], test[27]));\nconsole.log(bf(test[26], test[27]));\nconsole.log(bf(test[26], test[28]));\nconsole.log(bf(test[27], test[28]));\nconsole.log(bf(test[27], test[29]));\nconsole.log(bf(test[28], test[29]));\nconsole.log(bf(test[28], test[30]));\nconsole.log(bf(test[29], test[30]));\nconsole.log(bf(test[29], test[31]));\nconsole.log(bf(test[30], test[31]));\nconsole.log("}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length\n  const ret = []\n  let sum = 0\n  let prev = 0\n  for (let i = 0; i < len; i++) {\n    if (sum!== 0) {\n      sum += lst[i].length\n    } else {\n      sum = lst[i].length\n    }\n    ret.push({\n      l: lst[i],\n      sum: sum,\n    })\n    if (sum > prev) {\n      ret.push({\n        l: lst[i],\n        sum: sum,\n      })\n    }\n    prev = sum\n  }\n  return ret.sort((a, b) => {\n    if (a.sum!== b.sum) {\n      return a.sum - b.sum\n    }\n    return a.l.localeCompare(b.l)\n  })\n}\n\nconst main = () => {\n  // [1, 2, 3, 4, 5]\n  const lst = [\n    \"aa\",\n    \"ab\",\n    \"a\",\n    \"bb\",\n    \"cc\",\n    \"dd\",\n    \"ddd\",\n    \"dddd\",\n    \"ddddd\",\n    \"eee\",\n    \"eee\",\n    \"fff\",\n    \"ggg\",\n    \"hhh\",\n    \"iii\",\n    \"jjj\",\n    \"kkk\",\n    \"lll\",\n    \"mm\",\n    \"nn\",\n    \"oooo\",\n    \"ppp\",\n    \"qqq\",\n    \"rrr\",\n    \"sss\",\n    \"ttt\",\n    \"uuu\",\n  ]\n  console.log(sortedListSum(lst))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise .\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else if (n % 3 === 0) {\n    return x;\n  } else if (n % 5 === 0) {\n    return x;\n  } else if (n % 7 === 0) {\n    return x;\n  } else if (n % 11 === 0) {\n    return x;\n  } else if (n % 13 === 0) {\n    return x;\n  } else if (n % 17 === 0) {\n    return x;\n  } else if (n % 19 === 0) {\n    return x;\n  } else if (n % 23 === 0) {\n    return x;\n  } else if (n % 29 === 0) {\n    return x;\n  } else if (n % 31 === 0) {\n    return x;\n  } else if (n % 37 === 0) {\n    return x;\n  } else if (n % 41 === 0) {\n    return x;\n  } else if (n % 43 === 0) {\n    return x;\n  } else if (n % 47 === 0) {\n    return x;\n  } else if (n % 53 === 0) {\n    return x;\n  } else if (n % 59 === 0) {\n    return x;\n  } else if (n % 61 === 0) {\n    return x;\n  } else if (n % 67 === 0) {\n    return x;\n  } else if (n % 71 === 0) {\n    return x;\n  } else if (n % 73 === 0) {\n    return x;\n  } else if (n % 79 === 0) {\n    return x;\n  } else if (n % 81 === 0) {\n    return x;\n  } else if (n % 83 === 0) {\n    return x;\n  } else if (n % 89 === 0) {\n    return x;\n  } else if (n % 97 === 0) {\n    return x;\n  } else if (n % 101 === 0) {\n    return x;\n  } else if (n % 103 === 0) {\n    return x;\n  } else if (n % 107 === 0) {\n    return x;\n  } else if (n % 109 === 0) {\n    return x;\n  } else if (n % 113 === 0) {\n    return x;\n  } else if (n % 127 === 0) {\n    return x;\n  } else if (n % 129 === 0) {\n    return x;\n  } else if (n % 131 === 0) {\n    return x;\n  } else if (n % 137 === 0) {\n    return x;\n  } else if (n % 139 === 0) {\n    return x;\n  } else if (n % 149 === 0) {\n    return x;\n  } else if (n % 151 === 0) {\n    return x;\n  } else if (n % 157 === 0) {\n    return x;\n  } else if (n % 163 === 0) {\n    return x;\n  } else if (n % 167 === 0) {\n    return x;\n  } else if (n % 179 === 0) {\n    return x;\n  } else if (n % 181 === 0) {\n    return x;\n  } else if (n % 191 === 0) {\n    return x;\n  } else if (n % 193 === 0) {\n    return x;\n  } else if (n % 197 === 0) {\n    return x;\n  } else if (n % 199 === 0) {\n    return x;\n  } else if (n % 211 === 0) {\n    return x;\n  } else if (n % 223 === 0) {\n    return x;\n  } else if (n % 227 === 0) {\n    return x;\n  } else if (n % 229 === 0) {\n    return x;\n  } else if (n % 233 === 0) {\n    return x;\n  } else if (n % 239 === 0) {\n    return x;\n  } else if (n % 241 === 0) {\n    return x;\n  } else if (n % 251 === 0) {\n    return x;\n  } else if (n % 257 === 0) {\n    return x;\n  } else if (n % 263 === 0) {\n    return x;\n  } else if (n % 269 === 0) {\n    return x;\n  } else if (n % 271 === 0) {\n    return x;\n  } else if (n % 277 === 0) {\n    return x;\n  } else if (n % 281 === 0) {\n    return x;\n  } else if (n % 283 === 0) {\n    return x;\n  } else if (n % 293 === 0) {\n    return x;\n  } else if (n % 307 === 0) {\n    return x;\n  } else if (n % 311 === 0) {\n    return x;\n  } else if (n % 313 === 0) {\n    return x;\n  } else if (n % 317 === 0) {\n    return x;\n  } else if (n % 319 === 0) {\n    return x;\n  } else if (n % 331 === 0) {\n    return x;\n  } else if (n % 337 === 0) {\n    return x;\n  } else if (n % 347 === 0) {\n    return x;\n  } else if (n % 349 === 0) {\n    return x;\n  } else if (n % 353 === 0) {\n    return x;\n  } else if (n % 359 === 0) {\n    return x;\n  } else if (n % 367 === 0) {\n    return x;\n  } else if (n % 373 === 0) {\n    return x;\n  } else if (n % 379 === 0) {\n    return x;\n  } else if (n % 383 === 0) {\n    "}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers .\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const x = parseInt(lst[i]);\n    if (x!== 0 && x!== -1 && x!== undefined) {\n      sum += x * x;\n    }\n  }\n  return sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0 ,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const { result, result2 } = game;\n  const diff = result - guess;\n  const diff2 = result2 - guess;\n  const res = [];\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] === guess[i]) {\n      res.push(0);\n    } else {\n      res.push(Math.abs(diff[i] - diff2[i]));\n    }\n  }\n  return res;\n};\n\n/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n  definitely worth  no ting down andcomparing.\n  Your task is to determineif a personcorrectly g u essedthe results of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the same length of not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare2 = (game, guess) => {\n  const { result, result2 } = game;\n  const diff = result - guess;\n  const diff2 = result2 - guess;\n  const res = [];\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] === guess[i]) {\n      res.push(0);\n    } else {\n      res.push(Math.abs(diff[i] - diff2[i]));\n    }\n  }\n  return res;\n};\n\nconst game = [1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11, 12, 13, 14, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362,"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName .  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName.  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  for (let i = 0; i < extensions.length; i++) {\n    const extName = extensions[i];\n    const extStrength = strength[extName] || 0;\n    const extChar = extName.charAt(0);\n    const cap = extName.charCodeAt(0);\n    const lc = extName.toLowerCase().charCodeAt(0);\n    strength[extName] = cap - lc;\n    extStrength = extStrength - strength[extName];\n    strength[extName] = extStrength > strength[extName]? extStrength : strength[extName];\n  }\n\n  const strongest = Object.keys(strength).sort((a, b) => strength[a] - strength[b])[0];\n  return `${class_name}.${strongest}`;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n  const lenA = a.length\n  const lenB = b.length\n  let i = 0\n  let j = 0\n  let count = 0\n  const l = Math.max(lenA, lenB)\n  while(i < l && j < l) {\n    if(a.charAt(i) === b.charAt(j)) {\n      count++\n      i++\n      j++\n    }\n    if(i === lenA) {\n      return false\n    }\n    if(j === lenB) {\n      return false\n    }\n  }\n  if(count === lenA) {\n    return true\n  }\n  return false\n}\n\n/*\ncycpatternCheck(\"abcd\",\"abcd\") => true\ncycpatternCheck(\"abcd\",\"cdab\") => false\ncycpatternCheck(\"abc\",\"abc\") => true\ncycpatternCheck(\"abc\",\"ac\") => false\ncycpatternCheck(\"abc\",\"a\") => true\ncycpatternCheck(\"abc\",\"\") => true\ncycpatternCheck(\"abc\",\"\") => true\n*/\nconst cycpa= (a, b) => {\n  const lenA = a.length\n  const lenB = b.length\n  let i = 0\n  let j = 0\n  const l = Math.max(lenA, lenB)\n  while(i < l && j < l) {\n    if(a.charAt(i) === b.charAt(j)) {\n      i++\n      j++\n    }\n    else {\n      if(i < lenA) {\n        j += lenA - i\n        i = lenA\n      }\n      if(j < lenB) {\n        i += lenB - j\n        j = lenB\n      }\n    }\n  }\n  return i === lenA\n}\n\nconst nCheck= (a, b) => {\n  let i = 0\n  let j = 0\n  const l = Math.max(a.length, b.length)\n  while(i < l && j < l) {\n    if(a.charAt(i) === b.charAt(j)) {\n      i++\n      j++\n    }\n    else {\n      if(i < a.length) {\n        j += a.length - i\n        i = a.length\n      }\n      if(j < b.length) {\n        i += b.length - j\n        j = b.length\n      }\n    }\n  }\n  return i === a.length\n}\n\nconsole.log(cycpatternCheck(\"abc\",\"abc\"))\nconsole.log(cycpatternCheck(\"abc\",\"cdab\"))\nconsole.log(cycpatternCheck(\"abc\",\"abc\"))\nconsole.log(cycpatternCheck(\"abc\",\"abc\"))\nconsole.log(cycpatternCheck(\"abc\",\"abc\"))\nconsole.log(cycpatternCheck(\"abc\",\"abc\"))\nconsole.log(cycpatternCheck(\"abc\",\"ab\"))\nconsole.log(cycpatternCheck(\"abc\",\"a\"))\nconsole.log(cycpatternCheck(\"abc\",\"\"))\nconsole.log(cycpatternCheck(\"abc\",\"\"))\nconsole.log(cycpatternCheck(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"abc\"))\nconsole.log(cycpa(\"abc\",\"cdab\"))\nconsole.log(cycpa(\"abc\",\"abc\"))\nconsole.log(cycpa(\"abc\",\"abc\"))\nconsole.log(cycpa(\"abc\",\"abc\"))\nconsole.log(cycpa(\"abc\",\"abc\"))\nconsole.log(cycpa(\"abc\",\"ab\"))\nconsole.log(cycpa(\"abc\",\"a\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\"\"))\nconsole.log(cycpa(\"abc\",\""}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    const count = 0;\n    let currentDigit;\n    while (num >= 10) {\n        currentDigit = num % 10;\n        count += (currentDigit === 0)? 1 : 0;\n        num = Math.floor(num / 10);\n    }\n    currentDigit = num;\n    count += (currentDigit === 0)? 1 : 0;\n    return [count, count];\n};\n\nconsole.log(evenOddCount(1234));\nconsole.log(evenOddCount(12345));\nconsole.log(evenOddCount(123456));\nconsole.log(evenOddCount(1234567));\nconsole.log(evenOddCount(12345678));\nconsole.log(evenOddCount(123456789));\nconsole.log(evenOddCount(1234567890));\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n    let numeral = '',\n        roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I'];\n    while (number > 0) {\n        if (number % 100 >= 50) {\n            numeral += roman[number % 100];\n            number = number / 100;\n        } else {\n            numeral += roman[number % 10];\n            number = number / 10;\n        }\n    }\n    return numeral.toLowerCase();\n};\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle , fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n    return a + b > c && b + c > a && c + a > b;\n};\n\n// rightAngleTriangle(3, 4, 5) == true\nconsole.log(rightAngleTriangle(3, 4, 5));\n\n// rightAngleTriangle(1, 2, 3) == false\nconsole.log(rightAngleTriangle(1, 2, 3));\n\n// rightAngleTriangle(2, 4, 3) == false\nconsole.log(rightAngleTriangle(2, 4, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\" ,\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\",\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n  const map = new Map()\n  for (let i = 0; i < words.length; i++) {\n    let charArr = words[i].split('')\n    charArr.forEach(e => map.set(e, 1))\n  }\n  return Object.keys(map).sort().reverse().find(x => map.get(x) === 1)\n}\n\nconsole.log(findMax([\"na me\", \"of\", \"string\"]))\nconsole.log(findMax([\"name \", \"enam\", \"game\"]))\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"]))\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    if(remaining >= need){\n        return [number + remaining, 0];\n    } else {\n        return [number, remaining];\n    }\n}\n\nexport {eat}\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  // check array\n  if (operator.length < 2) throw new Error('Length of operator is less than 2')\n  if (operand.length < 2) throw new Error('Length of operand is less than 2')\n\n  // sort array\n  let opList = operator.slice()\n  let op = opList.sort((a, b) => a - b)\n  let opArr = opList.slice(0, -1).map(op => op)\n  let opRes = opList[opList.length - 1]\n\n  // build array\n  let arry = opArr.concat(operand)\n  let res = arry.reduce((res, num) => {\n    let isFloor = num % opRes === 0\n    return isFloor? res + num / opRes : res + num\n  }, 0)\n\n  return res\n}\n\nexport default doAlgebra\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n    if (s.length === 0) {\n        return ''\n    }\n    let str = s.split('')\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] >= 'a' && str[i] <= 'z') {\n            str[i] = str[i].toUpperCase()\n        }\n        if (str[i] >= 'A' && str[i] <= 'Z') {\n            str[i] = str[i].toLowerCase()\n        }\n    }\n    return str.join('')\n}\n\nconsole.log(solve(\"aA\"));\nconsole.log(solve(\"#a@C\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"1aB\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n    let md5 = crypto.createHash('md5')\n    md5.update(text)\n    return md5.digest('hex')\n}\n\nexport default stringToMd5\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let array = [];\n\n  while (a <= b) {\n    array.push(a);\n    a = a + 1;\n  }\n  return array;\n};\n\nexport default generateIntegers;\n<|endoftext|>"}
