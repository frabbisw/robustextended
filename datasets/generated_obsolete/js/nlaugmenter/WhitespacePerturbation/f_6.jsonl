{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  if (!Array.isArray(numbers)) {\n    throw new TypeError(`Expected array of numbers, but got ${typeof numbers}`)\n  }\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const last = numbers[len - 1]\n  const first = numbers[0]\n  for (let i = 1; i < len - 1; i++) {\n    const current = numbers[i]\n    if (Math.abs(current - last) <= threshold && Math.abs(current - first) <= threshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n  * Check if a given string contains the same value,\n  * e.g. \"aaab\" contains \"aa\" but not \"aaba\".\n  *\n  * @param {string} s1\n  * @param {string} s2\n  * @returns {boolean}\n  */\nconst contains = (s1, s2) => {\n  if (!s1 ||!s2) {\n    return false\n  }\n  const len = s1.length\n  if (len < 2) {\n    return false\n  }\n  const last = s1[len - 1]\n  const first = s1[0]\n  for (let i = 1; i < len - 1; i++) {\n    const current = s1[i]\n    if (current === last && current === first) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n  * Convert a string to an array of numbers.\n  *\n  * @param {string} str\n  * @returns {number[]}\n  */\nconst stringToArray = str => {\n  const arr = []\n  for (let i = 0; i < str.length; i++) {\n    let ch = str[i]\n    if (!isDigit(ch)) {\n      throw new TypeError(`${str} is not a valid number`)\n    }\n    arr.push(+ch)\n  }\n  return arr\n}\n\n/**\n  * Convert a string to a float.\n  *\n  * @param {string} str\n  * @returns {number}\n  */\nconst stringToFloat = str => {\n  const arr = stringToArray(str)\n  if (arr.length === 1) {\n    return arr[0]\n  }\n  if (arr.length === 2) {\n    return arr[0] + arr[1] / 60\n  }\n  if (arr.length === 3) {\n    return arr[0] + arr[1] / 60 + arr[2] / 3600\n  }\n  if (arr.length === 4) {\n    return arr[0] + arr[1] / 60 + arr[2] / 3600 + arr[3] / 86400\n  }\n  throw new TypeError(`${str} is not a valid float`)\n}\n\n/**\n  * Convert a string to an integer.\n  *\n  * @param {string} str\n  * @returns {number}\n  */\nconst stringToInteger = str => {\n  const arr = stringToArray(str)\n  if (arr.length === 1) {\n    return arr[0]\n  }\n  if (arr.length === 2) {\n    return arr[0] + arr[1] * 60\n  }\n  if (arr.length === 3) {\n    return arr[0] + arr[1] * 60 + arr[2] * 3600\n  }\n  if (arr.length === 4) {\n    return arr[0] + arr[1] * 60 + arr[2] * 3600 + arr[3] * 86400\n  }\n  throw new TypeError(`${str} is not a valid integer`)\n}\n\n/**\n  * Convert a string to a boolean.\n  *\n  * @param {string} str\n  * @returns {boolean}\n  */\nconst stringToBoolean = str => {\n  if (str === \"true\") {\n    return true\n  }\n  if (str === \"false\") {\n    return false\n  }\n  throw new TypeError(`${str} is not a valid boolean`)\n}\n\n/**\n  * Convert a string to a number.\n  *\n  * @param {string} str\n  * @returns {number}\n  */\nconst stringToNumber = str => {\n  const arr = stringToArray(str)\n  if (arr.length === 1) {\n    return arr[0]\n  }\n  if (arr.length === 2) {\n    return arr[0] + arr[1] / 60\n  }\n  if (arr.length === 3) {\n    return arr[0] + arr[1] / 60 + arr[2] / 3600\n  }\n  if (arr.length === 4) {\n    return arr[0] + arr[1] / 60 + arr[2] / 3600 + arr[3] / 86400\n  }\n  throw new TypeError(`${str} is not a valid number`)\n}\n\n/**\n  * Convert a string to a string.\n  *\n  * @param {string} str\n  * @returns {string}\n  */\nconst stringToString = str => {\n  return str\n}\n\nmodule.exports = {\n  contains,\n  hasCloseElements,\n  isDigit,\n  isFloat,\n  isInteger,\n  isNumber,\n  isString,\n  isBoolean,\n  stringToArray,\n  stringToFloat,\n  stringToInteger,\n  stringToString,\n  stringToBoolean,\n  stringToNumber\n}\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n    // create empty array to store the groups\n    const groups = [];\n    // store the last index of open paren, and current index\n    let lastOpenParenIndex = -1, currentIndex = -1;\n    // iterate through the string\n    while (currentIndex < paren_string.length) {\n        // if the character is a left paren, store the index of the open paren\n        if (paren_string[currentIndex] === '(') {\n            lastOpenParenIndex = currentIndex;\n        }\n        // if the character is a right paren,\n        // if the current paren is the one the last open paren,\n        // then the last open paren was closed and the current paren is a group\n        // store the group in the groups array\n        if (paren_string[currentIndex] === ')') {\n            if (lastOpenParenIndex === currentIndex - 1) {\n                groups.push(paren_string.substring(lastOpenParenIndex, currentIndex + 1));\n            }\n            lastOpenParenIndex = -1;\n        }\n        currentIndex++;\n    }\n    return groups;\n};\n\n/*\n    This function takes in a string and returns a boolean value determining whether the string is\n    a palindrome.\n    >>> isPalindrome('aab')\n    False\n    >>> isPalindrome('aab')\n    True\n    >>> isPalindrome('abcd')\n    False\n    >>> isPalindrome('abcd')\n    True\n    >>> isPalindrome('abcde')\n    False\n    >>> isPalindrome('abcde')\n    True\n    >>> isPalindrome('abc')\n    False\n    >>> isPalindrome('abc')\n    True\n    >>> isPalindrome('abcd')\n    False\n    >>> isPalindrome('abcd')\n    True\n    */\nconst isPalindrome = (string) => {\n    if (string.length === 0) {\n        return true;\n    }\n    let reversed = string.split('').reverse().join('');\n    return string === reversed;\n};\n\nmodule.exports = {\n    separateParenGroups,\n    isPalindrome\n};\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  return Math.trunc(number);\n};\n\nmodule.exports = truncateNumber;\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero , and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const array = operations.reduce((acc, curr) => {\n    if (acc.length === 0) {\n      acc.push(curr);\n    } else if (acc[acc.length - 1] < curr) {\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n  const allNegative = array.reduce((acc, curr) => acc && curr < 0, true);\n  return allNegative;\n};\n\nexport default belowZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n    let mean = mean(numbers)\n    let sd = standardDeviation(numbers)\n    let m = numbers.map(x => x - mean)\n    return Math.sqrt(mean * mean + m.reduce((a, b) => a + b, 0)) / sd\n}\n\n// For a given list of input numbers, c alcul ate Mean Absolute Deviation\n// around the mean of this dataset.\nconst meanAbsoluteDeviation2 = (numbers) => {\n    let mean = mean(numbers)\n    let m = numbers.map(x => x - mean)\n    return Math.sqrt(mean * mean + m.reduce((a, b) => a + b, 0))\n}\n\n// For a given list of input numbers, c alcul ate Mean Absolute Deviation\n// around the mean of this dataset.\nconst meanAbsoluteDeviation3 = (numbers) => {\n    let mean = mean(numbers)\n    let m = numbers.map(x => x - mean)\n    return Math.sqrt(mean * mean + m.reduce((a, b) => a + b, 0))\n}\n\n// For a given list of input numbers, c alcul ate Mean Absolute Deviation\n// around the mean of this dataset.\nconst meanAbsoluteDeviation4 = (numbers) => {\n    let mean = mean(numbers)\n    let m = numbers.map(x => x - mean)\n    return Math.sqrt(mean * mean + m.reduce((a, b) => a + b, 0))\n}\n\n// For a given list of input numbers, c alcul ate Mean Absolute Deviation\n// around the mean of this dataset.\nconst meanAbsoluteDeviation5 = (numbers) => {\n    let mean = mean(numbers)\n    let m = numbers.map(x => x - mean)\n    return Math.sqrt(mean * mean + m.reduce((a, b) => a + b, 0))\n}\n\n// For a given list of input numbers, c alcul ate Mean Absolute Deviation\n// around the mean of this dataset.\nconst meanAbsoluteDeviation6 = (numbers) => {\n    let mean = mean(numbers)\n    let m = numbers.map(x => x - mean)\n    return Math.sqrt(mean * mean + m.reduce((a, b) => a + b, 0))\n}\n\n// For a given list of input numbers, c alcul ate Mean Absolute Deviation\n// around the mean of this dataset.\nconst meanAbsoluteDeviation7 = (numbers) => {\n    let mean = mean(numbers)\n    let m = numbers.map(x => x - mean)\n    return Math.sqrt(mean * mean + m.reduce((a, b) => a + b, 0))\n}\n\n// For a given list of input numbers, c alcul ate Mean Absolute Deviation\n// around the mean of this dataset.\nconst meanAbsoluteDeviation8 = (numbers) => {\n    let mean = mean(numbers)\n    let m = numbers.map(x => x - mean)\n    return Math.sqrt(mean * mean + m.reduce((a, b) => a + b, 0))\n}\n\n// For a given list of input numbers, c alcul ate Mean Absolute Deviation\n// around the mean of this dataset.\nconst meanAbsoluteDeviation9 = (numbers) => {\n    let mean = mean(numbers)\n    let m = numbers.map(x => x - mean)\n    return Math.sqrt(mean * mean + m.reduce((a, b) => a + b, 0))\n}\n\n// For a given list of input numbers, c alcul ate Mean Absolute Deviation\n// around the mean of this dataset.\nconst meanAbsoluteDeviation10 = (numbers) => {\n    let mean = mean(numbers)\n    let m = numbers.map(x => x - mean)\n    return Math.sqrt(mean * mean + m.reduce((a, b) => a + b, 0))\n}\n\n// For a given list of input numbers, c alcul ate Mean Absolute Deviation\n// around the mean of this dataset.\nconst meanAbsoluteDeviation11 = (numbers) => {\n    let mean = mean(numbers)\n    let m = numbers.map(x => x - mean)\n    return Math.sqrt(mean * mean + m.reduce((a, b) => a + b, 0))\n}\n\n// For a given list of input numbers, c alcul ate Mean Absolute Deviation\n// around the mean of this dataset.\nconst meanAbsoluteDeviation12 = (numbers) => {\n    let mean = mean(numbers)\n    let m = numbers.map(x => x - mean)\n    return Math.sqrt(mean * mean + m.reduce((a, b) => a + b, 0))\n}\n\n// For a given list of input numbers, c alcul ate Mean Absolute Deviation\n// around the mean of this dataset.\nconst meanAbsoluteDeviation13 = (numbers) => {\n    let mean = mean(numbers)\n    let m = numbers.map(x => x - mean)\n    return Math.sqrt(mean * mean + m.reduce((a, b) => a + b, 0))\n}\n\n// For a given list of input numbers, c alcul ate Mean Absolute Deviation\n// around the mean of this dataset.\nconst meanAbsoluteDeviation14 = (numbers) => {\n    let mean = mean(numbers)\n    let m = numbers.map(x => x - mean)\n    return Math.sqrt(mean * mean + m.reduce((a, b) => a + b, 0))\n}\n\n// For a given list of input numbers, c alcul ate Mean Absolute Deviation\n// around the mean of this dataset.\nconst meanAbsoluteDeviation15 = (numbers) => {\n    let mean = mean(numbers)\n    let m = numbers.map(x => x - mean)\n    return"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    i++;\n  }\n  result.push(numbers[i]);\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E .g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E.g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const string_list = paren_string.split(\" \");\n  const level_list = [];\n  const level = 0;\n  const group_count = 0;\n\n  for (let i = 0; i < string_list.length; i++) {\n    if (string_list[i] === \"(\") {\n      level++;\n      if (level > level_list.length) {\n        level_list.push(level);\n      }\n    } else if (string_list[i] === \")\") {\n      level--;\n    }\n  }\n\n  return level_list;\n};\n\nmodule.exports = parseNestedParens;\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const substrings = substring.split(' ');\n  return strings.filter(x => substrings.every(y => x.includes(y)));\n};\n\n/**\n  * Filter an input list of strings to contain only those\n  * that contain given substring\n  * @param {string[]} strings\n  * @param {string} substring\n  * @return {string[]}\n  */\nconst filterBySubstringArray = (strings, substring) => {\n  const substrings = substring.split(' ');\n  return strings.filter(x => substrings.every(y => x.includes(y)));\n};\n\nexport default {\n  filterBySubstring,\n  filterBySubstringArray\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let product = 1\n  let sum = 0\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === 0) {\n      product = 1\n      sum = 0\n    } else {\n      sum += numbers[i]\n      product *= numbers[i]\n    }\n  }\n\n  return (sum, product)\n}\n\nexport default sumProduct\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  let temp = 0;\n  let i = 0;\n  while (i < numbers.length) {\n    temp = numbers[i];\n    if (temp > max) {\n      max = temp;\n    }\n    result.push(max);\n    i += 1;\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string .\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix .\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string.\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = 0;\n  let palindrome = '';\n  for(let i = 0 ; i < string.length ; i++){\n    let t = string.slice(i).reverse();\n    let newPalindrome = t + string.slice(0, i+1);\n    if(isPalindrome(newPalindrome)){\n      if(newPalindrome.length > longestPalindrome){\n        longestPalindrome = newPalindrome.length;\n        palindrome = newPalindrome;\n      }\n    }\n  }\n  return palindrome;\n}\n\n/* Find the longest palindrome that  be gins with a su pplied string.\n  Algorithm idea is simp le:\n  - Find the longest postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('catata')\n  'catatac'\n  >>> makePalindrome('cataata')\n  'catatac'\n  */\nconst makePalindrome2 = (string) => {\n  let longestPalindrome = 0;\n  let palindrome = '';\n  for(let i = 0 ; i < string.length ; i++){\n    let t = string.slice(i).reverse();\n    let newPalindrome = t + string.slice(0, i+1);\n    if(isPalindrome(newPalindrome)){\n      if(newPalindrome.length > longestPalindrome){\n        longestPalindrome = newPalindrome.length;\n        palindrome = newPalindrome;\n      }\n    }\n  }\n  return palindrome;\n}\n\nconst makePalindrome3 = (string) => {\n  let palindrome = '';\n  let longestPalindrome = 0;\n  for(let i = 0 ; i < string.length ; i++){\n    let t = string.slice(i).reverse();\n    let newPalindrome = t + string.slice(0, i+1);\n    if(isPalindrome(newPalindrome)){\n      if(newPalindrome.length > longestPalindrome){\n        longestPalindrome = newPalindrome.length;\n        palindrome = newPalindrome;\n      }\n    }\n  }\n  return palindrome;\n}\n\nconst makePalindrome4 = (string) => {\n  let longestPalindrome = 0;\n  let palindrome = '';\n  for(let i = 0 ; i < string.length ; i++){\n    let t = string.slice(i).reverse();\n    let newPalindrome = t + string.slice(0, i+1);\n    if(isPalindrome(newPalindrome)){\n      if(newPalindrome.length > longestPalindrome){\n        longestPalindrome = newPalindrome.length;\n        palindrome = newPalindrome;\n      }\n    }\n  }\n  return palindrome;\n}\n\nconst makePalindrome5 = (string) => {\n  let longestPalindrome = 0;\n  let palindrome = '';\n  for(let i = 0 ; i < string.length ; i++){\n    let t = string.slice(i).reverse();\n    let newPalindrome = t + string.slice(0, i+1);\n    if(isPalindrome(newPalindrome)){\n      if(newPalindrome.length > longestPalindrome){\n        longestPalindrome = newPalindrome.length;\n        palindrome = newPalindrome;\n      }\n    }\n  }\n  return palindrome;\n}\n\nconsole.log(makePalindrome('cat'));\nconsole.log(makePalindrome2('cat'));\nconsole.log(makePalindrome3('cat'));\nconsole.log(makePalindrome4('cat'));\nconsole.log(makePalindrome5('cat'));\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const len = a.length;\n  const res = [];\n\n  for (let i = 0; i < len; i += 1) {\n    res[i] = a[i] ^ b[i];\n  }\n\n  return res.join('');\n};\n\nmodule.exports = stringXor;\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings ||!strings.length) {\n    return null;\n  }\n  let maxLen = 0;\n  let max = strings[0];\n  strings.forEach((s) => {\n    if (s.length > maxLen) {\n      max = s;\n      maxLen = s.length;\n    }\n  });\n  return max;\n}\n\n/*\n  * Convert a list of strings to a single string with each string on a new line.\n  * The first line is the longest string.  Each line is the longest string after the\n  * first line, so a list of strings with length 5 and each line is 'a\\nb\\nc'\n  * will convert to 'a\\nb\\nc'\n  *\n  * Note: This is only useful for the final output.\n  *\n  * Input: ['a', 'b', 'c', 'd', 'e']\n  * Output: 'a\\nb\\nc\\nd\\ne'\n  */\nconst toLines = (strings) => {\n  if (!strings ||!strings.length) {\n    return '';\n  }\n  let maxLen = 0;\n  let max = strings[0];\n  strings.forEach((s) => {\n    if (s.length > maxLen) {\n      max = s;\n      maxLen = s.length;\n    }\n  });\n  let lines = [];\n  while (maxLen > 0) {\n    let line = max.substring(0, maxLen);\n    lines.push(line);\n    maxLen -= line.length;\n  }\n  return lines.join('\\n');\n}\n\nexport { longest, toLines }\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  const d = Math.abs(a) > Math.abs(b)? b : a;\n  let x = 1;\n  while (d > 1) {\n    x = d;\n    d = Math.floor(d / b);\n  }\n  return x;\n};\n\nexport default greatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n    let prefixes = []\n    for (let i = 0; i <= string.length; i++) {\n        for (let j = 0; j < i; j++) {\n            if (string.slice(j, i) === string) {\n                prefixes.push(string.slice(0, i))\n            }\n        }\n    }\n    return prefixes\n}\n\n/* Return list of all suffixes from sho rtest  to shortest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n    let suffixes = []\n    for (let i = 0; i <= string.length; i++) {\n        for (let j = i + 1; j <= string.length; j++) {\n            if (string.slice(i, j) === string) {\n                suffixes.push(string.slice(i, j))\n            }\n        }\n    }\n    return suffixes\n}\n\n/* Return all permutations of the input string.\n  >>> allPermutations('abc')\n  [['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\n  */\nconst allPermutations = (string) => {\n    if (string.length === 0) {\n        return []\n    }\n\n    const allPrefixes = allPrefixes(string)\n    const allSuffixes = allSuffixes(string)\n    const allPermutations = allPrefixes.concat(allSuffixes)\n\n    for (let i = 0; i < allPermutations.length; i++) {\n        allPermutations[i] = allPermutations[i].concat(string)\n    }\n\n    return allPermutations\n}\n\n/* Return all permutations of the input string\n  >>> allPermutations('abc')\n  [['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\n  */\nconst allPermutations2 = (string) => {\n    if (string.length === 0) {\n        return []\n    }\n\n    const allPermutations = []\n    let currentPermutations = allPermutations2(string.slice(1))\n\n    for (let i = 0; i < currentPermutations.length; i++) {\n        currentPermutations[i] = currentPermutations[i].concat(string[0])\n    }\n\n    allPermutations.push(currentPermutations)\n\n    return allPermutations\n}\n\nexport { allPermutations, allPermutations2 }\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return Array(n + 1).join(' ');\n};\n\nmodule.exports = stringSequence;\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let character = string.charCodeAt(0);\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i].toLowerCase()!== string[i].toUpperCase()) {\n      count++;\n      character = string.charCodeAt(i);\n    }\n  }\n  return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note , lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note, lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n    let res = [];\n    let current_beat = 1;\n    let current_note = 0;\n    let i = 0;\n    while(i < music_string.length){\n        if(music_string[i] === 'o'){\n            res.push(current_beat);\n            current_beat++;\n        } else if (music_string[i] === '|'){\n            current_beat++;\n        } else if(music_string[i] === 'o'){\n            res.push(current_beat);\n            current_beat++;\n        } else if(music_string[i] === '.'){\n            res.push(current_beat);\n            current_beat++;\n        } else {\n            current_beat++;\n            current_note++;\n        }\n        i++;\n    }\n    return res;\n};\n\n/*\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic_v2 = (music_string) => {\n    let res = [];\n    let current_beat = 1;\n    let current_note = 0;\n    let i = 0;\n    while(i < music_string.length){\n        if(music_string[i] === 'o'){\n            res.push(current_beat);\n            current_beat++;\n        } else if (music_string[i] === '|'){\n            current_beat++;\n        } else if(music_string[i] === 'o'){\n            res.push(current_beat);\n            current_beat++;\n        } else if(music_string[i] === '.'){\n            res.push(current_beat);\n            current_beat++;\n        } else {\n            current_beat++;\n            current_note++;\n        }\n        i++;\n    }\n    return res;\n};\n\n/*\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic_v3 = (music_string) => {\n    let res = [];\n    let current_beat = 1;\n    let current_note = 0;\n    let i = 0;\n    while(i < music_string.length){\n        if(music_string[i] === 'o'){\n            res.push(current_beat);\n            current_beat++;\n        } else if (music_string[i] === '|'){\n            current_beat++;\n        } else if(music_string[i] === 'o'){\n            res.push(current_beat);\n            current_beat++;\n        } else if(music_string[i] === '.'){\n            res.push(current_beat);\n            current_beat++;\n        } else {\n            current_beat++;\n            current_note++;\n        }\n        i++;\n    }\n    return res;\n};\n\nconst parseMusic_v4 = (music_string) => {\n    let res = [];\n    let current_beat = 1;\n    let current_note = 0;\n    let i = 0;\n    while(i < music_string.length){\n        if(music_string[i] === 'o'){\n            res.push(current_beat);\n            current_beat++;\n        } else if (music_string[i] === '|'){\n            current_beat++;\n        } else if(music_string[i] === 'o'){\n            res.push(current_beat);\n            current_beat++;\n        } else if(music_string[i] === '.'){\n            res.push(current_beat);\n            current_beat++;\n        } else if(music_string[i] === '|'){\n            current_beat++;\n        } else {\n            current_beat++;\n            current_note++;\n        }\n        i++;\n    }\n    return res;\n};\n\nconst parseMusic_v5 = (music_string) => {\n    let res = [];\n    let current_beat = 1;\n    let current_note = 0;\n    let i = 0;\n    while(i < music_string.length){\n        if(music_string[i] === 'o'){\n            res.push(current_beat);\n            current_beat++;\n        } else if (music_string[i] === '|'){\n            current_beat++;\n        } else if(music_string[i] === 'o'){\n            res.push(current_beat);\n            current_beat++;\n        } else if(music_string[i] === '.'){\n            res.push(current_beat);\n            current_beat++;\n        } else if(music_string[i] === '|'){\n            current_beat++;\n        } else if(music_string[i] === 'o'){\n            res.push(current_beat);\n            current_beat++;\n        } else if(music_string[i] === '.'){\n            res.push(current_beat);\n            current_beat++;\n        } else if(music_string[i] === 'o'){\n            res.push(current_beat);\n            current_beat++;\n        } else if(music_string[i] === '|'){\n            current_beat++;\n        } else {\n            current_beat++;\n            current_note++;\n        }\n        i++;\n    }\n    return res;\n};\n\nconst parseMusic_v6 = (music_string) => {\n    let res = [];\n    let current_beat = 1;\n    let current_note = 0;\n"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n    const i = string.indexOf(substring);\n    if(i === -1) return 0;\n    return howManyTimes(string.substring(i+1), substring);\n};\n\n// console.log(howManyTimes(\"a\", \"a\"));\n// console.log(howManyTimes(\"aaaaa\", \"a\"));\n// console.log(howManyTimes(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two', ' three ', 'fou r ', 'fiv e', 'six' , 'seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const s = numbers.split(' ')\n  return s.sort((a,b)=>parseInt(a) - parseInt(b)).join(' ')\n}\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromlargest  to smallest\n  >>> sortNumbers('nine six seven eight')\n  'eight seven six nine'\n  */\nconst sortNumbers = (numbers) => {\n  const s = numbers.split(' ')\n  return s.sort((a,b)=>parseInt(b) - parseInt(a)).join(' ')\n}\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromlargest  to smallest\n  >>> sortNumbers('three one five')\n  'eight seven six nine'\n  */\nconst sortNumbers = (numbers) => {\n  const s = numbers.split(' ')\n  return s.sort((a,b)=>parseInt(a) - parseInt(b)).reverse().join(' ')\n}\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromlargest  to smallest\n  >>> sortNumbers('three one five')\n  'eight seven six nine'\n  */\nconst sortNumbers = (numbers) => {\n  const s = numbers.split(' ')\n  return s.sort((a,b)=>parseInt(b) - parseInt(a)).reverse().join(' ')\n}\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const s = numbers.split(' ')\n  return s.sort((a,b)=>parseInt(a) - parseInt(b)).join(' ')\n}\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromlargest  to smallest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const s = numbers.split(' ')\n  return s.sort((a,b)=>parseInt(b) - parseInt(a)).reverse().join(' ')\n}\n\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const s = numbers.split(' ')\n  return s.sort((a,b)=>parseInt(a) - parseInt(b)).join(' ')\n}\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromlargest  to smallest\n  >>> sortNumbers('three one five')\n  'eight seven six nine'\n  */\nconst sortNumbers = (numbers) => {\n  const s = numbers.split(' ')\n  return s.sort((a,b)=>parseInt(a) - parseInt(b)).reverse().join(' ')\n}\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromlargest  to smallest\n  >>> sortNumbers('three one five')\n  'eight seven six nine'\n  */\nconst sortNumbers = (numbers) => {\n  const s = numbers.split(' ')\n  return s.sort((a,b)=>parseInt(a) - parseInt(b)).reverse().join(' ')\n}\n\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const s = numbers.split(' ')\n  return s.sort((a,"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  const index = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      index = i;\n    } else if (numbers[i] > max) {\n      max = numbers[i];\n      index = i;\n    }\n  }\n  return [min, max];\n};\n\n/*\n  From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    } else if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return [min, max];\n};\n\n/*\n  From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements3 = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  const closest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      closest = numbers[i];\n    } else if (numbers[i] > max) {\n      max = numbers[i];\n      closest = numbers[i];\n    }\n  }\n  return [min, max, closest];\n};\n\nmodule.exports = {\n  findClosestElements,\n  findClosestElements2,\n  findClosestElements3\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  let sum = 0.0;\n  let min = Infinity;\n  let max = -Infinity;\n  for (let number of numbers) {\n    if (number < min) {\n      min = number;\n    }\n    if (number > max) {\n      max = number;\n    }\n    sum += number;\n  }\n  let newMax = max - min;\n  let newMin = 0 - newMax;\n  for (let number of numbers) {\n    let ratio = (number - newMin) / newMax;\n    let newNumber = newMin + ratio * newMax;\n    numbers.push(newNumber);\n  }\n  return numbers;\n};\n\n// export the functions for the tests\nexport { rescaleToUnit };\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(\n    (value) => {\n      if (typeof value!== 'number') {\n        return false;\n      }\n      return (\n        typeof value === 'number' &&\n        parseFloat(value) === parseInt(value, 10) &&\n       !isNaN(value)\n      );\n    }\n  );\n};\n\n/*\n  Filter given list of any python values that are not empty or null\n  >>> filterNonEmptyValues(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterNonEmptyValues([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonEmptyValues = (values) => {\n  return values.filter((value) => {\n    return value!== null && value!== undefined;\n  });\n};\n\n/*\n  Filter given list of any python values that are not empty or null and\n  only for integers\n  >>> filterIntegersNonEmptyValues(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterIntegersNonEmptyValues([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegersNonEmptyValues = (values) => {\n  return filterNonEmptyValues(filterIntegers(values));\n};\n\n/*\n  Returns a list of all items of the given list\n  >>> flatten([[1, 2, 3], [4, 5, 6]])\n  [1, 2, 3, 4, 5, 6]\n  >>> flatten([1, 2, [3, 4]])\n  [1, 2, 3, 4]\n  */\nconst flatten = (values) => {\n  return values.reduce((acc, item) => {\n    acc.push(item);\n    if (Array.isArray(item)) {\n      return acc.concat(flatten(item));\n    }\n    return acc;\n  }, []);\n};\n\n/*\n  Returns a list of all items of the given list\n  >>> flatten([[1, 2, 3], [4, 5, 6]])\n  [1, 2, 3, 4, 5, 6]\n  >>> flatten([1, 2, [3, 4]])\n  [1, 2, 3, 4]\n  */\nconst flattenNonEmptyValues = (values) => {\n  return values.reduce((acc, item) => {\n    if (Array.isArray(item)) {\n      acc.push(...item);\n      return acc;\n    }\n    acc.push(item);\n    return acc;\n  }, []);\n};\n\n/*\n  Returns a list of all items of the given list\n  >>> flatten([[1, 2, 3], [4, 5, 6]])\n  [1, 2, 3, 4, 5, 6]\n  >>> flatten([1, 2, [3, 4]])\n  [1, 2, 3, 4]\n  */\nconst flattenNonEmptyValuesNoNull = (values) => {\n  return values.reduce((acc, item) => {\n    if (item!== null) {\n      acc.push(item);\n    }\n    return acc;\n  }, []);\n};\n\n/*\n  Return a list of the union of all lists\n  >>> union([1, 2, 3, 4], [5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> union([1, 2, 3, 4], [1, 2, 3])\n  [1, 2, 3, 4]\n  >>> union([1, 2, 3, 4], [1, 2])\n  [1, 2, 3, 4]\n  >>> union([1, 2, 3, 4], [1])\n  [1, 2, 3, 4]\n  */\nconst union = (...values) => {\n  return values.reduce((acc, item) => {\n    if (Array.isArray(item)) {\n      return acc.concat(...item);\n    }\n    return acc.concat(item);\n  }, []);\n};\n\n/*\n  Returns a list of all unique values in the given list\n  >>> unique([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> unique([1, 2, 3, 4, 5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> unique([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  */\nconst unique = (...values) => {\n  const uniq = new Set();\n  return values.reduce((acc, item) => {\n    if (uniq.has(item)) {\n      return acc;\n    }\n    uniq.add(item);\n    return acc.concat(item);\n  }, []);\n};\n\n/*\n  Return a list of the union of all lists\n  >>> union([1, 2, 3, 4], [5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> union([1, 2, 3, 4], [1, 2, 3])\n  [1, 2, 3, 4]\n  >>> union([1, 2, 3, 4], [1])\n  [1, 2, 3, 4]\n  */\nconst unionNonNull = (...values) => {\n  return values.reduce((acc, item) => {\n    if (item!== null) {\n      return acc.concat(item);\n    }\n    return acc;\n  }, []);\n};\n\n/*\n  Returns a list of all items in the given list that are not in the given\n  list\n  >>> difference([1, 2, 3, 4], [1, 2, 3])\n  [4]\n  >>> difference([1, 2, 3, 4, 5], [1, 2, 3])\n  [4, 5]\n  >>> difference([1, 2, 3, 4, 5], [1, 2, 3, 4])\n"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": false, "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let i = 0;\n  while (string[i]) {\n    i++;\n  }\n  return i;\n};\n\n/* Return string with given length\n  >>> pad('abc', 3)\n  'abc'\n  >>> pad('abc', 2)\n  'ab'\n  >>> pad('abc', 1)\n  'a'\n  >>> pad('abc', 0)\n  ''\n  */\nconst pad = (string, length) => {\n  while (string.length < length) {\n    string +='';\n  }\n  return string;\n};\n\n/* Split string\n  >>> split('a b c','')\n  ['a', 'b', 'c']\n  >>> split('a b c', 'x')\n  ['a', 'b', 'c']\n  */\nconst split = (string, separator) => {\n  let result = [];\n  let index = 0;\n  while (index < string.length) {\n    let match = string.indexOf(separator, index);\n    if (match === -1) {\n      result.push(string.slice(index));\n      break;\n    } else {\n      result.push(string.slice(index, match));\n      index = match + separator.length;\n    }\n  }\n  return result;\n};\n\n/* Return string with last character replaced\n  >>> last('abc', 'b')\n  'ac'\n  >>> last('abc', 'x')\n  'abc'\n  >>> last('abc', 'x', '#')\n  '#bc'\n  */\nconst last = (string, character, replacement) => {\n  let index = string.length - 1;\n  return string.slice(0, index) + replacement + string.slice(index);\n};\n\n/* Join strings\n  >>> join('a', 'b')\n  'ab'\n  >>> join('a', 'b', 'c')\n  'abc'\n  >>> join('a', 'b', 'c', 'd')\n  'dabcc'\n  */\nconst join = (...strings) => {\n  let length = strings.length;\n  if (length === 1) {\n    return strings[0];\n  } else if (length === 2) {\n    return strings[0] + strings[1];\n  } else {\n    let result = '';\n    let index = 0;\n    while (index < length) {\n      result += strings[index];\n      index++;\n      if (index < length) {\n        result += strings[index];\n      }\n    }\n    return result;\n  }\n};\n\n/* Trim string\n  >>> trim(' abc ')\n  'abc'\n  >>> trim('\\t\\n\\r\\f')\n  ''\n  */\nconst trim = (string) => {\n  let index = 0;\n  while (string[index]) {\n    index++;\n  }\n  return string.slice(0, index);\n};\n\n/* Capitalize string\n  >>> capitalize('abc')\n  'Abc'\n  >>> capitalize('abc def')\n  'Abc Def'\n  */\nconst capitalize = (string) => {\n  let first = string[0];\n  return string.slice(0, 1).toUpperCase() + string.slice(1);\n};\n\n/* Pad right\n  >>> right('abc', 3)\n  'abc'\n  >>> right('abc', 2)\n  'ab'\n  >>> right('abc', 1)\n  'a'\n  >>> right('abc', 0)\n  ''\n  */\nconst right = (string, length) => {\n  let result = string;\n  while (string.length < length) {\n    string +='';\n  }\n  return string;\n};\n\n/* Repeat string\n  >>> repeat('a', 2)\n  'aa'\n  >>> repeat('a', 3)\n  'aaa'\n  */\nconst repeat = (string, count) => {\n  let result = '';\n  while (count--) {\n    result += string;\n  }\n  return result;\n};\n\n/* Reverse string\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abc')\n  'abc'\n  */\nconst reverse = (string) => {\n  let reversed = '';\n  let length = string.length;\n  for (let index = 0; index < length; index++) {\n    reversed += string[length - index - 1];\n  }\n  return reversed;\n};\n\n/* Split string with specified delimiter\n  >>> split('a,b,c', ',')\n  ['a', 'b', 'c']\n  >>> split('a,b,c', 'x')\n  ['a', 'b', 'c']\n  >>> split('a b c','')\n  ['a', 'b', 'c']\n  >>> split('a b c', 'x')\n  ['a', 'b', 'c']\n  */\nconst splitBy = (string, separator) => {\n  let result = [];\n  let index = 0;\n  while (index < string.length) {\n    let match = string.indexOf(separator, index);\n    if (match === -1) {\n      result.push(string.slice(index));\n      break;\n    } else {\n      result.push(string.slice(index, match));\n      index = match + separator.length;\n    }\n  }\n  return result;\n};\n\n/* Escape string\n  >>> escape('abc')\n  'abc'\n  >>> escape('a\\nb\\nc')\n  'a\\\\nb\\\\nc'\n  >>> escape('a\\\\nb\\\\nc')\n  'a\\\\\\\\nb\\\\\\\\nc'\n  >>> escape('a\"b\"c')\n  'a\\\\\"b\\\\\"c'\n  >>> escape('a\"b\"c')\n  'a\\\\\"b\\\\\"c'\n  >>> escape('a\"b\"c', '\"')\n  'a\\\\\\\\\\\\\"b\\\\\\\\\\\\\"c'\n  */\nconst escape = (string, quote = '\"') => {\n  let escaped = '';\n  let index = 0;\n  while (index < string.length) {\n    let char = string[index];\n    if (char === quote) {\n      escaped += '\\\\' + quote;\n    } else {\n      escaped"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n    let x = 1;\n    let y = n;\n    while(y!= 0) {\n        x = Math.floor(y/2);\n        y = Math.floor(y - x);\n        if(y!= 0) {\n            x = x - y;\n        }\n    }\n    return x;\n}\n\n/* \n  For a given number n, find the smallest multiple of n that is greater than n\n  >>> smallestMultiple(15)\n  15\n  */\nconst smallestMultiple = (n) => {\n    let x = 1;\n    while(x < n) {\n        x = x*2;\n    }\n    return x;\n}\n\n/*\n  Find the smallest number that is divisible by all the numbers 1 to n\n  >>> smallestDivisor(15)\n  15\n  >>> smallestDivisor(8)\n  8\n  >>> smallestDivisor(100)\n  100\n  */\nconst smallestDivisor = (n) => {\n    let x = 1;\n    while(x <= n) {\n        let y = n;\n        while(y!= 0) {\n            if(y%x == 0) {\n                y = 0;\n            } else {\n                y = y/x;\n            }\n        }\n        x = x + 1;\n    }\n    return x;\n}\n\n/*\n  Find the smallest number that is divisible by all the numbers 1 to n\n  >>> largestDivisor(15)\n  15\n  >>> largestDivisor(8)\n  8\n  >>> largestDivisor(100)\n  100\n  */\nconst largestDivisor = (n) => {\n    let x = 1;\n    while(x <= n) {\n        let y = n;\n        while(y!= 0) {\n            if(y%x == 0) {\n                y = 0;\n            } else {\n                y = y/x;\n            }\n        }\n        x = x + 1;\n    }\n    return x;\n}\n\n/*\n  Find the largest multiple of n that is smaller than n\n  >>> largestMultiple(15)\n  15\n  >>> largestMultiple(8)\n  8\n  >>> largestMultiple(100)\n  100\n  */\nconst largestMultiple = (n) => {\n    let x = 1;\n    while(x <= n) {\n        let y = n;\n        while(y!= 0) {\n            if(y%x == 0) {\n                y = 0;\n            } else {\n                y = y/x;\n            }\n        }\n        x = x + 1;\n    }\n    return x;\n}\n\n/*\n  Find the largest number that is divisible by all the numbers 1 to n\n  >>> largestDivisor(15)\n  15\n  >>> largestDivisor(8)\n  8\n  >>> largestDivisor(100)\n  100\n  */\nconst largestDivisor = (n) => {\n    let x = 1;\n    while(x <= n) {\n        let y = n;\n        while(y!= 0) {\n            if(y%x == 0) {\n                y = 0;\n            } else {\n                y = y/x;\n            }\n        }\n        x = x + 1;\n    }\n    return x;\n}\n\n/*\n  Find the smallest number that is divisible by all the numbers 1 to n\n  >>> largestDivisor(15)\n  15\n  >>> largestDivisor(8)\n  8\n  >>> largestDivisor(100)\n  100\n  */\nconst smallestDivisor = (n) => {\n    let x = 1;\n    while(x <= n) {\n        let y = n;\n        while(y!= 0) {\n            if(y%x == 0) {\n                y = 0;\n            } else {\n                y = y/x;\n            }\n        }\n        x = x + 1;\n    }\n    return x;\n}\n\n/*\n  Find the smallest number that is divisible by all the numbers 1 to n\n  >>> largestDivisor(15)\n  15\n  >>> largestDivisor(8)\n  8\n  >>> largestDivisor(100)\n  100\n  */\nconst smallestMultiple = (n) => {\n    let x = 1;\n    while(x <= n) {\n        let y = n;\n        while(y!= 0) {\n            if(y%x == 0) {\n                y = 0;\n            } else {\n                y = y/x;\n            }\n        }\n        x = x + 1;\n    }\n    return x;\n}<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization .\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let counter = 1;\n  while(counter * counter <= n) {\n    let p = n / counter;\n    if(p.toString() === n.toString()) {\n      factors.push(p);\n    }\n    counter += 1;\n  }\n  return factors;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t .\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const arr = [];\n  const uniqueNums = [];\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNums.indexOf(numbers[i]) < 0) {\n      uniqueNums.push(numbers[i]);\n      arr.push(numbers[i]);\n    }\n  }\n\n  return arr;\n};\n\n/* From a list of strings, remove all nts that appear more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([\"abc\", \"abc\", \"def\"])\n  [\"abc\", \"def\"]\n  */\nconst removeDuplicates2 = (numbers) => {\n  const arr = [];\n  const uniqueNums = [];\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNums.indexOf(numbers[i]) < 0) {\n      uniqueNums.push(numbers[i]);\n      arr.push(numbers[i]);\n    }\n  }\n\n  return arr;\n};\n\n/* From a list of strings, remove all nts that appear more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates2([\"abc\", \"abc\", \"def\"])\n  [\"abc\", \"def\"]\n  */\nconst removeDuplicates3 = (numbers) => {\n  const arr = [];\n  const uniqueNums = [];\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNums.indexOf(numbers[i]) < 0) {\n      uniqueNums.push(numbers[i]);\n      arr.push(numbers[i]);\n    }\n  }\n\n  return arr;\n};\n\n/* From a list of strings, remove all nts that appear more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates3([\"abc\", \"abc\", \"def\"])\n  [\"abc\", \"def\"]\n  */\nconst removeDuplicates4 = (numbers) => {\n  const arr = [];\n  const uniqueNums = [];\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNums.indexOf(numbers[i]) < 0) {\n      uniqueNums.push(numbers[i]);\n      arr.push(numbers[i]);\n    }\n  }\n\n  return arr;\n};\n\n/* From a list of strings, remove all nts that appear more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates4([\"abc\", \"abc\", \"def\"])\n  [\"abc\", \"def\"]\n  */\nconst removeDuplicates5 = (numbers) => {\n  const arr = [];\n  const uniqueNums = [];\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNums.indexOf(numbers[i]) < 0) {\n      uniqueNums.push(numbers[i]);\n      arr.push(numbers[i]);\n    }\n  }\n\n  return arr;\n};\n\n/* From a list of strings, remove all nts that appear more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates5([\"abc\", \"abc\", \"def\"])\n  [\"abc\", \"def\"]\n  */\nconst removeDuplicates6 = (numbers) => {\n  const arr = [];\n  const uniqueNums = [];\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNums.indexOf(numbers[i]) < 0) {\n      uniqueNums.push(numbers[i]);\n      arr.push(numbers[i]);\n    }\n  }\n\n  return arr;\n};\n\nexport {\n  removeDuplicates,\n  removeDuplicates2,\n  removeDuplicates3,\n  removeDuplicates4,\n  removeDuplicates5,\n  removeDuplicates6\n};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.split('').map((char) => {\n    return char.toUpperCase() === char.toLowerCase()? char.toUpperCase() : char.toLowerCase();\n  }).join('');\n};\n\n/*\n  Given a string, return the first letter in uppercase.\n  >>> firstUpperCase('hello')\n  'E'\n  */\nconst firstUpperCase = (string) => {\n  return string.split('').map((char) => {\n    return char.toUpperCase();\n  }).join('');\n};\n\n/*\n  Given a string, return the first letter in lowercase.\n  >>> firstLowerCase('Hello')\n  'e'\n  */\nconst firstLowerCase = (string) => {\n  return string.split('').map((char) => {\n    return char.toLowerCase();\n  }).join('');\n};\n\n/*\n  Given a string, return a string of all lowercase letters.\n  >>> allLowerCase('Hello')\n  'hello'\n  */\nconst allLowerCase = (string) => {\n  return string.split('').map((char) => {\n    return char.toLowerCase();\n  }).join('');\n};\n\n/*\n  Given a string, return a string of all uppercase letters.\n  >>> allUpperCase('Hello')\n  'HELLO'\n  */\nconst allUpperCase = (string) => {\n  return string.split('').map((char) => {\n    return char.toUpperCase();\n  }).join('');\n};\n\n/*\n  Given a string, return a string with all letters in uppercase and lowercase.\n  >>> mixedCase('Hello')\n  'hELLO'\n  */\nconst mixedCase = (string) => {\n  return string.split('').map((char) => {\n    return char.toUpperCase() === char.toLowerCase()? char.toUpperCase() : char.toLowerCase();\n  }).join('');\n};\n\n/*\n  Given a string, return a string with all letters in uppercase and lowercase.\n  >>> mixedCase('hello')\n  'hELLO'\n  */\nconst mixedCase2 = (string) => {\n  return string.split('').map((char) => {\n    return char.toUpperCase() === char.toLowerCase()? char.toLowerCase() : char.toUpperCase();\n  }).join('');\n};\n\n/*\n  Given a string, return a string with all letters in lowercase and uppercase.\n  >>> mixedCase('hello')\n  'HELLO'\n  */\nconst mixedCase3 = (string) => {\n  return string.split('').map((char) => {\n    return char.toUpperCase() === char.toLowerCase()? char.toUpperCase() : char.toLowerCase();\n  }).join('');\n};\n\nexport {\n  firstUpperCase,\n  firstLowerCase,\n  allLowerCase,\n  allUpperCase,\n  mixedCase,\n  mixedCase2,\n  mixedCase3,\n  flipCase,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return (strings || []).join('')\n}\n\n/**\n  * @function: stringToBits\n  * @description: convert a string to binary representation\n  * @param: string - string to be converted to binary representation\n  * @return: array of bits\n  */\nconst stringToBits = (string) => {\n  const length = string.length\n  const bits = []\n  for (let i = 0; i < length; i++) {\n    bits.push(string[i].charCodeAt(0))\n  }\n  return bits\n}\n\n/**\n  * @function: bitsToString\n  * @description: convert a binary representation to a string\n  * @param: array of bits - array of bits\n  * @return: string\n  */\nconst bitsToString = (bits) => {\n  const length = bits.length\n  const string = []\n  for (let i = 0; i < length; i++) {\n    string.push(String.fromCharCode(bits[i]))\n  }\n  return string.join('')\n}\n\n/**\n  * @function: countBits\n  * @description: count the number of bits in a given number\n  * @param: number - number to count the number of bits in\n  * @return: number\n  */\nconst countBits = (number) => {\n  let bits = 0\n  while (number > 0) {\n    bits += (number & 1)\n    number = number >> 1\n  }\n  return bits\n}\n\n/**\n  * @function: bitsToCount\n  * @description: convert a bit representation to a count\n  * @param: array of bits - array of bits\n  * @return: number\n  */\nconst bitsToCount = (bits) => {\n  const count = 0\n  while (bits.length > 0) {\n    count += bits.pop()\n  }\n  return count\n}\n\n/**\n  * @function: bitsToIndex\n  * @description: convert a bit representation to an index\n  * @param: array of bits - array of bits\n  * @return: number\n  */\nconst bitsToIndex = (bits) => {\n  const index = 0\n  while (bits.length > 0) {\n    index += bits.pop()\n  }\n  return index\n}\n\n/**\n  * @function: indexToBits\n  * @description: convert an index to a bit representation\n  * @param: number - index to be converted to bit representation\n  * @return: array of bits\n  */\nconst indexToBits = (index) => {\n  const bits = []\n  const length = index\n  let i = 0\n  while (length > 0) {\n    bits.push(i % 2)\n    i = i >> 1\n    length = length - 1\n  }\n  return bits\n}\n\n/**\n  * @function: indexToCount\n  * @description: convert an index to a count\n  * @param: number - index to be converted to count\n  * @return: number\n  */\nconst indexToCount = (index) => {\n  const count = 0\n  const length = index\n  let i = 0\n  while (length > 0) {\n    count += (length & 1)\n    length = length >> 1\n  }\n  return count\n}\n\n/**\n  * @function: indexToBits\n  * @description: convert an index to a bit representation\n  * @param: number - index to be converted to bit representation\n  * @return: array of bits\n  */\nconst indexToBits = (index) => {\n  const bits = []\n  const length = index\n  let i = 0\n  while (length > 0) {\n    bits.push(i % 2)\n    i = i >> 1\n    length = length - 1\n  }\n  return bits\n}\n\n/**\n  * @function: countToBits\n  * @description: convert a count to a bit representation\n  * @param: number - count to be converted to bit representation\n  * @return: array of bits\n  */\nconst countToBits = (count) => {\n  const bits = []\n  const length = count\n  let i = 0\n  while (length > 0) {\n    bits.push(i % 2)\n    i = i >> 1\n    length = length - 1\n  }\n  return bits\n}\n\nmodule.exports = {\n  concatenate,\n  stringToBits,\n  bitsToString,\n  countBits,\n  bitsToCount,\n  bitsToIndex,\n  indexToBits,\n  indexToCount,\n  indexToBits,\n  countToBits,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  let result = []\n  strings.forEach(s => {\n    if (s.startsWith(prefix)) {\n      result.push(s)\n    }\n  })\n  return result\n}\n\nexport default {\n  isEmpty,\n  filterByPrefix\n}\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n};\n\n/*\n  Return only negative numbers in the l ist.\n  >>> getNegative([1, 2, -4, 5, 6])\n  [1, 2, -4, 5, 6]\n  >>> getNegative([-5, -3, -1, 0, 1, 2, 3, 4, 5])\n  [-5, -3, -1, 0, 1, 2, 3, 4, 5]\n  */\nconst getNegative = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n};\n\n/*\n  Return only odd numbers in the l ist.\n  >>> getOdd([1, 2, 4, 6])\n  [1, 3, 5]\n  >>> getOdd([1, 2, 4, 6, 7, 8, 9])\n  [1, 3, 5, 7, 9]\n  */\nconst getOdd = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 1) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n};\n\n/*\n  Return only even numbers in the l ist.\n  >>> getEven([1, 2, 4, 6])\n  [2, 4, 6]\n  >>> getEven([1, 2, 4, 6, 7, 8, 9])\n  [2, 4, 6, 8, 9]\n  */\nconst getEven = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n};\n\n/*\n  Return only numbers in the l ist.\n  >>> getNumber([1, 2, 4, 6, 7, 8, 9, 10, 20, 30])\n  [1, 2, 4, 6, 7, 8, 9, 10, 20, 30]\n  >>> getNumber([1, 2, 4, 6, 7, 8, 9, 10, 20, 30, 40, 50])\n  [1, 2, 4, 6, 7, 8, 9, 10, 20, 30, 40, 50]\n  >>> getNumber([1, 2, 4, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60])\n  [1, 2, 4, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60]\n  >>> getNumber([1, 2, 4, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80])\n  [1, 2, 4, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80]\n  >>> getNumber([1, 2, 4, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100])\n  [1, 2, 4, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n  >>> getNumber([1, 2, 4, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160])\n  [1, 2, 4, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]\n  >>> getNumber([1, 2, 4, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180])\n  [1, 2, 4, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180]\n  >>> getNumber([1, 2, 4, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190])\n  [1, 2, 4, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190]\n  >>> getNumber([1, 2, 4, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200])\n  [1, 2, 4, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]\n  >>> getNumber([1, 2, 4, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210])\n  [1, 2, 4, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210]\n  >>> getNumber([1, 2, 4, 6, 7, 8, 9, 10,"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n === 1 || n === 4) return false\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return false\n  if (n % 5 === 0) return false\n  if (n % 7 === 0) return false\n  if (n % 11 === 0) return false\n  if (n % 13 === 0) return false\n  if (n % 17 === 0) return false\n  const sqrt = Math.sqrt(n)\n  for (let i = 6; i <= sqrt; i += 6) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*Return a list of prime numbers.\n  >>> primes(100)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  */\nconst primes = (n) => {\n  const i = 2\n  const arr = []\n  while (i < n) {\n    if (isPrime(i)) arr.push(i)\n    i += 1\n  }\n  return arr\n}\n\nmodule.exports = {\n  primes,\n  isPrime\n}\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const evens = (x) => xs.filter(it => it % 2 === 0);\n  const xs0 = evens(xs);\n  if (xs0.length === 0) {\n    return 0;\n  }\n  const largest = Math.max(...xs0);\n  const min = Math.min(...xs0);\n  const a = (x) => x - largest;\n  const b = (x) => largest - x;\n  const c = (x) => largest - x * x;\n  const d = (x) => x * x - largest;\n  const solution = solve([a, b, c, d], xs0);\n  return solution.x;\n}\n\n/*\n  Takes an array  xs  of coefficien tns.\n  and returns the  x  such that poly(x) = 0.\n  \n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findX = (xs) => {\n  const evens = (x) => xs.filter(it => it % 2 === 0);\n  const xs0 = evens(xs);\n  if (xs0.length === 0) {\n    return 0;\n  }\n  const largest = Math.max(...xs0);\n  const min = Math.min(...xs0);\n  const a = (x) => x - largest;\n  const b = (x) => largest - x;\n  const c = (x) => largest - x * x;\n  const d = (x) => x * x - largest;\n  const solution = solve([a, b, c, d], xs0);\n  return solution.x;\n}\n\n/*\n  Takes an array  xs  of coefficien tns.\n  and returns the  x  such that poly(x) = 0.\n  \n  >>> round(findX([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findX([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findX2 = (xs) => {\n  const evens = (x) => xs.filter(it => it % 2 === 0);\n  const xs0 = evens(xs);\n  if (xs0.length === 0) {\n    return 0;\n  }\n  const largest = Math.max(...xs0);\n  const min = Math.min(...xs0);\n  const a = (x) => x - largest;\n  const b = (x) => largest - x;\n  const c = (x) => largest - x * x;\n  const d = (x) => x * x - largest;\n  const solution = solve([a, b, c, d], xs0);\n  return solution.x;\n}\n\nconst poly = (x, xs) => oly(xs, x);\nconst poly2 = (x, xs) => poly(x, xs);\n\nconst solve = (coeffs, xs) => {\n  const result = [];\n  for (let i = 0; i < xs.length; i++) {\n    result.push(poly2(xs[i], coeffs));\n  }\n  return {x: Math.min(...result), index: result.indexOf(Math.min(...result))};\n}\n\nconst main = () => {\n  let x = findX([1, 2]);\n  console.log(x);\n  x = findX2([1, 2]);\n  console.log(x);\n  x = findZero([1, 2]);\n  console.log(x);\n  x = findX([1, 2]);\n  console.log(x);\n  x = findX2([1, 2]);\n  console.log(x);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n    let res = [];\n    let l_ = l;\n    let count = 0;\n    for (let i = 0; i < l_.length; i++) {\n        if (count === 0) {\n            res.push(l_[i]);\n        } else {\n            let temp = res[res.length - 1];\n            if (l_[i] % 3 === 0) {\n                res.push(l_[i]);\n            } else {\n                if (l_[i] < temp) {\n                    res.push(l_[i]);\n                }\n            }\n        }\n        count += 1;\n    }\n    return res;\n};\n\nmodule.exports = sortThird;\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return l.filter(\n    (item) =>\n      l.indexOf(item) === -1\n     ? true\n      : false\n  )\n   .sort()\n   .filter(\n      (item) =>\n        l.indexOf(item) === -1\n       ? true\n        : false\n    )\n   .sort()\n   .filter(\n      (item) =>\n        l.indexOf(item) === -1\n       ? true\n        : false\n    )\n   .sort()\n   .filter(\n      (item) =>\n        l.indexOf(item) === -1\n       ? true\n        : false\n    )\n   .sort()\n   .filter(\n      (item) =>\n        l.indexOf(item) === -1\n       ? true\n        : false\n    )\n   .sort()\n}\n\nexport default unique\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (!l || l.length === 0) {\n    return -Infinity;\n  }\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers, return the index of the minimum element.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0\n  */\nconst minElement = (l) => {\n  if (!l || l.length === 0) {\n    return -Infinity;\n  }\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers, return the number of elements in the array that are\n  positive.\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  30\n  >>> sum([-2, -1, 0, 1, 2])\n  5\n  >>> sum([-2, -1, 0, 1, 2, -3, -4, -5, -6, -7, -8, -9, -10, -11])\n  0\n  */\nconst sum = (l) => {\n  if (!l || l.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\nmodule.exports = {\n  minElement,\n  maxElement,\n  sum\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n    let div = (n/10) | 0;\n    let mod = n % 10;\n    let divisor = div === 0? 1 : (11 + 13) / div;\n\n    if (mod === 0) {\n        return div;\n    } else if (div === mod) {\n        return 1 + divisor;\n    } else if (div === mod + 1) {\n        return 2 + divisor;\n    } else {\n        return div + divisor;\n    }\n};\n\n/*\n  >>> fizzBuzz(0)\n  0\n  >>> fizzBuzz(1)\n  1\n  >>> fizzBuzz(2)\n  2\n  >>> fizzBuzz(3)\n  3\n  >>> fizzBuzz(4)\n  4\n  >>> fizzBuzz(5)\n  5\n  >>> fizzBuzz(6)\n  6\n  >>> fizzBuzz(7)\n  7\n  >>> fizzBuzz(8)\n  8\n  >>> fizzBuzz(9)\n  9\n  >>> fizzBuzz(10)\n  10\n  >>> fizzBuzz(11)\n  11\n  >>> fizzBuzz(12)\n  12\n  >>> fizzBuzz(13)\n  13\n  >>> fizzBuzz(14)\n  14\n  >>> fizzBuzz(15)\n  15\n  >>> fizzBuzz(16)\n  16\n  >>> fizzBuzz(17)\n  17\n  >>> fizzBuzz(18)\n  18\n  >>> fizzBuzz(19)\n  19\n  >>> fizzBuzz(20)\n  20\n  >>> fizzBuzz(21)\n  21\n  >>> fizzBuzz(22)\n  22\n  >>> fizzBuzz(23)\n  23\n  >>> fizzBuzz(24)\n  24\n  >>> fizzBuzz(25)\n  25\n  >>> fizzBuzz(26)\n  26\n  >>> fizzBuzz(27)\n  27\n  >>> fizzBuzz(28)\n  28\n  >>> fizzBuzz(29)\n  29\n  >>> fizzBuzz(30)\n  30\n  >>> fizzBuzz(31)\n  31\n  >>> fizzBuzz(32)\n  32\n  >>> fizzBuzz(33)\n  33\n  >>> fizzBuzz(34)\n  34\n  >>> fizzBuzz(35)\n  35\n  >>> fizzBuzz(36)\n  36\n  >>> fizzBuzz(37)\n  37\n  >>> fizzBuzz(38)\n  38\n  >>> fizzBuzz(39)\n  39\n  >>> fizzBuzz(40)\n  40\n  >>> fizzBuzz(41)\n  41\n  >>> fizzBuzz(42)\n  42\n  >>> fizzBuzz(43)\n  43\n  >>> fizzBuzz(44)\n  44\n  >>> fizzBuzz(45)\n  45\n  >>> fizzBuzz(46)\n  46\n  >>> fizzBuzz(47)\n  47\n  >>> fizzBuzz(48)\n  48\n  >>> fizzBuzz(49)\n  49\n  >>> fizzBuzz(50)\n  50\n  >>> fizzBuzz(51)\n  51\n  >>> fizzBuzz(52)\n  52\n  >>> fizzBuzz(53)\n  53\n  >>> fizzBuzz(54)\n  54\n  >>> fizzBuzz(55)\n  55\n  >>> fizzBuzz(56)\n  56\n  >>> fizzBuzz(57)\n  57\n  >>> fizzBuzz(58)\n  58\n  >>> fizzBuzz(59)\n  59\n  >>> fizzBuzz(60)\n  60\n  >>> fizzBuzz(61)\n  61\n  >>> fizzBuzz(62)\n  62\n  >>> fizzBuzz(63)\n  63\n  >>> fizzBuzz(64)\n  64\n  >>> fizzBuzz(65)\n  65\n  >>> fizzBuzz(66)\n  66\n  >>> fizzBuzz(67)\n  67\n  >>> fizzBuzz(68)\n  68\n  >>> fizzBuzz(69)\n  69\n  >>> fizzBuzz(70)\n  70\n  >>> fizzBuzz(71)\n  71\n  >>> fizzBuzz(72)\n  72\n  >>> fizzBuzz(73)\n  73\n  >>> fizzBuzz(74)\n  74\n  >>> fizzBuzz(75)\n  75\n  >>> fizzBuzz(76)\n  76\n  >>> fizzBuzz(77)\n  77\n  >>> fizzBuzz(78)\n  78\n  >>> fizzBuzz(79)\n  79\n  */\nconst fizzBuzz = (n) => {\n    let div = (n/10) | 0;\n    let mod = n % 10;\n    let divisor = div === 0? 1 : (11 + 13) / div;\n    let fizzBuzz;\n    let divMod;\n\n    if (mod === 0) {\n        fizzBuzz = div;\n    } else if (div === mod) {\n        fizzBuzz = 1 + divisor;\n    } else if (div === mod + 1) {\n        fizzBuzz = 2 + divisor;\n    } else {\n        fizzBuzz = div + divisor;\n    }\n\n    return fizzBuzz;\n};\n\nexport default fizzBuzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const sorted = [];\n  const len = l.length;\n  for(let i = 0; i < len; i+=2)\n  {\n    sorted.push(l[i]);\n  }\n  for(let i = 1; i < len; i+=2)\n  {\n    sorted.push(l[i]);\n  }\n  return sorted;\n};\n\nmodule.exports = sortEven;\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math .min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n var groups = [ ], group = [];\n  for(constgroup ofgroups) {\n    group = group + s.slice(groups[i].leng th);\n  }\n  return group.join('');\n}\n\n/*\n  decodes string using the function encode_cyclic.\n  */\nconst decodeCyclic = (s) =>{\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    groups2. push(groups2.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups.push(group.slice(1) + group [0]);\n  }\n  return groups;\n}\n\nconst cnv = (s) => {\n  let nv = encodeCylcic(s);\n  return decodeCyclic(nv);\n}\n\nexport {encodeCyclic, decodeCyclic, cnv};\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    let i = 1,\n        j = 2;\n\n    while (i < n) {\n        j = (i + j) % n;\n        i = (2 * i + j) % n;\n    }\n    return n;\n}\n\n/*\n  primeFibFast returns n-th number that is a Fi bonacci number and it's also prime.\n  >>> primeFibFast(1)\n  2\n  >>> primeFibFast(2)\n  3\n  >>> primeFibFast(3)\n  5\n  >>> primeFibFast(4)\n  13\n  >>> primeFibFast(5)\n  89\n  */\nconst primeFibFast = (n) => {\n    let i = 1,\n        j = 2;\n\n    while (i < n) {\n        j = (j + i) % n;\n        i = (2 * i + j) % n;\n    }\n    return n;\n}\n\n/*\n  primeFibFast returns n-th number that is a Fi bonacci number and it's also prime.\n  >>> primeFibFast(1)\n  2\n  >>> primeFibFast(2)\n  3\n  >>> primeFibFast(3)\n  5\n  >>> primeFibFast(4)\n  13\n  >>> primeFibFast(5)\n  89\n  */\nconst primeFibFast2 = (n) => {\n    let i = 1,\n        j = 2,\n        k = 1,\n        l = 1,\n        m = 1;\n\n    while (i < n) {\n        j = (j + i) % n;\n        k = (k + j) % n;\n        l = (l + k) % n;\n        m = (m + l) % n;\n        i = (2 * i + j) % n;\n    }\n    return n;\n}\n\nconst isPrime = (n) => {\n    let i = 2;\n    while (i < n) {\n        if (n % i == 0) {\n            return false;\n        }\n        i += 1;\n    }\n    return true;\n}\n\n/*\n  primeFib returns n-th number that is a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  >>> primeFib(6)\n  225\n  >>> primeFib(7)\n  2379\n  >>> primeFib(8)\n  47459\n  >>> primeFib(9)\n  8947993\n  >>> primeFib(10)\n  268700443\n  */\nconst primeFib2 = (n) => {\n    let i = 2,\n        j = 3,\n        k = 5,\n        l = 7,\n        m = 11,\n        n = 13;\n\n    while (i < n) {\n        j = (j + i) % n;\n        k = (k + j) % n;\n        l = (l + k) % n;\n        m = (m + l) % n;\n        i = (2 * i + j) % n;\n    }\n    return n;\n}\n\nconst fib = (n) => {\n    let i = 1,\n        j = 1;\n\n    while (i < n) {\n        j = (i + j) % n;\n        i = (2 * i + j) % n;\n    }\n    return n;\n}\n\n/*\n  primeFib returns n-th number that is a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  >>> primeFib(6)\n  225\n  >>> primeFib(7)\n  2379\n  >>> primeFib(8)\n  47459\n  >>> primeFib(9)\n  8947993\n  >>> primeFib(10)\n  268700443\n  */\nconst primeFib3 = (n) => {\n    let i = 1,\n        j = 2,\n        k = 3;\n\n    while (i < n) {\n        j = (j + i) % n;\n        k = (k + j) % n;\n        i = (2 * i + j) % n;\n    }\n    return n;\n}\n\n/*\n  primeFib returns n-th number that is a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  >>> primeFib(6)\n  225\n  >>> primeFib(7)\n  2379\n  >>> primeFib(8)\n  47459\n  >>> primeFib(9)\n  8947993\n  >>> primeFib(10)\n  268700443\n  */\nconst primeFib4 = (n) => {\n    let i = 1,\n        j = 2,\n        k = 3,\n        l = 5,\n        m = 7;\n\n    while (i < n) {\n        j = (j + i) % n;\n        k = (k + j) % n;\n        l = (l + k) % n;\n        m = (m + l) % n;\n        i = (2 * i + j) % n;\n    }\n    return n;\n}\n\nconst primeFib5 = (n) => {\n    let i = 1,\n        j = 2,\n        k = 3,\n        l = 5,\n        m = 7,\n        n = 11;\n\n    while ("}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let a = 0, b = 0, c = 0;\n  for(let i = 0; i < l.length - 2; i++){\n    a = l[i];\n    b = l[i + 1];\n    c = l[i + 2];\n    if(a + b + c === 0) return true;\n  }\n  return false;\n};\n\nexport default triplesSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n      for (int i = 0; i < n; i++)\n          for (int j = 0; j < n; j++)\n              if (abs(i - j)!= n - 1) {\n                  if (abs(i - j) == 0) {\n                      if (carRaceCollision(i, j, n))\n                          return 1;\n                  } else if (abs(i - j) > 0) {\n                      if (carRaceCollision(i, j, n))\n                          return 1;\n                  } else {\n                      if (carRaceCollision(i, j, n))\n                          return 1;\n                  }\n              }\n      return 0;\n  }\n\n  boolean carRaceCollision(int a, int b, int n) {\n    // this function has been written by me\n    return false;\n  }\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(n + \" \" + st carRaceCollision(n));\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented  by 1 .\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n    const list = l.slice()\n    list.forEach((elem, index) => list[index] = elem + 1)\n    return list\n}\n\n/**\n  * Return the sum of the elements of a list\n  * @param {Array} l The list\n  * @return {Number} The sum of the elements\n  * @example\n  * >>> sumList([1, 2, 3])\n  * 6\n  * >>> sumList([1, 2, 3, 4, 5, 6, 7, 8])\n  * 40\n  */\nconst sumList = (l) => l.reduce((acc, elem) => acc + elem, 0)\n\n/**\n  * Returns the index of the first element in a list equal to a number\n  * @param {Array} l The list\n  * @param {Number} n The number\n  * @return {Number} The index of the element or -1 if not found\n  * @example\n  * >>> indexOf([1, 2, 3, 1, 2, 3], 2)\n  * 2\n  * >>> indexOf([1, 2, 3, 1, 2, 3], 1)\n  * 0\n  */\nconst indexOf = (l, n) => l.indexOf(n)\n\n/**\n  * Returns the index of the last element in a list equal to a number\n  * @param {Array} l The list\n  * @param {Number} n The number\n  * @return {Number} The index of the element or -1 if not found\n  * @example\n  * >>> lastIndexOf([1, 2, 3, 1, 2, 3], 2)\n  * 5\n  * >>> lastIndexOf([1, 2, 3, 1, 2, 3], 1)\n  * 4\n  */\nconst lastIndexOf = (l, n) => l.lastIndexOf(n)\n\n/**\n  * Returns the index of the first element in a list equal to a number\n  * @param {Array} l The list\n  * @param {Number} n The number\n  * @return {Number} The index of the element or -1 if not found\n  * @example\n  * >>> indexOf([1, 2, 3, 1, 2, 3], 2)\n  * 2\n  * >>> indexOf([1, 2, 3, 1, 2, 3], 1)\n  * 0\n  */\nconst lastIndexOf = (l, n) => l.lastIndexOf(n)\n\n/**\n  * Returns a list with the elements of a list which are not equal to a number\n  * @param {Array} l The list\n  * @param {Number} n The number\n  * @return {Array} The list\n  * @example\n  * >>> notEqual([1, 2, 3, 1, 2, 3], 2)\n  * [1, 3, 5]\n  */\nconst notEqual = (l, n) => l.filter((elem) => elem!== n)\n\n/**\n  * Returns a list with the elements of a list which are greater than a number\n  * @param {Array} l The list\n  * @param {Number} n The number\n  * @return {Array} The list\n  * @example\n  * >>> greaterThan([1, 2, 3, 1, 2, 3], 2)\n  * [3, 5]\n  */\nconst greaterThan = (l, n) => l.filter((elem) => elem > n)\n\n/**\n  * Returns a list with the elements of a list which are greater than or equal to a number\n  * @param {Array} l The list\n  * @param {Number} n The number\n  * @return {Array} The list\n  * @example\n  * >>> greaterOrEqual([1, 2, 3, 1, 2, 3], 2)\n  * [1, 2, 3]\n  */\nconst greaterOrEqual = (l, n) => l.filter((elem) => elem >= n)\n\n/**\n  * Returns a list with the elements of a list which are less than a number\n  * @param {Array} l The list\n  * @param {Number} n The number\n  * @return {Array} The list\n  * @example\n  * >>> lessThan([1, 2, 3, 1, 2, 3], 2)\n  * [1, 2]\n  */\nconst lessThan = (l, n) => l.filter((elem) => elem < n)\n\n/**\n  * Returns a list with the elements of a list which are less than or equal to a number\n  * @param {Array} l The list\n  * @param {Number} n The number\n  * @return {Array} The list\n  * @example\n  * >>> lessOrEqual([1, 2, 3, 1, 2, 3], 2)\n  * [1, 2, 3]\n  */\nconst lessOrEqual = (l, n) => l.filter((elem) => elem <= n)\n\n/**\n  * Returns a list with the elements of a list which are greater than or equal to a number\n  * @param {Array} l The list\n  * @param {Number} n The number\n  * @return {Array} The list\n  * @example\n  * >>> greaterOrEqual([1, 2, 3, 1, 2, 3], 2)\n  * [3, 5]\n  */\nconst greaterOrEqual = (l, n) => l.filter((elem) => elem >= n)\n\n/**\n  * Returns a list with the elements of a list which are less than a number\n  * @param {Array} l The list\n  * @param {Number} n The number\n  * @return {Array} The list\n  * @example\n  * >>> lessThan([1, 2, 3, 1, 2, 3], 2)\n  * [1, 2]\n  */\nconst lessThan = (l, n) => l.filter((elem) => elem < n)\n\n/**\n  * Returns a list with the elements of a list which are greater than a number\n  * @param {Array} l The list\n  *"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  l.forEach((x) => sum += x);\n  return l.every((x) => sum - x >= 0)\n}\n\n/**\n  finds all the prime numbers in a list\n  >>> findPrime([1, 2, 3, 5, 7, 11, 13])\n  [2, 3, 5, 7, 11, 13]\n  >>> findPrime([])\n  []\n  >>> findPrime([1, 2, 3, 5, 7, 11, 13])\n  [2, 3, 5, 7, 11, 13]\n  >>> findPrime([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 3, 5, 7, 11, 13]\n  */\nconst findPrime = (l) => {\n  let result = [];\n  l.forEach((x) => {\n    if (isPrime(x)) {\n      result.push(x);\n    }\n  });\n  return result;\n}\n\n/**\n  finds all the primes under a given number\n  >>> findPrimeNumbers(0)\n  []\n  >>> findPrimeNumbers(2)\n  [2]\n  >>> findPrimeNumbers(3)\n  [2, 3]\n  >>> findPrimeNumbers(7)\n  [2, 3, 5, 7]\n  >>> findPrimeNumbers(10)\n  [2, 3, 5, 7, 11, 13]\n  */\nconst findPrimeNumbers = (l) => {\n  let result = [];\n  for (let i = 0; i <= l; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n  finds all the prime factors under a given number\n  >>> findPrimeFactors(0)\n  []\n  >>> findPrimeFactors(2)\n  [2]\n  >>> findPrimeFactors(3)\n  [3]\n  >>> findPrimeFactors(7)\n  [7]\n  >>> findPrimeFactors(10)\n  [2, 5]\n  >>> findPrimeFactors(12)\n  [2, 3, 6]\n  */\nconst findPrimeFactors = (l) => {\n  let result = [];\n  for (let i = 1; i <= l; i++) {\n    if (l % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n  checks if a number is prime\n  >>> isPrime(0)\n  false\n  >>> isPrime(1)\n  false\n  >>> isPrime(2)\n  true\n  >>> isPrime(3)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(5)\n  false\n  >>> isPrime(7)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13)\n  true\n  */\nconst isPrime = (n) => {\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n  calculates the factorial of a number\n  >>> factorial(0)\n  1\n  >>> factorial(1)\n  1\n  >>> factorial(2)\n  2\n  >>> factorial(3)\n  6\n  >>> factorial(4)\n  24\n  */\nconst factorial = (n) => {\n  if (n < 0) {\n    return false;\n  }\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\n/**\n  checks if a number is a palindrome\n  >>> isPalindrome(0)\n  false\n  >>> isPalindrome(1)\n  true\n  >>> isPalindrome(2)\n  true\n  >>> isPalindrome(3)\n  true\n  >>> isPalindrome(4)\n  true\n  >>> isPalindrome(5)\n  true\n  >>> isPalindrome(6)\n  true\n  >>> isPalindrome(7)\n  true\n  >>> isPalindrome(8)\n  true\n  >>> isPalindrome(9)\n  true\n  >>> isPalindrome(10)\n  true\n  >>> isPalindrome(11)\n  true\n  >>> isPalindrome(12)\n  true\n  >>> isPalindrome(13)\n  true\n  >>> isPalindrome(14)\n  true\n  >>> isPalindrome(15)\n  true\n  >>> isPalindrome(16)\n  true\n  >>> isPalindrome(17)\n  true\n  >>> isPalindrome(18)\n  true\n  >>> isPalindrome(19)\n  true\n  >>> isPalindrome(20)\n  true\n  >>> isPalindrome(21)\n  true\n  >>> isPalindrome(22)\n  true\n  >>> isPalindrome(23)\n  true\n  >>> isPalindrome(24)\n  true\n  >>> isPalindrome(25)\n  true\n  >>> isPalindrome(26)\n  false\n  >>> isPalindrome(27)\n  false\n  >>> isPalindrome(28)\n  false\n  >>> isPalindrome(29)\n  false\n  >>> isPalindrome(30)\n  false\n  >>> isPalindrome(31)\n  false\n  >>> isPalindrome(32)\n  false\n  >>> isPalindrome(33"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = '';\n  let divisor = base;\n  while (x > 0) {\n    result = `${x % divisor}${result}`;\n    x = Math.floor(x / divisor);\n    divisor = Math.floor(divisor / base);\n  }\n  return result;\n};\n\n//console.log(changeBase(9, 4));\n\n// const changeBase = (x, base) => {\n//   let result = '';\n//   while (x > 0) {\n//     result = `${x % base}${result}`;\n//     x = Math.floor(x / base);\n//   }\n//   return result;\n// };\n\n/*\n  Input:  base = 10, number = 8\n  Output: result = 2\n  >>> changeBase(8, 10)\n  2\n  >>> changeBase(8, 3)\n  2\n  >>> changeBase(8, 2)\n  1\n  >>> changeBase(7, 2)\n  1\n  >>> changeBase(1, 2)\n  1\n  >>> changeBase(0, 2)\n  0\n  >>> changeBase(9, 2)\n  1\n  >>> changeBase(8, 1)\n  0\n  >>> changeBase(8, 0)\n  0\n  >>> changeBase(9, 0)\n  0\n  >>> changeBase(10, 0)\n  0\n  >>> changeBase(11, 0)\n  1\n  >>> changeBase(12, 0)\n  1\n  >>> changeBase(999, 0)\n  999\n  >>> changeBase(999, 1)\n  999\n  >>> changeBase(999, 2)\n  999\n  >>> changeBase(999, 3)\n  999\n  >>> changeBase(999, 4)\n  999\n  >>> changeBase(999, 5)\n  999\n  >>> changeBase(999, 6)\n  999\n  >>> changeBase(999, 7)\n  999\n  >>> changeBase(999, 8)\n  999\n  >>> changeBase(999, 9)\n  999\n  >>> changeBase(999, 10)\n  999\n  >>> changeBase(999, 11)\n  999\n  >>> changeBase(999, 12)\n  999\n  >>> changeBase(999, 13)\n  999\n  >>> changeBase(999, 14)\n  999\n  >>> changeBase(999, 15)\n  999\n  >>> changeBase(999, 16)\n  999\n  >>> changeBase(999, 17)\n  999\n  >>> changeBase(999, 18)\n  999\n  >>> changeBase(999, 19)\n  999\n  >>> changeBase(999, 20)\n  999\n  >>> changeBase(999, 21)\n  999\n  >>> changeBase(999, 22)\n  999\n  >>> changeBase(999, 23)\n  999\n  >>> changeBase(999, 24)\n  999\n  >>> changeBase(999, 25)\n  999\n  >>> changeBase(999, 26)\n  999\n  >>> changeBase(999, 27)\n  999\n  >>> changeBase(999, 28)\n  999\n  >>> changeBase(999, 29)\n  999\n  >>> changeBase(999, 30)\n  999\n  >>> changeBase(999, 31)\n  999\n  >>> changeBase(999, 32)\n  999\n  >>> changeBase(999, 33)\n  999\n  >>> changeBase(999, 34)\n  999\n  >>> changeBase(999, 35)\n  999\n  >>> changeBase(999, 36)\n  999\n  >>> changeBase(999, 37)\n  999\n  >>> changeBase(999, 38)\n  999\n  >>> changeBase(999, 39)\n  999\n  >>> changeBase(999, 40)\n  999\n  >>> changeBase(999, 41)\n  999\n  >>> changeBase(999, 42)\n  999\n  >>> changeBase(999, 43)\n  999\n  >>> changeBase(999, 44)\n  999\n  >>> changeBase(999, 45)\n  999\n  >>> changeBase(999, 46)\n  999\n  >>> changeBase(999, 47)\n  999\n  >>> changeBase(999, 48)\n  999\n  >>> changeBase(999, 49)\n  999\n  >>> changeBase(999, 50)\n  999\n  >>> changeBase(999, 51)\n  999\n  >>> changeBase(999, 52)\n  999\n  >>> changeBase(999, 53)\n  999\n  >>> changeBase(999, 54)\n  999\n  >>> changeBase(999, 55)\n  999\n  >>> changeBase(999, 56)\n  999\n  >>> changeBase(999, 57)\n  999\n  >>> changeBase(999, 58)\n  999\n  >>> changeBase(999, 59)\n  999\n  >>> changeBase(999, 60)\n  999\n  >>> changeBase(999, 61)\n  999\n  >>> changeBase(999, 62)\n  999\n  >>> changeBase(999, 63)\n  999\n  >>> changeBase(999, 64)\n  999\n  >>> changeBase(999, 65)\n  999\n  >>> changeBase(999, 66)\n  999\n  >>> changeBase(999, 67)\n  999\n  >>> changeBase(999, 68)\n  999\n  >>> changeBase(999, 69)\n  999\n  >>> changeBase(999, 70)\n  999\n  >>> changeBase(999, 71)\n  999\n  >>> changeBase(999, 72)\n  999\n  >>> changeBase(999, 73)\n  999\n  >>> changeBase(999, 74)\n  999\n  >>> changeBase(999, 75)\n  999\n  >>> changeBase(999, 76)\n  999\n  >>> changeBase(999, 77)\n  999\n  >>> changeBase(999, 78)\n  999\n  >>> changeBase(999, 79)\n  999\n  >>> changeBase(999, 80)\n  999\n  >>> changeBase(999, 81)\n  999\n  >>> changeBase(999, 82)\n  "}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n    return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 4)\n  9\n  */\nconst triangleArea = (a, h) => {\n    return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(7, 3)\n  12\n  */\nconst triangleArea = (a, h) => {\n    return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(3, 2)\n  4\n  */\nconst triangleArea = (a, h) => {\n    return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(7, 2)\n  6\n  */\nconst triangleArea = (a, h) => {\n    return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(8, 2)\n  6\n  */\nconst triangleArea = (a, h) => {\n    return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(8, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n    return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(9, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n    return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(9, 5)\n  15\n  */\nconst triangleArea = (a, h) => {\n    return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(9, 6)\n  18\n  */\nconst triangleArea = (a, h) => {\n    return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(9, 7)\n  21\n  */\nconst triangleArea = (a, h) => {\n    return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(9, 8)\n  24\n  */\nconst triangleArea = (a, h) => {\n    return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(11, 3)\n  8\n  */\nconst triangleArea = (a, h) => {\n    return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(11, 4)\n  12\n  */\nconst triangleArea = (a, h) => {\n    return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(11, 5)\n  15\n  */\nconst triangleArea = (a, h) => {\n    return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(11, 6)\n  18\n  */\nconst triangleArea = (a, h) => {\n    return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(11, 7)\n  21\n  */\nconst triangleArea = (a, h) => {\n    return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(11, 8)\n  24\n  */\nconst triangleArea = (a, h) => {\n    return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(15, 8)\n  18\n  */\nconst triangleArea = (a, h) => {\n    return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(15, 9)\n  27\n  */\nconst triangleArea = (a, h) => {\n    return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(15, 10)\n  30\n  */\nconst triangleArea = (a, h) => {\n    return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(15, 11)\n  33\n  */\nconst triangleArea = (a, h) => {\n    return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(15, 12)\n  36\n  */\nconst triangleArea = (a, h) => {\n    return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(15, 13)\n  39\n  */\nconst triangleArea = (a, h) => {\n    return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(15, 14)\n  42\n  */\nconst triangleArea = (a, h) => {\n    return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(17, 2)\n  9\n  */\n"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0;\n  else if (n === 1) return 1;\n  else if (n === 2) return 2;\n  else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n  }\n};\n\nfib4(7);\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let count = 0;\n  const sort = (a, b) => a - b;\n  const len = l.length;\n  const start = len / 2;\n  const end = len - 1;\n  const sorted = l.slice(0);\n  sorted.sort(sort);\n  return sorted[start];\n};\n\nmodule.exports = median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    if (text.length === 1) {\n        return true\n    }\n    const textChunks = text.split('')\n    const length = textChunks.length\n    let index = length / 2\n    let counter = 0\n    while (counter < length / 2) {\n        if (textChunks[index]!== textChunks[length - index - 1]) {\n            return false\n        }\n        index--\n        counter++\n    }\n    return true\n}\n\nconst checkPalindrome = (text) => {\n    if (text.length === 1) {\n        return true\n    }\n    const textChunks = text.split('')\n    const length = textChunks.length\n    let index = length / 2\n    let counter = 0\n    while (counter < length / 2) {\n        if (textChunks[index]!== textChunks[length - index - 1]) {\n            return false\n        }\n        index--\n        counter++\n    }\n    return true\n}\n\nmodule.exports = {\n    isPalindrome,\n    checkPalindrome\n}<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of nume rics) .\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (be aware of nume rics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n    const x = Math.pow(2, n);\n    return x % p;\n};\n\nexport {\n    modp\n};\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n  retu rn s. split(\" \" ).map(c h => String.fromCharCode(((c.charCode At(0) - 5) - \"a\".charCod eAt(0)) % 26) + \"a\" ).join(\"\");\n}\n\nconst decode =(s) => {\n  return s.split(\" \" ).map(c h => String.fromCharCode(c.charCode At(0) - \"a\".charCod eAt(0))).join(\"\");\n}\n\nconst encode =(s) => {\n  return s.split(\" \" ).map(c h => \"a\".charCod eAt(0) + (c.charCode At(0) - \"a\".charCod eAt(0)) % 26).join(\"\");\n}\n\n\n\nexport default {\n  encode: encode,\n  decode: decode,\n  decodeShift: decodeShift,\n  encodeShift: encodeShift\n}\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n}\n\n/*\n  removePunctuation is a function that takes a string and returns string without punctuation\n  >>> removePunctuation(\"abcdef,ghijklm\")\n  'abcdef,ghijklm'\n  >>> removePunctuation(\"abcdef,ghijklm\")\n  'abcdef,ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef!ghijklm\")\n  'abcdefghijklm'\n  >>> removePunctuation(\"abcdef'ghijklm\")\n  'abcdefghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef?ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef!ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef'ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  >>> removePunctuation(\"abcdef.ghijklm\")\n  'abcdef.ghijklm'\n  "}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length;\n  let i = 0;\n  while (i < len) {\n    if (l[i] >= t) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  const len = l.length;\n  let i = 0;\n  while (i < len) {\n    if (l[i] < t) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nexport {\n  belowThreshold,\n  aboveThreshold,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n    return x + y;\n};\n\n/*\n  Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  210\n  */\nconst multiply = (x, y) => {\n    return x * y;\n};\n\n/*\n  Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n    return x - y;\n};\n\n/*\n  Divide two numbers x and y\n  >>> divide(2, 3)\n�\n * @author mikem\n */\nvar _ = require('../util/util.js');\nvar n = new _({\n    'name':'mikem',\n    'description': 'A very large number',\n   'version': '0.2.0',\n    'npm:name"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0length = s0.length\n  const s1length = s1.length\n  if (s0length!== s1length) {\n    return false\n  }\n  for (let i = 0; i < s0length; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false\n    }\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\nexport default fib\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketsArray = brackets.split(\" \");\n  let stack = [];\n  for (let i = 0; i < bracketsArray.length; i++) {\n    if (bracketsArray[i] === \"<\") {\n      stack.push(bracketsArray[i]);\n    }\n    else {\n      let opening = bracketsArray[i];\n      if (stack.length === 0) {\n        return false;\n      }\n      else {\n        let stackTop = stack[stack.length - 1];\n        if (stackTop === \">\") {\n          stack.pop();\n        }\n        else if (stackTop === \"\") {\n          stack.pop();\n          stack.pop();\n        }\n        else if (stackTop === \"<\") {\n          return false;\n        }\n        else if (stackTop === \">\") {\n          return false;\n        }\n      }\n    }\n  }\n  if (stack.length!== 0) {\n    return false;\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const n = l.length;\n  const last = l[n - 1];\n  let m = 0;\n  for (let i = 1; i < n; ++i) {\n    if (l[i] > last) {\n      m = i;\n      break;\n    }\n  }\n  if (m == 0) {\n    return true;\n  }\n  const x = l[m];\n  const y = l[m - 1];\n  return x >= y;\n};\n\n/* Return true is list elements are mono tonic ally increasing.\n  >>> monotonic([1, 2, 4, 20])\n  false\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  */\nconst monotonic_only_increasing = (l) => {\n  const n = l.length;\n  for (let i = 1; i < n; ++i) {\n    if (l[i] > l[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Return true is list elements are mono tonic decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  false\n  >>> monotonic([1, 20, 4, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic_only_decreasing = (l) => {\n  const n = l.length;\n  for (let i = 1; i < n; ++i) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Return true iff list is in increasing order.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  */\nconst monotonic_increasing = (l) => monotonic(l);\n\n/* Return true iff list is in decreasing order.\n  >>> monotonic([1, 2, 4, 20])\n  false\n  >>> monotonic([1, 20, 4, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic_decreasing = (l) => monotonic(l, false);\n\nmodule.exports = {\n  monotonic,\n  monotonic_only_increasing,\n  monotonic_only_decreasing,\n  monotonic_increasing,\n  monotonic_decreasing\n};\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1Set = new Set(l1);\n  const l2Set = new Set(l2);\n  const intersection = new Set(l1Set.intersection(l2Set));\n  return intersection.size === l1Set.size? l1 : l2;\n};\n\n/*\n  #. 1.8.2.2.1.1.2:\n  #.\n  #.     2.1.1.3.1:\n  #.\n  #.     2.1.1.3.2:\n  #.\n  #.     2.1.1.3.3:\n  #.\n  #.     2.1.1.3.4:\n  #.\n  #.     2.1.1.3.5:\n  #.\n  #.     2.1.1.3.6:\n  #.\n  #.     2.1.1.3.7:\n  #.\n  #.     2.1.1.3.8:\n  #.\n  #.     2.1.1.3.9:\n  #.\n  #.     2.1.1.3.10:\n  #.\n  #.     2.1.1.3.11:\n  #.\n  #.     2.1.1.3.12:\n  #.\n  #.     2.1.1.3.13:\n  #.\n  #.     2.1.1.3.14:\n  #.\n  #.     2.1.1.3.15:\n  #.\n  #.     2.1.1.3.16:\n  #.\n  #.     2.1.1.3.17:\n  #.\n  #.     2.1.1.3.18:\n  #.\n  #.     2.1.1.3.19:\n  #.\n  #.     2.1.1.3.20:\n  #.\n  #.     2.1.1.3.21:\n  #.\n  #.     2.1.1.3.22:\n  #.\n  #.     2.1.1.3.23:\n  #.\n  #.     2.1.1.3.24:\n  #.\n  #.     2.1.1.3.25:\n  #.\n  #.     2.1.1.3.26:\n  #.\n  #.     2.1.1.3.27:\n  #.\n  #.     2.1.1.3.28:\n  #.\n  #.     2.1.1.3.29:\n  #.\n  #.     2.1.1.3.30:\n  #.\n  #.     2.1.1.3.31:\n  #.\n  #.     2.1.1.3.32:\n  #.\n  #.     2.1.1.3.33:\n  #.\n  #.     2.1.1.3.34:\n  #.\n  #.     2.1.1.3.35:\n  #.\n  #.     2.1.1.3.36:\n  #.\n  #.     2.1.1.3.37:\n  #.\n  #.     2.1.1.3.38:\n  #.\n  #.     2.1.1.3.39:\n  #.\n  #.     2.1.1.3.40:\n  #.\n  #.     2.1.1.3.41:\n  #.\n  #.     2.1.1.3.42:\n  #.\n  #.     2.1.1.3.43:\n  #.\n  #.     2.1.1.3.44:\n  #.\n  #.     2.1.1.3.45:\n  #.\n  #.     2.1.1.3.46:\n  #.\n  #.     2.1.1.3.47:\n  #.\n  #.     2.1.1.3.48:\n  #.\n  #.     2.1.1.3.49:\n  #.\n  #.     2.1.1.3.50:\n  #.\n  #.     2.1.1.3.51:\n  #.\n  #.     2.1.1.3.52:\n  #.\n  #.     2.1.1.3.53:\n  #.\n  #.     2.1.1.3.54:\n  #.\n  #.     2.1.1.3.55:\n  #.\n  #.     2.1.1.3.56:\n  #.\n  #.     2.1.1.3.57:\n  #.\n  #.     2.1.1.3.58:\n  #.\n  #.     2.1.1.3.59:\n  #.\n  #.     2.1.1.3.60:\n  #.\n  #.     2.1.1.3.61:\n  #.\n  #.     2.1.1.3.62:\n  #.\n  #.     2.1.1.3.63:\n  #.\n  #.     2.1.1.3.64:\n  #.\n  #.     2.1.1.3.65:\n  #.\n  #.     2.1.1.3.66:\n  #.\n  #.     2.1.1.3.67:\n  #.\n  #.     2.1.1.3.68:\n  #.\n  #.     2.1.1.3.69:\n  #.\n  #.     2.1.1.3.70:\n  #.\n  #.     2.1.1.3.71:\n  "}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) return 1\n  const max = Math.floor(Math.sqrt(n))\n  for (let i = 2; i <= max; i++) {\n    if (n % i === 0) {\n      const prime = largestPrimeFactor(n / i)\n      if (prime > i) return prime\n    }\n  }\n  return n\n}\n\nexport default largestPrimeFactor\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    stack.push(brackets[i]);\n  }\n  for (let i = 0; i < brackets.length; i++) {\n    let top = stack[stack.length - 1];\n    if (brackets[i] == '(') {\n      stack.push(')');\n    } else if (brackets[i] == ')') {\n      if (top == '(') {\n        stack.pop();\n      } else {\n        return false;\n      }\n    } else if (brackets[i] == ')') {\n      if (top == '(') {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n  if (stack.length > 0) {\n    return false;\n  }\n  return true;\n};\n\n// --------------------------------------\n// Problem 5.2\n// Find the missing word in the dictionary.\n// --------------------------------------\nconst missingWord = (dictionary, word) => {\n  let missing = word;\n  let words = dictionary.split(/\\s+/);\n  let i = 0;\n  while (i < words.length) {\n    if (words[i]!= word) {\n      if (missing.length == 0) {\n        missing = words[i];\n      } else {\n        missing +='' + words[i];\n      }\n    }\n    i++;\n  }\n  return missing;\n};\n\n// --------------------------------------\n// Problem 5.3\n// Find the missing word in the dictionary.\n// --------------------------------------\nconst missingWordInDictionary = (dictionary, word) => {\n  let missing = dictionary;\n  let words = dictionary.split(/\\s+/);\n  let i = 0;\n  while (i < words.length) {\n    if (words[i]!= word) {\n      if (missing.length == 0) {\n        missing = words[i];\n      } else {\n        missing +='' + words[i];\n      }\n    }\n    i++;\n  }\n  return missing;\n};\n\n// --------------------------------------\n// Problem 5.4\n// Find the missing word in the dictionary.\n// --------------------------------------\nconst missingWordInDictionary2 = (dictionary, word) => {\n  let missing = dictionary;\n  let words = dictionary.split(/\\s+/);\n  let i = 0;\n  while (i < words.length) {\n    if (words[i]!= word) {\n      if (missing.length == 0) {\n        missing = words[i];\n      } else {\n        missing +='' + words[i];\n      }\n    }\n    i++;\n  }\n  return missing;\n};\n\n// --------------------------------------\n// Problem 5.5\n// Find the missing word in the dictionary.\n// --------------------------------------\nconst missingWordInDictionary3 = (dictionary, word) => {\n  let missing = dictionary;\n  let words = dictionary.split(/\\s+/);\n  let i = 0;\n  while (i < words.length) {\n    if (words[i]!= word) {\n      if (missing.length == 0) {\n        missing = words[i];\n      } else {\n        missing +='' + words[i];\n      }\n    }\n    i++;\n  }\n  return missing;\n};\n\n// --------------------------------------\n// Problem 5.6\n// Find the missing word in the dictionary.\n// --------------------------------------\nconst missingWordInDictionary4 = (dictionary, word) => {\n  let missing = dictionary;\n  let words = dictionary.split(/\\s+/);\n  let i = 0;\n  while (i < words.length) {\n    if (words[i]!= word) {\n      if (missing.length == 0) {\n        missing = words[i];\n      } else {\n        missing +='' + words[i];\n      }\n    }\n    i++;\n  }\n  return missing;\n};\n\n// --------------------------------------\n// Problem 5.7\n// Find the missing word in the dictionary.\n// --------------------------------------\nconst missingWordInDictionary5 = (dictionary, word) => {\n  let missing = dictionary;\n  let words = dictionary.split(/\\s+/);\n  let i = 0;\n  while (i < words.length) {\n    if (words[i]!= word) {\n      if (missing.length == 0) {\n        missing = words[i];\n      } else {\n        missing +='' + words[i];\n      }\n    }\n    i++;\n  }\n  return missing;\n};\n\n// --------------------------------------\n// Problem 5.8\n// Find the missing word in the dictionary.\n// --------------------------------------\nconst missingWordInDictionary6 = (dictionary, word) => {\n  let missing = dictionary;\n  let words = dictionary.split(/\\s+/);\n  let i = 0;\n  while (i < words.length) {\n    if (words[i]!= word) {\n      if (missing.length == 0) {\n        missing = words[i];\n      } else {\n        missing +='' + words[i];\n      }\n    }\n    i++;\n  }\n  return missing;\n};\n\n// --------------------------------------\n// Problem 5.9\n// Find the missing word in the dictionary.\n// --------------------------------------\nconst missingWordInDictionary7 = (dictionary, word) => {\n  let missing = dictionary;\n  let words = dictionary.split(/\\s+/);\n  let i = 0;\n  while (i < words.length) {\n    if (words[i]!= word) {\n      if (missing.length == 0) {\n        missing = words[i];\n      } else {\n        missing +='' + words[i];\n      }\n    }\n    i++;\n  }\n  return missing;\n};\n\n// --------------------------------------\n// Problem 5.10\n// Find the missing word in the dictionary.\n// --------------------------------------\nconst missingWordInDictionary8 ="}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polyn omial .\n  xs[0] +xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polyn omial.\n  xs[0] +xs[1] * x + xs[2] * x^2 +....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  let d = [0]\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i - 1; j > 0; j--) {\n      d[i] = d[i] - xs[j] * d[j]\n    }\n  }\n  return d\n}\n\n// \nconst getSumOfMultiples = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfSquares = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfDivisors = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfFactorials = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfFibonacci = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfDigits = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfPrimes = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfBinary = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfSquaresOfOdd = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfSquaresOfEven = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfSquaresOfEvenOdd = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfFibonacciEvenOdd = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfFibonacciOdd = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfBinaryOdd = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfBinaryEven = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfBinaryEvenOdd = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfBinaryOddEven = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfDigitsOdd = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfDigitsEven = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfDigitsOddEven = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfPrimesOdd = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfPrimesEven = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfPrimesOddEven = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfFibonacciOddEven = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfFibonacciOddOdd = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfFibonacciEvenOdd = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfFibonacciEvenEven = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfFibonacciOddEven = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfBinaryOddOdd = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfBinaryOddEven = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfBinaryEvenOdd = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfBinaryEvenEven = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfBinaryOddEven = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfFibonacciOddOdd = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfPrimesOddOdd = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfPrimesOddEven = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfPrimesEvenOdd = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfPrimesEvenEven = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfPrimesOddEven = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfPrimesOddOdd = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfPrimesEvenOdd = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfPrimesOddEven = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfFibonacciOddOdd = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfFibonacciOddEven = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfFibonacciEvenOdd = (n) => {\n  return derivative(n)\n}\n\n// \nconst getSumOfFibonacciEvenEven = (n) => {\n  return derivative(n"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n    const fib = (n) => {\n        if (n === 0) return 0;\n        if (n === 1) return 1;\n        return fib(n-1) + fib(n-2) + fib(n-3);\n    };\n    return fib(n);\n};\n\n/* The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fib = (n) => {\n    const fib_f = (n) => {\n        if (n === 0) return 0;\n        if (n === 1) return 1;\n        return fib_f(n-1) + fib_f(n-2) + fib_f(n-3);\n    };\n    return fib_f(n);\n};\n\n/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fib_f = (n) => {\n    const fib_f_2 = (n) => {\n        if (n === 0) return 0;\n        if (n === 1) return 1;\n        return fib_f_2(n-1) + fib_f_2(n-2) + fib_f_2(n-3);\n    };\n    return fib_f_2(n);\n};\n\n/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fib_b = (n) => {\n    const fib_b_2 = (n) => {\n        if (n === 0) return 0;\n        if (n === 1) return 1;\n        return fib_b_2(n-1) + fib_b_2(n-2) + fib_b_2(n-3);\n    };\n    return fib_b_2(n);\n};\n\nconst fibfib = (n) => {\n    const fib = (n) => {\n        if (n === 0) return 0;\n        if (n === 1) return 1;\n        return fib(n-1) + fib(n-2) + fib(n-3);\n    };\n    return fib(n);\n};\n\nconst fib = (n) => {\n    const fib_f = (n) => {\n        if (n === 0) return 0;\n        if (n === 1) return 1;\n        return fib_f(n-1) + fib_f(n-2) + fib_f(n-3);\n    };\n    return fib_f(n);\n};\n\nconst fib_b = (n) => {\n    const fib_b_2 = (n) => {\n        if (n === 0) return 0;\n        if (n === 1) return 1;\n        return fib_b_2(n-1) + fib_b_2(n-2) + fib_b_2(n-3);\n    };\n    return fib_b_2(n);\n};\n\nconst fibfib = (n) => {\n    const fib_f = (n) => {\n        if (n === 0) return 0;\n        if (n === 1) return 1;\n        return fib_f(n-1) + fib_f(n-2) + fib_f(n-3);\n    };\n    return fib_f(n);\n};\n\nconst fib_b = (n) => {\n    const fib_b_2 = (n) => {\n        if (n === 0) return 0;\n        if (n === 1) return 1;\n        return fib_b_2(n-1) + fib_b_2(n-2) + fib_b_2(n-3);\n    };\n    return fib_b_2(n);\n};\n\nconst fib_f = (n) => {\n    const fib_f_2 = (n) => {\n        if (n === 0"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g .\n  Vow els in th is case are 'a', 'e', 'i', ' o',  'u'. Here, 'y ' is also a\n vowel, but only when it i s at the end of the giv e n word .\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g.\n  Vow els in th is case are 'a', 'e', 'i','o',  'u'. Here, 'y'is also a\n vowel, but only when it i s at the end of the giv e n word.\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const letters = s.split('')\n  const length = letters.length\n  let count = 0\n  for (let i = 0; i < length; i++) {\n    if (vowels.includes(letters[i])) {\n      count++\n    }\n  }\n  if (s[length - 1] === 'y') {\n    count++\n  }\n  return count\n}\n\nmodule.exports = vowelsCount\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the inte ger x , shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the inte ger x, shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = x\n  let i = 1\n  while (i <= shift) {\n    result = x - result % 10\n    i++\n  }\n  return result.toString()\n}\n\nconst circularShift1 = (x, shift) => {\n  let result = x\n  let i = 1\n  while (i <= shift) {\n    result = x + result % 10\n    i++\n  }\n  return result.toString()\n}\n\nconst circularShift2 = (x, shift) => {\n  let result = x\n  let i = 1\n  while (i <= shift) {\n    result = x - result % 10\n    i++\n  }\n  return result.toString()\n}\n\nconst circularShift3 = (x, shift) => {\n  let result = x\n  let i = 1\n  while (i <= shift) {\n    result = x + result % 10\n    i++\n  }\n  return result.toString()\n}\n\nconst circularShift4 = (x, shift) => {\n  let result = x\n  let i = 1\n  while (i <= shift) {\n    result = x - result % 10\n    i++\n  }\n  return result.toString()\n}\n\nconst circularShift5 = (x, shift) => {\n  let result = x\n  let i = 1\n  while (i <= shift) {\n    result = x + result % 10\n    i++\n  }\n  return result.toString()\n}\n\nconst circularShift6 = (x, shift) => {\n  let result = x\n  let i = 1\n  while (i <= shift) {\n    result = x - result % 10\n    i++\n  }\n  return result.toString()\n}\n\nconst circularShift7 = (x, shift) => {\n  let result = x\n  let i = 1\n  while (i <= shift) {\n    result = x + result % 10\n    i++\n  }\n  return result.toString()\n}\n\nconst circularShift8 = (x, shift) => {\n  let result = x\n  let i = 1\n  while (i <= shift) {\n    result = x - result % 10\n    i++\n  }\n  return result.toString()\n}\n\nconst circularShift9 = (x, shift) => {\n  let result = x\n  let i = 1\n  while (i <= shift) {\n    result = x + result % 10\n    i++\n  }\n  return result.toString()\n}\n\nconst circularShift10 = (x, shift) => {\n  let result = x\n  let i = 1\n  while (i <= shift) {\n    result = x - result % 10\n    i++\n  }\n  return result.toString()\n}\n\nconst circularShift11 = (x, shift) => {\n  let result = x\n  let i = 1\n  while (i <= shift) {\n    result = x - result % 10\n    i++\n  }\n  return result.toString()\n}\n\nconst circularShift12 = (x, shift) => {\n  let result = x\n  let i = 1\n  while (i <= shift) {\n    result = x + result % 10\n    i++\n  }\n  return result.toString()\n}\n\nconst circularShift13 = (x, shift) => {\n  let result = x\n  let i = 1\n  while (i <= shift) {\n    result = x + result % 10\n    i++\n  }\n  return result.toString()\n}\n\nconst circularShift14 = (x, shift) => {\n  let result = x\n  let i = 1\n  while (i <= shift) {\n    result = x - result % 10\n    i++\n  }\n  return result.toString()\n}\n\nconst circularShift15 = (x, shift) => {\n  let result = x\n  let i = 1\n  while (i <= shift) {\n    result = x - result % 10\n    i++\n  }\n  return result.toString()\n}\n\nconst circularShift16 = (x, shift) => {\n  let result = x\n  let i = 1\n  while (i <= shift) {\n    result = x + result % 10\n    i++\n  }\n  return result.toString()\n}\n\nconst circularShift17 = (x, shift) => {\n  let result = x\n  let i = 1\n  while (i <= shift) {\n    result = x + result % 10\n    i++\n  }\n  return result.toString()\n}\n\nconst circularShift18 = (x, shift) => {\n  let result = x\n  let i = 1\n  while (i <= shift) {\n    result = x + result % 10\n    i++\n  }\n  return result.toString()\n}\n\nconst circularShift19 = (x, shift) => {\n  let result = x\n  let i = 1\n  while (i <= shift) {\n    result = x - result % 10\n    i++\n  }\n  return result.toString()\n}\n\nconst circularShift20 = (x, shift) => {\n  let result = x\n  let i = 1\n  while (i <= shift) {\n    result = x - result % 10\n    i++\n  }\n  return result.toString()\n}\n\nconst circularShift21 = (x, shift) => {\n  let result = x\n  let i = 1\n  while (i <= shift) {\n    result = x + result % 10\n    i++\n  }\n  return result.toString()\n}\n\nconst circularShift22 = (x, shift) => {\n  let result = x\n  let i = 1\n  while (i <= shift) {\n    result = x - result % 10\n    i++\n  }\n  return result.toString()\n}\n\nconst circularShift23 = (x, shift) => {\n  let result = x\n  let i = 1\n  while (i <= shift) {\n    result = x - result % 10\n    i++\n  }\n  return result"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const asciiToDigit = {\n    'A':10,\n    'B':11,\n    'C':12,\n    'D':13,\n    'E':14,\n    'F':15,\n    'G':16,\n    'H':17,\n    'I':18,\n    'J':19,\n    'K':20,\n    'L':21,\n    'M':22,\n    'N':23,\n    'O':24,\n    'P':25,\n    'Q':26,\n    'R':27,\n    'S':28,\n    'T':29,\n    'U':30,\n    'V':31,\n    'W':32,\n    'X':33,\n    'Y':34,\n    'Z':35\n  }\n\n  let sum = 0\n  for(let i = 0; i < s.length; i++) {\n    sum += asciiToDigit[s.charAt(i)]\n  }\n  return sum\n}\n\nconsole.log(digitSum(\"aAaaaXa\"))\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges , a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges, a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n    let  s  = s.trim();\n    let  num = s.split(' ');\n    let nums = num[1].split('-');\n    let  num  =  parseInt(num[0]);\n    let  nums = nums[1].split(' ');\n    let  num2 = nums[0].split(' ');\n    let  num3 = num2[0];\n    let  num4 = num2[1];\n    let  num5 = num3.split(' ');\n    let  num6 = num5[0];\n    let  num7 = num5[1];\n    let  num8 = num6.split(' ');\n    let  num9 = num8[0];\n    let  num10 = num8[1];\n    let  num11 = num9.split(' ');\n    let  num12 = num11[0];\n    let  num13 = num11[1];\n    let  num14 = num12.split(' ');\n    let  num15 = num14[0];\n    let  num16 = num14[1];\n    let  num17 = num15.split(' ');\n    let  num18 = num17[0];\n    let  num19 = num17[1];\n    let  fruitNum = num18.split(' ');\n    let  num20 = fruitNum[0];\n    let  num21 = fruitNum[1];\n    let  num22 = num20.split(' ');\n    let  num23 = num22[0];\n    let  num24 = num22[1];\n    let  fruitNum2 = num23.split(' ');\n    let  num25 = fruitNum2[0];\n    let  num26 = fruitNum2[1];\n    let  num27 = num25.split(' ');\n    let  num28 = num27[0];\n    let  num29 = num27[1];\n    let  num30 = num28.split(' ');\n    let  num31 = num30[0];\n    let  num32 = num30[1];\n    let  num33 = num31.split(' ');\n    let  num34 = num33[0];\n    let  num35 = num33[1];\n    let  num36 = num34.split(' ');\n    let  num37 = num36[0];\n    let  num38 = num36[1];\n    let  num39 = num37.split(' ');\n    let  num40 = num39[0];\n    let  num41 = num39[1];\n    let  num42 = num40.split(' ');\n    let  num43 = num42[0];\n    let  num44 = num42[1];\n    let  num45 = num43.split(' ');\n    let  num46 = num45[0];\n    let  num47 = num45[1];\n    let  num48 = num46.split(' ');\n    let  num49 = num48[0];\n    let  num50 = num48[1];\n    let  fruitNum3 = num49.split(' ');\n    let  num51 = fruitNum3[0];\n    let  num52 = fruitNum3[1];\n    let  num53 = num51.split(' ');\n    let  num54 = num53[0];\n    let  num55 = num53[1];\n    let  num56 = num54.split(' ');\n    let  num57 = num56[0];\n    let  num58 = num56[1];\n    let  num59 = num55.split(' ');\n    let  num60 = num59[0];\n    let  num61 = num59[1];\n    let  num62 = num60.split(' ');\n    let  num63 = num62[0];\n    let  num64 = num62[1];\n    let  num65 = num63.split(' ');\n    let  num66 = num65[0];\n    let  num67 = num65[1];\n    let  num68 = num64.split(' ');\n    let  num69 = num68[0];\n    let  num70 = num68[1];\n    let  num71 = num69.split(' ');\n    let  num72 = num71[0];\n    let  num73 = num71[1];\n    let  num74 = num72.split(' ');\n    let  num75 = num74[0];\n    let  num76 = num74[1];\n    let  num77 = num75.split(' ');\n    let  num78 = num77[0];\n    let  num79 = num77[1];\n    let  num80 = num76.split(' ');\n    let  num81 = num80[0];\n    let  num82 = num80[1];\n    let  num83 = num81.split(' ');\n    let  num84 = num83[0];\n    let  num85 = num83[1];\n    let  num86 = num84.split(' ');\n    let  num87 = num86[0];\n    let  num88 = num86[1];\n    let  num89 = num85.split(' ');\n    let  num90 = num89[0];\n    let  num91 = num89[1];\n    let  num92 = num90.split(' ');\n    let  num93 = num92[0];\n    let  num94 = num92[1];\n    let  num"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index .\n\n  The plucked node s hould be returned in a list , [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index.\n\n  The plucked node s hould be returned in a list, [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let result = [];\n  if (arr.length === 0) {\n    return result;\n  }\n  let node = arr[0];\n  let current = node;\n  let index = 1;\n  while (node) {\n    if (node.value % 2 === 0) {\n      node = arr[index];\n      result.push([node.value, index]);\n    }\n    if (node.value < current.value) {\n      current = node;\n      index++;\n    }\n    node = arr[index];\n  }\n  return result;\n};\n\nconst isPossible = (arr) => {\n  let res = false;\n  let size = arr.length;\n  for (let i = 0; i < size; i++) {\n    if (arr[i].length === 2) {\n      let [a, b] = arr[i];\n      if (a + b === size) {\n        res = true;\n        break;\n      }\n    }\n  }\n  return res;\n};\n\nconst test = () => {\n  let res = {};\n  res.tests = 0;\n  res.total = 0;\n  res.truePositives = 0;\n  res.falsePositives = 0;\n  res.trueNegatives = 0;\n  res.falseNegatives = 0;\n  for (let i = 0; i < 10; i++) {\n    let arr = Array(i + 1);\n    for (let j = 0; j < arr.length; j++) {\n      arr[j] = i + 1;\n    }\n    let result = pluck(arr);\n    let size = result.length;\n    if (size === 1 && result[0][0] === 0) {\n      res.tests++;\n      res.total++;\n      res.falseNegatives++;\n    }\n    else if (size === 2 && result[1][0] === result[0][0] && result[1][1] === result[0][1]) {\n      res.tests++;\n      res.total++;\n      res.truePositives++;\n    }\n    else if (size === 2 && result[0][1] === result[1][0] && result[0][0] === result[1][1]) {\n      res.tests++;\n      res.total++;\n      res.falsePositives++;\n    }\n    else if (size === 1 && result[0][0] === 0) {\n      res.tests++;\n      res.total++;\n      res.trueNegatives++;\n    }\n    else {\n      res.tests++;\n      res.total++;\n      res.falseNegatives++;\n    }\n  }\n  console.log(JSON.stringify(res));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n    let max = lst[0],\n        index = 0;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] >= max) {\n            max = lst[i];\n            index = i;\n        }\n    }\n    return max;\n};\n\nconst search2 = (lst) => {\n    let max = lst[0],\n        index = 0;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            index = i;\n        }\n    }\n    return max;\n};\n\nconst search3 = (lst) => {\n    let max = lst[0],\n        index = 0;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < max) {\n            max = lst[i];\n            index = i;\n        }\n    }\n    return max;\n};\n\nconst search4 = (lst) => {\n    let max = lst[0],\n        index = 0;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < max) {\n            max = lst[i];\n            index = i;\n        }\n    }\n    return max;\n};\n\nconst search5 = (lst) => {\n    let max = lst[0],\n        index = 0;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            index = i;\n        }\n    }\n    return max;\n};\n\nconst search6 = (lst) => {\n    let max = lst[0],\n        index = 0;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] <= max) {\n            max = lst[i];\n            index = i;\n        }\n    }\n    return max;\n};\n\nconst search7 = (lst) => {\n    let max = lst[0],\n        index = 0;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] <= max) {\n            max = lst[i];\n            index = i;\n        }\n    }\n    return max;\n};\n\nconst search8 = (lst) => {\n    let max = lst[0],\n        index = 0;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] <= max) {\n            max = lst[i];\n            index = i;\n        }\n    }\n    return max;\n};\n\nconst search9 = (lst) => {\n    let max = lst[0],\n        index = 0;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] >= max) {\n            max = lst[i];\n            index = i;\n        }\n    }\n    return max;\n};\n\nconst search10 = (lst) => {\n    let max = lst[0],\n        index = 0;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] >= max) {\n            max = lst[i];\n            index = i;\n        }\n    }\n    return max;\n};\n\nconst search11 = (lst) => {\n    let max = lst[0],\n        index = 0;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < max) {\n            max = lst[i];\n            index = i;\n        }\n    }\n    return max;\n};\n\nconst search12 = (lst) => {\n    let max = lst[0],\n        index = 0;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < max) {\n            max = lst[i];\n            index = i;\n        }\n    }\n    return max;\n};\n\nconst search13 = (lst) => {\n    let max = lst[0],\n        index = 0;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] <= max) {\n            max = lst[i];\n            index = i;\n        }\n    }\n    return max;\n};\n\nconst search14 = (lst) => {\n    let max = lst[0],\n        index = 0;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] <= max) {\n            max = lst[i];\n            index = i;\n        }\n    }\n    return max;\n};\n\nconst search15 = (lst) => {\n    let max = lst[0],\n        index = 0;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            index = i;\n        }\n    }\n    return max;\n};\n\nconst search16 = (lst) => {\n    let max = lst[0],\n        index = 0;\n    for (let i = 1; i < lst.length; i++) {\n"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value ,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let min = lst[0]\n  let max = lst[len - 1]\n  let i = 0\n  while (i < len) {\n    while (lst[i] < min) {\n      min = lst[i]\n      i++\n    }\n    sorted.push(lst[i])\n    while (lst[i] > max) {\n      max = lst[i]\n      i++\n    }\n  }\n  return sorted\n}\n\nconsole.log(strangeSortList([5, 5, 5, 5]))\n\n/*\n  Given a list of integers, return the list in ascending order.\n\n  Examples:\n  ascendingSortList([1, 2, 3]) == [1, 2, 3]\n  ascendingSortList([5, 5, 5]) == [5, 5, 5]\n  ascendingSortList([]) == []\n  */\nconst ascendingSortList = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    sorted.push(lst[i])\n  }\n  return sorted\n}\n\nconsole.log(ascendingSortList([1, 2, 3]))\n\n/*\n  Given a list of integers, return the list in descending order.\n\n  Examples:\n  descendingSortList([1, 2, 3]) == [3, 2, 1]\n  descendingSortList([5, 5, 5]) == [5, 5, 5]\n  descendingSortList([]) == []\n  */\nconst descendingSortList = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = len - 1; i >= 0; i--) {\n    sorted.push(lst[i])\n  }\n  return sorted\n}\n\nconsole.log(descendingSortList([1, 2, 3]))\n\n/*\n  Given a list of integers, return the list with duplicate removed.\n\n  Examples:\n  removeDuplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 2, 4, 5]) == [1, 2, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5, 5]) == [1, 2, 3, 4, 5]\n  removeDuplicates([]) == []\n  */\nconst removeDuplicates = (lst) => {\n  const len = lst.length\n  let duplicateIndex = 0\n  let sorted = []\n  for (let i = 0; i < len; i++) {\n    if (sorted.indexOf(lst[i]) === -1) {\n      sorted.push(lst[i])\n    } else {\n      duplicateIndex++\n    }\n  }\n  if (duplicateIndex > 0) {\n    return sorted.slice(0, len - duplicateIndex)\n  } else {\n    return sorted\n  }\n}\n\nconsole.log(removeDuplicates([1, 2, 2, 4, 5]))\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const ab = a + b;\n  const bc = b + c;\n  const ac = a + c;\n\n  if ((ab === c) || (ac === b)) {\n    return Math.abs(0.5 * (ab + ac));\n  }\n\n  if ((ab === b) || (bc === c)) {\n    return Math.abs(0.5 * (ab + bc));\n  }\n\n  const a2 = a * a;\n  const b2 = b * b;\n  const c2 = c * c;\n\n  return Math.abs(0.5 * (a2 + b2 - c2));\n};\n\nmodule.exports = triangleArea;\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let qw = q.reduce((sum, n) => sum + n, 0);\n  if(qw > w) return false;\n  return!isBalanced(q);\n}\n\nconst isBalanced = q => q.reduce((sum, n) => sum + n, 0) === q.length;\n\nconsole.log(willItFly([1, 2, 3, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3], 5));\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element .\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 1;\n  let start = 0;\n  let end = arr.length - 1;\n  while (end >= start) {\n    let count = 0;\n    while (arr[end] >= arr[start]) {\n      count++;\n      end--;\n    }\n    change += count;\n    start++;\n  }\n  return change;\n};\n\nconsole.log(smallestChange([1,2,3,5,4,7,9,6]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  const res = [];\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        res.push(lst1[i]);\n      }\n    }\n  }\n  return res;\n};\n\n/*\n  Given a list of numbers, return the sum of the numbers.\n\n  Examples\n  total(['2', '2']) ➞ 4\n  total([2, 3, 4, 4]) ➞ 14\n  total([1, 2, 3, 4]) ➞ 10\n  total([2, 2, 3, 4]) ➞ 14\n  total([2, 2, 3, 4, 5]) ➞ 20\n  */\nconst total = (lst) => {\n  const len = lst.length;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a list of numbers, return the largest of the numbers.\n\n  Examples\n  max(['2', '2']) ➞ 2\n  max([2, 2, 3, 4]) ➞ 4\n  max([1, 2, 3, 4]) ➞ 4\n  max([2, 2, 3, 4, 5]) ➞ 5\n  */\nconst max = (lst) => {\n  const len = lst.length;\n  let max = 0;\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given a list of numbers, return the smallest of the numbers.\n\n  Examples\n  min(['2', '2']) ➞ 2\n  min([2, 2, 3, 4]) ➞ 2\n  min([1, 2, 3, 4]) ➞ 1\n  min([2, 2, 3, 4, 5]) ➞ 1\n  */\nconst min = (lst) => {\n  const len = lst.length;\n  let min = Infinity;\n  for (let i = 0; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Given a list of strings, return the count of the strings in the list.\n\n  Examples\n  count(['hi', 'hi', 'hi', 'hi']) ➞ 5\n  count(['hi', 'hi', 'hi', 'admin']) ➞ 3\n  count(['hi', 'hi', 'hi', 'hi']) ➞ 5\n  count(['hi', 'hi', 'hi', 'hi', 'hi']) ➞ 6\n  count(['hi', 'hi', 'hi', 'hi', 'hi', 'hi']) ➞ 7\n  count(['hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi']) ➞ 8\n  */\nconst count = (lst) => {\n  const len = lst.length;\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    count++;\n  }\n  return count;\n};\n\n/*\n  Given two lists of numbers, return the list of numbers that contains every number in the\n  first list and also every number in the second list.\n\n  Examples\n  every([2, 3, 4, 5], [3, 4, 5, 6]) ➞ [2, 3, 4, 5, 6]\n  every([2, 3, 4, 5], [3, 4, 5]) ➞ [2, 3, 4, 5]\n  every([2, 3, 4, 5], [3, 4, 5, 6]) ➞ [2, 3, 4, 5, 6]\n  every([2, 3, 4, 5], [3, 4, 5, 6, 7]) ➞ [2, 3, 4, 5, 6, 7]\n  */\nconst every = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  const res = [];\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      res.push(lst1[i]);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a list of numbers, return the list of numbers in the reverse order.\n\n  Examples\n  reverse([2, 3, 4, 5]) ➞ [5, 4, 3, 2]\n  reverse([2, 3, 4, 5]) ➞ [5, 4, 3, 2]\n  reverse([2, 3, 4, 5, 6]) ➞ [6, 5, 4, 3, 2]\n  */\nconst reverse = (lst) => {\n  const len = lst.length;\n  let res = [];\n  for (let i = len - 1; i >= 0; i--) {\n    res.push(lst[i]);\n  }\n  return res;\n};\n\nexport {\n  total,\n"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a === 1) return false\n  if (a === 2) return true\n  for (let i = 2; i * i <= a; i++) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\nconst primeFactors = (num) => {\n  const primeFactor = (num) => {\n    if (num < 2) return num\n    if (num % 2 === 0) return 2\n    const primes = []\n    for (let i = 3; i <= num / 2; i += 2) {\n      if (num % i === 0) {\n        primes.push(i)\n        while (num % i === 0) {\n          num /= i\n        }\n      }\n    }\n    if (num!== 1) {\n      primes.push(num)\n    }\n    return primes\n  }\n  const factors = primeFactor(num)\n  return factors.reduce((acc, factor) => acc.concat(primeFactor(factor)), [])\n}\n\nconst isPrime = (num) => primeFactors(num).length === num\n\nconsole.log(isPrime(10))\nconsole.log(isPrime(11))\nconsole.log(isPrime(12))\nconsole.log(isPrime(13))\nconsole.log(isPrime(14))\nconsole.log(isPrime(15))\nconsole.log(isPrime(16))\nconsole.log(isPrime(17))\nconsole.log(isPrime(18))\nconsole.log(isPrime(19))\nconsole.log(isPrime(20))\nconsole.log(isPrime(21))\nconsole.log(isPrime(22))\nconsole.log(isPrime(23))\nconsole.log(isPrime(24))\nconsole.log(isPrime(25))\nconsole.log(isPrime(26))\nconsole.log(isPrime(27))\nconsole.log(isPrime(28))\nconsole.log(isPrime(29))\nconsole.log(isPrime(30))\nconsole.log(isPrime(31))\nconsole.log(isPrime(32))\nconsole.log(isPrime(33))\nconsole.log(isPrime(34))\nconsole.log(isPrime(35))\nconsole.log(isPrime(36))\nconsole.log(isPrime(37))\nconsole.log(isPrime(38))\nconsole.log(isPrime(39))\nconsole.log(isPrime(40))\nconsole.log(isPrime(41))\nconsole.log(isPrime(42))\nconsole.log(isPrime(43))\nconsole.log(isPrime(44))\nconsole.log(isPrime(45))\nconsole.log(isPrime(46))\nconsole.log(isPrime(47))\nconsole.log(isPrime(48))\nconsole.log(isPrime(49))\nconsole.log(isPrime(50))\nconsole.log(isPrime(51))\nconsole.log(isPrime(52))\nconsole.log(isPrime(53))\nconsole.log(isPrime(54))\nconsole.log(isPrime(55))\nconsole.log(isPrime(56))\nconsole.log(isPrime(57))\nconsole.log(isPrime(58))\nconsole.log(isPrime(59))\nconsole.log(isPrime(60))\nconsole.log(isPrime(61))\nconsole.log(isPrime(62))\nconsole.log(isPrime(63))\nconsole.log(isPrime(64))\nconsole.log(isPrime(65))\nconsole.log(isPrime(66))\nconsole.log(isPrime(67))\nconsole.log(isPrime(68))\nconsole.log(isPrime(69))\nconsole.log(isPrime(70))\nconsole.log(isPrime(71))\nconsole.log(isPrime(72))\nconsole.log(isPrime(73))\nconsole.log(isPrime(74))\nconsole.log(isPrime(75))\nconsole.log(isPrime(76))\nconsole.log(isPrime(77))\nconsole.log(isPrime(78))\nconsole.log(isPrime(79))\nconsole.log(isPrime(80))\nconsole.log(isPrime(81))\nconsole.log(isPrime(82))\nconsole.log(isPrime(83))\nconsole.log(isPrime(84))\nconsole.log(isPrime(85))\nconsole.log(isPrime(86))\nconsole.log(isPrime(87))\nconsole.log(isPrime(88))\nconsole.log(isPrime(89))\nconsole.log(isPrime(90))\nconsole.log(isPrime(91))\nconsole.log(isPrime(92))\nconsole.log(isPrime(93))\nconsole.log(isPrime(94))\nconsole.log(isPrime(95))\nconsole.log(isPrime(96))\nconsole.log(isPrime(97))\nconsole.log(isPrime(98))\nconsole.log(isPrime(99))\nconsole.log(isPrime(100))\nconsole.log(isPrime(101))\nconsole.log(isPrime(102))\nconsole.log(isPrime(103))\nconsole.log(isPrime(104))\nconsole.log(isPrime(105))\nconsole.log(isPrime(106))\nconsole.log(isPrime(107))\nconsole.log(isPrime(108))\nconsole.log(isPrime(109))\nconsole.log(isPrime(110))\nconsole.log(isPrime(111))\nconsole.log(isPrime(112))\nconsole.log(isPrime(113))\nconsole.log(isPrime(114))\nconsole.log(isPrime(115))\nconsole.log(isPrime(116))\nconsole.log(isPrime(117))\nconsole.log(isPrime(118))\nconsole.log(isPrime(119))\nconsole.log(isPrime(120))\nconsole.log(isPrime(121))\nconsole.log(isPrime(122))\nconsole.log(isPrime(123))\nconsole.log(isPrime(124))\nconsole.log(isPrime(125))\nconsole.log(isPrime(126))\nconsole.log(isPrime(127))\nconsole.log(isPrime("}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases .\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases.\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  const isOdd = x % 2 === 1;\n  return n === 2? isOdd : (n === 3 && isOdd) || (n % 2 === 0 &&!isOdd);\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if(a.toString().split('.').length > 2) return false;\n  const int = parseInt(a);\n  return int.toString().length === 3 && int >= 0 && int <= 127;\n};\n\nmodule.exports = iscube;\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F .\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F.\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let a = num.split('');\n  let key = 0;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] >= 'A' && a[i] <= 'F') {\n      key += 16;\n    } else if (a[i] >= '0' && a[i] <= '9') {\n      key += 10;\n    } else if (a[i] >= 'a' && a[i] <= 'f') {\n      key += 16;\n    } else if (a[i] >= 'A' && a[i] <= 'F') {\n      key += 16;\n    }\n  }\n  return key;\n};\n\nconsole.log(hexKey('AB'));\nconsole.log(hexKey('ABED1A33'));\nconsole.log(hexKey('123456789ABCDEF0'));\nconsole.log(hexKey('2020'));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n    const binary = []\n    let number = decimal\n    while(number > 0) {\n        const digit = number % 2\n        number = number / 2\n        binary.push(digit)\n    }\n    while(number > 1) {\n        const digit = number % 2\n        number = number / 2\n        binary.unshift(digit)\n    }\n    return binary.join('db')\n}\n\n/*\n   You will be given a number in binary format  and your task is to convert it to decimal format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y number.\n  The extra chararcter is 'db' at the beginning and at the end of the string.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n    const decimal = 0\n    while(binary.length > 1) {\n        decimal += binary.pop()\n    }\n    decimal += binary.pop() * 2\n    return decimal\n}\n\nconst convert = (number, binaryToDecimal, decimalToBinary) => {\n    const output = binaryToDecimal(decimalToBinary(number))\n    return output\n}\n\nconst convert2 = (number, binaryToDecimal, decimalToBinary) => {\n    const output = decimalToBinary(binaryToDecimal(number))\n    return output\n}\n\nconst convert3 = (number, binaryToDecimal, decimalToBinary) => {\n    const output = decimalToBinary(binaryToDecimal(number))\n    return output\n}\n\nconst convert4 = (number, binaryToDecimal, decimalToBinary) => {\n    const output = binaryToDecimal(decimalToBinary(number))\n    return output\n}\n\nconst convert5 = (number, binaryToDecimal, decimalToBinary) => {\n    const output = binaryToDecimal(decimalToBinary(number))\n    return output\n}\n\nconst convert6 = (number, binaryToDecimal, decimalToBinary) => {\n    const output = decimalToBinary(binaryToDecimal(number))\n    return output\n}\n\nconst convert7 = (number, binaryToDecimal, decimalToBinary) => {\n    const output = decimalToBinary(binaryToDecimal(number))\n    return output\n}\n\nconst convert8 = (number, binaryToDecimal, decimalToBinary) => {\n    const output = binaryToDecimal(decimalToBinary(number))\n    return output\n}\n\nconst convert9 = (number, binaryToDecimal, decimalToBinary) => {\n    const output = decimalToBinary(binaryToDecimal(number))\n    return output\n}\n\nconst convert10 = (number, binaryToDecimal, decimalToBinary) => {\n    const output = binaryToDecimal(decimalToBinary(number))\n    return output\n}\n\nconst convert11 = (number, binaryToDecimal, decimalToBinary) => {\n    const output = decimalToBinary(binaryToDecimal(number))\n    return output\n}\n\nconst convert12 = (number, binaryToDecimal, decimalToBinary) => {\n    const output = binaryToDecimal(decimalToBinary(number))\n    return output\n}\n\nconst convert13 = (number, binaryToDecimal, decimalToBinary) => {\n    const output = decimalToBinary(binaryToDecimal(number))\n    return output\n}\n\nconst convert14 = (number, binaryToDecimal, decimalToBinary) => {\n    const output = binaryToDecimal(decimalToBinary(number))\n    return output\n}\n\nconst convert15 = (number, binaryToDecimal, decimalToBinary) => {\n    const output = decimalToBinary(binaryToDecimal(number))\n    return output\n}\n\nconst convert16 = (number, binaryToDecimal, decimalToBinary) => {\n    const output = binaryToDecimal(decimalToBinary(number))\n    return output\n}\n\nconst convert17 = (number, binaryToDecimal, decimalToBinary) => {\n    const output = decimalToBinary(binaryToDecimal(number))\n    return output\n}\n\nconst convert18 = (number, binaryToDecimal, decimalToBinary) => {\n    const output = binaryToDecimal(decimalToBinary(number))\n    return output\n}\n\nconst convert19 = (number, binaryToDecimal, decimalToBinary) => {\n    const output = decimalToBinary(binaryToDecimal(number))\n    return output\n}\n\nconst convert20 = (number, binaryToDecimal, decimalToBinary) => {\n    const output = binaryToDecimal(decimalToBinary(number))\n    return output\n}\n\nconst convert21 = (number, binaryToDecimal, decimalToBinary) => {\n    const output = decimalToBinary(binaryToDecimal(number))\n    return output\n}\n\nconst convert22 = (number, binaryToDecimal, decimalToBinary) => {\n    const output = binaryToDecimal(decimalToBinary(number))\n    return output\n}\n\nconst convert23 = (number, binaryToDecimal, decimalToBinary) => {\n    const output = decimalToBinary(binaryToDecimal(number))\n    return output\n}\n\nconst convert24 = (number, binaryToDecimal, decimalToBinary) => {\n    const output = binaryToDecimal(decimalToBinary(number))\n    return output\n}\n\nconst convert25 = (number, binaryToDecimal, decimalToBinary) => {\n    const output = decimalToBinary(binaryToDec"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let curr = 1;\n  let ans = 1;\n  for (let i = 0; i < s.length; i++) {\n    if (curr == 1) {\n      curr = 0;\n    }\n    else {\n      curr = curr * 2;\n    }\n    ans = ans * curr;\n  }\n  return ans == 1;\n};\n\nconsole.log(isHappy(\"abcdd\"));\nconsole.log(isHappy(\"aabb\"));\nconsole.log(isHappy(\"abcd\"));\nconsole.log(isHappy(\"xyy\"));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0 .7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0.7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const aPlus = ['A+', 'B', 'C-', 'C', 'A-']\n  const gradesList = aPlus.concat(grades.map(parseFloat))\n  const max = Math.max(...gradesList)\n  const index = gradesList.indexOf(max)\n  return gradesList.slice(0, index + 1)\n}\n\nconst letterGrade = (grades) => {\n  const aPlus = ['A+', 'B', 'C-', 'C', 'A-']\n  const gradesList = aPlus.concat(grades.map(parseFloat))\n  const max = Math.max(...gradesList)\n  const index = gradesList.indexOf(max)\n  return aPlus[index]\n}\n\nexport { numericalLetterGrade, letterGrade }\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const number = Number(string);\n  if (number === NaN) return false;\n  return number > 1 && number % 1 === 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n    var t0= 0;\n    var t1= 0;\n    var t2= 0;\n    var t3= 0;\n    var t4= 0;\n    var t5= 0;\n    var t6= 0;\n    var t7= 0;\n    var t8= 0;\n    var t9= 0;\n    var t10= 0;\n    var t11= 0;\n    var t12= 0;\n    var t13= 0;\n    var t14= 0;\n    var t15= 0;\n    var t16= 0;\n    var t17= 0;\n    var t18= 0;\n    var t19= 0;\n    var t20= 0;\n    var t21= 0;\n    var t22= 0;\n    var t23= 0;\n    var t24= 0;\n    var t25= 0;\n    var t26= 0;\n    var t27= 0;\n    var t28= 0;\n    var t29= 0;\n    var t30= 0;\n    var t31= 0;\n    var t32= 0;\n    var t33= 0;\n    var t34= 0;\n    var t35= 0;\n    var t36= 0;\n    var t37= 0;\n    var t38= 0;\n    var t39= 0;\n    var t40= 0;\n    var t41= 0;\n    var t42= 0;\n    var t43= 0;\n    var t44= 0;\n    var t45= 0;\n    var t46= 0;\n    var t47= 0;\n    var t48= 0;\n    var t49= 0;\n    var t50= 0;\n    var t51= 0;\n    var t52= 0;\n    var t53= 0;\n    var t54= 0;\n    var t55= 0;\n    var t56= 0;\n    var t57= 0;\n    var t58= 0;\n    var t59= 0;\n    var t60= 0;\n    var t61= 0;\n    var t62= 0;\n    var t63= 0;\n    var t64= 0;\n    var t65= 0;\n    var t66= 0;\n    var t67= 0;\n    var t68= 0;\n    var t69= 0;\n    var t70= 0;\n    var t71= 0;\n    var t72= 0;\n    var t73= 0;\n    var t74= 0;\n    var t75= 0;\n    var t76= 0;\n    var t77= 0;\n    var t78= 0;\n    var t79= 0;\n    var t80= 0;\n    var t81= 0;\n    var t82= 0;\n    var t83= 0;\n    var t84= 0;\n    var t85= 0;\n    var t86= 0;\n    var t87= 0;\n    var t88= 0;\n    var t89= 0;\n    var t90= 0;\n    var t91= 0;\n    var t92= 0;\n    var t93= 0;\n    var t94= 0;\n    var t95= 0;\n    var t96= 0;\n    var t97= 0;\n    var t98= 0;\n    var t99= 0;\n    var t100= 0;\n    var t101= 0;\n    var t102= 0;\n    var t103= 0;\n    var t104= 0;\n    var t105= 0;\n    var t106= 0;\n    var t107= 0;\n    var t108= 0;\n    var t109= 0;\n    var t110= 0;\n    var t111= 0;\n    var t112= 0;\n    var t113= 0;\n    var t114= 0;\n    var t115= 0;\n    var t116= 0;\n    var t117= 0;\n    var t118= 0;\n    var t119= 0;\n    var t120= 0;\n    var t121= 0;\n    var t122= 0;\n    var t123= 0;\n    var t124= 0;\n    var t125= 0;\n    var t126= 0;\n    var t127= 0;\n    var t128= 0;\n    var t129= 0;\n    var t130= 0;\n    var t131= 0;\n    var t132= 0;\n    var t133= 0;\n    var t134= 0;\n    var t135= 0;\n    var t136= 0;\n    var t137= 0;\n    var t138= 0;\n    var t139= 0;\n    var t140= 0;\n    var t141= 0;\n    var t142= 0;\n    var t143= 0;\n    var t144= 0;\n    var t145= 0;\n    var t146= 0;\n    var t147= 0;\n    var t148= 0;\n    var t149= 0;\n    var t150= 0;\n    var t151= 0;\n    var t152= 0;\n    var t153= 0;\n    var t154= 0;\n    var t155= 0;\n    var t156= 0;\n    var t157= 0;\n    var t158= 0;\n    var t159= 0;\n    var t160= 0;\n    var t161= 0;\n    var t162= 0;\n    var t163= 0;\n    var t164= 0;\n    var t165= 0;\n    var t166= 0;\n    var t167= 0;\n    var t168= 0;\n    var t169= 0;\n    var t170= 0;\n    var t171= 0;\n    var t172= 0;\n    var t173= 0;\n    var t174= 0;\n    var t175= 0;\n    var t176= 0;\n    var t177= 0;\n    var t178= 0;\n    var t179= 0;\n    var t180= 0;\n    var t181= 0;\n    var t182= 0;\n    var t183= 0;\n    var t184= 0;\n    var t185="}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let sumBits = [];\n  let num = N;\n  while (num > 0) {\n    sum += num % 2;\n    sumBits.push(num % 2);\n    num = Math.floor(num / 2);\n  }\n  return sumBits.reverse().join(\"\");\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const list = []\n  let adder = (val) => {\n    if (val % 2 === 1) {\n      list.push(val)\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    adder(lst[i])\n  }\n  return list\n}\n\nadd([4, 2, 6, 7])<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence .\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  if(!s) {\n    return ''\n  }\n  let words = s.split(' ')\n  let order = []\n  let result = ''\n  for(let i = 0; i < words.length; i++){\n    let temp = ''\n    for(let j = 0; j < words[i].length; j++){\n      if(words[i].charAt(j) > 96 && words[i].charAt(j) < 123){\n        temp += words[i].charAt(j)\n      }\n      else{\n        temp += String.fromCharCode(words[i].charAt(j))\n      }\n    }\n    order.push(temp)\n  }\n  let newResult = ''\n  for(let i = 0; i < order.length; i++){\n    newResult += order[i]\n    if(i < order.length - 1){\n      newResult +=''\n    }\n  }\n  return newResult\n}\n\nconsole.log(antiShuffle('Hi'))\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples ,  [(x1,  y1), (x2,y2) ... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples,  [(x1,  y1), (x2,y2)... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const ret = [];\n  for (let i = 0; i < lst.length; i++) {\n    const curr = lst[i];\n    for (let j = 0; j < curr.length; j++) {\n      ret.push([i + 1, j + 1]);\n    }\n  }\n  return ret;\n};\n\nconst getRow = (lst, x) => {\n  const ret = [];\n  for (let i = 0; i < lst.length; i++) {\n    const curr = lst[i];\n    for (let j = 0; j < curr.length; j++) {\n      ret.push([i + 1, j + 1]);\n    }\n  }\n  return ret;\n};\n\nconst getRow = (lst, x) => {\n  const ret = [];\n  for (let i = 0; i < lst.length; i++) {\n    const curr = lst[i];\n    for (let j = 0; j < curr.length; j++) {\n      ret.push([i + 1, j + 1]);\n    }\n  }\n  return ret;\n};\n\nconst getRow = (lst, x) => {\n  const ret = [];\n  for (let i = 0; i < lst.length; i++) {\n    const curr = lst[i];\n    for (let j = 0; j < curr.length; j++) {\n      ret.push([i + 1, j + 1]);\n    }\n  }\n  return ret;\n};\n\nconst getRow = (lst, x) => {\n  const ret = [];\n  for (let i = 0; i < lst.length; i++) {\n    const curr = lst[i];\n    for (let j = 0; j < curr.length; j++) {\n      ret.push([i + 1, j + 1]);\n    }\n  }\n  return ret;\n};\n\nconst getRow = (lst, x) => {\n  const ret = [];\n  for (let i = 0; i < lst.length; i++) {\n    const curr = lst[i];\n    for (let j = 0; j < curr.length; j++) {\n      ret.push([i + 1, j + 1]);\n    }\n  }\n  return ret;\n};\n\nconst getRow = (lst, x) => {\n  const ret = [];\n  for (let i = 0; i < lst.length; i++) {\n    const curr = lst[i];\n    for (let j = 0; j < curr.length; j++) {\n      ret.push([i + 1, j + 1]);\n    }\n  }\n  return ret;\n};\n\nconst getRow = (lst, x) => {\n  const ret = [];\n  for (let i = 0; i < lst.length; i++) {\n    const curr = lst[i];\n    for (let j = 0; j < curr.length; j++) {\n      ret.push([i + 1, j + 1]);\n    }\n  }\n  return ret;\n};\n\nconst getRow = (lst, x) => {\n  const ret = [];\n  for (let i = 0; i < lst.length; i++) {\n    const curr = lst[i];\n    for (let j = 0; j < curr.length; j++) {\n      ret.push([i + 1, j + 1]);\n    }\n  }\n  return ret;\n};\n\nconst getRow = (lst, x) => {\n  const ret = [];\n  for (let i = 0; i < lst.length; i++) {\n    const curr = lst[i];\n    for (let j = 0; j < curr.length; j++) {\n      ret.push([i + 1, j + 1]);\n    }\n  }\n  return ret;\n};\n\nconst getRow = (lst, x) => {\n  const ret = [];\n  for (let i = 0; i < lst.length; i++) {\n    const curr = lst[i];\n    for (let j = 0; j < curr.length; j++) {\n      ret.push([i + 1, j + 1]);\n    }\n  }\n  return ret;\n};\n\nconst getRow = (lst, x) => {\n  const ret = [];\n  for (let i = 0; i < lst.length; i++) {\n    const curr = lst[i];\n    for (let j = 0; j < curr.length; j++) {\n      ret.push([i + 1, j + 1]);\n    }\n  }\n  return ret;\n};\n\nconst getRow = (lst, x) => {\n  const ret = [];\n  for (let i = 0; i < lst.length; i++) {\n    const curr = lst[i];\n    for (let j = 0; j < curr.length; j++) {\n      ret.push([i + 1, j + 1]);\n    }\n  }\n  return ret;\n};\n\nconst getRow = (lst"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n    const len = array.length;\n    const sortedArray = new Array(len);\n    const copyArray = new Array(len);\n    for(let i = 0; i < len; i++){\n        copyArray[i] = array[i];\n    }\n    copyArray.sort((a, b) => {\n        return b - a;\n    });\n    for(let i = 0; i < len; i++){\n        sortedArray[i] = copyArray[i];\n    }\n    return sortedArray;\n}\n\nmodule.exports = sortArray;<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let currentLetter = s[i];\n    let newLetter = currentLetter;\n    if (i % 2 == 0) {\n      newLetter = currentLetter.charAt(1);\n    }\n    result += newLetter;\n  }\n  return result;\n};\n\n/*Create a function decrypt that takesa str ing as an argument and\n  returns a string decrypted with the alphabet rotated by one. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by one multipliedtotwo places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let result = '';\n  for (let i = s.length - 1; i >= 0; i--) {\n    let currentLetter = s[i];\n    let newLetter = currentLetter.charAt(1);\n    result += newLetter;\n  }\n  return result;\n};\n\nlet a = 'asdfghjkl';\nlet b = 'efgijkmnp';\nlet c = 'wxyz';\nlet d = 'qwerty';\nlet e = 'zxcvbnm';\nlet f = 'abcdef';\n\nconsole.log(encrypt(a));\nconsole.log(encrypt(b));\nconsole.log(encrypt(c));\nconsole.log(encrypt(d));\nconsole.log(encrypt(e));\nconsole.log(encrypt(f));\n\nconsole.log(decrypt(a));\nconsole.log(decrypt(b));\nconsole.log(decrypt(c));\nconsole.log(decrypt(d));\nconsole.log(decrypt(e));\nconsole.log(decrypt(f));\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1 , 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1, 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst) => {\n    if (!lst.length) return null\n    const [smallest, nextSmallest] = lst\n    return nextSmallest\n}\n\nconstnex tSmallest = (lst)"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBored = (S) => {\n    let index = 0;\n    let result = 0;\n    let char = '';\n    let charArr = S.split('');\n    while (index < S.length) {\n      char = charArr[index];\n      if (char ==='' || char === '?' || char === '!') {\n        index += 1;\n        continue;\n      }\n      if (char === '.' || char === '?' || char === '!') {\n        result += 1;\n      }\n      index += 1;\n    }\n    return result;\n  };\n  return isBored(S);\n};\n\nconsole.log(isBored('I'));\nconsole.log(isBored('I am bored'));\nconsole.log(isBored('I love this weather'));\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two , and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const a = parseInt(x, 10);\n  const b = parseInt(y, 10);\n  const c = parseInt(z, 10);\n  return a + b === c && a > 0 && b > 0 && c > 0;\n};\n\n/*\n Returns true if number x is a multiple of y, and false otherwise.\n  Examples\n  multipleOf(10, 3) ➞ true\n  multipleOf(10, 4) ➞ false\n  multipleOf(15, 3) ➞ true\n  multipleOf(20, 3) ➞ true\n  multipleOf(15, 3) ➞ false\n  multipleOf(0, 3) ➞ true\n  multipleOf(20, -3) ➞ true\n  multipleOf(20, -4) ➞ false\n  */\nconst multipleOf = (x, y) => {\n  return x % y === 0;\n};\n\n/*\n Returns true if x is divisible by y, and false otherwise.\n  Examples\n  divisibleBy(10, 3) ➞ true\n  divisibleBy(10, 4) ➞ false\n  divisibleBy(15, 3) ➞ true\n  divisibleBy(20, 3) ➞ true\n  divisibleBy(15, 3) ➞ true\n  divisibleBy(0, 3) ➞ false\n  divisibleBy(20, -3) ➞ true\n  divisibleBy(20, -4) ➞ false\n  */\nconst divisibleBy = (x, y) => {\n  return x % y === 0;\n};\n\n/*\n Returns true if x is divisible by y, and false otherwise.\n  Examples\n  divisibleBy(10, 3) ➞ true\n  divisibleBy(10, 4) ➞ true\n  divisibleBy(15, 3) ➞ false\n  divisibleBy(20, 3) ➞ true\n  divisibleBy(15, 3) ➞ true\n  divisibleBy(0, 3) ➞ false\n  divisibleBy(20, -3) ➞ true\n  divisibleBy(20, -4) ➞ false\n  */\nconst isPrime = (x) => {\n  if (x < 2) {\n    return false;\n  }\n\n  for (let i = 2; i <= Math.sqrt(x); i++) {\n    if (x % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n Returns the smallest positive integer that is greater than x.\n  Examples\n  nextPrime(0) ➞ 2\n  nextPrime(3) ➞ 5\n  nextPrime(7) ➞ 11\n  nextPrime(15) ➞ 17\n  nextPrime(0) ➞ 0\n  nextPrime(1) ➞ 1\n  nextPrime(-2) ➞ 0\n  nextPrime(-3) ➟ -3\n  nextPrime(-4) ➟ -4\n  nextPrime(2) ➟ 2\n  nextPrime(3) ➟ 3\n  nextPrime(3.5) ➟ 4\n  nextPrime(4.5) ➟ 5\n  nextPrime(5) ➟ 6\n  nextPrime(6.5) ➟ 7\n  nextPrime(7) ➟ 8\n  nextPrime(8.5) ➟ 9\n  nextPrime(9) ➟ 10\n  nextPrime(10.5) ➟ 11\n  nextPrime(11) ➟ 12\n  nextPrime(12.5) ➟ 13\n  nextPrime(13) ➟ 14\n  nextPrime(14.5) ➟ 15\n  nextPrime(15) ➟ 16\n  nextPrime(16.5) ➟ 17\n  nextPrime(17) ➟ 18\n  nextPrime(18.5) ➟ 19\n  nextPrime(19) ➟ 20\n  nextPrime(20.5) ➟ 21\n  nextPrime(21) ➟ 22\n  nextPrime(22.5) ➟ 23\n  nextPrime(23) ➟ 24\n  nextPrime(24.5) ➟ 25\n  nextPrime(25) ➟ 26\n  nextPrime(26.5) ➟ 27\n  nextPrime(27) ➟ 28\n  nextPrime(28.5) ➟ 29\n  nextPrime(29) ➟ 30\n  nextPrime(30.5) ➟ 31\n  nextPrime(31) ➟ 32\n  nextPrime(32.5) ➟ 33\n  nextPrime(33) ➟ 34\n  nextPrime(34.5) ➟ 35\n  nextPrime(35) ➟ 36\n  nextPrime(36.5) ➟ 37\n  nextPrime(37) ➟ 38\n  nextPrime(38.5) ➟ 39\n  nextPrime(39) ➟ 40\n  nextPrime(40.5) ➟ 41\n  nextPrime(41) ➟ 42\n  nextPrime(42.5) ➟ 43\n  nextPrime(43) ➟ 44\n  nextPrime(44.5) ➟ 45\n  nextPrime(45) ➟ 46\n  nextPrime(46.5) ➟ 47\n  nextPrime(47) ➟ 48\n  nextPrime(48.5) ➟ 49\n  nextPrime(49) ➟ 50\n  nextPrime(50.5) ➟ 51\n  nextPrime(51) ➟ 52\n  nextPrime(52.5) ➟ 53\n  nextPrime(53) ➟ 54\n  nextPrime(54.5) ➟ 55\n  nextPrime(55) ➟ 56\n  nextPrime(56.5) ➟ 57\n  nextPrime(57) ➟ 58\n  nextPrime(58"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters .  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters.  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const alphabet = {\n    'a': 0,\n    'b': 1,\n    'c': 2,\n    'd': 3,\n    'e': 4,\n    'f': 5,\n    'g': 6,\n    'h': 7,\n    'i': 8,\n    'j': 9,\n    'k': 10,\n    'l': 11,\n   'm': 12,\n    'n': 13,\n    'o': 14,\n    'p': 15,\n    'q': 16,\n    'r': 17,\n   's': 18,\n    't': 19,\n    'u': 20,\n    'v': 21,\n    'w': 22,\n    'x': 23,\n    'y': 24,\n    'z': 25,\n  };\n\n  let length = 0;\n  let output = '';\n  let i = 0;\n  let j = 0;\n\n  message.split('').forEach((letter) => {\n    if (alphabet[letter]) {\n      output += alphabet[letter];\n    } else if (letter ==='') {\n      output += '0';\n    } else {\n      output += letter;\n    }\n    length += 1;\n  });\n\n  while (length % 26!== 0) {\n    output += '0';\n    length += 1;\n  }\n\n  return output;\n};\n\nconst decode = (message) => {\n  const alphabet = {\n    '0': 0,\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n    'a': 10,\n    'b': 11,\n    'c': 12,\n    'd': 13,\n    'e': 14,\n    'f': 15,\n    'g': 16,\n    'h': 17,\n    'i': 18,\n    'j': 19,\n    'k': 20,\n    'l': 21,\n   'm': 22,\n    'n': 23,\n    'o': 24,\n    'p': 25,\n    'q': 26,\n    'r': 27,\n   's': 28,\n    't': 29,\n    'u': 30,\n    'v': 31,\n    'w': 32,\n    'x': 33,\n    'y': 34,\n    'z': 35,\n  };\n\n  let length = 0;\n  let output = '';\n  let i = 0;\n  let j = 0;\n\n  message.split('').forEach((letter) => {\n    if (alphabet[letter]) {\n      output += alphabet[letter];\n    } else if (letter === '0') {\n      output +='';\n    } else {\n      output += letter;\n    }\n    length += 1;\n  });\n\n  while (length % 26!== 0) {\n    output +='';\n    length += 1;\n  }\n\n  return output;\n};\n\nconst test = () => {\n  const message = 'This is a message';\n  const output = encode(message);\n  const decoded = decode(output);\n\n  console.log(output);\n  console.log(decoded);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const prime = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,121,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]\n  const sum = 0\n  const isPrime = (n) => {\n    const i = 0\n    while (i < prime.length) {\n      if (prime[i] > n) {\n        return false\n      } else if (n % prime[i] === 0) {\n        return true\n      }\n      i++\n    }\n    return false\n  }\n  const digits = (n) => {\n    return n.toString().split('').map(x => parseInt(x,10))\n  }\n  const isValid = (digits) => {\n    if (digits.length === 0) {\n      return false\n    }\n    if (digits[0] < 1 || digits[0] > 9) {\n      return false\n    }\n    for (let i = 1; i < digits.length; i++) {\n      if (digits[i] < 1 || digits[i] > 9) {\n        return false\n      }\n    }\n    return true\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (isPrime(lst[i])) {\n      if (isValid(digits(lst[i]))) {\n        sum += lst[i]\n      }\n    }\n  }\n  return sum\n}\n\nconst prime = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,121,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]\nconst digits = (n) => {\n  return n.toString().split('').map(x => parseInt(x,10))\n}\nconst isValid = (digits) => {\n  if (digits.length === 0) {\n    return false\n  }\n  if (digits[0] < 1 || digits[0] > 9) {\n    return false\n  }\n  for (let i = 1; i < digits.length; i++) {\n    if (digits[i] < 1 || digits[i] > 9) {\n      return false\n    }\n  }\n  return true\n}\nconst sum = (lst) => {\n  const isPrime = (n) => {\n    const i = 0\n    while (i < prime."}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    let value = dict[key];\n    if (value.toUpperCase()!== value.toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n === 0) {\n    return [];\n  }\n  return [...Array(n).keys()].map((x) => x);\n};\n\nconsole.log(countUpTo(3));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let prod = 1\n  let i = 0\n  while (a > 0) {\n    prod *= b\n    a -= b\n    i++\n  }\n  return prod\n}\n\nconst multiply2 = (a, b) => {\n  let prod = 1\n  let i = 0\n  let j = 0\n  while (a > 0) {\n    prod *= b\n    a -= b\n    i++\n    j++\n  }\n  return prod\n}\n\n// ********************** END PROBLEM **************************\n\n// ********************** START SOLUTION **************************\n\n/*\n  Write a function to return the sum of two numbers\n  written in one line of code.\n  Assume the input is an integer.\n  Examples:\n  add(5, 6) should return 11.\n  add(1, 1) should return 2.\n  add(10, 2) should return 12.\n  add(9, 8) should return 17.\n  */\nconst add = (a, b) => a + b\n\nconst add2 = (a, b) => a + b\n\n/*\n  Write a function to return the difference between two numbers\n  written in one line of code.\n  Assume the input is an integer.\n  Examples:\n  subtract(5, 6) should return -1.\n  subtract(1, 1) should return 0.\n  subtract(10, 2) should return 8.\n  subtract(9, 8) should return 1.\n  */\nconst subtract = (a, b) => a - b\n\nconst subtract2 = (a, b) => a - b\n\n/*\n  Write a function to return the product of two numbers\n  written in one line of code.\n  Assume the input is an integer.\n  Examples:\n  multiply(5, 6) should return 30.\n  multiply(1, 1) should return 1.\n  multiply(10, 2) should return 20.\n  multiply(9, 8) should return 72.\n  */\nconst multiply = (a, b) => a * b\n\nconst multiply2 = (a, b) => a * b\n\n/*\n  Write a function to return the sum of two numbers\n  written in one line of code.\n  Assume the input is an integer.\n  Examples:\n  add(5, 6) should return 11.\n  add(1, 1) should return 2.\n  add(10, 2) should return 12.\n  add(9, 8) should return 17.\n  */\nconst add = (a, b) => a + b\n\nconst add2 = (a, b) => a + b\n\n/*\n  Write a function to return the difference between two numbers\n  written in one line of code.\n  Assume the input is an integer.\n  Examples:\n  subtract(5, 6) should return -1.\n  subtract(1, 1) should return 0.\n  subtract(10, 2) should return 8.\n  subtract(9, 8) should return 1.\n  */\nconst subtract = (a, b) => a - b\n\nconst subtract2 = (a, b) => a - b\n\n/*\n  Write a function to return the product of two numbers\n  written in one line of code.\n  Assume the input is an integer.\n  Examples:\n  multiply(5, 6) should return 30.\n  multiply(1, 1) should return 1.\n  multiply(10, 2) should return 20.\n  multiply(9, 8) should return 72.\n  */\nconst multiply = (a, b) => a * b\n\nconst multiply2 = (a, b) => a * b\n\n/*\n  Write a function to return the sum of two numbers\n  written in one line of code.\n  Assume the input is an integer.\n  Examples:\n  add(5, 6) should return 11.\n  add(1, 1) should return 2.\n  add(10, 2) should return 12.\n  add(9, 8) should return 17.\n  */\nconst add = (a, b) => a + b\n\nconst add2 = (a, b) => a + b\n\n/*\n  Write a function to return the difference between two numbers\n  written in one line of code.\n  Assume the input is an integer.\n  Examples:\n  subtract(5, 6) should return -1.\n  subtract(1, 1) should return 0.\n  subtract(10, 2) should return 8.\n  subtract(9, 8) should return 1.\n  */\nconst subtract = (a, b) => a - b\n\nconst subtract2 = (a, b) => a - b\n\n/*\n  Write a function to return the product of two numbers\n  written in one line of code.\n  Assume the input is an integer.\n  Examples:\n  multiply(5, 6) should return 30.\n  multiply(1, 1) should return 1.\n  multiply(10, 2) should return 20.\n  multiply(9, 8) should return 72.\n  */\nconst multiply = (a, b) => a * b\n\nconst multiply2 = (a, b) => a * b\n\n/*\n  Write a function to return the sum of two numbers\n  written in one line of code.\n  Assume the input is an integer.\n  Examples:\n  add(5, 6) should return 11.\n  add(1, 1) should return 2.\n  add(10, 2) should return 12.\n  add(9, 8) should return 17.\n  */\nconst add = (a, b) => a + b\n\nconst add2 = (a, b) => a + b\n\n/*\n  Write a function to return the difference between two numbers\n  written in one line of code.\n  Assume the input is an integer.\n  Examples:\n  subtract(5, 6) should return -1.\n  subtract(1"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\n\n/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countLower = (s) => {\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() === s[i]) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\n\n/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\n\n/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\n\n/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countWords = (s) => {\n    let cnt = 0;\n    let words = s.split(' ');\n    for (let i = 0; i < words.length; i++) {\n        cnt += countUpper(words[i]);\n    }\n    return cnt;\n}\n\n/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countWordsUpper = (s) => {\n    let cnt = 0;\n    let words = s.split(' ');\n    for (let i = 0; i < words.length; i++) {\n        cnt += countUpper(words[i]);\n    }\n    return cnt;\n}\n\n/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countWordsVowels = (s) => {\n    let cnt = 0;\n    let words = s.split(' ');\n    for (let i = 0; i < words.length; i++) {\n        cnt += countUpper(words[i]);\n    }\n    return cnt;\n}\n\n/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countWordsConsonants = (s) => {\n    let cnt = 0;\n    let words = s.split(' ');\n    for (let i = 0; i < words.length; i++) {\n        cnt += countUpper(words[i]);\n    }\n    return cnt;\n}\n\n/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countWordsLower = (s) => {\n    let cnt = 0;\n    let words = s.split(' ');\n    for (let i = 0; i < words.length; i++) {\n        cnt += countUpper(words[i]);\n    }\n    return cnt;\n}\n\n/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countWordsAll = (s) => {\n    let cnt = 0;\n    let words = s.split(' ');\n    for (let i = 0; i < words.length; i++) {\n        cnt += countUpper(words[i]);\n    }\n    return cnt;\n}\n\n/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseFloat(value)\n  if (Math.abs(number) < 1) {\n    return Math.round(number)\n  }\n\n  const difference = Math.abs(Math.ceil(number) - number)\n  if (Math.abs(number) - Math.floor(number) < difference) {\n    return Math.round(number)\n  }\n  return Math.ceil(number)\n}\n\nexport default closestInteger\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const level = []\n  for (let i = 0; i < n; i++) {\n    level[i] = 1\n  }\n  for (let i = n - 1; i >= 1; i--) {\n    level[i] = level[i] + level[i - 1]\n  }\n  return level\n}\n\n// console.log(makeAPile(3))\n// [3, 5, 7]\n\n// console.log(makeAPile(2))\n// [1, 3]\n\n// console.log(makeAPile(1))\n// [1]\n\n// console.log(makeAPile(0))\n// []\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const re = /\\s*\\S+\\s*/g;\n  return s.match(re);\n}\n\n// Test\n\nconst test = () => {\n  let s = \"Hi, my name is John\";\n  console.log(wordsString(s));\n  s = \"One, two, three, four, five, six\";\n  console.log(wordsString(s));\n};\n\ntest();<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let max = x - 1\n  while (max < y) {\n    max += 2\n  }\n  return max\n}\n\nconsole.log(chooseNum(12, 15))\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let rounded = n + m;\n  let avg = (rounded / 2).toString(2);\n  if (rounded > m) return -1;\n  return avg;\n};\n\nconst roundedAvgTest = () => {\n  let n = 1;\n  let m = 5;\n  let rounded = n + m;\n  let avg = rounded / 2.0;\n  console.log(roundedAvg(n, m));\n};\nroundedAvgTest();\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const temp = x.filter((num) =>!num % 2)\n  return temp.sort((a, b) => a - b)\n}\n\nexport default uniqueDigits\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let len = arr.length;\n  let result = new Array(len);\n  let sorted = arr.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  \n  for (let i = 0; i < len; i++) {\n    let temp = sorted.splice(0, 1)[0];\n    result[i] = (temp < 10)? `${temp}` : temp;\n  }\n  return result.reverse();\n};\n\n/*\n  Given an array of strings, sort the strings that are between 1 and 9 inclusive,\n  reverse the resulting array, and t hen rep l ace eac h string b y its corresponding length.\n  \n  For example:\n    arr = [\"One\", \"Two\", \"One\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n          -> sort arr -> [\"One\", \"One\", \"Two\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n          -> reverse arr -> [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Two\", \"One\", \"One\"]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength2 = (arr) => {\n  let len = arr.length;\n  let result = new Array(len);\n  let sorted = arr.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  \n  for (let i = 0; i < len; i++) {\n    let temp = sorted.splice(0, 1)[0];\n    result[i] = temp.length;\n  }\n  return result.reverse();\n};\n\n/*\n  Given an array of strings, sort the strings that are between 1 and 9 inclusive,\n  reverse the resulting array, and t hen rep l ace eac h string b y its corresponding length.\n  \n  For example:\n    arr = [\"One\", \"Two\", \"One\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n          -> sort arr -> [\"One\", \"One\", \"Two\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n          -> reverse arr -> [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Two\", \"One\", \"One\"]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength3 = (arr) => {\n  let len = arr.length;\n  let result = new Array(len);\n  let sorted = arr.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  \n  for (let i = 0; i < len; i++) {\n    let temp = sorted.splice(0, 1)[0];\n    result[i] = temp.length;\n  }\n  return result.reverse();\n};\n\nmodule.exports = {\n  byLength,\n  byLength2,\n  byLength3\n};\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2*  ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2* ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const list = []\n  for (let i = 1; i <= n; i += 1) {\n    list.push(1)\n    for (let j = 2; j <= i; j += 1) {\n      list.push(list[j - 1] * j)\n    }\n  }\n  return list\n}\n\nconsole.log(f(5))\n// -> [1, 2, 6, 24, 15]\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n) , inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n), inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n    const odd = 0;\n    const even = 0;\n    const oddSum = 0;\n    const evenSum = 0;\n    for (let i = 1; i <= n; i++) {\n        const num = i;\n        let sum = 0;\n        while (num > 0) {\n            if (num % 2 == 0) {\n                sum += num;\n            }\n            num = num / 2;\n        }\n        if (sum % 2 == 1) {\n            odd += 1;\n        }\n        else {\n            even += 1;\n        }\n        if (oddSum < sum) {\n            oddSum = sum;\n        }\n        if (evenSum < sum) {\n            evenSum = sum;\n        }\n    }\n    return { odd, even };\n};\n\nconst n = 3;\nconsole.log(evenOddPalindrome(n));\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0 .\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n    const count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 0) {\n            count += 1;\n        }\n    }\n    return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integersarr[1 ], arr[2], ..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integersarr[1 ], arr[2],..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n    let startIndex = 0;\n    let endIndex = arr.length - 1;\n    let temp = 0;\n\n    while (startIndex < endIndex) {\n        if (arr[endIndex] > arr[startIndex]) {\n            temp = arr[startIndex];\n            arr[startIndex] = arr[endIndex];\n            arr[endIndex] = temp;\n            startIndex++;\n            endIndex--;\n        } else {\n            endIndex--;\n        }\n    }\n\n    if (arr[endIndex] > arr[startIndex]) {\n        temp = arr[startIndex];\n        arr[startIndex] = arr[endIndex];\n        arr[endIndex] = temp;\n    }\n\n    return arr.every((elem, index) => index === arr.length - 1);\n};\n\n// console.log(moveOneBall([3, 4, 5, 1, 2]));\n// console.log(moveOneBall([3, 5, 4, 1, 2]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 6, 3, 5, 4, 1, 2, 6, 3, 5, 4, 1, 2]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 6, 3, 5, 4, 1, 2, 6, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1, 2, 3, 5, 4, 1"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const lst1_copy = clone(lst1);\n  const lst2_copy = clone(lst2);\n  const len = lst1.length;\n  for (let i = 0; i < len; i++) {\n    if (lst1_copy[i] % 2 === 1) {\n      lst1_copy[i] -= 1;\n    }\n  }\n  const len2 = lst2.length;\n  for (let i = 0; i < len2; i++) {\n    if (lst2_copy[i] % 2 === 1) {\n      lst2_copy[i] -= 1;\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst1_copy[i]!== lst2_copy[i]) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}\n\nconst clone = (arr) => {\n  return arr.slice(0);\n}\n\nconst test = (lst1, lst2) => {\n  const res = exchange(lst1, lst2);\n  console.log(res);\n}\n\n// Test\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 5, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4]);"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n    let result = {};\n    if (test === '') {\n        return result;\n    }\n    let letters = test.split('');\n    for (let i = 0; i < letters.length; i++) {\n        let letter = letters[i];\n        let count = result[letter] || 0;\n        result[letter] = ++count;\n    }\n    return result;\n};\n\n//TODO: test\n\n//TODO: find max element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//TODO: find min element\n\n//TODO: find max element\n\n//T"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const newS = s.split('').reverse().join('');\n  const newC = c.split('').reverse().join('');\n\n  let cResult = false;\n  if (newS === newC) {\n    cResult = true;\n  }\n\n  return [newS, cResult];\n};\n\nconst test = (s, c) => {\n  const [result, check] = reverseDelete(s, c);\n  console.log(result, check);\n};\n\ntest(\"abcdef\", \"b\");\ntest(\"abcdef\", \"ae\");\ntest(\"abcdef\", \"ab\");\ntest(\"abcdef\", \"abce\");\ntest(\"abcdef\", \"abcef\");\ntest(\"abcdef\", \"acdef\");\ntest(\"abcdef\", \"abcdef\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg\");\ntest(\"abcdef\", \"abcdefg"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  lst.forEach(s => {\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n      if(s[i].match(/\\d/)){\n        count++;\n      }\n    }\n    res.push(`the number of odd elements ${count} in the str${s} of the ${lst.length} input.`);\n  });\n  return res;\n};\n\nmodule.exports = oddCount;<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n    const len = nums.length\n    if (len === 0) {\n        return -1\n    }\n    const memo = {}\n    const sub = (l, r) => {\n        if (l === r) {\n            return 0\n        }\n        const sum = memo[l] + nums[l]\n        if (sum < memo[r]) {\n            return sum\n        }\n        if (sum === memo[r]) {\n            return sum + sub(l + 1, r)\n        }\n        return sum + sub(l + 1, r)\n    }\n    return sub(0, len - 1)\n}\n\n// test\nconst nums = [2, 3, 4, 1, 2, 4]\nconsole.log(minSubArraySum(nums))\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid ofwells . Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water .\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets .\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid ofwells. Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water.\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    // The index of the first element of the row\n    let row_start = 0;\n    // The index of the last element of the row\n    let row_end = grid.length - 1;\n\n    // The index of the first element of the column\n    let col_start = 0;\n    // The index of the last element of the column\n    let col_end = grid[0].length - 1;\n\n    // The index of the current well\n    let index = 0;\n\n    // The total number of buckets that have been filled\n    let total = 0;\n\n    while (row_start < row_end) {\n        while (col_start < col_end) {\n            if (grid[row_start][col_start] === 1) {\n                index = row_start * grid[0].length + col_start;\n                // If the well has enough water, add the bucket to the queue and reduce the number of water in the well\n                if (grid[row_start][col_start] - 1 <= capacity) {\n                    // Add the bucket to the queue\n                    total += grid[row_start][col_start] - 1;\n                    grid[row_start][col_start] = 1;\n                    // Remove the water from the well\n                    grid[row_start][col_start] -= 1;\n                }\n            }\n            col_start += 1;\n        }\n        row_start += 1;\n        col_start = 0;\n    }\n\n    return total;\n};\n\nconst grid = [[0, 0, 1, 1], [0, 1, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]]\nconst bucket_capacity = 1\nconsole.log(maxFill(grid, bucket_capacity));\n\n/*\n  Input: \n      grid : [[1,1,1,0], [1,1,0,0], [1,0,0,0]]\n      bucket_capacity : 1\n  Output: 3\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    // The index of the first element of the row\n    let row_start = 0;\n    // The index of the last element of the row\n    let row_end = grid.length - 1;\n\n    // The index of the first element of the column\n    let col_start = 0;\n    // The index of the last element of the column\n    let col_end = grid[0].length - 1;\n\n    // The index of the current well\n    let index = 0;\n\n    // The total number of buckets that have been filled\n    let total = 0;\n\n    while (row_start < row_end) {\n        while (col_start < col_end) {\n            if (grid[row_start][col_start] === 1) {\n                index = row_start * grid[0].length + col_start;\n                // If the well has enough water, add the bucket to the queue and reduce the number of water in the well\n                if (grid[row_start][col_start] - 1 <= capacity) {\n                    // Add the bucket to the queue\n                    total += grid[row_start][col_start] - 1;\n                    grid[row_start][col_start] = 1;\n                    // Remove the water from the well\n                    grid[row_start][col_start] -= 1;\n                }\n            }\n            col_start += 1;\n        }\n        row_start += 1;\n        col_start = 0;\n    }\n\n    return total;\n};\n\nconst grid = [[1, 1, 1, 0], [1, 1, 0, 0], [1, 0, 0, 0]]\nconst bucket_capacity = 1\nconsole.log(maxFill(grid, bucket_capacity));\n\n/*\n  Input: \n      grid : [[1,1,1,0], [1,1,0,0], [1,0,0,0]]\n      bucket_capacity : 1\n  Output: 3\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    // The index of the first element of the row\n    let row_start = 0;\n    // The index of the last element of the row\n    let row_end = grid.length - 1;\n\n    // The index of the first element of the column\n    let col_start = 0;\n    // The index of the last element of the column\n    let col_end = grid[0].length - 1;\n\n    // The index of the current well\n    let index = 0;\n\n    // The total number of buckets that have been filled\n    let total = 0;\n\n    while (row_start < row_end) {\n        while (col_start < col_end"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let zero = 0;\n  let one = 1;\n  let max = arr.reduce((a, b) => a + b, 0);\n\n  let sort = (a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  }\n\n  let count = 0;\n  for (let x of arr) {\n    count += x;\n  }\n\n  let arr2 = [...arr].sort(sort);\n\n  if (max === count) {\n    return arr2;\n  }\n\n  let count2 = 0;\n  for (let x of arr2) {\n    count2 += x;\n  }\n\n  let arr3 = [...arr2].sort(sort);\n  return arr3;\n};\n\nexport default sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n    const words = []\n    const length = s.length\n    let word = \"\"\n    let i = 0\n    while (i < length) {\n        let c = s[i]\n        if (c === \" \") {\n            i++\n            continue\n        }\n        if (c === \"\") {\n            break\n        }\n        if (c === \" \") {\n            words.push(word)\n            word = \"\"\n        } else {\n            word += c\n        }\n        i++\n    }\n    words.push(word)\n    if (words.length <= n) {\n        return words\n    }\n    const result = []\n    let i = 0\n    let j = 0\n    while (i < words.length) {\n        if (j === n) {\n            break\n        }\n        if (words[i].length === 1) {\n            j++\n        }\n        i++\n    }\n    if (i === words.length) {\n        result.push(words)\n        return result\n    }\n    let j = 0\n    while (i < words.length) {\n        let word = words[i]\n        let k = 0\n        while (k < n) {\n            if (k === j) {\n                break\n            }\n            if (word[k].length === 1) {\n                j++\n            }\n            k++\n        }\n        if (k === n) {\n            result.push(words[i])\n            i++\n        } else {\n            j = 0\n            while (j < n) {\n                if (j === k) {\n                    break\n                }\n                if (word[j].length === 1) {\n                    j++\n                }\n                j++\n            }\n        }\n    }\n    return result\n}\n\nexport default selectWords\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n    if (word.length === 0) {\n        return \"\";\n    }\n\n    const last = word.charAt(word.length - 1);\n    const next = word.charAt(word.length);\n    const first = word.charAt(0);\n\n    if (isVowel(last) &&!isVowel(first)) {\n        return word;\n    }\n\n    if (isVowel(first) &&!isVowel(last)) {\n        return word;\n    }\n\n    let i = 1;\n    while (word.charAt(i) === next) {\n        i++;\n    }\n\n    return word.substr(i - 1, word.length - i + 1);\n}\n\nconst isVowel = (char) => {\n    return char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\" || char === \"A\" || char === \"E\" || char === \"I\" || char === \"O\" || char === \"U\";\n}\n\nmodule.exports = getClosestVowel;\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only .\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  if (lst.length === 0) return 'No'\n  let left = lst[0]\n  let right = lst[1]\n  if (right === '(' && left === ')') return 'Yes'\n  if (right === ')') {\n    return matchParens(lst.slice(2, lst.length - 1))\n  }\n  if (right === '(' && left === '(') {\n    return matchParens(lst.slice(2, lst.length - 2))\n  }\n  return 'No'\n}\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\nfunction assert(test, message, test_number) {\n  if (!test) {\n    console.log(test_number + \"false\");\n    throw \"ERROR: \" + message;\n  }\n  console.log(test_number + \"true\");\n  return true;\n}\n\nassert(\n  matchParens([\"()()\", \")\"]),\n  \"should return 'Yes'\",\n  \"1. \"\n)\n\nassert(\n  matchParens([\"()()\"]),\n  \"should return 'Yes'\",\n  \"2. \"\n)\n\nassert(\n  matchParens([\"())()\"]),\n  \"should return 'Yes'\",\n  \"3. \"\n)\n\nassert(\n  matchParens([\"()()()\", \"())()\"]),\n  \"should return 'Yes'\",\n  \"4. \"\n)\n\nassert(\n  matchParens([\"()()()()\"]),\n  \"should return 'No'\",\n  \"5. \"\n)\n\nassert(\n  matchParens}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r .\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let result = []\n  let max = arr[0]\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) {\n      result = [arr[i]]\n      max = arr[i]\n    } else if (arr[i] == max) {\n      result.push(arr[i])\n    }\n  }\n  return result\n}\n\n// @param {number[]} arr\n// @param {number} k\n// @return {number[]}\nexport default (arr, k) => {\n  if (!Array.isArray(arr)) return []\n  if (k > arr.length) return []\n  let l = 1\n  let result = []\n  while (k >= l) {\n    result = result.concat(maximum(arr.slice(0, k), k))\n    k -= l\n    l++\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const oddSum = (x) => x % 2? x : x - 1\n  const evenSum = (x) => x % 2? x + 1 : x\n\n  return lst.reduce((prev, x) => oddSum(prev) + evenSum(x), 0)\n}\n\nmodule.exports = solution\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += arr[i]\n    }\n    return sum\n}\n\nconst addElements_solution = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += Math.pow(10, i) * arr[i]\n    }\n    return sum\n}\n\nconst addElements_test = [111,21,3,4000,5,6,7,8,9]\n\nconsole.log(addElements_solution(addElements_test, 4))\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n    const oddCollatz = []\n    const collatz = (n, step) => {\n        const odd = (n & 1) === 1\n        const even = n % 2 === 0\n        const next = odd? n / 2 : (n + 1)\n        oddCollatz.push(next)\n        return even? collatz(next, step * 2) : collatz(next, step * 2)\n    }\n    collatz(n, 1)\n    return oddCollatz\n}\n\nconsole.log(getOddCollatz(5))\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4 .The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4.The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date === \"\") return false;\n  const dateArr = date.split(\"-\");\n  const month = parseInt(dateArr[1]);\n  const day = parseInt(dateArr[0]);\n  const year = parseInt(dateArr[2]);\n\n  if ((day < 1) || (day > 31) || (month < 1) || (month > 12)) return false;\n  if (day < 1) {\n    if (month === 4 || month === 6 || month === 9 || month === 11) return false;\n  } else if (day > 30) {\n    if (month === 2) return false;\n  } else {\n    if ((month === 4 || month === 6 || month === 9 || month === 11) && (day > 29)) return false;\n  }\n\n  if (month > 12) {\n    if (year % 4 === 0) return false;\n  } else if (month === 2) {\n    if (year % 4 === 0) return false;\n    if (((year % 100 === 0) && (year % 400 === 0)) || (year % 100!== 0) && (year % 4 === 0)) return false;\n  }\n\n  return true;\n};\n\nconst validMonth = (month) => {\n  if (month === \"\") return false;\n  if (month < 1 || month > 12) return false;\n  return true;\n};\n\nconst validYear = (year) => {\n  if (year === \"\") return false;\n  if (year < 1 || year > 9999) return false;\n  return true;\n};\n\nconst validDateString = (date) => {\n  if (date === \"\") return false;\n  const dateArr = date.split(\"-\");\n  const month = parseInt(dateArr[1]);\n  const day = parseInt(dateArr[0]);\n  const year = parseInt(dateArr[2]);\n  if ((month < 1) || (month > 12) || (day < 1) || (day > 31) || (year < 1) || (year > 9999)) return false;\n  return true;\n};\n\nconst date = () => {\n  let month = 1;\n  let day = 1;\n  let year = 2000;\n  const monthArr = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const dateArr = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"];\n  const dateArrLength = dateArr.length;\n\n  while (month <= 12) {\n    let row = Math.floor(month / 7);\n    let column = month % 7;\n    if (month === 1) {\n      if (year % 4 === 0) {\n        if (column === 6) {\n          if (row === 6) {\n            return day + \"th \" + monthArr[month - 1] + \" of \" + year;\n          } else {\n            return day + \"th \" + monthArr[month - 1] + \" of \" + year + \" \" + dateArr[column];\n          }\n        }\n      } else {\n        if (column === 6) {\n          if (row === 6) {\n            return day + \"th \" + monthArr[month - 1] + \" of \" + year + \" \" + dateArr[column];\n          } else {\n            return day + \"th \" + monthArr[month - 1] + \" of \" + year + \" \" + dateArr[column] + \" \" + dateArr[row];\n          }\n        }\n      }\n    } else {\n      if (column === 6) {\n        if (row === 6) {\n          return day + \"th \" + monthArr[month - 1] + \" of \" + year + \" \" + dateArr[column];\n        } else {\n          return day + \"th \" + monthArr[month - 1] + \" of \" + year + \" \" + dateArr[column] + \" \" + dateArr[row];\n        }\n      }\n    }\n    month++;\n  }\n  return \"\";\n};\n\nconst validDateString = (date) => {\n  if (date === \"\") return false;\n  const dateArr = date.split(\"-\");\n  const month = parseInt(dateArr[1]);\n  const day = parseInt(dateArr[0]);\n  const year = parseInt(dateArr[2]);\n  if ((month < 1) || (month > 12) || (day < 1) || (day > 31) || (year < 1) || (year > 9999)) return false;\n  return true;\n};\n\nconst dateString = () => {\n  let month = 1;\n  let day = 1;\n  let year = 2000;\n  const monthArr = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const dateArr = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0 , ord('b')= 1, .. . ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const ws = \" \\t\\n\\r\\f\\v\"\n  const re = /\\s*([^\\s\\,]*)/g\n  const words = re.exec(txt)\n  const wordlist = []\n  while (words!== null) {\n    wordlist.push(words[1])\n    words = re.exec(txt)\n  }\n  return wordlist\n}\n\nconst isUnique = (x) => x!== undefined && x!== null && x!== \"\" && x!== \"\"\n\nconst isUniqueArray = (x) => x.every(isUnique)\n\nconst isUniqueObj = (x) => Object.keys(x).every(isUnique)\n\nconst isUniqueArrayObj = (x) => isUniqueArray(Object.keys(x))\n\nconst isUniqueArrayObj = (x) => x.every(isUniqueArrayObj)\n\nconst isUniqueObj = (x) => x.every(isUniqueObj)\n\nconst isUniqueArrayObj = (x) => x.every(isUniqueObj)\n\nconst isUnique = (x) => x!== undefined && x!== null && x!== \"\" && x!== \"\"\n\nconst isUniqueArray = (x) => x.every(isUnique)\n\nconst isUniqueObj = (x) => Object.keys(x).every(isUnique)\n\nconst isUnique = (x) => x!== undefined && x!== null && x!== \"\" && x!== \"\"\n\nconst isUniqueArray = (x) => x.every(isUnique)\n\nconst isUniqueObj = (x) => Object.keys(x).every(isUnique)\n\nconst isUnique = (x) => x!== undefined && x!== null && x!== \"\" && x!== \"\"\n\nconst isUniqueArray = (x) => x.every(isUnique)\n\nconst isUniqueObj = (x) => Object.keys(x).every(isUnique)\n\nconst isUnique = (x) => x!== undefined && x!== null && x!== \"\" && x!== \"\"\n\nconst isUniqueArray = (x) => x.every(isUnique)\n\nconst isUniqueObj = (x) => Object.keys(x).every(isUnique)\n\nconst isUnique = (x) => x!== undefined && x!== null && x!== \"\" && x!== \"\"\n\nconst isUniqueArray = (x) => x.every(isUnique)\n\nconst isUniqueObj = (x) => Object.keys(x).every(isUnique)\n\nconst isUnique = (x) => x!== undefined && x!== null && x!== \"\" && x!== \"\"\n\nconst isUniqueArray = (x) => x.every(isUnique)\n\nconst isUniqueObj = (x) => Object.keys(x).every(isUnique)\n\nconst isUnique = (x) => x!== undefined && x!== null && x!== \"\" && x!== \"\"\n\nconst isUniqueArray = (x) => x.every(isUnique)\n\nconst isUniqueObj = (x) => Object.keys(x).every(isUnique)\n\nconst isUnique = (x) => x!== undefined && x!== null && x!== \"\" && x!== \"\"\n\nconst isUniqueArray = (x) => x.every(isUnique)\n\nconst isUniqueObj = (x) => Object.keys(x).every(isUnique)\n\nconst isUnique = (x) => x!== undefined && x!== null && x!== \"\" && x!== \"\"\n\nconst isUniqueArray = (x) => x.every(isUnique)\n\nconst isUniqueObj = (x) => Object.keys(x).every(isUnique)\n\nconst isUnique = (x) => x!== undefined && x!== null && x!== \"\" && x!== \"\"\n\nconst isUniqueArray = (x) => x.every(isUnique)\n\nconst isUniqueObj = (x) => Object.keys(x).every(isUnique)\n\nconst isUnique = (x) => x!== undefined && x!== null && x!== \"\" && x!== \"\"\n\nconst isUniqueArray = (x) => x.every(isUnique)\n\nconst isUniqueObj = (x) => Object.keys(x).every(isUnique)\n\nconst isUnique = (x) => x!== undefined && x!== null && x!== \"\" && x!== \"\"\n\nconst isUniqueArray = (x) => x.every(isUnique)\n\nconst isUniqueObj = (x) => Object.keys(x).every(isUnique)\n\nconst isUnique = (x) => x!== undefined && x!== null && x!== \"\" && x!== \"\"\n\nconst isUniqueArray = (x) => x.every(isUnique)\n\nconst isUniqueObj = (x) => Object.keys(x).every(isUnique)\n\nconst isUnique = (x) => x!== undefined && x!== null && x!== \"\" && x!== \"\"\n\nconst isUniqueArray = (x) => x.every(isUnique)\n\nconst isUniqueObj = (x) => Object.keys(x).every(isUnique)\n\nconst isUnique = (x) => x!== undefined && x!== null && x!== \"\" && x!== \"\"\n\nconst isUniqueArray = (x) => x.every(isUnique)\n\nconst isUniqueObj = (x) => Object.keys(x).every(isUnique)\n\nconst isUnique = (x) => x!== undefined && x!== null && x!== \"\" && x!== \"\"\n\nconst isUniqueArray = (x) => x.every(isUnique)\n\nconst isUniqueObj = (x) => Object.keys(x).every(isUnique)\n\nconst isUnique = (x) => x!== undefined && x!== null && x!== \"\" &&"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n    const len = lst.length\n    let flag = false\n    let i = 0\n    while (i < len - 1) {\n        if (lst[i] > lst[i + 1]) {\n            flag = false\n            break\n        } else {\n            i++\n        }\n    }\n    return flag\n}\n\n/* Given a list of numbers, return whet her o r not they are sorted in\n descending order. If list has more than 1 dupl ive  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSortedDesc([5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n    const len = lst.length\n    let flag = false\n    let i = 0\n    while (i < len - 1) {\n        if (lst[i] < lst[i + 1]) {\n            flag = false\n            break\n        } else {\n            i++\n        }\n    }\n    return flag\n}\n\n// const isSorted = (lst) => {\n//     const len = lst.length\n//     let flag = false\n//     let i = 0\n//     while (i < len - 1) {\n//         if (lst[i] > lst[i + 1]) {\n//             flag = false\n//             break\n//         } else {\n//             i++\n//         }\n//     }\n//     return flag\n// }\n\nconst isSorted = (lst) => {\n    const len = lst.length\n    let flag = true\n    for (let i = 0; i < len - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\nconst isSortedDesc = (lst) => {\n    const len = lst.length\n    let flag = true\n    for (let i = len - 1; i > 0; i--) {\n        if (lst[i] < lst[i - 1]) {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\nconst test = [\n    [5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 2, 3, 4],\n    [1, 2, 2, 3, 4, 5, 6],\n    [1, 2, 2, 2, 3, 3, 4],\n    [1, 2, 2, 2, 2, 3, 4],\n    [1, 2, 2, 2, 2, 2, 3, 3, 4],\n    [1, 2, 2, 2, 2, 2, 2, 3, 3, 4],\n    [1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4],\n    [1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4],\n    [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4]\n]\n\nconsole.log(isSorted(test))\nconsole.log(isSortedDesc(test))\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nconsole.log(isSorted([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]))\nconsole.log(isSorted([1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]))\nconsole.log(isSorted([1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]))\nconsole.log(isSorted([1, 2, 2, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]))\nconsole.log(isSorted([1, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]))\nconsole.log(isSorted([1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]))\nconsole.log(isSorted([1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]))\nconsole.log(isSorted([1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return 'NO';\n  }\n  if (interval1[0] < interval2[0] && interval2[1] < interval1[1]) {\n    return 'NO';\n  }\n  const a = Math.min(interval1[0], interval2[0]);\n  const b = Math.max(interval1[1], interval2[1]);\n  if (a === b) {\n    return 'NO';\n  }\n  return `${Math.floor(b - a) + 1}`;\n};\n\nconst intersect = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return 'NO';\n  }\n  if (interval1[0] < interval2[0] && interval2[1] < interval1[1]) {\n    return 'NO';\n  }\n  return `YES`;\n};\n\nconst main = () => {\n  console.log(intersection((-1, 1), (-3, -1)));\n  console.log(intersection((-1, 1), (-2, 2)));\n  console.log(intersection((-3, -1), (-5, 5)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));\n  console.log(intersect((-1, 1), (-2, 2)));"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n  const nums = arr.filter((n) => {\n    return n!== 0;\n  });\n  return nums.reduce((a, b) => {\n    return a * b;\n  }, 0);\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid . You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid. You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length\n  const rowLen = grid[0].length\n  const path = []\n  let visited = [0, 0, 0, 0, 0]\n  let curr = [0, 0, 0, 0, 0]\n  let count = 0\n  const dfs = (i, j) => {\n    curr[i] = j\n    visited[i] = 1\n    if (rowLen - 1 === i && k > count) {\n      count = count + 1\n      path.push(curr)\n      curr = [0, 0, 0, 0, 0]\n      return\n    }\n    if (rowLen - 1 === i) {\n      return\n    }\n    const left = i - 1\n    const right = i + 1\n    const top = j - 1\n    const bottom = j + 1\n    if (visited[left] === 0 && visited[right] === 0) {\n      dfs(left, j)\n      dfs(right, j)\n    } else if (visited[left] === 0) {\n      dfs(right, j)\n    } else if (visited[right] === 0) {\n      dfs(left, j)\n    }\n    if (top < rowLen - 1) {\n      dfs(i, top)\n    }\n    if (bottom < rowLen - 1) {\n      dfs(i, bottom)\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < rowLen; j++) {\n      if (visited[i] === 0) {\n        dfs(i, j)\n      }\n    }\n  }\n  return path\n}\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const fib = (n) => {\n    if (n === 1) return [1];\n    if (n === 2) return [1, 2];\n    return [1, 2, 3].concat(fib(n - 1).concat(fib(n - 2).concat([3])));\n  };\n  return fib(n);\n};\n\ntri(3).forEach(v => console.log(v)); // [1, 3, 2, 8]<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 1) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconsole.log(digits(3456));\nconsole.log(digits(12345));\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]] ' ) ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]]') ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n\tconst arr = str.split('')\n\tconst len = arr.length\n\tconst nested = arr.find(item => item === '[' || item === ']')\n\treturn nested == -1 || nested === len - 1? false : true\n}\nconsole.log( isNested('[[]]') )\nconsole.log( isNested('[][]') )\nconsole.log( isNested('[][]') )\nconsole.log( isNested('[][]') )\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  return lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n};\n\nconst sumSquares2 = (lst) => {\n  return lst.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst sumSquares3 = (lst) => {\n  return lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n};\n\nconst sumSquares4 = (lst) => {\n  return lst.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst sumSquares5 = (lst) => {\n  return lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n};\n\nconst sumSquares6 = (lst) => {\n  return lst.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst sumSquares7 = (lst) => {\n  return lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n};\n\nconst sumSquares8 = (lst) => {\n  return lst.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst sumSquares9 = (lst) => {\n  return lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n};\n\nconst sumSquares10 = (lst) => {\n  return lst.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst sumSquares11 = (lst) => {\n  return lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n};\n\nconst sumSquares12 = (lst) => {\n  return lst.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst sumSquares13 = (lst) => {\n  return lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n};\n\nconst sumSquares14 = (lst) => {\n  return lst.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst sumSquares15 = (lst) => {\n  return lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n};\n\nconst sumSquares16 = (lst) => {\n  return lst.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst sumSquares17 = (lst) => {\n  return lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n};\n\nconst sumSquares18 = (lst) => {\n  return lst.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst sumSquares19 = (lst) => {\n  return lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n};\n\nconst sumSquares20 = (lst) => {\n  return lst.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst sumSquares21 = (lst) => {\n  return lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n};\n\nconst sumSquares22 = (lst) => {\n  return lst.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst sumSquares23 = (lst) => {\n  return lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n};\n\nconst sumSquares24 = (lst) => {\n  return lst.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst sumSquares25 = (lst) => {\n  return lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n};\n\nconst sumSquares26 = (lst) => {\n  return lst.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst sumSquares27 = (lst) => {\n  return lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n};\n\nconst sumSquares28 = (lst) => {\n  return lst.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst sumSquares29 = (lst) => {\n  return lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n};\n\nconst sumSquares30 = (lst) => {\n  return lst.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst sumSquares31 = (lst) => {\n  return lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n};\n\nconst sumSquares32 = (lst) => {\n  return lst.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst sumSquares33 = (lst) => {\n  return lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n};\n\nconst"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const firstChars = txt.split(\" \")\n  const firstCharsLength = firstChars.length\n  let firstCharsLengthValid = true\n  for (let i = 0; i < firstCharsLength; i++) {\n    if (isAlphabet(firstChars[i])) {\n      firstCharsLengthValid = false\n    }\n  }\n  return firstCharsLengthValid\n}\n\nconst isAlphabet = (txt) => {\n  const firstChars = txt.split(\"\")\n  const firstCharsLength = firstChars.length\n  const firstCharsLengthValid = firstChars.every(\n    (char) =>\n      (firstCharsLength === 1)\n       ? (\n          (char >= 'a' && char <= 'z')\n          || (char >= 'A' && char <= 'Z')\n          || (char >= '0' && char <= '9')\n        )\n        : (\n          (char >= 'a' && char <= 'z')\n          || (char >= 'A' && char <= 'Z')\n          || (char >= '0' && char <= '9')\n          || (char ==='')\n          || (char === '_')\n        )\n  )\n  return firstCharsLengthValid\n}\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = 0,\n    j = -1,\n    result = -1;\n  for (let x of arr) {\n    if (arr[i] < x && x < arr[j + 1]) {\n      j = i;\n    }\n    i++;\n  }\n  if (j!== -1) {\n    result = j + 1;\n  }\n  return result;\n};\n\nconsole.log(canArrange([1,2,4,3,5]));\nconsole.log(canArrange([1,2,3]));\nconsole.log(canArrange([1,2,3,4,5,6,7]));\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tup le (a , b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers , return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns a tup le (a, b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) return null\n  let largest = -Infinity\n  let smallest = Infinity\n  for (let elem of lst) {\n    if (elem > largest) largest = elem\n    if (elem < smallest) smallest = elem\n  }\n  return [largest, smallest]\n}\n\nconst largestSmallestIntegers_test = (test) => {\n  const actual = largestSmallestIntegers([2, 4, 1, 3, 5, 7])\n  const expected = largestSmallestIntegers([2, 4, 1, 3, 5, 7])\n  test.deepEqual(actual, expected)\n  test.end()\n}\n\nlargestSmallestIntegers_test.displayName = 'largestSmallestIntegers(<array>)'\nlargestSmallestIntegers_test.description = 'Test for largestSmallestIntegers'\n\nconst largestSmallestIntegers_test2 = (test) => {\n  const actual = largestSmallestIntegers([0])\n  const expected = largestSmallestIntegers([0])\n  test.deepEqual(actual, expected)\n  test.end()\n}\n\nlargestSmallestIntegers_test2.displayName = 'largestSmallestIntegers(<empty list>)'\nlargestSmallestIntegers_test2.description = 'Test for largestSmallestIntegers'\n\nconst largestSmallestIntegers_test3 = (test) => {\n  const actual = largestSmallestIntegers([])\n  const expected = largestSmallestIntegers([])\n  test.deepEqual(actual, expected)\n  test.end()\n}\n\nlargestSmallestIntegers_test3.displayName = 'largestSmallestIntegers(<empty list>)'\nlargestSmallestIntegers_test3.description = 'Test for largestSmallestIntegers'\n\nconst largestSmallestIntegers_test4 = (test) => {\n  const actual = largestSmallestIntegers(['a', 'b'])\n  const expected = largestSmallestIntegers(['a', 'b'])\n  test.deepEqual(actual, expected)\n  test.end()\n}\n\nlargestSmallestIntegers_test4.displayName = 'largestSmallestIntegers([<string>, <string>])'\nlargestSmallestIntegers_test4.description = 'Test for largestSmallestIntegers'\n\nlargestSmallestIntegers_test4.test = largestSmallestIntegers_test4\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or ,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n  if(typeof a!== \"string\") {\n    if(typeof b === \"string\") {\n      return b;\n    }\n    return null;\n  }\n  if(typeof b!== \"string\") {\n    if(typeof a === \"string\") {\n      return a;\n    }\n    return null;\n  }\n  const compare = a.toString().split(\",\");\n  const a = parseFloat(compare[0]);\n  const b = parseFloat(compare[1]);\n  if(a === b) {\n    return null;\n  }\n  return a > b? a : b;\n}\n\nconst compareTwo = (a,  b) => {\n  if(typeof a!== \"string\") {\n    if(typeof b === \"string\") {\n      return b;\n    }\n    return null;\n  }\n  if(typeof b!== \"string\") {\n    if(typeof a === \"string\") {\n      return a;\n    }\n    return null;\n  }\n  const compare = a.toString().split(\",\");\n  const a = parseFloat(compare[0]);\n  const b = parseFloat(compare[1]);\n  if(a === b) {\n    return null;\n  }\n  return a > b? a : b;\n}\n\nconst compareThree = (a,  b) => {\n  if(typeof a!== \"string\") {\n    if(typeof b === \"string\") {\n      return b;\n    }\n    return null;\n  }\n  if(typeof b!== \"string\") {\n    if(typeof a === \"string\") {\n      return a;\n    }\n    return null;\n  }\n  const compare = a.toString().split(\",\");\n  const a = parseFloat(compare[0]);\n  const b = parseFloat(compare[1]);\n  if(a === b) {\n    return null;\n  }\n  return a > b? a : b;\n}\n\nconst compareFour = (a,  b) => {\n  if(typeof a!== \"string\") {\n    if(typeof b === \"string\") {\n      return b;\n    }\n    return null;\n  }\n  if(typeof b!== \"string\") {\n    if(typeof a === \"string\") {\n      return a;\n    }\n    return null;\n  }\n  const compare = a.toString().split(\",\");\n  const a = parseFloat(compare[0]);\n  const b = parseFloat(compare[1]);\n  if(a === b) {\n    return null;\n  }\n  return a > b? a : b;\n}\n\nconst compareFive = (a,  b) => {\n  if(typeof a!== \"string\") {\n    if(typeof b === \"string\") {\n      return b;\n    }\n    return null;\n  }\n  if(typeof b!== \"string\") {\n    if(typeof a === \"string\") {\n      return a;\n    }\n    return null;\n  }\n  const compare = a.toString().split(\",\");\n  const a = parseFloat(compare[0]);\n  const b = parseFloat(compare[1]);\n  if(a === b) {\n    return null;\n  }\n  return a > b? a : b;\n}\n\nconst compareSix = (a,  b) => {\n  if(typeof a!== \"string\") {\n    if(typeof b === \"string\") {\n      return b;\n    }\n    return null;\n  }\n  if(typeof b!== \"string\") {\n    if(typeof a === \"string\") {\n      return a;\n    }\n    return null;\n  }\n  const compare = a.toString().split(\",\");\n  const a = parseFloat(compare[0]);\n  const b = parseFloat(compare[1]);\n  if(a === b) {\n    return null;\n  }\n  return a > b? a : b;\n}\n\nconst compareSeven = (a,  b) => {\n  if(typeof a!== \"string\") {\n    if(typeof b === \"string\") {\n      return b;\n    }\n    return null;\n  }\n  if(typeof b!== \"string\") {\n    if(typeof a === \"string\") {\n      return a;\n    }\n    return null;\n  }\n  const compare = a.toString().split(\",\");\n  const a = parseFloat(compare[0]);\n  const b = parseFloat(compare[1]);\n  if(a === b) {\n    return null;\n  }\n  return a > b? a : b;\n}\n\nconst compareEight = (a,  b) => {\n  if(typeof a!== \"string\") {\n    if(typeof b === \"string\") {\n      return b;\n    }\n    return null;\n  }\n  if(typeof b!== \"string\") {\n    if(typeof a === \"string\") {\n      return a;\n    }\n    return null;\n  }\n  const compare = a.toString().split(\",\");\n  const a = parseFloat(compare[0]);\n  const b = parseFloat(compare[1]);\n  if(a === b) {\n    return null;\n  }\n  return a > b? a : b;\n}\n\nconst compareNine = (a,  b) => {\n  if(typeof a!== \"string\") {\n    if(typeof b === \"string\") {\n      return b;\n    }\n    return"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n + (n + 1) / 2\n  const isEven = (sum % 2 === 0)\n  return isEven\n}\n\n// Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive odd numbers\n// Example\n// isEqualToSumOdd(4) == true\n// isEqualToSumOdd(6) == false\n// isEqualToSumOdd(8) == false\n// isEqualToSumOdd(9) == true\nconst isEqualToSumOdd = (n) => {\n  const sum = n + (n + 1) / 2\n  const isOdd = (sum % 2 === 1)\n  return isOdd\n}\n\n// Evaluate whether the given number n c an be  written asthe sum of exactly 5 positive even numbers\n// Example\n// isEqualToSumEven(4) == false\n// isEqualToSumEven(6) == false\n// isEqualToSumEven(8) == true\n// isEqualToSumEven(9) == true\nconst isEqualToSumEven = (n) => {\n  const sum = n + (n + 1) / 2\n  const isEven = (sum % 2 === 0)\n  return isEven\n}\n\n// Evaluate whether the given number n c an be  written asthe sum of exactly 5 positive odd numbers\n// Example\n// isEqualToSumOdd(4) == true\n// isEqualToSumOdd(6) == true\n// isEqualToSumOdd(8) == true\n// isEqualToSumOdd(9) == false\nconst isEqualToSumOdd = (n) => {\n  const sum = n + (n + 1) / 2\n  const isOdd = (sum % 2 === 1)\n  return isOdd\n}\n\n// Evaluate whether the given number n c an be  written asthe sum of exactly 6 positive even numbers\n// Example\n// isEqualToSumEven(4) == false\n// isEqualToSumEven(6) == true\n// isEqualToSumEven(8) == true\n// isEqualToSumEven(9) == false\nconst isEqualToSumEven = (n) => {\n  const sum = n + (n + 1) / 2\n  const isEven = (sum % 2 === 0)\n  return isEven\n}\n\n// Evaluate whether the given number n c an be  written asthe sum of exactly 6 positive odd numbers\n// Example\n// isEqualToSumOdd(4) == false\n// isEqualToSumOdd(6) == true\n// isEqualToSumOdd(8) == true\n// isEqualToSumOdd(9) == false\nconst isEqualToSumOdd = (n) => {\n  const sum = n + (n + 1) / 2\n  const isOdd = (sum % 2 === 1)\n  return isOdd\n}\n\n// Evaluate whether the given number n c an be  written asthe sum of exactly 7 positive even numbers\n// Example\n// isEqualToSumEven(4) == false\n// isEqualToSumEven(6) == false\n// isEqualToSumEven(8) == true\n// isEqualToSumEven(9) == true\nconst isEqualToSumEven = (n) => {\n  const sum = n + (n + 1) / 2\n  const isEven = (sum % 2 === 0)\n  return isEven\n}\n\n// Evaluate whether the given number n c an be  written asthe sum of exactly 7 positive odd numbers\n// Example\n// isEqualToSumOdd(4) == true\n// isEqualToSumOdd(6) == true\n// isEqualToSumOdd(8) == true\n// isEqualToSumOdd(9) == true\nconst isEqualToSumOdd = (n) => {\n  const sum = n + (n + 1) / 2\n  const isOdd = (sum % 2 === 1)\n  return isOdd\n}\n\n// Evaluate whether the given number n c an be  written asthe sum of exactly 8 positive even numbers\n// Example\n// isEqualToSumEven(4) == false\n// isEqualToSumEven(6) == false\n// isEqualToSumEven(8) == true\n// isEqualToSumEven(9) == false\nconst isEqualToSumEven = (n) => {\n  const sum = n + (n + 1) / 2\n  const isEven = (sum % 2 === 0)\n  return isEven\n}\n\n// Evaluate whether the given number n c an be  written asthe sum of exactly 8 positive odd numbers\n// Example\n// isEqualToSumOdd(4) == true\n// isEqualToSumOdd(6) == true\n// isEqualToSumOdd(8) == true\n// isEqualToSumOdd(9) == false\nconst isEqualToSumOdd = (n) => {\n  const sum = n + (n + 1) / 2\n  const isOdd = (sum % 2 === 1)\n  return isOdd\n}\n\n// Evaluate whether the given number n c an be  written asthe sum of exactly 9 positive even numbers\n// Example\n// isEqualToSumEven(4) == false\n// isEqualToSumEven(6) == false\n// isEqualToSumEven(8) == false\n// isEqualToSumEven(9) == true\nconst isEqualToSumEven = (n) => {\n  const sum = n + (n + 1) / 2\n  const isEven = (sum % 2 === 0)\n  return isEven\n}\n\n// Evaluate whether the given number n c an be  written asthe sum of exactly 9 positive odd numbers\n// Example\n// isEqualToSumOdd(4) == true\n// isEqualToSumOdd(6) == true\n// isEqualToSumOdd(8) == true\n// isEqualToSumOdd(9) == true\nconst isEqualToSumOdd = (n) => {\n  const sum = n + (n + 1) / 2\n  const"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  //TODO : Use a memoization to cache the results\n  if (n === 0) {\n    return 1;\n  }\n  const result = n * specialFactorial(n-1);\n  return result;\n};\n\nconsole.log(specialFactorial(4));\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n    text = text.replace(/\\s{2,}/g, '_');\n    return text.replace(/\\s{1,}/g, '_');\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if astring has more than 2 consecutive underscores,  \n  the n  replac e all con secutive underscores with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\" Example_2\") == \"Example 2\"\n  fixSpaces(\" Example_3\") == \"Example 3\"\n  */\nconst fixUnderscores = (text) => {\n    text = text.replace(/_/g,'');\n    return text.replace(/\\_\\_/g, '_');\n}\n\nconst splitByPunctuation = (text) => {\n    let p = {\n        \".\": [],\n        \"@\": [],\n        \"#\": [],\n        \"$\": [],\n        \"&\": [],\n        \"%\": [],\n        \"^\": [],\n        \"*\": [],\n        \"+\": [],\n        \"=\": [],\n        \"~\": [],\n        \"{\": [],\n        \"}\": [],\n        \"_\": [],\n        \"\\\\\": [],\n        \"|\": []\n    }\n    return text.split(/([.|\\d|\\w])/);\n}\n\n/*\n Given a string text, replace all punctuation with an underscore. \n   \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example.1\") == \"Example_1\"\n  fixSpaces(\" Example.2\") == \"Example_2\"\n  fixSpaces(\" Example.3\") == \"Example_3\"\n  */\nconst fixPunctuation = (text) => {\n    return text.replace(/[.,#&%^*+=\\\\~{}_]/g, '_');\n}\n\nconst cleanText = (text) => {\n    return fixSpaces(fixUnderscores(fixPunctuation(text)));\n}\n\nexport {\n    splitByPunctuation,\n    fixPunctuation,\n    fixSpaces,\n    fixUnderscores,\n    cleanText\n}\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file 's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d ' A'-'Z') .  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d'A'-'Z').  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_is_valid = (file_name.match(/[0-9a-zA-Z]/))\n  if (file_name_is_valid) {\n    if (file_name.indexOf(\".\") === -1) {\n      return 'N o'\n    }\n    const file_name_contains_dot = (file_name.indexOf(\".\")!== -1)\n    const file_name_start_with_alphapet = (file_name.match(/[a-zA-Z]/))\n    const file_name_end_with_extension = (file_name.match(/\\.[a-zA-Z]{2,3}$/))\n    const file_name_not_start_with_digit = (file_name.match(/[0-9]/))\n    if (file_name_contains_dot && file_name_start_with_alphapet && file_name_end_with_extension && file_name_not_start_with_digit) {\n      return 'Yes'\n    }\n  }\n  return 'No'\n}\n\nconst file_is_valid = (file_name) => {\n  const file_name_is_valid = fileNameCheck(file_name)\n  if (file_name_is_valid === 'N o') {\n    return false\n  }\n  return true\n}\n\nconst file_is_valid_ex = (file_name) => {\n  const file_name_is_valid = fileNameCheck(file_name)\n  if (file_name_is_valid === 'N o') {\n    return false\n  }\n  return true\n}\n\nconst checkFileName = (file_name) => {\n  if (!file_is_valid(file_name)) {\n    return false\n  }\n  return true\n}\n\nconst checkFileNameEx = (file_name) => {\n  if (!file_is_valid_ex(file_name)) {\n    return false\n  }\n  return true\n}\n\nconst checkFileName = (file_name) => {\n  if (!file_is_valid(file_name)) {\n    return false\n  }\n  return true\n}\n\nconst checkFileNameEx = (file_name) => {\n  if (!file_is_valid_ex(file_name)) {\n    return false\n  }\n  return true\n}\n\nmodule.exports = {\n  checkFileName,\n  checkFileNameEx\n}\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr, i) => {\n    if (i % 3 === 0) {\n      return prev + curr * curr;\n    }\n    if (i % 4 === 0) {\n      return prev + curr * curr * curr;\n    }\n    return prev + curr;\n  }, 0);\n};\n\nconsole.log(sumSquares([1, 2, 3])); // 6\nconsole.log(sumSquares([])); // 0\nconsole.log(sumSquares([-1, -5, 2, -1, -5])); // -126<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    let words = [];\n    let word = '';\n    let i = 0;\n    let wordLength = 0;\n\n    while (i < sentence.length) {\n        if (sentence.charAt(i) ==='') {\n            words.push(word);\n            word = '';\n            wordLength = 0;\n        } else {\n            word += sentence.charAt(i);\n            wordLength++;\n        }\n        i++;\n    }\n    words.push(word);\n\n    return words;\n};\n\nconst solution = (sentence) => {\n    let words = wordsInSentence(sentence);\n\n    let newSentence = '';\n    let order = 0;\n\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        if (order === 0) {\n            newSentence += word;\n        } else {\n            newSentence += word;\n            newSentence +='';\n        }\n\n        order++;\n    }\n    return newSentence;\n};\n\nlet sentence = 'This is a test';\nconsole.log(solution(sentence));<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format , \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format, \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n  var t = x + n;\n  var a = t;\n  var b = x;\n  var c = n;\n  while (b < 0) {\n    b = b * -1;\n    a = a - b;\n  }\n  while (c < 0) {\n    c = c * -1;\n    a = a - c;\n  }\n  if (a === 0) {\n    return false;\n  }\n  var x = a / b;\n  var n = c / b;\n  return x === n? true : false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits .\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const array = nums.slice();\n  const sorted = array.sort((a, b) => {\n    return a - b;\n  });\n\n  const sum = sorted.reduce((prev, current, index) => {\n    return prev + (Math.pow(10, index) - 1) * current;\n  }, 0);\n\n  const sortedByIndex = sorted.map(item => {\n    return {\n      index: index,\n      points: sum - item\n    };\n  });\n\n  return sortedByIndex.sort((a, b) => {\n    return a.index - b.index;\n  });\n};\n\nconst points = [3, 4, 7, 8, 9, 11, 13, 17, 20];\n\nconsole.log(orderByPoints(points));<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n    const len = nums.length;\n    const count = 0;\n    for (let i = 0; i < len; i++) {\n        let a = nums[i];\n        let b = parseInt(a, 10);\n        if (b % 2 === 1 && b % 10 === 1) {\n            count++;\n        }\n    }\n    return count;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k ,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n    let res = 0\n    for (let i = 1; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            let sum = i * i + j * j - i - j + 1\n            if (sum % 3 === 0) {\n                res = Math.max(res, sum)\n            }\n        }\n    }\n    return res\n}\n\nconst getMaxTriples2 = (n) => {\n    let res = 0\n    for (let i = 1; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            let sum = i * i + j * j - i - j + 1\n            if (sum % 3 === 0 && i * j > sum) {\n                res = Math.max(res, sum)\n            }\n        }\n    }\n    return res\n}\n\nconst getMaxTriples3 = (n) => {\n    let res = 0\n    for (let i = 1; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            let sum = i * i + j * j - i - j + 1\n            if (sum % 3 === 0 && i * j > sum && i + j > sum) {\n                res = Math.max(res, sum)\n            }\n        }\n    }\n    return res\n}\n\nconst getMaxTriples4 = (n) => {\n    let res = 0\n    for (let i = 1; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            let sum = i * i + j * j - i - j + 1\n            if (sum % 3 === 0 && i * j > sum && i + j > sum && i + j + i > sum) {\n                res = Math.max(res, sum)\n            }\n        }\n    }\n    return res\n}\n\nconst getMaxTriples5 = (n) => {\n    let res = 0\n    for (let i = 1; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            let sum = i * i + j * j - i - j + 1\n            if (sum % 3 === 0 && i * j > sum && i + j > sum && i + j + i > sum) {\n                res = Math.max(res, sum)\n            }\n        }\n    }\n    return res\n}\n\nconst getMaxTriples6 = (n) => {\n    let res = 0\n    for (let i = 1; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            let sum = i * i + j * j - i - j + 1\n            if (sum % 3 === 0 && i * j > sum && i + j > sum && i + j + i > sum) {\n                res = Math.max(res, sum)\n            }\n        }\n    }\n    return res\n}\n\nconst getMaxTriples7 = (n) => {\n    let res = 0\n    for (let i = 1; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            let sum = i * i + j * j - i - j + 1\n            if (sum % 3 === 0 && i * j > sum && i + j > sum && i + j + i > sum) {\n                res = Math.max(res, sum)\n            }\n        }\n    }\n    return res\n}\n\nconst getMaxTriples8 = (n) => {\n    let res = 0\n    for (let i = 1; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            let sum = i * i + j * j - i - j + 1\n            if (sum % 3 === 0 && i * j > sum && i + j > sum && i + j + i > sum) {\n                res = Math.max(res, sum)\n            }\n        }\n    }\n    return res\n}\n\nconst getMaxTriples9 = (n) => {\n    let res = 0\n    for (let i = 1; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            let sum = i * i + j * j - i - j + 1\n            if (sum % 3 === 0 && i * j > sum && i + j > sum && i + j + i > sum) {\n                res = Math.max(res, sum)\n            }\n        }\n    }\n    return res\n}\n\nconst getMaxTriples10 = (n) => {\n    let res = 0\n    for (let i = 1; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            let sum = i * i + j * j - i - j + 1\n            if (sum % 3 === 0 && i * j > sum && i + j > sum && i + j + i > sum) {\n                res = Math.max(res, sum)\n            }\n        }\n    }\n    return res\n}\n\nconst getMaxTriples11 = (n) => {\n    let res = 0\n    for (let i = 1; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            let sum = i * i + j * j - i - j + 1\n            if (sum % 3 === 0 && i * j > sum && i + j > sum && i + j + i > sum) {\n                res = Math.max("}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es .\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n    let res = []\n    let res1 = []\n    let res2 = []\n    let res3 = []\n    let res4 = []\n    let res5 = []\n    let res6 = []\n    let res7 = []\n    let res8 = []\n    let res9 = []\n    let res10 = []\n    let res11 = []\n    let res12 = []\n    let res13 = []\n    let res14 = []\n    let res15 = []\n    let res16 = []\n    let res17 = []\n    let res18 = []\n    let res19 = []\n    let res20 = []\n    let res21 = []\n    let res22 = []\n    let res23 = []\n    let res24 = []\n    let res25 = []\n    let res26 = []\n    let res27 = []\n    let res28 = []\n    let res29 = []\n    let res30 = []\n    let res31 = []\n    let res32 = []\n    let res33 = []\n    let res34 = []\n    let res35 = []\n    let res36 = []\n    let res37 = []\n    let res38 = []\n    let res39 = []\n    let res40 = []\n    let res41 = []\n    let res42 = []\n    let res43 = []\n    let res44 = []\n    let res45 = []\n    let res46 = []\n    let res47 = []\n    let res48 = []\n    let res49 = []\n    let res50 = []\n    let res51 = []\n    let res52 = []\n    let res53 = []\n    let res54 = []\n    let res55 = []\n    let res56 = []\n    let res57 = []\n    let res58 = []\n    let res59 = []\n    let res60 = []\n    let res61 = []\n    let res62 = []\n    let res63 = []\n    let res64 = []\n    let res65 = []\n    let res66 = []\n    let res67 = []\n    let res68 = []\n    let res69 = []\n    let res70 = []\n    let res71 = []\n    let res72 = []\n    let res73 = []\n    let res74 = []\n    let res75 = []\n    let res76 = []\n    let res77 = []\n    let res78 = []\n    let res79 = []\n    let res80 = []\n    let res81 = []\n    let res82 = []\n    let res83 = []\n    let res84 = []\n    let res85 = []\n    let res86 = []\n    let res87 = []\n    let res88 = []\n    let res89 = []\n    let res90 = []\n    let res91 = []\n    let res92 = []\n    let res93 = []\n    let res94 = []\n    let res95 = []\n    let res96 = []\n    let res97 = []\n    let res98 = []\n    let res99 = []\n    let res100 = []\n    let res101 = []\n    let res102 = []\n    let res103 = []\n    let res104 = []\n    let res105 = []\n    let res106 = []\n    let res107 = []\n    let res108 = []\n    let res109 = []\n    let res110 = []\n    let res111 = []\n    let res112 = []\n    let res113 = []\n    let res114 = []\n    let res115 = []\n    let res116 = []\n    let res117 = []\n    let res118 = []\n    let res119 = []\n    let res120 = []\n    let res121 = []\n    let res122 = []\n    let res123 = []\n    let res124 = []\n    let res125 = []\n    let res126 = []\n    let res127 = []\n    let res128 = []\n    let res129 = []\n    let res130 = []\n    let res131 = []\n    let res132 = []\n    let res133 = []\n    let res134 = []\n    let res135 = []\n    let res136 = []\n    let res137 = []\n    let res138 = []\n    let res139 = []\n    let res140 = []\n    let res141 = []\n    let res142 = []\n    let res143 = []\n    let res144 = []\n    let res145 = []\n    let res146 = []\n    let res147 = []\n    let res148 = []\n    let res149 = []\n    let res150 = []\n    let res151 = []\n    let res152 = []\n    let res153 = []\n    let res154 = []\n    let res155 = []\n    let res156 = []\n    let res157 = []\n    let res158 = []\n    let res159 = []\n    let res160 = []\n    let res161 = []\n    let res162 = []\n    let res163 = []\n    let res164 = []\n    let res165 = []\n    let res166 = []\n    let res167 = []\n    let res168 = []\n    let res169 = []\n    let res170 = []\n    let res171 = []\n    let res172 = []\n    let res173 = []\n    let res174 = []\n    let res175 = []\n    let res176 = []\n    let res177 = []\n    let res178 = []\n    let res179 = []\n    let res180 = []\n    let res181 = []\n    let res182 = []"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n    lst.sort((a, b) => {\n        if (a.length!== b.length) {\n            return a.length - b.length\n        }\n        return a.localeCompare(b)\n    })\n    const [first, second] = [...lst]\n    const sum = first + second\n    return [...lst, sum]\n}\n\n// assert sortedListSum([2, 1, 3]) === [2, 3, 1]\n// assert sortedListSum([2, 1, 3]) === [2, 1, 3]\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise .\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if(isPrime(n)){\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime = n => {\n  let x = 2;\n  while(x < n){\n    if(n % x === 0){\n      return false;\n    }\n    x += 1;\n  }\n  return true;\n};\n\nconst primeFactors = primeNumbers.map(prime => prime);\nconst primeNumbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];\n\n/*\n  Examples:\n  for primeFactors(3) == [3]\n  for primeFactors(7) == [7, 3]\n  for primeFactors(29) == [29, 3, 7]\n  for primeFactors(11) == [11, 3, 7, 2, 5, 3]\n  for primeFactors(17) == [17, 7, 3, 5, 2, 11, 3]\n  \n*/\nconst primeFactors = primeNumbers.map(prime => prime);\n\n/*\n  Examples:\n  for primeNumbers.filter(prime => isPrime(prime)) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n*/\nconst primeNumbers = primeNumbers.filter(prime => isPrime(prime));\n\n/*\n  Examples:\n  for primeNumbers.reduce((previousPrimeNumbers, currentPrimeNumber) => previousPrimeNumbers + currentPrimeNumber, 0) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853,"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers .\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n  if (lst.length === 0) return 0;\n  return Math.pow(lst.reduce((a, b) => {\n    if (b % 2 === 1) return a + b;\n    return a;\n  }, 0), 2);\n};\n\nexport { ife, doubleTheD, doubleTheDifference }\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0 ,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let diff = 0\n  let array = []\n  let len = game.length\n  let guessLen = guess.length\n  for (let i = 0; i < len; i++) {\n    if (game[i] === guess[i]) {\n      diff = 0\n      array.push(0)\n      continue\n    } else {\n      diff = game[i] - guess[i]\n      array.push(diff)\n    }\n  }\n  return array\n}\n\n//  This is just a test to see if the algorithm works.\n//  It is not meant to be a good algorithm.\nconst compare2 = (game, guess) => {\n  let diff = 0\n  let array = []\n  let len = game.length\n  let guessLen = guess.length\n  for (let i = 0; i < len; i++) {\n    if (game[i] === guess[i]) {\n      diff = 0\n      array.push(0)\n      continue\n    } else {\n      diff = game[i] - guess[i]\n      array.push(diff)\n    }\n  }\n  return array\n}\n\nmodule.exports = compare\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName .  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName.  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const ca = class_name.split('.').map(e => e.charAt(0).toLowerCase()).reduce((a, b) => {\n    return a + b\n  }, '');\n  const sm = extensions.map(e => e.toLowerCase()).reduce((a, b) => {\n    return a + b\n  }, '');\n  const cap = ca.length - sm.length;\n  const strength = cap - sm.length;\n  const extension = extensions[0];\n  const name = extension.substr(cap + 1);\n  return `${class_name}.${name}`;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n  const n = a.length\n  const m = b.length\n  if (n!== m) return false\n  for (let i = 0; i < n; i++) {\n    if (a[i] === b[i]) {\n      if (a.length > n) {\n        if (n === 2 && a[n - 1] === b[0] && b[1] === a[0]) return true\n        if (n > 2 && a[n - 2] === b[0] && a[n - 1] === b[1]) return true\n        if (n > 3 && a[n - 3] === b[0] && a[n - 2] === b[1] && b[2] === a[0]) return true\n        if (n > 3 && a[n - 3] === b[0] && a[n - 2] === b[1] && b[2] === a[1]) return true\n      }\n      if (n > 1 && a[n - 1] === b[n - 1]) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nconst check= (a, b) => {\n  let r = false\n  let n = a.length\n  if (n!== b.length) return false\n  for (let i = 0; i < n; i++) {\n    if (a[i] === b[i]) {\n      if (n === 2 && a[n - 1] === b[0] && b[1] === a[0]) return true\n      if (n > 2 && a[n - 2] === b[0] && a[n - 1] === b[1]) return true\n      if (n > 3 && a[n - 3] === b[0] && a[n - 2] === b[1] && b[2] === a[0]) return true\n      if (n > 3 && a[n - 3] === b[0] && a[n - 2] === b[1] && b[2] === a[1]) return true\n    }\n  }\n  return r\n}\n\nconst cycpa = (a, b) => {\n  const n = a.length\n  const m = b.length\n  if (n!== m) return false\n  for (let i = 0; i < n; i++) {\n    if (a[i] === b[i]) {\n      if (n === 2 && a[n - 1] === b[0] && b[1] === a[0]) return true\n      if (n > 2 && a[n - 2] === b[0] && a[n - 1] === b[1]) return true\n      if (n > 3 && a[n - 3] === b[0] && a[n - 2] === b[1] && b[2] === a[0]) return true\n      if (n > 3 && a[n - 3] === b[0] && a[n - 2] === b[1] && b[2] === a[1]) return true\n    }\n  }\n  return false\n}\n\nconst nCheck = (a, b) => {\n  const n = a.length\n  const m = b.length\n  if (n!== m) return false\n  for (let i = 0; i < n; i++) {\n    if (a[i] === b[i]) {\n      if (n === 2 && a[n - 1] === b[0] && b[1] === a[0]) return true\n      if (n > 2 && a[n - 2] === b[0] && a[n - 1] === b[1]) return true\n      if (n > 3 && a[n - 3] === b[0] && a[n - 2] === b[1] && b[2] === a[0]) return true\n      if (n > 3 && a[n - 3] === b[0] && a[n - 2] === b[1] && b[2] === a[1]) return true\n    }\n  }\n  return false\n}\n\nconst rCheck = (a, b) => {\n  const n = a.length\n  const m = b.length\n  if (n!== m) return false\n  for (let i = 0; i < n; i++) {\n    if (a[i] === b[i]) {\n      if (n === 2 && a[0] === b[1] && b[0] === a[1]) return true\n      if (n > 2 && a[n - 2] === b[1] && a[n - 1] === b[0]) return true\n      if (n > 3 && a[n - 3] === b[1] && a[n - 2] === b[0] && b[2] === a[1]) return true\n      if (n > 3 && a[n - 3] === b[1] && a[n - 2] === b[0] && b[2] === a[0]) return true\n    }\n  }\n  return false\n}\n\nconst main = () => {\n  console.log(cycpatternCheck(\"wha ssup\",\"psus\"))\n  console.log(cycpatternCheck(\"efef\",\"efee\"))\n  console.log(cycpatternCheck(\"himenss\",\"s imen\"))\n  console.log(cycpatternCheck(\"a bcd\",\"abd\"))\n  console.log(cycpatternCheck(\"a bcd\",\"baa\"))\n  console.log(cycpatternCheck(\"abab\",\"baa\"))\n  console.log(cycpatternCheck(\"efef\",\"eeff\"))\n  console.log(cycpatternCheck(\"efef\",\"eeff\"))\n  console.log(cycpatternCheck(\"abcdef\",\"abcd\"))\n  console.log(cycpatternCheck(\"abcdef\",\"ef\"))\n  console.log"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let even = 0;\n    let odd = 0;\n\n    while (num!== 0) {\n        if (num % 2 === 0) {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        num = Math.floor(num / 10);\n    }\n\n    return (even, odd);\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const n = number;\n  const result = [];\n  while (n) {\n    let count = n % 10;\n    n = n / 10;\n    if (count == 4 || count == 9) {\n      result.unshift(count.toString());\n    }\n  }\n  return result.join('');\n};\n\nmodule.exports = intToMiniRoman;\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle , fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a < b + c && b < c + a && c < a + b) {\n    return true;\n  }\n  return false;\n};\n\nconsole.log(rightAngleTriangle(3, 4, 5));\nconsole.log(rightAngleTriangle(1, 2, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\" ,\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\",\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n    const wordsLength = words.length;\n    const map = new Map();\n    let index = 0;\n    let max = -Infinity;\n    for (let i = 0; i < wordsLength; i++) {\n        if (map.get(words[i])) {\n            if (index === i) {\n                index++;\n            }\n            continue;\n        }\n        map.set(words[i], true);\n        if (max < index) {\n            max = index;\n        }\n        index++;\n    }\n    return words[max];\n}\n\n//console.log(findMax([\"na me\", \"of\", \"string\"]))\n\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n// console.log(findMax([\"na me\", \"of\", \"string\"])); //\"na me\"\n"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    return number > need?\n        (number - need) + remaining :\n        (remaining - number) + need;\n}\n\nexport default eat;\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n    let operatorLength = operator.length\n    let operandLength = operand.length\n    let result = 0\n\n    for (let i = 0; i < operatorLength; i += 1) {\n        let operatorValue = operator[i]\n        let operandValue = operand[i]\n        let operatorResult = operatorValue * operandValue\n\n        if (operatorResult < 0) {\n            throw new Error(\"operatorResult < 0\")\n        }\n        result += operatorResult\n    }\n\n    return result\n}\n\nconst getOperator = (operand) => {\n    let operandLength = operand.length\n    let operandList = operand.slice(0, operandLength - 1)\n    let operatorList = operand.slice(operandLength - 1, operandLength)\n    return [operandList, operatorList]\n}\n\nconst evaluateOperator = (operandList, operatorList) => {\n    let operandArray = operandList.slice(0)\n    let operatorArray = operatorList.slice(0)\n    let operandArrayLength = operandArray.length\n    let operatorArrayLength = operatorArray.length\n    let result = 0\n\n    while (operandArrayLength > 0 && operatorArrayLength > 0) {\n        let operatorValue = operatorArray[0]\n        let operandValue = operandArray[0]\n        let operatorResult = operatorValue * operandValue\n\n        if (operatorResult < 0) {\n            throw new Error(\"operatorResult < 0\")\n        }\n\n        result += operatorResult\n        operatorArray.shift()\n        operandArray.shift()\n    }\n\n    return result\n}\n\nconst doAlgebraEvaluation = (operandList, operatorList) => {\n    let [operandArray, operatorArray] = getOperator(operandList)\n    let result = evaluateOperator(operandArray, operatorArray)\n    return result\n}\n\nconst test = {\n    doAlgebra: doAlgebra,\n    getOperator: getOperator,\n    evaluateOperator: evaluateOperator,\n    doAlgebraEvaluation: doAlgebraEvaluation,\n}\n\nconst operandList = [2, 3, 4, 5]\nconst operatorList = ['+', '-', '*', '//', '**']\n\nconst result = test.doAlgebraEvaluation(operandList, operatorList)\nconsole.log(`${operandList} + ${operatorList} = ${result}`)<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const len = s.length\n  let i = 0\n  let j = len - 1\n  let t = ''\n  while (i < j) {\n    if (s[i].toUpperCase() < s[j].toUpperCase()) {\n      t += s[i].toLowerCase()\n      i++\n    } else if (s[i].toLowerCase() > s[j].toUpperCase()) {\n      t += s[j].toLowerCase()\n      j--\n    } else {\n      t += s[i]\n      i++\n      j--\n    }\n  }\n  return t + s[i].toUpperCase() + s[j].toLowerCase()\n}\n\nconst s = 'aBc'\nconsole.log(solve(s))\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  const hash = md5.digest('hex');\n  return hash;\n};\n\n/**\n  Given a string 'text', return its sha1 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'd9a8a3a1a3b5ae5a3a0c5b9b8d0f2f0c5a9d1e0f3e1f4e2f5f6'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  const sha1 = crypto.createHash('sha1');\n  sha1.update(text);\n  const hash = sha1.digest('hex');\n  return hash;\n};\n\n/**\n  Given a string 'text', return its sha256 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'b9b5f9e4a5d1af27af4e9ae23a3a0b9e6e8b4d9e7d0a5960b17c7f4a0f25'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  const sha256 = crypto.createHash('sha256');\n  sha256.update(text);\n  const hash = sha256.digest('hex');\n  return hash;\n};\n\nmodule.exports = {\n  stringToMd5,\n  stringToSha1,\n  stringToSha256,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    return []\n  }\n  const result = []\n  let sum = 0\n  for (let i = a; i <= b; i++) {\n    sum += i\n    result.push(sum)\n  }\n  return result\n}\n\nconst isPrime = (num) => {\n  let i = 2\n  while (i * i <= num) {\n    if (num % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst getPrime = (n) => {\n  let prime = 1\n  while (prime * prime <= n) {\n    if (isPrime(prime)) {\n      return prime\n    }\n    prime += 1\n  }\n  return n\n}\n\nconst isPalindrome = (num) => {\n  let reversed = ''\n  while (num > 0) {\n    reversed += num % 10\n    num = num / 10\n  }\n  return num === reversed\n}\n\nconst main = (n) => {\n  let nn = n\n  let num = 1\n  let result = []\n  while (num <= nn) {\n    if (isPrime(num)) {\n      result.push(num)\n    }\n    num += 1\n  }\n  return result\n}\n\nconst test = () => {\n  let a = 5\n  let b = 10\n  let r = generateIntegers(a, b)\n  console.log(r)\n  console.log(main(a))\n  console.log(main(b))\n  console.log(r.length)\n  console.log(isPrime(a))\n  console.log(isPrime(b))\n}\n\nconst tests = () => {\n  test()\n}\n\ntests()\n<|endoftext|>"}
