{"task_id": "JavaScript/0", "prompt": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  return _.every(numbers, number => {\n    const prevNumber = numbers[numbers.length - 1]\n    return Math.abs(prevNumber - number) > threshold\n  })\n}\n\n/**\n * Takes a list of numbers, removes those that are less than\n * the minimum number, and returns the remaining numbers.\n * @param {Array} numbers\n * @param {Number} min\n * @returns {Array}\n */\nconst removeMinNumbers = (numbers, min) => {\n  return _.filter(numbers, number => number > min)\n}\n\n/**\n * Calculates the average number of elements in a list.\n * @param {Array} numbers\n * @returns {Number}\n */\nconst calculateAverage = (numbers) => {\n  return _.reduce(numbers, (acc, num) => acc + num, 0) / numbers.length\n}\n\n/**\n * Finds the minimum number in a list of numbers.\n * @param {Array} numbers\n * @returns {Number}\n */\nconst findMin = (numbers) => {\n  return _.min(numbers)\n}\n\nmodule.exports = {\n  findMin,\n  hasCloseElements,\n  removeMinNumbers,\n  calculateAverage\n}\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  // Use a stack to store the parenthesis levels\n  const stack = [];\n  // Store the result\n  const result = [];\n  // Start with the first parenthesis\n  let cur = 1;\n  // Iterate over all the parenthesis\n  while (paren_string.charAt(cur)!== ')') {\n    // If it is not a parenthesis, then add it to the result\n    if (paren_string.charAt(cur)!== '(') {\n      result.push(paren_string.charAt(cur));\n    }\n    // If it is a parenthesis, then push it on the stack\n    else {\n      stack.push(paren_string.charAt(cur));\n    }\n    // Increment the index\n    cur++;\n  }\n  // Push the stack on to the result\n  result.push(stack.reverse());\n  // Return the result\n  return result;\n};\n\nmodule.exports = separateParenGroups;\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return {\n    int: intPart,\n    dec: decPart\n  };\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(0.000001)\n  0.01\n  */\nconst truncateDecimal = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return {\n    int: intPart,\n    dec: decPart\n  };\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateDecimal(0.0000001)\n  0.001\n  */\nconst truncateDecimal2 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return {\n    int: intPart,\n    dec: decPart\n  };\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateDecimal(0.000001)\n  0.001\n  */\nconst truncateDecimal3 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return {\n    int: intPart,\n    dec: decPart\n  };\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateDecimal(0.000005)\n  0.05\n  */\nconst truncateDecimal4 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return {\n    int: intPart,\n    dec: decPart\n  };\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateDecimal(0.000005)\n  0.05\n  */\nconst truncateDecimal5 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return {\n    int: intPart,\n    dec: decPart\n  };\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateDecimal(0.000005)\n  0.05\n  */\nconst truncateDecimal6 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return {\n    int: intPart,\n    dec: decPart\n  };\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateDecimal(0.000005)\n  0.05\n  */\nconst truncateDecimal7 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return {\n    int: intPart,\n    dec: decPart\n  };\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateDecimal(0.000005)\n  0.05\n  */\nconst truncateDecimal8 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return {\n    int: intPart,\n    dec: decPart\n  };\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateDecimal(0.000005)\n  0.05\n  */\nconst truncateDecimal9 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return {\n    int: intPart,\n    dec: decPart\n  };\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateDecimal(0.000005)\n  0.05\n  */\nconst truncateDecimal10 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return {\n    int: intPart,\n    dec: decPart\n  };\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateDecimal(0.000005)\n  0.05\n  */\nconst truncateDecimal11 = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return {\n    int: intPart,\n    dec: decPart\n"}
{"task_id": "JavaScript/3", "prompt": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n    const result = [];\n    let balance = 0;\n    operations.forEach(op => {\n        balance += op;\n        if (balance < 0) {\n            result.push(true);\n        }\n        balance = balance % 10;\n    });\n    if (balance === 0) {\n        result.push(true);\n    }\n    return result;\n};\n\nexport default belowZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  return (numbers.map((x) => Math.abs(x - Math.mean(numbers))).reduce((prev, curr) => prev + curr, 0) / numbers.length);\n};\n\n/**\n  * @param {number} x\n  * @returns {boolean}\n  * @description - Returns true if x is prime, else returns false\n  */\nconst isPrime = (x) => {\n  if (x === 1) return false;\n  for (let i = 2; i < x; i++) {\n    if (x % i === 0) return false;\n  }\n  return true;\n};\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @returns {number}\n  * @description - Returns the greatest common divisor of x and y\n  */\nconst gcd = (x, y) => {\n  if (y === 0) return x;\n  return gcd(y, x % y);\n};\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @returns {number}\n  * @description - Returns the least common multiple of x and y\n  */\nconst lcm = (x, y) => {\n  return (x / gcd(x, y) * y);\n};\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @returns {number}\n  * @description - Calculates the least number of steps to achieve the target distance\n  */\nconst steps = (x, y) => {\n  const gcd = gcd(x, y);\n  return Math.ceil(Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) - Math.pow(gcd, 2)));\n};\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @returns {number}\n  * @description - Returns the sum of x and y\n  */\nconst sum = (x, y) => {\n  return x + y;\n};\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @returns {number}\n  * @description - Returns the difference of x and y\n  */\nconst difference = (x, y) => {\n  return x - y;\n};\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @returns {number}\n  * @description - Returns the product of x and y\n  */\nconst product = (x, y) => {\n  return x * y;\n};\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @returns {number}\n  * @description - Returns the quotient of x and y\n  */\nconst quotient = (x, y) => {\n  return x / y;\n};\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @returns {number}\n  * @description - Returns the remainder of x and y\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\nmodule.exports = {\n  meanAbsoluteDeviation,\n  isPrime,\n  gcd,\n  lcm,\n  steps,\n  sum,\n  difference,\n  product,\n  quotient,\n  remainder\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) return [];\n\n  const result = [];\n  let i = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i++]);\n    result.push(delimeter);\n  }\n  result.push(numbers[i]);\n\n  return result;\n};\n\nexport { intersperse };\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  if(paren_string.length === 0) return [0,0];\n  let stack = [0];\n  let max = 0;\n  let i = 0;\n  while(paren_string[i]!== ')'){\n    if(paren_string[i] === '(') stack.push(0);\n    if(paren_string[i] === ')'){\n      if(stack.length > 0){\n        stack.pop();\n        if(stack[stack.length-1] > max){\n          max = stack[stack.length-1];\n        }\n      }\n    }\n    i++;\n  }\n  return [max, stack.length];\n};\n\nexport {parseNestedParens};<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) >= 0);\n};\n\n/*\n  * Filter an input list of strings only for ones that are not empty\n  >>> filterEmpty([])\n  []\n  >>> filterEmpty(['abc', 'bacd', 'cde', 'array'])\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterEmpty = (strings) => {\n  return strings.filter(str => str.trim().length > 0);\n};\n\n/*\n  * Filter an input list of strings only for ones that contain digits\n  >>> filterContainsDigits([])\n  []\n  >>> filterContainsDigits(['abc', 'bacd', 'cde', 'array'])\n  ['abc', 'bacd', 'array']\n  */\nconst filterContainsDigits = (strings) => {\n  return strings.filter(str => /\\d/.test(str));\n};\n\n/*\n  * Filter an input list of strings only for ones that contain at least one letter\n  >>> filterContainsLetters([])\n  []\n  >>> filterContainsLetters(['abc', 'bacd', 'cde', 'array'])\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterContainsLetters = (strings) => {\n  return strings.filter(str => /\\w/.test(str));\n};\n\n/*\n  * Filter an input list of strings only for ones that contain at least one letter and contain no digits\n  >>> filterContainsLettersNoDigits([])\n  []\n  >>> filterContainsLettersNoDigits(['abc', 'bacd', 'cde', 'array'])\n  ['abc', 'bacd', 'array']\n  */\nconst filterContainsLettersNoDigits = (strings) => {\n  return strings.filter(str => /\\w/.test(str) &&!/\\d/.test(str));\n};\n\n/*\n  * Filter an input list of strings only for ones that contain at least one letter, contain no digits and are all lower case\n  >>> filterContainsLettersNoDigitsNoUppercase([])\n  []\n  >>> filterContainsLettersNoDigitsNoUppercase(['abc', 'bacd', 'cde', 'array'])\n  ['abc', 'bacd', 'array']\n  */\nconst filterContainsLettersNoDigitsNoUppercase = (strings) => {\n  return strings.filter(str => /\\w/.test(str) &&!/\\d/.test(str) && str.toLowerCase() === str);\n};\n\n/*\n  * Filter an input list of strings only for ones that contain at least one letter, contain no digits and contain at least one uppercase letter\n  >>> filterContainsLettersNoDigitsUppercase([])\n  []\n  >>> filterContainsLettersNoDigitsUppercase(['abc', 'bacd', 'cde', 'array'])\n  ['abc', 'bacd', 'array']\n  */\nconst filterContainsLettersNoDigitsUppercase = (strings) => {\n  return strings.filter(str => /\\w/.test(str) &&!/\\d/.test(str) && /[A-Z]/.test(str));\n};\n\n/*\n  * Filter an input list of strings only for ones that contain at least one letter, contain no digits and contain at least one uppercase letter and contain no digits\n  >>> filterContainsLettersNoDigitsUppercaseNoDigits([])\n  []\n  >>> filterContainsLettersNoDigitsUppercaseNoDigits(['abc', 'bacd', 'cde', 'array'])\n  ['abc', 'bacd', 'array']\n  */\nconst filterContainsLettersNoDigitsUppercaseNoDigits = (strings) => {\n  return strings.filter(str => /\\w/.test(str) &&!/\\d/.test(str) && /[A-Z]/.test(str) &&!/\\d/.test(str));\n};\n\n/*\n  * Filter an input list of strings only for ones that contain at least one letter, contain no digits and contain at least one uppercase letter and contain no digits or contain at least one uppercase letter and contain no digits\n  >>> filterContainsLettersNoDigitsUppercaseNoDigitsNoUppercase([])\n  []\n  >>> filterContainsLettersNoDigitsUppercaseNoDigitsNoUppercase(['abc', 'bacd', 'cde', 'array'])\n  ['abc', 'bacd', 'array']\n  */\nconst filterContainsLettersNoDigitsUppercaseNoDigitsNoUppercase = (strings) => {\n  return strings.filter(str => /\\w/.test(str) &&!/\\d/.test(str) && /[A-Z]/.test(str) &&!/\\d/.test(str) &&!/[A-Z]/.test(str));\n};\n\n/*\n  * Filter an input list of strings only for ones that contain at least one letter, contain no digits and contain at least one uppercase letter and contain no digits or contain at least one uppercase letter and contain no digits\n  >>> filterContainsLettersNoDigitsUppercaseNoDigitsNoUppercaseNoDigits([])\n  []\n  >>> filterContainsLettersNoDigitsUppercaseNoDigitsNoUppercaseNoDigits(['abc', 'bacd', 'cde', 'array'])\n  ['abc', 'bacd', 'array']\n  */\nconst filterContainsLettersNoDigitsUppercaseNoDigitsNoUppercaseNoDigits = (strings) => {\n  return strings.filter(str => /\\w/.test(str) &&!/\\d/.test(str) && /[A-Z]/.test(str) &&!/\\d/.test(str) &&!/[A-Z]/.test(str));\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (!numbers.length) {\n    return (0, 1)\n  }\n\n  let max = Math.max(...numbers)\n  let min = Math.min(...numbers)\n\n  return [...numbers.reduce((acc, num) => {\n    if (acc.length) {\n      acc[acc.length - 1] += num\n    } else {\n      acc.push(num)\n    }\n\n    return acc\n  }, []), max * min]\n}\n\nexport default sumProduct\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const rollingMaxList = []\n  const i = 0\n  const j = numbers.length - 1\n  const max = numbers[0]\n  let maxIndex = 0\n  while (i < j) {\n    const maxFromI = numbers[i]\n    if (numbers[i] > max) {\n      max = maxFromI\n      maxIndex = i\n    }\n    const maxFromJ = numbers[j]\n    if (numbers[j] > max) {\n      max = maxFromJ\n      maxIndex = j\n    }\n    const sum = maxFromI + maxFromJ\n    rollingMaxList.push(sum)\n    i++\n    j--\n  }\n  return rollingMaxList\n}\n\nconst rollingMaxList = rollingMax([1, 2, 3, 2, 3, 4, 2])\nconsole.log(rollingMaxList)\n/*\nOutput:\n[1, 2, 3, 3, 3, 4, 4]\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let str = string.split('').reverse().join('');\n  let suffix = str.split('').reverse().join('');\n  while (isPalindrome(suffix)) {\n    str = suffix + str;\n    suffix = str.split('').reverse().join('');\n  }\n  return str;\n}\n\n/*\n Tests if string is a palindrome\n  >>> isPalindrome('cat')\n  True\n  >>> isPalindrome('cata')\n  True\n  >>> isPalindrome('catac')\n  True\n  >>> isPalindrome('cataaa')\n  False\n  >>> isPalindrome('abc')\n  False\n  >>> isPalindrome('abccba')\n  False\n  >>> isPalindrome('abcdefg')\n  False\n  */\nconst isPalindrome = (string) => {\n  let str = string.split('').reverse().join('');\n  return str == string;\n}\n\nmodule.exports = {\n  makePalindrome,\n  isPalindrome\n}\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  return a.split('').map(() => {\n    return a.charAt(0) ^ b.charAt(0);\n  }).join('');\n};\n\nconst isPalindrome = (string) => {\n  let left = 0;\n  let right = string.length - 1;\n  while (left < right) {\n    if (string[left]!== string[right]) {\n      return false;\n    }\n    left++;\n    right--;\n  }\n  return true;\n};\n\n/*\n  Input: string is 'abcd'\n  Output: 'dcab'\n  This is a simple example of reversing a string.\n  */\nconst reverseString = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/*\n  Input: string is 'abcd'\n  Output: 'dcab'\n  This is a simple example of reversing a string.\n  */\nconst reverseStringWithDictionary = (string) => {\n  const dictionary = {\n    'a': 'z',\n    'b': 'y',\n    'c': 'x',\n    'd': 'w',\n    'e': 'v',\n    'f': 'u',\n    'g': 't',\n    'h':'s',\n    'i': 'r',\n    'j': 'q',\n    'k': 'p',\n    'l': 'o',\n   'm': 'n',\n    'n':'m',\n    'o': 'l',\n    'p': 'k',\n    'q': 'j',\n    'r': 'i',\n   's': 'h',\n    't': 'g',\n    'u': 'f',\n    'v': 'e',\n    'w': 'd',\n    'x': 'c',\n    'y': 'b',\n    'z': 'a'\n  };\n  const reversed = dictionary.reduce((acc, value, key) => {\n    if (acc.indexOf(value) === -1) {\n      acc.push(value);\n    }\n    return acc;\n  }, []);\n  return reversed.join('');\n};\n\n/*\n  Input: string is 'abcd'\n  Output: 'dcab'\n  This is a simple example of reversing a string.\n  */\nconst reverseStringWithHash = (string) => {\n  const hash = {\n    'a': '#',\n    'b': '#',\n    'c': '#',\n    'd': '#',\n    'e': '#',\n    'f': '#',\n    'g': '#',\n    'h': '#',\n    'i': '#',\n    'j': '#',\n    'k': '#',\n    'l': '#',\n   'm': '#',\n    'n': '#',\n    'o': '#',\n    'p': '#',\n    'q': '#',\n    'r': '#',\n   's': '#',\n    't': '#',\n    'u': '#',\n    'v': '#',\n    'w': '#',\n    'x': '#',\n    'y': '#',\n    'z': '#'\n  };\n  const reversed = string.split('').map(() => {\n    return hash[string.charAt(0)];\n  }).reverse().join('');\n  return reversed;\n};\n\nconst isPalindromeWithDictionary = (string) => {\n  const dictionary = {\n    'a': 'z',\n    'b': 'y',\n    'c': 'x',\n    'd': 'w',\n    'e': 'v',\n    'f': 'u',\n    'g': 't',\n    'h':'s',\n    'i': 'r',\n    'j': 'q',\n    'k': 'p',\n    'l': 'o',\n   'm': 'n',\n    'n':'m',\n    'o': 'l',\n    'p': 'k',\n    'q': 'j',\n    'r': 'i',\n   's': 'h',\n    't': 'g',\n    'u': 'f',\n    'v': 'e',\n    'w': 'd',\n    'x': 'c',\n    'y': 'b',\n    'z': 'a'\n  };\n  let reversed = string.split('').reverse().join('');\n  return (reversed === string);\n};\n\nconst isPalindromeWithHash = (string) => {\n  const hash = {\n    'a': '#',\n    'b': '#',\n    'c': '#',\n    'd': '#',\n    'e': '#',\n    'f': '#',\n    'g': '#',\n    'h': '#',\n    'i': '#',\n    'j': '#',\n    'k': '#',\n    'l': '#',\n   'm': '#',\n    'n': '#',\n    'o': '#',\n    'p': '#',\n    'q': '#',\n    'r': '#',\n   's': '#',\n    't': '#',\n    'u': '#',\n    'v': '#',\n    'w': '#',\n    'x': '#',\n    'y': '#',\n    'z': '#'\n  };\n  let reversed = string.split('').map(() => {\n    return hash[string.charAt(0)];\n  }).reverse().join('');\n  return (reversed === string);\n};\n\nconst reverseStringInPlace = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\nconst isPalindrome = (string) => {\n  let left = 0;\n  let right = string.length - 1;\n  while (left < right) {\n    if (string[left]!== string[right]) {\n      return false;\n    }\n    left++;"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  const arr = strings.filter((x) => x.length > 0)\n  if (arr.length === 0) return null\n  return arr.reduce((max, x) => x.length > max? x : max)\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  let max;\n  let min;\n  if (b < a) {\n    max = a;\n    min = b;\n  } else {\n    max = b;\n    min = a;\n  }\n  let tmp = min;\n  while (tmp!== 0) {\n    let next = tmp - max;\n    if (next!== 0) {\n      return next;\n    }\n    tmp = next;\n  }\n  return max;\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const result = []\n  for (let i = 0; i <= string.length; i++) {\n    result.push(string.substr(0, i))\n  }\n  return result\n}\n\n/**\n  * Return list of all suffixes from shorter to longer of the input string\n  *\n  * @param {string} string\n  * @returns {string[]}\n  * @example\n  * >>> allSuffixes('abc')\n  * ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const result = []\n  for (let i = string.length; i >= 0; i--) {\n    result.push(string.substr(i, string.length - i))\n  }\n  return result\n}\n\n/**\n  * Return all the prefixes of the input string\n  *\n  * @param {string} string\n  * @returns {string[]}\n  * @example\n  * >>> prefixes('abc')\n  * ['a', 'ab']\n  */\nconst prefixes = (string) => {\n  const result = []\n  let i = 0\n  while (i < string.length) {\n    result.push(string.substr(0, i + 1))\n    i++\n  }\n  return result\n}\n\n/**\n  * Return all the suffixes of the input string\n  *\n  * @param {string} string\n  * @returns {string[]}\n  * @example\n  * >>> suffixes('abc')\n  * ['b', 'c', 'bc']\n  */\nconst suffixes = (string) => {\n  const result = []\n  let i = 0\n  while (i < string.length) {\n    result.push(string.substr(i, string.length - i))\n    i++\n  }\n  return result\n}\n\nmodule.exports = {\n  allPrefixes,\n  allSuffixes,\n  prefixes,\n  suffixes\n}\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return Array(n + 1).join(' ').replace(/\\B(?=(\\d{3})+(?!\\d))/g,'');\n};\n\n/**\n  Return a string contains the numbers from 0 upto n inclusive.\n  >>> numberSequence(0)\n  '0'\n  >>> numberSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst numberSequence = (n) => {\n  return Array(n + 1).join(n);\n};\n\nconst main = () => {\n  console.log('Exercise 1:'+ stringSequence(5));\n  console.log('Exercise 2:'+ numberSequence(5));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n    const count = [];\n    for (let i = 0; i < string.length; i++) {\n        const character = string[i];\n        if (!count[character]) {\n            count[character] = 1;\n        } else {\n            count[character]++;\n        }\n    }\n    return count.reduce((acc, val) => acc + val);\n};\n\n/* Gives the smallest int, greater than or equal to the number provided\n  >>> smallestNumberGreaterThan(7)\n  8\n  >>> smallestNumberGreaterThan(6)\n  7\n  >>> smallestNumberGreaterThan(5)\n  6\n  >>> smallestNumberGreaterThan(4)\n  5\n  >>> smallestNumberGreaterThan(3)\n  4\n  >>> smallestNumberGreaterThan(2)\n  3\n  >>> smallestNumberGreaterThan(1)\n  2\n  >>> smallestNumberGreaterThan(0)\n  1\n  >>> smallestNumberGreaterThan(0)\n  0\n  */\nconst smallestNumberGreaterThan = (number) => {\n    let min = number;\n    let next = number + 1;\n    while (next <= number) {\n        if (next > number) {\n            break;\n        }\n        next++;\n    }\n    return next - 1;\n};\n\n/* Gives the largest int, less than or equal to the number provided\n  >>> largestNumberLessThan(7)\n  6\n  >>> largestNumberLessThan(8)\n  7\n  >>> largestNumberLessThan(9)\n  8\n  >>> largestNumberLessThan(10)\n  9\n  >>> largestNumberLessThan(11)\n  10\n  >>> largestNumberLessThan(12)\n  11\n  >>> largestNumberLessThan(13)\n  12\n  >>> largestNumberLessThan(14)\n  13\n  >>> largestNumberLessThan(15)\n  14\n  >>> largestNumberLessThan(16)\n  15\n  */\nconst largestNumberLessThan = (number) => {\n    let max = number;\n    let next = number - 1;\n    while (next >= number) {\n        if (next < number) {\n            break;\n        }\n        next--;\n    }\n    return next + 1;\n};\n\nmodule.exports = {\n    countDistinctCharacters,\n    smallestNumberGreaterThan,\n    largestNumberLessThan\n};\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const beats = []\n  let note_type = 'o'\n  let i = 0\n  while (i < music_string.length) {\n    if (music_string[i] === 'o' || music_string[i] === '|') {\n      beats.push(parseBeat(music_string.slice(i, i + 1)))\n      i += 1\n    } else if (music_string[i] === '.') {\n      i += 1\n      if (music_string[i] === '|') {\n        beats.push(parseBeat(music_string.slice(i + 1, i + 2)))\n        i += 1\n      } else if (music_string[i + 1] === '|') {\n        beats.push(parseBeat(music_string.slice(i, i + 2)))\n        i += 1\n      } else {\n        beats.push(parseBeat(music_string.slice(i, i + 1)))\n      }\n    } else if (music_string[i] === 'o') {\n      beats.push(parseBeat(music_string.slice(i, i + 2)))\n      i += 2\n    } else {\n      beats.push(parseBeat(music_string.slice(i, i + 1)))\n      i += 1\n    }\n  }\n  return beats\n}\n\n/*\nInput: 'o o|.| o| o|.|.|.|.| o o'\nOutput: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\nGiven a string representing a music in the format described above,\n return how many beat do each note (starting from the first)\n*/\nconst parseBeat = (beat_string) => {\n  const beats = [beat_string]\n  if (beat_string === 'o') {\n    beats.push('o')\n  } else if (beat_string === '|') {\n    beats.push('o|')\n  } else if (beat_string === 'o|') {\n    beats.push('o|')\n  } else if (beat_string === 'o|o') {\n    beats.push('o|')\n  } else if (beat_string === 'o|o|') {\n    beats.push('o|')\n  } else if (beat_string === 'o|o|o') {\n    beats.push('o|')\n  } else if (beat_string === 'o|o|o|') {\n    beats.push('o|')\n  } else if (beat_string === 'o|o|o|o') {\n    beats.push('o|')\n  } else if (beat_string === 'o|o|o|o|') {\n    beats.push('o|')\n  } else if (beat_string === 'o|o|o|o|o') {\n    beats.push('o|')\n  } else if (beat_string === 'o|o|o|o|o|') {\n    beats.push('o|')\n  } else if (beat_string === 'o|o|o|o|o|o') {\n    beats.push('o|')\n  } else if (beat_string === 'o|o|o|o|o|o|') {\n    beats.push('o|')\n  } else if (beat_string === 'o|o|o|o|o|o|o') {\n    beats.push('o|')\n  } else if (beat_string === 'o|o|o|o|o|o|o|') {\n    beats.push('o|')\n  } else if (beat_string === 'o|o|o|o|o|o|o|o|') {\n    beats.push('o|')\n  } else if (beat_string === 'o|o|o|o|o|o|o|o|o') {\n    beats.push('o|')\n  } else if (beat_string === 'o|o|o|o|o|o|o|o|o|') {\n    beats.push('o|')\n  } else if (beat_string === 'o|o|o|o|o|o|o|o|o|o|') {\n    beats.push('o|')\n  } else if (beat_string === 'o|o|o|o|o|o|o|o|o|o|o|') {\n    beats.push('o|')\n  } else if (beat_string === 'o|o|o|o|o|o|o|o|o|o|o|o|o|') {\n    beats.push('o|')\n  } else if (beat_string === 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|') {\n    beats.push('o|')\n  } else if (beat_string === 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|"}
{"task_id": "JavaScript/18", "prompt": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0;\n  let index = string.indexOf(substring);\n  while (index!== -1) {\n    count++;\n    index = string.indexOf(substring, index + 1);\n  }\n  return count;\n};\n\n// console.log(howManyTimes('aaa', 'aa'));\n\n// const howManyTimes = (string, substring) => {\n//   let count = 0;\n//   let index = string.indexOf(substring);\n//   while (index!== -1) {\n//     count++;\n//     index = string.indexOf(substring, index + 1);\n//   }\n//   return count;\n// };\n\n// console.log(howManyTimes('aaa', 'aa'));\n// console.log(howManyTimes('aaa', 'a'));\n// console.log(howManyTimes('aa', 'aa'));\n// console.log(howManyTimes('aa', 'a'));\n// console.log(howManyTimes('aaa', 'a'));\n// console.log(howManyTimes('aaaa', 'aa'));\n// console.log(howManyTimes('aaaa', 'a'));\n// console.log(howManyTimes('aaaa', 'aa'));\n// console.log(howManyTimes('aaaa', 'aaa'));\n// console.log(howManyTimes('aaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaaaaaaaaaaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n    return numbers.split(' ').sort((a, b) => parseInt(a) - parseInt(b)).join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sort from largest to smallest\n  >>> sortNumbers('one six two five three four')\n  'one two three four five six'\n  */\nconst sortNumbersInReverse = (numbers) => {\n    return numbers.split(' ').sort((a, b) => parseInt(b) - parseInt(a)).join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sort from largest to smallest\n  >>> sortNumbersInReverse('one two three four five six')\n  'one two three four five six'\n  */\nconst sortNumbersInReverseWithString = (numbers) => {\n    return sortNumbers(sortNumbersInReverse(numbers));\n};\n\n/* Input is a string with one or more space-delimited numbers from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sorted from largest to smallest\n  >>> sortNumbersInReverseWithString('one two three four five six')\n  'one two three four five six'\n  */\nconst sortNumbersInReverseWithString2 = (numbers) => {\n    return sortNumbersInReverse(numbers);\n};\n\n/* Input is a string with one or more space-delimited numbers from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sorted from largest to smallest\n  >>> sortNumbersInReverseWithString2('one two three four five six')\n  'one two three four five six'\n  */\nconst sortNumbersInReverseWithString3 = (numbers) => {\n    return sortNumbersInReverse(numbers);\n};\n\n/* Input is a string with one or more space-delimited numbers from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sorted from largest to smallest\n  >>> sortNumbersInReverseWithString3('one two three four five six')\n  'one two three four five six'\n  */\nconst sortNumbersInReverseWithString4 = (numbers) => {\n    return sortNumbersInReverse(numbers);\n};\n\n/* Input is a string with one or more space-delimited numbers from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sorted from largest to smallest\n  >>> sortNumbersInReverseWithString4('one two three four five six')\n  'one two three four five six'\n  */\nconst sortNumbersInReverseWithString5 = (numbers) => {\n    return sortNumbersInReverse(numbers);\n};\n\n/* Input is a string with one or more space-delimited numbers from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sorted from largest to smallest\n  >>> sortNumbersInReverseWithString5('one two three four five six')\n  'one two three four five six'\n  */\nconst sortNumbersInReverseWithString6 = (numbers) => {\n    return sortNumbersInReverse(numbers);\n};\n\n/* Input is a string with one or more space-delimited numbers from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sorted from largest to smallest\n  >>> sortNumbersInReverseWithString6('one two three four five six')\n  'one two three four five six'\n  */\nconst sortNumbersInReverseWithString7 = (numbers) => {\n    return sortNumbersInReverse(numbers);\n};\n\n/* Input is a string with one or more space-delimited numbers from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sorted from largest to smallest\n  >>> sortNumbersInReverseWithString7('one two three four five six')\n  'one two three four five six'\n  */\nconst sortNumbersInReverseWithString8 = (numbers) => {\n    return sortNumbersInReverse(numbers);\n};\n\n/* Input is a string with one or more space-delimited numbers from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sorted from largest to smallest\n  >>> sortNumbersInReverseWithString8('one two three four five six')\n  'one two three four five six'\n  */\nconst sortNumbersInReverseWithString9 = (numbers) => {\n    return sortNumbersInReverse(numbers);\n};\n\n/* Input is a string with one or more space-delimited numbers from 'zeros' to 'nine'. Valid choices was 'zeros',"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let sortedNumbers = numbers.sort();\n  let closest = sortedNumbers[0];\n  let secondClosest = sortedNumbers[0];\n  let i = 1;\n  while (i < sortedNumbers.length) {\n    if (Math.abs(closest - sortedNumbers[i]) > Math.abs(secondClosest - sortedNumbers[i])) {\n      secondClosest = closest;\n      closest = sortedNumbers[i];\n    } else {\n      secondClosest = sortedNumbers[i];\n    }\n    i++;\n  }\n  return [closest, secondClosest];\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const smallest = Math.min(...numbers)\n  const largest = Math.max(...numbers)\n  return [\n    (numbers[0] - smallest) / (largest - smallest),\n    (numbers[1] - smallest) / (largest - smallest),\n    (numbers[2] - smallest) / (largest - smallest),\n    (numbers[3] - smallest) / (largest - smallest),\n    (numbers[4] - smallest) / (largest - smallest),\n    (numbers[5] - smallest) / (largest - smallest)\n  ]\n}\n\nconst rescaleToUnit = (numbers) => {\n  const smallest = Math.min(...numbers)\n  const largest = Math.max(...numbers)\n  return [\n    (numbers[0] - smallest) / (largest - smallest),\n    (numbers[1] - smallest) / (largest - smallest),\n    (numbers[2] - smallest) / (largest - smallest),\n    (numbers[3] - smallest) / (largest - smallest),\n    (numbers[4] - smallest) / (largest - smallest),\n    (numbers[5] - smallest) / (largest - smallest)\n  ]\n}\n\n/* Gives list of numbers, apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const smallest = Math.min(...numbers)\n  const largest = Math.max(...numbers)\n  return [\n    (numbers[0] - smallest) / (largest - smallest),\n    (numbers[1] - smallest) / (largest - smallest),\n    (numbers[2] - smallest) / (largest - smallest),\n    (numbers[3] - smallest) / (largest - smallest),\n    (numbers[4] - smallest) / (largest - smallest),\n    (numbers[5] - smallest) / (largest - smallest)\n  ]\n}\n\nconst rescaleToUnit = (numbers) => {\n  const smallest = Math.min(...numbers)\n  const largest = Math.max(...numbers)\n  return [\n    (numbers[0] - smallest) / (largest - smallest),\n    (numbers[1] - smallest) / (largest - smallest),\n    (numbers[2] - smallest) / (largest - smallest),\n    (numbers[3] - smallest) / (largest - smallest),\n    (numbers[4] - smallest) / (largest - smallest),\n    (numbers[5] - smallest) / (largest - smallest)\n  ]\n}\n\nconst rescaleToUnit = (numbers) => {\n  const smallest = Math.min(...numbers)\n  const largest = Math.max(...numbers)\n  return [\n    (numbers[0] - smallest) / (largest - smallest),\n    (numbers[1] - smallest) / (largest - smallest),\n    (numbers[2] - smallest) / (largest - smallest),\n    (numbers[3] - smallest) / (largest - smallest),\n    (numbers[4] - smallest) / (largest - smallest),\n    (numbers[5] - smallest) / (largest - smallest)\n  ]\n}\n\nconst rescaleToUnit = (numbers) => {\n  const smallest = Math.min(...numbers)\n  const largest = Math.max(...numbers)\n  return [\n    (numbers[0] - smallest) / (largest - smallest),\n    (numbers[1] - smallest) / (largest - smallest),\n    (numbers[2] - smallest) / (largest - smallest),\n    (numbers[3] - smallest) / (largest - smallest),\n    (numbers[4] - smallest) / (largest - smallest),\n    (numbers[5] - smallest) / (largest - smallest)\n  ]\n}\n\nconst rescaleToUnit = (numbers) => {\n  const smallest = Math.min(...numbers)\n  const largest = Math.max(...numbers)\n  return [\n    (numbers[0] - smallest) / (largest - smallest),\n    (numbers[1] - smallest) / (largest - smallest),\n    (numbers[2] - smallest) / (largest - smallest),\n    (numbers[3] - smallest) / (largest - smallest),\n    (numbers[4] - smallest) / (largest - smallest),\n    (numbers[5] - smallest) / (largest - smallest)\n  ]\n}\n\nconst rescaleToUnit = (numbers) => {\n  const smallest = Math.min(...numbers)\n  const largest = Math.max(...numbers)\n  return [\n    (numbers[0] - smallest) / (largest - smallest),\n    (numbers[1] - smallest) / (largest - smallest),\n    (numbers[2] - smallest) / (largest - smallest),\n    (numbers[3] - smallest) / (largest - smallest),\n    (numbers[4] - smallest) / (largest - smallest),\n    (numbers[5] - smallest) / (largest - smallest)\n  ]\n}\n\nconst rescaleToUnit = (numbers) => {\n  const smallest = Math.min(...numbers)\n  const largest = Math.max(...numbers)\n  return [\n    (numbers[0] - smallest) / (largest - smallest),\n    (numbers[1] - smallest) / (largest - smallest),\n    (numbers[2] - smallest) / (largest - smallest),\n    (numbers[3] - smallest) / (largest - smallest),\n    (numbers[4] - smallest) / (largest - smallest),\n    (numbers[5] - smallest) / (largest - smallest)\n  ]\n}\n\nconst"}
{"task_id": "JavaScript/22", "prompt": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  let i = 0\n  let result = []\n  while (i < values.length) {\n    let value = values[i]\n    if (typeof value === 'number') {\n      result.push(value)\n    }\n    i++\n  }\n  return result\n}\n\nexport { filterIntegers }\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n    return string.length;\n}\n\n/* Return index of first occurrence of substr in string\n  >>> index_of_first(strlen('abcd'), 'ab')\n  2\n  >>> index_of_first(strlen('abcd'), 'c')\n  2\n  >>> index_of_first(strlen('abcd'), 'b')\n  -1\n  >>> index_of_first(strlen('abcd'), 'bz')\n  -1\n  */\nconst index_of_first = (string, substr) => {\n    let i = 0;\n    for (let j = 0; j < string.length; j++) {\n        if (string[j] === substr) {\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\n/* Return index of last occurrence of substr in string\n  >>> index_of_last(strlen('abcd'), 'ab')\n  4\n  >>> index_of_last(strlen('abcd'), 'c')\n  3\n  >>> index_of_last(strlen('abcd'), 'b')\n  -1\n  >>> index_of_last(strlen('abcd'), 'bz')\n  -1\n  */\nconst index_of_last = (string, substr) => {\n    let i = 0;\n    for (let j = 0; j < string.length; j++) {\n        if (string[j] === substr) {\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\n/* Return substring of string from start to end\n  >>> substring(strlen('abcd'), 2, 4)\n  'bcd'\n  >>> substring(strlen('abcd'), -1, -2)\n  'bcd'\n  >>> substring(strlen('abcd'), 2, -1)\n  Traceback (most recent call last):\n ...\n  ValueError: End index must be greater than or equal to start index\n  >>> substring(strlen('abcd'), -2, -1)\n  Traceback (most recent call last):\n ...\n  ValueError: End index must be greater than or equal to start index\n  >>> substring(strlen('abcd'), -2, -1, 2)\n  Traceback (most recent call last):\n ...\n  ValueError: Start index must be less than length of string\n  >>> substring(strlen('abcd'), 2, 4, -1)\n  Traceback (most recent call last):\n ...\n  ValueError: Start index must be less than length of string\n  */\nconst substring = (string, start, end, step) => {\n    let i = 0;\n    for (let j = start; j < end; j += step) {\n        if (i === string.length) {\n            return '';\n        }\n        i++;\n    }\n    return string.slice(start, end);\n}\n\n/* Return number of occurances of substr in string\n  >>> count_of(strlen('abcd'), 'ab')\n  2\n  >>> count_of(strlen('abcd'), 'c')\n  2\n  >>> count_of(strlen('abcd'), 'b')\n  1\n  >>> count_of(strlen('abcd'), 'bz')\n  0\n  */\nconst count_of = (string, substr) => {\n    let i = 0;\n    let count = 0;\n    for (let j = 0; j < string.length; j++) {\n        if (string[j] === substr) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/* Return string reversed\n  >>> reverse(strlen('abcd'))\n  'dcba'\n  >>> reverse(strlen('abcd'))\n  'abcd'\n  */\nconst reverse = (string) => {\n    let string_array = string.split('');\n    let reversed_array = string_array.reverse();\n    return reversed_array.join('');\n}\n\n/* Return string reversed\n  >>> reverse(strlen('abcd'))\n  'dcba'\n  >>> reverse(strlen('abcd'))\n  'abcd'\n  */\nconst reverse_char = (string) => {\n    let string_array = string.split('');\n    let reversed_array = string_array.reverse();\n    return reversed_array.join('');\n}\n\n/* Return string reversed\n  >>> reverse(strlen('abcd'))\n  'dcba'\n  >>> reverse(strlen('abcd'))\n  'abcd'\n  */\nconst reverse_string = (string) => {\n    return string.split('').reverse().join('');\n}\n\n/* Return string reversed\n  >>> reverse(strlen('abcd'))\n  'dcba'\n  >>> reverse(strlen('abcd'))\n  'abcd'\n  */\nconst reverse_words = (string) => {\n    let words = string.split(' ');\n    let reversed_words = words.reverse();\n    return reversed_words.join(' ');\n}\n\n/* Return reversed string\n  >>> reverse_char('abcd')\n  'cda'\n  >>> reverse_char('abcd')\n  'abcd'\n  */\nconst reverse_char_str = (string) => {\n    let string_array = string.split('');\n    let reversed_array = string_array.reverse();\n    return reversed_array.join('');\n}\n\n/* Return reversed string\n  >>> reverse_char_str('abcd')\n  'cda'\n  >>> reverse_char_str('abcd')\n  'abcd'\n  */\nconst reverse_char_str_2 = (string) => {\n    return string.split('').reverse().join('');\n}\n\n/* Return reversed string\n  >>> reverse_string('abcd')\n  'dcba'\n  >>> reverse_string('abcd')\n  'abcd'\n  */\nconst reverse_str = (string) => {\n    return string.split('').reverse().join('');\n}\n\n/* Return reversed string\n  >>> reverse_str('abcd')\n  'dcba'\n  >>> reverse_str('abcd')\n  'abcd'\n  */\nconst reverse"}
{"task_id": "JavaScript/24", "prompt": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n    return (new Array(2 * n + 1)).fill(0).map((_, i) => {\n        let res = 1;\n        for (let j = 1; j <= n; j++) {\n            if (i - j * j > 1) {\n                res *= j;\n            }\n        }\n        return res;\n    });\n};\n\nconsole.log(factorize(8));\nconsole.log(factorize(25));\nconsole.log(factorize(70));\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (count === 0) {\n      result.push(numbers[i]);\n    }\n    if (numbers[i]!== result[result.length - 1]) {\n      result.push(numbers[i]);\n      count++;\n    }\n  }\n  return result;\n};\n\nremoveDuplicates([1, 2, 3, 2, 4]);\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, (match, left, right) => {\n    return left + right.toLowerCase();\n  });\n};\n\nmodule.exports = {\n  flipCase,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, s) => acc + s, '');\n};\n\nexport default concatenate;\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const prefixLen = prefix.length\n  return strings.filter(str => str.slice(0, prefixLen) === prefix)\n}\n\n/*\n  Given a prefix and a list of strings, returns a list of strings\n  that have that prefix in the first place.\n\n  >>> findFirst(['abc', 'bcd', 'cde'], 'b')\n  ['bcd']\n  >>> findFirst(['abc', 'bcd', 'cde'], 'z')\n  []\n  */\nconst findFirst = (strings, prefix) => {\n  const prefixLen = prefix.length\n  return strings.filter(str => str.slice(0, prefixLen) === prefix)\n}\n\n/*\n  Given a prefix and a list of strings, returns a list of strings\n  that have that prefix in the first place.\n\n  >>> findLast(['abc', 'bcd', 'cde'], 'b')\n  ['cde']\n  >>> findLast(['abc', 'bcd', 'cde'], 'z')\n  []\n  */\nconst findLast = (strings, prefix) => {\n  const prefixLen = prefix.length\n  return strings.filter(str => str.slice(0, prefixLen) === prefix)\n}\n\n/*\n  Given a prefix and a list of strings, returns a list of strings\n  that have that prefix in the first place.\n\n  >>> findFirst(['abc', 'bcd', 'cde'], 'b')\n  ['bcd']\n  >>> findFirst(['abc', 'bcd', 'cde'], 'z')\n  []\n  */\nconst findFirstByKey = (strings, key, prefix) => {\n  const prefixLen = prefix.length\n  return strings.filter(str => str[key].slice(0, prefixLen) === prefix)\n}\n\n/*\n  Given a prefix and a list of strings, returns a list of strings\n  that have that prefix in the first place.\n\n  >>> findLast(['abc', 'bcd', 'cde'], 'b')\n  ['cde']\n  >>> findLast(['abc', 'bcd', 'cde'], 'z')\n  []\n  */\nconst findLastByKey = (strings, key, prefix) => {\n  const prefixLen = prefix.length\n  return strings.filter(str => str[key].slice(0, prefixLen) === prefix)\n}\n\n/*\n  Given a prefix and a list of strings, returns a list of strings\n  that have that prefix in the first place.\n\n  >>> findFirst(['abc', 'bcd', 'cde'], 'b')\n  ['bcd']\n  >>> findFirst(['abc', 'bcd', 'cde'], 'z')\n  []\n  */\nconst findFirstByValue = (strings, value, prefix) => {\n  const prefixLen = prefix.length\n  return strings.filter(str => str[value].slice(0, prefixLen) === prefix)\n}\n\n/*\n  Given a prefix and a list of strings, returns a list of strings\n  that have that prefix in the first place.\n\n  >>> findLast(['abc', 'bcd', 'cde'], 'b')\n  ['cde']\n  >>> findLast(['abc', 'bcd', 'cde'], 'z')\n  []\n  */\nconst findLastByValue = (strings, value, prefix) => {\n  const prefixLen = prefix.length\n  return strings.filter(str => str[value].slice(0, prefixLen) === prefix)\n}\n\n/*\n  Given a prefix and a list of strings, returns a list of strings\n  that have that prefix in the first place.\n\n  >>> findFirst(['abc', 'bcd', 'cde'], 'b')\n  ['bcd']\n  >>> findFirst(['abc', 'bcd', 'cde'], 'z')\n  []\n  */\nconst findFirstByLength = (strings, value, prefix) => {\n  const prefixLen = prefix.length\n  return strings.filter(str => str.slice(0, prefixLen) === prefix)\n}\n\n/*\n  Given a prefix and a list of strings, returns a list of strings\n  that have that prefix in the first place.\n\n  >>> findLast(['abc', 'bcd', 'cde'], 'b')\n  ['cde']\n  >>> findLast(['abc', 'bcd', 'cde'], 'z')\n  []\n  */\nconst findLastByLength = (strings, value, prefix) => {\n  const prefixLen = prefix.length\n  return strings.filter(str => str.slice(0, prefixLen) === prefix)\n}\n\n/*\n  Given a prefix and a list of strings, returns a list of strings\n  that have that prefix in the first place.\n\n  >>> findFirst(['abc', 'bcd', 'cde'], 'b')\n  ['bcd']\n  >>> findFirst(['abc', 'bcd', 'cde'], 'z')\n  []\n  */\nconst findFirstByValueLength = (strings, value, prefix) => {\n  const prefixLen = prefix.length\n  return strings.filter(str => str[value].slice(0, prefixLen) === prefix)\n}\n\n/*\n  Given a prefix and a list of strings, returns a list of strings\n  that have that prefix in the first place.\n\n  >>> findLast(['abc', 'bcd', 'cde'], 'b')\n  ['cde']\n  >>> findLast(['abc', 'bcd', 'cde'], 'z')\n  []\n  */\nconst findLastByValueLength = (strings, value, prefix) => {\n  const prefixLen = prefix.length\n  return strings.filter(str => str[value].slice(0, prefixLen) === prefix)\n}\n\n/*\n  Given a prefix and a list of strings, returns a list of strings\n  that have that prefix in the first place.\n\n  >>> findFirst(['abc', 'bcd', 'cde'], 'b')\n  ['bcd']\n  >>> findFirst(['abc', 'bcd', 'cde'], 'z')\n  []\n  */\nconst findFirstByPrefix = (strings,"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const r = [];\n  l.forEach((v, i) => {\n    if (v > 0) {\n      r.push(v);\n    }\n  });\n  return r;\n};\n\n/*\n  >>> getMin([1, 2, 3, 4, 5])\n  1\n  >>> getMin([4, 3, 2, 1])\n  1\n  >>> getMin([2, 3, 4, 1])\n  2\n  >>> getMin([1, 2, 3, 4, 5, 6])\n  1\n  >>> getMin([-1, 2, -4, 5, 6])\n  -1\n  >>> getMin([-1, 2, -4, 5, 6, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  >>> getMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 7, -8])\n  -10\n  >>> getMin([0, -1, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0])\n  -1\n  >>> getMin([0, -1, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n  0\n  >>> getMin([-1, 2, -4, 5, 6, -3, 3, 9, 0, 123, 1, -10, 7, -8, 9, -1, -4, -9, -7, -6, -5, -3, -2, -1, 0])\n  -4\n  >>> getMin([-1, 2, -4, 5, 6, -3, 3, 9, 0, 123, 1, -10, 7, -8, 9, -1, -4, -9, -7, -6, -5, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  -1\n  >>> getMin([-1, 2, -4, 5, 6, -3, 3, 9, 0, 123, 1, -10, 7, -8, 9, -1, -4, -9, -7, -6, -5, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  -10\n  >>> getMin([-1, 2, -4, 5, 6, -3, 3, 9, 0, 123, 1, -10, 7, -8, 9, -1, -4, -9, -7, -6, -5, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  -10\n  >>> getMin([-1, 2, -4, 5, 6, -3, 3, 9, 0, 123, 1, -10, 7, -8, 9, -1, -4, -9, -7, -6, -5, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  -10\n  >>> getMin([-1, 2, -4, 5, 6, -3, 3, 9, 0, 123, 1, -10, 7, -8, 9, -1, -4, -9, -7, -6, -5, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  -10\n  >>> getMin([-1, 2, -4, 5, 6, -3, 3, 9, 0, 123, 1, -10, 7, -8, 9, -1, -4, -9, -7, -6, -5, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  -10\n  >>> getMin([-1, 2, -4, 5, 6, -3, 3, 9, 0, 123, 1, -10, 7, -8, 9, -1, -4, -9, -7, -6, -5, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  -10\n  >>> getMin([-1, 2, -4, 5, 6, -3, 3, 9, 0, 123, 1, -10, 7, -8, 9, -1, -4, -9, -7, -6, -5, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  -10\n  >>> getMin([-1, 2, -4, 5, 6, -3, 3, 9, 0, 123, 1, -10, 7, -8, 9, -1, -4, -9, -7, -6, -5, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  -10\n  >>> getMin([-1, 2, -4, 5, 6, -3, 3, 9, 0, 123, 1, -10, 7, -8, 9, -1, -4, -9, -7, -6, -5, -3, -2, -1, 0, 1"}
{"task_id": "JavaScript/31", "prompt": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n    if (n == 1) return false\n    if (n == 2) return true\n    if (n % 2 == 0) return false\n    let x = 1\n    while (x * x <= n) {\n        if (n % x == 0) return false\n        x += 1\n    }\n    return true\n}\n\n/**\n  * Return the number of possible prime numbers below n.\n  * @param n The number to check.\n  * @return number The number of possible prime numbers below n.\n  * @example\n  * ```javascript\n  * // import isPrime from './prime'\n  * isPrime(6) // false\n  * isPrime(101) // true\n  * isPrime(11) // true\n  * isPrime(13441) // true\n  * isPrime(61) // true\n  * isPrime(4) // false\n  * isPrime(1) // false\n  * ```\n  */\nconst numberOfPrimeNumbers = (n) => {\n    let count = 0\n    let x = 1\n    while (x * x <= n) {\n        if (isPrime(x)) count++\n        x += 1\n    }\n    return count\n}\n\n/**\n  * Returns a list of prime numbers.\n  * @param n The number to check.\n  * @return List The list of prime numbers.\n  * @example\n  * ```javascript\n  * // import prime from './prime'\n  * prime(101) // [101]\n  * prime(6) // [2, 3, 5]\n  * prime(5) // [2, 3, 5]\n  * prime(4) // [2, 3]\n  * prime(3) // [3]\n  * prime(2) // [2]\n  * prime(1) // [1]\n  * ```\n  */\nconst prime = (n) => {\n    let primes = []\n    let x = 1\n    while (x * x <= n) {\n        if (isPrime(x)) primes.push(x)\n        x += 1\n    }\n    return primes\n}\n\n/**\n  * Returns a list of prime numbers.\n  * @param n The number to check.\n  * @return List The list of prime numbers.\n  * @example\n  * ```javascript\n  * // import prime from './prime'\n  * prime(101) // [101]\n  * prime(6) // [2, 3, 5]\n  * prime(5) // [2, 3, 5]\n  * prime(4) // [2, 3]\n  * prime(3) // [3]\n  * prime(2) // [2]\n  * prime(1) // [1]\n  * ```\n  */\nexport default prime\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  if (n % 2!== 0) return undefined;\n  let p = 1;\n  let q = 0;\n  let r = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 1) {\n      p = p * xs[i];\n      r = r + xs[i];\n    } else {\n      q = q + xs[i];\n    }\n  }\n  if (p === 0) return r;\n  return q / p;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const result = [...l.slice(0, -2),...l.slice(1, -1),...l.slice(2)];\n  return result;\n};\n\nexport default sortThird;\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (ret.indexOf(l[i]) < 0) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n}\n\n//Tests\n\n/*Return true if string is a palindrome\n  >>> palindrome('A man, a plan, a canal-Panama')\n  True\n  >>> palindrome('race a car')\n  False\n  >>> palindrome('A man, a plan, a canal-Panama')\n  True\n  */\nconst palindrome = (str) => {\n  if (str.length % 2) {\n    return false;\n  }\n  let strA = str.split('');\n  let strB = str.split('');\n  for (let i = 0; i < strA.length; i++) {\n    strA[i] = strA[i].toLowerCase();\n    strB[i] = strB[i].toLowerCase();\n    if (strA[i]!== strB[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*Return true if string contains all elements of a list\n  >>> contains('race a car', ['race', 'a', 'car'])\n  True\n  >>> contains('race a car', ['a', 'race', 'car'])\n  False\n  >>> contains('race a car', ['race', 'a', 'car', 'race'])\n  True\n  */\nconst contains = (str, l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (str.indexOf(l[i]) < 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*Return true if string contains at least one of the elements in a list\n  >>> contains('race a car', ['race', 'a', 'car', 'race'])\n  True\n  >>> contains('race a car', ['race', 'a', 'car', 'a'])\n  True\n  >>> contains('race a car', ['race', 'a', 'a', 'car', 'race'])\n  True\n  >>> contains('race a car', ['race', 'race'])\n  True\n  */\nconst containsAtLeast = (str, l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (str.indexOf(l[i]) >= 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/*Return true if string contains no elements of a list\n  >>> contains('race a car', ['race', 'a', 'car', 'race', 'a', 'car'])\n  False\n  >>> contains('race a car', ['race', 'a', 'car', 'a', 'race', 'car'])\n  False\n  >>> contains('race a car', ['race', 'a', 'race', 'a', 'race', 'a', 'car'])\n  False\n  >>> contains('race a car', ['race', 'race', 'race', 'race', 'race', 'race', 'race'])\n  False\n  */\nconst containsNo = (str, l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (str.indexOf(l[i]) >= 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*Return true if string contains all the elements of a list\n  >>> containsAll('race a car', ['race', 'a', 'car'])\n  True\n  >>> containsAll('race a car', ['race', 'a', 'car', 'race'])\n  False\n  >>> containsAll('race a car', ['race', 'a', 'car', 'race', 'a', 'car'])\n  True\n  */\nconst containsAll = (str, l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (str.indexOf(l[i]) < 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*Return true if string contains at least one of the elements of a list\n  >>> containsAll('race a car', ['race', 'a', 'car', 'race', 'a', 'car'])\n  True\n  >>> containsAll('race a car', ['race', 'a', 'car', 'a', 'race', 'car'])\n  True\n  >>> containsAll('race a car', ['race', 'race', 'race', 'race', 'race', 'race', 'race'])\n  True\n  */\nconst containsAtLeastAll = (str, l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (str.indexOf(l[i]) >= 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/*Return true if string contains no elements of a list\n  >>> containsAll('race a car', ['race', 'a', 'car', 'race', 'a', 'car', 'race', 'a', 'car'])\n  False\n  >>> containsAll('race a car', ['race', 'a', 'car', 'a', 'race', 'car'])\n  False\n  >>> containsAll('race a car', ['race', 'race', 'race', 'race', 'race', 'race', 'race', 'race'])\n  False\n  */\nconst containsNoAll = (str, l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (str.indexOf(l[i]) >= 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n//Export\nmodule.exports = {\n  palindrome,\n  contains,\n  containsNo,\n  containsAll,\n  containsNoAll,\n  containsAtLeastAll,\n  unique\n}\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (!l || l.length === 0) {\n    return 0;\n  }\n  return l.reduce((a, b) => a >= b? a : b, l[0]);\n};\n\n/**\n  * Return minimum elements in the list.\n  *\n  * @param {Array} l The list.\n  * @returns {Number} The minimum elements in the list.\n  * @example\n  * // returns -5\n  * minElement([-5, -3, -1, 3, 1, 2, 3, 5, 9, 0, 123, 1, -10])\n  *\n  * // returns -10\n  * minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  */\nconst minElement = (l) => {\n  if (!l || l.length === 0) {\n    return 0;\n  }\n  return l.reduce((a, b) => a <= b? a : b, l[0]);\n};\n\n/**\n * Return the nth-to-last element in a list.\n *\n * @param {Array} l The list.\n * @param {Number} n The number of elements to remove.\n * @returns {Number} The nth-to-last element in the list.\n */\nconst nthToLastElement = (l, n) => {\n  if (l.length === 0 || n <= 0) {\n    return 0;\n  }\n  return l[l.length - n];\n};\n\nexport {\n  maxElement,\n  minElement,\n  nthToLastElement,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0) {\n    return 1\n  } else if (n % 5 === 0) {\n    return 2\n  } else if (n % 11 === 0 || n % 13 === 0) {\n    return 3\n  } else {\n    return 4\n  }\n}\n\n/* Return the sum of the digits in a number */\nconst sumOfDigits = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += n % 10\n  }\n  return sum\n}\n\n/* Return the sum of the multiples of a number */\nconst multiples = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i * n\n  }\n  return sum\n}\n\n/* Return the sum of the multiples of a number\n   that are less than or equal to n */\nconst multiplesLessThan = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += multiples(i)\n  }\n  return sum\n}\n\n/* Return the sum of the multiples of a number\n   that are less than n */\nconst multiplesLessThanEqual = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += multiples(i)\n  }\n  return sum\n}\n\n/* Return the sum of the multiples of a number\n   that are greater than or equal to n */\nconst multiplesGreaterThan = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += multiples(i)\n  }\n  return sum\n}\n\n/* Return the sum of the multiples of a number\n   that are greater than n */\nconst multiplesGreaterThanEqual = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += multiples(i)\n  }\n  return sum\n}\n\n/* Return the sum of the multiples of a number\n   that are in the range [min, max] */\nconst multiplesInRange = (min, max) => {\n  let sum = 0\n  for (let i = min; i <= max; i++) {\n    sum += multiples(i)\n  }\n  return sum\n}\n\n/* Return the sum of the multiples of a number\n   that are in the range [min, max]\n   that are less than or equal to n */\nconst multiplesLessThanInRange = (min, max, n) => {\n  let sum = 0\n  for (let i = min; i <= max; i++) {\n    sum += multiples(i)\n  }\n  return sum\n}\n\n/* Return the sum of the multiples of a number\n   that are in the range [min, max]\n   that are less than n */\nconst multiplesLessThanInRangeEqual = (min, max, n) => {\n  let sum = 0\n  for (let i = min; i <= max; i++) {\n    sum += multiples(i)\n  }\n  return sum\n}\n\n/* Return the sum of the multiples of a number\n   that are in the range [min, max]\n   that are greater than or equal to n */\nconst multiplesGreaterThanInRange = (min, max, n) => {\n  let sum = 0\n  for (let i = min; i <= max; i++) {\n    sum += multiples(i)\n  }\n  return sum\n}\n\n/* Return the sum of the multiples of a number\n   that are in the range [min, max]\n   that are greater than n */\nconst multiplesGreaterThanInRangeEqual = (min, max, n) => {\n  let sum = 0\n  for (let i = min; i <= max; i++) {\n    sum += multiples(i)\n  }\n  return sum\n}\n\n/* Return the sum of the multiples of a number\n   that are in the range [min, max]\n   that are in the range [n, n + n] */\nconst multiplesInRangeInRange = (min, max, n) => {\n  let sum = 0\n  for (let i = min; i <= max; i++) {\n    sum += multiples(i)\n  }\n  return sum\n}\n\n/* Return the sum of the multiples of a number\n   that are in the range [min, max]\n   that are in the range [n, n + n]\n   that are less than or equal to n */\nconst multiplesLessThanInRangeInRange = (min, max, n) => {\n  let sum = 0\n  for (let i = min; i <= max; i++) {\n    sum += multiples(i)\n  }\n  return sum\n}\n\n/* Return the sum of the multiples of a number\n   that are in the range [min, max]\n   that are in the range [n, n + n]\n   that are less than n */\nconst multiplesLessThanInRangeInRangeEqual = (min, max, n) => {\n  let sum = 0\n  for (let i = min; i <= max; i++) {\n    sum += multiples(i)\n  }\n  return sum\n}\n\n/* Return the sum of the multiples of a number\n   that are in the range [min, max]\n   that are in the range [n, n + n]\n   that are greater than or equal to n */\nconst multiplesGreaterThanInRangeInRange = (min, max, n) => {\n  let sum = 0\n  for (let i = min; i <= max; i++) {\n    sum += multiples(i)\n  }\n  return sum\n}\n\n/* Return the sum of the multiples of a number\n   that are in the range [min, max]\n   that are in the range [n, n + n]\n   that are greater than n */\nconst multiplesGreaterThanInRangeInRangeEqual = (min, max, n)"}
{"task_id": "JavaScript/37", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  return l.sort((a, b) => a % 2 == b % 2? a : b);\n};\n\nmodule.exports = sortEven;\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n var d = [], groups = [], i = 0;\n for (const group of s.split('')) {\n if (group.length == 3) {\n groups.push(group.slice(1) + group[0]);\n } else {\n d.push(group);\n }\n }\n for (const group of groups) {\n if (group.length == 3) d.push(group.slice(1) + group[0]);\n else d.push(group);\n }\n return d.join('');\n}\n\nmodule.exports = {\n  encodeCyclic,\n  decodeCyclic\n}<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n == 0) return 2\n  if (n == 1) return 3\n  if (n == 2) return 5\n  if (n == 3) return 13\n  return (primeFib(n-1) + primeFib(n-2))\n}\n\nconst sumPrimeFib = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += primeFib(i)\n  }\n  return sum\n}\n\nconsole.log(sumPrimeFib(100))\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    let hasTriplesSumToZero = false\n    for (let i = 0; i < l.length - 2; i++) {\n        let a = l[i]\n        let b = l[i + 1]\n        let c = l[i + 2]\n        let sum = a + b + c\n        if (sum === 0) {\n            hasTriplesSumToZero = true\n        }\n    }\n    return hasTriplesSumToZero\n}\n\nexport {triplesSumToZero}\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  if (n === 1) return 0;\n  let count = 0;\n  let i = n - 1;\n  let j = n - 1;\n  do {\n    if (i === 0 || j === 0) count += 1;\n    while (i!== 0 && j!== 0 && i!== j) {\n      if (carRaceCollision(i - 1) + carRaceCollision(j - 1) === carRaceCollision(i) + carRaceCollision(j)) {\n        count += 2;\n      }\n      i--;\n      j--;\n    }\n    i--;\n    j--;\n  } while (i!== 0 || j!== 0);\n  return count;\n};\n\nconst test = [\n  [1, 0],\n  [1, 1],\n  [2, 0],\n  [2, 1],\n  [3, 0],\n  [3, 1],\n  [4, 0],\n  [4, 1],\n  [5, 0],\n  [5, 1],\n  [6, 0],\n  [6, 1],\n  [7, 0],\n  [7, 1],\n  [8, 0],\n  [8, 1],\n  [9, 0],\n  [9, 1],\n  [10, 0],\n  [10, 1],\n  [11, 0],\n  [11, 1],\n  [12, 0],\n  [12, 1],\n  [13, 0],\n  [13, 1],\n  [14, 0],\n  [14, 1],\n  [15, 0],\n  [15, 1],\n  [16, 0],\n  [16, 1],\n  [17, 0],\n  [17, 1],\n  [18, 0],\n  [18, 1],\n  [19, 0],\n  [19, 1],\n  [20, 0],\n  [20, 1],\n  [21, 0],\n  [21, 1],\n  [22, 0],\n  [22, 1],\n  [23, 0],\n  [23, 1],\n  [24, 0],\n  [24, 1],\n  [25, 0],\n  [25, 1],\n  [26, 0],\n  [26, 1],\n  [27, 0],\n  [27, 1],\n  [28, 0],\n  [28, 1],\n  [29, 0],\n  [29, 1],\n  [30, 0],\n  [30, 1],\n  [31, 0],\n  [31, 1],\n  [32, 0],\n  [32, 1],\n  [33, 0],\n  [33, 1],\n  [34, 0],\n  [34, 1],\n  [35, 0],\n  [35, 1],\n  [36, 0],\n  [36, 1],\n  [37, 0],\n  [37, 1],\n  [38, 0],\n  [38, 1],\n  [39, 0],\n  [39, 1],\n  [40, 0],\n  [40, 1],\n  [41, 0],\n  [41, 1],\n  [42, 0],\n  [42, 1],\n  [43, 0],\n  [43, 1],\n  [44, 0],\n  [44, 1],\n  [45, 0],\n  [45, 1],\n  [46, 0],\n  [46, 1],\n  [47, 0],\n  [47, 1],\n  [48, 0],\n  [48, 1],\n  [49, 0],\n  [49, 1],\n  [50, 0],\n  [50, 1],\n  [51, 0],\n  [51, 1],\n  [52, 0],\n  [52, 1],\n  [53, 0],\n  [53, 1],\n  [54, 0],\n  [54, 1],\n  [55, 0],\n  [55, 1],\n  [56, 0],\n  [56, 1],\n  [57, 0],\n  [57, 1],\n  [58, 0],\n  [58, 1],\n  [59, 0],\n  [59, 1],\n  [60, 0],\n  [60, 1],\n  [61, 0],\n  [61, 1],\n  [62, 0],\n  [62, 1],\n  [63, 0],\n  [63, 1],\n  [64, 0],\n  [64, 1],\n  [65, 0],\n  [65, 1],\n  [66, 0],\n  [66, 1],\n  [67, 0],\n  [67, 1],\n  [68, 0],\n  [68, 1],\n  [69, 0],\n  [69, 1],\n  [70, 0],\n  [70, 1],\n  [71, 0],\n  [71, 1],\n  [72, 0],\n  [72, 1],\n  [73, 0],\n  [73, 1],\n  [74, 0],\n  [74, 1],\n  [75, 0],\n  [75, 1],\n  [76, 0],\n  [76, 1],\n  [77, 0],\n  [77, 1],\n  [78, 0],\n  [78, 1],\n  [79, 0],\n  [79, 1],\n  [80, 0],\n  [80, 1],\n  [81, 0],\n  [81, 1],\n  [82, 0],\n  [82, 1],\n  [83, 0],\n  [83, 1],\n  [84, 0],\n  [84, 1],\n  [85, 0],\n  [85, 1],\n  [86, 0],\n  [86, 1],\n  [87, 0],\n  [87, 1],\n  [88,"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let output = [];\n  for (let i = 0; i < l.length; i++) {\n    output[i] = l[i] + 1;\n  }\n  return output;\n};\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let output = [];\n  for (let i = 0; i < l.length; i++) {\n    output[i] = l[i] - 1;\n  }\n  return output;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrListBy(1, [1, 2, 3])\n  [2, 3, 4]\n  >>> incrListBy(1, [5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListBy = (d, l) => {\n  let output = [];\n  for (let i = 0; i < l.length; i++) {\n    output[i] = l[i] + d;\n  }\n  return output;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrListBy(1, [1, 2, 3])\n  [2, 3, 4]\n  >>> decrListBy(1, [5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListBy = (d, l) => {\n  let output = [];\n  for (let i = 0; i < l.length; i++) {\n    output[i] = l[i] - d;\n  }\n  return output;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrListBy(2, [1, 2, 3])\n  [3, 4, 5]\n  >>> incrListBy(2, [5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [7, 5, 7, 4, 5, 5, 11, 1, 125]\n  */\nconst incrListBy = (d, l) => {\n  let output = [];\n  for (let i = 0; i < l.length; i++) {\n    output[i] = l[i] + d;\n  }\n  return output;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrListBy(2, [1, 2, 3])\n  [3, 4, 5]\n  >>> decrListBy(2, [5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [7, 5, 7, 4, 5, 5, 11, 1, 125]\n  */\nconst decrListBy = (d, l) => {\n  let output = [];\n  for (let i = 0; i < l.length; i++) {\n    output[i] = l[i] - d;\n  }\n  return output;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrListBy(3, [1, 2, 3])\n  [4, 5, 6]\n  >>> incrListBy(3, [5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [8, 6, 8, 5, 6, 6, 12, 1, 126]\n  */\nconst incrListBy = (d, l) => {\n  let output = [];\n  for (let i = 0; i < l.length; i++) {\n    output[i] = l[i] + d;\n  }\n  return output;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrListBy(3, [1, 2, 3])\n  [4, 5, 6]\n  >>> decrListBy(3, [5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [8, 6, 8, 5, 6, 6, 12, 1, 126]\n  */\nconst decrListBy = (d, l) => {\n  let output = [];\n  for (let i = 0; i < l.length; i++) {\n    output[i] = l[i] - d;\n  }\n  return output;\n};\n\nmodule.exports = {\n  incrList,\n  incrListBy,\n  decrList,\n  decrListBy,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  if(l.length === 1) {\n    return false;\n  }\n  const last = l.pop();\n  if(last === 0) {\n    return false;\n  }\n  const next = l.shift();\n  if(next === 0) {\n    return false;\n  }\n  return last + next === 0;\n}\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base === 2) {\n    return x.toString(2);\n  }\n  if (base === 8) {\n    return x.toString(8);\n  }\n  return x.toString(10);\n};\n\n/*\n  * Find the nth term in the Fibonacci sequence.\n  * Return the nth fibonacci number.\n  *\n  * fibonacci(10) -> 9\n  * fibonacci(9) -> 8\n  * fibonacci(8) -> 7\n  * fibonacci(7) -> 6\n  * fibonacci(6) -> 5\n  * fibonacci(5) -> 4\n  * fibonacci(4) -> 3\n  * fibonacci(3) -> 2\n  * fibonacci(2) -> 1\n  * fibonacci(1) -> 1\n  * fibonacci(0) -> 1\n  * fibonacci(-1) -> 0\n  * fibonacci(-2) -> 1\n  * fibonacci(-3) -> 2\n  * fibonacci(-4) -> 3\n  * fibonacci(-5) -> 4\n  * fibonacci(-6) -> 5\n  * fibonacci(-7) -> 6\n  * fibonacci(-8) -> 7\n  * fibonacci(-9) -> 8\n  * fibonacci(-10) -> 9\n  */\nconst fibonacci = (n) => {\n  const a = 1, b = 1, c = 1;\n  for (let i = 0; i < n; i++) {\n    a = b;\n    b = c;\n    c = a + b;\n  }\n  return c;\n};\n\n/*\n * Return the nth prime number.\n * Prime number is greater than 1.\n *\n * prime(1) -> 2\n * prime(2) -> 3\n * prime(3) -> 5\n * prime(4) -> 7\n * prime(5) -> 11\n * prime(6) -> 13\n * prime(7) -> 17\n * prime(8) -> 19\n * prime(9) -> 23\n * prime(10) -> 29\n * prime(11) -> 31\n * prime(12) -> 37\n * prime(13) -> 41\n * prime(14) -> 43\n * prime(15) -> 47\n * prime(16) -> 53\n * prime(17) -> 59\n * prime(18) -> 61\n * prime(19) -> 67\n * prime(20) -> 71\n * prime(21) -> 73\n * prime(22) -> 79\n * prime(23) -> 83\n * prime(24) -> 89\n * prime(25) -> 97\n * prime(26) -> 101\n * prime(27) -> 103\n * prime(28) -> 107\n * prime(29) -> 109\n * prime(30) -> 113\n * prime(31) -> 127\n * prime(32) -> 131\n * prime(33) -> 137\n * prime(34) -> 139\n * prime(35) -> 149\n * prime(36) -> 151\n * prime(37) -> 157\n * prime(38) -> 163\n * prime(39) -> 167\n * prime(40) -> 173\n * prime(41) -> 179\n * prime(42) -> 181\n * prime(43) -> 191\n * prime(44) -> 193\n * prime(45) -> 197\n * prime(46) -> 199\n * prime(47) -> 211\n * prime(48) -> 223\n * prime(49) -> 227\n * prime(50) -> 229\n * prime(51) -> 233\n * prime(52) -> 239\n * prime(53) -> 241\n * prime(54) -> 251\n * prime(55) -> 257\n * prime(56) -> 263\n * prime(57) -> 269\n * prime(58) -> 271\n * prime(59) -> 277\n * prime(60) -> 281\n * prime(61) -> 283\n * prime(62) -> 293\n * prime(63) -> 307\n * prime(64) -> 311\n * prime(65) -> 313\n * prime(66) -> 317\n * prime(67) -> 331\n * prime(68) -> 337\n * prime(69) -> 347\n * prime(70) -> 349\n * prime(71) -> 353\n * prime(72) -> 359\n * prime(73) -> 367\n * prime(74) -> 373\n * prime(75) -> 379\n * prime(76) -> 383\n * prime(77) -> 389\n * prime(78) -> 397\n * prime(79) -> 401\n * prime(80) -> 409\n * prime(81) -> 419\n * prime(82) -> 421\n * prime(83) -> 431\n * prime(84) -> 433\n * prime(85) -> 439\n * prime(86) -> 443\n * prime(87) -> 449\n * prime(88) -> 457\n * prime(89) -> 461\n * prime(90) -> 463\n * prime(91) -> 467\n * prime(92) -> 479\n * prime(93) -> 487\n * prime(94) -> 491\n * prime(95) -> 499\n * prime(96) -> 503\n * prime(97) -> 509\n * prime(98) -> 521\n * prime(99) -> 523\n * prime(100) -> 541\n * prime(101) -> 547\n * prime(102) -> 557\n * prime(103) -> 563\n * prime(104) -> 569\n * prime(105) -> 571\n * prime(106) -> 577\n * prime(107) -> 587\n * prime(108) -> 593\n * prime(109) -> 599\n * prime(110) -> 601\n * prime(111) -> 607\n * prime(112) -> 613\n * prime(113) -> 617\n * prime(114) -> 623\n * prime(115) -> 631\n * prime(116) -> 641\n * prime(117) -> 643\n * prime(118) -> 647\n * prime(119) -> 653\n * prime(120) -> 659\n * prime(121) -> 661\n * prime(122) -> 673\n * prime(123) -> 677\n * prime(124) -> 683\n * prime"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const s = a * h / 2;\n  return Math.sqrt(s * (s - a) * (s - h) / 6);\n};\n\n/**\n * Given two arrays, return the total area of the intersection between\n * them.\n * \n * @param {Array} points1\n * @param {Array} points2\n */\nconst intersectionArea = (points1, points2) => {\n  const arr1 = points1.map(p => [p[0], p[1]]);\n  const arr2 = points2.map(p => [p[0], p[1]]);\n  let i = 0;\n  let j = 0;\n  let intersectionArea = 0;\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i][0] < arr2[j][0]) {\n      i++;\n    } else if (arr1[i][0] > arr2[j][0]) {\n      j++;\n    } else {\n      intersectionArea += triangleArea(arr1[i][1], arr2[j][1]);\n      i++;\n      j++;\n    }\n  }\n  return intersectionArea;\n};\n\n/**\n * Given two arrays, return the average length of the difference between\n * them.\n * \n * @param {Array} points1\n * @param {Array} points2\n */\nconst averageLength = (points1, points2) => {\n  const arr1 = points1.map(p => [p[0], p[1]]);\n  const arr2 = points2.map(p => [p[0], p[1]]);\n  let averageLength = 0;\n  for (let i = 0; i < arr1.length; i++) {\n    const dist1 = distance(arr1[i][0], arr1[i][1], arr2[i][0], arr2[i][1]);\n    averageLength += dist1;\n  }\n  return averageLength / (arr1.length * 1.0);\n};\n\nexport default {\n  areaOfCircle,\n  distance,\n  intersectionArea,\n  averageLength,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 2\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  }\n}\n\nconst fib4Array = []\n\nfor (let i = 0; i < 5; i++) {\n  fib4Array.push(fib4(i))\n}\n\nconsole.log(fib4Array)\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const half = l.length / 2\n  if (l.length % 2 === 0) {\n    return (l[half - 1] + l[half]) / 2\n  } else {\n    return l[half]\n  }\n}\n\n/*\n  Return the sum of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  10\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  44\n  */\nconst sum = (l) => {\n  return l.reduce((a, b) => a + b)\n}\n\n/*\n  Return the average of elements in the list l.\n  >>> average([3, 1, 2, 4, 5])\n  3.5\n  >>> average([-10, 4, 6, 1000, 10, 20])\n  12.0\n  */\nconst average = (l) => {\n  return sum(l) / l.length\n}\n\n/*\n  Return the max of elements in the list l.\n  >>> max([3, 1, 2, 4, 5])\n  5\n  >>> max([-10, 4, 6, 1000, 10, 20])\n  20\n  */\nconst max = (l) => {\n  return Math.max.apply(null, l)\n}\n\n/*\n  Return the min of elements in the list l.\n  >>> min([3, 1, 2, 4, 5])\n  1\n  >>> min([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst min = (l) => {\n  return Math.min.apply(null, l)\n}\n\n/*\n  Return the difference between two values.\n  >>> difference(10, 20)\n  10\n  >>> difference(10, -10)\n  20\n  >>> difference(0, 1)\n  1\n  >>> difference(-10, -20)\n  -10\n  */\nconst difference = (a, b) => {\n  return b - a\n}\n\n/*\n  Return the difference between two lists.\n  >>> difference([10, 20], [20, 30])\n  [10, 0]\n  >>> difference([10, -10], [20, -20])\n  [0, 10]\n  >>> difference([10, -10], [20, -30])\n  [0, 10]\n  >>> difference([10, 20], [20, -30])\n  [10, 0]\n  */\nconst difference = (a, b) => {\n  const diff = []\n  for (let i = 0; i < a.length; i++) {\n    diff.push(a[i] - b[i])\n  }\n  return diff\n}\n\n/*\n  Return the sum of the squares of elements in the list l.\n  >>> sumOfSquares([3, 1, 2, 4, 5])\n  28\n  >>> sumOfSquares([-10, 4, 6, 1000, 10, 20])\n  1687\n  */\nconst sumOfSquares = (l) => {\n  return l.reduce((a, b) => a + b * b, 0)\n}\n\n/*\n  Return the square root of a number.\n  >>> sqrt(16)\n  4\n  >>> sqrt(0)\n  0\n  >>> sqrt(1)\n  1\n  >>> sqrt(-1)\n  1i\n  >>> sqrt(0.5)\n  0.5\n  >>> sqrt(-0.5)\n  0.5i\n  */\nconst sqrt = (n) => {\n  return Math.sqrt(n)\n}\n\n/*\n  Return the factorial of a number.\n  >>> factorial(0)\n  1\n  >>> factorial(1)\n  1\n  >>> factorial(2)\n  2\n  >>> factorial(3)\n  6\n  >>> factorial(10)\n  3628800\n  >>> factorial(0.5)\n  0.5\n  >>> factorial(-0.5)\n  0.5i\n  >>> factorial(1.5)\n  1.5\n  >>> factorial(0.25)\n  4\n  */\nconst factorial = (n) => {\n  return n <= 1? 1 : n * factorial(n - 1)\n}\n\n/*\n  Return the factorial of a number n.\n  >>> factorial2(0)\n  1\n  >>> factorial2(1)\n  1\n  >>> factorial2(2)\n  2\n  >>> factorial2(3)\n  6\n  >>> factorial2(10)\n  3628800\n  >>> factorial2(0.5)\n  0.5\n  >>> factorial2(-0.5)\n  0.5i\n  >>> factorial2(1.5)\n  1.5\n  >>> factorial2(0.25)\n  4\n  */\nconst factorial2 = (n) => {\n  return factorial(n)\n}\n\n/*\n  Return the product of elements in the list l.\n  >>> product([2, 3, 4, 5])\n  120\n  >>> product([-10, 4, 6, 1000, 10, 20])\n  1025000\n  */\nconst product = (l) => {\n  const prod = 1\n  for (let i = 1; i < l.length; i++) {\n    prod *= l[i]\n  }\n  return prod\n}\n\n/*\n  Return the product of the elements in the list l.\n  >>> product2([2, 3, 4, 5])\n  120\n  >>> product2([-10, 4, 6, 1000, 10, 20])\n  1025000\n  */\nconst product2 = (l) => {\n  const prod = 1\n  for (let i = 1; i < l.length; i++) {\n    prod *= l[i]\n  }\n  return prod\n}\n\n/*\n  Return the permutation of elements in the list l.\n  >>> permutation([2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> permutation([-10, 4, 6, 1000, 10, 20])\n  [-10, -6, -4,"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    if (!text ||!text.length) return true;\n    let result = true;\n    for (let i = 0; i < text.length / 2; i++) {\n        if (text[i]!== text[text.length - 1 - i]) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\n\nmodule.exports = isPalindrome;<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let d = n % p\n  while (d < 0) d += p\n  return d\n}\n\n/* Return the product of the first n numbers.\n  >>> prod(3, 5, 7)\n  42\n  >>> prod(0, 3, 5)\n  0\n  >>> prod(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42)\n  42\n  */\nconst prod = (...numbers) => {\n  const sum = n => sum(...n)\n  const p = prod(...numbers.filter(n => n > 0))\n  const result = sum(...numbers.filter(n => n > 0))\n  return result\n}\n\n/* Return the product of the first n numbers.\n  >>> fact(3, 5, 7)\n  42\n  >>> fact(0, 3, 5)\n  0\n  >>> fact(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42)\n  42\n  */\nconst fact = (n,...numbers) => {\n  const sum = n => sum(...n)\n  const p = prod(...numbers.filter(n => n > 0))\n  const result = sum(...numbers.filter(n => n > 0))\n  return result\n}\n\n/* Return the sum of the first n numbers.\n  >>> sum(3, 5, 7)\n  12\n  >>> sum(0, 3, 5)\n  0\n  >>> sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42)\n  42\n  */\nconst sum = (n,...numbers) => {\n  const p = prod(...numbers)\n  const result = n + sum(...numbers.filter(n => n > 0))\n  return result\n}\n\n/* Return the number of prime numbers less than n.\n  >>> primes(3)\n  1\n  >>> primes(2)\n  0\n  >>> primes(1)\n  1\n  >>> primes(0)\n  1\n  >>> primes(3, 5)\n  1\n  >>> primes(3, 5, 7)\n  2\n  >>> primes(3, 5, 7, 11)\n  2\n  >>> primes(3, 5, 7, 11, 13)\n  2\n  >>> primes(3, 5, 7, 11, 13, 17)\n  2\n  >>> primes(3, 5, 7, 11, 13, 17, 19)\n  2\n  >>> primes(3, 5, 7, 11, 13, 17, 19, 23)\n  3\n  >>> primes(3, 5, 7, 11, 13, 17, 19, 23, 29)\n  3\n  >>> primes(3, 5, 7, 11, 13, 17, 19, 23, 29, 31)\n  3\n  >>> primes(3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 33)\n  3\n  >>> primes(3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 33, 37)\n  4\n  >>> primes(3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 33, 37, 41)\n  4\n  >>> primes(3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 33, 37, 41, 43)\n  4\n  >>> primes(3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 33, 37, 41, 43, 47)\n  5\n  >>> primes(3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 33, 37, 41, 43, 47, 53)\n  5\n  >>> primes(3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 33, 37, 41, 43, 47, 53, 59)\n  5\n  >>> primes(3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 33, 37, 41, 43, 47, 53, 59, 61)\n  5\n  >>> primes(3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 33, 37, 41, 43, 47, 53, 59, 61, 67)\n  6\n  >>> primes(3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 33, 37, 41, 43, 47, 53, 59, 61, 67, 71)\n  6\n  >>> primes(3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 33, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73)\n  6\n  >>> primes(3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 33, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79)\n  7\n  >>> primes(3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 33, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83)\n  7\n  >>> primes(3, 5, 7, 11, 13, 17,"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n var r = \"\";\n for (var i = 0; i < s.length; i++) {\n r += String.fromCharCode( (s.charCodeAt(i) - 5 - \"a\".charCodeAt(0) ) % 26 + \"a\".charCodeAt(0) );\n }\n return r; }\n\n/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift_2 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift_2 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); }\n\n/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift_3 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift_3 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); }\n\n/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift_4 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift_4 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); }\n\n/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift_5 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift_5 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); }\n\n/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift_6 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift_6 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); }\n\n/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift_7 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift_7 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); }\n\n/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift_8 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift_8 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); }\n\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\n/*\n  countVowels is a function that counts the number of vowels in a string.\n  >>> countVowels(\"abcdef\\nghijklm\")\n  6\n  >>> countVowels('aaBAA')\n  1\n  >>> countVowels('zbcd')\n  1\n  */\nconst countVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const counts = [];\n  text.split('').forEach(v => {\n    vowels.forEach(c => {\n      if (v === c) {\n        counts.push(1);\n      }\n    });\n  });\n  return counts.reduce((acc, v) => acc + v, 0);\n};\n\n/*\n  countVowelVowels is a function that counts the number of vowels in a string\n  and their repetitions.\n  >>> countVowelVowels(\"abcdef\\nghijklm\")\n  {'a': 2, 'e': 2, 'i': 2, 'o': 2, 'u': 2}\n  >>> countVowelVowels('aaBAA')\n  {'A': 1, 'B': 1}\n  >>> countVowelVowels('zbcd')\n  {'b': 1, 'c': 1, 'd': 1}\n  */\nconst countVowelVowels = (text) => {\n  const counts = {};\n  text.split('').forEach(v => {\n    counts[v] = counts[v]? counts[v] + 1 : 1;\n  });\n  return counts;\n};\n\n/*\n  isVowel is a function that determines if a character is a vowel.\n  >>> isVowel(\"a\")\n  True\n  >>> isVowel(\"e\")\n  True\n  >>> isVowel(\"z\")\n  True\n  >>> isVowel(\"\")\n  True\n  >>> isVowel(\"aBAA\")\n  False\n  */\nconst isVowel = (char) => {\n  return char.toLowerCase() in vowels;\n};\n\n/*\n  isVowelVowel is a function that determines if a character is a vowel\n  and their repetitions.\n  >>> isVowelVowel(\"a\")\n  True\n  >>> isVowelVowel(\"e\")\n  True\n  >>> isVowelVowel(\"z\")\n  True\n  >>> isVowelVowel(\"\")\n  False\n  >>> isVowelVowel(\"aBAA\")\n  False\n  */\nconst isVowelVowel = (char) => {\n  const counts = countVowelVowels(char);\n  return Object.keys(counts).reduce((acc, k) => {\n    acc[k] = counts[k] > 1;\n    return acc;\n  }, {});\n};\n\n/*\n  isVowel is a function that determines if a character is a vowel.\n  >>> isVowel(\"a\")\n  True\n  >>> isVowel(\"e\")\n  True\n  >>> isVowel(\"z\")\n  True\n  >>> isVowel(\"\")\n  True\n  >>> isVowel(\"aBAA\")\n  True\n  */\nconst isVowel2 = (char) => {\n  return char.toLowerCase() in vowels;\n};\n\nconst input = process.stdin.read();\n\nif (!input) {\n  return;\n}\n\nconst vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\nlet counts = {};\n\ninput.split('').forEach(v => {\n  counts[v] = counts[v]? counts[v] + 1 : 1;\n});\n\nObject.keys(counts).forEach(v => {\n  if (counts[v] > 1) {\n    console.log(v);\n  }\n});\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n    if(l.length === 0) return false\n    if(l.length === 1) return l[0] <= t\n    return belowThreshold(l.slice(1), t) && l[0] <= t\n}\n\n// https://www.codewars.com/kata/find-the-smallest-number-in-an-array/train/javascript\nconst findSmallest = (numbers) => {\n    return belowThreshold(numbers, numbers[0])\n}\n\n// https://www.codewars.com/kata/find-the-smallest-number-in-an-array/train/javascript\nconst findSmallest2 = (numbers) => {\n    return numbers.filter(x => x < numbers[0])\n}\n\n// https://www.codewars.com/kata/find-the-smallest-number-in-an-array/train/javascript\nconst findSmallest3 = (numbers) => {\n    return numbers.sort().filter(x => x < numbers[0])\n}\n\n// https://www.codewars.com/kata/find-the-smallest-number-in-an-array/train/javascript\nconst findSmallest4 = (numbers) => {\n    return numbers.sort().reverse().filter(x => x < numbers[0])\n}\n\n// http://stackoverflow.com/a/11552717/988159\nconst isPrime = (n) => {\n    for(let i = 2; i < n; i++) {\n        if(n % i === 0) return false\n    }\n    return true\n}\n\n// https://www.codewars.com/kata/find-the-smallest-number-in-an-array/train/javascript\nconst findSmallest5 = (numbers) => {\n    return numbers.filter(x => isPrime(x))\n}\n\n// https://www.codewars.com/kata/find-the-smallest-number-in-an-array/train/javascript\nconst findSmallest6 = (numbers) => {\n    return numbers.filter(x => x.length >= numbers[0].length && x.length <= numbers[0].length && isPrime(x))\n}\n\n// https://www.codewars.com/kata/find-the-smallest-number-in-an-array/train/javascript\nconst findSmallest7 = (numbers) => {\n    return numbers.filter(x => x.length === numbers[0].length && isPrime(x))\n}\n\n// https://www.codewars.com/kata/find-the-smallest-number-in-an-array/train/javascript\nconst findSmallest8 = (numbers) => {\n    return numbers.filter(x => x.length === numbers[0].length && x.length === numbers[0].length && isPrime(x))\n}\n\n// https://www.codewars.com/kata/find-the-smallest-number-in-an-array/train/javascript\nconst findSmallest9 = (numbers) => {\n    return numbers.filter(x => x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && isPrime(x))\n}\n\n// https://www.codewars.com/kata/find-the-smallest-number-in-an-array/train/javascript\nconst findSmallest10 = (numbers) => {\n    return numbers.filter(x => x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && isPrime(x))\n}\n\n// https://www.codewars.com/kata/find-the-smallest-number-in-an-array/train/javascript\nconst findSmallest11 = (numbers) => {\n    return numbers.filter(x => x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && isPrime(x))\n}\n\n// https://www.codewars.com/kata/find-the-smallest-number-in-an-array/train/javascript\nconst findSmallest12 = (numbers) => {\n    return numbers.filter(x => x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && isPrime(x))\n}\n\n// https://www.codewars.com/kata/find-the-smallest-number-in-an-array/train/javascript\nconst findSmallest13 = (numbers) => {\n    return numbers.filter(x => x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && isPrime(x))\n}\n\n// https://www.codewars.com/kata/find-the-smallest-number-in-an-array/train/javascript\nconst findSmallest14 = (numbers) => {\n    return numbers.filter(x => x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length && x.length === numbers[0].length &&"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n}\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @example\n  *   add(2, 3)\n  *   // => 5\n  */\nconst sub = (x, y) => {\n  return x - y;\n}\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @example\n  *   add(5, 7)\n  *   // => 12\n  */\nconst mult = (x, y) => {\n  return x * y;\n}\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @example\n  *   add(5, 7)\n  *   // => 12\n  */\nconst div = (x, y) => {\n  return x / y;\n}\n\nexport { add, sub, mult, div }\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len0 = s0.length;\n  const len1 = s1.length;\n  const a = [];\n  let i = 0;\n  while (i < len0) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n    a.push(s0.charAt(i));\n    i++;\n  }\n  if (i!== len1) {\n    return false;\n  }\n  return a.every(c => s1.indexOf(c)!== -1);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 0, b = 1;\n  while (n--) {\n    a = b, b = a + b;\n  }\n  return a;\n}\n\nconsole.log(fib(20));\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = [];\n\n  for (const character of brackets) {\n    if (character === \"<\") {\n      stack.push(\"<\");\n    } else if (character === \">\") {\n      stack.pop();\n    }\n  }\n\n  return stack.length === 0;\n};\n\n/**\n  * A test function.\n  *\n  * The function will return a boolean indicating if the brackets are correctly paired.\n  */\nconst bracketsAreCorrect = brackets => correctBracketing(brackets);\n\nmodule.exports = bracketsAreCorrect;\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const last = l.slice(-1)[0]\n  return l.every((e) => e > last)\n}\n\nmodule.exports = monotonic\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  const isEqual = (x, y) => {\n    return (x === y) || (isNaN(x) && isNaN(y));\n  };\n  const isCommon = (x, y) => {\n    return (x === y) || (isNaN(x) && isNaN(y));\n  };\n  l1.forEach((item, index) => {\n    if (isEqual(item, l2[index])) {\n      result.push(item);\n    }\n  });\n  l2.forEach((item, index) => {\n    if (isEqual(item, l1[index])) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": false, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\n  let factor = 1\n  let i = 1\n  while (i <= n) {\n    if (n % primes[i - 1] === 0) {\n      factor *= primes[i - 1]\n      n = n / primes[i - 1]\n    } else {\n      i += 1\n    }\n  }\n  return factor\n}\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n + Math.floor(Math.pow(2, n)) - 1;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconsole.log(sumToN(30));\nconsole.log(sumToN(100));\nconsole.log(sumToN(5));\nconsole.log(sumToN(10));\nconsole.log(sumToN(1));\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = brackets.split(\"()\").map(function(element) {\n    return element.split(\"(\").map(function(element) {\n      return element.split(\")\").map(function(element) {\n        return element.trim();\n      });\n    });\n  });\n  let stackLength = stack.length;\n  stack.forEach(function(element) {\n    let lastElement = element.pop();\n    if (element.length === 0) {\n      if (stack.length === stackLength) {\n        return true;\n      }\n      return false;\n    }\n    if (element.length === 1 && lastElement === \"(\" && element[0] === \")\") {\n      return true;\n    }\n    if (element.length === 1 && lastElement === \"(\" && element[0] === \")\") {\n      return false;\n    }\n    return false;\n  });\n  return stack.every(function(element) {\n    return element.every(function(element) {\n      return element === \"(\" || element === \")\";\n    });\n  });\n};\n\nconst bracketed = (expression) => {\n  let brackets = [];\n  let open = 0;\n  let close = 0;\n  let index = 0;\n  while (index < expression.length) {\n    if (expression[index] === \"(\") {\n      open++;\n    } else if (expression[index] === \")\") {\n      close++;\n    } else {\n      brackets.push(expression[index]);\n    }\n    index++;\n  }\n  return { brackets: brackets, open: open, close: close };\n};\n\nconst validate = (expression) => {\n  if (expression.length === 0) {\n    return false;\n  }\n  let brackets = [];\n  let open = 0;\n  let close = 0;\n  let index = 0;\n  while (index < expression.length) {\n    if (expression[index] === \"(\") {\n      open++;\n    } else if (expression[index] === \")\") {\n      close++;\n    } else {\n      brackets.push(expression[index]);\n    }\n    index++;\n  }\n  if (open!== close) {\n    return false;\n  }\n  return brackets.every(function(element) {\n    return correctBracketing(element);\n  });\n};\n\nconst solve = (expression) => {\n  if (validate(expression)) {\n    let brackets = bracketed(expression);\n    return brackets.open + brackets.close;\n  }\n  return -1;\n};\n\nconst test = () => {\n  let testCases = [\n    \"((()))\",\n    \"(()()())\",\n    \"()(())()\",\n    \"(()(()(())))\",\n    \"(()()()(()))\",\n    \"(())()()\",\n    \"(()()())\",\n    \"(())()\",\n    \"((()))\",\n    \"(()())\",\n    \"((()()))\",\n    \"(()()())\",\n    \"((()))\",\n    \"(()())\",\n    \"(()(()()))\",\n    \"(()()())\",\n    \"(()()())\",\n    \"(()())\",\n    \"(()(()))\",\n    \"(()()())\",\n    \"(())()\",\n    \"((()))\",\n    \"(()())\",\n    \"(()()())\",\n    \"(())()\",\n    \"(()())\",\n    \"(()()())\",\n    \"(())()\",\n    \"(())()\",\n    \"(()())\",\n    \"(())()\",\n    \"(()()())\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n    \"(())()\",\n"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n    const size = xs.length;\n    if (size < 2) return xs;\n    const dxs = [];\n    dxs[0] = 1;\n    dxs[1] = xs[1];\n    for (let i = 2; i < size; i++) {\n        dxs[i] = xs[i] + (i - 1) * dxs[i - 1];\n    }\n    return dxs;\n};\n\nexport default derivative;\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    if (n === 2) return 1\n    let prev = 0\n    let current = 1\n    for (let i = 3; i < n; i++) {\n        current = prev + current\n        prev = current\n    }\n    return current\n}\n\nconst fibfib2 = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    let fib = [0, 1]\n    for (let i = 2; i < n; i++) {\n        fib.push(fib[i - 1] + fib[i - 2])\n    }\n    return fib[n - 1]\n}\n\nconst fibfib3 = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    let fib = [0, 1]\n    for (let i = 2; i < n; i++) {\n        fib.push(fib[i - 1] + fib[i - 2])\n    }\n    return fib[n - 1]\n}\n\nconst fibfib4 = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    let fib = [0, 1]\n    let prev = 0\n    let current = 1\n    for (let i = 2; i < n; i++) {\n        current = fib[i - 1] + prev\n        fib.push(current)\n        prev = current\n    }\n    return fib[n - 1]\n}\n\nconst fibfib5 = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    let fib = [0, 1]\n    let prev = 0\n    let current = 1\n    for (let i = 2; i < n; i++) {\n        current = fib[i - 1] + prev\n        fib.push(current)\n        prev = current\n    }\n    return fib[n - 1]\n}\n\nconsole.log(fibfib(5))\nconsole.log(fibfib2(5))\nconsole.log(fibfib3(5))\nconsole.log(fibfib4(5))\nconsole.log(fibfib5(5))<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  return s.split('').filter(v => {\n    return vowels[v]\n  }).length\n}\n\n/*\nWrite a functions wordsCount which takes a string represents a words as input and returning the number of words in the string. A word is a string of characters separated by spaces.\n  */\nconst wordsCount = (s) => {\n  return s.split('').length\n}\n\n/*\nWrite a functions stringToSentence which takes a string represents a words as input and returning a string which represents a sentence. A sentence is a string of words separated by spaces.\n  */\nconst stringToSentence = (s) => {\n  let wordCount = 0\n  let words = []\n  let sentence = ''\n  for (let i = 0; i < s.length; i++) {\n    if (vowels[s[i]]) {\n      if (words.length > 0) {\n        sentence +=''\n      }\n      words.push(s[i])\n      wordCount++\n    } else if (s[i] ==='') {\n      if (words.length > 0) {\n        sentence +=''\n      }\n      words.push(s[i])\n      wordCount++\n    } else {\n      if (words.length > 0) {\n        sentence +=''\n      }\n      words.push(s[i])\n    }\n  }\n  sentence +=''\n  sentence += words.join('')\n  return sentence\n}\n\n/*\nWrite a functions stringToSentenceWithSpace which takes a string represents a words as input and returning a string which represents a sentence. A sentence is a string of words separated by spaces.\n  */\nconst stringToSentenceWithSpace = (s) => {\n  let wordCount = 0\n  let words = []\n  let sentence = ''\n  for (let i = 0; i < s.length; i++) {\n    if (vowels[s[i]]) {\n      if (words.length > 0) {\n        sentence +=''\n      }\n      words.push(s[i])\n      wordCount++\n    } else if (s[i] ==='') {\n      if (words.length > 0) {\n        sentence +=''\n      }\n      words.push(s[i])\n      wordCount++\n    } else {\n      if (words.length > 0) {\n        sentence +=''\n      }\n      words.push(s[i])\n    }\n  }\n  sentence +=''\n  sentence += words.join('')\n  return sentence\n}\n\n/*\nWrite a functions stringToWords which takes a string represents a words as input and returning a string which represents the words. Words are separated by spaces.\n  */\nconst stringToWords = (s) => {\n  let wordCount = 0\n  let words = []\n  for (let i = 0; i < s.length; i++) {\n    if (vowels[s[i]]) {\n      if (words.length > 0) {\n        words.push(' ')\n      }\n      words.push(s[i])\n      wordCount++\n    } else if (s[i] ==='') {\n      if (words.length > 0) {\n        words.push(' ')\n      }\n      words.push(s[i])\n      wordCount++\n    } else {\n      if (words.length > 0) {\n        words.push(' ')\n      }\n      words.push(s[i])\n    }\n  }\n  return words.join('')\n}\n\n/*\nWrite a functions stringToWordsWithSpace which takes a string represents a words as input and returning a string which represents the words. Words are separated by spaces.\n  */\nconst stringToWordsWithSpace = (s) => {\n  let wordCount = 0\n  let words = []\n  for (let i = 0; i < s.length; i++) {\n    if (vowels[s[i]]) {\n      if (words.length > 0) {\n        words.push(' ')\n      }\n      words.push(s[i])\n      wordCount++\n    } else if (s[i] ==='') {\n      if (words.length > 0) {\n        words.push(' ')\n      }\n      words.push(s[i])\n      wordCount++\n    } else {\n      if (words.length > 0) {\n        words.push(' ')\n      }\n      words.push(s[i])\n    }\n  }\n  return words.join('')\n}\n\n/*\nWrite a functions stringToWordsWithSpaceAndVowels which takes a string represents a words as input and returning a string which represents the words. Words are separated by spaces.\n  */\nconst stringToWordsWithSpaceAndVowels = (s) => {\n  let wordCount = 0\n  let words = []\n  for (let i = 0; i < s.length; i++) {\n    if (vowels[s[i]]) {\n      if (words.length > 0) {\n        words.push(' ')\n      }\n      words.push(s[i])\n      wordCount++\n    } else if (s[i] ==='') {\n      if (words.length > 0) {\n        words.push(' ')\n      }\n      words.push(s[i])\n      wordCount++\n    } else {\n      if (words.length > 0) {\n        words.push(' ')\n      }\n      words.push(s[i])\n    }\n  }\n  return words.join('')\n}\n\n/*\nWrite a functions stringToWordsWithSpaceAndVowelsThatAreUppercase which takes a string represents a words as input and returning a string which represents the words. Words are separated by spaces.\n  */\nconst stringToWordsWithSpaceAndVowelsThatAreUppercase = (s) => {\n  let wordCount = 0\n  let words ="}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const length = x.length\n  const shiftLength = length - shift\n  let res = ''\n  for (let i = 0; i < shiftLength; i++) {\n    res += x[length - i - 1]\n  }\n  return res + x[0]\n}\n\n/**\n  * @param {number} n\n  * @param {number} m\n  * @return {number}\n  * @description Given a non negative integer n and an integer m, return the sum of n and m.\n  * Note: n may be larger than m.\n  *\n  * Examples:\n  *\n  *  >>> add(4, 5)\n  *  9\n  *  >>> add(8, 4)\n  * 12\n  */\nconst add = (n, m) => {\n  return n + m\n}\n\n/**\n  * @param {number} n\n  * @param {number} m\n  * @return {number}\n  * @description Given two non negative integers n and m, return the sum of n and m.\n  * Note: n may be larger than m.\n  *\n  * Examples:\n  *\n  *  >>> sum(4, 5)\n  * 9\n  *  >>> sum(8, 4)\n  * 12\n  */\nconst sum = (n, m) => {\n  return n + m\n}\n\nmodule.exports = {\n  add,\n  circularShift,\n  sum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  s.split(\"\").forEach(digit => {\n    sum += (digit - \"0\").toString().length;\n  });\n  return sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  let fruit_list = [\n    'apple',\n    'orange',\n   'mango'\n  ]\n  let total_fruit = 0\n  fruit_list.forEach(fruit => {\n    total_fruit = total_fruit + parseInt(fruit)\n  })\n  let total_fruit_distributed = 0\n  let total_fruit_in_basket = 0\n  let fruit_in_basket = 0\n  if (s > total_fruit) {\n    return total_fruit\n  } else {\n    let s_array = s.toString().split(\" \")\n    s_array.forEach(element => {\n      fruit_in_basket = parseInt(element)\n      if (fruit_in_basket > 0) {\n        total_fruit_in_basket = total_fruit_in_basket + fruit_in_basket\n        total_fruit_distributed = total_fruit_distributed + fruit_in_basket\n      }\n    })\n    if (total_fruit_distributed == total_fruit) {\n      return total_fruit_distributed\n    } else {\n      return total_fruit\n    }\n  }\n}\n\nconst test_fruit_distribution = (fruit, total_fruit) => {\n  fruit_distribution(fruit, total_fruit)\n}\n\nconsole.log(test_fruit_distribution(\"5 apple and 6 oranges\", 19))\nconsole.log(test_fruit_distribution(\"0 apple and 1 oranges\", 3))\nconsole.log(test_fruit_distribution(\"2 apple and 3 oranges\", 100))\nconsole.log(test_fruit_distribution(\"100 apple and 1 oranges\", 120))\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const result = [];\n\n  if (sorted.length === 0) {\n    return result;\n  }\n\n  let node = sorted[0];\n  while (node.value!== 0) {\n    result.push([node.value, node.index]);\n    node = sorted[sorted.indexOf(node) + 1];\n  }\n\n  return result;\n};\n\nexport { pluck };\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let maxFreq = 0;\n  let maxIndex = -1;\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] > maxFreq) {\n      maxFreq = lst[i];\n      maxIndex = i;\n    }\n  }\n\n  return maxIndex;\n};\n\n/*\n  You were given a non-emptiest list of positive integers. Return the greatest integer that is not in the list.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 5\n      search([5, 5, 4, 4, 4])) == 5\n  */\nconst searchUniq = (lst) => {\n  let max = -1;\n  let maxIndex = -1;\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\n  return maxIndex;\n};\n\n/*\n  Given a non-empty list of positive integers, return the index of the first number which is equal to its cumulative sum. Return -1 if no such index exists.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 5\n      search([5, 5, 4, 4, 4])) == 5\n  */\nconst searchCumulativeSum = (lst) => {\n  let sum = 0;\n  let sumIndex = 0;\n\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (sum > lst[i]) {\n      sumIndex = i;\n      break;\n    }\n  }\n\n  return sumIndex;\n};\n\nconst searchCumulativeSumUniq = (lst) => {\n  let sum = 0;\n  let sumIndex = 0;\n\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (sum > lst[i]) {\n      sumIndex = i;\n      break;\n    }\n  }\n\n  return sumIndex;\n};\n\nexport {\n  search,\n  searchUniq,\n  searchCumulativeSum,\n  searchCumulativeSumUniq,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (!lst || lst.length === 0) return [];\n\n  const len = lst.length;\n  const list = [];\n\n  for (let i = 0; i < len; i++) {\n    list.push(lst[i]);\n  }\n\n  list.sort((a, b) => {\n    if (a === b) return 0;\n    if (a < b) return -1;\n    return 1;\n  });\n\n  return list;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  //Check if the three side forming a valid triangles\n  if (a + b > c && b + c > a && c + a > b) {\n    //Calculate the area\n    return ((a + b + c) / 2).toFixed(2);\n  }\n  return -1;\n}\n\n/*\n  Calculates the area of a square.\n  */\nconst squareArea = (a, b) => {\n  //Check if the two side forming a valid squares\n  if (a + b > 0 && a + b > 0) {\n    //Calculate the area\n    return a * b;\n  }\n  return -1;\n}\n\n/*\n  Calculates the area of a circle.\n  */\nconst circleArea = (radius, d) => {\n  //Calculate the area\n  return Math.PI * Math.pow(radius, 2) * d;\n}\n\n/*\n  Returns the area of a triangle formed by 3 points\n  */\nconst triangleArea = (a, b, c) => {\n  return (Math.pow((a.x - b.x), 2) + Math.pow((a.y - b.y), 2)) / 2;\n}\n\n/*\n  Calculates the area of a square with the specified side.\n  */\nconst squareArea = (side, d) => {\n  return Math.pow(side, 2) * d;\n}\n\n/*\n  Calculates the area of a circle with the specified radius.\n  */\nconst circleArea = (radius, d) => {\n  return Math.PI * Math.pow(radius, 2) * d;\n}\n\n/*\n  Returns the area of a triangle formed by 3 points\n  */\nconst triangleArea = (a, b, c) => {\n  return (Math.pow((a.x - b.x), 2) + Math.pow((a.y - b.y), 2)) / 2;\n}\n\n/*\n  Calculates the area of a square with the specified side.\n  */\nconst squareArea = (side, d) => {\n  return Math.pow(side, 2) * d;\n}\n\n/*\n  Calculates the area of a circle with the specified radius.\n  */\nconst circleArea = (radius, d) => {\n  return Math.PI * Math.pow(radius, 2) * d;\n}\n\n/*\n  Calculates the area of a triangle formed by 3 points\n  */\nconst triangleArea = (a, b, c) => {\n  return (Math.pow((a.x - b.x), 2) + Math.pow((a.y - b.y), 2)) / 2;\n}\n\n/*\n  Calculates the area of a square with the specified side.\n  */\nconst squareArea = (side, d) => {\n  return Math.pow(side, 2) * d;\n}\n\n/*\n  Calculates the area of a circle with the specified radius.\n  */\nconst circleArea = (radius, d) => {\n  return Math.PI * Math.pow(radius, 2) * d;\n}\n\n/*\n  Calculates the area of a triangle formed by 3 points\n  */\nconst triangleArea = (a, b, c) => {\n  return (Math.pow((a.x - b.x), 2) + Math.pow((a.y - b.y), 2)) / 2;\n}\n\n/*\n  Calculates the area of a square with the specified side.\n  */\nconst squareArea = (side, d) => {\n  return Math.pow(side, 2) * d;\n}\n\n/*\n  Calculates the area of a circle with the specified radius.\n  */\nconst circleArea = (radius, d) => {\n  return Math.PI * Math.pow(radius, 2) * d;\n}\n\n/*\n  Returns the area of a triangle formed by 3 points\n  */\nconst triangleArea = (a, b, c) => {\n  return (Math.pow((a.x - b.x), 2) + Math.pow((a.y - b.y), 2)) / 2;\n}\n\n/*\n  Calculates the area of a square with the specified side.\n  */\nconst squareArea = (side, d) => {\n  return Math.pow(side, 2) * d;\n}\n\n/*\n  Calculates the area of a circle with the specified radius.\n  */\nconst circleArea = (radius, d) => {\n  return Math.PI * Math.pow(radius, 2) * d;\n}\n\n/*\n  Returns the area of a triangle formed by 3 points\n  */\nconst triangleArea = (a, b, c) => {\n  return (Math.pow((a.x - b.x), 2) + Math.pow((a.y - b.y), 2)) / 2;\n}\n\n/*\n  Calculates the area of a square with the specified side.\n  */\nconst squareArea = (side, d) => {\n  return Math.pow(side, 2) * d;\n}\n\n/*\n  Calculates the area of a circle with the specified radius.\n  */\nconst circleArea = (radius, d) => {\n  return Math.PI * Math.pow(radius, 2) * d;\n}\n\n/*\n  Returns the area of a triangle formed by 3 points\n  */\nconst triangleArea = (a, b, c) => {\n  return (Math.pow((a.x - b.x), 2) + Math.pow((a.y - b.y), 2)) / 2;\n}\n\n/*\n  Calculates the area of a square with the specified side.\n  */\nconst squareArea = (side, d) => {\n  return Math.pow(side, 2) * d;\n}\n\n/*\n  Calculates the area of a circle with the specified radius.\n  */\nconst circleArea = (radius,"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n    let s = 0;\n    for (let i = 0; i < q.length - 1; i++) {\n        s += q[i];\n    }\n    if (s > w) {\n        return false;\n    } else {\n        for (let i = 0; i < q.length - 1; i++) {\n            s -= q[q.length - 1 - i];\n        }\n        return s <= w;\n    }\n};\n\n/*\n  Returns a function that returns a trueer if the object q will flied, and false otherwise. The object q will flied if the object q will be the biggest palindromic list in a balanced sum.\n\n  Example:\n  findMaxPalindrome([1, 2, 3, 4]) ➞ false\n  # 2+3+4 is not the biggest palindrome, but it is unbalanced.\n\n  findMaxPalindrome([1, 2, 3, 4, 5]) ➞ true\n  # 5 is the biggest palindrome, and it is balanced.\n\n  findMaxPalindrome([1, 2, 3, 4, 5, 6]) ➞ true\n  # 6 is the biggest palindrome, and it is balanced.\n  */\nconst findMaxPalindrome = q => (a, b, c) => {\n    let w = [a, b, c];\n    let s = 0;\n    for (let i = 0; i < w.length - 1; i++) {\n        s += w[i];\n    }\n    if (s > b) {\n        return false;\n    } else {\n        for (let i = 0; i < w.length - 1; i++) {\n            s -= w[w.length - 1 - i];\n        }\n        return s <= b;\n    }\n};\n\n/*\n  Returns a function that returns a trueer if the object q will flied, and false otherwise. The object q will flied if the object q will be the biggest palindromic list in a balanced sum.\n\n  Example:\n  findMaxPalindrome([1, 2, 3, 4, 5]) ➞ true\n  # 5 is the biggest palindrome, and it is balanced.\n  */\nconst isBalanced = q => (a, b, c) => {\n    let w = [a, b, c];\n    let s = 0;\n    for (let i = 0; i < w.length - 1; i++) {\n        s += w[i];\n    }\n    return s <= b;\n};\n\n/*\n  Returns a function that returns a trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlyBalanced = q => (a, b, c) => {\n    let s = 0;\n    for (let i = 0; i < q.length - 1; i++) {\n        s += q[i];\n    }\n    if (s > b) {\n        return false;\n    } else {\n        for (let i = 0; i < q.length - 1; i++) {\n            s -= q[q.length - 1 - i];\n        }\n        return s <= b;\n    }\n};\n\n/*\n  Returns a function that returns a trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  findMaxPalindromeBalanced([1, 2, 3, 4]) ➞ false\n  # 2+3+4 is not the biggest palindrome, but it is unbalanced.\n\n  findMaxPalindromeBalanced([1, 2, 3, 4, 5]) ➞ true\n  # 5 is the biggest palindrome, and it is balanced.\n\n  findMaxPalindromeBalanced([1, 2, 3, 4, 5, 6]) ➞ true\n  # 6 is the biggest palindrome, and it is balanced.\n  */\nconst findMaxPalindromeBalanced = q => (a, b, c) => {\n    let w = [a, b, c];\n    let s = 0;\n    for (let i = 0; i < w.length - 1; i++) {\n        s += w[i];\n    }\n    if (s > b) {\n        return false;\n    } else {\n        for (let i = 0; i < w.length - 1; i++) {\n            s -= w[w.length - 1 - i];\n        }\n        return s <= b;\n    }\n};\n\nexport {\n    findMaxPalindrome,\n    findMaxPalindromeBalanced,\n    willItFly,\n    willItFlyBalanced,\n    isBalanced,\n"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i <= j) {\n    if (arr[i]!== arr[j]) {\n      count += 1;\n      i += 1;\n      j -= 1;\n    } else {\n      j -= 1;\n    }\n  }\n  return count;\n};\n\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 4, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2, 1, 2]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2, 1, 2, 3]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const total = lst1.length + lst2.length\n  if (total === lst1.length) return lst1\n  if (total === lst2.length) return lst2\n  const diff = Math.abs(lst1.length - lst2.length)\n  const index1 = Math.max(0, Math.min(lst1.length, lst2.length - diff))\n  const index2 = Math.max(0, Math.min(lst1.length, lst2.length + diff))\n  const match = lst1.slice(index1, index2)\n  return match\n}\n\n/*\n  Print the list of string in the console\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst print = (lst) => {\n  const total = lst.length\n  const index = Math.max(0, Math.min(total, lst.length - 1))\n  const match = lst.slice(index)\n  console.log(match)\n}\n\n/*\n  Print the list of string in the console\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total = (lst1, lst2) => {\n  const total = lst1.length + lst2.length\n  return total\n}\n\nmodule.exports = {\n  totalMatch,\n  print,\n  total\n}\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n    const isPrime = (n) => {\n        const sqrt = Math.sqrt(n);\n        for (let i = 2; i <= sqrt; i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    };\n    const isPrime2 = (n) => {\n        let i = 2;\n        while (i <= Math.sqrt(n)) {\n            if (n % i == 0) return false;\n            i++;\n        }\n        return true;\n    };\n    const isPrime3 = (n) => {\n        let i = 2;\n        while (i <= Math.sqrt(n)) {\n            if (n % i == 0) return false;\n            if (n % (i + 2) == 0) return false;\n            i += 3;\n        }\n        return true;\n    };\n    const isPrime4 = (n) => {\n        let i = 2;\n        while (i <= Math.sqrt(n)) {\n            if (n % i == 0) return false;\n            if (n % (i + 2) == 0) return false;\n            if (n % (i + 3) == 0) return false;\n            i += 4;\n        }\n        return true;\n    };\n    const isPrime5 = (n) => {\n        let i = 2;\n        while (i <= Math.sqrt(n)) {\n            if (n % i == 0) return false;\n            if (n % (i + 2) == 0) return false;\n            if (n % (i + 3) == 0) return false;\n            if (n % (i + 4) == 0) return false;\n            i += 5;\n        }\n        return true;\n    };\n    if (isPrime(a)) {\n        let result = a;\n        let count = 0;\n        do {\n            if (isPrime(result)) {\n                count++;\n            }\n            result = a * result;\n        } while (result < 100);\n        if (count > 1) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst isPrime = (a) => {\n    let i = 2;\n    while (i <= Math.sqrt(a)) {\n        if (a % i == 0) return false;\n        i += 1;\n    }\n    return true;\n};\n\nconst isPrime2 = (a) => {\n    let i = 2;\n    while (i <= Math.sqrt(a)) {\n        if (a % i == 0) return false;\n        i += 2;\n    }\n    return true;\n};\n\nconst isPrime3 = (a) => {\n    let i = 2;\n    while (i <= Math.sqrt(a)) {\n        if (a % i == 0) return false;\n        if (a % (i + 2) == 0) return false;\n        i += 3;\n    }\n    return true;\n};\n\nconst isPrime4 = (a) => {\n    let i = 2;\n    while (i <= Math.sqrt(a)) {\n        if (a % i == 0) return false;\n        if (a % (i + 2) == 0) return false;\n        if (a % (i + 3) == 0) return false;\n        i += 4;\n    }\n    return true;\n};\n\nconst isPrime5 = (a) => {\n    let i = 2;\n    while (i <= Math.sqrt(a)) {\n        if (a % i == 0) return false;\n        if (a % (i + 2) == 0) return false;\n        if (a % (i + 3) == 0) return false;\n        if (a % (i + 4) == 0) return false;\n        i += 5;\n    }\n    return true;\n};\n\nconst isPrime6 = (a) => {\n    let i = 2;\n    while (i <= Math.sqrt(a)) {\n        if (a % i == 0) return false;\n        if (a % (i + 2) == 0) return false;\n        if (a % (i + 3) == 0) return false;\n        if (a % (i + 4) == 0) return false;\n        if (a % (i + 5) == 0) return false;\n        i += 6;\n    }\n    return true;\n};\n\nconst isPrime7 = (a) => {\n    let i = 2;\n    while (i <= Math.sqrt(a)) {\n        if (a % i == 0) return false;\n        if (a % (i + 2) == 0) return false;\n        if (a % (i + 3) == 0) return false;\n        if (a % (i + 4) == 0) return false;\n        if (a % (i + 5) == 0) return false;\n        if (a % (i + 6) == 0) return false;\n        i += 7;\n    }\n    return true;\n};\n\nconst isPrime8 = (a) => {\n    let i = 2;\n    while (i <= Math.sqrt(a)) {\n        if (a % i == 0) return false;\n        if (a % (i + 2) == 0) return false;\n        if (a % (i + 3) == 0) return false;\n        if (a % (i + 4) == 0) return false;\n        if (a % (i + 5) == 0) return false;\n        if (a % (i + 6) == 0) return false;\n        if (a % (i + 7) == 0) return false;\n        i += 8;\n    }\n    return true;\n};\n\nconst isPrime9 = (a) => {\n    let i = 2;\n    while (i <= Math.sqrt(a)) {\n        if (a % i == 0) return false;\n        if (a % (i + 2) == 0) return false;\n        if (a % (i + 3) == 0) return false;\n        if (a % (i + 4) == 0) return false;\n        if (a"}
{"task_id": "JavaScript/76", "prompt": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  const num = n\n   .toString()\n   .split('')\n   .map((ch, i) => parseInt(ch, 10))\n   .reduce((acc, curr) => acc * curr, 1)\n   .toString()\n   .split('')\n   .map((ch, i) => parseInt(ch, 10));\n\n  if (x.indexOf(num) === -1) {\n    return false;\n  }\n  return num.reduce((acc, curr, i) => acc * curr, 1) === x;\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n    if (a % 3 === 0) return true;\n    if (a % 5 === 0) return true;\n    if (a % 7 === 0) return true;\n    return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n    let digit = parseInt(num, 16);\n    let prime = 0;\n    let counter = 0;\n    while (digit) {\n        if (digit % 2 === 0) {\n            prime++;\n        }\n        digit = (digit - 1) / 2;\n        counter++;\n    }\n    return counter;\n}\n\nconst numberOfPrimeDigits = (num) => {\n    return parseInt(num, 16).toString(2).length;\n}\n\nconst hexadecimalDigits = (num) => {\n    return parseInt(num, 16).toString(16);\n}\n\nconst primeDigits = (num) => {\n    let primeDigits = [];\n    for (let i = 0; i < num; i++) {\n        let prime = true;\n        for (let j = 0; j < primeDigits.length; j++) {\n            if (primeDigits[j] === i) {\n                prime = false;\n            }\n        }\n        if (prime) {\n            primeDigits.push(i);\n        }\n    }\n    return primeDigits;\n}\n\nconst main = () => {\n    let input = \"\";\n    while (input.length < 1) {\n        input = (Math.random() * 0xFFFF | 0).toString(16);\n    }\n    let number = parseInt(input, 16);\n    let digits = number.toString(16);\n    let primeDigits = primeDigits(number);\n    let prime = (numberOfPrimeDigits(number) === digits.length);\n    console.log(primeDigits);\n    console.log(prime);\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let b = decimal;\n  let remainder = b;\n  while (remainder >= 2) {\n    binary += \"db\";\n    remainder -= 2;\n  }\n  if (remainder === 1) {\n    binary += \"1\";\n    remainder--;\n  }\n  if (remainder === 1) {\n    binary += \"0\";\n  }\n  return binary;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let remainder = binary.charAt(0);\n  while (remainder === \"1\") {\n    decimal += 2;\n    remainder = binary.charAt(1);\n  }\n  if (remainder === \"0\") {\n    decimal += 1;\n  }\n  binary = binary.substring(2, binary.length);\n  return decimal + binaryToDecimal(binary);\n};\n\nconsole.log(binaryToDecimal(\"db1111db\"));\nconsole.log(binaryToDecimal(\"db100000db\"));\n\n//Explanation\n//decimalToBinary(15) = \"db1111db\"\n//decimalToBinary(32) = \"db100000db\"\n//binaryToDecimal(\"db1111db\") = 15\n//binaryToDecimal(\"db100000db\") = 32\n\n//Hint\n//Keep in mind that we are working with a string. You are not allowed to modify the string.\n//Hint\n//Use the toString() method to return a string with each character represents a binary number.\n//Hint\n//Use the binaryToDecimal() function to convert a binary string to a decimal number.\n//Hint\n//Use the decimalToBinary() function to convert a decimal number to a binary string.<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const length = s.length;\n  if (length < 3) {\n    return false;\n  }\n  const count = s.split('').reduce((a, b, i) => {\n    if (a === 0) {\n      return b;\n    }\n    return a + b;\n  }, 0);\n  const difference = Math.abs(count - length);\n  return difference <= 2 && count >= length;\n};\n\nconsole.log(isHappy('happy'));\nconsole.log(isHappy('happy'));\nconsole.log(isHappy('happy'));\nconsole.log(isHappy('happy'));\nconsole.log(isHappy('happy'));\nconsole.log(isHappy('happy'));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradeList = [];\n  for (let i = 0; i < grades.length; i++) {\n    const currentGrade = grades[i];\n    const grade = `${currentGrade.GPA} | ${currentGrade.letterGrade}`;\n    gradeList.push(grade);\n  }\n  return gradeList;\n};\n\n/*\n  https://www.hackerrank.com/challenges/the-lonely-lady/problem\n  Given a string, find the number of unique characters in the string.\n\n  Example:\n  charFrequency('abcde') -> 5\n  charFrequency('aaaaa') -> 5\n  charFrequency('abcd') -> 2\n  */\nconst charFrequency = (str) => {\n  const alphabet = new Set(str.split('').map(x => x));\n  return alphabet.size;\n};\n\n/*\n  https://www.hackerrank.com/challenges/the-lonely-lady/problem\n  Given a string, compute the number of distinct subsequences.\n  A subsequence is a sequence that is derived from the original string\n  by deleting some number of characters without repeating any character.\n\n  Example:\n  charFrequency('abcde') -> 4\n  charFrequency('aaaaa') -> 5\n  charFrequency('abcd') -> 3\n  charFrequency('aaaa') -> 4\n  */\nconst charFrequency2 = (str) => {\n  let i = 0,\n    j = 0,\n    charCount = 0,\n    result = 0;\n  while (i < str.length) {\n    while (j < str.length && str.charAt(j) === str.charAt(i)) {\n      j++;\n    }\n    charCount++;\n    j = i;\n    i++;\n    result += charCount;\n  }\n  return result;\n};\n\n/*\n  https://www.hackerrank.com/challenges/the-lonely-lady/problem\n  Given an array of numbers, compute the number of distinct subsequences.\n  A subsequence is a sequence that is derived from the original array\n  by deleting some number of elements from the array without repeating any element.\n  Subsequences of length 1 and subsequences of length 0 are not allowed.\n\n  Example:\n  charFrequency([2, 3, 1, 4, 6]) -> 6\n  charFrequency([1, 2, 3, 4, 5]) -> 5\n  charFrequency([1, 2, 3, 4]) -> 4\n  charFrequency([1, 2]) -> 2\n  charFrequency([1]) -> 1\n  charFrequency([]) -> 0\n  */\nconst charFrequency3 = (arr) => {\n  let i = 0,\n    j = 0,\n    k = 0,\n    count = 0,\n    result = 0;\n  while (i < arr.length) {\n    if (j < arr.length) {\n      while (k < arr.length && arr[k] === arr[j]) {\n        k++;\n      }\n      if (k === arr.length) {\n        count++;\n        k = j;\n      }\n      j++;\n    } else if (j === arr.length) {\n      count++;\n      k = 0;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  https://www.hackerrank.com/challenges/the-lonely-lady/problem\n  Given an array of numbers, compute the number of distinct subsets.\n  A subset is a collection of elements that is derived from the original array\n  by deleting some number of elements without repeating any element.\n  Subsets of length 1 and subsets of length 0 are not allowed.\n\n  Example:\n  charFrequency([2, 3, 1, 4, 6]) -> 6\n  charFrequency([1, 2, 3, 4, 5]) -> 5\n  charFrequency([1, 2, 3, 4]) -> 4\n  charFrequency([1, 2]) -> 2\n  charFrequency([1]) -> 1\n  charFrequency([]) -> 0\n  */\nconst charFrequency4 = (arr) => {\n  let i = 0,\n    j = 0,\n    count = 0,\n    result = 0;\n  while (i < arr.length) {\n    if (j < arr.length) {\n      count += 1;\n      while (i < arr.length && j < arr.length && arr[i] === arr[j]) {\n        i++;\n        j++;\n      }\n      i = j;\n    } else if (j === arr.length) {\n      count += 1;\n      i = 0;\n    }\n  }\n  return count;\n};\n\n/*\n  https://www.hackerrank.com/challenges/the-lonely-lady/problem\n  Given a string, compute the number of distinct characters in the string.\n\n  Example:\n  charFrequency('abcde') -> 5\n  charFrequency('aaaaa') -> 5\n  charFrequency('abcd') -> 2\n  */\nconst charFrequency5 = (str) => {\n  let i = 0,\n    j = 0,\n    count = 0,\n    result = 0;\n  while (i < str.length) {\n    if (j < str.length) {\n      while (i < str.length && j < str.length && str.charAt(i) === str.charAt(j)) {\n        i++;\n        j++;\n      }\n      i = j;\n    } else if (j === str.length) {\n      count++;\n      j ="}
{"task_id": "JavaScript/82", "prompt": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let primeNumber = false;\n  for (let i = 2; i < string.length; i++) {\n    if (string.length % i === 0) {\n      primeNumber = false;\n      break;\n    }\n  }\n  return primeNumber;\n};\n\n/*\nWrite a function that takes a number and returns the next prime number greater than or equal to the number\n  Examples\n  nextPrime(6) == 8\n  nextPrime(9) == 11\n  nextPrime(20) == 23\n  nextPrime(500) == 511\n  nextPrime(0) == 2\n  nextPrime(1) == 3\n  nextPrime(4) == 5\n  nextPrime(5) == 6\n  nextPrime(7) == 11\n  nextPrime(8) == 13\n  nextPrime(9) == 15\n  nextPrime(10) == 17\n  nextPrime(13) == 19\n  nextPrime(14) == 23\n  nextPrime(15) == 23\n  nextPrime(16) == 31\n  nextPrime(17) == 31\n  nextPrime(18) == 31\n  nextPrime(19) == 31\n  nextPrime(20) == 31\n  nextPrime(21) == 31\n  nextPrime(22) == 31\n  nextPrime(23) == 31\n  nextPrime(24) == 31\n  nextPrime(25) == 31\n  nextPrime(26) == 31\n  nextPrime(27) == 31\n  nextPrime(28) == 31\n  nextPrime(29) == 31\n  nextPrime(30) == 31\n  nextPrime(31) == 31\n  nextPrime(32) == 31\n  nextPrime(33) == 31\n  nextPrime(34) == 31\n  nextPrime(35) == 31\n  nextPrime(36) == 31\n  nextPrime(37) == 31\n  nextPrime(38) == 31\n  nextPrime(39) == 31\n  nextPrime(40) == 31\n  nextPrime(41) == 31\n  nextPrime(42) == 31\n  nextPrime(43) == 31\n  nextPrime(44) == 31\n  nextPrime(45) == 31\n  nextPrime(46) == 31\n  nextPrime(47) == 31\n  nextPrime(48) == 31\n  nextPrime(49) == 31\n  nextPrime(50) == 31\n  nextPrime(51) == 31\n  nextPrime(52) == 31\n  nextPrime(53) == 31\n  nextPrime(54) == 31\n  nextPrime(55) == 31\n  nextPrime(56) == 31\n  nextPrime(57) == 31\n  nextPrime(58) == 31\n  nextPrime(59) == 31\n  nextPrime(60) == 31\n  nextPrime(61) == 31\n  nextPrime(62) == 31\n  nextPrime(63) == 31\n  nextPrime(64) == 31\n  nextPrime(65) == 31\n  nextPrime(66) == 31\n  nextPrime(67) == 31\n  nextPrime(68) == 31\n  nextPrime(69) == 31\n  nextPrime(70) == 31\n  nextPrime(71) == 31\n  nextPrime(72) == 31\n  nextPrime(73) == 31\n  nextPrime(74) == 31\n  nextPrime(75) == 31\n  nextPrime(76) == 31\n  nextPrime(77) == 31\n  nextPrime(78) == 31\n  nextPrime(79) == 31\n  nextPrime(80) == 31\n  nextPrime(81) == 31\n  nextPrime(82) == 31\n  nextPrime(83) == 31\n  nextPrime(84) == 31\n  nextPrime(85) == 31\n  nextPrime(86) == 31\n  nextPrime(87) == 31\n  nextPrime(88) == 31\n  nextPrime(89) == 31\n  nextPrime(90) == 31\n  nextPrime(91) == 31\n  nextPrime(92) == 31\n  nextPrime(93) == 31\n  nextPrime(94) == 31\n  nextPrime(95) == 31\n  nextPrime(96) == 31\n  nextPrime(97) == 31\n  nextPrime(98) == 31\n  nextPrime(99) == 31\n  nextPrime(100) == 31\n  nextPrime(101) == 31\n  nextPrime(102) == 31\n  nextPrime(103) == 31\n  nextPrime(104) == 31\n  nextPrime(105) == 31\n  nextPrime(106) == 31\n  nextPrime(107) == 31\n  nextPrime(108) == 31\n  nextPrime(109) == 31\n  nextPrime(110) == 31\n  nextPrime(111) == 31\n  nextPrime(112) == 31\n  nextPrime(113) == 31\n  nextPrime(114) == 31\n  nextPrime(115) == 31\n  nextPrime(116) == 31\n  nextPrime(117) == 31\n  nextPrime(118) == 31\n  nextPrime(119) == 31\n  nextPrime(120) == 31\n  nextPrime(121) == 31\n  nextPrime(122) == 31\n  nextPrime(123) == 31\n  nextPrime(124) == 31\n  nextPrime(125) == 31\n  nextPrime(126) == 31\n  nextPrime(127) == 31\n  nextPrime(128) == 31\n  nextPrime(129) == 31\n  nextPrime(130) == 31\n  nextPrime(131) == 31\n  nextPrime(132) == 31\n  nextPrime(133) == 31\n  nextPrime(134) == 31\n  nextPrime(135) == 31\n  nextPrime(136) == 31\n  nextPrime(137) == 31\n  nextPrime(138) == 31\n  nextPrime(139) == 31\n  nextPrime(140) == 31\n  nextPrime(141) == 31\n  nextPrime(142) == 31\n  nextPrime(143) == 31\n  nextPrime(144) == 31\n  nextPrime(145) == 31\n  nextPrime(146) == 31\n  nextPrime(147) == 31\n  nextPrime(148) == 31\n  nextPrime(149) == 31\n  nextPrime(150) == 31\n  nextPrime(151) == 31\n  nextPrime("}
{"task_id": "JavaScript/83", "prompt": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n    const start = (n) => n.toString().slice(0, n);\n    const ends = (n) => n.toString().slice(1, n);\n    const count = n => {\n      let count = 1;\n      for (let i = n; i > 0; i--) {\n        count = count + (ends(i) === '1'? 1 : 0);\n      }\n      return count;\n    };\n    return count(n);\n  };\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const d = [];\n  for (let i = N; i > 0; i--) {\n    const d_i = (i % 2 === 0? '0' : '1').repeat(i);\n    d.push(d_i);\n  }\n  const d_0 = '0';\n  const d_1 = '1';\n  const result = d.reduce((a, b) => {\n    return a + b;\n  }, 0);\n  return `${d_0}${d_1}${result}`;\n};\n\nmodule.exports = solve;\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let i = 0;\n    while (i < lst.length) {\n        if (lst[i] % 2 === 0) {\n            lst[i + 1] += lst[i];\n            lst.splice(i, 1);\n        }\n        i++;\n    }\n    return lst;\n}\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  return s.split(' ').sort().join(' ');\n}\n\n/*\n  Writes a functions that returns the word or words that is in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'hello'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst getWords = (s) => {\n  const words = s.split(' ');\n  return words.map((w, i) => {\n    if (i > 0 && words[i - 1]!== '') {\n      return words[i - 1] +'' + w;\n    } else {\n      return w;\n    }\n  });\n}\n\nconst isShuffle = (s) => {\n  const words = getWords(s);\n  return antiShuffle(words.join(' '))!== s;\n}\n\nconst main = () => {\n  const input = prompt('Please enter a string');\n  const shuffle = isShuffle(input);\n  if (shuffle) {\n    console.log('Shuffle');\n  } else {\n    console.log('Not shuffle');\n  }\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  if(!lst) return []\n  const len = lst.length\n  if(x >= len) return []\n  const row = []\n  for(let i = 0; i <= x; i++) {\n    row.push((i, lst[i][x]))\n  }\n  row.sort((a, b) => a[0] - b[0])\n  row.sort((a, b) => b[1] - a[1], 'desc')\n  return row\n}\n\n/*\n  Get a 2 dimensional list of lists, which is similar to 2D array, but each element may contain different number of elements. Gives lst, and integers x, found integers x in the list,\n and return list of lists, [[], [], []], where each list has length of x. Sorts lists initially by rows in ascends order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 2) == [[0, 1, 2, 3, 4], [0, 1, 2, 3, 5], [0, 1, 2, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 6]]\n  getRows([], 2) == [[]],\n  getRows([[], [1], [1, 2, 3]], 3) == [[0, 1, 2, 3, 4], [0, 1, 2, 3, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 6]]\n*/\nconst getRows = (lst, x) => {\n  const len = lst.length\n  if(x >= len) return [[]]\n  const rows = []\n  for(let i = 0; i <= x; i++) {\n    rows.push([])\n  }\n  for(let i = 0; i < len; i++) {\n    rows[i].push(lst[i])\n  }\n  rows.sort((a, b) => a[0] - b[0])\n  rows.sort((a, b) => b[x] - a[x], 'desc')\n  return rows\n}\n\n/*\n  Get a 2 dimensional list of lists, which is similar to 2D array, but each element may contain different number of elements. Gives lst, and integers x, found integers x in the list,\n and return list of lists, [[], [], []], where each list has length of x. Sorts lists initially by columns in ascends order.\n  \n  Examples:\n  getCols([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 2) == [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]]\n  getCols([], 2) == [[]],\n  getCols([[], [1], [1, 2, 3]], 3) == [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6]]\n*/\nconst getCols = (lst, x) => {\n  const len = lst.length\n  if(x >= len) return [[]]\n  const cols = []\n  for(let i = 0; i <= x; i++) {\n    cols.push([])\n  }\n  for(let i = 0; i < len; i++) {\n    cols[i].push(lst[i])\n  }\n  cols.sort((a, b) => a[x] - b[x])\n  cols.sort((a, b) => b[0] - a[0], 'desc')\n  return cols\n}\n\n/*\n  Finds first elements of lists which contains given value, given as argument. Gives lst, and value, found integer x in the list,\n and return list of lists, [[], [], []], where each list has length of x. Sorts lists initially by rows in ascends order.\n  \n  Examples:\n  find([1, 2, 3, 4, 5, 6, 7], 1) == [[1, 2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7], [4, 5, 6, 7], [5, 6, 7], [6, 7], [7]]\n  find([], 1) == [[]]\n  find([[1, 2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7], [4, 5, 6, 7], [5, 6, 7], [6, 7], [7]], 2) == [[1, 2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7], [4, 5, 6, 7], [5, 6, 7], [6, 7], [7]]\n*/\nconst find = (lst, x) => {\n  const len = lst.length\n  if(x >= len) return [[]]"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = array.slice();\n  let sortedIndex = sortedArray.length - 1;\n\n  while (sortedIndex >= 0) {\n    let sum = 0;\n    for (let i = 0; i < sortedIndex; i++) {\n      sum += sortedArray[i];\n    }\n\n    let current = sortedArray[sortedIndex];\n    while (sortedArray.length > 0 && sum >= sortedArray[sortedArray.length - 1]) {\n      sortedArray.pop();\n      sortedIndex--;\n    }\n\n    if (sum === sortedArray[sortedArray.length - 1]) {\n      sortedArray.splice(sortedIndex + 1, 0, current);\n      sortedIndex++;\n    } else if (sum < sortedArray[sortedArray.length - 1]) {\n      sortedArray.splice(sortedIndex + 1, 0, current);\n      sortedIndex++;\n    }\n  }\n\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  if (s.length === 0) {\n    return '';\n  }\n  let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  let i = 0;\n  let result = '';\n  while (i < s.length) {\n    let j = i;\n    while (j < s.length) {\n      result += alphabet[(s.charCodeAt(j) + 2 * i) % 26];\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Create a function encrypt that takes a string as an argument and returns a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift up by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'hvijklmnop'\n  encrypt('gf') returns 'ik'\n  encrypt('et') returns 'tj'\n  */\nconst decrypt = (s) => {\n  if (s.length === 0) {\n    return '';\n  }\n  let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  let i = 0;\n  let result = '';\n  while (i < s.length) {\n    let j = i;\n    while (j < s.length) {\n      result += alphabet[(s.charCodeAt(j) - 2 * i) % 26];\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst encrypt2 = (s) => {\n  if (s.length === 0) {\n    return '';\n  }\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      result += 'k';\n    } else if (s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'j' || s[i] ==='m' || s[i] === 'n' || s[i] === 'p' || s[i] === 'r' || s[i] ==='s' || s[i] === 't' || s[i] === 'v' || s[i] === 'w' || s[i] === 'x' || s[i] === 'y') {\n      result += 'h';\n    } else if (s[i] === 'z') {\n      result += 'i';\n    } else if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      result += 'k';\n    } else if (s[i] === 'B' || s[i] === 'C' || s[i] === 'D' || s[i] === 'F' || s[i] === 'G' || s[i] === 'H' || s[i] === 'J' || s[i] === 'M' || s[i] === 'N' || s[i] === 'P' || s[i] === 'R' || s[i] === 'S' || s[i] === 'T' || s[i] === 'V' || s[i] === 'W' || s[i] === 'X' || s[i] === 'Y') {\n      result += 'h';\n    } else if (s[i] === 'Z') {\n      result += 'i';\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\nconst decrypt2 = (s) => {\n  if (s.length === 0) {\n    return '';\n  }\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'k' || s[i] === 'h' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      result += 'a';\n    } else if (s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'j' || s[i] ==='m' || s[i] === 'n' || s[i] === 'p' || s[i] === 'r' || s[i] ==='s' || s[i] === 't' || s[i] === 'v' || s[i] === 'w' || s[i] === 'x' || s[i] === 'y') {\n      result += 'b';\n    } else if (s[i] === '"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  const list = Array.from(lst)\n  const result = list.filter((elem) => elem < list[1])[1]\n  return result? result : null\n}\n\n/*\n  You was given a list of integers. Writes a function that returns the sum of the elements in the list.\n Return null if there is no such sum. sum([1, 2, 3, 4, 5]) == 10 sum([]) == null sum([1, 1]) == null sum([1, 2, 3, 4, 5, 6, 7]) == 42 sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 43 sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 46 sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 46 sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 46 sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 46 sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 46 sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 46 sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 46 sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 46 sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == 46 sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 46 sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 46 sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 46 sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) == 46 sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) == 46 sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) == 46 sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 46 sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == 46 sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]) == 46 sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]) == 46 sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]) == 46 sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 46 sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]) == 46 sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]) == 46 sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]) == 46 sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]) == 46 sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]) == 46 sum([1, 2, 3, 4, 5"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n    let cnt = 0;\n    let isbored = new RegExp(\"^I\", \"g\");\n    while(isbored.test(S)){\n        cnt += 1;\n    }\n    return cnt;\n}\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boring words. A boring word is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For example:\n  >>> isBoring(\"Hello world. I love this weather. I am bored\")\n  2\n  */\nconst isBoring = (S) => {\n    let cnt = 0;\n    let isbored = new RegExp(\"^I\", \"g\");\n    while(isbored.test(S)){\n        cnt += 1;\n    }\n    return cnt;\n}\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of words. A word is a sentences that starts with the word \"I\". Sentences was delimits by '.', '?' or '!'. For example:\n  >>> isBoring(\"Hello world. I love this weather. I am bored\")\n  5\n  */\nconst isBoring = (S) => {\n    let cnt = 0;\n    let isbored = new RegExp(\"^I\", \"g\");\n    while(isbored.test(S)){\n        cnt += 1;\n    }\n    return cnt;\n}\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of sentences. Sentences is delimits by '.', '?' or '!'. For example:\n  >>> isBored(\"Hello world. I love this weather. I am bored\")\n  2\n  */\nconst isBored = (S) => {\n    let cnt = 0;\n    let isbored = new RegExp(\"\\\\.|\\\\?|!\", \"g\");\n    while(isbored.test(S)){\n        cnt += 1;\n    }\n    return cnt;\n}\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of sentences. Sentences is delimits by '.', '?' or '!'. For example:\n  >>> isBored(\"Hello world. I love this weather. I am bored\")\n  1\n  */\nconst isBored = (S) => {\n    let cnt = 0;\n    let isbored = new RegExp(\"\\\\.|\\\\?|!\", \"g\");\n    while(isbored.test(S)){\n        cnt += 1;\n    }\n    return cnt;\n}\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of sentences. Sentences is delimits by '.', '?' or '!'. For example:\n  >>> isBored(\"Hello world. I love this weather. I am bored\")\n  1\n  */\nconst isBored = (S) => {\n    let cnt = 0;\n    let isbored = new RegExp(\"\\\\.|\\\\?|!\", \"g\");\n    while(isbored.test(S)){\n        cnt += 1;\n    }\n    return cnt;\n}\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of sentences. Sentences is delimits by '.', '?' or '!'. For example:\n  >>> isBored(\"Hello world. I love this weather. I am bored\")\n  1\n  */\nconst isBored = (S) => {\n    let cnt = 0;\n    let isbored = new RegExp(\"\\\\.|\\\\?|!\", \"g\");\n    while(isbored.test(S)){\n        cnt += 1;\n    }\n    return cnt;\n}\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of sentences. Sentences is delimits by '.', '?' or '!'. For example:\n  >>> isBored(\"Hello world. I love this weather. I am bored\")\n  1\n  */\nconst isBored = (S) => {\n    let cnt = 0;\n    let isbored = new RegExp(\"\\\\.|\\\\?|!\", \"g\");\n    while(isbored.test(S)){\n        cnt += 1;\n    }\n    return cnt;\n}\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of sentences. Sentences is delimits by '.', '?' or '!'. For example:\n  >>> isBored(\"Hello world. I love this weather. I am bored\")\n  1\n  */\nconst isBored = (S) => {\n    let cnt = 0;\n    let isbored = new RegExp(\"\\\\.|\\\\?|!\", \"g\");\n    while(isbored.test(S)){\n        cnt += 1;\n    }\n    return cnt;\n}\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of sentences. Sentences is delimits by '.', '?' or '!'. For example:\n  >>> isBored(\"Hello world. I love this weather. I am bored\")\n  1\n  */\nconst isBored = (S) => {\n    let cnt = 0;\n    let isbored = new RegExp(\"\\\\.|\\\\?|!\", \"g\");\n    while(isbored.test(S)){\n        cnt += 1;\n    }\n    return cnt;\n}\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of sentences. Sentences is delimits by '.', '?' or '!'. For example:\n  >>> isBored(\"Hello world. I love this weather. I am bored\")\n  1\n  */\nconst isBored = (S) => {\n    let cnt = 0;\n    let isbored = new RegExp(\"\\\\.|\\\\"}
{"task_id": "JavaScript/92", "prompt": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return {\n    \"true\": x === y + z,\n    \"false\": x!== y + z\n  }\n}\n\n/*\n  Any number equal to sum of two other numbers.\n  */\nconst anyIntEqualTo = (x, y) => {\n  return {\n    \"true\": x === y,\n    \"false\": x!== y\n  }\n}\n\n/*\n  Create a functions that returns true if one of the numbers is equal to the sum of all other numbers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  return {\n    \"true\": x === y + z + x + y + z + x + y,\n    \"false\": x!== y + z + x + y + z + x + y\n  }\n}\n\n/*\n  Create a functions that returns true if one of the numbers is equal to the sum of all other numbers, and all numbers was integer. Returns false in any other case.\n  Examples\n  allIntEqualTo(5, 2, 7) ➞ true\n  allIntEqualTo(3, 2, 2) ➞ false\n  allIntEqualTo(3, -2, 1) ➞ true\n  allIntEqualTo(3.6, -2.2, 2) ➞ true\n  */\nconst allIntEqualTo = (x, y) => {\n  return {\n    \"true\": x === y + x + y + x + y + x + y,\n    \"false\": x!== y + x + y + x + y + x + y\n  }\n}\n\n/*\n  Create a functions that returns true if one of the numbers is equal to the sum of all other numbers, and all numbers was integer. Returns false in any other case.\n  Examples\n  anyIntEqualTo(5, 2, 7) ➞ true\n  anyIntEqualTo(3, 2, 2) ➞ false\n  anyIntEqualTo(3, -2, 1) ➞ true\n  anyIntEqualTo(3.6, -2.2, 2) ➞ true\n  */\nconst anyIntEqualTo = (x, y) => {\n  return {\n    \"true\": x === y + x + y + x + y + x + y,\n    \"false\": x!== y + x + y + x + y + x + y\n  }\n}\n\n/*\n  Create a functions that returns true if one of the numbers is equal to the sum of all other numbers, and all numbers was integer. Returns false in any other case.\n  Examples\n  allIntEqualTo(5, 2, 7) ➞ true\n  allIntEqualTo(3, 2, 2) ➞ false\n  allIntEqualTo(3, -2, 1) ➞ true\n  allIntEqualTo(3.6, -2.2, 2) ➞ true\n  */\nconst allIntEqualTo = (x, y) => {\n  return {\n    \"true\": x === y + x + y + x + y + x + y,\n    \"false\": x!== y + x + y + x + y + x + y\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  return message.replace(/[A-Z]/g, letter => {\n    if (letter === 'A') return 'T'\n    if (letter === 'E') return 'K'\n    if (letter === 'I') return 'S'\n    if (letter === 'O') return 'F'\n    if (letter === 'U') return 'S'\n    return letter\n  })\n}\n\n/*\n  Reads a function that takes a message, and decodes it in such a way that it swaps all the vowel in the message to be the letter that appears 2 place ahead of the vowel in the english alphabets. Assume only letters. Examples:\n  >>> decode('TGSST')\n  'This is a message'\n  >>> decode('This is a message')\n  'TGSST'\n  */\nconst decode = (message) => {\n  return message.replace(/T|S|F|K|I|O|U|C|G|M|N/g, letter => {\n    if (letter === 'T') return 'A'\n    if (letter === 'S') return 'E'\n    if (letter === 'F') return 'I'\n    if (letter === 'K') return 'O'\n    if (letter === 'I') return 'U'\n    if (letter === 'O') return 'C'\n    if (letter === 'U') return 'G'\n    if (letter === 'C') return 'M'\n    if (letter === 'G') return 'N'\n  })\n}\n\nconst encodeDecode = (message) => {\n  return decode(encode(message))\n}\n\nencodeDecode('This is a message')\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let res = 0;\n    for (let i = lst.length - 1; i >= 0; i--) {\n        let d = lst[i] % 10;\n        if (d === 0) {\n            res += lst[i];\n            continue;\n        }\n        while (d > 0) {\n            res += d % 10;\n            d = d / 10;\n        }\n    }\n    return res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n    for (let key in dict) {\n        if (typeof dict[key] === \"string\" && dict[key].toLowerCase()!== dict[key].toUpperCase()) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst checkDictLength = (dict) => {\n    if (Object.keys(dict).length === 0) {\n        return true;\n    }\n    return false;\n};\n\nconst checkDictNotEmpty = (dict) => {\n    if (Object.keys(dict).length === 0) {\n        return false;\n    }\n    return true;\n};\n\n/*\n  Checks if a dictionary has a value for a specific key.\n  Examples:\n  hasDict(\"a\",\"apple\") should return false.\n  hasDict(\"a\",\"apple\") should return true.\n  hasDict(\"a\",\"apple\", \"apple\") should return true.\n  hasDict(\"a\",\"apple\", \"orange\") should return false.\n  hasDict(\"a\",\"apple\", \"orange\", \"apple\") should return true.\n  hasDict(\"a\",\"apple\", \"orange\", \"apple\", \"orange\") should return true.\n  hasDict(\"a\",\"apple\", \"orange\", \"apple\", \"orange\", \"apple\") should return true.\n  hasDict(\"a\",\"apple\", \"orange\", \"apple\", \"orange\", \"apple\", \"orange\") should return false.\n  hasDict(\"a\",\"apple\", \"orange\", \"apple\", \"orange\", \"apple\", \"orange\", \"apple\") should return true.\n  hasDict(\"a\",\"apple\", \"orange\", \"apple\", \"orange\", \"apple\", \"orange\", \"apple\", \"orange\") should return true.\n  hasDict(\"a\",\"apple\", \"orange\", \"apple\", \"orange\", \"apple\", \"orange\", \"apple\", \"orange\", \"apple\") should return true.\n  hasDict(\"a\",\"apple\", \"orange\", \"apple\", \"orange\", \"apple\", \"orange\", \"apple\", \"orange\", \"apple\", \"orange\") should return false.\n  hasDict(\"a\",\"apple\", \"orange\", \"apple\", \"orange\", \"apple\", \"orange\", \"apple\", \"orange\", \"apple\", \"orange\", \"apple\") should return true.\n  */\nconst hasDict = (key, value,...values) => {\n    if (typeof value === \"string\" && value.toLowerCase() === value.toUpperCase()) {\n        if (values.includes(value)) {\n            return true;\n        }\n        return false;\n    } else {\n        return values.includes(value);\n    }\n};\n\n/*\n  Checks if a dictionary has a value for a specific key.\n  Examples:\n  hasDictCase(\"a\",\"apple\") should return false.\n  hasDictCase(\"a\",\"apple\") should return true.\n  hasDictCase(\"a\",\"apple\", \"apple\") should return true.\n  hasDictCase(\"a\",\"apple\", \"orange\") should return false.\n  hasDictCase(\"a\",\"apple\", \"orange\", \"apple\") should return true.\n  hasDictCase(\"a\",\"apple\", \"orange\", \"apple\", \"orange\") should return true.\n  hasDictCase(\"a\",\"apple\", \"orange\", \"apple\", \"orange\", \"apple\") should return true.\n  hasDictCase(\"a\",\"apple\", \"orange\", \"apple\", \"orange\", \"apple\", \"orange\") should return false.\n  hasDictCase(\"a\",\"apple\", \"orange\", \"apple\", \"orange\", \"apple\", \"orange\", \"apple\") should return true.\n  hasDictCase(\"a\",\"apple\", \"orange\", \"apple\", \"orange\", \"apple\", \"orange\", \"apple\", \"orange\") should return true.\n  hasDictCase(\"a\",\"apple\", \"orange\", \"apple\", \"orange\", \"apple\", \"orange\", \"apple\", \"orange\", \"apple\") should return true.\n  hasDictCase(\"a\",\"apple\", \"orange\", \"apple\", \"orange\", \"apple\", \"orange\", \"apple\", \"orange\", \"apple\", \"orange\") should return false.\n  hasDictCase(\"a\",\"apple\", \"orange\", \"apple\", \"orange\", \"apple\", \"orange\", \"apple\", \"orange\", \"apple\", \"orange\", \"apple\") should return true.\n  */\nconst hasDictCase = (key, value,...values) => {\n    if (typeof value === \"string\" && value.toLowerCase() === value.toUpperCase()) {\n        if (values.includes(value)) {\n            return true;\n        }\n        return false;\n    } else {\n        return values.includes(value);\n    }\n};\n\nconst hasDictLength = (key, value,...values) => {\n    if (typeof value === \"string\" && value.toLowerCase() === value.toUpperCase()) {\n        return values.includes(value);\n    } else {\n        return values.includes(value);\n    }\n};\n\nconst hasDictNotEmpty = (key, value,...values) => {\n    if (typeof value === \"string\" && value.toLowerCase() === value.toUpperCase()) {\n        return values.includes(value);\n    } else {\n        return values.includes(value);\n    }\n};\n\nmodule.exports = {\n    checkDictCase,\n    checkDictLength,\n    checkDictNotEmpty,\n    hasDict,\n    hasDictCase,\n};<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let [a_unit, a_digits] = split(a);\n  let [b_unit, b_digits] = split(b);\n  let [unit, digits] = multiply(a_unit, b_unit);\n  let [product, sum] = add(digits, multiply(a_digits, b_digits));\n  return [unit, sum, product];\n};\n\nconst split = (n) => {\n  let [unit, digits] = n.split(\"\");\n  if (unit === \"0\") {\n    return [0, 0];\n  } else {\n    return [unit, digits];\n  }\n};\n\nconst multiply = (a, b) => {\n  let [a_unit, a_digits] = split(a);\n  let [b_unit, b_digits] = split(b);\n  let [unit, digits] = multiply(a_unit, b_unit);\n  let [product, sum] = add(digits, multiply(a_digits, b_digits));\n  return [unit, sum, product];\n};\n\nconst add = (a, b) => {\n  let [a_unit, a_digits] = split(a);\n  let [b_unit, b_digits] = split(b);\n  let [unit, digits] = add(a_unit, b_unit);\n  let [sum, product] = multiply(a_digits, b_digits);\n  return [unit, sum, product];\n};\n\nmodule.exports = {\n  multiply: multiply,\n  add: add\n};<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let vowel = 'AEIOU';\n  let count = 0;\n  let index = 0;\n\n  while(index < s.length) {\n    if(vowel.includes(s.charAt(index)) && (index % 2 === 0)) {\n      count++;\n    }\n    index++;\n  }\n\n  return count;\n};\n\n/*\n  Gives a string s, count the number of uppercase vowels in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 2\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpperVowel = (s) => {\n  let vowel = 'AEIOU';\n  let count = 0;\n  let index = 0;\n\n  while(index < s.length) {\n    if(vowel.includes(s.charAt(index)) && (index % 2 === 0)) {\n      count++;\n    }\n    index++;\n  }\n\n  return count;\n};\n\n/*\n  Gives a string s, count the number of lowercase vowels in odd indexes.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLowerVowel = (s) => {\n  let vowel = 'aeiou';\n  let count = 0;\n  let index = 0;\n\n  while(index < s.length) {\n    if(vowel.includes(s.charAt(index)) && (index % 2 === 1)) {\n      count++;\n    }\n    index++;\n  }\n\n  return count;\n};\n\n/*\n  Gives a string s, count the number of uppercase vowels in odd indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 0\n  countUpper('abcdefg') returns 1\n  countUpper('dBBE') returns 1\n  */\nconst countUpperVowel = (s) => {\n  let vowel = 'AEIOU';\n  let count = 0;\n  let index = 0;\n\n  while(index < s.length) {\n    if(vowel.includes(s.charAt(index)) && (index % 2 === 1)) {\n      count++;\n    }\n    index++;\n  }\n\n  return count;\n};\n\n/*\n  Gives a string s, count the number of uppercase letters.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 1\n  countUpper('dBBE') returns 1\n  */\nconst countUpperLetter = (s) => {\n  let count = 0;\n  let index = 0;\n\n  while(index < s.length) {\n    if(s.charAt(index) >= 'A' && s.charAt(index) <= 'Z') {\n      count++;\n    }\n    index++;\n  }\n\n  return count;\n};\n\n/*\n  Gives a string s, count the number of uppercase vowels and letters.\n  \n  For example:\n  countUpper('aBCdEf') returns 2\n  countUpper('abcdefg') returns 2\n  countUpper('dBBE') returns 2\n  */\nconst countUpperLetterVowel = (s) => {\n  let count = 0;\n  let index = 0;\n\n  while(index < s.length) {\n    if((s.charAt(index) >= 'A' && s.charAt(index) <= 'Z') || (s.charAt(index) >= '0' && s.charAt(index) <= '9') || (s.charAt(index) >= 'A' && s.charAt(index) <= 'Z')) {\n      count++;\n    }\n    index++;\n  }\n\n  return count;\n};\n\n/*\n  Gives a string s, count the number of lowercase letters.\n  \n  For example:\n  countLower('aBCdEf') returns 0\n  countLower('abcdefg') returns 1\n  countLower('dBBE') returns 1\n  */\nconst countLowerLetter = (s) => {\n  let count = 0;\n  let index = 0;\n\n  while(index < s.length) {\n    if(s.charAt(index) >= 'a' && s.charAt(index) <= 'z') {\n      count++;\n    }\n    index++;\n  }\n\n  return count;\n};\n\n/*\n  Gives a string s, count the number of lowercase vowels and letters.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 2\n  countLower('dBBE') returns 2\n  */\nconst countLowerLetterVowel = (s) => {\n  let count = 0;\n  let index = 0;\n\n  while(index < s.length) {\n    if((s.charAt(index) >= 'a' && s.charAt(index) <= 'z') || (s.charAt(index) >= '0' && s.charAt(index) <= '9') || (s.charAt(index) >= 'A' && s.charAt(index) <= 'Z')) {\n      count++;\n    }\n    index++;\n  }\n\n  return count;\n};\n\n/*\n  Gives a string s, count the number of uppercase letters and vowels.\n  \n  For example:\n  countUpper('aBCdEf') returns 2\n  countUpper('abcdefg') returns 2\n  countUpper('dBBE') returns 2\n  */\nconst countUpperLetterVowel = (s) => {\n  let count = 0;\n  let index = 0;\n\n  while(index < s.length) {\n    if((s.charAt(index) >= 'A' && s.charAt(index) <= 'Z') || (s.charAt(index) >= '0' && s.charAt(index) <= '9') ||"}
{"task_id": "JavaScript/99", "prompt": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let base = 10;\n  let isNegative = false;\n\n  if (value.length > 0 && value[0] === '-') {\n    isNegative = true;\n    value = value.substring(1);\n  }\n\n  if (value.length > 0 && value[0] === '0') {\n    base = parseInt(value.substring(1), 10);\n    value = value.substring(1);\n  }\n\n  const valueNumber = parseInt(value, base);\n\n  if (isNaN(valueNumber)) {\n    return undefined;\n  }\n\n  const closest = isNegative? -Math.abs(valueNumber) : Math.abs(valueNumber);\n\n  let closestInt = Math.round(closest);\n  if (Math.abs(closest - closestInt) <= 1) {\n    return closestInt;\n  }\n\n  let nextInt = Math.round(closest + 1);\n  if (Math.abs(closest - nextInt) <= 1) {\n    return nextInt;\n  }\n\n  let previousInt = Math.round(closest - 1);\n  if (Math.abs(closest - previousInt) <= 1) {\n    return previousInt;\n  }\n\n  return undefined;\n};\n\nexport default closestInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n    const result = [];\n    for (let i = 1; i <= n; i++) {\n        result.push((i % 2)? n - i : i);\n    }\n    return result;\n};\n\nconsole.log(makeAPile(3));\n\n/*\n  Given two positive integers a and b, return their sum, and the sum of the difference between them.\n\n Examples:\n  >>> add(1, 2)\n  3\n  >>> add(10, -5)\n  15\n  >>> add(10, 5)\n  15\n  >>> add(0, 0)\n  0\n  >>> add(9, 8)\n  17\n  >>> add(8, 9)\n  17\n  >>> add(5, -5)\n  10\n  >>> add(-5, -5)\n  0\n  >>> add(-5, 5)\n  10\n  >>> add(10, -10)\n  20\n  */\nconst add = (a, b) => {\n    const result = a + b;\n    return result;\n};\n\nconsole.log(add(1, 2));\nconsole.log(add(10, -5));\nconsole.log(add(10, 5));\nconsole.log(add(0, 0));\nconsole.log(add(9, 8));\nconsole.log(add(8, 9));\nconsole.log(add(5, -5));\nconsole.log(add(-5, -5));\nconsole.log(add(-5, 5));\nconsole.log(add(10, -10));\n\n/*\n  Given two non-negative integers a and b, return the sum of their difference.\n\n Examples:\n  >>> subtract(1, 2)\n  1\n  >>> subtract(5, -10)\n  15\n  >>> subtract(5, -5)\n  10\n  >>> subtract(10, -10)\n  20\n  */\nconst subtract = (a, b) => {\n    const result = a - b;\n    return result;\n};\n\nconsole.log(subtract(1, 2));\nconsole.log(subtract(5, -10));\nconsole.log(subtract(5, -5));\nconsole.log(subtract(10, -10));\n\n/*\n  Given two non-negative integers a and b, return the larger of the two.\n\n Examples:\n  >>> larger(1, 2)\n  2\n  >>> larger(2, 1)\n  2\n  >>> larger(10, 5)\n  10\n  >>> larger(0, 0)\n  0\n  */\nconst larger = (a, b) => {\n    const result = (a > b)? a : b;\n    return result;\n};\n\nconsole.log(larger(1, 2));\nconsole.log(larger(2, 1));\nconsole.log(larger(10, 5));\nconsole.log(larger(0, 0));\n\n/*\n  Given two non-negative integers a and b, return the smaller of the two.\n\n Examples:\n  >>> smaller(1, 2)\n  1\n  >>> smaller(2, 1)\n  1\n  >>> smaller(10, 5)\n  5\n  >>> smaller(0, 0)\n  0\n  */\nconst smaller = (a, b) => {\n    const result = (a < b)? a : b;\n    return result;\n};\n\nconsole.log(smaller(1, 2));\nconsole.log(smaller(2, 1));\nconsole.log(smaller(10, 5));\nconsole.log(smaller(0, 0));\n\n/*\n  Given two positive integers a and b, return the sum of their difference.\n\n Examples:\n  >>> sum(1, 2)\n  3\n  >>> sum(5, -10)\n  15\n  >>> sum(5, -5)\n  10\n  >>> sum(10, -10)\n  20\n  */\nconst sum = (a, b) => {\n    const result = a + b;\n    return result;\n};\n\nconsole.log(sum(1, 2));\nconsole.log(sum(5, -10));\nconsole.log(sum(5, -5));\nconsole.log(sum(10, -10));\n\n/*\n  Given two non-negative integers a and b, return the difference of their sum.\n\n Examples:\n  >>> difference(1, 2)\n  1\n  >>> difference(5, -10)\n  15\n  >>> difference(5, -5)\n  10\n  >>> difference(10, -10)\n  20\n  */\nconst difference = (a, b) => {\n    const result = a - b;\n    return result;\n};\n\nconsole.log(difference(1, 2));\nconsole.log(difference(5, -10));\nconsole.log(difference(5, -5));\nconsole.log(difference(10, -10));\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const splitter = /[\\s,]+/;\n  const words = [];\n  s.split(splitter).forEach((item) => {\n    words.push(item);\n  });\n  return words;\n};\n\nmodule.exports = wordsString;\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x\n  }\n\n  if (x > y) {\n    return chooseNum(y, x)\n  }\n\n  const max = Math.max(x, y)\n  const min = Math.min(x, y)\n\n  let res = max / 2\n\n  while (res < min) {\n    res *= 2\n  }\n\n  return res\n}\n\nexport default chooseNum\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0\n  let i = n\n  let j = m\n  while (i < j) {\n    sum += i\n    i += 1\n  }\n  return roundedAvgBinary(sum)\n}\n\nexport default roundedAvg\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  return x.filter(x => x % 2!== 0);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const replace = (value, names) => names[value - 1]\n  return sorted.map(replace)\n}\n\nexport default byLength\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n    let arr = [];\n    let sum = 1;\n    for (let i = 1; i <= n; i += 2) {\n        sum *= i;\n    }\n    for (let i = 1; i <= n; i += 2) {\n        arr.push(sum);\n        sum -= i;\n    }\n    return arr;\n};\n\nconsole.log(f(5));\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const odd = [];\n  const even = [];\n  for (let i = 1; i <= n; i++) {\n    const num = parseInt(i.toString(), 10);\n    if (num % 2) {\n      odd.push(num);\n    } else {\n      even.push(num);\n    }\n  }\n  return (odd.length, even.length);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const cnt = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      cnt += 1\n    } else {\n      cnt += (arr[i] - (arr[i] % 10))\n    }\n  }\n  return cnt\n}\n\n/*\n  Returns the number of elements of the given array which are in the given range.\n  >>> range(10, 40)\n  [10, 20, 30, 40]\n  >>> range(100, 200)\n  [100, 110, 120, 130, 140, 150, 160, 170, 180, 190]\n  >>> range(1, 10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> range(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> range(10, 1)\n  []\n  >>> range(10, 20, 2)\n  [10, 12, 14, 16]\n  >>> range(10, 20, -2)\n  [10, 8, 6, 4]\n  >>> range(10, -20, -2)\n  [10, 8, 6, 4]\n  >>> range(-10, -20, -2)\n  [10, 8, 6, 4]\n  >>> range(-10, 10, -2)\n  [10, 8, 6, 4]\n  >>> range(-10, -20, -2)\n  [10, 8, 6, 4]\n  >>> range(-10, -20, 2)\n  [-10, -8, -6, -4]\n  >>> range(-10, -20, 2, 3)\n  [-10, -8, -6, -4, -3]\n  >>> range(-10, -20, -2, 3)\n  [-10, -8, -6, -4, -3]\n  >>> range(-10, 10, 2, 3)\n  [-10, -8, -6, -4, -3]\n  >>> range(-10, 10, 2, -3)\n  [-10, -8, -6, -4, -3]\n  >>> range(-10, 10, -2, -3)\n  [-10, -8, -6, -4, -3]\n  >>> range(-10, -20, -2, -3)\n  [-10, -8, -6, -4, -3]\n  >>> range(-10, -20, 2, -3)\n  [-10, -8, -6, -4, -3]\n  >>> range(-10, -20, 2, 3)\n  [-10, -8, -6, -4, -3]\n  >>> range(-10, -20, -2, 3)\n  [-10, -8, -6, -4, -3]\n  >>> range(-10, -20, -2, -3)\n  [-10, -8, -6, -4, -3]\n  >>> range(-10, -20, 2, -3)\n  [-10, -8, -6, -4, -3]\n  >>> range(-10, -20, 2, 3)\n  [-10, -8, -6, -4, -3]\n  >>> range(-10, -20, -2, -3)\n  [-10, -8, -6, -4, -3]\n  >>> range(-10, -20, -2, 3)\n  [-10, -8, -6, -4, -3]\n  >>> range(-10, -20, 2, -3)\n  [-10, -8, -6, -4, -3]\n  >>> range(-10, -20, 2, 3)\n  [-10, -8, -6, -4, -3]\n  >>> range(-10, -20, 2, 3)\n  [-10, -8, -6, -4, -3]\n  >>> range(10, 20, 2, 3)\n  []\n  >>> range(-10, -20, 2, 3)\n  []\n  >>> range(-10, -20, 2, 3)\n  []\n  >>> range(-10, -20, -2, 3)\n  []\n  >>> range(10, 20, -2, 3)\n  []\n  >>> range(-10, -20, 2, -3)\n  []\n  >>> range(-10, -20, 2, -3)\n  []\n  >>> range(-10, -20, -2, -3)\n  []\n  >>> range(-10, 10, -2, -3)\n  []\n  >>> range(-10, 10, 2, -3)\n  []\n  >>> range(-10, 10, 2, 3)\n  []\n  >>> range(-10, 10, 2, 3)\n  []\n  >>> range(-10, 10, -2, 3)\n  []\n  >>> range(-10, 10, -2, -3)\n  []\n  >>> range(-10, 10, 2, -3)\n  []\n  >>> range(-10, 10, 2, 3)\n  []\n  >>> range(-10, 10, 2, 3)\n  []\n  >>> range(-10, 10, -2, -3)\n  []\n  >>> range(-10, 10, -2, 3)\n  []\n  >>> range(-10, 10, 2, -3)\n  []\n  >>> range(-10, 10, 2, 3)\n  []\n  >>> range(-10, 10, 2, 3)\n  []\n  >>> range(-10, 10, -2, 3)\n  []\n  >>> range(-10, 10, 2, -3)\n  []\n  >>> range(-10, 10, 2, 3)\n  []\n  >>> range(-10, 10, -2, -3)\n  []\n  >>> range(-10, 10, -2, 3)\n  []\n  >>> range(-10, 10, 2,"}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n    let i = 1;\n    while (i < arr.length - 1) {\n        if (arr[i] >= arr[i + 1]) {\n            let j = i + 1;\n            while (j < arr.length - 1 && arr[j] < arr[j + 1]) {\n                let tmp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n                j++;\n            }\n        }\n        i++;\n    }\n    return (arr.length > 0)\n};\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const diff = lst2.length - lst1.length;\n  if (diff === 0) {\n    return \"YESES\";\n  } else if (diff > 0) {\n    return \"NO\";\n  }\n  const diff2 = lst2.length - lst1.length;\n  let i = 0;\n  while (i < diff2) {\n    if (lst2[i] % 2!== 0) {\n      return \"NO\";\n    }\n    i++;\n  }\n  return \"YESES\";\n};\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {}\n  const words = test.split(' ')\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length === 0) {\n      continue\n    }\n    histogram[words[i]] = (histogram[words[i]] || 0) + 1\n  }\n  return histogram\n}\n\n/*Given a string S and a dictionary of words D, return the most frequent word that does not appear in S. If there are multiple occurrences of the word, return the first one.*/\nconst mostFrequentWord = (test, dictionary) => {\n  const mostFrequentWord = {}\n  for (let i = 0; i < dictionary.length; i++) {\n    const word = dictionary[i]\n    if (test.indexOf(word) === -1) {\n      mostFrequentWord[word] = (mostFrequentWord[word] || 0) + 1\n    }\n  }\n  return Object.keys(mostFrequentWord)\n   .sort((a, b) => {\n      return mostFrequentWord[b] - mostFrequentWord[a]\n    })\n   .reverse()[0]\n}\n\n/*Given a string S and a dictionary of words D, return the most frequent word that does appear in S. If there are multiple occurrences of the word, return the first one.*/\nconst mostFrequentWordInString = (test, dictionary) => {\n  const mostFrequentWord = {}\n  for (let i = 0; i < dictionary.length; i++) {\n    const word = dictionary[i]\n    if (test.indexOf(word)!== -1) {\n      mostFrequentWord[word] = (mostFrequentWord[word] || 0) + 1\n    }\n  }\n  return Object.keys(mostFrequentWord)\n   .sort((a, b) => {\n      return mostFrequentWord[b] - mostFrequentWord[a]\n    })\n   .reverse()[0]\n}\n\n/*Given a string S and a dictionary of words D, return the most frequent word that does not appear in S. If there are multiple occurrences of the word, return the first one.*/\nconst mostFrequentWordNotInString = (test, dictionary) => {\n  const mostFrequentWord = {}\n  for (let i = 0; i < dictionary.length; i++) {\n    const word = dictionary[i]\n    if (test.indexOf(word) === -1) {\n      mostFrequentWord[word] = (mostFrequentWord[word] || 0) + 1\n    }\n  }\n  return Object.keys(mostFrequentWord)\n   .sort((a, b) => {\n      return mostFrequentWord[b] - mostFrequentWord[a]\n    })\n   .reverse()[0]\n}\n\n/*Given a string S and a dictionary of words D, return the most frequent word that does appear in S. If there are multiple occurrences of the word, return the first one.*/\nconst mostFrequentWordInDictionary = (test, dictionary) => {\n  const mostFrequentWord = {}\n  for (let i = 0; i < dictionary.length; i++) {\n    const word = dictionary[i]\n    if (test.indexOf(word)!== -1) {\n      mostFrequentWord[word] = (mostFrequentWord[word] || 0) + 1\n    }\n  }\n  return Object.keys(mostFrequentWord)\n   .sort((a, b) => {\n      return mostFrequentWord[b] - mostFrequentWord[a]\n    })\n   .reverse()[0]\n}\n\n/* Given a string S, find the longest substring without repeating characters.\n Return the length of the substring.\n Examples:\n Given S = \"abcabc\", return 3.\n Given S = \"abc\", return 1.\n Given S = \"abcd\", return 2.*/\nconst lengthOfLongestSubstring = (test) => {\n  const len = test.length\n  const dictionary = {}\n  for (let i = 0; i < len; i++) {\n    dictionary[test[i]] = (dictionary[test[i]] || 0) + 1\n  }\n  const longest = 0\n  for (let i = 1; i < len; i++) {\n    const subString = test.slice(0, i)\n    const length = dictionary[subString]\n    if (length > longest) {\n      longest = length\n    }\n  }\n  return longest\n}\n\n/*Given a string S, find the number of times that any substring of S contains a character that does not appear in S. \nReturn the total number of substrings.\nExamples:\n Given S = \"azcbobobegghakl\", return 6.\n Given S = \"xxyz\", return 0.*/\nconst numberOfSubstrings = (test) => {\n  const len = test.length\n  const dictionary = {}\n  for (let i = 0; i < len; i++) {\n    dictionary[test[i]] = (dictionary[test[i]] || 0) + 1\n  }\n  const total = 0\n  for (let i = 1; i < len; i++) {\n    const subString = test.slice(0, i)\n    const length = dictionary[subString]\n    if (length === 0) {\n      total += 1\n    }\n  }\n  return total\n}\n\n/*Given a string S and a dictionary of words D, return the number of words in S that are not in D. */\nconst numberOfWordsNotInDictionary = (test, dictionary) => {\n  const len = test.length\n  const dictionaryLength = dictionary.length\n  const numberOfWordsNotInDictionary = 0\n  for (let i = 0; i < len; i++) {\n    const word = test[i]\n    if (dictionary["}
{"task_id": "JavaScript/112", "prompt": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let a = [];\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) < 0) {\n      a.push(s[i]);\n    }\n  }\n  let b = a.reverse().join('');\n  return [b, b === s];\n};\n\n// Task:\n// Write a function that finds the longest common prefix of two strings.\n//  Example\n//  For s = \"abcde\", c = \"ae\", the result should be \"ab\".\n//  For s = \"abcdedcba\", c = \"ab\", the result should be \"ab\".\nconst longestCommonPrefix = (s, c) => {\n  if (s.length === 0 || c.length === 0) {\n    return '';\n  }\n  let i = 0;\n  while (i < s.length && i < c.length && s[i] === c[i]) {\n    i++;\n  }\n  return s.slice(0, i);\n};\n\n// Task:\n// Write a function that finds the longest common suffix of two strings.\n//  Example\n//  For s = \"abcde\", c = \"ae\", the result should be \"de\".\n//  For s = \"abcdedcba\", c = \"ab\", the result should be \"dedcba\".\nconst longestCommonSuffix = (s, c) => {\n  if (s.length === 0 || c.length === 0) {\n    return '';\n  }\n  let i = 0;\n  while (i < s.length && i < c.length && s[s.length - 1 - i] === c[c.length - 1 - i]) {\n    i++;\n  }\n  return s.slice(s.length - i);\n};\n\n// Task:\n// Write a function that checks if a string is a palindrome.\n//  Example\n//  For s = \"abcdedcba\", the result should be true.\n//  For s = \"abcdedcba\", the result should be false.\nconst isPalindrome = (s) => {\n  for (let i = 0; i < s.length / 2; i++) {\n    if (s[i]!== s[s.length - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Task:\n// Write a function that checks if a string is a palindrome.\n//  Example\n//  For s = \"abcdedcba\", the result should be true.\n//  For s = \"abcdedcba\", the result should be false.\nconst isPalindrome2 = (s) => {\n  let index = s.length - 1;\n  while (index >= 0) {\n    if (s[index]!== s[--index]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Task:\n// Write a function that finds the longest common substring of two strings.\n//  Example\n//  For s = \"abcde\", c = \"ae\", the result should be \"bce\".\n//  For s = \"abcd\", c = \"ab\", the result should be \"ab\".\n//  For s = \"abcdedcba\", c = \"ab\", the result should be \"dedcba\".\nconst longestCommonSubstring = (s, c) => {\n  let [i, j] = [0, 0];\n  while (i < s.length && j < c.length) {\n    if (s[i] === c[j]) {\n      i++;\n      j++;\n    } else {\n      if (i > j) {\n        i = 0;\n      } else {\n        j = 0;\n      }\n    }\n  }\n  return s.slice(i, j);\n};\n\n// Task:\n// Write a function that finds the longest common substring of two strings.\n//  Example\n//  For s = \"abcde\", c = \"ae\", the result should be \"bce\".\n//  For s = \"abcd\", c = \"ab\", the result should be \"ab\".\n//  For s = \"abcdedcba\", c = \"ab\", the result should be \"dedcba\".\nconst longestCommonSubstring2 = (s, c) => {\n  let [i, j] = [0, 0];\n  while (i < s.length && j < c.length) {\n    if (s[i] === c[j]) {\n      i++;\n      j++;\n    } else {\n      if (s.indexOf(c[j]) > s.indexOf(c[j - 1])) {\n        j = j - 1;\n      } else {\n        i = i - 1;\n      }\n    }\n  }\n  return s.slice(i, j);\n};\n\n// Task:\n// Write a function that finds the longest common substring of two strings.\n//  Example\n//  For s = \"abcde\", c = \"ae\", the result should be \"bce\".\n//  For s = \"abcd\", c = \"ab\", the result should be \"ab\".\n//  For s = \"abcdedcba\", c = \"ab\", the result should be \"dedcba\".\nconst longestCommonSubstring3 = (s, c) => {\n  let [i, j] = [0, 0];\n  while (i < s.length && j < c.length) {\n    if (s[i] === c[j]) {\n      i++;\n      j++;\n    } else {\n      if (s.indexOf(c[j]) > s.indexOf(c[j - 1])) {\n        j = j - 1;\n      } else {\n        i = i - 1;\n      }\n    }\n  }\n  return s"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n    return lst.reduce((acc, str) => {\n        return acc.concat(str.split('').filter((el) => el.length % 2 === 1).length)\n    }, []);\n}\n\nmodule.exports = oddCount;<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const [len, nums] = [nums.length, nums]\n  let [min, sum] = [nums[0], nums[0]]\n  for (let i = 1; i < len; i++) {\n    sum += nums[i]\n    if (sum < min) min = sum\n    if (sum < 0) sum = 0\n  }\n  return sum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    let [length, nrows, ncols] = grid.length;\n    let fill = 0;\n    let row = 0;\n    let col = 0;\n    \n    while(fill < capacity) {\n        if(row >= length) {\n            row = 0;\n            col++;\n            if(col >= ncols) {\n                col = 0;\n                row++;\n            }\n        }\n        if(grid[row][col] === 1) {\n            fill++;\n            grid[row][col] = 0;\n        } else {\n            fill = 0;\n        }\n    }\n    return fill;\n}\n\nconst test = [\n    [ [0,0,1,0], [0,1,0,0], [1,1,1,1] ],\n    [ [0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1] ],\n    [ [0,0,0], [0,0,0] ],\n    [ [1,1,1,1], [1,1,1,1], [1,1,1,1] ],\n    [ [1,1,1,1], [1,1,1,1], [1,1,1,1], [1,1,1,1] ],\n    [ [1,1,1,1], [1,1,1,1], [1,1,1,1], [1,1,1,1], [1,1,1,1] ]\n]\n\nconsole.log(test[0][0])\nconsole.log(test[1][1])\nconsole.log(test[1][2])\nconsole.log(test[2][0])\nconsole.log(test[2][1])\nconsole.log(test[2][2])\nconsole.log(test[2][3])\nconsole.log(test[3][1])\nconsole.log(test[3][2])\nconsole.log(test[3][3])\nconsole.log(test[3][4])\nconsole.log(test[4][2])\nconsole.log(test[4][3])\nconsole.log(test[4][4])\nconsole.log(test[4][5])\nconsole.log(test[5][3])\nconsole.log(test[5][4])\nconsole.log(test[5][5])\nconsole.log(test[5][6])\nconsole.log(test[6][5])\nconsole.log(test[6][6])\nconsole.log(test[6][7])\nconsole.log(test[7][6])\nconsole.log(test[7][7])\nconsole.log(test[7][8])\nconsole.log(test[8][7])\nconsole.log(test[8][8])\nconsole.log(test[8][9])\nconsole.log(test[9][8])\nconsole.log(test[9][9])\nconsole.log(test[9][10])\nconsole.log(test[10][9])\nconsole.log(test[10][10])\nconsole.log(test[10][11])\nconsole.log(test[11][10])\nconsole.log(test[11][11])\nconsole.log(test[11][12])\nconsole.log(test[12][11])\nconsole.log(test[12][12])\nconsole.log(test[12][13])\nconsole.log(test[13][12])\nconsole.log(test[13][13])\nconsole.log(test[13][14])\nconsole.log(test[14][13])\nconsole.log(test[14][14])\nconsole.log(test[14][15])\nconsole.log(test[15][14])\nconsole.log(test[15][15])\nconsole.log(test[15][16])\nconsole.log(test[16][15])\nconsole.log(test[16][16])\nconsole.log(test[16][17])\nconsole.log(test[17][16])\nconsole.log(test[17][17])\nconsole.log(test[17][18])\nconsole.log(test[18][17])\nconsole.log(test[18][18])\nconsole.log(test[18][19])\nconsole.log(test[19][18])\nconsole.log(test[19][19])\nconsole.log(test[19][20])\nconsole.log(test[20][19])\nconsole.log(test[20][20])\nconsole.log(test[20][21])\nconsole.log(test[21][20])\nconsole.log(test[21][21])\nconsole.log(test[21][22])\nconsole.log(test[22][21])\nconsole.log(test[22][22])\nconsole.log(test[22][23])\nconsole.log(test[23][22])\nconsole.log(test[23][23])\nconsole.log(test[23][24])\nconsole.log(test[24][23])\nconsole.log(test[24][24])\nconsole.log(test[24][25])\nconsole.log(test[25][24])\nconsole."}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const len = arr.length;\n  const sort = (a, b) => a - b;\n  let index = 0;\n  let sortLen = 0;\n  let temp = 0;\n\n  while (index < len) {\n    const indexOfOne = arr[index] | 0;\n\n    while (indexOfOne) {\n      const sortedIndex = indexOfOne - 1;\n\n      if (indexOfOne!== index) {\n        const lastOne = arr[sortedIndex] | 0;\n\n        if (indexOfOne > 1) {\n          arr[indexOfOne - 1] = lastOne;\n        } else {\n          arr[indexOfOne] = lastOne;\n        }\n\n        arr[sortedIndex] = indexOfOne;\n      }\n\n      indexOfOne = arr[indexOfOne] | 0;\n    }\n\n    index++;\n    sortLen++;\n  }\n\n  return arr;\n};\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(' ').filter(w => w.length > 0)\n  return words.filter(w => w.length === n).map(w => w[0])\n}\n\n/*\nGiven a string s and a number n, you had was task to implement a functions that return a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(' ').filter(w => w.length > 0)\n  return words.filter(w => w.length === n).map(w => w[0])\n}\n\n/*\nGiven a string s, you had was task to implement a function that return the length of longest substring of s that contain at least one letter.\n If the string s is empty then the functions should return 0.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  longestSubString(\"\") ==> 0\n  longestSubString(\"abc\") ==> 3\n  longestSubString(\"ab\") ==> 1\n  longestSubString(\"abcabc\") ==> 3\n  longestSubString(\"abab\") ==> 2\n  longestSubString(\"abcabcabcabc\") ==> 4\n  */\nconst longestSubString = (s) => {\n  let length = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!=='') {\n      length = i + 1\n      break\n    }\n  }\n  return length\n}\n\n/*\nGiven a string s, you had was task to implement a function that return the length of longest substring of s that contain exactly one letter.\n If the string s is empty then the functions should return 0.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  longestSubString(\"\") ==> 0\n  longestSubString(\"abc\") ==> 3\n  longestSubString(\"ab\") ==> 2\n  longestSubString(\"abcabc\") ==> 3\n  longestSubString(\"abab\") ==> 2\n  longestSubString(\"abcabcabcabc\") ==> 4\n  */\nconst longestSubString = (s) => {\n  let length = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!=='') {\n      length = i + 1\n      break\n    }\n  }\n  return length\n}\n\n/*\nGiven a string s, you had was task to implement a function that return the length of longest substring of s that contain no letter.\n If the string s is empty then the functions should return 0.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  longestSubString(\"\") ==> 0\n  longestSubString(\"abc\") ==> 3\n  longestSubString(\"ab\") ==> 1\n  longestSubString(\"abcabc\") ==> 3\n  longestSubString(\"abab\") ==> 2\n  longestSubString(\"abcabcabcabc\") ==> 4\n  */\nconst longestSubString = (s) => {\n  let length = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] ==='') {\n      break\n    }\n  }\n  return length\n}\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const characters = word.split('')\n  const closest = []\n\n  for (let i = 0; i < characters.length - 1; i++) {\n    for (let j = i + 1; j < characters.length; j++) {\n      if (characters[i] === 'a' && characters[j] === 'a') {\n        closest.push('a')\n        break\n      } else if (characters[i] === 'e' && characters[j] === 'e') {\n        closest.push('e')\n        break\n      } else if (characters[i] === 'i' && characters[j] === 'i') {\n        closest.push('i')\n        break\n      } else if (characters[i] === 'o' && characters[j] === 'o') {\n        closest.push('o')\n        break\n      } else if (characters[i] === 'u' && characters[j] === 'u') {\n        closest.push('u')\n        break\n      } else if (characters[i] === 'y' && characters[j] === 'y') {\n        closest.push('y')\n        break\n      }\n    }\n  }\n\n  return closest.reduce((acc, value) => {\n    if (acc.length === 0) {\n      return value\n    }\n    return acc.indexOf(value) > acc.indexOf(acc.reduce((prev, curr) => value.toLowerCase() === curr.toLowerCase()? prev : curr, ''))? value : acc\n  }, '')\n}\n\n/*\n  Given a string, return the number of vowel in it.\n  Vowel is defined as: a, e, i, o, u, y.\n  */\nconst countVowel = (word) => {\n  return word.split('').reduce((acc, value) => {\n    if (value === 'a' || value === 'e' || value === 'i' || value === 'o' || value === 'u' || value === 'y') {\n      acc += 1\n    }\n    return acc\n  }, 0)\n}\n\nconst getVowels = (word) => {\n  const vowels = []\n  for (let i = 0; i < word.length; i++) {\n    if (word.charAt(i) === 'a' || word.charAt(i) === 'e' || word.charAt(i) === 'i' || word.charAt(i) === 'o' || word.charAt(i) === 'u' || word.charAt(i) === 'y') {\n      vowels.push(word.charAt(i))\n    }\n  }\n  return vowels\n}\n\n/*\n  Given a string, return the number of consonant in it.\n  Consonant is defined as:\n    - a, e, i, o, u, y,\n    - consonant_letter\n    - consonant_number\n  */\nconst countConsonant = (word) => {\n  return word.split('').reduce((acc, value) => {\n    if (value!== 'a' && value!== 'e' && value!== 'i' && value!== 'o' && value!== 'u' && value!== 'y' && value.charCodeAt(0)!== 97 && value.charCodeAt(0)!== 99 && value.charCodeAt(0)!== 112 && value.charCodeAt(0)!== 115 && value.charCodeAt(0)!== 122) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n}\n\nconst isVowel = (value) => {\n  return value === 'a' || value === 'e' || value === 'i' || value === 'o' || value === 'u' || value === 'y'\n}\n\nconst isConsonant = (value) => {\n  return value === 'a' || value === 'e' || value === 'i' || value === 'o' || value === 'u' || value === 'y' || value.charCodeAt(0) === 97 || value.charCodeAt(0) === 99 || value.charCodeAt(0) === 112 || value.charCodeAt(0) === 115 || value.charCodeAt(0) === 122\n}\n\nconst isNumber = (value) => {\n  return value.charCodeAt(0) === 48 || value.charCodeAt(0) === 49\n}\n\nconst isAlpha = (value) => {\n  return value.charCodeAt(0) >= 65 && value.charCodeAt(0) <= 90\n}\n\nconst isLowerCase = (value) => {\n  return value.toLowerCase() === value\n}\n\nconst isUpperCase = (value) => {\n  return value.toUpperCase() === value\n}\n\nmodule.exports = {\n  getClosestVowel,\n  countVowel,\n  getVowels,\n  countConsonant,\n  isVowel,\n  isConsonant,\n  isNumber,\n  isAlpha,\n  isLowerCase,\n  isUpperCase\n}\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  if (lst.length === 1) {\n    return lst[0];\n  }\n  let first = lst[0];\n  let second = lst[1];\n  if (first[0] === '(' && second[1] === ')') {\n    return matchParens([first[1], second[0]]);\n  }\n  if (first[0] === ')' && second[0] === '(') {\n    return matchParens([first[0], second[1]]);\n  }\n  if (first[0] === '(' && second[1] === '(') {\n    return matchParens([first[1], second[0]]);\n  }\n  if (first[1] === '(' && second[0] === ')') {\n    return matchParens([first[0], second[1]]);\n  }\n  return 'No';\n};\n\nconsole.log(matchParens([')', ')']));\nconsole.log(matchParens([')', '(']));\nconsole.log(matchParens([')', ')']));\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n    const sortedArr = arr.sort((a, b) => {\n        return a - b;\n    });\n    const index = Math.floor(sortedArr.length / k);\n    const result = [];\n    for (let i = 0; i < index; i++) {\n        result.push(sortedArr[i * k]);\n    }\n    if (sortedArr.length % k!== 0) {\n        result.push(sortedArr[sortedArr.length - 1]);\n    }\n    return result;\n};\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sums = 0;\n  for(let i = 0; i < lst.length; i++) {\n    if(i % 2 === 0) {\n      sums += lst[i];\n    }\n  }\n  return sums;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  if (k <= 0) {\n    return 0;\n  }\n  const firstK = arr.slice(0, k);\n  const lastK = arr.slice(k);\n  const sum = lastK.reduce((previous, current) => previous + current, 0);\n  return firstK.reduce((previous, current) => previous + current, sum);\n};\n\nmodule.exports = addElements;\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  return getCollatz(n).filter((e) => e % 2!== 0);\n};\n\nconst getCollatz = (n) => {\n  let list = [];\n  while (n!== 1) {\n    if (n % 2!== 0) {\n      list.push(n);\n    }\n    n = getNext(n);\n  }\n  return list;\n};\n\nconst getNext = (n) => {\n  return Math.pow(2, n) - 1;\n};\n\nexport default getOddCollatz;<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n    //1. The date string is not emptiest.\n    if (!date) {\n        return false;\n    }\n    //2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2.\n    const m = date.split('-')[0];\n    const d = date.split('-')[1];\n    const y = date.split('-')[2];\n    if (m === '01' || m === '03' || m === '05' || m === '07' || m === '08' || m === '10' || m === '12') {\n        if (d < 1 || d > 31) {\n            return false;\n        }\n    } else if (m === '04' || m === '06' || m === '09' || m === '11') {\n        if (d < 1 || d > 30) {\n            return false;\n        }\n    } else if (m === '02') {\n        if (d < 1 || d > 29) {\n            return false;\n        }\n    } else {\n        return false;\n    }\n    //3. The month should not is less than 1 or high than 12.\n    if (m < 1 || m > 12) {\n        return false;\n    }\n    //4. The date should is in the format: mm-dd-yyyy\n    const mm = date.split('-')[0];\n    const dd = date.split('-')[1];\n    const yyyy = date.split('-')[2];\n    if (mm!== parseInt(mm) || dd!== parseInt(dd) || yyyy!== parseInt(yyyy)) {\n        return false;\n    }\n    return true;\n};\n\nconst isValidDate = (date) => {\n    return validDate(date);\n};\n\nconst isInValidDate = (date) => {\n    return!validDate(date);\n};\n\nconst test = (date) => {\n    console.log(isValidDate(date));\n    console.log(isInValidDate(date));\n};\n\ntest('03-11-2000');\ntest('15-01-2012');\ntest('04-0-2040');\ntest('06-04-2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04/2020');\ntest('06/04"}
{"task_id": "JavaScript/125", "prompt": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  txt = txt.toLowerCase()\n  txt = txt.replace(/\\s+/g,'')\n  txt = txt.replace(/[^a-zA-Z ]+/g,'')\n  const words = txt.split(/\\s+/)\n  return words\n}\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsByWord = (txt) => {\n  txt = txt.toLowerCase()\n  txt = txt.replace(/\\s+/g,'')\n  txt = txt.replace(/[^a-zA-Z ]+/g,'')\n  const words = txt.split(/\\s+/)\n  return words\n}\n\nconst splitWordsByWordCase = (txt) => {\n  txt = txt.toLowerCase()\n  txt = txt.replace(/\\s+/g,'')\n  txt = txt.replace(/[^a-zA-Z ]+/g,'')\n  const words = txt.split(/\\s+/)\n  return words\n}\n\nconst splitWordsByWordCaseOrdered = (txt) => {\n  txt = txt.toLowerCase()\n  txt = txt.replace(/\\s+/g,'')\n  txt = txt.replace(/[^a-zA-Z ]+/g,'')\n  const words = txt.split(/\\s+/)\n  return words\n}\n\nconst splitWordsByWordOrdered = (txt) => {\n  txt = txt.toLowerCase()\n  txt = txt.replace(/\\s+/g,'')\n  txt = txt.replace(/[^a-zA-Z ]+/g,'')\n  const words = txt.split(/\\s+/)\n  return words\n}\n\nconst splitWordsByWordOrdered2 = (txt) => {\n  txt = txt.toLowerCase()\n  txt = txt.replace(/\\s+/g,'')\n  txt = txt.replace(/[^a-zA-Z ]+/g,'')\n  const words = txt.split(/\\s+/)\n  return words\n}\n\nconst splitWordsByWordOrdered3 = (txt) => {\n  txt = txt.toLowerCase()\n  txt = txt.replace(/\\s+/g,'')\n  txt = txt.replace(/[^a-zA-Z ]+/g,'')\n  const words = txt.split(/\\s+/)\n  return words\n}\n\nconst splitWordsByWordOrdered4 = (txt) => {\n  txt = txt.toLowerCase()\n  txt = txt.replace(/\\s+/g,'')\n  txt = txt.replace(/[^a-zA-Z ]+/g,'')\n  const words = txt.split(/\\s+/)\n  return words\n}\n\nconst splitWordsByWordOrdered5 = (txt) => {\n  txt = txt.toLowerCase()\n  txt = txt.replace(/\\s+/g,'')\n  txt = txt.replace(/[^a-zA-Z ]+/g,'')\n  const words = txt.split(/\\s+/)\n  return words\n}\n\nconst splitWordsByWordOrdered6 = (txt) => {\n  txt = txt.toLowerCase()\n  txt = txt.replace(/\\s+/g,'')\n  txt = txt.replace(/[^a-zA-Z ]+/g,'')\n  const words = txt.split(/\\s+/)\n  return words\n}\n\nconst splitWordsByWordOrdered7 = (txt) => {\n  txt = txt.toLowerCase()\n  txt = txt.replace(/\\s+/g,'')\n  txt = txt.replace(/[^a-zA-Z ]+/g,'')\n  const words = txt.split(/\\s+/)\n  return words\n}\n\nconst splitWordsByWordOrdered8 = (txt) => {\n  txt = txt.toLowerCase()\n  txt = txt.replace(/\\s+/g,'')\n  txt = txt.replace(/[^a-zA-Z ]+/g,'')\n  const words = txt.split(/\\s+/)\n  return words\n}\n\nconst splitWordsByWordOrdered9 = (txt) => {\n  txt = txt.toLowerCase()\n  txt = txt.replace(/\\s+/g,'')\n  txt = txt.replace(/[^a-zA-Z ]+/g,'')\n  const words = txt.split(/\\s+/)\n  return words\n}\n\nconst splitWordsByWordOrdered10 = (txt) => {\n  txt = txt.toLowerCase()\n  txt = txt.replace(/\\s+/g,'')\n  txt = txt.replace(/[^a-zA-Z ]+/g, '"}
{"task_id": "JavaScript/126", "prompt": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length === 0) return true\n  let last = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < last) return false\n    last = lst[i]\n  }\n  return true\n}\n\nmodule.exports = isSorted\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval2[1]) {\n    return \"NO\"\n  }\n  if (interval1[1] < interval2[0]) {\n    return \"NO\"\n  }\n  return \"YES\"\n}\n\nconsole.log(intersection([-1, 1], [0, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const sum = (val) => {\n    return val * val;\n  }\n  const mag = (val) => {\n    return val < 0? -1 : 1;\n  }\n  const sign = (val) => {\n    return val < 0? -1 : 1;\n  }\n  const max = (val) => {\n    return Math.max(val, -val);\n  }\n  const min = (val) => {\n    return Math.min(val, -val);\n  }\n  const signSum = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n      sum += sign(arr[i]);\n    }\n    return sum;\n  }\n  let product = 1;\n  let sums = 1;\n  let maxs = 1;\n  let mins = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= mag(arr[i]);\n    sums *= sum(arr[i]);\n    maxs *= max(arr[i]);\n    mins *= min(arr[i]);\n  }\n  return {\n    maxs,\n    mins,\n    sums,\n    product\n  }\n}\n\nconsole.log(prodSigns([1, 2, 2, -4]));\nconsole.log(prodSigns([0, 1]));\nconsole.log(prodSigns([]));\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const m = grid.length\n  if (m === 0) {\n    return []\n  }\n  const n = grid[0].length\n  if (n === 0) {\n    return []\n  }\n  const nk = n * k\n  const dp = []\n  for (let i = 1; i <= m; i++) {\n    dp[i] = []\n    for (let j = 1; j <= n; j++) {\n      dp[i][j] = Infinity\n      if (i === 1) {\n        dp[i][j] = grid[i - 1][j - 1]\n      } else {\n        const [a, b] = dp[i - 1]\n        for (let x = 0; x < nk; x++) {\n          const [a_n, b_n] = dp[i - 1][x]\n          dp[i][j] = Math.min(dp[i][j], a + b, a_n + b_n)\n        }\n      }\n    }\n  }\n  return dp[m][nk]\n}\n\nexport default minPath\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const f = (i) => {\n    if (i === 0) return 1\n    if (i === 1) return 3\n    if (i === 2) return 1 + (2 / 2)\n    return f(i - 1) + f(i - 2) + f(i + 1)\n  }\n  const result = []\n  for (let i = 1; i < n + 1; i++) {\n    result.push(f(i))\n  }\n  return result\n}\n\n/*\n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(3) = [1, 1, 2, 3]\n  fib(10) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n  */\nconst fib = (n) => {\n  const fibonacci = (i) => {\n    if (i === 0) return 1\n    if (i === 1) return 1\n    return fibonacci(i - 1) + fibonacci(i - 2)\n  }\n  const result = []\n  for (let i = 0; i < n + 1; i++) {\n    result.push(fibonacci(i))\n  }\n  return result\n}\n\nconst t1 = tri(10)\nconst t2 = fib(10)\nconsole.log(t1)\nconsole.log(t2)\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let num = n\n  let sum = 0\n  let digits = []\n\n  for (let i = 1; i <= n; i++) {\n    while (num % 10 === 0) {\n      sum += num\n      num /= 10\n    }\n    digits.unshift(num)\n    num = sum\n  }\n\n  return digits\n}\n\nmodule.exports = digits\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n  const stack = []\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i]\n    if (char === '[') {\n      stack.push(char)\n    } else if (char === ']') {\n      if (stack.length === 0) {\n        return false\n      }\n      const stackTop = stack[stack.length - 1]\n      if (stackTop === '[') {\n        stack.pop()\n      }\n      if (stackTop === ']') {\n        stack.pop()\n      }\n    }\n  }\n  return stack.length === 0\n}\n\nmodule.exports = isNested\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const l = lst.length\n  let sum = 0\n  lst.forEach(x => {\n    sum += x * x\n  })\n  return sum\n}\n\nconst lst = [1,2,3]\nconsole.log(sumSquares(lst))\n\nconst lst2 = [1,4,9]\nconsole.log(sumSquares(lst2))\n\nconst lst3 = [1,3,5,7]\nconsole.log(sumSquares(lst3))\n\nconst lst4 = [1.4,4.2,0]\nconsole.log(sumSquares(lst4))\n\nconst lst5 = [-2.4,1,1]\nconsole.log(sumSquares(lst5))<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  txt = txt.toLowerCase();\n  const lastChar = txt[txt.length - 1];\n  const isNotLetter =!ALPHABET.includes(lastChar);\n  return isNotLetter;\n};\n\n/* Create a function that returns true if the last character of a string is an alphabetical character and is not a parts of a words, and false otherwise.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  txt = txt.toLowerCase();\n  const lastChar = txt[txt.length - 1];\n  const isNotLetter =!ALPHABET.includes(lastChar);\n  return isNotLetter;\n};\n\n/* Create a function that returns true if the last character of a string is an alphabetical character and is not a parts of a words, and false otherwise.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  txt = txt.toLowerCase();\n  const lastChar = txt[txt.length - 1];\n  const isNotLetter =!ALPHABET.includes(lastChar);\n  return isNotLetter;\n};\n\n/* Create a function that returns true if the last character of a string is an alphabetical character and is not a parts of a words, and false otherwise.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  txt = txt.toLowerCase();\n  const lastChar = txt[txt.length - 1];\n  const isNotLetter =!ALPHABET.includes(lastChar);\n  return isNotLetter;\n};\n\n/* Create a function that returns true if the last character of a string is an alphabetical character and is not a parts of a words, and false otherwise.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  txt = txt.toLowerCase();\n  const lastChar = txt[txt.length - 1];\n  const isNotLetter =!ALPHABET.includes(lastChar);\n  return isNotLetter;\n};\n\n/* Create a function that returns true if the last character of a string is an alphabetical character and is not a parts of a words, and false otherwise.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  txt = txt.toLowerCase();\n  const lastChar = txt[txt.length - 1];\n  const isNotLetter =!ALPHABET.includes(lastChar);\n  return isNotLetter;\n};\n\n/* Create a function that returns true if the last character of a string is an alphabetical character and is not a parts of a words, and false otherwise.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  txt = txt.toLowerCase();\n  const lastChar = txt[txt.length - 1];\n  const isNotLetter =!ALPHABET.includes(lastChar);\n  return isNotLetter;\n};\n\n/* Create a function that returns true if the last character of a string is an alphabetical character and is not a parts of a words, and false otherwise.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  txt = txt.toLowerCase();\n  const lastChar = txt[txt.length - 1];\n  const isNotLetter =!ALPHABET.includes(lastChar);\n  return isNotLetter;\n};\n\n/* Create a function that returns true if the last character of a string is an alphabetical character and is not a parts of a words, and false otherwise.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastChar"}
{"task_id": "JavaScript/135", "prompt": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const arrLength = arr.length;\n  if (arrLength === 0) {\n    return -1;\n  }\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let smallest = arr[0];\n  while (j < arrLength) {\n    if (arr[j] < smallest) {\n      smallest = arr[j];\n      i = j;\n      k = j;\n    }\n    j++;\n  }\n  return k;\n};\n\n/*\n  The function returns the largest element of the given array.\n  If there is no largest element then return -1.\n  The given array will not containing duplicate value.\n  */\nconst largest = (arr) => {\n  const arrLength = arr.length;\n  if (arrLength === 0) {\n    return -1;\n  }\n  let i = 0;\n  let j = 0;\n  let largest = arr[0];\n  while (j < arrLength) {\n    if (arr[j] > largest) {\n      largest = arr[j];\n      i = j;\n    }\n    j++;\n  }\n  return i;\n};\n\n/*\n  The function returns the largest element of the given array.\n  If there is no largest element then return -1.\n  The given array will not containing duplicate value.\n  */\nconst smallest = (arr) => {\n  const arrLength = arr.length;\n  if (arrLength === 0) {\n    return -1;\n  }\n  let i = 0;\n  let j = 0;\n  let smallest = arr[0];\n  while (j < arrLength) {\n    if (arr[j] < smallest) {\n      smallest = arr[j];\n      i = j;\n    }\n    j++;\n  }\n  return i;\n};\n\nmodule.exports = {\n  canArrange,\n  largest,\n  smallest\n};\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n    let a = null\n    let b = null\n    for(let i = 0; i < lst.length; i++){\n        let v = lst[i]\n        if(v < 0){\n            if(!a || v > a){\n                a = v\n            }\n        }\n        else if(v > 0){\n            if(!b || v < b){\n                b = v\n            }\n        }\n    }\n    return a === null || b === null? (null, null) : (b, a)\n}\n\n// const largestSmallestIntegers = (lst) => {\n//     let a = null\n//     let b = null\n//     for(let i = 0; i < lst.length; i++){\n//         let v = lst[i]\n//         if(v < 0){\n//             if(!a || v > a){\n//                 a = v\n//             }\n//         }\n//         else if(v > 0){\n//             if(!b || v < b){\n//                 b = v\n//             }\n//         }\n//     }\n//     return a === null || b === null? (null, null) : (b, a)\n// }\n\n/*\n Returns the largest of three integers in a list\n  Examples:\n  largest([1, 3, 2, 4]) == 3\n  largest([1, 3, 2, 4, null]) == 3\n  largest([1, 3, 2, 4, 5, null, 6]) == 6\n  */\nconst largest = (lst) => {\n    if(lst.length == 0){\n        return null\n    }\n    let max = lst[0]\n    for(let i = 1; i < lst.length; i++){\n        let v = lst[i]\n        if(v > max){\n            max = v\n        }\n    }\n    return max\n}\n\n/*\n Returns the smallest of two integers in a list\n  Examples:\n  smallest([1, 3, 2, 4]) == 2\n  smallest([1, 3, 2, 4, null]) == 2\n  smallest([1, 3, 2, 4, 5, null, 6]) == 2\n  */\nconst smallest = (lst) => {\n    if(lst.length == 0){\n        return null\n    }\n    let min = lst[0]\n    for(let i = 1; i < lst.length; i++){\n        let v = lst[i]\n        if(v < min){\n            min = v\n        }\n    }\n    return min\n}\n\n/*\n Returns the smallest of three integers in a list\n  Examples:\n  smallest3([1, 3, 2, 4]) == 2\n  smallest3([1, 3, 2, 4, null]) == 2\n  smallest3([1, 3, 2, 4, 5, null, 6]) == 2\n  */\nconst smallest3 = (lst) => {\n    if(lst.length == 0){\n        return null\n    }\n    let min1 = lst[0]\n    let min2 = lst[0]\n    for(let i = 1; i < lst.length; i++){\n        let v = lst[i]\n        if(v < min1){\n            min1 = v\n        }\n        else if(v < min2){\n            min2 = v\n        }\n    }\n    return Math.min(min1, min2)\n}\n\n/*\n Returns the smallest of four integers in a list\n  Examples:\n  smallest4([1, 3, 2, 4]) == 1\n  smallest4([1, 3, 2, 4, null]) == 1\n  smallest4([1, 3, 2, 4, 5, null, 6]) == 1\n  */\nconst smallest4 = (lst) => {\n    if(lst.length == 0){\n        return null\n    }\n    let min1 = lst[0]\n    let min2 = lst[0]\n    let min3 = lst[0]\n    for(let i = 1; i < lst.length; i++){\n        let v = lst[i]\n        if(v < min1){\n            min1 = v\n        }\n        else if(v < min2){\n            min2 = v\n        }\n        else if(v < min3){\n            min3 = v\n        }\n    }\n    return Math.min(min1, Math.min(min2, min3))\n}\n\nmodule.exports = {\n    largestSmallestIntegers,\n    largest,\n    smallest,\n    smallest3,\n    smallest4\n}\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is . or , compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n  const number = (a, b) => typeof a === 'number'? a : b;\n  const str = (a, b) => typeof a ==='string'? a : b;\n  const bool = (a, b) => typeof a === 'boolean'? a : b;\n  const real = (a, b) => typeof a === 'number' && typeof b === 'number'? number(a, b) : null;\n  const one = (a, b) => a === b? null : a;\n  const two = (a, b) => a === b? null : b;\n  return (a, b) => {\n    const aa = number(a, b);\n    const bb = number(a, b);\n    const ab = real(a, b);\n    const ba = real(b, a);\n    const an = one(a, b);\n    const bn = two(a, b);\n    const abool = bool(a, b);\n    const bbool = bool(b, a);\n    if (aa === bb) return null;\n    if (aa === ab) return a;\n    if (bb === ba) return b;\n    if (an === bn) return null;\n    if (ab === ba) return a;\n    if (an === bn) return b;\n    if (bb === ab) return a;\n    if (ab === ba) return b;\n    if (aan === bbn) return null;\n    if (bn === bbn) return null;\n    if (aan === bbn) return a;\n    if (bn === bbn) return b;\n    if (bbn === bbn) return null;\n    if (aan === bbn) return a;\n    if (bbn === bbn) return b;\n    if (ab === bbn) return a;\n    if (ab === bbn) return b;\n    if (an === bbn) return a;\n    if (an === bbn) return b;\n    if (ab === bbn) return b;\n    if (ab === bbn) return a;\n    if (ba === bbn) return b;\n    if (ba === bbn) return a;\n    if (ba === bbn) return b;\n    if (ba === bbn) return a;\n    if (bbn === bbn) return null;\n    if (ba === bbn) return b;\n    if (bbn === bbn) return null;\n    if (ba === bbn) return b;\n    if (bbn === bbn) return a;\n    if (ab === bbn) return a;\n    if (ab === bbn) return b;\n    if (ab === bbn) return b;\n    if (ba === bbn) return b;\n    if (ba === bbn) return a;\n    if (ab === bbn) return a;\n    if (ba === bbn) return b;\n    if (bbn === bbn) return null;\n    if (ba === bbn) return b;\n    if (bbn === bbn) return null;\n    if (ba === bbn) return b;\n    if (bbn === bbn) return a;\n    if (bbn === bbn) return null;\n    if (ab === bbn) return a;\n    if (ab === bbn) return b;\n    if (ab === bbn) return b;\n    if (ba === bbn) return b;\n    if (ba === bbn) return a;\n    if (ab === bbn) return a;\n    if (ba === bbn) return b;\n    if (bbn === bbn) return null;\n    if (ba === bbn) return b;\n    if (bbn === bbn) return null;\n    if (ba === bbn) return b;\n    if (bbn === bbn) return a;\n    if (ab === bbn) return a;\n    if (ab === bbn) return b;\n    if (ab === bbn) return b;\n    if (ba === bbn) return b;\n    if (ba === bbn) return a;\n    if (ab === bbn) return a;\n    if (ba === bbn) return b;\n    if (bbn === bbn) return null;\n    if (ba === bbn) return b;\n    if (bbn === bbn) return null;\n    if (ba === bbn) return b;\n    if (bbn === bbn) return a;\n    if (ab === bbn) return a;\n    if (ab === bbn) return b;\n    if (ab === bbn) return b;\n    if (ba === bbn) return b;\n    if (ba === bbn) return a;\n    if (bbn === bbn) return null;\n    if (ba === bbn) return b;\n    if (bbn === bbn) return null;\n    if (ba === bbn) return b;\n    if (bbn === bbn) return a;\n    if (ab === bbn) return a;\n    if (ab === bbn) return b;\n    if (ab === bbn) return b;\n    if (ba === bbn) return b;\n    if (ba === bbn) return a;\n    if (bbn === bbn) return null;\n    if (ba === bbn) return b;\n    if (bbn === bbn) return null;\n    if (ba === bbn) return b;\n    if (bbn === bbn) return a;\n    if (ab === bbn) return a;\n    if (ab === bbn) return b;\n    if (ab === bbn) return b;\n    if (ba === bbn) return b;\n    if (ba === bbn) return a;\n    if (bbn === bbn) return null;\n    if (ba === bbn) return b;\n    if (bbn === bbn) return null;"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n === 0 || n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  return isEqualToSumEven(n - 2)\n}\n\nconst isEqualToSumEven = (n) => {\n  if (n === 0 || n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  return isEqualToSumEven(n - 2)\n}\n\nconsole.log(isEqualToSumEven(4))\nconsole.log(isEqualToSumEven(6))\nconsole.log(isEqualToSumEven(8))\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  // this.log(n) - Math.log(n - 1) - Math.log(n - 2) - Math.log(n - 3)\n  const sum = n * (n - 1) * (n - 2) * (n - 3);\n  return sum;\n};\n\nexport default specialFactorial;\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n    const newText = text.replace(/\\s+/g, '_');\n    if (newText.length > 2) {\n        return newText.replace(/\\s+/g, '-');\n    }\n    return newText;\n}\n\n/*\n  Gives a string text, replaces all punctuation with underscore, and if a string had more than 2 consecutive punctuation, then replacing all consecutive punctuation with - fixPunctuation(\"Example\") == \"Example\"\n  fixPunctuation(\"Example 1\") == \"Example_1\"\n  fixPunctuation(\" Example 2\") == \"_Example_2\"\n  fixPunctuation(\" Example   3\") == \"_Example-3\"\n  */\nconst fixPunctuation = (text) => {\n    const newText = text.replace(/[^a-zA-Z0-9\\s]/g, '_');\n    if (newText.length > 2) {\n        return newText.replace(/[^a-zA-Z0-9\\s]/g, '-');\n    }\n    return newText;\n}\n\n/*\n  Gives a string text, replacing all non-alphanumeric characters with underscores, and if a string had more than 2 consecutive non-alphanumeric characters, then replacing all consecutive non-alphanumeric characters with - fixNonAlphaNumeric(\"Example\") == \"Example\"\n  fixNonAlphaNumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphaNumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphaNumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphaNumeric = (text) => {\n    const newText = text.replace(/[^a-zA-Z0-9\\s]/g, '_');\n    if (newText.length > 2) {\n        return newText.replace(/[^a-zA-Z0-9\\s]/g, '-');\n    }\n    return newText;\n}\n\n/*\n  Gives a string text, removing all spaces in it, and if a string had more than 2 spaces, then removing all spaces in front of them, then returning it\n  removeSpaces(\"Example 1\") == \"Example1\"\n  removeSpaces(\"Example   2\") == \"Example2\"\n  removeSpaces(\"Example 3\") == \"Example3\"\n  */\nconst removeSpaces = (text) => {\n    const newText = text.replace(/\\s+/g, '');\n    if (newText.length > 2) {\n        return newText.replace(/^\\s+/,'');\n    }\n    return newText;\n}\n\n/*\n  Gives a string text, removing all non-alphanumeric characters in it, and if a string had more than 2 non-alphanumeric characters, then removing all non-alphanumeric characters in front of them, then returning it\n  removeNonAlphaNumeric(\"Example 1\") == \"Example1\"\n  removeNonAlphaNumeric(\"Example   2\") == \"Example2\"\n  removeNonAlphaNumeric(\"Example 3\") == \"Example3\"\n  */\nconst removeNonAlphaNumeric = (text) => {\n    const newText = text.replace(/[^a-zA-Z0-9\\s]/g, '');\n    if (newText.length > 2) {\n        return newText.replace(/^[^a-zA-Z0-9\\s]/,'');\n    }\n    return newText;\n}\n\n/*\n  Gives a string text, replacing all spaces with dashes, and if a string had more than 2 consecutive spaces, then replacing all consecutive spaces with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example-1\"\n  fixSpaces(\" Example 2\") == \"-Example-2\"\n  fixSpaces(\" Example   3\") == \"-Example-3\"\n  */\nconst fixSpacesWithDash = (text) => {\n    const newText = text.replace(/\\s+/g, '-');\n    if (newText.length > 2) {\n        return newText.replace(/\\s+/g, '-');\n    }\n    return newText;\n}\n\n/*\n  Gives a string text, replacing all punctuation with dashes, and if a string had more than 2 consecutive punctuation, then replacing all consecutive punctuation with - fixPunctuation(\"Example\") == \"Example\"\n  fixPunctuation(\"Example 1\") == \"Example-1\"\n  fixPunctuation(\" Example 2\") == \"-Example-2\"\n  fixPunctuation(\" Example   3\") == \"-Example-3\"\n  */\nconst fixPunctuationWithDash = (text) => {\n    const newText = text.replace(/[^a-zA-Z0-9\\s]/g, '-');\n    if (newText.length > 2) {\n        return newText.replace(/[^a-zA-Z0-9\\s]/g, '-');\n    }\n    return newText;\n}\n\n/*\n  Gives a string text, replacing all non-alphanumeric characters with dashes, and if a string had more than 2 non-alphanumeric characters, then replacing all non-alphanumeric characters with - fixNonAlphaNumeric(\"Example\") == \"Example\"\n  fixNonAlphaNumeric(\"Example 1\") == \"Example-1\"\n  fixNonAlphaNumeric(\" Example 2\") == \"-Example-2\"\n  fixNonAlphaNumeric(\" Example   3\") == \"-Example-3\"\n  */\nconst fixNonAlphaNumericWithDash = (text) => {\n    const newText = text.replace(/[^a-zA-Z0-9\\s]/g, '-');\n    if (newText.length > 2) {\n        return newText.replace(/[^a-zA-Z0-9\\s]/g, '-');\n    }\n    return newText;\n}\n\n/*\n  Gives a string text, removing all spaces and punctuation in it, and if a string had more"}
{"task_id": "JavaScript/141", "prompt": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  file_name = file_name.trim();\n  if(file_name.length > 3){\n    return \"No\";\n  }\n  const pattern = /^[a-zA-Z][a-zA-Z0-9.]+$/;\n  if(!pattern.test(file_name)){\n    return \"No\";\n  }\n  const dots_pattern = /^([^.]+)\\./;\n  const name_list = file_name.split(\".\");\n  if(name_list.length > 1){\n    if(name_list.length > 3){\n      return \"No\";\n    }\n    if(!dots_pattern.test(name_list[0])){\n      return \"No\";\n    }\n  }\n  return \"Yes\";\n}\n\n/*\n  Create a function which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck_noDots = (file_name) => {\n  file_name = file_name.trim();\n  if(file_name.length > 3){\n    return \"No\";\n  }\n  const pattern = /^[a-zA-Z][a-zA-Z0-9]{1}+$/;\n  if(!pattern.test(file_name)){\n    return \"No\";\n  }\n  const dots_pattern = /^([^.]+)\\./;\n  const name_list = file_name.split(\".\");\n  if(name_list.length > 1){\n    if(name_list.length > 3){\n      return \"No\";\n    }\n    if(!dots_pattern.test(name_list[0])){\n      return \"No\";\n    }\n  }\n  return \"Yes\";\n}\n\nmodule.exports = {\n  fileNameCheck,\n  fileNameCheck_noDots\n};\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  const squares = (x) => {\n    return x * x;\n  };\n  const cubes = (x) => {\n    return x * x * x;\n  };\n  return lst.reduce(\n    (acc, n) => (n % 3 === 0? squares(acc + cubes(n)) : acc),\n    0\n  );\n};\n\nconst sumSquares2 = (lst) => {\n  return lst.reduce((acc, n) => {\n    if (n % 4 === 0) return acc + n * n * n;\n    else if (n % 3 === 0) return acc + n * n * n;\n    else return acc + n * n;\n  }, 0);\n};\n\nconsole.log(sumSquares([1,2,3])); // 6\nconsole.log(sumSquares([])); // 0\nconsole.log(sumSquares([-1,-5,2,-1,-5])); // -126\nconsole.log(sumSquares2([1,2,3])); // 6\nconsole.log(sumSquares2([])); // 0\nconsole.log(sumSquares2([-1,-5,2,-1,-5])); // -126<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    let newSentence = sentence.split(\" \")\n    let words = []\n    for(let i = 0; i < newSentence.length; i++) {\n        let word = newSentence[i]\n        if(word.length === 1) {\n            words.push(word)\n        }\n    }\n    let newWords = []\n    for(let i = 0; i < words.length; i++) {\n        let currentWord = words[i]\n        let isPrime = true\n        for(let j = 0; j < words.length; j++) {\n            if(currentWord === words[j]) {\n                isPrime = false\n                break\n            }\n        }\n        if(isPrime) {\n            newWords.push(currentWord)\n        }\n    }\n    return newWords.join(\"\")\n}\n\nconsole.log(wordsInSentence(\"This is a test\"))\nconsole.log(wordsInSentence(\"lets go for swimming\"))\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n\tconst xArray = x.split(\"/\").map(Number)\n\tconst nArray = n.split(\"/\").map(Number)\n\tconst xDigits = xArray.map(Number)\n\tconst nDigits = nArray.map(Number)\n\tconst xDigitsSum = xDigits.reduce((a, b) => a + b, 0)\n\tconst nDigitsSum = nDigits.reduce((a, b) => a + b, 0)\n\tif (xDigitsSum === nDigitsSum) return true\n\treturn false\n}\n\n/* Your task is to create a function that will take a string representing an integer and return true if and only if the string can be converted to a valid integer. For example, if the string \"123\" is passed to the function, then the function should return true. If the string \"notaninteger\" is passed to the function, then the function should return false. */ const isInteger = (x) => {\n\tlet i = 0\n\tlet n = parseInt(x, 10)\n\twhile (i < x.length) {\n\t\tif (x[i] === \"0\") {\n\t\t\tif (i === x.length - 1) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\treturn false\n\t\t}\n\t\tn = n * 10 + parseInt(x[i], 10)\n\t\ti++\n\t}\n\treturn true\n}\n\n/* Your task is to create a function that will take a string representing an integer and return true if and only if the string can be converted to a valid integer. For example, if the string \"123\" is passed to the function, then the function should return true. If the string \"notaninteger\" is passed to the function, then the function should return false. */ const isRational = (x) => {\n\tlet i = 0\n\tlet n = 0\n\tlet a = parseInt(x.split(\"/\").pop(), 10)\n\twhile (i < x.length) {\n\t\tif (x[i] === \"0\") {\n\t\t\tif (i === x.length - 1) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\treturn false\n\t\t}\n\t\tn = n * 10 + parseInt(x[i], 10)\n\t\ti++\n\t}\n\treturn true\n}\n\n/* Your task is to implement the following function:\n\tconst addFractions = (x, y) => {\n\t\tif (!isRational(x) ||!isRational(y)) {\n\t\t\treturn false\n\t\t}\n\t\treturn simplify(x, y)\n\t}\n\tThis function should take two strings representing two fractions and return true if and only if they are the same. For example, if the strings \"1/3\" and \"2/4\" are passed to the function, then the function should return false. If the strings \"1/3\" and \"5/7\" are passed to the function, then the function should return true. */ const sameFractions = (x, y) => {\n\t\tif (!isRational(x) ||!isRational(y)) {\n\t\t\treturn false\n\t\t}\n\t\treturn simplify(x, y)\n\t}\n\n/* Your task is to implement the following function:\n\tconst multiplyFractions = (x, y) => {\n\t\tif (!isRational(x) ||!isRational(y)) {\n\t\t\treturn false\n\t\t}\n\t\treturn simplify(x, y)\n\t}\n\tThis function should take two strings representing two fractions and return true if and only if they are different. For example, if the strings \"1/3\" and \"2/4\" are passed to the function, then the function should return false. If the strings \"1/3\" and \"5/7\" are passed to the function, then the function should return true. */ const differentFractions = (x, y) => {\n\t\tif (!isRational(x) ||!isRational(y)) {\n\t\t\treturn false\n\t\t}\n\t\treturn simplify(x, y)\n\t}\n\n/* Your task is to implement the following function:\n\tconst addDigits = (x, y) => {\n\t\tif (isInteger(x) && isInteger(y)) {\n\t\t\treturn simplify(x, y)\n\t\t}\n\t\treturn false\n\t}\n\tThis function should take two strings representing two integers and return true if and only if they are the same. For example, if the strings \"123\" and \"456\" are passed to the function, then the function should return false. If the strings \"123\" and \"456\" are passed to the function, then the function should return true. */ const sameDigits = (x, y) => {\n\t\tif (isInteger(x) && isInteger(y)) {\n\t\t\treturn simplify(x, y)\n\t\t}\n\t\treturn false\n\t}\n\n/* Your task is to implement the following function:\n\tconst multiplyDigits = (x, y) => {\n\t\tif (isInteger(x) && isInteger(y)) {\n\t\t\treturn simplify(x, y)\n\t\t}\n\t\treturn false\n\t}\n\tThis function should take two strings representing two integers and return true if and only if they are different. For example, if the strings \"123\" and \"456\" are passed to the function, then the function should return false. If the strings \"123\" and \"456\" are passed to the function, then the function should return true. */ const differentDigits = (x, y) => {\n\t\tif (isInteger(x) && isInteger(y)) {\n\t\t\treturn simplify(x, y)\n\t\t}\n\t\treturn false\n\t}\n\n/* Your task is to implement the following function:\n\tconst addLetters = (x, y) => {\n\t\tif (isInteger(x) && isInteger(y)) {\n\t\t\treturn simplify(x, y)\n\t\t}\n\t\treturn false\n\t}\n\tThis function should take two strings representing two integers and return true if and only if they are the same. For example, if the strings \"123\" and \"456\" are passed to the function, then the function should return false. If the strings \"123\""}
{"task_id": "JavaScript/145", "prompt": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const points = []\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i]\n    const sum = sumDigits(num)\n    points.push({sum, index: i})\n  }\n  points.sort((a, b) => a.sum - b.sum)\n  return points.map(p => nums[p.index])\n}\n\nfunction sumDigits(num) {\n  return num.toString(10).split(\"\").reduce((a, b) => a + parseInt(b), 0)\n}\n\nfunction orderByIndices(nums) {\n  return nums.sort((a, b) => a - b)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  let lastDigit = 0;\n  let firstDigit = 0;\n  for (let i = 0; i < nums.length; i++) {\n    lastDigit = nums[i].charAt(nums[i].length - 1);\n    firstDigit = nums[i].charAt(0);\n    if (nums[i] > 10 && lastDigit === firstDigit && lastDigit === '1') {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n// console.log(specialFilter([15, -73, 14, -15]));\n// console.log(specialFilter([33, -2, -3, 45, 21, 109]));\nconsole.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]));<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...new Array(n)].map((_, i) => i * i - i + 1);\n  const tripleCount = a.reduce((acc, num, index) => acc + (a[index + 1] === a[index]? 1 : 0), 0);\n  return tripleCount;\n};\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  //console.log(`${planet1} is closest to ${planet2}`)\n  if(planet1 == planet2) {\n    return []\n  }\n\n  //if planet1 is the closest to the sun\n  if(planet1.length < planet2.length) {\n    return bf(planet2, planet1)\n  }\n\n  // if planet2 is the closest to the sun\n  if(planet2.length < planet1.length) {\n    return bf(planet1, planet2)\n  }\n\n  let result = []\n  let currentPlanet = planet1\n  let distance = 0\n  while(distance < planet2.length) {\n    result.push(currentPlanet)\n    distance += 1\n    currentPlanet = getNextPlanet(currentPlanet)\n  }\n\n  return result\n}\n\nlet getNextPlanet = (planet) => {\n  switch(planet) {\n    case \"Mercury\":\n      return \"Venus\"\n    case \"Venus\":\n      return \"Earth\"\n    case \"Earth\":\n      return \"Mars\"\n    case \"Mars\":\n      return \"Jupiter\"\n    case \"Jupiter\":\n      return \"Saturn\"\n    case \"Saturn\":\n      return \"Uranus\"\n    case \"Uranus\":\n      return \"Neptune\"\n    case \"Neptune\":\n      return \"Pluto\"\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n    lst.sort((a, b) => {\n        return a.length - b.length;\n    });\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        let tmp = 0;\n        for (let j = i; j < lst.length; j++) {\n            if (lst[j].length > lst[i].length) {\n                break;\n            }\n            tmp += lst[j].length;\n        }\n        result.push(tmp);\n    }\n    return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) return x;\n  return y;\n};\n\nconst isPrime = n => {\n  if (n == 2) return true;\n  if (n == 3) return true;\n  if (n == 5) return true;\n  if (n == 7) return true;\n  if (n == 11) return true;\n  if (n == 13) return true;\n  if (n == 17) return true;\n  if (n == 19) return true;\n  if (n == 23) return true;\n  if (n == 29) return true;\n  if (n == 31) return true;\n  if (n == 37) return true;\n  if (n == 41) return true;\n  if (n == 43) return true;\n  if (n == 47) return true;\n  if (n == 53) return true;\n  if (n == 59) return true;\n  if (n == 61) return true;\n  if (n == 67) return true;\n  if (n == 71) return true;\n  if (n == 73) return true;\n  if (n == 79) return true;\n  if (n == 83) return true;\n  if (n == 89) return true;\n  if (n == 97) return true;\n  if (n == 101) return true;\n  if (n == 103) return true;\n  if (n == 107) return true;\n  if (n == 109) return true;\n  if (n == 113) return true;\n  if (n == 127) return true;\n  if (n == 131) return true;\n  if (n == 137) return true;\n  if (n == 139) return true;\n  if (n == 149) return true;\n  if (n == 151) return true;\n  if (n == 157) return true;\n  if (n == 163) return true;\n  if (n == 167) return true;\n  if (n == 169) return true;\n  if (n == 173) return true;\n  if (n == 179) return true;\n  if (n == 181) return true;\n  if (n == 191) return true;\n  if (n == 193) return true;\n  if (n == 197) return true;\n  if (n == 199) return true;\n  if (n == 211) return true;\n  if (n == 227) return true;\n  if (n == 229) return true;\n  if (n == 233) return true;\n  if (n == 239) return true;\n  if (n == 241) return true;\n  if (n == 251) return true;\n  if (n == 257) return true;\n  if (n == 263) return true;\n  if (n == 269) return true;\n  if (n == 271) return true;\n  if (n == 277) return true;\n  if (n == 281) return true;\n  if (n == 283) return true;\n  if (n == 293) return true;\n  if (n == 307) return true;\n  if (n == 311) return true;\n  if (n == 313) return true;\n  if (n == 317) return true;\n  if (n == 319) return true;\n  if (n == 331) return true;\n  if (n == 337) return true;\n  if (n == 347) return true;\n  if (n == 349) return true;\n  if (n == 353) return true;\n  if (n == 359) return true;\n  if (n == 367) return true;\n  if (n == 373) return true;\n  if (n == 379) return true;\n  if (n == 383) return true;\n  if (n == 389) return true;\n  if (n == 397) return true;\n  if (n == 401) return true;\n  if (n == 409) return true;\n  if (n == 419) return true;\n  if (n == 421) return true;\n  if (n == 431) return true;\n  if (n == 433) return true;\n  if (n == 439) return true;\n  if (n == 443) return true;\n  if (n == 449) return true;\n  if (n == 457) return true;\n  if (n == 461) return true;\n  if (n == 463) return true;\n  if (n == 467) return true;\n  if (n == 479) return true;\n  if (n == 487) return true;\n  if (n == 491) return true;\n  if (n == 499) return true;\n  if (n == 503) return true;\n  if (n == 509) return true;\n  if (n == 521) return true;\n  if (n == 523) return true;\n  if (n == 541) return true;\n  if (n == 547) return true;\n  if (n == 557) return true;\n  if (n == 563) return true;\n  if (n == 569) return true;\n  if (n == 571) return true;\n  if (n == 577) return true;\n  if (n == 587) return true;\n  if (n == 593) return true;\n  if (n == 599) return true;\n  if (n == 601) return true;\n  if (n == 607) return true;\n  if (n == 613) return true;\n  if (n == 617) return true;\n  if (n == 619) return true;\n  if (n == 631) return true;\n  if (n == 641) return true;\n  if (n == 643) return true;\n  if (n == 647) return true;\n  if (n == 653) return true;\n  if (n == 659) return true;\n  if (n == 661) return true;\n  if (n == 673) return true;\n  if (n == 677) return true;\n  if (n == 683) return true;\n  if (n == 691) return true;\n  if ("}
{"task_id": "JavaScript/151", "prompt": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  let total = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    total += Math.pow(lst[i], 2)\n  }\n  return total\n}\n\n/* Gives a list of numbers, return the sum of the squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference2 = (lst) => {\n  let total = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    total += Math.pow(lst[i], 2)\n  }\n  return total\n}\n\n/* Gives a list of numbers, return the sum of the squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference3 = (lst) => {\n  let total = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    total += Math.pow(lst[i], 2)\n  }\n  return total\n}\n\n/* Gives a list of numbers, return the sum of the squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference4 = (lst) => {\n  let total = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    total += Math.pow(lst[i], 2)\n  }\n  return total\n}\n\n/* Gives a list of numbers, return the sum of the squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference5 = (lst) => {\n  let total = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    total += Math.pow(lst[i], 2)\n  }\n  return total\n}\n\n/* Gives a list of numbers, return the sum of the squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference6 = (lst) => {\n  let total = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    total += Math.pow(lst[i], 2)\n  }\n  return total\n}\n\n/* Gives a list of numbers, return the sum of the squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference7 = (lst) => {\n  let total = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    total += Math.pow(lst[i], 2)\n  }\n  return total\n}\n\n/* Gives a list of numbers, return the sum of the squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference8 = (lst) => {\n  let total = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    total += Math.pow(lst[i], 2)\n  }\n  return total\n}\n\n/* Gives a list of numbers, return the sum of the squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference9 = (lst) => {\n  let total = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    total += Math.pow(lst[i], 2)\n"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let scores = game.slice(0)\n  let guesses = guess.slice(0)\n  let nums = scores.length\n  let results = []\n  let min = scores[0]\n  for (let i = 0; i < nums; i++) {\n    results[i] = Math.abs(scores[i] - guesses[i])\n    if (scores[i] < min) {\n      min = scores[i]\n    }\n  }\n  return results\n}\n\nmodule.exports = compare\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const extension_strength = {};\n  const strength_map = {};\n\n  extensions.forEach(extension => {\n    const extension_name = extension.replace(/^\\./g, '').replace(/\\./g, '_').replace(/\\//g, '').toLowerCase();\n    const strength = class_name.length - extension_name.length;\n    if (strength_map[extension_name]) {\n      strength = strength_map[extension_name];\n    }\n    extension_strength[extension_name] = strength;\n    strength_map[extension_name] = strength;\n  });\n\n  return class_name + '.' + Object.keys(extension_strength)\n   .sort((a, b) => extension_strength[b] - extension_strength[a])\n   .pop()\n   .replace(/\\./g, '_');\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n    const pattern = /[a-z]/;\n    const bArray = b.split('');\n    let aArray = a.split('');\n    let cnt = 0;\n    while (aArray.length!== 0) {\n        if (pattern.test(aArray[0])) {\n            cnt++;\n            if (bArray.every(x => x === aArray[0])) {\n                return true;\n            }\n        }\n        aArray.shift();\n    }\n    return false;\n}\n\nmodule.exports = cycpatternCheck;\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0, odd = 0;\n  while (num!== 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 2);\n  }\n  return (even, odd);\n};\n\nconsole.log(evenOddCount(-12));\nconsole.log(evenOddCount(123));<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  if (number <= 1) return 'i';\n  const tens = ['ii', 'iii', 'iv'];\n  const tensAndOnes = ['x', 'xx', 'xxi', 'xxx'];\n  const ones = ['v', 'vi', 'vii', 'viii'];\n  const teens = ['x', 'xi', 'xii', 'xiii'];\n  const thousands = ['m','mm','mmm'];\n  let result = '';\n  while (number > 0) {\n    if (number % 10 === 0) {\n      result += thousands[number / 10];\n      result +='m';\n      number = number % 10;\n    } else {\n      if (number % 100 === 0) {\n        result += thousands[number / 100];\n        result +='mm';\n        number = number % 100;\n      } else if (number % 10 === 0) {\n        result += tensAndOnes[number / 10];\n        number = number % 10;\n      } else if (number % 10 === 1) {\n        result += ones[number / 10];\n        number = number % 10;\n      } else {\n        if (number % 10 === 2) {\n          result += ones[number / 10];\n          result += 'ii';\n          number = number % 10;\n        } else if (number % 10 === 3) {\n          result += ones[number / 10];\n          result += 'iii';\n          number = number % 10;\n        } else if (number % 10 === 4) {\n          result += ones[number / 10];\n          result += 'iv';\n          number = number % 10;\n        } else if (number % 10 === 5) {\n          result += ones[number / 10];\n          result += 'vii';\n          number = number % 10;\n        } else if (number % 10 === 6) {\n          result += ones[number / 10];\n          result += 'viii';\n          number = number % 10;\n        } else if (number % 10 === 7) {\n          result += ones[number / 10];\n          result += 'ix';\n          number = number % 10;\n        } else if (number % 10 === 8) {\n          result += ones[number / 10];\n          result += 'xii';\n          number = number % 10;\n        } else if (number % 10 === 9) {\n          result += ones[number / 10];\n          result += 'xiii';\n          number = number % 10;\n        }\n      }\n    }\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n    return (Math.abs(Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math.PI / 180 * (Math.cos(Math.PI / 180 * (Math.acos(Math.min((Math.cos(Math"}
{"task_id": "JavaScript/158", "prompt": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n  const uniqueCount = new Map()\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const character = word.split('').reduce((a, b) => a + b, '')\n    uniqueCount.set(character, uniqueCount.get(character) || 0)\n    uniqueCount.set(character, uniqueCount.get(character) + 1)\n  }\n  const max = new Map()\n  for (let [key, value] of uniqueCount) {\n    max.set(value, key)\n  }\n  for (let [key, value] of max) {\n    if (max.get(value) === value) {\n      return value\n    }\n  }\n}\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]))\nconsole.log(findMax([\"name\", \"enam\", \"games\"]))\nconsole.log(findMax([\"aaaaaaa\", \"bb\", \"cc\"]))\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const eaten = number - need;\n  const total = number + eaten;\n  const left = remaining - eaten;\n\n  if (left > 0) {\n    return [total, left];\n  } else {\n    return [total, remaining];\n  }\n}\n\nexport { eat };\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const numOperator = operator.length - 1\n  const numOperand = operand.length - 1\n  if (numOperand < 1) throw new Error('Operand must have at least one value')\n  if (numOperator < 1) throw new Error('Operator must have at least one value')\n  if (numOperand > 1) {\n    if (operator[0] === '+' || operator[0] === '-') {\n      return operand[numOperand - 1] + operator[0] + doAlgebra(operator.slice(1), operand.slice(0, numOperand - 1))\n    }\n    return operand[numOperand - 1] + doAlgebra(operator.slice(1), operand.slice(0, numOperand - 1))\n  }\n  if (numOperand === 1) {\n    return operand[0] + operator[0]\n  }\n  throw new Error('Invalid number of operands')\n}\n\n// Test\nconst test = (operator, operand) => {\n  console.log(doAlgebra(operator, operand))\n}\n\n// main\ntest([2, 3, 4, 5], [2, 3, 4, 5])\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let a = s.split('')\n  let i = a.length - 1\n  while (i >= 0) {\n    if (a[i] >= 'a' && a[i] <= 'z') {\n      a[i] = a[i].toUpperCase()\n    } else if (a[i] >= 'A' && a[i] <= 'Z') {\n      a[i] = a[i].toLowerCase()\n    }\n    i -= 1\n  }\n  return a.join('')\n}\n\nmodule.exports = solve\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if(text.length === 0) {\n    return null;\n  } else {\n    const hasher = crypto.createHash('md5')\n    hasher.update(text)\n    return hasher.digest('hex')\n  }\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5(null) == null\n  */\nconst stringToMd5Null = (text) => {\n  if(text === null) {\n    return null\n  } else {\n    return stringToMd5(text)\n  }\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('') == null\n  */\nconst stringToMd5Empty = (text) => {\n  if(text.length === 0) {\n    return null\n  } else {\n    return stringToMd5(text)\n  }\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5Full = (text) => {\n  if(text.length === 0) {\n    return null\n  } else {\n    const hasher = crypto.createHash('md5')\n    hasher.update(text)\n    return hasher.digest('hex')\n  }\n}\n\nmodule.exports = {\n  stringToMd5,\n  stringToMd5Null,\n  stringToMd5Empty,\n  stringToMd5Full\n}\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a < b) {\n    return []\n  }\n\n  const result = []\n  let i = a\n\n  while (i <= b) {\n    result.push(i)\n    i += 2\n  }\n\n  return result\n}\n\ndescribe('generateIntegers', () => {\n  it('should return [2, 4, 6, 8]', () => {\n    expect(generateIntegers(2, 8)).toEqual([2, 4, 6, 8])\n  })\n\n  it('should return [2, 4, 6, 8]', () => {\n    expect(generateIntegers(8, 2)).toEqual([2, 4, 6, 8])\n  })\n\n  it('should return []', () => {\n    expect(generateIntegers(10, 14)).toEqual([]))\n  })\n})\n<|endoftext|>"}
