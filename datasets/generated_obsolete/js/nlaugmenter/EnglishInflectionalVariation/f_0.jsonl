{"task_id": "JavaScript/0", "prompt": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n    return numbers.some(x => Math.abs(x - numbers[0]) < threshold);\n};\n\n/**\n  * @description Checks if all numbers in given array are between given min and max\n  * @param {Array} numbers Given array of numbers\n  * @param {Number} min Given minimum number\n  * @param {Number} max Given maximum number\n  * @returns {Boolean} True if all numbers are between given min and max\n  * @example\n  * hasBetweenElements([1.0, 2.0, 3.0], 1.0, 3.0)\n  * // -> false\n  * hasBetweenElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 1.0, 3.0)\n  * // -> true\n  */\nconst hasBetweenElements = (numbers, min, max) => {\n    return numbers.every(x => x >= min && x <= max);\n};\n\nexport {\n    hasCloseElements,\n    hasBetweenElements,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let stack = [];\n  let stack_length = 0;\n  const paren_chars = paren_string.split('(');\n  for (let i = 0; i < paren_chars.length; i++) {\n    stack_length = stack.push(paren_chars[i]);\n  }\n  const output = [];\n  while (stack_length > 0) {\n    const temp = stack.pop();\n    if (temp === ')') {\n      stack_length--;\n      if (stack_length === 0) {\n        output.push(temp);\n      }\n    } else if (temp === '(') {\n      stack_length++;\n      output.push(temp);\n    }\n  }\n  return output;\n};\n\n/*\n  Given a string which contains multiple group of nested parentheses, find the length of the longest substring without parentheses, and return it.\n  >>> longestSubstring('()')\n  0\n  >>> longestSubstring('(())')\n  2\n  >>> longestSubstring('()())')\n  4\n  >>> longestSubstring('(()())')\n  4\n  >>> longestSubstring('((())())')\n  6\n  >>> longestSubstring('((()))')\n  6\n  >>> longestSubstring('(()))')\n  6\n  >>> longestSubstring('(())()')\n  7\n  >>> longestSubstring('(())()')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('())')\n  1\n  >>> longestSubstring('())')\n  1\n  >>> longestSubstring('(()(()()))')\n  7\n  >>> longestSubstring('()())())')\n  7\n  >>> longestSubstring('()()(())')\n  7\n  >>> longestSubstring('()()()(())')\n  9\n  >>> longestSubstring('()()())')\n  9\n  >>> longestSubstring('()()()')\n  9\n  >>> longestSubstring('()())')\n  9\n  >>> longestSubstring('()())')\n  9\n  >>> longestSubstring('())')\n  0\n  >>> longestSubstring('())')\n  0\n  >>> longestSubstring('())')\n  0\n  >>> longestSubstring('())')\n  0\n  >>> longestSubstring('())')\n  0\n  >>> longestSubstring('())')\n  0\n  >>> longestSubstring('())')\n  0\n  >>> longestSubstring('())')\n  0\n  >>> longestSubstring('())')\n  0\n  >>> longestSubstring('()(()())')\n  7\n  >>> longestSubstring('(())()')\n  7\n  >>> longestSubstring('(()())')\n  7\n  >>> longestSubstring('()())')\n  7\n  >>> longestSubstring('(())())')\n  7\n  >>> longestSubstring('((())())')\n  7\n  >>> longestSubstring('((()))')\n  7\n  >>> longestSubstring('(()))')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())')\n  7\n  >>> longestSubstring('(())"}
{"task_id": "JavaScript/2", "prompt": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let intPart = number.toFixed(0);\n  let decPart = number.toFixed(2);\n  let result = intPart + '.' + decPart;\n  return result;\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInt = (number) => {\n  let intPart = number.toFixed(0);\n  let decPart = number.toFixed(2);\n  let result = intPart + decPart;\n  return result;\n};\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInt2 = (number) => {\n  let intPart = number.toFixed(0);\n  let decPart = number.toFixed(1);\n  let result = intPart + decPart;\n  return result;\n};\n\nconst truncate = (number) => {\n  let intPart = number.toFixed(0);\n  let decPart = number.toFixed(1);\n  let result = intPart + decPart;\n  return result;\n};\n\nmodule.exports = {\n  truncateInt,\n  truncateInt2,\n  truncateNumber,\n  truncate\n};\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const list = [...operations];\n  let isBelowZero = false;\n  let index = 0;\n  while (index < list.length) {\n    const current = list[index];\n    if (current === 0) {\n      isBelowZero = true;\n      break;\n    }\n    index++;\n  }\n  return isBelowZero;\n};\n\n/*\n  Given an array of numbers, find the sum of the numbers that have a product that is equal to zero.\n\n  >>> sumOfProducts({1: -1, 2: -2, 3: -3, 4: -4, 5: -5})\n  5\n  >>> sumOfProducts({1: -1, 2: -2, 3: -3, 4: -4, 5: -5, 6: -6})\n  6\n  >>> sumOfProducts({1: -1, 2: -2, 3: -3, 4: -4, 5: -5, 6: -6, 7: -7, 8: -8})\n  8\n  >>> sumOfProducts({1: -1, 2: -2, 3: -3, 4: -4, 5: -5, 6: -6, 7: -7, 8: -8, 9: -9})\n  9\n  >>> sumOfProducts({1: -1, 2: -2, 3: -3, 4: -4, 5: -5, 6: -6, 7: -7, 8: -8, 9: -9, 10: -10})\n  10\n  >>> sumOfProducts({1: -1, 2: -2, 3: -3, 4: -4, 5: -5, 6: -6, 7: -7, 8: -8, 9: -9, 10: -10, 11: -11})\n  11\n  >>> sumOfProducts({1: -1, 2: -2, 3: -3, 4: -4, 5: -5, 6: -6, 7: -7, 8: -8, 9: -9, 10: -10, 11: -11, 12: -12})\n  12\n  >>> sumOfProducts({1: -1, 2: -2, 3: -3, 4: -4, 5: -5, 6: -6, 7: -7, 8: -8, 9: -9, 10: -10, 11: -11, 12: -12, 13: -13})\n  13\n  >>> sumOfProducts({1: -1, 2: -2, 3: -3, 4: -4, 5: -5, 6: -6, 7: -7, 8: -8, 9: -9, 10: -10, 11: -11, 12: -12, 13: -13, 14: -14})\n  14\n  >>> sumOfProducts({1: -1, 2: -2, 3: -3, 4: -4, 5: -5, 6: -6, 7: -7, 8: -8, 9: -9, 10: -10, 11: -11, 12: -12, 13: -13, 14: -14, 15: -15})\n  15\n  >>> sumOfProducts({1: -1, 2: -2, 3: -3, 4: -4, 5: -5, 6: -6, 7: -7, 8: -8, 9: -9, 10: -10, 11: -11, 12: -12, 13: -13, 14: -14, 15: -15, 16: -16})\n  16\n  >>> sumOfProducts({1: -1, 2: -2, 3: -3, 4: -4, 5: -5, 6: -6, 7: -7, 8: -8, 9: -9, 10: -10, 11: -11, 12: -12, 13: -13, 14: -14, 15: -15, 16: -16, 17: -17})\n  17\n  >>> sumOfProducts({1: -1, 2: -2, 3: -3, 4: -4, 5: -5, 6: -6, 7: -7, 8: -8, 9: -9, 10: -10, 11: -11, 12: -12, 13: -13, 14: -14, 15: -15, 16: -16, 17: -17, 18: -18})\n  18\n  >>> sumOfProducts({1: -1, 2: -2, 3: -3, 4: -4, 5: -5, 6: -6, 7: -7, 8: -8, 9: -9, 10: -10, 11: -11, 12: -12, 13: -13, 14: -14, 15: -15, 16: -16, 17: -17, 18: -18, 19: -19})\n  19\n  >>> sumOfProducts({1: -1, 2: -2, 3: -3, 4: -4, 5: -5, 6: -6, 7: -7, 8: -8, 9: -9, 10: -10, 11: -11, 12: -12, 13: -13, 14: -14, 15: -15, 16: -16, 17: -17, 18: -18, 19: -19, 20: -20})\n  20\n  >>> sumOfProducts({1: -1, 2: -2, 3: -3, 4: -4, 5: -5, 6: -6, 7: -7, 8: -8, 9: -9, 10: -10, 11: -11, 12: -12, 13: -13, 14: -14, 15: -15, 16: -16, 17: -17, 18: -18, 19: -19, 20: -20, 21: -21})\n  21\n  >>> sumOfProducts({1: -1, 2: -2, 3: -3, 4: -4, 5: -5, 6: -6, 7: -7, 8: -8, 9: -9, 10: -10, 11: -11, 12: -12, 13: -13, 14: -14, 15: -15, 16: -16, 17:"}
{"task_id": "JavaScript/4", "prompt": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const list = Array.from(numbers);\n  const mean = list.reduce((prev, current) => prev + current) / list.length;\n  const deviations = list.map((current) => Math.abs(current - mean));\n  return list.reduce((prev, current) => prev + deviations[Math.floor(Math.random() * deviations.length)]) / list.length;\n};\n\n// ############################################################################\n// ###############       MAIN FUNCTION       ###############################\n// ############################################################################\n\nconst main = () => {\n  const list = [1, 2, 3, 4];\n  console.log(meanAbsoluteDeviation(list));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  return (numbers.length >= 2)? [...numbers, delimeter,...intersperse(numbers.slice(1), delimeter)] : numbers;\n};\n\n/*\n  * Generates a list of `n` elements of the same type as the argument\n  * `x` with the values `x[i]` in the same order.\n  *\n  * Examples:\n  *\n  *    intersperse('', 3) -> ['a', 'b', 'c']\n  *    intersperse('a', 3) -> ['a', 'a', 'a']\n  *    intersperse('a', 1) -> ['a']\n  *    intersperse('a', 0) -> []\n  *    intersperse('a', -1) -> []\n  *\n  * @param x\n  * @param n\n  */\nconst intersperseBy = (x, n) => {\n  if (n <= 0) return [];\n  const len = x.length;\n  const result = [];\n  for (let i = 0; i < len; i += n) {\n    for (let j = 0; j < n; j++) {\n      result.push(x[i + j]);\n    }\n  }\n  return result;\n};\n\n/*\n  * Generates a list of `n` elements of the same type as the argument\n  * `x` with the values `x[i]` in the same order.\n  *\n  * Example:\n  *\n  *    intersperseBy('a', 3) -> ['a', 'a', 'a']\n  *    intersperseBy('a', 1) -> ['a']\n  *    intersperseBy('a', 0) -> []\n  *    intersperseBy('a', -1) -> []\n  *\n  * @param x\n  * @param n\n  */\nconst intersperseByWith = (x, n) => {\n  if (n <= 0) return [];\n  const len = x.length;\n  const result = [];\n  for (let i = 0; i < len; i += n) {\n    for (let j = 0; j < n; j++) {\n      result.push(x[i + j]);\n    }\n  }\n  return result;\n};\n\n/*\n  * Generates a list of `n` elements of the same type as the argument\n  * `x` with the values `x[i]` in the same order.\n  *\n  * Example:\n  *\n  *    intersperseBy('a', 3) -> ['a', 'a', 'a']\n  *    intersperseBy('a', 1) -> ['a']\n  *    intersperseBy('a', 0) -> []\n  *    intersperseBy('a', -1) -> []\n  *\n  * @param x\n  * @param n\n  */\nconst intersperseByBy = (x, n) => {\n  if (n <= 0) return [];\n  const len = x.length;\n  const result = [];\n  for (let i = 0; i < len; i += n) {\n    for (let j = 0; j < n; j++) {\n      result.push(x[i + j]);\n    }\n  }\n  return result;\n};\n\nexport default intersperse;\nexport { intersperse, intersperseBy, intersperseByWith, intersperseByBy };\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n    const paren_regex = /\\((\\()\\s*(.*?)\\s*\\)\\)/g;\n    const level_of_nesting = [];\n\n    let m = paren_regex.exec(paren_string);\n    while (m) {\n        level_of_nesting.push(m.index);\n        m = paren_regex.exec(paren_string);\n    }\n    return level_of_nesting;\n};\n\nconst calculateFunc = (fn, level_of_nesting) => {\n    let last_level = 0;\n    let depth = 0;\n    for (let i = 0; i < level_of_nesting.length; i++) {\n        const level = level_of_nesting[i];\n        if (depth < level) {\n            last_level = level;\n            depth = level;\n        }\n    }\n    return fn(last_level);\n};\n\nconst print_depth_of_nesting = (fn) => {\n    return (depth) => {\n        return fn(depth);\n    };\n};\n\nconst main = (args) => {\n    let level_of_nesting = parseNestedParens(args[0]);\n    let func = calculateFunc(parseNestedParens, level_of_nesting);\n    const depth = print_depth_of_nesting(func);\n    const output = depth(args[1]);\n    console.log(output);\n};\n\nmain(process.argv);\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n    return strings.filter(s => s.includes(substring))\n}\n\n// filterByRange\n/*\n  >>> filterByRange([], [])\n  []\n  >>> filterByRange([], [1, 2])\n  []\n  >>> filterByRange([1], [1])\n  [1]\n  >>> filterByRange([1, 2, 3], [1, 3])\n  [1, 2]\n  >>> filterByRange([1, 2, 3], [1, 2, 3])\n  [1, 2]\n  >>> filterByRange([1, 2, 3], [2, 3])\n  [2, 3]\n  */\nconst filterByRange = (nums, range) => {\n    return nums.filter(n => n >= range[0] && n <= range[1])\n}\n\n// filterBySubstringRange\n/*\n  >>> filterBySubstringRange([], [])\n  []\n  >>> filterBySubstringRange([], [1, 2])\n  []\n  >>> filterBySubstringRange([1], [1])\n  [1]\n  >>> filterBySubstringRange([1, 2, 3], [1, 3])\n  [1, 2]\n  >>> filterBySubstringRange([1, 2, 3], [2, 3])\n  [2, 3]\n  >>> filterBySubstringRange([1, 2, 3], [1, 2, 3])\n  [1, 2, 3]\n  */\nconst filterBySubstringRange = (nums, range) => {\n    return filterByRange(filterBySubstring(nums, range[0]), range)\n}\n\n// filterByRange\n/*\n  >>> filterByRange([1, 2, 3, 4, 5, 6], [1, 3, 5])\n  [1, 2, 4]\n  >>> filterByRange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5, 6]\n  >>> filterByRange([1, 2, 3, 4, 5, 6], [1, 2, 3, 5])\n  [1, 2, 4, 6]\n  */\nconst filterByRange2 = (nums, range) => {\n    const [from, to] = range\n    const filtered = nums.filter(n => n >= from && n <= to)\n    return filtered.length === 0? nums : filtered\n}\n\n// filterBySubstringRange\n/*\n  >>> filterBySubstringRange([1, 2, 3, 4, 5, 6], [1, 3, 5])\n  [1, 2, 4]\n  >>> filterBySubstringRange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5, 6]\n  >>> filterBySubstringRange([1, 2, 3, 4, 5, 6], [1, 2, 3, 5])\n  [1, 2, 4, 6]\n  */\nconst filterBySubstringRange2 = (nums, range) => {\n    return filterByRange2(filterBySubstring(nums, range[0]), range)\n}\n\n// filterByRange\n/*\n  >>> filterByRange([1, 2, 3, 4, 5, 6], [1, 3, 5, 6])\n  [1, 2, 4, 6]\n  >>> filterByRange([1, 2, 3, 4, 5, 6], [1, 2, 3, 5])\n  [1, 2, 4]\n  >>> filterByRange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  */\nconst filterByRange3 = (nums, range) => {\n    return filterByRange2(filterBySubstring(nums, range[0]), range)\n}\n\n// filterBySubstringRange\n/*\n  >>> filterBySubstringRange([1, 2, 3, 4, 5, 6], [1, 3, 5, 6])\n  [1, 2, 4, 6]\n  >>> filterBySubstringRange([1, 2, 3, 4, 5, 6], [1, 2, 3, 5])\n  [1, 2, 4]\n  >>> filterBySubstringRange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  */\nconst filterBySubstringRange3 = (nums, range) => {\n    return filterByRange3(filterBySubstring(nums, range[0]), range)\n}\n\n// filterByRange\n/*\n  >>> filterByRange([1, 2, 3, 4, 5, 6], [1, 3, 5])\n  [1, 2, 4]\n  >>> filterByRange([1, 2, 3, 4, 5, 6], [1, 2, 3, 5])\n  [1, 2, 4]\n  >>> filterByRange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst filterByRange4 = (nums, range) => {\n    return filterByRange3(filterBySubstring(nums, range[0]), range)\n}\n\n// filterBySubstringRange\n/*\n  >>> filterBySubstringRange([1, 2, 3, 4, 5, 6], [1, 3, 5, 6])\n  [1, 2, 4, 6]\n  >>> filterBySubstringRange([1, 2, 3, 4, 5, 6], [1, 2, 3, 5])\n  [1, 2, 4]\n  >>> filterBySubstringRange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  */\nconst filterBySubstringRange4 = (nums, range) => {\n    return filterByRange4(filterBySubstring(nums, range[0"}
{"task_id": "JavaScript/8", "prompt": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n    let product = 1, sum = 0, result = [0, 1];\n    for (let i = 0; i < numbers.length; i += 1) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    if (numbers.length > 0) {\n        result = [sum, product];\n    }\n    return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const output = []\n  const currentMax = 0\n  const currentMaxIndex = 0\n  const currentMin = 0\n  const currentMinIndex = 0\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > currentMax) {\n      currentMax = numbers[i]\n      currentMaxIndex = i\n    }\n    if (numbers[i] < currentMin) {\n      currentMin = numbers[i]\n      currentMinIndex = i\n    }\n    if (numbers[i] === currentMax) {\n      output.push(currentMaxIndex)\n      currentMaxIndex--\n    }\n    if (numbers[i] === currentMin) {\n      output.push(currentMinIndex)\n      currentMinIndex--\n    }\n  }\n  return output\n}\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = prefix.split('').reverse().join('');\n  return prefix + suffix;\n}\n\n/* Tests if string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = prefix.split('').reverse().join('');\n  return prefix + suffix;\n}\n\n/* Tests if string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = prefix.split('').reverse().join('');\n  return prefix + suffix;\n}\n\n/* Tests if string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = prefix.split('').reverse().join('');\n  return prefix + suffix;\n}\n\n/* Tests if string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = prefix.split('').reverse().join('');\n  return prefix + suffix;\n}\n\n/* Tests if string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = prefix.split('').reverse().join('');\n  return prefix + suffix;\n}\n\n/* Tests if string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = prefix.split('').reverse().join('');\n  return prefix + suffix;\n}\n\n/* Tests if string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of"}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const arr = new Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr.join('');\n};\n\n/*\n  Given a string and a non-empty string s, return the minimum number of steps required to convert the string to the other string.\n  You may assume that each character in s has an equal chance of being in the string.\n  */\nconst minDifference = (string, s) => {\n  let steps = 0;\n  for (let i = 0; i < string.length; i++) {\n    const index = s.indexOf(string[i]);\n    if (index === -1) {\n      steps++;\n    } else {\n      steps += Math.abs(index - i);\n    }\n  }\n  return steps;\n};\n\n/*\n  Given a string S and a dictionary of words dict, return the number of words in dictionary that can be formed by deleting at most one character of the string.\n  */\nconst minDifference = (string, dict) => {\n  let steps = 0;\n  for (let i = 0; i < string.length; i++) {\n    const index = dict.indexOf(string[i]);\n    if (index === -1) {\n      steps++;\n    } else {\n      steps += Math.abs(index - i);\n    }\n  }\n  return steps;\n};\n\n/*\n  Given a string S and a dictionary of words dict, return the number of words in dictionary that can be formed by deleting at most one character of the string.\n  */\nconst minDifference = (string, dict) => {\n  let steps = 0;\n  for (let i = 0; i < string.length; i++) {\n    const index = dict.indexOf(string[i]);\n    if (index === -1) {\n      steps++;\n    } else {\n      steps += Math.abs(index - i);\n    }\n  }\n  return steps;\n};\n\nconst wordBreak = (string, dict) => {\n  let steps = 0;\n  let dictWords = dict.filter(x => dict.indexOf(x) >= 0);\n  for (let i = 0; i < string.length; i++) {\n    const index = dictWords.indexOf(string[i]);\n    if (index === -1) {\n      steps++;\n    } else {\n      steps += Math.abs(index - i);\n    }\n  }\n  return steps;\n};\n\nconst wordBreak = (string, dict) => {\n  let steps = 0;\n  let dictWords = dict.filter(x => dict.indexOf(x) >= 0);\n  for (let i = 0; i < string.length; i++) {\n    const index = dictWords.indexOf(string[i]);\n    if (index === -1) {\n      steps++;\n    } else {\n      steps += Math.abs(index - i);\n    }\n  }\n  return steps;\n};\n\nconst wordBreak = (string, dict) => {\n  let steps = 0;\n  let dictWords = dict.filter(x => dict.indexOf(x) >= 0);\n  for (let i = 0; i < string.length; i++) {\n    const index = dictWords.indexOf(string[i]);\n    if (index === -1) {\n      steps++;\n    } else {\n      steps += Math.abs(index - i);\n    }\n  }\n  return steps;\n};\n\nconst wordBreak = (string, dict) => {\n  let steps = 0;\n  let dictWords = dict.filter(x => dict.indexOf(x) >= 0);\n  for (let i = 0; i < string.length; i++) {\n    const index = dictWords.indexOf(string[i]);\n    if (index === -1) {\n      steps++;\n    } else {\n      steps += Math.abs(index - i);\n    }\n  }\n  return steps;\n};\n\nconst wordBreak = (string, dict) => {\n  let steps = 0;\n  let dictWords = dict.filter(x => dict.indexOf(x) >= 0);\n  for (let i = 0; i < string.length; i++) {\n    const index = dictWords.indexOf(string[i]);\n    if (index === -1) {\n      steps++;\n    } else {\n      steps += Math.abs(index - i);\n    }\n  }\n  return steps;\n};\n\nconst wordBreak = (string, dict) => {\n  let steps = 0;\n  let dictWords = dict.filter(x => dict.indexOf(x) >= 0);\n  for (let i = 0; i < string.length; i++) {\n    const index = dictWords.indexOf(string[i]);\n    if (index === -1) {\n      steps++;\n    } else {\n      steps += Math.abs(index - i);\n    }\n  }\n  return steps;\n};\n\nconst wordBreak = (string, dict) => {\n  let steps = 0;\n  let dictWords = dict.filter(x => dict.indexOf(x) >= 0);\n  for (let i = 0; i < string.length; i++) {\n    const index = dictWords.indexOf(string[i]);\n    if (index === -1) {\n      steps++;\n    } else {\n      steps += Math.abs(index - i);\n    }\n  }\n  return steps;\n};\n\n/*\n  Given a string and a dictionary of words dict, return the number of words in dictionary that can be formed by deleting at most one character of the string.\n  */\nconst minDifference = (string, dict) => {\n  let steps = 0;\n  for (let i = 0; i < string.length; i++) {\n    const index = dict.indexOf(string[i]);\n    if (index === -1) {\n      steps++;\n    } else {\n      steps += Math.abs(index - i);\n    }\n  }\n  return steps;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  const list = [...strings];\n  const longestString = list.reduce((longest, string) => {\n    if (longest.length < string.length) {\n      return string;\n    }\n    return longest;\n  }, list[0]);\n  return longestString;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest(['a', 'b', 'ccc'])\n  'ccc'\n  */\nconst longestFrom = (strings, start = 0) => {\n  const list = [...strings];\n  const longestString = list.reduce((longest, string, i) => {\n    if (i < start) {\n      return longest;\n    }\n    if (longest.length < string.length) {\n      return string;\n    }\n    return longest;\n  }, list[start]);\n  return longestString;\n};\n\n/*\n  >>> longest([[1], [2], [3], [4]])\n  [1, 2, 3, 4]\n  >>> longest([[1], [2], [3], [4]])\n  [1, 2, 3, 4]\n  */\nconst longestArray = (arr) => {\n  const list = [...arr];\n  const longestString = list.reduce((longest, string) => {\n    if (longest.length < string.length) {\n      return string;\n    }\n    return longest;\n  }, list[0]);\n  return longestString;\n};\n\nmodule.exports = longest;\nmodule.exports.from = longestFrom;\nmodule.exports.array = longestArray;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  let gcd = 1\n  let lcm = a * b\n\n  while (lcm % a!== 0) {\n    lcm = a\n    a = b\n    b = lcm % b\n    gcd = a\n  }\n\n  return gcd\n}\n\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b)\n}\n\nmodule.exports = lcm\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  let len = string.length\n  let i = 0\n\n  while (i < len) {\n    prefixes.push(string.slice(0, len))\n    while (i < len && string[i] === string[i + 1]) {\n      i++\n    }\n    i++\n  }\n\n  return prefixes\n}\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const string = '';\n  for (let i = 0; i < n; i++) {\n    string += `${i + 1}`;\n    if (i < n - 1) string +='';\n  }\n  return string;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n    let seen = new Set();\n    let result = 0;\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n        if (!seen.has(char)) {\n            seen.add(char);\n            result++;\n        }\n    }\n    return result;\n};\n\nmodule.exports = countDistinctCharacters;<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music = music_string.split(' ')\n  const beat_count = []\n  for (let i = 0; i < music.length; i += 2) {\n    beat_count.push(parse_beat(music[i]))\n  }\n  return beat_count\n}\n\nfunction parse_beat(beat) {\n  const beat_split = beat.split('|')\n  const num_beats = beat_split.length\n  return num_beats\n}\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let index = 0;\n  let count = 0;\n  while (index < string.length) {\n    index = string.indexOf(substring, index);\n    if (index >= 0) {\n      count++;\n      index += substring.length;\n    }\n  }\n  return count;\n};\n\n/*\n  Finds how many times a string contains a given substring. Count overlaping case.\n  >>> howManyTimes('aaa', 'a')\n  1\n  >>> howManyTimes('aaa', 'aa')\n  1\n  >>> howManyTimes('aaa', 'aaa')\n  2\n  >>> howManyTimes('aaa', 'aaaa')\n  2\n  >>> howManyTimes('aaa', 'aaaaa')\n  2\n  */\nconst howManyTimes = (string, substring) => {\n  let index = 0;\n  let count = 0;\n  while (index < string.length) {\n    index = string.indexOf(substring, index);\n    if (index >= 0) {\n      count++;\n      index += substring.length;\n    }\n  }\n  return count;\n};\n\nconst str = 'abcaabccbaa';\nconst expected = [3, 4, 4];\n\nconst check = () => {\n  const actual = howManyTimes(str, 'a');\n  if (actual === expected.shift()) {\n    console.log('ok');\n  }\n  else {\n    console.log(`FAIL: actual = ${actual}`);\n  }\n};\n\ncheck();\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = [];\n  numbers.split(' ').forEach(num => {\n    if (num.length === 1) {\n      sortedNumbers.push(num);\n    } else {\n      const number = parseInt(num, 10);\n      const index = sortedNumbers.indexOf(num);\n      if (index === -1) {\n        sortedNumbers.push(num);\n      } else {\n        sortedNumbers[index] = (sortedNumbers[index] < number)? sortedNumbers[index] : number;\n      }\n    }\n  });\n  return sortedNumbers.join(' ');\n};\n\n// console.log(sortNumbers('three one five'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five six seven'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three four five'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one two three'));\n// console.log(sortNumbers('zeros one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one'));\n// console"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const numbersClone = [...numbers];\n  const diff = (a, b) => a - b;\n  const min = (a, b) => {\n    if (diff(a, b) < 0) {\n      return a;\n    } else {\n      return b;\n    }\n  };\n  return [min(numbersClone[0], numbersClone[1]), min(numbersClone[2], numbersClone[3])];\n};\n\nexport default findClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n    const sorted = numbers.sort();\n    const min = sorted[0];\n    const max = sorted[sorted.length - 1];\n    const nums = numbers.map(n => {\n        return (n - min) / (max - min);\n    });\n    return nums;\n}\n\n/**\n  * Returns list of numbers (of at least two elements), apply a linear transforms to that list,\n  * such that the smaller number will become 0 and the larger will become 1\n  * @param numbers\n  * @returns {Array}\n  */\nexport const rescaleToUnit2 = (numbers) => {\n    const sorted = numbers.sort();\n    const min = sorted[0];\n    const max = sorted[sorted.length - 1];\n    const nums = numbers.map(n => {\n        return (n - min) / (max - min);\n    });\n    return nums;\n}\n\n/**\n * Given a list of numbers, returns a list with the same length,\n * but elements in the list are the inverse of the original numbers.\n * @param {Array} numbers\n * @returns {Array}\n */\nexport const invert = (numbers) => {\n    const inverted = [];\n    for (let i = 0; i < numbers.length; i++) {\n        inverted[i] = 1.0 - numbers[i];\n    }\n    return inverted;\n}\n\n/**\n * Given a list of numbers, returns a list with the same length,\n * but elements in the list are the log of the original numbers.\n * @param {Array} numbers\n * @returns {Array}\n */\nexport const log = (numbers) => {\n    const inverted = [];\n    for (let i = 0; i < numbers.length; i++) {\n        inverted[i] = Math.log(numbers[i]);\n    }\n    return inverted;\n}\n\n/**\n * Given a list of numbers, returns a list with the same length,\n * but elements in the list are the log of the original numbers.\n * @param {Array} numbers\n * @returns {Array}\n */\nexport const exp = (numbers) => {\n    const inverted = [];\n    for (let i = 0; i < numbers.length; i++) {\n        inverted[i] = Math.exp(numbers[i]);\n    }\n    return inverted;\n}\n\n/**\n * Given a list of numbers, returns a list with the same length,\n * but elements in the list are the log of the original numbers.\n * @param {Array} numbers\n * @returns {Array}\n */\nexport const log2 = (numbers) => {\n    const inverted = [];\n    for (let i = 0; i < numbers.length; i++) {\n        inverted[i] = Math.log(numbers[i]) / Math.log(2);\n    }\n    return inverted;\n}\n\n/**\n * Given a list of numbers, returns a list with the same length,\n * but elements in the list are the log of the original numbers.\n * @param {Array} numbers\n * @returns {Array}\n */\nexport const sqrt = (numbers) => {\n    const inverted = [];\n    for (let i = 0; i < numbers.length; i++) {\n        inverted[i] = Math.sqrt(numbers[i]);\n    }\n    return inverted;\n}\n\n/**\n * Given a list of numbers, returns a list with the same length,\n * but elements in the list are the log of the original numbers.\n * @param {Array} numbers\n * @returns {Array}\n */\nexport const pow = (numbers) => {\n    const inverted = [];\n    for (let i = 0; i < numbers.length; i++) {\n        inverted[i] = Math.pow(numbers[i], 2);\n    }\n    return inverted;\n}\n\n/**\n * Given a list of numbers, returns a list with the same length,\n * but elements in the list are the log of the original numbers.\n * @param {Array} numbers\n * @returns {Array}\n */\nexport const sigmoid = (numbers) => {\n    const inverted = [];\n    for (let i = 0; i < numbers.length; i++) {\n        inverted[i] = 1.0 / (1.0 + Math.exp(-numbers[i]));\n    }\n    return inverted;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    if (typeof value === 'number') {\n      return isInteger(value);\n    }\n    return false;\n  });\n};\n\n// Given a string, returns true if it is a valid integer number\nconst isInteger = (string) => {\n  let number = parseInt(string, 10);\n  return number!== null && number!== undefined && number === number;\n};\n\nmodule.exports = {\n  filterIntegers\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n    let i = 0;\n    while (i < string.length) {\n        i += 1;\n    }\n    return i;\n};\n\n/* Return a copy of string\n  >>> strcpy('')\n  ''\n  >>> strcpy('abc')\n  'abc'\n  >>> strcpy('abc')\n  'abc'\n  */\nconst strcpy = (string) => {\n    return string;\n};\n\n/* Return index of a character in string\n  >>> strindex('')\n  -1\n  >>> strindex('abc', 'a')\n  0\n  >>> strindex('abc', 'b')\n  1\n  >>> strindex('abc', 'c')\n  2\n  >>> strindex('abc', 'd')\n  -1\n  */\nconst strindex = (string, character) => {\n    let i = 0;\n    while (i < string.length) {\n        i += 1;\n        if (string[i] === character) {\n            return i;\n        }\n    }\n    return -1;\n};\n\n/* Return first index of a character in string\n  >>> strfirstindex('')\n  -1\n  >>> strfirstindex('abc', 'a')\n  0\n  >>> strfirstindex('abc', 'b')\n  1\n  >>> strfirstindex('abc', 'c')\n  2\n  >>> strfirstindex('abc', 'd')\n  -1\n  */\nconst strfirstindex = (string, character) => {\n    let i = 0;\n    while (i < string.length) {\n        i += 1;\n        if (string[i] === character) {\n            return i;\n        }\n    }\n    return -1;\n};\n\n/* Return last index of a character in string\n  >>> strlastindex('')\n  -1\n  >>> strlastindex('abc', 'a')\n  2\n  >>> strlastindex('abc', 'b')\n  1\n  >>> strlastindex('abc', 'c')\n  2\n  >>> strlastindex('abc', 'd')\n  -1\n  */\nconst strlastindex = (string, character) => {\n    let i = string.length - 1;\n    while (i >= 0) {\n        i -= 1;\n        if (string[i] === character) {\n            return i;\n        }\n    }\n    return -1;\n};\n\n/* Return string length\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n    return string.length;\n};\n\n/* Replace the character at given index in string\n  >>> strreplace('')\n  ''\n  >>> strreplace('abc', 'a', '0')\n  '0bc'\n  >>> strreplace('abc', 'a', 'b')\n  'bcb'\n  >>> strreplace('abc', 'c', '0')\n  '0ab'\n  >>> strreplace('abc', 'c', 'b')\n  '0ac'\n  >>> strreplace('abc', 'c', 'b')\n  '0ab'\n  >>> strreplace('abc', 'd', '0')\n  '0ab'\n  >>> strreplace('abc', 'd', 'b')\n  '0ad'\n  */\nconst strreplace = (string, character, replacement) => {\n    let i = strindex(string, character);\n    if (i === -1) {\n        return string;\n    }\n    let j = strlastindex(string, character);\n    return string.substr(0, i) + replacement + string.substr(j + 1);\n};\n\n/* Return string with upper case characters\n  >>> strupper('')\n  ''\n  >>> strupper('abc')\n  'ABC'\n  >>> strupper('abc')\n  'ABC'\n  */\nconst strupper = (string) => {\n    return string.toUpperCase();\n};\n\n/* Return string with lower case characters\n  >>> strlower('')\n  ''\n  >>> strlower('ABC')\n  'abc'\n  >>> strlower('ABC')\n  'abc'\n  */\nconst strlower = (string) => {\n    return string.toLowerCase();\n};\n\n/* Return true if string starts with given character\n  >>> starts('abc', 'a')\n  true\n  >>> starts('abc', 'b')\n  true\n  >>> starts('abc', 'c')\n  true\n  >>> starts('abc', 'd')\n  false\n  >>> starts('abc', 'a')\n  false\n  >>> starts('abc', 'b')\n  false\n  >>> starts('abc', 'c')\n  false\n  >>> starts('abc', 'd')\n  false\n  >>> starts('abc', '')\n  true\n  >>> starts('abc', '')\n  true\n  >>> starts('abc', 'a')\n  false\n  >>> starts('abc', 'b')\n  false\n  >>> starts('abc', 'c')\n  false\n  >>> starts('abc', 'd')\n  false\n  */\nconst starts = (string, character) => {\n    return strindex(string, character) === 0;\n};\n\n/* Return true if string ends with given character\n  >>> ends('abc', 'a')\n  false\n  >>> ends('abc', 'b')\n  true\n  >>> ends('abc', 'c')\n  true\n  >>> ends('abc', 'd')\n  false\n  >>> ends('abc', 'a')\n  false\n  >>> ends('abc', 'b')\n  false\n  >>> ends('abc', 'c')\n  false\n  >>> ends('abc', 'd')\n  false\n  >>> ends('abc', '')\n  true\n  >>> ends('abc', '')\n  true\n  >>> ends('abc', 'a')\n  false\n  >>> ends('abc', 'b')\n  true\n  >>> ends('abc', 'c')\n  true\n  >>> ends('abc', 'd')\n  false\n  */\nconst ends = (string, character) => {\n    return strindex(string, character) === string.length - 1;\n};\n\n/* Return string with a space character inserted at given index\n  >>> spacestr('')\n  ''\n  >>> spacestr('abc')\n  'abc'\n  >>> spacestr('abc')\n  'abc'\n  >>> spac"}
{"task_id": "JavaScript/24", "prompt": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n    if (n <= 0) {\n        return n;\n    }\n    const divisors = Array.from(Array(1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 376"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const primeFactors = primeFactorize(n)\n  const factors = primeFactors.map((factor) => [factor, primeFactors.filter((primeFactor) => primeFactor!== factor).length])\n  const maxFactor = max(factors, (a) => a[0])\n  return [maxFactor[0],...maxFactor[1].map((factor) => factor * maxFactor[1].length)]\n}\n\n/**\n  * Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  * @param {number} n\n  * @return {Array}\n  * @example\n  * factorize(8)\n  * [2, 2, 2]\n  * factorize(25)\n  * [5, 5]\n  * factorize(70)\n  * [2, 5, 7]\n  */\nfunction primeFactorize (n) {\n  const factors = []\n  let isPrime = true\n\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      while (n % i === 0) {\n        n = n / i\n      }\n      factors.push(i)\n      isPrime = false\n    }\n  }\n\n  if (isPrime) {\n    factors.push(n)\n  }\n\n  return factors\n}\n\n/**\n  * Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  * @param {number} n\n  * @return {Array}\n  * @example\n  * factorize(8)\n  * [2, 2, 2]\n  * factorize(25)\n  * [5, 5]\n  * factorize(70)\n  * [2, 5, 7]\n  */\nconst primeFactorize = (n) => {\n  const primeFactors = []\n  let isPrime = true\n\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      while (n % i === 0) {\n        n = n / i\n      }\n      primeFactors.push(i)\n      isPrime = false\n    }\n  }\n\n  if (isPrime) {\n    primeFactors.push(n)\n  }\n\n  return primeFactors\n}\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n    return [...new Set(numbers)];\n};\n\n/*\n  From a list of strings, remove all strings that are longer than 2 characters\n  Keep order of strings in the input\n  >>> removeStringsWithLengthGreaterThanTwo([\n ...   'I love my cat',\n ...   'I love my dog',\n ...   'I love my cat',\n ...   'I love my cat',\n ...   'I love my cat'\n ... ])\n  [\n  'I love my cat',\n  'I love my dog'\n  ]\n  */\nconst removeStringsWithLengthGreaterThanTwo = (strings) => {\n    return [...strings.filter(s => s.length > 2)];\n};\n\n/*\n  Given a list of strings, remove all strings that are empty or contain only\n  whitespace characters\n  Keep order of strings in the input\n  >>> removeStringsWithEmptyOrWhitespace([\n ...  ' I love my cat  ',\n ...  ' I love my dog  ',\n ...  ' I love my cat  ',\n ...  ' I love my dog  ',\n ...  ' I love my cat  '\n ... ])\n  [\n  'I love my cat',\n  'I love my dog'\n  ]\n  */\nconst removeStringsWithEmptyOrWhitespace = (strings) => {\n    return [...strings.filter(s => s.trim())];\n};\n\n/*\n  Given a list of strings, remove all strings that are empty or contain only\n  whitespace characters and that are not the last string\n  Keep order of strings in the input\n  >>> removeStringsWithEmptyOrWhitespaceAndNotLast([\n ...  ' I love my cat  ',\n ...  ' I love my dog  ',\n ...  ' I love my cat  ',\n ...  ' I love my dog  ',\n ...  ' I love my cat  '\n ... ])\n  [\n  'I love my dog'\n  ]\n  */\nconst removeStringsWithEmptyOrWhitespaceAndNotLast = (strings) => {\n    return [...strings.filter(s => s.trim() && s!== strings[strings.length - 1])];\n};\n\n/*\n  Given a list of strings, remove all strings that are empty or contain only\n  whitespace characters and that are the last string\n  Keep order of strings in the input\n  >>> removeStringsWithEmptyOrWhitespaceAndLast([\n ...  ' I love my cat  ',\n ...  ' I love my dog  ',\n ...  ' I love my cat  ',\n ...  ' I love my dog  ',\n ...  ' I love my cat  '\n ... ])\n  []\n  */\nconst removeStringsWithEmptyOrWhitespaceAndLast = (strings) => {\n    return [...strings.filter(s => s.trim() && s === strings[strings.length - 1])];\n};\n\n/*\n  Given a list of strings, remove all strings that are empty or contain only\n  whitespace characters and that are not the first string\n  Keep order of strings in the input\n  >>> removeStringsWithEmptyOrWhitespaceAndNotFirst([\n ...  ' I love my cat  ',\n ...  ' I love my dog  ',\n ...  ' I love my cat  ',\n ...  ' I love my dog  ',\n ...  ' I love my cat  '\n ... ])\n  [\n  'I love my dog'\n  ]\n  */\nconst removeStringsWithEmptyOrWhitespaceAndNotFirst = (strings) => {\n    return [...strings.filter(s => s.trim() && s!== strings[0])];\n};\n\n/*\n  Given a list of strings, remove all strings that are empty or contain only\n  whitespace characters and that are the first string\n  Keep order of strings in the input\n  >>> removeStringsWithEmptyOrWhitespaceAndFirst([\n ...  ' I love my cat  ',\n ...  ' I love my dog  ',\n ...  ' I love my cat  ',\n ...  ' I love my dog  ',\n ...  ' I love my cat  '\n ... ])\n  [\n  'I love my dog'\n  ]\n  */\nconst removeStringsWithEmptyOrWhitespaceAndFirst = (strings) => {\n    return [...strings.filter(s => s.trim() && s === strings[0])];\n};\n\nmodule.exports = {\n    removeDuplicates,\n    removeStringsWithLengthGreaterThanTwo,\n    removeStringsWithEmptyOrWhitespace,\n    removeStringsWithEmptyOrWhitespaceAndNotLast,\n    removeStringsWithEmptyOrWhitespaceAndLast,\n    removeStringsWithEmptyOrWhitespaceAndNotFirst\n};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let str = string;\n  return str.replace(/([a-z])([A-Z])/g, '$1 $2').toUpperCase();\n}\n\n/* For a given string, find the longest string that starts with the\n   given string.\n  >>> longestStart(['abc', 'def', 'abcdef'])\n  'abc'\n  >>> longestStart(['abc', 'def', 'abcdef'])\n  'abcdef'\n  >>> longestStart(['abc', 'def', 'abcdef'])\n  'abcdef'\n  >>> longestStart(['abc', 'def', 'abcdef'])\n  'abcdef'\n  >>> longestStart(['abc', 'def', 'abcdef'])\n  'abcdef'\n  */\nconst longestStart = (strings) => {\n  let longest = '';\n  strings.forEach(s => {\n    if (s.startsWith(longest)) {\n      longest = s;\n    }\n  });\n  return longest;\n}\n\n/* For a given string, find the shortest string that ends with the\n   given string.\n  >>> shortestEnd(['abc', 'def', 'abcdef'])\n  'abc'\n  >>> shortestEnd(['abc', 'def', 'abcdef'])\n  'abcdef'\n  >>> shortestEnd(['abc', 'def', 'abcdef'])\n  'abcdef'\n  >>> shortestEnd(['abc', 'def', 'abcdef'])\n  'abcdef'\n  */\nconst shortestEnd = (strings) => {\n  let shortest = '';\n  strings.forEach(s => {\n    if (s.endsWith(shortest)) {\n      shortest = s;\n    }\n  });\n  return shortest;\n}\n\n/* For a given string, return the index of the first occurrence of\n   the given string within the given string.\n  >>> indexOf('abcdef', 'b')\n  1\n  >>> indexOf('abcdef', 'b')\n  1\n  >>> indexOf('abcdef', 'b')\n  1\n  >>> indexOf('abcdef', 'b')\n  1\n  */\nconst indexOf = (string, search) => {\n  let index = string.indexOf(search);\n  return index;\n}\n\n/* For a given string, return the index of the last occurrence of\n   the given string within the given string.\n  >>> lastIndexOf('abcdef', 'b')\n  4\n  >>> lastIndexOf('abcdef', 'b')\n  4\n  >>> lastIndexOf('abcdef', 'b')\n  4\n  >>> lastIndexOf('abcdef', 'b')\n  4\n  */\nconst lastIndexOf = (string, search) => {\n  let index = string.lastIndexOf(search);\n  return index;\n}\n\n/* For a given string, return the number of times the given string\n   appears within the given string.\n  >>> count('abcdef', 'b')\n  1\n  >>> count('abcdef', 'b')\n  1\n  >>> count('abcdef', 'b')\n  1\n  >>> count('abcdef', 'b')\n  1\n  */\nconst count = (string, search) => {\n  let count = 0;\n  let index = indexOf(string, search);\n  while (index!== -1) {\n    count += 1;\n    index = indexOf(string, search, index + 1);\n  }\n  return count;\n}\n\n/* For a given string, return the number of times the given string\n   appears within the given string.\n  >>> count('abcdef', 'b')\n  1\n  >>> count('abcdef', 'b')\n  1\n  >>> count('abcdef', 'b')\n  1\n  >>> count('abcdef', 'b')\n  1\n  */\nconst contains = (string, search) => {\n  return string.indexOf(search)!== -1;\n}\n\n/* For a given string, return the number of times the given string\n   appears within the given string.\n  >>> contains('abcdef', 'b')\n  1\n  >>> contains('abcdef', 'b')\n  1\n  >>> contains('abcdef', 'b')\n  1\n  >>> contains('abcdef', 'b')\n  1\n  */\nconst startsWith = (string, search) => {\n  return string.startsWith(search);\n}\n\n/* For a given string, return the number of times the given string\n   appears within the given string.\n  >>> startsWith('abcdef', 'b')\n  1\n  >>> startsWith('abcdef', 'b')\n  1\n  >>> startsWith('abcdef', 'b')\n  1\n  >>> startsWith('abcdef', 'b')\n  1\n  */\nconst endsWith = (string, search) => {\n  return string.endsWith(search);\n}\n\nmodule.exports = {\n  flipCase,\n  longestStart,\n  shortestEnd,\n  indexOf,\n  lastIndexOf,\n  count,\n  contains,\n  startsWith,\n  endsWith\n}\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((a, b) => a + b, '');\n};\n\n/**\n  * Finds a string in a list of strings\n  * @param  {string}  s    Search string\n  * @param  {string[]} list List of strings\n  * @return {number}        Position of the string in the list\n  * @example\n  *   >>> indexOf('a', ['a', 'b', 'c'])\n  *   0\n  *   >>> indexOf('b', ['a', 'b', 'c'])\n  *   1\n  *   >>> indexOf('d', ['a', 'b', 'c'])\n  *   -1\n  */\nconst indexOf = (s, list) => {\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === s) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n  * Returns the nth element of a list\n  * @param  {number} nth Number of the element to return\n  * @param  {string[]} list List of strings\n  * @return {string}        Nth element of the list\n  * @example\n  *   >>> nth(1, ['a', 'b', 'c'])\n  *   'b'\n  *   >>> nth(3, ['a', 'b', 'c'])\n  *   'c'\n  *   >>> nth(4, ['a', 'b', 'c'])\n  *   'a'\n  */\nconst nth = (nth, list) => {\n  return list[nth - 1];\n};\n\n/**\n  * Returns the last element of a list\n  * @param  {string[]} list List of strings\n  * @return {string}        Last element of the list\n  * @example\n  *   >>> last(['a', 'b', 'c'])\n  *   'c'\n  *   >>> last([])\n  *   ''\n  */\nconst last = (list) => {\n  return list[list.length - 1];\n};\n\n/**\n  * Returns the first element of a list\n  * @param  {string[]} list List of strings\n  * @return {string}        First element of the list\n  * @example\n  *   >>> first(['a', 'b', 'c'])\n  *   'a'\n  *   >>> first([])\n  *   ''\n  */\nconst first = (list) => {\n  return list[0];\n};\n\n/**\n  * Returns the number of elements in a list\n  * @param  {string[]} list List of strings\n  * @return {number}        Number of elements in the list\n  * @example\n  *   >>> count(['a', 'b', 'c'])\n  *   3\n  *   >>> count([])\n  *   0\n  */\nconst count = (list) => {\n  return list.length;\n};\n\n/**\n  * Returns the length of a string\n  * @param  {string} str String\n  * @return {number}     Length of the string\n  * @example\n  *   >>> len('abc')\n  *   3\n  *   >>> len('')\n  *   0\n  */\nconst len = (str) => {\n  return str.length;\n};\n\n/**\n  * Returns true if a string is empty\n  * @param  {string} str String\n  * @return {boolean}    True if the string is empty\n  * @example\n  *   >>> isEmpty('')\n  *   true\n  *   >>> isEmpty('abc')\n  *   false\n  */\nconst isEmpty = (str) => {\n  return!str ||!str.length;\n};\n\n/**\n  * Returns true if the first string contains the second\n  * @param  {string}  str String\n  * @param  {string}  substr String to search for\n  * @return {boolean} True if the string contains the substr\n  * @example\n  *   >>> contains('abc', 'bc')\n  *   true\n  *   >>> contains('abc', 'b')\n  *   true\n  *   >>> contains('abc', 'q')\n  *   false\n  */\nconst contains = (str, substr) => {\n  return indexOf(substr, str)!== -1;\n};\n\n/**\n  * Returns true if the string ends with substr\n  * @param  {string} str String\n  * @param  {string} substr Substring to search for\n  * @return {boolean} True if the string ends with substr\n  * @example\n  *   >>> endsWith('abc', 'c')\n  *   true\n  *   >>> endsWith('abc', 'b')\n  *   false\n  */\nconst endsWith = (str, substr) => {\n  return str.indexOf(substr, str.length - substr.length)!== -1;\n};\n\n/**\n  * Returns true if the string starts with substr\n  * @param  {string} str String\n  * @param  {string} substr Substring to search for\n  * @return {boolean} True if the string starts with substr\n  * @example\n  *   >>> startsWith('abc', 'ab')\n  *   true\n  *   >>> startsWith('abc', 'bc')\n  *   false\n  */\nconst startsWith = (str, substr) => {\n  return str.indexOf(substr) === 0;\n};\n\n/**\n  * Returns a substring of a string\n  * @param  {string} str String\n  * @param  {number} start Starting position of the substring\n  * @param  {number} end Ending position of the substring\n  * @return {string} Substring of the string\n  * @example\n  *   >>> substring('abc', 1, 3)\n  *   'bc'\n  */\nconst substring = (str, start, end) => {\n  return str.substr(start, end);\n};\n\n/**\n  * Returns a string made of the elements of a list\n  * @param  {string[]} list List of strings\n  "}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const matches = [...strings];\n  return matches.filter(s => s.startsWith(prefix));\n};\n\n/**\n  * Filter an input list of strings for ones that contain a given substring.\n  * @param  {Array}   strings   Input list of strings to filter.\n  * @param  {string}   substring Substring to search for.\n  * @return {Array}   Filtered list of strings.\n  */\nconst filterBySubstring = (strings, substring) => {\n  const matches = [...strings];\n  return matches.filter(s => s.includes(substring));\n};\n\n/**\n  * Get the first string of a list of strings.\n  * @param  {Array} strings Input list of strings.\n  * @return {string}        First string.\n  */\nconst getFirst = (strings) => {\n  return strings[0];\n};\n\n/**\n  * Get the last string of a list of strings.\n  * @param  {Array} strings Input list of strings.\n  * @return {string}        Last string.\n  */\nconst getLast = (strings) => {\n  return strings[strings.length - 1];\n};\n\n/**\n  * Get the maximum string of a list of strings.\n  * @param  {Array} strings Input list of strings.\n  * @return {string}        Maximum string.\n  */\nconst getMax = (strings) => {\n  return getLast(strings);\n};\n\n/**\n  * Get the minimum string of a list of strings.\n  * @param  {Array} strings Input list of strings.\n  * @return {string}        Minimum string.\n  */\nconst getMin = (strings) => {\n  return getFirst(strings);\n};\n\n/**\n  * Get the string at a given index.\n  * @param  {Array} strings Input list of strings.\n  * @param  {number} index   Index of string to return.\n  * @return {string}        String at index.\n  */\nconst getStringAt = (strings, index) => {\n  return strings[index];\n};\n\n/**\n  * Get the total length of a list of strings.\n  * @param  {Array} strings Input list of strings.\n  * @return {number}        Total length.\n  */\nconst getTotalLength = (strings) => {\n  return strings.reduce((total, string) => total + string.length, 0);\n};\n\n/**\n  * Get the total length of a list of strings.\n  * @param  {Array} strings Input list of strings.\n  * @return {number}        Total length.\n  */\nconst getTotalLengthIncludingSpaces = (strings) => {\n  return getTotalLength(filterBySubstring(strings,''));\n};\n\n/**\n  * Get the total length of a list of strings, but only include\n  * strings that start with a given prefix.\n  * @param  {Array} strings Input list of strings.\n  * @param  {string} prefix  Prefix to filter strings by.\n  * @return {number}        Total length.\n  */\nconst getTotalLengthFiltered = (strings, prefix) => {\n  return getTotalLength(filterByPrefix(strings, prefix));\n};\n\n/**\n  * Get the index of a given string in a list of strings.\n  * @param  {Array} strings Input list of strings.\n  * @param  {string} string  String to search for.\n  * @return {number}        Index of string.\n  */\nconst indexOf = (strings, string) => {\n  const matches = [...strings];\n  const index = matches.indexOf(string);\n  return index;\n};\n\n/**\n  * Insert a new string into a list of strings, at the given index.\n  * @param  {Array} strings Input list of strings.\n  * @param  {number} index   Index to insert new string at.\n  * @param  {string} string  String to insert.\n  * @return {Array}          List of strings with new string inserted.\n  */\nconst insertStringAt = (strings, index, string) => {\n  const matches = [...strings];\n  const newStrings = [...strings];\n  newStrings.splice(index, 0, string);\n  return newStrings;\n};\n\n/**\n  * Remove a string from a list of strings.\n  * @param  {Array} strings Input list of strings.\n  * @param  {string} string  String to remove.\n  * @return {Array}          List of strings with string removed.\n  */\nconst removeString = (strings, string) => {\n  const matches = [...strings];\n  const newStrings = [...strings];\n  matches.splice(indexOf(matches, string), 1);\n  return newStrings;\n};\n\n/**\n  * Remove a string from a list of strings.\n  * @param  {Array} strings Input list of strings.\n  * @param  {number} index   Index of string to remove.\n  * @return {Array}          List of strings with string removed.\n  */\nconst removeStringAt = (strings, index) => {\n  const matches = [...strings];\n  const newStrings = [...strings];\n  matches.splice(index, 1);\n  return newStrings;\n};\n\n/**\n  * Replace a string in a list of strings.\n  * @param  {Array} strings Input list of strings.\n  * @param  {number} index   Index of string to replace.\n  * @param  {string} string  New string to replace old string.\n  * @return {Array}          List of strings with string replaced.\n  */\nconst replaceString = (strings, index, string) => {\n  const matches = [...strings];\n  const newStrings = [...strings];\n  matches.splice(index, 1, string);\n  return newStrings;\n};\n\n/**\n  * Replace a string in a list of strings.\n  * @param  {Array} strings Input list of strings.\n  * @param  {number} index   Index of string to replace.\n"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n// TEST\n\n// console.log(getPositive([-1, 2, -4, 5, 6]));\n// console.log(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]));\n\nconsole.log(getPositive([1, -3, -2, -2, 4, 4, 3, 0, -1, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  let prime = false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n}\n\n/*Return the number of the number in the list that is the smallest prime\n  >>> smallestPrime(10, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997])\n  11\n  >>> smallestPrime(10, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997])\n  13\n  >>> smallestPrime(10, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997])\n  17\n  >>> smallestPrime(10, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length;\n  let isEven = (n % 2 === 0)? true : false;\n  let xsCopy = isEven? xs : xs.reverse();\n  let max = isEven? xsCopy[0] : xsCopy[n - 1];\n  let min = isEven? xsCopy[n - 1] : xsCopy[0];\n  let minIndex = 0;\n  let maxIndex = n - 1;\n  let count = 0;\n  while (maxIndex - minIndex > 1) {\n    let mid = Math.floor((maxIndex + minIndex) / 2);\n    let midVal = xsCopy[mid];\n    if (Math.abs(midVal) > Math.abs(min)) {\n      minIndex = mid;\n      min = midVal;\n    } else {\n      maxIndex = mid;\n      max = midVal;\n    }\n    count++;\n    if (count > 100) {\n      throw new Error('no solution found after 100 iterations');\n    }\n  }\n  return xsCopy[minIndex];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const s = l.slice();\n  s.sort((a, b) => {\n    if (a % 3 === b % 3) {\n      return a - b;\n    }\n    return a % 3 - b % 3;\n  });\n  return s;\n};\n\n// # Tests\n\n// Simple test\nconsole.log(sortThird([5, 6, 3, 4, 8, 9, 2]));\n// => [2, 6, 3, 4, 8, 9, 5]\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const seen = [];\n  const result = [];\n\n  l.forEach(item => {\n    if (seen.indexOf(item) === -1) {\n      seen.push(item);\n      result.push(item);\n    }\n  });\n\n  return result;\n};\n\nmodule.exports = unique;<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = -Infinity;\n  const cur = -Infinity;\n  const n = l.length;\n  let i = 0;\n  while (i < n) {\n    if (l[i] > cur) {\n      cur = l[i];\n      max = i;\n    }\n    i++;\n  }\n  return max;\n};\n\nexport default maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      console.log(i + \" \");\n    }\n    i++;\n  }\n};\n\nfizzBuzz(78);\n\n/*\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619"}
{"task_id": "JavaScript/37", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = []\n  for (let i = 0; i < l.length; i += 2) {\n    even.push(l[i])\n  }\n  return even\n}\n\n//test\nconsole.log(sortEven([1, 2, 3]))\nconsole.log(sortEven([5, 6, 3, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n var chars = [], groups = [], result = '';\n for (let i = 0; i < s.length; i++) {\n if (s.charAt(i) == s.charAt(i + 1)) {\n chars.push(s.charAt(i));\n } else {\n groups.push(s.slice(i, i + 3));\n }\n }\n for (const group of groups) {\n if (group.length == 3) result += group[1];\n else result += group[0] + group[1];\n }\n return result;\n}\n\n/*\n takes as input string. Returns encoded string. */ const encode = (s) => {\n var result = '', i = 0;\n while (i < s.length) {\n result += encodeCyclic(s.slice(i, Math.min(i + 3, s.length)));\n i += 3;\n }\n return result;\n}\n\n/*\n takes as input string. Returns decoded string. */ const decode = (s) => {\n var result = '', i = 0;\n while (i < s.length) {\n result += decodeCyclic(s.slice(i, Math.min(i + 3, s.length)));\n i += 3;\n }\n return result;\n}\n\n/*\n takes as input string. Returns a string with spaces added to make it a multiple of 4. */ const pad = (s) => {\n if (s.length % 4!= 0) {\n for (var i = 0; i < 4 - (s.length % 4); i++) s +='';\n }\n return s;\n}\n\n/*\n takes as input string. Returns a string with spaces removed from the beginning. */ const trim = (s) => {\n return s.slice(s.length - 4, s.length);\n}\n\nmodule.exports = {\n pad,\n pad_4,\n pad_8,\n pad_16,\n pad_32,\n pad_64,\n pad_128,\n pad_256,\n pad_512,\n pad_1024,\n pad_2048,\n pad_4096,\n pad_8192,\n pad_16384,\n pad_32768,\n pad_65536,\n pad_131072,\n pad_262144,\n pad_524288,\n pad_1048576,\n pad_2097152,\n pad_4194304,\n pad_8388608,\n pad_16777216,\n pad_33554432,\n pad_67108864,\n pad_134217728,\n pad_268435456,\n pad_536870912,\n pad_1073741824,\n pad_2147483648,\n pad_4294967296,\n pad_8589934592,\n pad_17179869184,\n pad_34359738368,\n pad_68719476736,\n pad_137438953472,\n pad_274877906944,\n pad_549755813888,\n pad_1099511627776,\n pad_2199023255552,\n pad_4398046511680,\n pad_8796093022208,\n pad_17592186044416,\n pad_35184372088832,\n pad_70368744177664,\n pad_140737488355328,\n pad_281474976710656,\n pad_562949953421312,\n pad_1125899906842624,\n pad_2251799813685248,\n pad_4503599627370496,\n pad_9007199254740992,\n pad_18014398509481984,\n pad_36028797018963968,\n pad_72057594037927936,\n pad_144115188075855872,\n pad_288230376151711744,\n pad_576460752303423488,\n pad_1152921504606846976,\n pad_2305843009213693952,\n pad_4611686018427387904,\n pad_9223372036854775808,\n pad_18446744073709551616,\n pad_36028797018963967,\n pad_72057594037927935,\n pad_144115188075855871,\n pad_288230376151711743,\n pad_576460752303423489,\n pad_1152921504606846975,\n pad_2305843009213693953,\n pad_4611686018427387903,\n pad_9223372036854775807,\n pad_18446744073709551615,\n pad_36028797018963967,\n pad_72057594037927935,\n pad_144115188075855871,\n pad_288230376151711743,\n pad_576460752303423489,\n pad_1152921504606846975,\n pad_2305843009213693953,\n pad_4611686018427387903,\n pad_9223372036854775807,\n pad_18446744073709551615,\n pad_36028797018963967,\n pad_72057594037927935,\n pad_144115188075855871,\n pad_288230376151711743,\n pad_576460752303423489,\n pad_1152921504606846975,\n pad_2305843009213693953,\n pad_4611686018427387903,\n pad_9223372036854775807,\n pad_18446744073709551615,\n pad_36028797018963967,\n pad_72057594037927935,\n pad_144115"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let a = 1\n  let b = 1\n  for (let i = 2; i < n; i++) {\n    let temp = a + b\n    a = b\n    b = temp\n  }\n  return b\n}\n\nconst isPrime = (n) => {\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrimeFib = (n) => {\n  let primeFib = primeFib(n)\n  return isPrime(primeFib)\n}\n\nexport default primeFib\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    const sum = {};\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === 0) continue;\n        if (sum[l[i]] === undefined) sum[l[i]] = 1;\n        else sum[l[i]]++;\n    }\n    return sum.length === 0;\n};\n\nconst triplesSumToZero_slow = (l) => {\n    const sum = {};\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === 0) continue;\n        for (let j = i + 1; j < l.length; j++) {\n            if (l[j] === 0) continue;\n            if (sum[l[i]] === undefined) sum[l[i]] = 1;\n            else sum[l[i]]++;\n            if (sum[l[j]] === undefined) sum[l[j]] = 1;\n            else sum[l[j]]++;\n        }\n    }\n    return sum.length === 0;\n};\n\nexport { triplesSumToZero };\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  const cars = new Array(n)\n  const result = new Array(n)\n\n  cars[0].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[1].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[2].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[3].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[4].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[5].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[6].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[7].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[8].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[9].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[10].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[11].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[12].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[13].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[14].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[15].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[16].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[17].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[18].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[19].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[20].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[21].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[22].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[23].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[24].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[25].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[26].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[27].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[28].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[29].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[30].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[31].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[32].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[33].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[34].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[35].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[36].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[37].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[38].set({\n    x: 100,\n    y: 0,\n    vx: 0,\n    vy: 0\n  })\n\n  cars[39].set({\n    x: 100,"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const s = [];\n  for (let i = 0; i < l.length; i++) {\n    s.push(l[i] + 1);\n  }\n  return s;\n};\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  const s = [];\n  for (let i = 0; i < l.length; i++) {\n    s.push(l[i] - 1);\n  }\n  return s;\n};\n\nconst isSorted = (l) => {\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n  return true;\n};\n\n/* Return a list of elements with the element of given index is removed.\n   >>> removeElementAt(1, [1, 2, 3, 4, 5])\n   [1, 2, 4, 5]\n   >>> removeElementAt(2, [1, 2, 3, 4, 5])\n   [1, 2, 3, 4]\n   >>> removeElementAt(4, [1, 2, 3, 4, 5])\n   [1, 2, 3]\n   >>> removeElementAt(5, [1, 2, 3, 4, 5])\n   [1, 2, 3, 4]\n   >>> removeElementAt(3, [1, 2, 3, 4, 5])\n   [1, 2, 3, 4, 5]\n   >>> removeElementAt(5, [1, 2, 3, 4, 5, 6])\n   [1, 2, 3, 4, 5]\n   >>> removeElementAt(3, [1, 2, 3, 4, 5, 6])\n   [1, 2, 3, 4, 5]\n   >>> removeElementAt(4, [1, 2, 3, 4, 5, 6])\n   [1, 2, 3, 4, 5]\n   >>> removeElementAt(3, [1, 2, 3, 4, 5, 6, 7])\n   [1, 2, 3, 4, 5]\n   >>> removeElementAt(3, [1, 2, 3, 4, 5, 6, 7, 8])\n   [1, 2, 3, 4, 5]\n   >>> removeElementAt(3, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n   [1, 2, 3, 4, 5, 6, 7, 8]\n   >>> removeElementAt(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n   [1, 2, 3, 4, 5, 6, 7, 8]\n   >>> removeElementAt(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n   [1, 2, 3, 4, 5, 6, 7, 8]\n   >>> removeElementAt(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n   [1, 2, 3, 4, 5, 6, 7, 8]\n   >>> removeElementAt(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n   [1, 2, 3, 4, 5, 6, 7, 8]\n   >>> removeElementAt(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n   [1, 2, 3, 4, 5, 6, 7, 8]\n   >>> removeElementAt(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n   [1, 2, 3, 4, 5, 6, 7, 8]\n   >>> removeElementAt(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n   [1, 2, 3, 4, 5, 6, 7, 8]\n   >>> removeElementAt(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n   [1, 2, 3, 4, 5, 6, 7, 8]\n   >>> removeElementAt(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n   [1, 2, 3, 4, 5, 6, 7, 8]\n   >>> removeElementAt(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n   [1, 2, 3, 4, 5, 6, 7, 8]\n   >>> removeElementAt(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n   [1, 2, 3, 4, 5, 6, 7, 8]\n   >>> removeElementAt(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n   [1, 2, 3, 4, 5, 6, 7, 8]\n   >>> removeElementAt(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n   [1, 2"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const {length} = l\n  const zero = []\n  const {sum} = zero\n  for (let i = 0; i < length; i += 1) {\n    const current = l[i]\n    const next = l[i + 1]\n    if (current + next === 0) {\n      sum.push([current, next])\n      if (i === length - 1) {\n        return true\n      }\n    } else if (current!== next) {\n      return false\n    }\n  }\n  return false\n}\n\nexport default pairsSumToZero\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (x < base) {\n    return x.toString();\n  }\n  const digit = x.toString(base).replace(/\\D/g, '');\n  const result = digit.split('').reverse().join('');\n  return changeBase(parseInt(result, base), base);\n};\n\nconst main = () => {\n  const result = changeBase(123456789, 3);\n  console.log(result);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (2 * (a * h)) / (a + h);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (2 * (a * h)) / (a + h);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (2 * (a * h)) / (a + h);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (2 * (a * h)) / (a + h);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (2 * (a * h)) / (a + h);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (2 * (a * h)) / (a + h);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (2 * (a * h)) / (a + h);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (2 * (a * h)) / (a + h);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (2 * (a * h)) / (a + h);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (2 * (a * h)) / (a + h);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (2 * (a * h)) / (a + h);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (2 * (a * h)) / (a + h);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (2 * (a * h)) / (a + h);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (2 * (a * h)) / (a + h);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (2 * (a * h)) / (a + h);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (2 * (a * h)) / (a + h);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (2 * (a * h)) / (a + h);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (2 * (a * h)) / (a + h);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (2 * (a * h)) / (a + h);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (2 * (a * h)) / (a + h);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (2 * (a * h)) / (a + h);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (2 * (a * h)) / (a + h);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (2 * (a * h)) / (a + h);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    if (n < 2) return 1;\n    return fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nexport default fib4;\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const len = l.length\n  let i = 0\n  let j = len - 1\n  let m = 0\n  let pivot = l[0]\n\n  while (i < j) {\n    while (l[i] < pivot) {\n      i += 1\n    }\n    while (l[j] > pivot) {\n      j -= 1\n    }\n    if (i <= j) {\n      const tmp = l[i]\n      l[i] = l[j]\n      l[j] = tmp\n      i += 1\n      j -= 1\n    }\n  }\n  if (l[i] === pivot) {\n    i += 1\n  }\n  if (l[j] === pivot) {\n    j -= 1\n  }\n  if (i === j) {\n    return l[i]\n  }\n  const m = (l[i] + l[j]) / 2\n  return m\n}\n\n/**\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nconst gcd = (x, y) => {\n  if (x === 0) {\n    return y\n  }\n  return gcd(y % x, x)\n}\n\nconst main = (args) => {\n  let n = parseInt(args[0], 10)\n  let m = parseInt(args[1], 10)\n  const arr = []\n  for (let i = 0; i < n; i += 1) {\n    arr.push(parseInt(args[i + 2], 10))\n  }\n  const num = n * m\n  const arr_sum = arr.reduce((acc, x) => acc + x, 0)\n  const l = arr.length\n  const res = median(arr)\n  const gcd_res = gcd(num, res)\n  console.log(gcd_res)\n  const max = arr.reduce((acc, x) => Math.max(acc, x), 0)\n  const min = arr.reduce((acc, x) => Math.min(acc, x), 0)\n  const sum = arr.reduce((acc, x) => acc + x, 0)\n  console.log(max, min, sum)\n}\n\nmain(process.argv.slice(2))\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const textLength = text.length;\n  const halfLength = textLength / 2;\n\n  for (let i = 0; i < halfLength; i++) {\n    if (text[i]!== text[textLength - i - 1]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexport default isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0) return modp(-n, p)\n  if (n === 0) return 0\n  if (n === 1) return 1\n  if (n === p) return 1\n  if (n === p - 1) return 0\n  let a = 1\n  let i = 1\n  while (n > 0) {\n    if (n & 1) {\n      a = (a * p) % p\n      if (i === p) return a\n    }\n    n = n >> 1\n    i++\n  }\n  return a\n}\n\n// (x, y, p)\nconst isEqual = (x, y) => x === y || modp(x, p) === modp(y, p)\n\nconst p = Math.pow(10, 9) + 7\nconst n = 5\n\nconst isPrime = (n) => {\n  let i = 0\n  while (i < n) {\n    if (isEqual(n, i + 1)) return false\n    i++\n  }\n  return true\n}\n\nconst findPrime = (x) => {\n  let i = 0\n  while (isPrime(i)) {\n    i++\n  }\n  return i\n}\n\nconsole.log(findPrime(p))\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n    return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0))).join(\"\");\n  } /* takes as input string encoding with encode_shift functions. Returns encoding string. */ const encode = (s) => { return encodeShift(encodeShift(s)); }\n  const decode = (s) => { return decodeShift(decodeShift(s)); }\n  const encodeString = (s) => {\n    return encode(s.split(\"\").join(encodeShift(\"\")));\n  }\n  const decodeString = (s) => {\n    return decode(s.split(\"\").join(decodeShift(\"\")));\n  }\n  const encodeString2 = (s) => {\n    return encode(s.split(\"\").join(encodeShift(\"\")));\n  }\n  const decodeString2 = (s) => {\n    return decode(s.split(\"\").join(decodeShift(\"\")));\n  }\n  const encodeString3 = (s) => {\n    return encode(s.split(\"\").join(encodeShift(\"\")));\n  }\n  const decodeString3 = (s) => {\n    return decode(s.split(\"\").join(decodeShift(\"\")));\n  }\n  const encodeString4 = (s) => {\n    return encode(s.split(\"\").join(encodeShift(\"\")));\n  }\n  const decodeString4 = (s) => {\n    return decode(s.split(\"\").join(decodeShift(\"\")));\n  }\n  const encodeString5 = (s) => {\n    return encode(s.split(\"\").join(encodeShift(\"\")));\n  }\n  const decodeString5 = (s) => {\n    return decode(s.split(\"\").join(decodeShift(\"\")));\n  }\n  const encodeString6 = (s) => {\n    return encode(s.split(\"\").join(encodeShift(\"\")));\n  }\n  const decodeString6 = (s) => {\n    return decode(s.split(\"\").join(decodeShift(\"\")));\n  }\n  const encodeString7 = (s) => {\n    return encode(s.split(\"\").join(encodeShift(\"\")));\n  }\n  const decodeString7 = (s) => {\n    return decode(s.split(\"\").join(decodeShift(\"\")));\n  }\n  const encodeString8 = (s) => {\n    return encode(s.split(\"\").join(encodeShift(\"\")));\n  }\n  const decodeString8 = (s) => {\n    return decode(s.split(\"\").join(decodeShift(\"\")));\n  }\n  const encodeString9 = (s) => {\n    return encode(s.split(\"\").join(encodeShift(\"\")));\n  }\n  const decodeString9 = (s) => {\n    return decode(s.split(\"\").join(decodeShift(\"\")));\n  }\n  const encodeString10 = (s) => {\n    return encode(s.split(\"\").join(encodeShift(\"\")));\n  }\n  const decodeString10 = (s) => {\n    return decode(s.split(\"\").join(decodeShift(\"\")));\n  }\n  const encodeString11 = (s) => {\n    return encode(s.split(\"\").join(encodeShift(\"\")));\n  }\n  const decodeString11 = (s) => {\n    return decode(s.split(\"\").join(decodeShift(\"\")));\n  }\n  const encodeString12 = (s) => {\n    return encode(s.split(\"\").join(encodeShift(\"\")));\n  }\n  const decodeString12 = (s) => {\n    return decode(s.split(\"\").join(decodeShift(\"\")));\n  }\n  const encodeString13 = (s) => {\n    return encode(s.split(\"\").join(encodeShift(\"\")));\n  }\n  const decodeString13 = (s) => {\n    return decode(s.split(\"\").join(decodeShift(\"\")));\n  }\n  const encodeString14 = (s) => {\n    return encode(s.split(\"\").join(encodeShift(\"\")));\n  }\n  const decodeString14 = (s) => {\n    return decode(s.split(\"\").join(decodeShift(\"\")));\n  }\n  const encodeString15 = (s) => {\n    return encode(s.split(\"\").join(encodeShift(\"\")));\n  }\n  const decodeString15 = (s) => {\n    return decode(s.split(\"\").join(decodeShift(\"\")));\n  }\n  const encodeString16 = (s) => {\n    return encode(s.split(\"\").join(encodeShift(\"\")));\n  }\n  const decodeString16 = (s) => {\n    return decode(s.split(\"\").join(decodeShift(\"\")));\n  }\n  const encodeString17 = (s) => {\n    return encode(s.split(\"\").join(encodeShift(\"\")));\n  }\n  const decodeString17 = (s) => {\n    return decode(s.split(\"\").join(decodeShift(\"\")));\n  }\n  const encodeString18 = (s) => {\n    return encode(s.split(\"\").join(encodeShift(\"\")));\n  }\n  const decodeString18 = (s) => {\n    return decode(s.split(\"\").join(decodeShift(\"\")));\n  }\n  const encodeString19 = (s) => {\n    return encode(s.split(\"\").join(encodeShift(\"\")));\n  }\n  const decodeString19 = (s) => {\n    return decode(s.split(\"\").join(decodeShift(\"\")));\n  }\n  const encodeString20 = (s) => {\n    return encode(s.split(\"\").join(encodeShift(\"\")));\n  }\n  const decodeString20 = (s) => {\n    return decode(s.split(\""}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\n/*\n  trim is a functions that takes string and returns string without leading and trailing spaces.\n  >>> trim('')\n  ''\n  >>> trim(\" abc \")\n  'abc'\n  >>> trim(\" abc\")\n  'abc'\n  >>> trim(\"\\t abc \")\n  'abc'\n  >>> trim(\" abc\\t\")\n  'abc'\n  >>> trim(\" abc\\t\\n\")\n  'abc'\n  >>> trim(\"\\n abc\\t\\n\")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n\")\n  'abc'\n  >>> trim(\"abc\\t\\n\")\n  'abc'\n  >>> trim(\"abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\t abc\\t\\n\")\n  'abc'\n  >>> trim(\"\\t abc\\t\\n \")\n  'abc'\n  >>> trim(\" abc\\t\\n \")\n  'abc'\n  >>> trim(\" abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>> trim(\"\\n\\n abc\\t\\n \")\n  'abc'\n  >>>"}
{"task_id": "JavaScript/52", "prompt": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every((v) => v < t);\n};\n\nmodule.exports = belowThreshold;\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  if (x === 0) {\n    return y\n  }\n  if (y === 0) {\n    return x\n  }\n  if (x < 0) {\n    if (y < 0) {\n      return x + y\n    } else {\n      return x - y\n    }\n  } else {\n    if (y < 0) {\n      return y - x\n    } else {\n      return x + y\n    }\n  }\n}\n\n/*\n  * Subtract two numbers x and y\n  * >>> subtract(5, 7)\n  * 4\n  * >>> subtract(10, 5)\n  * 5\n  * >>> subtract(2, 3)\n  * -1\n  */\nconst subtract = (x, y) => {\n  if (x === 0) {\n    return -y\n  }\n  if (y === 0) {\n    return x\n  }\n  if (x < 0) {\n    if (y < 0) {\n      return x - y\n    } else {\n      return x + y\n    }\n  } else {\n    if (y < 0) {\n      return y - x\n    } else {\n      return x - y\n    }\n  }\n}\n\n/*\n  * Multiplies two numbers x and y\n  * >>> multiply(2, 3)\n  * 6\n  * >>> multiply(2, 5)\n  * 10\n  * >>> multiply(7, 5)\n  * 21\n  * >>> multiply(5, 5)\n  * 25\n  */\nconst multiply = (x, y) => {\n  if (x === 0) {\n    return 0\n  }\n  if (y === 0) {\n    return 0\n  }\n  if (x < 0) {\n    if (y < 0) {\n      return -x * y\n    } else {\n      return -x * y\n    }\n  } else {\n    if (y < 0) {\n      return x * -y\n    } else {\n      return x * y\n    }\n  }\n}\n\n/*\n  * Divides two numbers x and y\n  * >>> divide(25, 5)\n  * 5\n  * >>> divide(21, 5)\n  * 3\n  * >>> divide(21, 2)\n  * 7\n  */\nconst divide = (x, y) => {\n  if (x === 0) {\n    return 0\n  }\n  if (y === 0) {\n    return 0\n  }\n  if (x < 0) {\n    return x / y\n  } else {\n    return x / y\n  }\n}\n\n/*\n  * Finds the greatest common divisor between two numbers x and y\n  * >>> gcd(4, 8)\n  * 4\n  * >>> gcd(2, 7)\n  * 2\n  * >>> gcd(3, 7)\n  * 1\n  * >>> gcd(3, 3)\n  * 1\n  */\nconst gcd = (x, y) => {\n  if (x === 0) {\n    return y\n  }\n  if (y === 0) {\n    return x\n  }\n  if (x < 0) {\n    if (y < 0) {\n      return gcd(x - y, abs(x))\n    } else {\n      return gcd(x, abs(x) - y)\n    }\n  } else {\n    if (y < 0) {\n      return gcd(abs(x) - y, y)\n    } else {\n      return gcd(abs(x), y)\n    }\n  }\n}\n\n/*\n  * Finds the least common multiple between two numbers x and y\n  * >>> lcm(2, 3)\n  * 6\n  * >>> lcm(7, 5)\n  * 35\n  * >>> lcm(5, 5)\n  * 25\n  * >>> lcm(3, 7)\n  * 21\n  * >>> lcm(3, 3)\n  * 3\n  * >>> lcm(1, 2)\n  * 2\n  * >>> lcm(0, 0)\n  * 0\n  */\nconst lcm = (x, y) => {\n  if (x === 0) {\n    return y\n  }\n  if (y === 0) {\n    return x\n  }\n  if (x < 0) {\n    if (y < 0) {\n      return lcm(abs(x), abs(y))\n    } else {\n      return lcm(abs(x), abs(y) - y)\n    }\n  } else {\n    if (y < 0) {\n      return lcm(abs(x) - y, y)\n    } else {\n      return lcm(abs(x) - y, y)\n    }\n  }\n}\n\nmodule.exports = {\n  add,\n  subtract,\n  multiply,\n  divide,\n  gcd,\n  lcm\n}\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    let i = 0, j = 0;\n    while (i < s0.length && j < s1.length) {\n        if (s0[i]!== s1[j]) return false;\n        i++;\n        j++;\n    }\n    return true;\n}\n\n/*\n  Check if two word is the same.\n  >>> same('eabcd', 'dddddddabc')\n  true\n  >>> same('abcd', 'dddddddabce')\n  false\n  >>> same('eabcd', 'dddddddabce')\n  false\n  >>> same('eabcd', 'ddddddddabce')\n  false\n  >>> same('eabcd', 'ddddddddd')\n  false\n  >>> same('abc', 'dddddddd')\n  false\n  */\nconst same = (s0, s1) => {\n    let i = 0, j = 0;\n    while (i < s0.length && j < s1.length) {\n        if (s0[i]!== s1[j]) return false;\n        i++;\n        j++;\n    }\n    return true;\n}\n\n/*\n  Find the shortest string from two.\n  >>> shortest('abcd', 'abce')\n  'abcd'\n  >>> shortest('abc', 'abbc')\n  'abc'\n  >>> shortest('abcd', 'ddddddd')\n  'abcd'\n  >>> shortest('abcd', 'dddddddabc')\n  'abcd'\n  >>> shortest('abc', 'dddddddabce')\n  'abc'\n  >>> shortest('eabcd', 'dddddddabc')\n  'eabcd'\n  >>> shortest('eabcd', 'ddddddddabce')\n  'eabcd'\n  >>> shortest('eabcd', 'ddddddddd')\n  'eabcd'\n  >>> shortest('abcd', 'ddddddd')\n  'abcd'\n  >>> shortest('abc', 'ddddddd')\n  'abc'\n  >>> shortest('abc', 'dddddddd')\n  'abc'\n  >>> shortest('abc', 'ddddddddd')\n  'abc'\n  >>> shortest('abc', 'dddddddddd')\n  'abc'\n  */\nconst shortest = (s0, s1) => {\n    let shortest = '';\n    if (s0.length < s1.length) shortest = s0;\n    else shortest = s1;\n    return shortest;\n}\n\n/*\n  Check if two word contains the same characters.\n  >>> sameCharsIn('abcd', 'ddddddd')\n  true\n  >>> sameCharsIn('abcd', 'dddddddabc')\n  true\n  >>> sameCharsIn('abcd', 'dddddddabce')\n  false\n  >>> sameCharsIn('eabcd', 'dddddddabc')\n  true\n  >>> sameCharsIn('eabcd', 'ddddddddabce')\n  true\n  >>> sameCharsIn('eabcd', 'ddddddddd')\n  false\n  >>> sameCharsIn('abc', 'dddddddd')\n  false\n  >>> sameCharsIn('abc', 'ddddddddd')\n  false\n  >>> sameCharsIn('abc', 'dddddddddd')\n  false\n  */\nconst sameCharsIn = (s0, s1) => {\n    let i = 0, j = 0;\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) return true;\n        i++;\n        j++;\n    }\n    return false;\n}\n\n/*\n  Check if two word contains the same characters.\n  >>> sameIn('abcd', 'ddddddd')\n  true\n  >>> sameIn('abcd', 'dddddddabc')\n  true\n  >>> sameIn('abcd', 'dddddddabce')\n  false\n  >>> sameIn('eabcd', 'dddddddabc')\n  true\n  >>> sameIn('eabcd', 'ddddddddabce')\n  true\n  >>> sameIn('eabcd', 'ddddddddd')\n  false\n  >>> sameIn('abc', 'dddddddd')\n  false\n  >>> sameIn('abc', 'ddddddddd')\n  false\n  >>> sameIn('abc', 'dddddddddd')\n  false\n  */\nconst sameIn = (s0, s1) => {\n    let i = 0, j = 0;\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) return true;\n        i++;\n        j++;\n    }\n    return false;\n}\n\n/*\n  Check if two word is the same.\n  >>> same('abcd', 'dddddddabc')\n  false\n  >>> same('abcd', 'dddddddabce')\n  false\n  >>> same('eabcd', 'dddddddabc')\n  false\n  >>> same('eabcd', 'ddddddddabce')\n  false\n  >>> same('eabcd', 'ddddddddd')\n  false\n  >>> same('abc', 'dddddddd')\n  false\n  >>> same('abc', 'ddddddddd')\n  false\n  >>> same('abc', 'dddddddddd')\n  false\n  */\nconst sameIn = (s0, s1) => {\n    let i = 0, j = 0;\n    while (i < s0.length && j < s1.length) {\n        if (s"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1\n  } else {\n    return fib(n - 1) + fib(n - 2)\n  }\n}\n\nexport default fib\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsLength = brackets.length;\n  let lastBracket = 0;\n  let bracketsOpen = 0;\n  let bracketsClose = 0;\n  let openBrackets = 0;\n  let closeBrackets = 0;\n  const bracketEqual = (a, b) => a === b;\n  brackets.forEach((bracket, index) => {\n    if (bracket === \"<\") {\n      openBrackets++;\n      lastBracket = index;\n    } else if (bracket === \">\") {\n      closeBrackets++;\n      if (openBrackets > closeBrackets) {\n        return false;\n      }\n      if (bracketsOpen === bracketsClose) {\n        return false;\n      }\n    }\n  });\n  return brackets.length === openBrackets && brackets.length === closeBrackets;\n};\n\n/*\n  Given a string and a list of strings, return true if the string is a substring of every string in the list.\n*/\nconst isSubstringOfAllStrings = (string, lists) => {\n  const listsLength = lists.length;\n  let allTrue = true;\n  for (let i = 0; i < listsLength; i++) {\n    const list = lists[i];\n    if (!list.includes(string)) {\n      allTrue = false;\n    }\n  }\n  return allTrue;\n};\n\n/*\n  Given a string, return a list of all strings that are a substring of the string.\n*/\nconst getAllSubstringsOfString = (string) => {\n  const stringLength = string.length;\n  let allSubstrings = [];\n  let index = 0;\n  while (index < stringLength) {\n    const substring = string.substring(index, stringLength);\n    allSubstrings.push(substring);\n    index++;\n  }\n  return allSubstrings;\n};\n\n/*\n  Given a string, return a list of all strings that are a substring of the string.\n*/\nconst getAllPrefixesOfString = (string) => {\n  const stringLength = string.length;\n  let allPrefixes = [];\n  let index = 0;\n  while (index < stringLength) {\n    const prefix = string.substring(0, index + 1);\n    allPrefixes.push(prefix);\n    index++;\n  }\n  return allPrefixes;\n};\n\n/*\n  Given a string, return a list of all strings that are a substring of the string.\n*/\nconst getAllSuffixesOfString = (string) => {\n  const stringLength = string.length;\n  let allSuffixes = [];\n  let index = stringLength - 1;\n  while (index >= 0) {\n    const suffix = string.substring(index, stringLength);\n    allSuffixes.push(suffix);\n    index--;\n  }\n  return allSuffixes;\n};\n\n/*\n  Given a string, return a list of all strings that are a substring of the string.\n*/\nconst getAllOccurencesOfString = (string) => {\n  const stringLength = string.length;\n  let allOccurences = [];\n  let index = 0;\n  while (index < stringLength) {\n    const occurence = string.substring(index, stringLength);\n    allOccurences.push(occurence);\n    index++;\n  }\n  return allOccurences;\n};\n\n/*\n  Given a string, return a list of all strings that are a substring of the string.\n*/\nconst getAllPostfixesOfString = (string) => {\n  const stringLength = string.length;\n  let allPostfixes = [];\n  let index = stringLength - 1;\n  while (index >= 0) {\n    const postfix = string.substring(index, stringLength);\n    allPostfixes.push(postfix);\n    index--;\n  }\n  return allPostfixes;\n};\n\n/*\n  Given a string, return a list of all strings that are a substring of the string.\n*/\nconst getAllInfixesOfString = (string) => {\n  const stringLength = string.length;\n  let allInfixes = [];\n  let index = 0;\n  while (index < stringLength) {\n    const infix = string.substring(index, stringLength);\n    allInfixes.push(infix);\n    index++;\n  }\n  return allInfixes;\n};\n\n/*\n  Given a string, return a list of all strings that are a substring of the string.\n*/\nconst getAllRepeatsOfString = (string) => {\n  const stringLength = string.length;\n  let allRepeats = [];\n  let index = 0;\n  while (index < stringLength) {\n    const repeat = string.substring(index, index + 1);\n    allRepeats.push(repeat);\n    index++;\n  }\n  return allRepeats;\n};\n\n/*\n  Given a string, return a list of all strings that are a substring of the string.\n*/\nconst getAllAlternatingRepeatsOfString = (string) => {\n  const stringLength = string.length;\n  let allAlternatingRepeats = [];\n  let index = 0;\n  while (index < stringLength) {\n    const repeat = string.substring(index, index + 1);\n    const reverseRepeat = string.substring(stringLength - 1 - index, stringLength - 1 - index);\n    allAlternatingRepeats.push(repeat + reverseRepeat);\n    index++;\n  }\n  return allAlternatingRepeats;\n};\n\n/*\n  Given a string, return a list of all strings that are a substring of the string.\n*/\nconst getAllConsecutiveRepeatsOfString = (string) => {\n  const stringLength = string.length;\n  let allConsecutiveRepeats = [];\n  let index = 0;\n  while (index < stringLength) {\n    const repeat = string.substring(index, index + 1);\n    const repeatEnd = string.substring(index + 1, index + 2);\n"}
{"task_id": "JavaScript/57", "prompt": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let min = l[0];\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) max = l[i];\n    if (l[i] < min) min = l[i];\n  }\n  return max - min > 0;\n};\n\nmodule.exports = monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const len1 = l1.length;\n  const len2 = l2.length;\n\n  const c1 = {};\n  for (let i = 0; i < len1; i++) {\n    c1[l1[i]] = true;\n  }\n  const c2 = {};\n  for (let i = 0; i < len2; i++) {\n    c2[l2[i]] = true;\n  }\n  const result = [];\n  for (let k in c1) {\n    if (c2[k]) {\n      result.push(k);\n    }\n  }\n  return result;\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": false, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (isPrime(n)) return n;\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return largestPrimeFactor(n / i);\n    }\n    i++;\n  }\n  return i;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const result = 1\n  for (let i = 1; i <= n; i++) {\n    result += i\n  }\n  return result\n}\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const result = 1\n  for (let i = 1; i <= n; i++) {\n    result += i\n  }\n  return result\n}\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const result = 1\n  for (let i = 1; i <= n; i++) {\n    result += i\n  }\n  return result\n}\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const result = 1\n  for (let i = 1; i <= n; i++) {\n    result += i\n  }\n  return result\n}\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const result = 1\n  for (let i = 1; i <= n; i++) {\n    result += i\n  }\n  return result\n}\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const result = 1\n  for (let i = 1; i <= n; i++) {\n    result += i\n  }\n  return result\n}\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const result = 1\n  for (let i = 1; i <= n; i++) {\n    result += i\n  }\n  return result\n}\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const result = 1\n  for (let i = 1; i <= n; i++) {\n    result += i\n  }\n  return result\n}\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const result = 1\n  for (let i = 1; i <= n; i++) {\n    result += i\n  }\n  return result\n}\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const result = 1\n  for (let i = 1; i <= n; i++) {\n    result += i\n  }\n  return result\n}\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const result = 1\n  for (let i = 1; i <= n; i++) {\n    result += i\n  }\n  return result\n}\n\n/*\n  sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const result"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = []\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      stack.push(\"(\")\n    } else if (brackets[i] === \")\") {\n      if (stack.length === 0) {\n        return false\n      } else {\n        stack.pop()\n      }\n    }\n  }\n\n  return stack.length === 0\n}\n\nexport {\n  correctBracketing,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let result = [];\n  for (let i = 1; i < xs.length; i++) {\n    result.push(xs[i]);\n    result.push(xs[i] * (i - 1));\n  }\n  return result;\n};\n\nconst derivative2 = (xs) => {\n  let result = [];\n  let f = (x) => {\n    return xs[0] + xs[1] * x + xs[2] * x * x;\n  };\n  let g = (x) => {\n    return xs[1] + xs[2] * x;\n  };\n  let h = (x) => {\n    return xs[2] + x;\n  };\n  for (let i = 2; i < xs.length; i++) {\n    let j = 1;\n    while (j < i) {\n      result.push(xs[i] + (j - 1) * xs[j] * h(x));\n      j++;\n    }\n    result.push(xs[i] + (i - 1) * f(x));\n  }\n  return result;\n};\n\nconst getDerivative = (f, g) => {\n  let result = [];\n  let x = 0;\n  let term = f(x);\n  while (term!= 0) {\n    result.push(g(x));\n    x += 1;\n    term = f(x);\n  }\n  return result;\n};\n\nconst main = () => {\n  let f = (x) => {\n    return x * x * x - x - 3;\n  };\n  let g = (x) => {\n    return x * x - 2 * x + 1;\n  };\n  let h = (x) => {\n    return -3 * x - 3;\n  };\n  let terms = [f, g, h];\n  let derivative = getDerivative(terms, derivative2);\n  let result = [];\n  let i = 1;\n  while (i < derivative.length) {\n    result.push(derivative[i]);\n    i += 2;\n  }\n  let diff = derivative2(result);\n  console.log(diff);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n    let fib = [0, 1];\n    let temp;\n    while (fib.length < n) {\n        temp = fib[fib.length - 1];\n        fib[fib.length - 1] = fib[fib.length - 2] + fib[fib.length - 3];\n        fib[fib.length - 2] = temp;\n    }\n    return fib[n - 1];\n};\n\n/*\n Please writes a functions to efficiently computing the n-th elements of the fibonacci number sequences.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  4\n  >>> fibonacci(8)\n  12\n  */\nconst fibonacci = (n) => {\n    let fib = [0, 1];\n    let temp;\n    while (fib.length < n) {\n        temp = fib[fib.length - 1];\n        fib[fib.length - 1] = fib[fib.length - 2] + fib[fib.length - 3];\n        fib[fib.length - 2] = temp;\n    }\n    return fib[n - 1];\n};\n\n/*\n Please write a function to efficiently compute the n-th elements of the fibonacci number sequences.\n  >>> fibonacci2(1)\n  0\n  >>> fibonacci2(5)\n  4\n  >>> fibonacci2(8)\n  12\n  */\nconst fibonacci2 = (n) => {\n    let fib = [0, 1];\n    let temp;\n    while (fib.length < n) {\n        temp = fib[fib.length - 1];\n        fib[fib.length - 1] = fib[fib.length - 2] + fib[fib.length - 3];\n        fib[fib.length - 2] = temp;\n    }\n    return fib[n - 1];\n};\n\nconst fibonacci3 = (n) => {\n    let fib = [0, 1];\n    let temp;\n    while (fib.length < n) {\n        temp = fib[fib.length - 1];\n        fib[fib.length - 1] = fib[fib.length - 2] + fib[fib.length - 3];\n        fib[fib.length - 2] = temp;\n    }\n    return fib[n - 1];\n};\n\nconst fibonacci4 = (n) => {\n    let fib = [0, 1];\n    let temp;\n    while (fib.length < n) {\n        temp = fib[fib.length - 1];\n        fib[fib.length - 1] = fib[fib.length - 2] + fib[fib.length - 3];\n        fib[fib.length - 2] = temp;\n    }\n    return fib[n - 1];\n};\n\nconst fibonacci5 = (n) => {\n    let fib = [0, 1];\n    let temp;\n    while (fib.length < n) {\n        temp = fib[fib.length - 1];\n        fib[fib.length - 1] = fib[fib.length - 2] + fib[fib.length - 3];\n        fib[fib.length - 2] = temp;\n    }\n    return fib[n - 1];\n};\n\nconst fibonacci6 = (n) => {\n    let fib = [0, 1];\n    let temp;\n    while (fib.length < n) {\n        temp = fib[fib.length - 1];\n        fib[fib.length - 1] = fib[fib.length - 2] + fib[fib.length - 3];\n        fib[fib.length - 2] = temp;\n    }\n    return fib[n - 1];\n};\n\nconst fibonacci7 = (n) => {\n    let fib = [0, 1];\n    let temp;\n    while (fib.length < n) {\n        temp = fib[fib.length - 1];\n        fib[fib.length - 1] = fib[fib.length - 2] + fib[fib.length - 3];\n        fib[fib.length - 2] = temp;\n    }\n    return fib[n - 1];\n};\n\nconst fibonacci8 = (n) => {\n    let fib = [0, 1];\n    let temp;\n    while (fib.length < n) {\n        temp = fib[fib.length - 1];\n        fib[fib.length - 1] = fib[fib.length - 2] + fib[fib.length - 3];\n        fib[fib.length - 2] = temp;\n    }\n    return fib[n - 1];\n};\n\nconst fibonacci9 = (n) => {\n    let fib = [0, 1];\n    let temp;\n    while (fib.length < n) {\n        temp = fib[fib.length - 1];\n        fib[fib.length - 1] = fib[fib.length - 2] + fib[fib.length - 3];\n        fib[fib.length - 2] = temp;\n    }\n    return fib[n - 1];\n};\n\nconst fibonacci10 = (n) => {\n    let fib = [0, 1];\n    let temp;\n    while (fib.length < n) {\n        temp = fib[fib.length - 1];\n        fib[fib.length - 1] = fib[fib.length - 2] + fib[fib.length - 3];\n        fib[fib.length - 2] = temp;\n    }\n    return fib[n - 1];\n};\n\nconst fibonacci11 = (n) => {\n    let"}
{"task_id": "JavaScript/64", "prompt": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  return vowels.filter((v) => s[0] === v || s[s.length - 1] === v).length\n}\n\n// const vowelsCount = (s) => {\n//   const vowels = ['a', 'e', 'i', 'o', 'u']\n//   let result = 0\n//   s.split('').forEach((c) => {\n//     if (vowels.indexOf(c) > -1) {\n//       result++\n//     }\n//   })\n//   return result\n// }\n\nconsole.log(vowelsCount('abcde'))\nconsole.log(vowelsCount('ACEDY'))\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  return String.fromCharCode(x.charCodeAt(0) + shift)\n}\n\nconst reverse = (x) => {\n  let reversed = \"\"\n  let char = \"\"\n\n  while (x > 0) {\n    char = String.fromCharCode(x % 10)\n    reversed = char + reversed\n    x = Math.floor(x / 10)\n  }\n  return reversed\n}\n\nconst reverseNumber = (x) => {\n  let reversed = \"\"\n  let char = \"\"\n\n  while (x > 0) {\n    char = String.fromCharCode(x % 10)\n    reversed = reversed + char\n    x = Math.floor(x / 10)\n  }\n  return reversed\n}\n\nmodule.exports = {\n  reverseNumber,\n  reverse,\n  circularShift,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n    const c = new Set(s.toUpperCase());\n    const res = c.reduce((acc, char, i) => acc + char.charCodeAt(0), 0);\n    return res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  let total = 0, n = Number(n), s = Number(s);\n\n  for (let i = 0; i < n; i++) {\n    total += s;\n  }\n\n  return total;\n};\n\nconst test = [\n  [\n    '5 apple and 6 oranges',\n    19,\n    fruitDistribution\n  ],\n  [\n    '0 apple and 1 oranges',\n    3,\n    fruitDistribution\n  ],\n  [\n    '2 apple and 3 oranges',\n    100,\n    fruitDistribution\n  ],\n  [\n    '100 apple and 1 oranges',\n    120,\n    fruitDistribution\n  ]\n];\n\ntest.forEach(({s, n, expected}) => {\n  console.log(`${s} -> ${n} -> ${expected}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const min = arr.reduce((acc, n, i) => n < acc? n : acc, Infinity);\n  const min_index = arr.findIndex(n => n === min);\n  return [min, min_index];\n};\n\nexport default pluck;\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const frequency = {};\n  for (let i = 0; i < lst.length; i++) {\n    if (frequency[lst[i]] === undefined) {\n      frequency[lst[i]] = 0;\n    }\n    frequency[lst[i]]++;\n  }\n  let maxFrequency = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (frequency[lst[i]] >= maxFrequency) {\n      maxFrequency = frequency[lst[i]];\n    }\n  }\n  return lst.filter(e => frequency[e] >= maxFrequency);\n};\n\nmodule.exports = search;\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  return lst.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    }\n    return 0\n  })\n}\n\nconst testStrangeSortList = (lst, expected) => {\n  console.log('Stranger sorting test:', lst, '->', strangeSortList(lst), 'expected:', expected)\n}\n\ntestStrangeSortList([5, 5, 5, 5], [5, 5, 5, 5])\ntestStrangeSortList([1, 2, 3, 4], [4, 3, 2, 1])\ntestStrangeSortList([], [])\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) return Math.pow(a + b - c, 2) / 2\n  if (b + c > a) return Math.pow(b + c - a, 2) / 2\n  if (c + a > b) return Math.pow(c + a - b, 2) / 2\n  return -1\n}\n\nexport default triangleArea\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const len = q.length\n  const left = q[0]\n  const right = q.slice(1)\n  const middle = q.slice(1, len - 1)\n  const max = Math.pow(10, len - 1)\n  let sum = left + right + middle\n  return sum <= w\n}\n\n/*\n  Given a set of numbers, will it fly?\n*/\nconst willItFly2 = (q, w) => {\n  return q.every(x => x <= w)\n}\n\n/*\n  Given a set of numbers, will it fly?\n*/\nconst willItFly3 = (q, w) => {\n  const len = q.length\n  const left = q[0]\n  const right = q.slice(1)\n  const middle = q.slice(1, len - 1)\n  const max = Math.pow(10, len - 1)\n  const sum = left + right + middle\n  return sum <= w\n}\n\n/*\n  Given a set of numbers, will it fly?\n*/\nconst willItFly4 = (q, w) => {\n  const len = q.length\n  const left = q[0]\n  const right = q.slice(1)\n  const middle = q.slice(1, len - 1)\n  const max = Math.pow(10, len - 1)\n  const sum = left + right + middle\n  return sum <= w\n}\n\n/*\n  Given a set of numbers, will it fly?\n*/\nconst willItFly5 = (q, w) => {\n  const len = q.length\n  const left = q[0]\n  const right = q.slice(1)\n  const middle = q.slice(1, len - 1)\n  const max = Math.pow(10, len - 1)\n  const sum = left + right + middle\n  return sum <= w\n}\n\n/*\n  Given a set of numbers, will it fly?\n*/\nconst willItFly6 = (q, w) => {\n  const len = q.length\n  const left = q[0]\n  const right = q.slice(1)\n  const middle = q.slice(1, len - 1)\n  const max = Math.pow(10, len - 1)\n  const sum = left + right + middle\n  return sum <= w\n}\n\n/*\n  Given a set of numbers, will it fly?\n*/\nconst willItFly7 = (q, w) => {\n  const len = q.length\n  const left = q[0]\n  const right = q.slice(1)\n  const middle = q.slice(1, len - 1)\n  const max = Math.pow(10, len - 1)\n  const sum = left + right + middle\n  return sum <= w\n}\n\n/*\n  Given a set of numbers, will it fly?\n*/\nconst willItFly8 = (q, w) => {\n  const len = q.length\n  const left = q[0]\n  const right = q.slice(1)\n  const middle = q.slice(1, len - 1)\n  const max = Math.pow(10, len - 1)\n  const sum = left + right + middle\n  return sum <= w\n}\n\n/*\n  Given a set of numbers, will it fly?\n*/\nconst willItFly9 = (q, w) => {\n  const len = q.length\n  const left = q[0]\n  const right = q.slice(1)\n  const middle = q.slice(1, len - 1)\n  const max = Math.pow(10, len - 1)\n  const sum = left + right + middle\n  return sum <= w\n}\n\n/*\n  Given a set of numbers, will it fly?\n*/\nconst willItFly10 = (q, w) => {\n  const len = q.length\n  const left = q[0]\n  const right = q.slice(1)\n  const middle = q.slice(1, len - 1)\n  const max = Math.pow(10, len - 1)\n  const sum = left + right + middle\n  return sum <= w\n}\n\n/*\n  Given a set of numbers, will it fly?\n*/\nconst willItFly11 = (q, w) => {\n  const len = q.length\n  const left = q[0]\n  const right = q.slice(1)\n  const middle = q.slice(1, len - 1)\n  const max = Math.pow(10, len - 1)\n  const sum = left + right + middle\n  return sum <= w\n}\n\n/*\n  Given a set of numbers, will it fly?\n*/\nconst willItFly12 = (q, w) => {\n  const len = q.length\n  const left = q[0]\n  const right = q.slice(1)\n  const middle = q.slice(1, len - 1)\n  const max = Math.pow(10, len - 1)\n  const sum = left + right + middle\n  return sum <= w\n}\n\n/*\n  Given a set of numbers, will it fly?\n*/\nconst willItFly13 = (q, w) => {\n  const len = q.length\n  const left = q[0]\n  const right = q.slice(1)\n  const middle = q.slice(1, len - 1)\n  const max = Math.pow(10, len - 1)\n  const sum = left + right + middle\n  return sum <= w"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const array = Array.from(arr)\n  const index = findSmallest(array)\n  return array[index]\n}\n\nfunction findSmallest(arr) {\n  const len = arr.length\n  let result = 0\n  let max = arr[0]\n\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > max) {\n      result = i\n      max = arr[i]\n    }\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let result = [];\n  const lst1Len = lst1.length;\n  const lst2Len = lst2.length;\n  for (let i = 0; i < lst1Len; i++) {\n    if (lst1[i].length === lst2[i].length) {\n      result.push(lst1[i]);\n    } else {\n      if (lst1[i].length > lst2[i].length) {\n        let diff = lst1[i].length - lst2[i].length;\n        for (let j = 0; j < diff; j++) {\n          result.push(lst1[i].substr(0, lst1[i].length - 1));\n        }\n      } else {\n        let diff = lst2[i].length - lst1[i].length;\n        for (let j = 0; j < diff; j++) {\n          result.push(lst2[i].substr(0, lst2[i].length - 1));\n        }\n      }\n    }\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const primes = [2, 3, 5]\n  const count = a / primes[0]\n  const index = Math.floor(count)\n  return primes[index] === a\n}\n\n/*\n  Calculates the sum of the digits of the given number\n  */\nconst sumDigits = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum += n % 10\n    n = Math.floor(n / 10)\n  }\n  return sum\n}\n\n/*\n  Calculates the sum of the digits of the given number,\n  and returns a boolean if the number is prime or not\n  */\nconst sumDigitsPrime = (n) => {\n  const sum = sumDigits(n)\n  return n === sum && isMultiplyPrime(n)\n}\n\nconst sumDigitsPrime = sumDigitsPrime\n\nconsole.log(sumDigitsPrime(18))\nconsole.log(sumDigitsPrime(30))\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n    if (x === 1) return true;\n    const d = x;\n    let i = 1;\n    while (d % n === 0) {\n        d /= n;\n        i++;\n    }\n    return i === n;\n};\n\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  // Write your code here\n  // var arr = []\n  // for(let i=0; i<a; i++) {\n  //   let val = Math.pow(a, i)\n  //   if(val === a) {\n  //     arr.push(i)\n  //   }\n  // }\n  // if(arr.length === a) {\n  //   return true\n  // }\n  // return false\n  return (Math.pow(a, 3) === a)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let key = num;\n  for (let i = 0; i < num.length; i++) {\n    key = `${key}${num[i]}`;\n  }\n  return key;\n};\n\nconst isPrime = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeDec = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeHex = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst countPrime = (num) => {\n  let count = 0;\n  while (num) {\n    num = num.toString(16);\n    if (isPrimeHex(num)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countPrimeDec = (num) => {\n  let count = 0;\n  while (num) {\n    num = num.toString(10);\n    if (isPrimeDec(num)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countPrimeHex = (num) => {\n  let count = 0;\n  while (num) {\n    num = num.toString(16);\n    if (isPrimeHex(num)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst solution = (num) => {\n  let result = [];\n  let keys = [hexKey(num), hexKey(num.toString(16)), hexKey(num.toString(2)), hexKey(num.toString(8)), hexKey(num.toString(16, 2)), hexKey(num.toString(16, 8)), hexKey(num.toString(2, 16)), hexKey(num.toString(8, 16)), hexKey(num.toString(2, 8)), hexKey(num.toString(8, 2)), hexKey(num.toString(16, 16))];\n  let key = keys.find((x) => {\n    return x === keys;\n  });\n  let count = countPrime(key);\n  if (isPrime(num)) {\n    result.push(key);\n  }\n  if (isPrimeDec(num)) {\n    result.push(key);\n  }\n  if (isPrimeHex(num)) {\n    result.push(key);\n  }\n  return result;\n};\n\nmodule.exports = solution;\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  if (decimal === 0) {\n    return 'db'\n  }\n\n  const bin = decimal.toString(2)\n  return `db${bin}`\n}\n\nconst binaryToDecimal = (binary) => {\n  if (binary === 'db') {\n    return 0\n  }\n\n  const decimal = parseInt(binary, 2)\n  return decimal\n}\n\nexport { binaryToDecimal, decimalToBinary }\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length;\n  const map = new Map();\n  let i = 0;\n  while (i < len) {\n    let temp = s[i];\n    if (i % 3 === 0) {\n      if (map.has(temp)) {\n        return false;\n      }\n      map.set(temp, true);\n    }\n    i++;\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const table = [\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E'],\n    ['A', 'A+', 'B', 'B+', 'C', 'C+', 'D', 'D+', 'E']\n  ];\n  const finalTable = [];\n  const grades = Array.from(grades);\n  grades.forEach((grade, index) => {\n    const letter = table[index].slice(0);\n    if (grade >= 3.7) {\n      letter.unshift('A+');\n    } else if (grade >= 3.3) {\n      letter.unshift('A');\n    } else if (grade >= 2.7) {\n      letter.unshift('B');\n    } else if (grade >= 2.3) {\n      letter.unshift('B+');\n    } else if (grade >= 1.7) {\n      letter.unshift('C');\n    } else if (grade >= 1.3) {\n      letter.unshift('C+');\n    } else if (grade >= 0.7) {\n      letter.unshift('D');\n    } else if (grade >= 0.0) {\n      letter.unshift('D+');\n    } else {\n      letter.unshift('E');\n    }\n    finalTable.push(...letter);\n  });\n  return finalTable;\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const stringLength = string.length\n  const array = []\n  for (let i = 2; i < stringLength; i++) {\n    array[i] = true\n  }\n  let i = 2\n  while (i < stringLength) {\n    if (array[i] === false) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*Write a functions that returns the first prime number greater than x\n  Examples\n  firstPrimeGreaterThan(10) == 11\n  firstPrimeGreaterThan(20) == 21\n  firstPrimeGreaterThan(30) == 31\n  firstPrimeGreaterThan(40) == 41\n  firstPrimeGreaterThan(50) == 51\n  firstPrimeGreaterThan(60) == 61\n  firstPrimeGreaterThan(70) == 71\n  firstPrimeGreaterThan(80) == 81\n  firstPrimeGreaterThan(90) == 91\n  firstPrimeGreaterThan(100) == 101\n  firstPrimeGreaterThan(110) == 111\n  firstPrimeGreaterThan(120) == 121\n  firstPrimeGreaterThan(130) == 131\n  firstPrimeGreaterThan(140) == 141\n  firstPrimeGreaterThan(150) == 151\n  firstPrimeGreaterThan(160) == 161\n  firstPrimeGreaterThan(170) == 171\n  firstPrimeGreaterThan(180) == 181\n  firstPrimeGreaterThan(190) == 191\n  firstPrimeGreaterThan(200) == 201\n  firstPrimeGreaterThan(210) == 211\n  firstPrimeGreaterThan(220) == 221\n  firstPrimeGreaterThan(230) == 231\n  firstPrimeGreaterThan(240) == 241\n  firstPrimeGreaterThan(250) == 251\n  firstPrimeGreaterThan(260) == 261\n  firstPrimeGreaterThan(270) == 271\n  firstPrimeGreaterThan(280) == 281\n  firstPrimeGreaterThan(290) == 291\n  firstPrimeGreaterThan(300) == 301\n  firstPrimeGreaterThan(310) == 311\n  firstPrimeGreaterThan(320) == 321\n  firstPrimeGreaterThan(330) == 331\n  firstPrimeGreaterThan(340) == 341\n  firstPrimeGreaterThan(350) == 351\n  firstPrimeGreaterThan(360) == 361\n  firstPrimeGreaterThan(370) == 371\n  firstPrimeGreaterThan(380) == 381\n  firstPrimeGreaterThan(390) == 391\n  firstPrimeGreaterThan(400) == 401\n  firstPrimeGreaterThan(410) == 411\n  firstPrimeGreaterThan(420) == 421\n  firstPrimeGreaterThan(430) == 431\n  firstPrimeGreaterThan(440) == 441\n  firstPrimeGreaterThan(450) == 451\n  firstPrimeGreaterThan(460) == 461\n  firstPrimeGreaterThan(470) == 471\n  firstPrimeGreaterThan(480) == 481\n  firstPrimeGreaterThan(490) == 491\n  firstPrimeGreaterThan(500) == 501\n  firstPrimeGreaterThan(510) == 511\n  firstPrimeGreaterThan(520) == 521\n  firstPrimeGreaterThan(530) == 531\n  firstPrimeGreaterThan(540) == 541\n  firstPrimeGreaterThan(550) == 551\n  firstPrimeGreaterThan(560) == 561\n  firstPrimeGreaterThan(570) == 571\n  firstPrimeGreaterThan(580) == 581\n  firstPrimeGreaterThan(590) == 591\n  firstPrimeGreaterThan(600) == 601\n  firstPrimeGreaterThan(610) == 611\n  firstPrimeGreaterThan(620) == 621\n  firstPrimeGreaterThan(630) == 631\n  firstPrimeGreaterThan(640) == 641\n  firstPrimeGreaterThan(650) == 651\n  firstPrimeGreaterThan(660) == 661\n  firstPrimeGreaterThan(670) == 671\n  firstPrimeGreaterThan(680) == 681\n  firstPrimeGreaterThan(690) == 691\n  firstPrimeGreaterThan(700) == 701\n  firstPrimeGreaterThan(710) == 711\n  firstPrimeGreaterThan(720) == 721\n  firstPrimeGreaterThan(730) == 731\n  firstPrimeGreaterThan(740) == 741\n  firstPrimeGreaterThan(750) == 751\n  firstPrimeGreaterThan(760) == 761\n  firstPrimeGreaterThan(770) == 771\n  firstPrimeGreaterThan(780) == 781\n  firstPrimeGreaterThan(790) == 791\n  firstPrimeGreaterThan(800) == 801\n  firstPrimeGreaterThan(810) == 811\n  firstPrimeGreaterThan(820) == 821\n  firstPrimeGreaterThan(830) == 831\n  firstPrimeGreaterThan(840) == 841\n  firstPrimeGreaterThan(850) == 851\n  firstPrimeGreaterThan(860) == 861\n  firstPrimeGreaterThan(870) == 871\n  firstPrimeGreaterThan(880) == 881\n  firstPrimeGreaterThan(890) == 891\n  firstPrimeGreaterThan(900) == 901\n  firstPrimeGreaterThan(910) == 911\n  firstPrimeGreaterThan(920) == 921\n  firstPrimeGreaterThan(930) == 931\n  firstPrimeGreaterThan(940) == 941\n  firstPrimeGreaterThan(950) == 951\n  firstPrimeGreaterThan(960) == 961\n  firstPrimeGreaterThan(970) == 971\n  firstPrimeGreaterThan(980) == 981\n  firstPrimeGreaterThan(990) == 991\n  firstPrimeGreat"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j += i) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 1. */ const startsOne = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j += i) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that end with 1. */ const endsOne = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j += i) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 1 and end with 1. */ const startsAndEnds = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j += i) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 1 and end with 1. */ const startsAndEnds1 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j += i) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 1, end with 1, and start with 1. */ const startsAndEnds2 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j += i) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 1, end with 1, and start with 1. */ const startsAndEnds3 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j += i) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 1, end with 1, and end with 1. */ const startsAndEnds4 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j += i) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 1, end with 1, and start with 1. */ const startsAndEnds5 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j += i) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 1, end with 1, and end with 1. */ const startsAndEnds6 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j += i) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 1, end with 1, and start with 1. */ const startsAndEnds7 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j += i) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 1, end with 1, and start with 1. */ const startsAndEnds8 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j += i) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 1, end with 1, and end with 1. */ const startsAndEnds9 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j += i) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 1, end with 1, and start with 1. */ const startsAndEnds10 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j += i) {\n      count += 1\n    }\n  }\n  return count\n}\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let result = '';\n  for (let i = N; i >= 1; i--) {\n    result += (i % 2)? '1' : '0';\n  }\n  return result;\n};\n\n/*\n  1. Write a function sumDigits() that takes an integer N and returns the sum of the digits of N in binary.\n  2. If N is negative, sumDigits() should return the binary number with 0 in the first position and 1 in the last position.\n  3. If N is 0, sumDigits() should return \"0\".\n  4. If N is 1, sumDigits() should return \"1\".\n  5. If N is 9, sumDigits() should return \"101\".\n  6. If N is 10, sumDigits() should return \"11010\".\n  7. If N is 15, sumDigits() should return \"111100111100\".\n  8. If N is 99, sumDigits() should return}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let i = 0\n    while (i < lst.length - 1) {\n        if (lst[i] % 2 === 0) {\n            lst.push(lst[i + 1])\n            i++\n        } else {\n            i++\n        }\n    }\n    return lst\n}\n\nmodule.exports = add\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split('');\n  const shuffled = words.map((x) => {\n    let r = x.charCodeAt(0);\n    for (let i = 0; i < x.length; i++) {\n      r += Math.floor(Math.random() * x.length);\n      r -= x.length;\n    }\n    return String.fromCharCode(r);\n  });\n  return shuffled.join('');\n};\n\nconsole.log(antiShuffle('Hi'));\nconsole.log(antiShuffle('hello'));\nconsole.log(antiShuffle('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n    const length = lst.length;\n    let i = 0;\n    const result = [];\n    const rows = [...lst];\n    rows.sort((a, b) => a[0] - b[0]);\n    while (i < length) {\n        result.push(rows[i].slice(1));\n        i++;\n    }\n    return result;\n}\n\nconst getRowSorted = (lst, x) => {\n    const length = lst.length;\n    let i = 0;\n    const result = [];\n    const rows = [...lst];\n    while (i < length) {\n        result.push(rows[i].slice(1));\n        i++;\n    }\n    result.sort((a, b) => a[0] - b[0]);\n    return result;\n}\n\nconst getRow = (lst, x) => {\n    const length = lst.length;\n    let i = 0;\n    const result = [];\n    const rows = [...lst];\n    while (i < length) {\n        result.push(rows[i].slice(1));\n        i++;\n    }\n    return result;\n}\n\nconst getRowSorted = (lst, x) => {\n    const length = lst.length;\n    let i = 0;\n    const result = [];\n    const rows = [...lst];\n    while (i < length) {\n        result.push(rows[i].slice(1));\n        i++;\n    }\n    result.sort((a, b) => a[0] - b[0]);\n    return result;\n}\n\nconst getRow = (lst, x) => {\n    const length = lst.length;\n    let i = 0;\n    const result = [];\n    const rows = [...lst];\n    while (i < length) {\n        result.push(rows[i].slice(1));\n        i++;\n    }\n    return result;\n}\n\nconst getRowSorted = (lst, x) => {\n    const length = lst.length;\n    let i = 0;\n    const result = [];\n    const rows = [...lst];\n    while (i < length) {\n        result.push(rows[i].slice(1));\n        i++;\n    }\n    result.sort((a, b) => a[0] - b[0]);\n    return result;\n}\n\nconst getRow = (lst, x) => {\n    const length = lst.length;\n    let i = 0;\n    const result = [];\n    const rows = [...lst];\n    while (i < length) {\n        result.push(rows[i].slice(1));\n        i++;\n    }\n    return result;\n}\n\nconst getRowSorted = (lst, x) => {\n    const length = lst.length;\n    let i = 0;\n    const result = [];\n    const rows = [...lst];\n    while (i < length) {\n        result.push(rows[i].slice(1));\n        i++;\n    }\n    result.sort((a, b) => a[0] - b[0]);\n    return result;\n}\n\nconst getRow = (lst, x) => {\n    const length = lst.length;\n    let i = 0;\n    const result = [];\n    const rows = [...lst];\n    while (i < length) {\n        result.push(rows[i].slice(1));\n        i++;\n    }\n    return result;\n}\n\nconst getRowSorted = (lst, x) => {\n    const length = lst.length;\n    let i = 0;\n    const result = [];\n    const rows = [...lst];\n    while (i < length) {\n        result.push(rows[i].slice(1));\n        i++;\n    }\n    result.sort((a, b) => a[0] - b[0]);\n    return result;\n}\n\nconst getRow = (lst, x) => {\n    const length = lst.length;\n    let i = 0;\n    const result = [];\n    const rows = [...lst];\n    while (i < length) {\n        result.push(rows[i].slice(1));\n        i++;\n    }\n    return result;\n}\n\nconst getRowSorted = (lst, x) => {\n    const length = lst.length;\n    let i = 0;\n    const result = [];\n    const rows = [...lst];\n    while (i < length) {\n        result.push(rows[i].slice(1));\n        i++;\n    }\n    result.sort((a, b) => a[0] - b[0]);\n    return result;\n}\n\nconst getRow = (lst, x) => {\n    const length = lst.length;\n    let i = 0;\n    const result = [];\n    const rows = [...lst];\n    while (i < length) {\n        result.push(rows[i].slice(1));\n        i++;\n    }\n    return result;\n}\n\nconst getRowSorted = (lst, x) => {\n    const length = lst.length;\n    let i = 0;\n    const result = [];\n    const rows = [...l"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let arrayCopy = array.slice();\n  let sorted = arrayCopy.sort((a, b) => {\n    return (a + b) % 2 === 0? b - a : a - b;\n  });\n  return sorted;\n};\n\nmodule.exports = sortArray;<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let s = s.toLowerCase();\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const count = {};\n  for (let i = 0; i < alphabet.length; i++) {\n    count[alphabet[i]] = 0;\n  }\n\n  let count_letter = 0;\n  for (let i = 0; i < s.length; i++) {\n    count[s[i]] = count[s[i]] + 1;\n    count_letter = count_letter + 1;\n  }\n\n  let letter_counter = 0;\n  let enc_string = '';\n\n  while (count_letter < 26) {\n    enc_string += alphabet[letter_counter];\n    letter_counter++;\n  }\n\n  return enc_string;\n};\n\n/*\n  Create a function that takes a string and returns the reverse of the string.\n*/\nconst reverse = (s) => {\n  return s.split('').reverse().join('');\n};\n\nconst decrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let s = s.split('').reverse().join('');\n  let dec_string = '';\n\n  for (let i = 0; i < s.length; i++) {\n    let count = count[s[i]];\n    let letter_counter = 0;\n\n    while (count > 0) {\n      dec_string += alphabet[letter_counter];\n      letter_counter++;\n      count--;\n    }\n  }\n\n  return dec_string;\n};\n\nconst encrypt_decrypt = (s) => {\n  return encrypt(s) +'' + reverse(s);\n};\n\n/*\n  Create a function that takes a string as an argument and returns a string.\n  The string should be encrypted with the alphabets been rotating.\n*/\nconst encrypt_decrypt_rotate = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let enc_string = '';\n  let dec_string = '';\n\n  for (let i = 0; i < s.length; i++) {\n    let count = count[s[i]];\n    let letter_counter = 0;\n\n    while (count > 0) {\n      enc_string += alphabet[letter_counter];\n      dec_string += alphabet[letter_counter];\n      letter_counter++;\n      count--;\n    }\n  }\n\n  return enc_string +'' + reverse(dec_string);\n};\n\nconst enc_dec = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let enc_string = '';\n  let dec_string = '';\n\n  for (let i = 0; i < s.length; i++) {\n    let count = count[s[i]];\n    let letter_counter = 0;\n\n    while (count > 0) {\n      enc_string += alphabet[letter_counter];\n      dec_string += alphabet[letter_counter];\n      letter_counter++;\n      count--;\n    }\n  }\n\n  return enc_string +'' + reverse(dec_string);\n};\n\nmodule.exports = {\n  encrypt,\n  decrypt,\n  encrypt_decrypt,\n  encrypt_decrypt_rotate,\n  enc_dec\n};\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n    if (!lst) {\n        return null\n    }\n\n    const len = lst.length\n    let min = 1\n    for (let i = 0; i < len; i++) {\n        if (lst[i] < min) {\n            min = lst[i]\n        }\n    }\n    if (lst.length === 1) {\n        return min\n    }\n\n    let minPos = 0\n    for (let i = 1; i < len; i++) {\n        if (lst[i] === min) {\n            minPos = i\n            break\n        }\n    }\n    if (minPos === 0) {\n        return null\n    }\n\n    return lst[minPos - 1]\n}\n\nmodule.exports = nextSmallest\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(/[.,?!]/g)\n  let boredomCount = 0\n  words.forEach((w) => {\n    if (w.startsWith('I') && w.endsWith('.') || w.endsWith('?') || w.endsWith('!')) {\n      boredomCount += 1\n    }\n  })\n  return boredomCount\n}\n\n/*\n  Your task is to create a function that check if a given string is a valid word.\n  A valid word is a string that is longer than 2. For example:\n  >>> isWord(\"Hello\")\n  True\n  >>> isWord(\"Hello world\")\n  False\n  */\nconst isWord = (S) => {\n  return S.length > 2\n}\n\n/*\n  Your task is to count the number of unique words. For example:\n  >>> isUnique(\"Hello\")\n  True\n  >>> isUnique(\"Hello world\")\n  True\n  >>> isUnique(\"Hello world\")\n  False\n  */\nconst isUnique = (S) => {\n  const words = S.split(/[.,!@?&]/g)\n  let wordsCount = words.length\n  words.forEach((w) => {\n    if (words.indexOf(w) === -1) {\n      wordsCount += 1\n    }\n  })\n  return wordsCount === words.length\n}\n\n/*\n  Your task is to count the number of unique words. For example:\n  >>> isUnique(\"Hello\")\n  True\n  >>> isUnique(\"Hello world\")\n  True\n  >>> isUnique(\"Hello world\")\n  False\n  */\nconst isUnique2 = (S) => {\n  const words = S.split(/[.,!@?&]/g)\n  const wordsCount = words.length\n  words.forEach((w) => {\n    if (words.indexOf(w) === -1) {\n      wordsCount += 1\n    }\n  })\n  return wordsCount === words.length\n}\n\n/*\n  Your task is to count the number of unique words. For example:\n  >>> isUnique(\"Hello\")\n  True\n  >>> isUnique(\"Hello world\")\n  True\n  >>> isUnique(\"Hello world\")\n  False\n  */\nconst isUnique3 = (S) => {\n  const words = S.split(/[.,!@?&]/g)\n  const wordsCount = words.length\n  words.forEach((w) => {\n    if (words.indexOf(w) === -1) {\n      wordsCount += 1\n    }\n  })\n  return wordsCount === words.length\n}\n\n/*\n  Your task is to count the number of unique words. For example:\n  >>> isUnique(\"Hello\")\n  True\n  >>> isUnique(\"Hello world\")\n  True\n  >>> isUnique(\"Hello world\")\n  False\n  */\nconst isUnique4 = (S) => {\n  const words = S.split(/[.,!@?&]/g)\n  const wordsCount = words.length\n  words.forEach((w) => {\n    if (words.indexOf(w) === -1) {\n      wordsCount += 1\n    }\n  })\n  return wordsCount === words.length\n}\n\n/*\n  Your task is to count the number of unique words. For example:\n  >>> isUnique(\"Hello\")\n  True\n  >>> isUnique(\"Hello world\")\n  True\n  >>> isUnique(\"Hello world\")\n  False\n  */\nconst isUnique5 = (S) => {\n  const words = S.split(/[.,!@?&]/g)\n  const wordsCount = words.length\n  words.forEach((w) => {\n    if (words.indexOf(w) === -1) {\n      wordsCount += 1\n    }\n  })\n  return wordsCount === words.length\n}\n\n/*\n  Your task is to count the number of unique words. For example:\n  >>> isUnique(\"Hello\")\n  True\n  >>> isUnique(\"Hello world\")\n  True\n  >>> isUnique(\"Hello world\")\n  False\n  */\nconst isUnique6 = (S) => {\n  const words = S.split(/[.,!@?&]/g)\n  const wordsCount = words.length\n  words.forEach((w) => {\n    if (words.indexOf(w) === -1) {\n      wordsCount += 1\n    }\n  })\n  return wordsCount === words.length\n}\n\n/*\n  Your task is to count the number of unique words. For example:\n  >>> isUnique(\"Hello\")\n  True\n  >>> isUnique(\"Hello world\")\n  True\n  >>> isUnique(\"Hello world\")\n  False\n  */\nconst isUnique7 = (S) => {\n  const words = S.split(/[.,!@?&]/g)\n  const wordsCount = words.length\n  words.forEach((w) => {\n    if (words.indexOf(w) === -1) {\n      wordsCount += 1\n    }\n  })\n  return wordsCount === words.length\n}\n\n/*\n  Your task is to count the number of unique words. For example:\n  >>> isUnique(\"Hello\")\n  True\n  >>> isUnique(\"Hello world\")\n  True\n  >>> isUnique(\"Hello world\")\n  False\n  */\nconst isUnique8 = (S) => {\n  const words = S.split(/[.,!@?&]/g)\n  const wordsCount = words.length\n  words.forEach((w) => {\n    if (words.indexOf(w) === -1) {\n      wordsCount += 1\n    }\n  })\n  return wordsCount === words.length\n}\n\n/*\n  Your task is to count the number of unique words. For example:\n  >>> isUnique(\"Hello\")\n  True\n  >>> isUnique(\"Hello world\")\n  True\n  >>> isUnique(\"Hello world\")\n  False\n  */\nconst isUnique9 = (S) => {\n  const words = S."}
{"task_id": "JavaScript/92", "prompt": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return ((x % 1 === 0) && (y % 1 === 0) && (z % 1 === 0)) || (x + y === z) || (x + z === y) || (y + z === x);\n};\n\nconsole.log(anyInt(2, 1, 3));\nconsole.log(anyInt(3, 2, 2));\nconsole.log(anyInt(3.6, -2.2, 2));<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const regex = /[aeiou]/g\n  const vowels = [\n    'AE', 'A', 'O', 'U', 'E', 'I', 'H', 'Y', 'W', 'F', 'T', 'P', 'S', 'K', 'J', 'X', 'Z', 'D', 'G', 'Q', 'R', 'M', 'N', 'C', 'V', 'H', 'L', 'Y', 'K', 'G', 'H', 'J', 'O', 'P', 'M', 'X', 'Z', 'I', 'T', 'W', 'Y'\n  ]\n  const vowelsCount = vowels.map((v) => vowels.indexOf(v)).reduce((acc, x) => acc + (x > 0), 0)\n  return message.replace(regex, (m) => {\n    const vowels = vowels.slice(vowelsCount)\n    return vowels.indexOf(m) > 0? vowels[vowels.indexOf(m) - 1] : m\n  })\n}\n\n/*\n  A function that takes a message, and decodes in such a way that it swaps all vowels of the message, with the letter that appears 2 place behind that vowel in the english alphabets. Assume only letters.\n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('TKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  const regex = /[aeiou]/g\n  const vowels = [\n    'AE', 'A', 'O', 'U', 'E', 'I', 'H', 'Y', 'W', 'F', 'T', 'P', 'S', 'K', 'J', 'X', 'Z', 'D', 'G', 'Q', 'R', 'M', 'N', 'C', 'V', 'H', 'L', 'Y', 'K', 'G', 'H', 'J', 'O', 'P', 'M', 'X', 'Z', 'I', 'T', 'W', 'Y'\n  ]\n  return message.replace(regex, (m) => {\n    const vowels = vowels.slice(vowels.indexOf(m))\n    return vowels.length > 0? vowels[0] : m\n  })\n}\n\nmodule.exports = { encode, decode }\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let a = []\n    for (let i = 0; i < lst.length; i++) {\n        a.push(lst[i])\n    }\n    const sorted = a.sort()\n    const n = sorted.pop()\n    let sum = 0\n    for (let i = 0; i < sorted.length; i++) {\n        sum += sorted[i]\n    }\n    return sum\n}\n\nconst solution = (lst) => {\n    const sorted = lst.sort()\n    const n = sorted.pop()\n    let sum = 0\n    for (let i = 0; i < sorted.length; i++) {\n        sum += sorted[i]\n    }\n    return sum\n}\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))\nconsole.log(solution([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))\nconsole.log(solution([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))\nconsole.log(solution([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))\nconsole.log(solution([0,81,12,3,1,21]))\nconsole.log(solution([0,8,1,2,1,7]))\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n    let allKeys = Object.keys(dict);\n    let result = true;\n    for (let i = 0; i < allKeys.length; i++) {\n        if (typeof dict[allKeys[i]] === \"string\" && dict[allKeys[i].toUpperCase()] === undefined) {\n            result = false;\n            break;\n        } else if (typeof dict[allKeys[i]] === \"string\" && dict[allKeys[i].toLowerCase()] === undefined) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n};\n\n/*\n  Function: checkDictKeyCase\n  Check dictionary key case.\n  The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictKeyCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictKeyCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictKeyCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictKeyCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictKeyCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictKeyCase = (dict) => {\n    let allKeys = Object.keys(dict);\n    let result = true;\n    for (let i = 0; i < allKeys.length; i++) {\n        if (typeof dict[allKeys[i]] === \"string\" && dict[allKeys[i].toUpperCase()] === undefined) {\n            result = false;\n            break;\n        } else if (typeof dict[allKeys[i]] === \"string\" && dict[allKeys[i].toLowerCase()] === undefined) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n};\n\n/*\n  Function: checkDictValueCase\n  Check dictionary value case.\n  The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictValueCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictValueCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictValueCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictValueCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictValueCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictValueCase = (dict) => {\n    let allKeys = Object.keys(dict);\n    let result = true;\n    for (let i = 0; i < allKeys.length; i++) {\n        if (typeof dict[allKeys[i]] === \"string\" && dict[allKeys[i].toUpperCase()] === undefined) {\n            result = false;\n            break;\n        } else if (typeof dict[allKeys[i]] === \"string\" && dict[allKeys[i].toLowerCase()] === undefined) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n};\n\n/*\n  Function: checkDictValueLength\n  Check dictionary value length.\n  The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictValueLength({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictValueLength({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictValueLength({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictValueLength({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictValueLength({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictValueLength = (dict) => {\n    let allKeys = Object.keys(dict);\n    let result = true;\n    for (let i = 0; i < allKeys.length; i++) {\n        if (typeof dict[allKeys[i]] === \"string\" && dict[allKeys[i].toUpperCase()].length > 0 && dict[allKeys[i].toLowerCase()].length > 0) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n};\n\n/*\n  Function: checkDictValueAll\n  Check dictionary value case.\n  The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictValueAll({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictValueAll({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictValueAll({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictValueAll({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictValueAll({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictValueAll = (dict) => {\n    let allKeys = Object.keys(dict);\n    let result = true;\n    for (let i = 0; i < allKeys.length; i++) {\n        if (typeof dict[all"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  for (let i = 0; i <= n; i++) {\n    const isPrime = primeFinder.isPrime(i);\n    if (isPrime) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst primeFinder = primeFinderFactory();\n\nconsole.log(countUpTo(5)); // [2,3]\nconsole.log(countUpTo(11)); // [2,3,5,7]\nconsole.log(countUpTo(0)); // []\nconsole.log(countUpTo(20)); // [2,3,5,7,11,13,17,19]\nconsole.log(countUpTo(1)); // []\nconsole.log(countUpTo(18)); // [2,3,5,7,11,13,17]\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  return a > 0?\n    (a % 10 > 0? a % 10 * b : 0) +\n    (a / 10 > 0? multiply(a / 10, b) : 0) :\n    (a % 10 < 0? a % 10 * b : 0) +\n    (a / 10 < 0? multiply(a / 10, b) : 0);\n};\n\nconsole.log(multiply(9, 10));\nconsole.log(multiply(14, 15));\nconsole.log(multiply(19, 28));\nconsole.log(multiply(20, 1851));\nconsole.log(multiply(14, -15));\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let upper = 0;\n  let i = 0;\n  \n  while (i < s.length) {\n    if (s[i] === s[i].toUpperCase()) {\n      upper++;\n    }\n    i++;\n  }\n  \n  return upper;\n};\n\nconsole.log(countUpper('aBCdEf'));\nconsole.log(countUpper('abcdefg'));\nconsole.log(countUpper('dBBE'));<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = Number(value);\n  let numInt = Math.floor(num);\n  let numFract = Math.abs(num - numInt);\n  let roundInt = (Math.abs(numInt) + Math.abs(numFract)) / 2;\n  if (numFract > 0.5) {\n    roundInt++;\n  }\n  return roundInt;\n};\n\nexport {closestInteger};\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(Math.pow(2, i));\n  }\n  return pile;\n}\n\nmodule.exports = makeAPile;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const str = s.trim()\n  const words = str.split(' ')\n  return words\n}\n\n/*\n  Your task is to create an object that will contains an array of all the word in the string.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsObject = (s) => {\n  const str = s.trim()\n  const words = str.split(' ')\n  return words\n}\n\nconst wordsArray = (s) => {\n  const str = s.trim()\n  const words = str.split(' ')\n  return words\n}\n\nmodule.exports = {\n  wordsString,\n  wordsObject,\n  wordsArray\n}\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) return -1;\n  const range = y - x + 1;\n  const nums = Array.from({length: range}, (v, i) => x + i);\n  return nums.find(v => v % 2 === 0);\n}\n\n// console.log(chooseNum(12, 15));\n\n/*\n  This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n*/\nconst chooseNumOdd = (x, y) => {\n  if (x > y) return -1;\n  const range = y - x + 1;\n  const nums = Array.from({length: range}, (v, i) => x + i);\n  return nums.find(v => v % 2 === 1);\n}\n\n// console.log(chooseNumOdd(12, 15));\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0, halfSum = 0, nn = n, mm = m;\n  while (nn >= 0 && mm >= 0) {\n    sum += nn--;\n    halfSum += mm--;\n  }\n  if (nn > 0) sum = (sum + (nn + 1)) / 2;\n  if (mm > 0) halfSum = (halfSum + (mm + 1)) / 2;\n  return halfSum > sum? -1 : `0b${halfSum.toString(2)}${halfSum.toString(2)}`;\n};\n\n/*\n  Round the number to the nearest integer and convert to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n*/\nconst roundedAvg2 = (n, m) => {\n  let halfSum = 0;\n  while (n > 0 && m > 0) {\n    halfSum += n--;\n    halfSum += m--;\n  }\n  return halfSum > n? -1 : `0b${halfSum.toString(2)}${halfSum.toString(2)}`;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const sorted = x.sort();\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] % 2 === 0) {\n      result.push(sorted[i]);\n    }\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  arr = arr.filter((x) => x.length > 0)\n  arr.sort((a, b) => {\n    return a.length - b.length\n  })\n  arr.reverse()\n  let names = []\n  for (let x of arr) {\n    names.push(x.toString())\n  }\n  return names\n}\n\n// let names = byLength(arr)\n// console.log(names)\n\n// By using the map method\nconst byLengthMap = (arr) => {\n  return arr.map((x) => x.toString()).sort()\n}\n\nconsole.log(byLengthMap([1, 2, 3, 4, 5, 8, 2, 3]))\n\n// by using the reduce method\nconst byLengthReduce = (arr) => {\n  return arr.reduce((a, b) => {\n    return a.concat(b)\n  }, [])\n}\n\nconsole.log(byLengthReduce([1, 2, 3, 4, 5, 8, 2, 3]))\n\n// by using the forEach method\nconst byLengthForEach = (arr) => {\n  arr.forEach((x) => {\n    x.length = x.toString()\n  })\n  return arr\n}\n\nconsole.log(byLengthForEach([1, 2, 3, 4, 5, 8, 2, 3]))<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    } else {\n      res.push(i);\n      res.push(Math.pow(i, 2));\n      res.push(Math.pow(i, 3));\n      res.push(Math.pow(i, 4));\n    }\n  }\n  return res;\n}\n\n/*\n  Implements the function g that takes n as a parameter and returns the sum of all the numbers from 1 to n\n  Example:\n  g(3) == 6\n  */\nconst g = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\n/*\n  Implements the function h that takes n as a parameter and returns the sum of all the numbers from 1 to n\n  Example:\n  h(3) == 3\n  */\nconst h = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n}\n\n/*\n  Implements the function i that takes n as a parameter and returns the sum of all the numbers from 1 to n\n  Example:\n  i(3) == 6\n  */\nconst i = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (i % 2!== 0) {\n      sum += i;\n    }\n  }\n  return sum;\n}\n\n/*\n  Implements the function j that takes n as a parameter and returns the sum of all the numbers from 1 to n\n  Example:\n  j(3) == 2\n  */\nconst j = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (i % 2 === 0) {\n      sum += i;\n    }\n    if (i % 3 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n}\n\n/*\n  Implements the function k that takes n as a parameter and returns the sum of all the numbers from 1 to n\n  Example:\n  k(3) == 2\n  */\nconst k = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (i % 2 === 0) {\n      sum += i;\n    }\n    if (i % 3 === 0) {\n      sum += i;\n    }\n    if (i % 5 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n}\n\n/*\n  Implements the function l that takes n as a parameter and returns the sum of all the numbers from 1 to n\n  Example:\n  l(3) == 6\n  */\nconst l = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (i % 2 === 0) {\n      sum += i;\n    }\n    if (i % 3 === 0) {\n      sum += i;\n    }\n    if (i % 5 === 0) {\n      sum += i;\n    }\n    if (i % 7 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n}\n\n/*\n  Implements the function m that takes n as a parameter and returns the sum of all the numbers from 1 to n\n  Example:\n  m(3) == 3\n  */\nconst m = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (i % 2 === 0) {\n      sum += i;\n    }\n    if (i % 3 === 0) {\n      sum += i;\n    }\n    if (i % 5 === 0) {\n      sum += i;\n    }\n    if (i % 7 === 0) {\n      sum += i;\n    }\n    if (i % 11 === 0) {\n      sum += i;\n    }\n    if (i % 13 === 0) {\n      sum += i;\n    }\n    if (i % 17 === 0) {\n      sum += i;\n    }\n    if (i % 19 === 0) {\n      sum += i;\n    }\n    if (i % 23 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n}\n\n/*\n  Implements the function n that takes n as a parameter and returns the sum of all the numbers from 1 to n\n  Example:\n  n(3) == 2\n  */\nconst n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (i % 2 === 0) {\n      sum += i;\n    }\n    if (i % 3 === 0) {\n      sum += i;\n    }\n    if (i % 5 === 0) {\n      sum += i;\n    }\n    if (i % 7 === 0) {\n      sum += i;\n    }\n    if (i % 11 === 0) {\n      sum += i;\n    }\n    if (i % 13 === 0) {\n      sum += i;\n    }\n    if (i % 17 === 0) {\n      sum += i;\n    }\n    if (i % 19 === 0) {\n      sum += i;\n    }\n    if (i % 23 === 0) {\n      sum += i;\n"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const odd = [];\n  const even = [];\n  for (let i = 1; i <= n; i++) {\n    let evenOrOdd = Math.floor(Math.random() * 2);\n    if (evenOrOdd === 1) {\n      even.push(i);\n    } else {\n      odd.push(i);\n    }\n  }\n  return (even.length, odd.length);\n};\n\nmodule.exports = evenOddPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n    let c = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) c++;\n    }\n    return c;\n};\n\n/*\n  Returns the sum of the numbers in the array.\n  >>> sum( [])\n  >>> sum([1,1,2])\n  >>> sum([1,2,3])\n  */\nconst sum = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n};\n\n/*\n  Returns the difference between the two numbers.\n  >>> difference( [])\n  >>> difference([1,2,3])\n  >>> difference([1,2,5])\n  */\nconst difference = (arr) => {\n    let diff = 0;\n    for (let i = 0; i < arr.length; i++) {\n        diff += arr[i];\n    }\n    return diff;\n};\n\n/*\n  Returns the product of the numbers in the array.\n  >>> product([])\n  >>> product([1,1,2])\n  >>> product([1,2,3])\n  */\nconst product = (arr) => {\n    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        product *= arr[i];\n    }\n    return product;\n};\n\n/*\n  Returns the average of the numbers in the array.\n  >>> average([])\n  >>> average([1,2,3])\n  >>> average([1,2,5])\n  */\nconst average = (arr) => {\n    let average = sum(arr) / arr.length;\n    return average;\n};\n\n/*\n  Returns the median of the numbers in the array.\n  >>> median([])\n  >>> median([1,2,3])\n  >>> median([1,2,5])\n  */\nconst median = (arr) => {\n    if (arr.length % 2 === 0) {\n        let middle = Math.floor(arr.length / 2);\n        return (arr[middle] + arr[middle - 1]) / 2;\n    } else {\n        return arr[Math.floor(arr.length / 2)];\n    }\n};\n\n/*\n  Returns the mode of the numbers in the array.\n  >>> mode([])\n  >>> mode([1,2,3])\n  >>> mode([1,2,5])\n  */\nconst mode = (arr) => {\n    let mode = arr[0];\n    let modeCount = 1;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] === mode) {\n            modeCount++;\n        } else if (arr[i] === mode) {\n            modeCount--;\n        }\n    }\n    if (modeCount === 0) {\n        return mode;\n    } else {\n        return mode;\n    }\n};\n\n/*\n  Returns the standard deviation of the numbers in the array.\n  >>> standardDeviation([])\n  >>> standardDeviation([1,2,3])\n  >>> standardDeviation([1,2,5])\n  */\nconst standardDeviation = (arr) => {\n    let avg = average(arr);\n    let sumSquared = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sumSquared += Math.pow(arr[i] - avg, 2);\n    }\n    return Math.sqrt(sumSquared / arr.length);\n};\n\n/*\n  Returns the sum of the squares of the numbers in the array.\n  >>> sumSquared([])\n  >>> sumSquared([1,2,3])\n  >>> sumSquared([1,2,5])\n  */\nconst sumSquared = (arr) => {\n    let sumSquared = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sumSquared += Math.pow(arr[i], 2);\n    }\n    return sumSquared;\n};\n\n/*\n  Returns the geometric mean of the numbers in the array.\n  >>> geometricMean([])\n  >>> geometricMean([1,2,3])\n  >>> geometricMean([1,2,5])\n  */\nconst geometricMean = (arr) => {\n    let sum = sum(arr);\n    let product = product(arr);\n    return sum / product;\n};\n\n/*\n  Returns the harmonic mean of the numbers in the array.\n  >>> harmonicMean([])\n  >>> harmonicMean([1,2,3])\n  >>> harmonicMean([1,2,5])\n  */\nconst harmonicMean = (arr) => {\n    let sum = sum(arr);\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        prod *= arr[i];\n    }\n    return sum / prod;\n};\n\n/*\n  Returns the logarithm of the mean of the numbers in the array.\n  >>> logarithmMean([])\n  >>> logarithmMean([1,2,3])\n  >>> logarithmMean([1,2,5])\n  */\nconst logarithmMean = (arr) => {\n    let avg = average(arr);\n    let logAvg = Math.log(avg);\n    let sum = sum(arr);\n    let sumSquared = sumSquared(arr);\n    let sumLog = Math.log(sum);\n    let sumLogSquared = sumLogSquared(arr);\n    let sumLogProd = sumLog * sum;\n    let sumLogSumSquared = sumLog * sumSquared;\n    return (sumLogProd + sumLogSquared - sumLogSumSquared) / sumLog;\n};\n\n/*\n  Returns the arithmetic mean of the numbers in the array.\n  >>> arithmeticMean([])\n  >>>"}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_2 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_3 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_4 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_5 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_6 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_7 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_8 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_9 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_10 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_11 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_12 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_13 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_14 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_15 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_16 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_17 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_18 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_19 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_20 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_21 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_22 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_23 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_24 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_25 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_26 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_27 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_28 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_29 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_30 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_31 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_32 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_33 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_34 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_35 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_36 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_37 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_38 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall_39 = (arr) => {\n  // write your code here\n  return arr.length === 0;\n};\n\nconst moveOneBall"}
{"task_id": "JavaScript/110", "prompt": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (!lst1.length ||!lst2.length) return 'NO';\n\n  let result = [],\n      i = 0,\n      j = 0,\n      k = 0;\n\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] < lst2[j]) {\n      result.push(lst1[i]);\n      i++;\n    } else if (lst1[i] > lst2[j]) {\n      result.push(lst2[j]);\n      j++;\n    } else {\n      result.push(lst1[i]);\n      i++;\n      j++;\n    }\n  }\n  if (i < lst1.length) result.push(...lst1.slice(i));\n  if (j < lst2.length) result.push(...lst2.slice(j));\n  return result.every(x => x % 2 === 0)? 'YES' : 'NO';\n};\n\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 4, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n    //console.log(`histogram(${test})`)\n    let histogram = {}\n    let counts = {}\n    let chars = test.split('')\n    chars.forEach((char) => {\n        if(!counts.hasOwnProperty(char)) {\n            counts[char] = 0\n        }\n        counts[char] += 1\n    })\n    for(let i in counts) {\n        if(counts.hasOwnProperty(i)) {\n            histogram[i] = counts[i]\n        }\n    }\n    return histogram\n}\n\n// console.log(histogram('a b c'))\n// console.log(histogram('a b b a'))\n// console.log(histogram('b b b b a'))\n// console.log(histogram(''))\n\nconst isValid = (test) => {\n    if(test.length == 0) {\n        return true\n    }\n    return histogram(test).hasOwnProperty(test[0])\n}\n\n// console.log(isValid('a b c'))\n// console.log(isValid('a b b a'))\n// console.log(isValid('b b b b a'))\n// console.log(isValid(''))<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = s\n  c.forEach((c, i) => {\n    if (s.indexOf(c)!== -1) {\n      s = s.replace(c, '')\n    }\n  })\n  return [s, s.length === 0]\n}\n\n// console.log(reverseDelete('abcde', 'ae'))\n// console.log(reverseDelete('abcdef', 'b'))\n// console.log(reverseDelete('abcdedcba', 'ab'))\n\nmodule.exports = reverseDelete\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const count = lst.length\n  const res = []\n  for (let i = 0; i < count; i += 1) {\n    const odd = count - i\n    const even = i\n    const result = count - odd + even\n    res.push(`the number of odd elements ${odd} the str${odd} of the ${odd}put.`)\n  }\n  return res\n}\n\nexport { oddCount }\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < nums.length; i++) {\n    sum = 0;\n    for (let j = i; j < nums.length; j++) {\n      sum += nums[j];\n      if (sum < minSum) {\n        minSum = sum;\n        minIndex = j;\n      }\n    }\n  }\n  return minSum;\n};\n\nconst main = () => {\n  const nums = [2, 3, 4, 1, 2, 4];\n  console.log(minSubArraySum(nums));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  // grid[i][j] -> 0 | 1\n  const [rows, cols] = grid.length;\n  let [i, j] = 0;\n  \n  let count = 0;\n  while (i < rows && j < cols) {\n    if (grid[i][j] === 1) {\n      count++;\n      j++;\n    } else {\n      i++;\n      j = 0;\n    }\n  }\n\n  return count;\n};\n\nexport default maxFill;\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const binaryStr = arr.map((num) => num.toString(2)).join('')\n  const length = binaryStr.length\n  const binaryArr = binaryStr.split('').sort((a, b) => b.length - a.length)\n  return binaryArr.map((digit) => parseInt(digit, 2))\n}\n\nexport {sortArray}\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n    let res = [];\n    let temp = [];\n    let word = [];\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char ==='') {\n            if (temp.length > 0) {\n                res.push(word.join(\"\"));\n                word = [];\n                temp = [];\n            }\n            continue;\n        }\n        if (char.match(/^[a-zA-Z]+$/)) {\n            word.push(char);\n        } else {\n            temp.push(char);\n        }\n    }\n    if (temp.length > 0) {\n        res.push(word.join(\"\"));\n    }\n    return res.filter((v) => {\n        return v.length === n;\n    });\n};\n\nconst wordCount = (s) => {\n    let res = 0;\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char ==='') {\n            continue;\n        }\n        if (char.match(/^[a-zA-Z]+$/)) {\n            res += 1;\n        }\n    }\n    return res;\n};\n\nconsole.log(selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\nconsole.log(selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\"]\nconsole.log(selectWords(\"simple white space\", 2)); // []\nconsole.log(selectWords(\"Hello world\", 4)); // [\"world\"]\nconsole.log(selectWords(\"Uncle sam\", 3)); // [\"Uncle\"]\nconsole.log(wordCount(\"Mary had a little lamb\")); // 4\nconsole.log(wordCount(\"Uncle sam\")); // 2\nconsole.log(wordCount(\"simple white space\")); // 0\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let wordArray = word.split(\"\");\n  let vowelArray = [];\n  let consonantArray = [];\n  let start = 0;\n  let end = wordArray.length - 1;\n  while (start <= end) {\n    if (isVowel(wordArray[start])) {\n      vowelArray.push(wordArray[start]);\n      start++;\n    } else if (isConsonant(wordArray[end])) {\n      consonantArray.push(wordArray[end]);\n      end--;\n    } else {\n      break;\n    }\n  }\n  return vowelArray.length === 0? consonantArray.join(\"\") : vowelArray.join(\"\");\n}\n\nconst isVowel = (letter) => {\n  return [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"].indexOf(letter)!== -1;\n}\n\nconst isConsonant = (letter) => {\n  return [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"].indexOf(letter)!== -1;\n}\n\n/*\n  You was gives a word. Your task is to find the closest consonant that stands between two vowel that stand between two consonant.\n  Vowel in the beginning and end doesn't count. Return the closest consonant of the given word.\n  You may assume that the given word contains English letter only.\n  Example:\n  getClosestConsonant(\"yogurt\") ==> \"w\"\n  getClosestConsonant(\"FULL\") ==> \"W\"\n  getClosestConsonant(\"quick\") ==> \"k\"\n  getClosestConsonant(\"ab\") ==> \"a\"\n  */\nconst getClosestConsonant = (word) => {\n  let wordArray = word.split(\"\");\n  let vowelArray = [];\n  let consonantArray = [];\n  let start = 0;\n  let end = wordArray.length - 1;\n  while (start <= end) {\n    if (isVowel(wordArray[start])) {\n      vowelArray.push(wordArray[start]);\n      start++;\n    } else if (isConsonant(wordArray[end])) {\n      consonantArray.push(wordArray[end]);\n      end--;\n    } else {\n      break;\n    }\n  }\n  return consonantArray.length === 0? wordArray[0] : consonantArray[0];\n}\n\nexport { getClosestVowel, getClosestConsonant };\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let isBalanced = false\n  let count = 0\n  let result = false\n\n  if (lst.length === 0) return result\n\n  while (lst[count] === '(') {\n    count++\n    isBalanced = false\n  }\n\n  while (lst[count] === ')') {\n    if (isBalanced) {\n      count++\n      isBalanced = false\n    } else {\n      count--\n      isBalanced = true\n    }\n  }\n\n  if (isBalanced) {\n    result = true\n  }\n\n  return result\n}\n\nmodule.exports = matchParens\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  // Create a new array of length k\n  const arr_k = arr.slice(0, k);\n  // Return the array if the array is sorted\n  if (arr_k.every((v) => v >= 0)) {\n    return arr_k;\n  }\n  // Create a new array of length k + 1\n  const arr_k_plus_1 = arr_k.concat([0]);\n  // Sort the array and remove the largest number\n  arr_k_plus_1.sort((a, b) => a - b);\n  // Return the new array\n  return arr_k_plus_1;\n};\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const odd = lst.slice(0);\n  const even = lst.slice(1);\n  const oddSums = odd.reduce((acc, elem) => acc + elem, 0);\n  const evenSums = even.reduce((acc, elem) => acc + elem, 0);\n  return oddSums + evenSums;\n};\n\nexport default solution;<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const n = arr.length\n  const sums = []\n\n  for (let i = 0; i < n; i++) {\n    if (i >= k) {\n      sums.push(arr[i])\n    }\n  }\n\n  return sum(sums)\n}\n\nconst sum = (arr) => {\n  const s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n  }\n  return s\n}\n\nconsole.log(addElements([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let oddNumbers = []\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddNumbers.push(n)\n      n = n / 2\n    } else {\n      n = (3 * n) + 1\n    }\n  }\n  return oddNumbers\n}\n\nconst getOddCollatz2 = (n) => {\n  let oddNumbers = []\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddNumbers.push(n)\n      n = n / 2\n    } else {\n      n = (n / 3) * 3 + 1\n    }\n  }\n  return oddNumbers\n}\n\nconst getOddCollatz3 = (n) => {\n  let oddNumbers = []\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddNumbers.push(n)\n      n = n / 2\n    } else {\n      n = n * 3 + 1\n    }\n  }\n  return oddNumbers\n}\n\nconst getOddCollatz4 = (n) => {\n  let oddNumbers = []\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddNumbers.push(n)\n      n = n / 2\n    } else {\n      n = (n / 3) * 3 + 1\n    }\n  }\n  return oddNumbers\n}\n\nconst getOddCollatz5 = (n) => {\n  let oddNumbers = []\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddNumbers.push(n)\n      n = n / 2\n    } else {\n      n = (n / 3) * 3 + 1\n    }\n  }\n  return oddNumbers\n}\n\nconst getOddCollatz6 = (n) => {\n  let oddNumbers = []\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddNumbers.push(n)\n      n = n / 2\n    } else {\n      n = (n * 3 + 1) / 3\n    }\n  }\n  return oddNumbers\n}\n\nconst getOddCollatz7 = (n) => {\n  let oddNumbers = []\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddNumbers.push(n)\n      n = n / 2\n    } else {\n      n = ((n * 5) + 1) / 5\n    }\n  }\n  return oddNumbers\n}\n\nconst getOddCollatz8 = (n) => {\n  let oddNumbers = []\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddNumbers.push(n)\n      n = n / 2\n    } else {\n      n = ((n * 3) + 1) / 3\n    }\n  }\n  return oddNumbers\n}\n\nconst getOddCollatz9 = (n) => {\n  let oddNumbers = []\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddNumbers.push(n)\n      n = n / 2\n    } else {\n      n = ((n * 5) + 1) / 5\n    }\n  }\n  return oddNumbers\n}\n\nconst getOddCollatz10 = (n) => {\n  let oddNumbers = []\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddNumbers.push(n)\n      n = n / 2\n    } else {\n      n = ((n * 3) + 1) / 3\n    }\n  }\n  return oddNumbers\n}\n\nconst getOddCollatz11 = (n) => {\n  let oddNumbers = []\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddNumbers.push(n)\n      n = n / 2\n    } else {\n      n = ((n * 5) + 1) / 5\n    }\n  }\n  return oddNumbers\n}\n\nconst getOddCollatz12 = (n) => {\n  let oddNumbers = []\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddNumbers.push(n)\n      n = n / 2\n    } else {\n      n = ((n * 3) + 1) / 3\n    }\n  }\n  return oddNumbers\n}\n\nconst getOddCollatz13 = (n) => {\n  let oddNumbers = []\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddNumbers.push(n)\n      n = n / 2\n    } else {\n      n = ((n * 5) + 1) / 5\n    }\n  }\n  return oddNumbers\n}\n\nconst getOddCollatz14 = (n) => {\n  let oddNumbers = []\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddNumbers.push(n)\n      n = n / 2\n    } else {\n      n = ((n * 3) + 1) / 3\n    }\n  }\n  return oddNumbers\n}\n\nconst getOddCollatz15 = (n) => {\n  let oddNumbers = []\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddNumbers.push(n)\n      n = n / 2\n    } else {\n      n = ((n * 5) + 1) / 5\n    }\n  }\n  return oddNumbers\n}\n\nconst getO"}
{"task_id": "JavaScript/124", "prompt": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n    if (!date ||!date.length) return false\n    const reg = /^\\d{2}-\\d{2}-\\d{4}$/\n    const reg2 = /^\\d{2}-\\d{2}-\\d{2}$/\n    const reg3 = /^\\d{2}-\\d{2}$/\n    const reg4 = /^\\d{2}$/\n    const reg5 = /^\\d{4}-\\d{2}-\\d{2}$/\n    const reg6 = /^\\d{4}-\\d{2}$/\n    const reg7 = /^\\d{4}$/\n    const reg8 = /^\\d{1,2}$/\n    if (reg.test(date)) {\n        return true\n    } else if (reg2.test(date)) {\n        return true\n    } else if (reg3.test(date)) {\n        return true\n    } else if (reg4.test(date)) {\n        return true\n    } else if (reg5.test(date)) {\n        return true\n    } else if (reg6.test(date)) {\n        return true\n    } else if (reg7.test(date)) {\n        return true\n    } else if (reg8.test(date)) {\n        return true\n    } else {\n        return false\n    }\n}\n\nexport default {\n    validDate\n}<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n    const words = txt.split(/\\s+/);\n    const counts = words.map((word) => word.length).sort((a, b) => b - a);\n    const minLength = counts[0];\n    const maxLength = counts[counts.length - 1];\n    const length = counts.length;\n    const splitWord = (start, end) => {\n        let s = start;\n        let e = end;\n        while (s < e) {\n            while (s < e && counts[s] < minLength) {\n                s++;\n            }\n            if (s === e) break;\n            while (s < e && counts[e] < minLength) {\n                e--;\n            }\n            if (s === e) break;\n            const word = txt.slice(s, e);\n            if (word) {\n                return word;\n            }\n        }\n        return null;\n    };\n    let result = [];\n    let i = 0;\n    while (i < length) {\n        const s = splitWord(i, i + maxLength);\n        if (s) {\n            result.push(s);\n        }\n        i += maxLength;\n    }\n    if (result.length === 0) {\n        return [];\n    }\n    return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < prev) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted = (lst) => {\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < prev) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nmodule.exports = {\n  isSorted,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const length1 = interval1[1] - interval1[0]\n  const length2 = interval2[1] - interval2[0]\n\n  if (length1 <= 0 || length2 <= 0) {\n    return \"NO\"\n  }\n\n  if (interval1[0] < interval2[0]) {\n    return `NO`\n  }\n\n  if (interval1[1] > interval2[1]) {\n    return `NO`\n  }\n\n  const difference = interval1[1] - interval2[0]\n\n  if (Math.abs(difference) % 1 === 0) {\n    return `NO`\n  }\n\n  return `YES`\n}\n\nexport default intersection\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const signSum = arr.reduce((pre, curr) => pre + Math.sign(curr), 0)\n  const absSum = arr.reduce((pre, curr) => pre + Math.abs(curr), 0)\n  return signSum * absSum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n    let result = []\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[0].length; j++) {\n            if (i === 0 && j === 0) {\n                result.push(grid[i][j])\n            } else if (i > 0 && j === 0) {\n                result.push(grid[i][j])\n            } else if (i === 0 && j > 0) {\n                result.push(grid[i][j])\n            } else {\n                let row_result = []\n                row_result.push(grid[i][j])\n                let row_before = grid[i - 1]\n                let row_after = grid[i + 1]\n                let row_before_before = row_before[j - 1]\n                let row_after_before = row_after[j - 1]\n                let row_before_after = row_before[j + 1]\n                let row_after_after = row_after[j + 1]\n                if (row_before_after <= row_after_after) {\n                    row_result.push(row_before_after)\n                } else if (row_before_after > row_after_after) {\n                    row_result.push(row_after_after)\n                } else {\n                    row_result.push(row_before_before)\n                }\n                result = result.concat(row_result)\n            }\n        }\n    }\n    return result.sort((a, b) => {\n        if (a < b) return -1\n        if (a > b) return 1\n        return 0\n    })\n   .slice(0, k)\n}\n\nconst test = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nconsole.log(minPath(test, 3))\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n === 0) return []\n  return [1, 3, 2, 8]\n   .concat(tri(n - 1)\n     .concat(tri(n - 2)\n       .concat(tri(n + 1)))\n    )\n}\n\nexport default tri\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  var res = 1;\n  while (n) {\n    if (n % 2) {\n      res *= n;\n    }\n    n = Math.floor(n / 2);\n  }\n  return res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n    const stack = [],\n      index = 0;\n    while (index < string.length) {\n        const char = string[index];\n        if (char === '[') {\n            stack.push(char);\n        } else if (char === ']') {\n            const index1 = stack.pop();\n            if (index1 === '[') {\n                return true;\n            }\n        }\n        index++;\n    }\n    return stack.length === 0;\n};\n\n// TEST CODE\n// console.log(isNested('[[]]'));\n// console.log(isNested('[]]]]]]][[[[[[[]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[[][]]'));\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = (n) => Math.floor(n);\n  const floor = (n) => Math.ceil(n);\n  const ceiling = (n) => Math.floor(Math.ceil(n));\n  const sq = (n) => n*n;\n  const sqr = (n) => n*n*n;\n  return lst.map(sum).reduce((a,b) => sqr(a) + sq(b), 0);\n};\n\n//sumSquares([1,2,3]);\n//sumSquares([1,4,9]);\n//sumSquares([1,3,5,7]);\n//sumSquares([1.4,4.2,0]);\n//sumSquares([-2.4,1,1]);\n\n/*\n  Given two numbers, return the larger of the two.\n  Examples:\n  For a = [1,2] the output should be 2\n  For a = [3,2] the output should be 3\n  For a = [1,3] the output should be 3\n  For a = [1,1] the output should be 2\n  */\nconst max = (a,b) => a>b?a:b;\n\n//max([1,2]);\n//max([3,2]);\n//max([1,3]);\n//max([1,1]);\n\n/*\n  Given two numbers, return the smaller of the two.\n  Examples:\n  For a = [1,2] the output should be 1\n  For a = [3,2] the output should be 2\n  For a = [1,3] the output should be 1\n  For a = [1,1] the output should be 1\n  */\nconst min = (a,b) => a<b?a:b;\n\n//min([1,2]);\n//min([3,2]);\n//min([1,3]);\n//min([1,1]);\n\n/*\n  Given two lists, return the smaller of the two.\n  Examples:\n  For a = [1,2,3] and b = [3,2,1] the output should be [1,2,1]\n  For a = [3,2,1] and b = [1,2,3] the output should be [1,2,3]\n  For a = [3,2,1] and b = [1,2,3,4] the output should be [1,2,3]\n  */\nconst minList = (a,b) => {\n  if (a.length>b.length)\n    return a;\n  else\n    return b;\n};\n\n//minList([1,2,3],[3,2,1]);\n//minList([3,2,1],[1,2,3]);\n//minList([3,2,1],[1,2,3,4]);\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  return txt.length > 0 &&\n    txt.charAt(txt.length - 1).match(/[A-Za-z]/) &&\n   !txt.match(/\\b(a|an|the)\\b/);\n};\n\n/* Create a functions that returns trueer if the last character of a gives string is a number and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  return txt.length > 0 &&\n    txt.charAt(txt.length - 1).match(/\\d/);\n};\n\n/* Create a functions that returns trueer if the last character of a gives string is a letter or number and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetterOrANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetterOrANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterOrANumber = (txt) => {\n  return txt.length > 0 &&\n    txt.charAt(txt.length - 1).match(/[A-Za-z\\d]/);\n};\n\n/* Create a functions that returns trueer if the last character of a gives string is a letter or number and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetterOrANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetterOrANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterOrANumberOrALetter = (txt) => {\n  return txt.length > 0 &&\n    txt.charAt(txt.length - 1).match(/[A-Za-z\\d][A-Za-z]/);\n};\n\n/* Create a functions that returns trueer if the last character of a gives string is a letter or number and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetterOrANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetterOrANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterOrANumberOrALetterOrANumber = (txt) => {\n  return txt.length > 0 &&\n    txt.charAt(txt.length - 1).match(/[A-Za-z\\d][A-Za-z\\d][A-Za-z\\d]/);\n};\n\n/* Create a functions that returns trueer if the last character of a gives string is a letter or number and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetterOrANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetterOrANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterOrANumberOrALetterOrANumberOrALetter = (txt) => {\n  return txt.length > 0 &&\n    txt.charAt(txt.length - 1).match(/[A-Za-z\\d][A-Za-z\\d][A-Za-z\\d][A-Za-z\\d][A-Za-z\\d][A-Za-z\\d]/);\n};\n\n/* Create a functions that returns trueer if the last character of a gives string is a letter or number and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetterOrANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetterOrANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterOrANumberOrALetterOrANumberOrALetterOrANumber = (txt) => {\n  return txt.length > 0 &&\n    txt.charAt(txt.length - 1).match(/[A-Za-z\\d][A-Za-z\\d][A-Za-z\\d][A-Za-z\\d][A-Za-z\\d][A-Za-z\\d][A-Za-z\\d][A-Za-z\\d]/);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const result = arr.slice(0);\n  for (let i = 1; i < arr.length; i++) {\n    const el = arr[i];\n    const j = 0;\n    while (j < result.length - 1 && result[j] >= el) {\n      j++;\n    }\n    result.splice(j, 0, el);\n  }\n  return result.length === 0? -1 : result;\n};\n\nexport {\n  canArrange\n};\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const a = null\n  const b = null\n  const arr = lst.filter(v => v < 0 || v > 0)\n  if (arr.length === 0) {\n    return (a, b)\n  }\n  const arrMax = arr.sort(a => a)\n  const arrMin = arr.sort((a, b) => b - a)\n  if (arrMax.length === 0) {\n    return (a, b)\n  }\n  if (arrMin.length === 0) {\n    return (a, b)\n  }\n  return (arrMax[0], arrMin[0])\n}\n\nmodule.exports = largestSmallestIntegers\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is . or , compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n  if (a === b) return null\n  if (typeof a === \"number\" && typeof b === \"number\") return Math.abs(a - b) < 0.000001? a : b\n  if (typeof a === \"number\" && typeof b === \"string\") return a < b? a : b\n  if (typeof a === \"string\" && typeof b === \"number\") return b < a? b : a\n  if (typeof a === \"string\" && typeof b === \"string\") return a < b? a : b\n  return null\n}\n\n/*\n  Create a function that accepts an array and returns the largest value in the array\n  return null if there is no largest value in the array\n  Note: if there are two largest values, it returns the first one\n  e.g. max([3, 2, 1]) ➞ 3 max([3, 2, 1, 3]) ➞ 3 max([3, 2, 1, 2, 3]) ➞ 2 max([1, 2, 3, 4, 5, 6, 7, 8]) ➞ 8 */ const max = (arr) => {\n  let largest = -Infinity\n  for (let i = 0; i < arr.length; i++) {\n    const elem = arr[i]\n    if (elem > largest) largest = elem\n  }\n  return largest\n}\n\n/*\n  Create a function that accepts an array and returns the largest value in the array\n  return null if there is no largest value in the array\n  Note: if there are two largest values, it returns the first one\n  e.g. max([3, 2, 1]) ➞ 3 max([3, 2, 1, 3]) ➞ 3 max([3, 2, 1, 2, 3]) ➞ 2 max([1, 2, 3, 4, 5, 6, 7, 8]) ➞ 8 */ const min = (arr) => {\n  let smallest = Infinity\n  for (let i = 0; i < arr.length; i++) {\n    const elem = arr[i]\n    if (elem < smallest) smallest = elem\n  }\n  return smallest\n}\n\n/*\n  Create a function that accepts two values and returns the larger one\n  return null if they are equal\n  e.g. compareOne(\"1\", \"2\") ➞ 1 compareOne(\"1\", \"2\") ➞ 2 compareOne(\"1\", \"2.5\") ➞ 2.5 compareOne(\"1\", \"2.5\") ➞ 2.5 compareOne(\"1\", \"1\") ➞ 1 */ const compare = (a, b) => {\n  return compareOne(a, b)? compareOne(b, a)? b : a : a\n}\n\n/*\n  Create a function that accepts two values and returns the smaller one\n  return null if they are equal\n  e.g. compareOne(\"1\", \"2\") ➞ 1 compareOne(\"1\", \"2\") ➞ 2 compareOne(\"1\", \"2.5\") ➞ 2.5 compareOne(\"1\", \"2.5\") ➞ 2.5 compareOne(\"1\", \"1\") ➞ 1 */ const compareDesc = (a, b) => {\n  return compareOne(a, b)? compareOne(b, a)? b : a : a\n}\n\n/*\n  Create a function that returns the sum of all the values in the array\n  return null if the array is empty\n  e.g. sum([1, 2, 3, 4]) ➞ 10 sum([1, 2, 3]) ➞ 9 sum([1, 2]) ➞ 6 sum([1]) ➞ 1 */ const sum = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n/*\n  Create a function that returns the average of all the values in the array\n  return null if the array is empty\n  e.g. avg([1, 2, 3, 4]) ➞ 2.5 avg([1, 2, 3]) ➞ 2.0 avg([1]) ➞ 1 */ const avg = (arr) => {\n  if (arr.length === 0) return null\n  return sum(arr) / arr.length\n}\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const arr = [];\n  for (let i = 1; i < n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  if (arr.length === 4) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n * @param n\n * @returns {Boolean}\n *\n * @description\n * Evaluate whether the given number n is a perfect number\n *\n * Example\n * isPerfectNumber(1) == true\n * isPerfectNumber(2) == false\n * isPerfectNumber(3) == false\n * isPerfectNumber(4) == true\n * isPerfectNumber(5) == false\n * isPerfectNumber(6) == false\n * isPerfectNumber(7) == true\n * isPerfectNumber(8) == false\n * isPerfectNumber(9) == false\n * isPerfectNumber(10) == false\n * isPerfectNumber(100) == false\n * isPerfectNumber(1000) == false\n */\nconst isPerfectNumber = (n) => {\n  const arr = [];\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  if (arr.length === 1) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n * @param n\n * @returns {Boolean}\n *\n * @description\n * Evaluate whether the given number n is a palindrome\n *\n * Example\n * isPalindrome(2) == true\n * isPalindrome(12) == true\n * isPalindrome(123) == true\n * isPalindrome(132) == false\n * isPalindrome(1232) == false\n * isPalindrome(2212) == true\n */\nconst isPalindrome = (n) => {\n  let arr = [];\n  while (n) {\n    arr.push(n % 10);\n    n = n / 10;\n  }\n  arr.reverse();\n  if (arr.length === 2 && arr[0] === arr[1]) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n * @param n\n * @returns {Boolean}\n *\n * @description\n * Evaluate whether the given number n is a power of 2\n *\n * Example\n * isPowerOfTwo(2) == true\n * isPowerOfTwo(3) == false\n * isPowerOfTwo(4) == true\n */\nconst isPowerOfTwo = (n) => {\n  return (n > 0) && (n & (n - 1)) === 0;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  } else {\n    let i = 2;\n    while (i * i <= n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  }\n};\n\nconst isComposite = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isEqualToSumEven(i)) {\n      sum += i;\n    }\n  }\n  return sum!== n;\n};\n\nexport {\n  isEqualToSumEven,\n  isPalindrome,\n  isPowerOfTwo,\n  isPrime,\n  isComposite\n};\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let result = 1\n  while (n > 1) {\n    result *= n\n    n--\n  }\n  return result\n}\n\n/*The Catalan number is defined as:\n\n  1. catalan(n) = n * (n + 1) / 2\n\nFor example:\n\n>>> catalan(3)\n9\n\nThe function will receive an integer as input and should return the Catalan\nnumber of this integer.\n\nThe function may not take the value -1 as input.\n\nThe function may not take the value 2 as input.\n\nThe function may not take the value 3 as input.\n\nThe function may not take the value 4 as input.\n\nThe function may not take the value 5 as input.\n\nThe function may not take the value 6 as input.\n\nThe function may not take the value 7 as input.\n\nThe function may not take the value 8 as input.\n\nThe function may not take the value 9 as input.\n\nThe function may not take the value 10 as input.\n\nThe function may not take the value 11 as input.\n\nThe function may not take the value 12 as input.\n\nThe function may not take the value 13 as input.\n\nThe function may not take the value 14 as input.\n\nThe function may not take the value 15 as input.\n\nThe function may not take the value 16 as input.\n\nThe function may not take the value 17 as input.\n\nThe function may not take the value 18 as input.\n\nThe function may not take the value 19 as input.\n\nThe function may not take the value 20 as input.\n\nThe function may not take the value 21 as input.\n\nThe function may not take the value 22 as input.\n\nThe function may not take the value 23 as input.\n\nThe function may not take the value 24 as input.\n\nThe function may not take the value 25 as input.\n\nThe function may not take the value 26 as input.\n\nThe function may not take the value 27 as input.\n\nThe function may not take the value 28 as input.\n\nThe function may not take the value 29 as input.\n\nThe function may not take the value 30 as input.\n\nThe function may not take the value 31 as input.\n\nThe function may not take the value 32 as input.\n\nThe function may not take the value 33 as input.\n\nThe function may not take the value 34 as input.\n\nThe function may not take the value 35 as input.\n\nThe function may not take the value 36 as input.\n\nThe function may not take the value 37 as input.\n\nThe function may not take the value 38 as input.\n\nThe function may not take the value 39 as input.\n\nThe function may not take the value 40 as input.\n\nThe function may not take the value 41 as input.\n\nThe function may not take the value 42 as input.\n\nThe function may not take the value 43 as input.\n\nThe function may not take the value 44 as input.\n\nThe function may not take the value 45 as input.\n\nThe function may not take the value 46 as input.\n\nThe function may not take the value 47 as input.\n\nThe function may not take the value 48 as input.\n\nThe function may not take the value 49 as input.\n\nThe function may not take the value 50 as input.\n\nThe function may not take the value 51 as input.\n\nThe function may not take the value 52 as input.\n\nThe function may not take the value 53 as input.\n\nThe function may not take the value 54 as input.\n\nThe function may not take the value 55 as input.\n\nThe function may not take the value 56 as input.\n\nThe function may not take the value 57 as input.\n\nThe function may not take the value 58 as input.\n\nThe function may not take the value 59 as input.\n\nThe function may not take the value 60 as input.\n\nThe function may not take the value 61 as input.\n\nThe function may not take the value 62 as input.\n\nThe function may not take the value 63 as input.\n\nThe function may not take the value 64 as input.\n\nThe function may not take the value 65 as input.\n\nThe function may not take the value 66 as input.\n\nThe function may not take the value 67 as input.\n\nThe function may not take the value 68 as input.\n\nThe function may not take the value 69 as input.\n\nThe function may not take the value 70 as input.\n\nThe function may not take the value 71 as input.\n\nThe function may not take the value 72 as input.\n\nThe function may not take the value 73 as input.\n\nThe function may not take the value 74 as input.\n\nThe function may not take the value 75 as input.\n\nThe function may not take the value 76 as input.\n\nThe function may not take the value 77 as input.\n\nThe function may not take the value 78 as input.\n\nThe function may not take the value 79 as input.\n\nThe function may not take the value 80 as input.\n\nThe function may not take the value 81 as input.\n\nThe function may not take the value 82 as input.\n\nThe function may not take the value 83 as input.\n\nThe function may not take the value 84 as input.\n\nThe function may not take the value 85 as input.\n\nThe function may not take the value 86 as input.\n\nThe function may not take the value 87 as input.\n\nThe function may not take the value 88 as input.\n\nThe function may not take the value 89 as input.\n\nThe function may not take the value 90 as input.\n\nThe function may not take the value 91 as input.\n\nThe function may not take the value 92 as input.\n\nThe function may not take the value 93 as input.\n\nThe function may not take the value 94 as input.\n\nThe function may not take the value 95 as input.\n\nThe function may not take the value 96 as input.\n\nThe function may not take the value 97 as input.\n\nThe function may not take the value 98 as input.\n\nThe function may not take the value 99 as input.\n\nThe function may not take the value 100 as input.\n\nThe function may not take the value 101 as input.\n\nThe function may not take the value 102 as input.\n\nThe function may not take the value 103 as input.\n"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let replaced = text.replace(/ /g, '_')\n  if(replaced.length > 2) {\n    replaced = replaced.replace(/\\s{2,}/g, '-')\n  }\n  return replaced\n}\n\n/*\n  Gives a string text, replacing all spaces in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst getTitle = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getAuthor = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getDescription = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getImage = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getCategory = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getKeywords = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getDate = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getLink = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getTags = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getDescription = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getImage = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getAuthor = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getTitle = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getDate = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getTags = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getCategory = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getKeywords = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getDescription = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getImage = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getAuthor = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getTitle = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getDate = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getTags = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getDescription = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getImage = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getAuthor = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getTitle = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getDate = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getTags = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getCategory = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getKeywords = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getDescription = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getImage = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getAuthor = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getTitle = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getDate = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getTags = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getCategory = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\nconst getKeywords = (text) => {\n  return text.replace(/"}
{"task_id": "JavaScript/141", "prompt": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /[\\d]+(\\.\\d+)*$/;\n  return (regex.test(file_name) && file_name.indexOf(\".\")!== 0 && file_name.split(\".\").find(name => name.toLowerCase()[0] === \"a\" || name.toLowerCase()[0] === \"z\" || name.toLowerCase()[0] === \"A\" || name.toLowerCase()[0] === \"Z\"))? \"Yes\" : \"No\";\n};\n\n/*\n  createFileName()\n  Create a functions which takes a string represents a file's name, and returns a string with the file's name without extension.\n  Examples:\n  fileName(\"example.txt\") # => 'example'\n  fileName(\"example.exe\") # => 'example'\n  fileName(\"example.dll\") # => 'example'\n  fileName(\"example\") # => 'example'\n  fileName(\"1example.txt\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  fileName(\"1example.dll\") # => '1example'\n  fileName(\"1example.exe\") # => '1example'\n  "}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  const squares = (arr) => {\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] % 3 === 0) {\n        arr[i] = arr[i] * arr[i]\n      }\n      if (arr[i] % 4 === 0) {\n        arr[i] = arr[i] * arr[i] * arr[i]\n      }\n    }\n    return arr\n  }\n  return squares(lst)\n}\n\n/*\n  This functions will take a list of strings. For all entries in the list, the functions should replace all occurrences of the string in the list with the string value. The functions should then return the list with all occurrences of the string replaced with the string value. \n  \n  Examples:\n  For lst = ['This','is','a','string'] the output should be ['This', 'is', 'a','string']\n  For lst = []  the output should be []\n  For lst = ['This', 'is', 'a','string', 'This']  the output should be ['This', 'is', 'a','string', 'This']\n  */\nconst replaceStrings = (lst) => {\n  const replaceAll = (str) => {\n    for (let i = 0; i < lst.length; i++) {\n      lst[i] = lst[i].replace(str, str)\n    }\n    return lst\n  }\n  return replaceAll(str)\n}\n\n/*\n  This functions will take a list of strings. For all entries in the list, the functions should concatenate the strings together. The functions should then return the concatenated string. \n  \n  Examples:\n  For lst = ['This', 'is', 'a','string'] the output should be 'This is a string'\n  For lst = []  the output should be ''\n  For lst = ['This', 'is', 'a','string', 'This']  the output should be 'This is a stringThis'\n  */\nconst concatStrings = (lst) => {\n  const concat = (str) => {\n    return lst.join(str)\n  }\n  return concat(str)\n}\n\n/*\n  This functions will take a list of integers. For all entries in the list, the functions should return the number of the index in the list. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 2\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst getIndex = (lst) => {\n  const index = (num) => {\n    return lst.indexOf(num)\n  }\n  return index(num)\n}\n\n/*\n  This functions will take a list of strings. For all entries in the list, the functions should return the string with the index of the string replaced by the string value. \n  \n  Examples:\n  For lst = ['This','is','a','string'] the output should be'string'\n  For lst = []  the output should be ''\n  For lst = ['This', 'is', 'a','string', 'This']  the output should be 'This is a stringThis'\n  */\nconst replaceIndex = (lst) => {\n  const replace = (str) => {\n    for (let i = 0; i < lst.length; i++) {\n      lst[i] = lst[i].replace(str, str)\n    }\n    return lst\n  }\n  return replace(str)\n}\n\n/*\n  This functions will take a list of integers. For all entries in the list, the functions should return the integer with the index of the integer replaced by the integer value. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 5\n  */\nconst replaceIndex2 = (lst) => {\n  const replace = (num) => {\n    return lst.indexOf(num)\n  }\n  return replace(num)\n}\n\n/*\n  This functions will take a list of strings. For all entries in the list, the functions should return the string with the string value replaced by the index of the string in the list. \n  \n  Examples:\n  For lst = ['This','is','a','string'] the output should be'string'\n  For lst = []  the output should be ''\n  For lst = ['This', 'is', 'a','string', 'This']  the output should be 'This is a stringThis'\n  */\nconst replaceIndex3 = (lst) => {\n  const replace = (str) => {\n    for (let i = 0; i < lst.length; i++) {\n      lst[i] = lst[i].replace(str, lst[i])\n    }\n    return lst\n  }\n  return replace(str)\n}\n\nmodule.exports = {\n  sumSquares,\n  replaceStrings,\n  concatStrings,\n  getIndex,\n  replaceIndex,\n  replaceIndex2,\n  replaceIndex3\n}<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const sentenceArray = sentence.split(' ');\n  const length = sentenceArray.length;\n  const result = [];\n  for (let i = 0; i < length; i++) {\n    const currentWord = sentenceArray[i];\n    if (isPrime(currentWord.length)) {\n      result.push(currentWord);\n    }\n  }\n  return result.join(' ');\n};\n\nexport default wordsInSentence;\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n  if (typeof n!=='string') return false;\n  if (typeof x!=='string') return false;\n  const num = x.split('/').map(d => parseInt(d));\n  const den = n.split('/').map(d => parseInt(d));\n  return (num[0] * den[1]) === num[1] * den[0];\n};\n\nconsole.log(simplify('1/5', '5/1')); // true\nconsole.log(simplify('1/6', '2/1')); // false\nconsole.log(simplify('7/10', '10/2')); // false\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const list = nums.sort((a, b) => a - b);\n\n  let sums = 0;\n  for (let i = 0; i < list.length; i++) {\n    sums += list[i];\n  }\n\n  let result = [];\n  for (let i = 0; i < list.length; i++) {\n    result.push([list[i], sums - list[i]]);\n  }\n\n  return result.sort((a, b) => a[1] - b[1]);\n};\n\nmodule.exports = orderByPoints;\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const numbers = nums.filter(Number.isInteger);\n  const first = numbers[0].toString().charAt(0);\n  const last = numbers[numbers.length - 1].toString().charAt(0);\n  return numbers.filter((x) => x > 10 && first!== last);\n};\n\nexport default specialFilter;\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [1, 3, 7, 13, 21];\n  let result = 0;\n  for (let i = 1; i <= n - 2; i++) {\n    for (let j = i + 1; j <= n - 1; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  You were given a positive integer n. Write a function that finds all possible combinations of k numbers out of 1, 2,... n.\n\n  Example:\n      Input: n = 3\n      Output: [\n        [1, 2, 3],\n        [1, 2, 4],\n        [1, 3, 4],\n        [1, 3, 5],\n        [2, 3, 4],\n        [2, 3, 5],\n        [2, 4, 5]\n      ]\n\n  Note:\n      The solution set must not contain duplicate combinations.\n\n  Follow up:\n      What if the inputs contain duplicate numbers and you need all possible unique combinations?\n */\nconst getAllCombinations = (n) => {\n  let result = [];\n  let combinations = [];\n  let index = 0;\n  let tempCombinations = [];\n  let tempCombinationsLength = 0;\n  while (index < n) {\n    if (combinations.length === 0) {\n      tempCombinations = combinations;\n      tempCombinationsLength = combinations.length;\n      combinations = combinations.concat([[index]]);\n      index++;\n    } else if (index === n) {\n      tempCombinations.push(combinations);\n      result = result.concat(tempCombinations);\n      combinations = [];\n    } else {\n      combinations.push([index]);\n      index++;\n    }\n  }\n  return result;\n};\n\n/*\n  You were given a positive integer n and another integer k. Write a function to print all possible combinations of k numbers out of 1, 2,... n.\n\n  Example:\n      Input: n = 3, k = 2\n      Output: [\n        [1, 2],\n        [1, 3],\n        [2, 3]\n      ]\n\n  Note:\n      The solution set must not contain duplicate combinations.\n\n  Follow up:\n      What if n > 10,000? Find the result quickly.\n\n      What if k is larger than n? Find the result quickly.\n */\nconst getAllCombinationsQuick = (n, k) => {\n  let combinations = [];\n  let index = 1;\n  while (index < k) {\n    combinations.push([index]);\n    index++;\n  }\n  let result = [];\n  let tempResult = [];\n  while (index < n + 1) {\n    tempResult = combinations.concat(tempResult);\n    combinations = combinations.concat([[index]]);\n    index++;\n  }\n  return result.concat(tempResult);\n};\n\n/*\n  You were given a positive integer n. Write a function to print all the possible triples of (a[i], a[j], a[k]) for i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example:\n      Input: n = 5\n      Output: [\n        (1, 3, 7),\n        (1, 3, 13),\n        (1, 7, 13),\n        (3, 7, 13),\n        (7, 13, 21)\n      ]\n\n  Note:\n      The solution set must not contain duplicate triples.\n\n  Follow up:\n      What if n > 50000? Find the result quickly.\n */\nconst getAllTriples = (n) => {\n  let a = [1, 3, 7, 13, 21];\n  let result = [];\n  let index = 1;\n  while (index < n + 1) {\n    result.push([a[index - 1], a[index], a[index + 1]]);\n    index++;\n  }\n  return result;\n};\n\nexports.getMaxTriples = getMaxTriples;\nexports.getAllCombinations = getAllCombinations;\nexports.getAllCombinationsQuick = getAllCombinationsQuick;\nexports.getAllTriples = getAllTriples;\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let x = {};\n  let z = [];\n  let planet1name = planet1.toLowerCase();\n  let planet2name = planet2.toLowerCase();\n  if (planet1name === 'earth') {\n    z.push(planet2);\n  } else if (planet2name === 'earth') {\n    z.push(planet1);\n  } else {\n    x[planet1name] = [planet2];\n    x[planet2name] = [planet1];\n  }\n  return x;\n};\n\nconst bf1 = bf('Mercury', 'Jupiter');\nconst bf2 = bf('Mercury', 'Uranus');\nconst bf3 = bf('Jupiter', 'Uranus');\nconst bf4 = bf('Mercury', 'Saturn');\nconst bf5 = bf('Jupiter', 'Saturn');\nconst bf6 = bf('Mercury', 'Neptune');\nconst bf7 = bf('Mercury', 'Uranus');\nconst bf8 = bf('Mercury', 'Saturn');\nconst bf9 = bf('Mercury', 'Mercury');\nconst bf10 = bf('Mercury', 'Mercury');\nconst bf11 = bf('Mercury', 'Mercury');\nconst bf12 = bf('Mercury', 'Mercury');\nconst bf13 = bf('Mercury', 'Mercury');\nconst bf14 = bf('Mercury', 'Mercury');\nconst bf15 = bf('Mercury', 'Mercury');\nconst bf16 = bf('Mercury', 'Mercury');\nconst bf17 = bf('Mercury', 'Mercury');\nconst bf18 = bf('Mercury', 'Mercury');\nconst bf19 = bf('Mercury', 'Mercury');\nconst bf20 = bf('Mercury', 'Mercury');\nconst bf21 = bf('Mercury', 'Mercury');\nconst bf22 = bf('Mercury', 'Mercury');\nconst bf23 = bf('Mercury', 'Mercury');\nconst bf24 = bf('Mercury', 'Mercury');\nconst bf25 = bf('Mercury', 'Mercury');\nconst bf26 = bf('Mercury', 'Mercury');\nconst bf27 = bf('Mercury', 'Mercury');\nconst bf28 = bf('Mercury', 'Mercury');\nconst bf29 = bf('Mercury', 'Mercury');\nconst bf30 = bf('Mercury', 'Mercury');\nconst bf31 = bf('Mercury', 'Mercury');\nconst bf32 = bf('Mercury', 'Mercury');\nconst bf33 = bf('Mercury', 'Mercury');\nconst bf34 = bf('Mercury', 'Mercury');\nconst bf35 = bf('Mercury', 'Mercury');\nconst bf36 = bf('Mercury', 'Mercury');\nconst bf37 = bf('Mercury', 'Mercury');\nconst bf38 = bf('Mercury', 'Mercury');\nconst bf39 = bf('Mercury', 'Mercury');\nconst bf40 = bf('Mercury', 'Mercury');\nconst bf41 = bf('Mercury', 'Mercury');\nconst bf42 = bf('Mercury', 'Mercury');\nconst bf43 = bf('Mercury', 'Mercury');\nconst bf44 = bf('Mercury', 'Mercury');\nconst bf45 = bf('Mercury', 'Mercury');\nconst bf46 = bf('Mercury', 'Mercury');\nconst bf47 = bf('Mercury', 'Mercury');\nconst bf48 = bf('Mercury', 'Mercury');\nconst bf49 = bf('Mercury', 'Mercury');\nconst bf50 = bf('Mercury', 'Mercury');\nconst bf51 = bf('Mercury', 'Mercury');\nconst bf52 = bf('Mercury', 'Mercury');\nconst bf53 = bf('Mercury', 'Mercury');\nconst bf54 = bf('Mercury', 'Mercury');\nconst bf55 = bf('Mercury', 'Mercury');\nconst bf56 = bf('Mercury', 'Mercury');\nconst bf57 = bf('Mercury', 'Mercury');\nconst bf58 = bf('Mercury', 'Mercury');\nconst bf59 = bf('Mercury', 'Mercury');\nconst bf60 = bf('Mercury', 'Mercury');\nconst bf61 = bf('Mercury', 'Mercury');\nconst bf62 = bf('Mercury', 'Mercury');\nconst bf63 = bf('Mercury', 'Mercury');\nconst bf64 = bf('Mercury', 'Mercury');\nconst bf65 = bf('Mercury', 'Mercury');\nconst bf66 = bf('Mercury', 'Mercury');\nconst bf67 = bf('Mercury', 'Mercury');\nconst bf68 = bf('Mercury', 'Mercury');\nconst bf69 = bf('Mercury', 'Mercury');\nconst bf70 = bf('Mercury', 'Mercury');\nconst bf71 = bf('Mercury', 'Mercury');\nconst bf72 = bf('Mercury', 'Mercury');\nconst bf73 = bf('Mercury', 'Mercury');\nconst bf74 = bf('Mercury', 'Mercury');\nconst bf75 = bf('Mercury', 'Mercury');"}
{"task_id": "JavaScript/149", "prompt": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const d = lst.map(s => s.length);\n  const e = lst.map(s => s.length);\n  return lst.sort((a, b) => d[a] - d[b]).filter((x, i) => e[i]!== d[x]);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n/*\n  function isPrime(n) {\n  return (n === 2) || (n === 3) || (n === 5) || (n === 7) || (n === 11) || (n === 13) || (n === 17) || (n === 19) || (n === 23) || (n === 29) || (n === 31) || (n === 37) || (n === 41) || (n === 43) || (n === 47) || (n === 53) || (n === 59) || (n === 61) || (n === 67) || (n === 71) || (n === 73) || (n === 79) || (n === 83) || (n === 89) || (n === 97) || (n === 101) || (n === 103) || (n === 107) || (n === 109) || (n === 113) || (n === 127) || (n === 131) || (n === 137) || (n === 139) || (n === 149) || (n === 151) || (n === 157) || (n === 163) || (n === 167) || (n === 173) || (n === 179) || (n === 181) || (n === 191) || (n === 193) || (n === 197) || (n === 199) || (n === 211) || (n === 223) || (n === 227) || (n === 229) || (n === 233) || (n === 239) || (n === 241) || (n === 251) || (n === 257) || (n === 263) || (n === 269) || (n === 271) || (n === 277) || (n === 281) || (n === 283) || (n === 293) || (n === 307) || (n === 311) || (n === 313) || (n === 317) || (n === 331) || (n === 337) || (n === 347) || (n === 349) || (n === 353) || (n === 359) || (n === 367) || (n === 373) || (n === 379) || (n === 383) || (n === 389) || (n === 397) || (n === 401) || (n === 409) || (n === 419) || (n === 421) || (n === 431) || (n === 433) || (n === 439) || (n === 443) || (n === 449) || (n === 457) || (n === 461) || (n === 463) || (n === 467) || (n === 479) || (n === 487) || (n === 491) || (n === 499) || (n === 503) || (n === 509) || (n === 521) || (n === 523) || (n === 541) || (n === 547) || (n === 557) || (n === 563) || (n === 569) || (n === 571) || (n === 577) || (n === 587) || (n === 593) || (n === 599) || (n === 601) || (n === 607) || (n === 613) || (n === 617) || (n === 619) || (n === 631) || (n === 641) || (n === 643) || (n === 647) || (n === 653) || (n === 659) || (n === 661) || (n === 673) || (n === 677) || (n === 683) || (n === 691) || (n === 701) || (n === 709) || (n === 719) || (n === 727) || (n === 733) || (n === 739) || (n === 743) || (n === 751) || (n === 757) || (n === 761) || (n === 769) || (n === 773) || (n === 787) || (n === 797) || (n === 809) || (n === 811) || (n === 821) || (n === 823) || (n === 827) || (n === 829) || (n === 839) || (n === 853) || (n === 857) || (n === 859) || (n === 863) || (n === 877) || (n === 881) || (n === 883) || (n === 887) || (n === 907) || (n === 911) || (n === 919) || (n === 929) || (n === 937) || (n === 941) || (n === 947) || (n === 953) || (n === 967) || (n === 971) || (n === 977) || (n === 983) || (n === 991) || (n === 997) || (n === 1009) || (n === 1013) || (n === 1019) || (n === 1021) || (n === 1031) || (n === 1033) || (n === 1039) || (n === 1049) || (n === 1051) || (n === 1061) || (n === 1063) || (n === 1069) || (n === 1087) || (n === 1091) || (n === 1093) || (n === 1097) || (n === 1103) || (n === 1109) || (n === 1117) || (n === 1123) || (n === 1129) || (n === 1141) || (n === 1143) || (n === 1149) || (n === 1151) || (n === 1159) || (n === 1163) || (n === 1171) || (n === 1181) || (n === 1187) || (n === 1193) || (n === 1201) || (n === 1213) || (n === 1217) || (n === 1223) || (n === 1229) || (n === 1231) || (n === 1237) || (n === 1249) || (n === 1259) || (n === 1277) || (n === 1279) || (n === 1283) || (n === 1289) || (n === 1291) || (n === 1297) || (n"}
{"task_id": "JavaScript/151", "prompt": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  return (lst[0] === -1 || lst[0] === 0)? 0 : lst.reduce((p, n) => p + n * n, 0)\n}\n\n/* Gives the number of unique elements in the list. */ const uniqueElements = (lst) => {\n  const set = new Set(lst)\n  return lst.filter(n => set.has(n)).length\n}\n\n/* Gives a list of numbers that are divisible by the number. The number can be an integer or a float. */ const divisibleBy = (n, lst) => {\n  const isFloat = (n) => n % 1 === 0\n  return lst.filter(n => isFloat(n)? (n % n === 0) : (n % n > 0 && n % n < n))\n}\n\n/* Gives a list of numbers that are divisible by the number. The number can be an integer or a float. */ const isDivisible = (n, lst) => {\n  const isFloat = (n) => n % 1 === 0\n  return lst.filter(n => isFloat(n)? (n % n === 0) : (n % n > 0 && n % n < n))\n}\n\n/* Gives a list of numbers that are divisible by the number. The number can be an integer or a float. */ const isNotDivisible = (n, lst) => {\n  const isFloat = (n) => n % 1 === 0\n  return lst.filter(n => isFloat(n)? (n % n!== 0) : (n % n > 0 && n % n < n))\n}\n\n/* Gives a list of numbers that are divisible by the number. The number can be an integer or a float. */ const isNotDivisibleBy = (n, lst) => {\n  const isFloat = (n) => n % 1 === 0\n  return lst.filter(n => isFloat(n)? (n % n!== 0) : (n % n > 0 && n % n < n))\n}\n\n/* Gives a list of numbers that are not divisible by the number. The number can be an integer or a float. */ const notDivisibleBy = (n, lst) => {\n  const isFloat = (n) => n % 1 === 0\n  return lst.filter(n => isFloat(n)? (n % n === 0) : (n % n > 0 && n % n < n))\n}\n\n/* Gives a list of numbers that are not divisible by the number. The number can be an integer or a float. */ const notDivisible = (n, lst) => {\n  const isFloat = (n) => n % 1 === 0\n  return lst.filter(n => isFloat(n)? (n % n!== 0) : (n % n > 0 && n % n < n))\n}\n\n/* Gives a list of numbers that are not divisible by the number. The number can be an integer or a float. */ const notDivisibleBy2 = (n, lst) => {\n  const isFloat = (n) => n % 1 === 0\n  return lst.filter(n => isFloat(n)? (n % n === 0) : (n % n > 0 && n % n < n))\n}\n\n/* Gives a list of numbers that are divisible by the number. The number can be an integer or a float. */ const notDivisible = (n, lst) => {\n  const isFloat = (n) => n % 1 === 0\n  return lst.filter(n => isFloat(n)? (n % n!== 0) : (n % n > 0 && n % n < n))\n}\n\n/* Gives a list of numbers that are not divisible by the number. The number can be an integer or a float. */ const notDivisibleBy2 = (n, lst) => {\n  const isFloat = (n) => n % 1 === 0\n  return lst.filter(n => isFloat(n)? (n % n!== 0) : (n % n > 0 && n % n < n))\n}\n\n/* Gives a list of numbers that are not divisible by the number. The number can be an integer or a float. */ const isNotDivisibleBy2 = (n, lst) => {\n  const isFloat = (n) => n % 1 === 0\n  return lst.filter(n => isFloat(n)? (n % n === 0) : (n % n > 0 && n % n < n))\n}\n\n/* Gives a list of numbers that are not divisible by the number. The number can be an integer or a float. */ const isNotDivisible = (n, lst) => {\n  const isFloat = (n) => n % 1 === 0\n  return lst.filter(n => isFloat(n)? (n % n!== 0) : (n % n > 0 && n % n < n))\n}\n\n/* Gives a list of numbers that are not divisible by the number. The number can be an integer or a float. */ const isNotDivisible = (n, lst) => {\n  const isFloat = (n) => n % 1 === 0\n  return lst.filter(n => isFloat(n)? (n % n!== 0) : (n % n > 0 && n % n < n))\n}\n\n/* Gives a list of numbers that are not divisible by the number. The number can be an integer or a float. */ const isNotDivisible = (n, lst) => {\n  const isFloat = (n) => n % 1 === 0\n  return lst.filter(n => isFloat(n)? (n % n!== 0) : (n % n > 0 && n % n < n))\n}\n\n/* Gives a list of numbers that are not divisible by the number. The number can be an integer or a float. */ const isNotDivisibleBy = (n, lst) => {\n  const isFloat = (n) =>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let arr = Array.from(game)\n  let sum = 0\n  let len = Math.min(guess.length, game.length)\n  for (let i = 0; i < len; i++) {\n    sum += Math.abs(guess[i] - arr[i])\n  }\n  return sum\n}\n\n//const compare = (game, guess) => {\n//  let sum = 0\n//  for (let i = 0; i < game.length; i++) {\n//    sum += Math.abs(guess[i] - game[i])\n//  }\n//  return sum\n//}\n\nconst compare = (game, guess) => {\n  let sum = 0\n  for (let i = 0; i < game.length; i++) {\n    let dif = Math.abs(guess[i] - game[i])\n    if (dif > 1) {\n      sum += dif\n    }\n  }\n  return sum\n}\n\nmodule.exports = compare\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  // sort by strength\n  const extensions = extensions.sort((a, b) => {\n    const a_strength = getStrength(a);\n    const b_strength = getStrength(b);\n    // a is better than b\n    return a_strength - b_strength;\n  });\n  // get the strongest extension\n  const strongest = extensions[0];\n  // check if it is the one\n  if (getStrength(strongest) > 0) {\n    return class_name + '.' + strongest;\n  }\n  // otherwise, return the class_name\n  return class_name;\n};\n\n// get the strength of an extension\nconst getStrength = extension => {\n  // get the strength\n  return getStrength.strength.call(null, extension);\n};\n\n// get the strength of an extension\nconst getStrength = extension => {\n  // if there is no extension, return 0\n  if (extension === '') {\n    return 0;\n  }\n  // if there is no uppercase letters, return -1\n  if (extension.replace(/[^A-Z]/g, '').length === 0) {\n    return -1;\n  }\n  // if there is no lowercase letters, return 1\n  if (extension.replace(/[^a-z]/g, '').length === 0) {\n    return 1;\n  }\n  // otherwise, return the number of upper case letters minus the number of\n  // lower case letters\n  return getStrength.strength.call(null, extension);\n};\n\n// get the strength of an extension\nconst getStrength = extension => {\n  // if there is no extension, return 0\n  if (extension === '') {\n    return 0;\n  }\n  // if there is no uppercase letters, return -1\n  if (extension.replace(/[^A-Z]/g, '').length === 0) {\n    return -1;\n  }\n  // if there is no lowercase letters, return 1\n  if (extension.replace(/[^a-z]/g, '').length === 0) {\n    return 1;\n  }\n  // otherwise, return the number of upper case letters minus the number of\n  // lower case letters\n  return getStrength.strength.call(null, extension);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n  const lena = a.length\n  const lenb = b.length\n  const len = Math.min(lena, lenb)\n  let i = 0\n  let j = 0\n  let result = false\n  while (i < len) {\n    if (a[i]!== b[j]) {\n      break\n    }\n    i++\n    j++\n  }\n  if (i === lena && j === lenb) {\n    result = true\n  } else if (i > 0) {\n    const temp = a.slice(i)\n    const temp2 = b.slice(j)\n    const result = cycpatternCheck(temp, temp2)\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let result = 0;\n  let count = 0;\n  while (num) {\n    result += num % 2;\n    num = Math.floor(num / 2);\n    count += 1;\n  }\n  return [count, result];\n};\n\n/*\n  Given a number that is a power of 2, return a tuple with the number of 1s and 0s in the binary representation of the number.\n\n  Example:\n    binaryCount(2) ==> (2, 0)\n    binaryCount(4) ==> (4, 1)\n    binaryCount(8) ==> (8, 3)\n    binaryCount(16) ==> (16, 3)\n    binaryCount(32) ==> (32, 2)\n    binaryCount(64) ==> (64, 1)\n    binaryCount(128) ==> (128, 1)\n*/\nconst binaryCount = (num) => {\n  let result = 0;\n  let count = 0;\n  while (num) {\n    if (num & 1) {\n      result += 1;\n    } else {\n      result -= 1;\n    }\n    num = num >> 1;\n    count += 1;\n  }\n  return [count, result];\n};\n\n/*\n  Given a list of tuples containing numbers that are even and odd, return a list of numbers that are all odd.\n\n  Example:\n    odds([(2, 4), (4, 6), (6, 8), (8, 10)]) ==> [9, 11, 13, 15]\n    odds([(2, 4), (4, 6)]) ==> [7, 9]\n    odds([(2, 4), (4, 6), (8, 10)]) ==> [9, 11, 13, 15]\n*/\nconst odds = (tuples) => {\n  let odd = [];\n  tuples.forEach(tuple => {\n    odd.push(tuple[1]);\n  });\n  return odd;\n};\n\n/*\n  Given a list of tuples containing numbers that are even and odd, return a list of numbers that are all even.\n\n  Example:\n    evens([(2, 4), (4, 6), (6, 8), (8, 10)]) ==> [2, 4, 6, 8]\n    evens([(2, 4), (4, 6)]) ==> [2, 4, 6]\n    evens([(2, 4), (4, 6), (8, 10)]) ==> [2, 4, 6, 8]\n*/\nconst evens = (tuples) => {\n  let even = [];\n  tuples.forEach(tuple => {\n    even.push(tuple[0]);\n  });\n  return even;\n};\n\n/*\n  Given two lists of tuples containing numbers that are even and odd, return a list of numbers that are all even and odd.\n\n  Example:\n    oddEvens([(2, 4), (4, 6), (6, 8), (8, 10)]) ==> [(2, 4), (4, 6), (6, 8), (8, 10)]\n    oddEvens([(2, 4), (4, 6)]) ==> [(2, 4), (4, 6)]\n    oddEvens([(2, 4), (4, 6), (8, 10)]) ==> [(2, 4), (4, 6), (6, 8), (8, 10)]\n*/\nconst oddEvens = (tuples) => {\n  let even = [];\n  let odd = [];\n  tuples.forEach(tuple => {\n    if (tuple[0] % 2 === 0) {\n      even.push(tuple[0]);\n    } else {\n      odd.push(tuple[0]);\n    }\n  });\n  return [even, odd];\n};\n\nmodule.exports = {\n  binaryCount,\n  evens,\n  odds,\n  oddEvens,\n  evenOddCount\n};\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  number = number.toString();\n\n  // return if number is out of range\n  if (number.length === 0 || number.length > 5) {\n    return number;\n  }\n\n  let roman = number;\n  let num = number;\n\n  if (number > 0) {\n    while (num > 0) {\n      if (num % 10 === 1) {\n        roman = 'I' + roman;\n      } else if (num % 10 === 2) {\n        roman = 'II' + roman;\n      } else if (num % 10 === 3) {\n        roman = 'III' + roman;\n      } else if (num % 10 === 4) {\n        roman = 'IV' + roman;\n      } else if (num % 10 === 5) {\n        roman = 'V' + roman;\n      } else if (num % 10 === 6) {\n        roman = 'VI' + roman;\n      } else if (num % 10 === 7) {\n        roman = 'VII' + roman;\n      } else if (num % 10 === 8) {\n        roman = 'VIII' + roman;\n      } else if (num % 10 === 9) {\n        roman = 'IX' + roman;\n      }\n      num = Math.floor(num / 10);\n    }\n  } else {\n    roman = '0' + roman;\n  }\n\n  return roman.toLowerCase();\n};\n\n// Tests\n\nconst t1 = intToMiniRoman(19);\nconst t2 = intToMiniRoman(152);\nconst t3 = intToMiniRoman(426);\n\nconsole.log(`T1: ${t1}`);\nconsole.log(`T2: ${t2}`);\nconsole.log(`T3: ${t3}`);\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  let b2a = a + b;\n  let c2a = c + a;\n  let c2b = b + c;\n  let c2c = c + b;\n  if (a === b2a && b === c2b && c === c2c) {\n    return true;\n  }\n  if (b === c2b && c === c2c) {\n    return true;\n  }\n  if (a === c2a && c === c2c) {\n    return true;\n  }\n  if (a === c2a && b === c2b) {\n    return true;\n  }\n  if (b === c2b && c === c2c) {\n    return true;\n  }\n  return false;\n}\n\n/*\n Gives the sum of the lengths of the sides of a triangles.\n  Example:\n  sumOfSides(3, 4, 5) == 12\n  sumOfSides(1, 2, 3) == 6\n  */\nconst sumOfSides = (a, b, c) => {\n  return a + b + c;\n}\n\n/*\n Gives the area of a triangle.\n  Example:\n  area(1, 2, 3) == 3/2\n  area(1, 4, 6) == 2/2\n  area(1, 2, 4) == 0\n  */\nconst area = (a, b, c) => {\n  if (rightAngleTriangle(a, b, c)) {\n    return Math.abs(sumOfSides(a, b, c) / 2);\n  }\n  return 0;\n}\n\n/*\n Gives the perimeter of a triangle.\n  Example:\n  perimeter(1, 2, 3) == 6\n  perimeter(1, 4, 6) == 8\n  perimeter(1, 2, 4) == 3\n  */\nconst perimeter = (a, b, c) => {\n  return sumOfSides(a, b, c);\n}\n\n/*\n Gives the value of the volume of a cube.\n  Example:\n  volume(1, 2, 3) == 27\n  volume(1, 4, 6) == 36\n  volume(1, 2, 4) == 8\n  */\nconst volume = (a, b, c) => {\n  return a * b * c;\n}\n\n/*\n Gives the area of a circle.\n  Example:\n  area(1) == pi/4\n  area(2) == 2*pi/4\n  area(3) == 3*pi/4\n  area(4) == 4*pi/4\n  area(5) == 5*pi/4\n  area(6) == 6*pi/4\n  area(7) == 7*pi/4\n  area(8) == 8*pi/4\n  */\nconst areaOfCircle = (radius) => {\n  return Math.PI * radius * radius;\n}\n\n/*\n Gives the area of a parallelogram.\n  Example:\n  area(1, 2, 3, 4) == 8\n  area(1, 4, 6, 8) == 16\n  area(1, 2, 4, 6) == 6\n  */\nconst areaOfParallelogram = (a, b, c, d) => {\n  return a * b + c * d;\n}\n\n/*\n Gives the area of a traingle.\n  Example:\n  area(1, 2, 3) == 6\n  area(1, 4, 6) == 12\n  area(1, 2, 4) == 2\n  */\nconst areaOfTriangle = (a, b, c) => {\n  return area(a, b, c) / 2;\n}\n\n/*\n Gives the area of a triangle.\n  Example:\n  area(1, 2, 3) == 3/2\n  area(1, 4, 6) == 2/2\n  area(1, 2, 4) == 0\n  */\nconst areaOfRectangle = (a, b, c) => {\n  return (a * b) / 2;\n}\n\n/*\n Gives the volume of a cube.\n  Example:\n  volume(1, 2, 3) == 27\n  volume(1, 4, 6) == 36\n  volume(1, 2, 4) == 8\n  */\nconst volumeOfCube = (a, b, c) => {\n  return a * b * c;\n}\n\n/*\n Gives the volume of a sphere.\n  Example:\n  volume(1) == 4/3\n  volume(2) == 2\n  volume(3) == 3\n  volume(4) == 4\n  */\nconst volumeOfSphere = (radius) => {\n  return Math.PI * Math.pow(radius, 3) / 3;\n}\n\n/*\n Gives the volume of a sphere.\n  Example:\n  volume(1) == 4/3\n  volume(2) == 2\n  volume(3) == 3\n  volume(4) == 4\n  */\nconst volumeOfCylinder = (radius, height) => {\n  return Math.PI * Math.pow(radius, 2) * height;\n}\n\n/*\n Gives the volume of a sphere.\n  Example:\n  volume(1) == 4/3\n  volume(2) == 2\n  volume(3) == 3\n  volume(4) == 4\n  */\nconst volumeOfCone = (radius, height) => {\n  return 2 * Math.PI * Math.pow(radius, 2) * height;\n}\n\n/*\n Gives the volume of a cuboid.\n  Example:\n  volume(1, 2, 3) == 27\n  volume(1, 4, 6) == 36\n  volume(1, 2, 4) == 8\n  */\nconst volumeOfCuboid = (a, b, c) => {\n  return a * b * c;\n}\n\n/*\n Gives the volume of a cylinder.\n  Example:\n  volume(1, 2, 3) == 27\n  volume(1, 4, 6"}
{"task_id": "JavaScript/158", "prompt": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n\tif(words.length === 0) {\n\t\treturn \"\";\n\t}\n\tconst max = {};\n\tconst wordsLength = words.length;\n\tfor (let i = 0; i < wordsLength; i++) {\n\t\tconst word = words[i];\n\t\tif (word.length > 1) {\n\t\t\tif (max[word]!== undefined) {\n\t\t\t\tmax[word]++;\n\t\t\t} else {\n\t\t\t\tmax[word] = 1;\n\t\t\t}\n\t\t}\n\t}\n\tconst uniqueWords = [];\n\tconst sortedWords = [];\n\tfor (const [word, count] of Object.entries(max)) {\n\t\tif (count === 1) {\n\t\t\tuniqueWords.push(word);\n\t\t} else {\n\t\t\tsortedWords.push({\n\t\t\t\tword: word,\n\t\t\t\tcount: count\n\t\t\t});\n\t\t}\n\t}\n\treturn sortedWords.sort((a, b) => a.count - b.count)[0].word;\n}\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"games\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\", \"cc\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let diff = number - need;\n  if (diff < 0) return [0, remaining];\n  if (diff > remaining) return [diff, 0];\n  return [diff, remaining - diff];\n};\n\n// TESTS:\nconst tests = [\n  [5, 6, 10, [11, 4], [5, 6]],\n  [4, 8, 9, [12, 1], [4, 8]],\n  [1, 10, 10, [11, 0], [1, 10]],\n  [2, 11, 5, [7, 0], [2, 11]]\n];\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    let operator = operator[i];\n    let operand = operand[i];\n    let operatorSign = 1;\n    if (operator[0] === '-') {\n      operatorSign = -1;\n      operator = operator.slice(1);\n    }\n    result += operatorSign * operand[i];\n  }\n  return result;\n};\n\n// const doAlgebra = (operator, operand) => {\n//   let result = 0;\n//   let operatorSign = 1;\n//   if (operator[0] === '-') {\n//     operatorSign = -1;\n//     operator = operator.slice(1);\n//   }\n//   for (let i = 0; i < operator.length; i++) {\n//     let operator = operator[i];\n//     let operand = operand[i];\n//     let operatorSign = 1;\n//     if (operator[0] === '-') {\n//       operatorSign = -1;\n//       operator = operator.slice(1);\n//     }\n//     result += operatorSign * operand[i];\n//   }\n//   return result;\n// };\n\nconst doAlgebra = (operator, operand) => {\n  const operatorSign = 1;\n  if (operator[0] === '-') {\n    operatorSign = -1;\n    operator = operator.slice(1);\n  }\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    let operator = operator[i];\n    let operand = operand[i];\n    let operatorSign = 1;\n    if (operator[0] === '-') {\n      operatorSign = -1;\n      operator = operator.slice(1);\n    }\n    result += operatorSign * operand;\n  }\n  return result;\n};\n\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    let operator = operator[i];\n    let operand = operand[i];\n    let operatorSign = 1;\n    if (operator[0] === '-') {\n      operatorSign = -1;\n      operator = operator.slice(1);\n    }\n    result += operatorSign * operand;\n  }\n  return result;\n};\n\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    let operator = operator[i];\n    let operand = operand[i];\n    let operatorSign = 1;\n    if (operator[0] === '-') {\n      operatorSign = -1;\n      operator = operator.slice(1);\n    }\n    result += operatorSign * operand;\n  }\n  return result;\n};\n\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    let operator = operator[i];\n    let operand = operand[i];\n    let operatorSign = 1;\n    if (operator[0] === '-') {\n      operatorSign = -1;\n      operator = operator.slice(1);\n    }\n    result += operatorSign * operand;\n  }\n  return result;\n};\n\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    let operator = operator[i];\n    let operand = operand[i];\n    let operatorSign = 1;\n    if (operator[0] === '-') {\n      operatorSign = -1;\n      operator = operator.slice(1);\n    }\n    result += operatorSign * operand;\n  }\n  return result;\n};\n\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    let operator = operator[i];\n    let operand = operand[i];\n    let operatorSign = 1;\n    if (operator[0] === '-') {\n      operatorSign = -1;\n      operator = operator.slice(1);\n    }\n    result += operatorSign * operand;\n  }\n  return result;\n};\n\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    let operator = operator[i];\n    let operand = operand[i];\n    let operatorSign = 1;\n    if (operator[0] === '-') {\n      operatorSign = -1;\n      operator = operator.slice(1);\n    }\n    result += operatorSign * operand;\n  }\n  return result;\n};\n\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    let operator = operator[i];\n    let operand = operand[i];\n    let operatorSign = 1;\n    if (operator[0] === '-') {\n      operatorSign = -1;\n      operator = operator.slice(1);\n    }\n    result += operatorSign * operand;\n  }\n  return result;\n};\n\nconst doAlgebra = (operator, operand) => {\n"}
{"task_id": "JavaScript/161", "prompt": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let s2 = s;\n  let s1 = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === s.charAt(i).toLowerCase()) {\n      s2 = s2.replace(s.charAt(i), s.charAt(i).toUpperCase());\n    } else {\n      s2 = s2.replace(s.charAt(i), s.charAt(i).toLowerCase());\n    }\n  }\n  return s2;\n}\n\n// console.log(solve(\"1234\"));\n// console.log(solve(\"ab\"));\n// console.log(solve(\"#a@C\"));\n// console.log(solve(\"\"));\n// console.log(solve(\"\"));\n\n// console.log(solve(\"#a@c\"));\n\n// console.log(solve(\"#a@c\"));<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Returns a random string of length 'len'.\n  The characters of the string will be made of the lowercase letters 'a'-'z', uppercase letters 'A'-'Z' and numbers '0'-'9'.\n  >>> stringToRandom() == 'vfqx3lq4e0r3e'\n  */\nconst stringToRandom = () => {\n  let chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n  let randomString = ''\n  for (let i = 0; i < 8; i++) {\n    randomString += chars[Math.floor(Math.random() * chars.length)]\n  }\n  return randomString\n}\n\n/*\n  Returns an array of the first n random strings of length 'len'.\n  The characters of the string will be made of the lowercase letters 'a'-'z', uppercase letters 'A'-'Z' and numbers '0'-'9'.\n  >>> randomStrings(2, 3)\n  */\nconst randomStrings = (n, len) => {\n  let result = []\n  for (let i = 0; i < n; i++) {\n    let randomString = stringToRandom()\n    result.push(randomString.substring(0, len))\n  }\n  return result\n}\n\n/*\n  Returns a string containing the characters from the first 'len' characters of 'text'.\n  If 'text' is an emptiest string, return nulls.\n\n  >>> textToSubstring('Hello world', 3) == 'Hello'\n  */\nconst textToSubstring = (text, len) => {\n  let textLen = text.length\n  let startIndex = Math.floor(Math.random() * textLen)\n  let endIndex = Math.min(textLen, startIndex + len)\n  return text.substring(startIndex, endIndex)\n}\n\n/*\n  Returns a random substring of 'text'.\n  The characters of the string will be made of the lowercase letters 'a'-'z', uppercase letters 'A'-'Z' and numbers '0'-'9'.\n  >>> textToRandomSubstring('Hello world')\n  */\nconst textToRandomSubstring = (text) => {\n  let chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n  let randomString = ''\n  for (let i = 0; i < 4; i++) {\n    randomString += chars[Math.floor(Math.random() * chars.length)]\n  }\n  return textToSubstring(text, randomString.length)\n}\n\n/*\n  Returns a random substring of 'text'.\n  The characters of the string will be made of the lowercase letters 'a'-'z', uppercase letters 'A'-'Z' and numbers '0'-'9'.\n  >>> textToRandomSubstring('Hello world')\n  */\nconst textToRandomSubstring2 = (text) => {\n  let chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n  let randomString = ''\n  for (let i = 0; i < 4; i++) {\n    randomString += chars[Math.floor(Math.random() * chars.length)]\n  }\n  return textToSubstring(text, randomString.length)\n}\n\n/*\n  Returns a random substring of 'text'.\n  The characters of the string will be made of the lowercase letters 'a'-'z', uppercase letters 'A'-'Z' and numbers '0'-'9'.\n  >>> textToRandomSubstring('Hello world')\n  */\nconst textToRandomSubstring3 = (text) => {\n  let chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n  let randomString = ''\n  for (let i = 0; i < 4; i++) {\n    randomString += chars[Math.floor(Math.random() * chars.length)]\n  }\n  return textToSubstring(text, randomString.length)\n}\n\n/*\n  Returns a random substring of 'text'.\n  The characters of the string will be made of the lowercase letters 'a'-'z', uppercase letters 'A'-'Z' and numbers '0'-'9'.\n  >>> textToRandomSubstring('Hello world')\n  */\nconst textToRandomSubstring4 = (text) => {\n  let chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n  let randomString = ''\n  for (let i = 0; i < 4; i++) {\n    randomString += chars[Math.floor(Math.random() * chars.length)]\n  }\n  return textToSubstring(text, randomString.length)\n}\n\n/*\n  Returns a random substring of 'text'.\n  The characters of the string will be made of the lowercase letters 'a'-'z', uppercase letters 'A'-'Z' and numbers '0'-'9'.\n  >>> textToRandomSubstring('Hello world')\n  */\nconst textToRandomSubstring5 = (text) => {\n  let chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n  let randomString = ''\n  for (let i = 0; i < 4; i++) {\n    randomString += chars[Math.floor(Math.random() * chars.length)]\n  }\n  return textToSubstring(text, randomString.length)\n}\n\n/*\n  Returns a random substring of 'text'.\n  The characters of the string will be made of the lowercase letters 'a'"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let i = a\n  while (i <= b) {\n    yield i\n    i += 2\n  }\n}\n\nconst sum = (x, y) => x + y\nconst product = (x, y) => x * y\nconst max = (x, y) => Math.max(x, y)\nconst min = (x, y) => Math.min(x, y)\nconst sumBy = (x, y, f) => sum(sum(x, y), f(x, y))\nconst productBy = (x, y, f) => product(product(x, y), f(x, y))\nconst maxBy = (x, y, f) => max(max(x, y), f(x, y))\nconst minBy = (x, y, f) => min(min(x, y), f(x, y))\n\nconst sumBy2 = (x, y, f) => sum(sum(x, y), f(x, y))\nconst productBy2 = (x, y, f) => product(product(x, y), f(x, y))\nconst maxBy2 = (x, y, f) => max(max(x, y), f(x, y))\nconst minBy2 = (x, y, f) => min(min(x, y), f(x, y))\n\nconst add = (a, b) => a + b\nconst subtract = (a, b) => a - b\nconst multiply = (a, b) => a * b\nconst divide = (a, b) => a / b\nconst remainder = (a, b) => a % b\nconst power = (a, b) => Math.pow(a, b)\nconst mod = (a, b) => a % b\nconst factorial = (a) => a === 0? 1 : multiply(a, product(generateIntegers(a, a - 1), 2))\nconst factorial2 = (a) => a === 0? 1 : multiply(a, productBy2(generateIntegers(a, a - 1), 2))\n\nconst sumBy2 = (x, y, f) => sum(sum(x, y), f(x, y))\nconst productBy2 = (x, y, f) => product(product(x, y), f(x, y))\nconst maxBy2 = (x, y, f) => max(max(x, y), f(x, y))\nconst minBy2 = (x, y, f) => min(min(x, y), f(x, y))\n\nconst add2 = (a, b) => a + b\nconst subtract2 = (a, b) => a - b\nconst multiply2 = (a, b) => a * b\nconst divide2 = (a, b) => a / b\nconst remainder2 = (a, b) => a % b\nconst power2 = (a, b) => Math.pow(a, b)\nconst mod2 = (a, b) => a % b\nconst factorial2 = (a) => a === 0? 1 : multiply2(a, productBy2(generateIntegers(a, a - 1), 2))\n\nconst addBy2 = (x, y, f) => add(add(x, y), f(x, y))\nconst subtractBy2 = (x, y, f) => subtract(subtract(x, y), f(x, y))\nconst multiplyBy2 = (x, y, f) => multiply(multiply(x, y), f(x, y))\nconst divideBy2 = (x, y, f) => divide(divide(x, y), f(x, y))\nconst remainderBy2 = (x, y, f) => remainder(remainder(x, y), f(x, y))\nconst powerBy2 = (x, y, f) => power(power(x, y), f(x, y))\nconst modBy2 = (x, y, f) => mod(mod(x, y), f(x, y))\nconst factorialBy2 = (x, y, f) => factorial(factorial(x, y))\n\nconst sumBy = (x, y, f) => sum(sum(x, y), f(x, y))\nconst productBy = (x, y, f) => product(product(x, y), f(x, y))\nconst maxBy = (x, y, f) => max(max(x, y), f(x, y))\nconst minBy = (x, y, f) => min(min(x, y), f(x, y))\nconst sumBy2 = (x, y, f) => sum(sum(x, y), f(x, y))\nconst productBy2 = (x, y, f) => product(product(x, y), f(x, y))\nconst maxBy2 = (x, y, f) => max(max(x, y), f(x, y))\nconst minBy2 = (x, y, f) => min(min(x, y), f(x, y))\n\nconst sumBy2 = (x, y, f) => sum(sum(x, y), f(x, y))\nconst productBy2 = (x, y, f) => product(product(x, y), f(x, y))\nconst maxBy2 = (x, y, f) => max(max(x, y), f(x, y))\nconst minBy2 = (x, y, f) => min(min(x, y), f(x, y))\n\nconst sumBy3 = (x, y, z, f) => sum(sum(sum(x, y), z), f(x, y, z))\nconst productBy3 = (x, y, z, f) => product(product(product(x, y), z), f(x, y, z))\nconst maxBy3 = (x, y, z, f) => max(max(max(x, y), z), f(x, y, z))\nconst minBy3 = (x, y, z, f) => min(min(min("}
